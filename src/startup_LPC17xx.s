/*
******************************************************************************
File:     startup_LPC17xx.s
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.0   2019-08-22

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/**
**===========================================================================
**  Revisions
**===========================================================================
**       Date        Modification
**       2012-01-11  First issue.
**===========================================================================
*/

/**
**===========================================================================
**  Definitions
**===========================================================================
*/
  .syntax unified
  .cpu cortex-m3
  .fpu softvfp
  .thumb

.global g_pfnVectors
.global Default_Handler

/* Linker script definitions */
/* start address for the initialization values of the .data section */
.word _sidata
/* start address for the .data section */
.word _sdata
/* end address for the .data section */
.word _edata
/* start address for the .bss section */
.word _sbss
/* end address for the .bss section */
.word _ebss

/**
**===========================================================================
**  Program - Reset_Handler
**  Abstract: This code gets called after a reset event.
**    1. Copy .data section from ROM to RAM
**    2. Clear .bss section (Zero init)
**    3. Call system initialzation routine
**    4. Run static constructors
**    5. Enter main
**    6. Loop forever if returning from main
**===========================================================================
*/
  .section  .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */

  /* 1. copy .data section (Copy from ROM to RAM) */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
  ldr r3, =_edata
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
  b LoopFillZerobss

  /* 2. Clear .bss section (Zero init) */
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
  cmp r2, r3
  bcc FillZerobss

  /* 3. Call system initialzation routine */
  bl SystemInit

  /* 4. Run static constructors  */
  bl __libc_init_array

  /* 5. Enter main  */
  bl main

    /* 6. Loop forever if returning from main */
LoopForever:
  b LoopForever


.size Reset_Handler, .-Reset_Handler

/**
**===========================================================================
**  Program - Default_Handler
**  Abstract: This code gets called when the processor receives an
**    unexpected interrupt.
**===========================================================================
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
InfiniteLoop:
  b InfiniteLoop
  .size Default_Handler, .-Default_Handler

/**
**===========================================================================
**  Reset, Exception, and Interrupt vectors
**===========================================================================
*/
  .section  .isr_vector,"a",%progbits
  .type g_pfnVectors, %object
  .size g_pfnVectors, .-g_pfnVectors


g_pfnVectors:
  /* Processor exception vectors */
  .word  _estack                     /* 0: Stack pointer                 */
  .word  Reset_Handler               /* 1: Reset                         */
  .word  NMI_Handler                 /* 2: NMI                           */
  .word  HardFault_Handler           /* 3: HardFault                     */
  .word  MemManage_Handler           /* 4: MemManage                     */
  .word  BusFault_Handler            /* 5: BusFault                      */
  .word  UsageFault_Handler          /* 6: UsageFault                    */
  .word  0                           /* 7: Reserved                      */
  .word  0                           /* 8: Reserved                      */
  .word  0                           /* 9: Reserved                      */
  .word  0                           /* 10: Reserved                     */
  .word  SVC_Handler                 /* 11: SVC                          */
  .word  DebugMon_Handler            /* 12: Reserved for Debug           */
  .word  0                           /* 13: Reserved                     */
  .word  PendSV_Handler              /* 14: PendSV                       */
  .word  SysTick_Handler             /* 15: SysTick                      */

  /* Interrupt Handlers for NXP LPC Peripherals */
  .word  WDT_IRQHandler              /* 16: Watchdog Timer               */
  .word  TIMER0_IRQHandler           /* 17: Timer0                       */
  .word  TIMER1_IRQHandler           /* 18: Timer1                       */
  .word  TIMER2_IRQHandler           /* 19: Timer2                       */
  .word  TIMER3_IRQHandler           /* 20: Timer3                       */
  .word  UART0_IRQHandler            /* 21: UART0                        */
  .word  UART1_IRQHandler            /* 22: UART1                        */
  .word  UART2_IRQHandler            /* 23: UART2                        */
  .word  UART3_IRQHandler            /* 24: UART3                        */
  .word  PWM1_IRQHandler             /* 25: PWM1                         */
  .word  I2C0_IRQHandler             /* 26: I2C0                         */
  .word  I2C1_IRQHandler             /* 27: I2C1                         */
  .word  I2C2_IRQHandler             /* 28: I2C2                         */
  .word  SPI_IRQHandler              /* 29: SPI                          */
  .word  SSP0_IRQHandler             /* 30: SSP0                         */
  .word  SSP1_IRQHandler             /* 31: SSP1                         */
  .word  PLL0_IRQHandler             /* 32: PLL0 Lock (Main PLL)         */
  .word  RTC_IRQHandler              /* 33: Real Time Clock              */
  .word  EINT0_IRQHandler            /* 34: External Interrupt 0         */
  .word  EINT1_IRQHandler            /* 35: External Interrupt 1         */
  .word  EINT2_IRQHandler            /* 36: External Interrupt 2         */
  .word  EINT3_IRQHandler            /* 37: External Interrupt 3         */
  .word  ADC_IRQHandler              /* 38: A/D Converter                */
  .word  BOD_IRQHandler              /* 39: Brown-Out Detect             */
  .word  USB_IRQHandler              /* 40: USB                          */
  .word  CAN_IRQHandler              /* 41: CAN                          */
  .word  DMA_IRQHandler              /* 42: General Purpose DMA          */
  .word  I2S_IRQHandler              /* 43: I2S                          */
  .word  ENET_IRQHandler             /* 44: Ethernet                     */
  .word  RIT_IRQHandler              /* 45: Repetitive Interrupt Timer   */
  .word  MCPWM_IRQHandler            /* 46: Motor Control PWM            */
  .word  QEI_IRQHandler              /* 47: Quadrature Encoder Interface */
  .word  PLL1_IRQHandler             /* 48: PLL1 Lock (USB PLL)          */
  .word  USBActivity_IRQHandler      /* 49: USB Activity                 */
  .word  CANActivity_IRQHandler      /* 50: CAN Activity                 */


/**
**===========================================================================
** Provide weak aliases for each Exception handler to the Default_Handler.
**===========================================================================
*/
  .weak  NMI_Handler
  .thumb_set NMI_Handler,Default_Handler

  .weak  HardFault_Handler
  .thumb_set HardFault_Handler,Default_Handler

  .weak  MemManage_Handler
  .thumb_set MemManage_Handler,Default_Handler

  .weak  BusFault_Handler
  .thumb_set BusFault_Handler,Default_Handler

  .weak  UsageFault_Handler
  .thumb_set UsageFault_Handler,Default_Handler

  .weak  SVC_Handler
  .thumb_set SVC_Handler,Default_Handler

  .weak  DebugMon_Handler
  .thumb_set DebugMon_Handler,Default_Handler

  .weak  PendSV_Handler
  .thumb_set PendSV_Handler,Default_Handler

  .weak  SysTick_Handler
  .thumb_set SysTick_Handler,Default_Handler

  .weak  WDT_IRQHandler
  .thumb_set WDT_IRQHandler,Default_Handler

  .weak  TIMER0_IRQHandler
  .thumb_set TIMER0_IRQHandler,Default_Handler

  .weak  TIMER1_IRQHandler
  .thumb_set TIMER1_IRQHandler,Default_Handler

  .weak  TIMER2_IRQHandler
  .thumb_set TIMER2_IRQHandler,Default_Handler

  .weak  TIMER3_IRQHandler
  .thumb_set TIMER3_IRQHandler,Default_Handler

  .weak  UART0_IRQHandler
  .thumb_set UART0_IRQHandler,Default_Handler

  .weak  UART1_IRQHandler
  .thumb_set UART1_IRQHandler,Default_Handler

  .weak  UART2_IRQHandler
  .thumb_set UART2_IRQHandler,Default_Handler

  .weak  UART3_IRQHandler
  .thumb_set UART3_IRQHandler,Default_Handler

  .weak  PWM1_IRQHandler
  .thumb_set PWM1_IRQHandler,Default_Handler

  .weak  I2C0_IRQHandler
  .thumb_set I2C0_IRQHandler,Default_Handler

  .weak  I2C1_IRQHandler
  .thumb_set I2C1_IRQHandler,Default_Handler

  .weak  I2C2_IRQHandler
  .thumb_set I2C2_IRQHandler,Default_Handler

  .weak  SPI_IRQHandler
  .thumb_set SPI_IRQHandler,Default_Handler

  .weak  SSP0_IRQHandler
  .thumb_set SSP0_IRQHandler,Default_Handler

  .weak  SSP1_IRQHandler
  .thumb_set SSP1_IRQHandler,Default_Handler

  .weak  PLL0_IRQHandler
  .thumb_set PLL0_IRQHandler,Default_Handler

  .weak  RTC_IRQHandler
  .thumb_set RTC_IRQHandler,Default_Handler

  .weak  EINT0_IRQHandler
  .thumb_set EINT0_IRQHandler,Default_Handler

  .weak  EINT1_IRQHandler
  .thumb_set EINT1_IRQHandler,Default_Handler

  .weak  EINT2_IRQHandler
  .thumb_set EINT2_IRQHandler,Default_Handler

  .weak  EINT3_IRQHandler
  .thumb_set EINT3_IRQHandler,Default_Handler

  .weak  ADC_IRQHandler
  .thumb_set ADC_IRQHandler,Default_Handler

  .weak  BOD_IRQHandler
  .thumb_set BOD_IRQHandler,Default_Handler

  .weak  USB_IRQHandler
  .thumb_set USB_IRQHandler,Default_Handler

  .weak  CAN_IRQHandler
  .thumb_set CAN_IRQHandler,Default_Handler

  .weak  DMA_IRQHandler
  .thumb_set DMA_IRQHandler,Default_Handler

  .weak  I2S_IRQHandler
  .thumb_set I2S_IRQHandler,Default_Handler

  .weak  ENET_IRQHandler
  .thumb_set ENET_IRQHandler,Default_Handler

  .weak  RIT_IRQHandler
  .thumb_set RIT_IRQHandler,Default_Handler

  .weak  MCPWM_IRQHandler
  .thumb_set MCPWM_IRQHandler,Default_Handler

  .weak  QEI_IRQHandler
  .thumb_set QEI_IRQHandler,Default_Handler

  .weak  PLL1_IRQHandler
  .thumb_set PLL1_IRQHandler,Default_Handler

  .weak  USBActivity_IRQHandler
  .thumb_set USBActivity_IRQHandler,Default_Handler

  .weak  CANActivity_IRQHandler
  .thumb_set CANActivity_IRQHandler,Default_Handler

.end
