
C:\Users\Devsys05\Desktop\DlmsModbusConverter\Debug\DlmsModbusConverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000cc  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002beb0  000000cc  000000cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  0002bf7c  0002bf7c  0003bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0002d1b4  0002d1b4  0003d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0002d1bc  0002d1bc  0003d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0002d1c0  0002d1c0  0003d1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000013c  10000000  0002d1c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000708  10000140  0002d300  00040140  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  10000848  0002d300  00040848  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0004013c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000272e3  00000000  00000000  00040165  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003947  00000000  00000000  00067448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001770  00000000  00000000  0006ad90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001600  00000000  00000000  0006c500  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000af87  00000000  00000000  0006db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000aa67  00000000  00000000  00078a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000834ee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007218  00000000  00000000  0008356c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0008a784  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  0008a820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000000cc <__do_global_dtors_aux>:
      cc:	b510      	push	{r4, lr}
      ce:	4c05      	ldr	r4, [pc, #20]	; (e4 <__do_global_dtors_aux+0x18>)
      d0:	7823      	ldrb	r3, [r4, #0]
      d2:	b933      	cbnz	r3, e2 <__do_global_dtors_aux+0x16>
      d4:	4b04      	ldr	r3, [pc, #16]	; (e8 <__do_global_dtors_aux+0x1c>)
      d6:	b113      	cbz	r3, de <__do_global_dtors_aux+0x12>
      d8:	4804      	ldr	r0, [pc, #16]	; (ec <__do_global_dtors_aux+0x20>)
      da:	f3af 8000 	nop.w
      de:	2301      	movs	r3, #1
      e0:	7023      	strb	r3, [r4, #0]
      e2:	bd10      	pop	{r4, pc}
      e4:	10000140 	.word	0x10000140
      e8:	00000000 	.word	0x00000000
      ec:	0002bf64 	.word	0x0002bf64

000000f0 <frame_dummy>:
      f0:	b508      	push	{r3, lr}
      f2:	4b03      	ldr	r3, [pc, #12]	; (100 <_Min_Stack_Size>)
      f4:	b11b      	cbz	r3, fe <frame_dummy+0xe>
      f6:	4903      	ldr	r1, [pc, #12]	; (104 <_Min_Stack_Size+0x4>)
      f8:	4803      	ldr	r0, [pc, #12]	; (108 <_Min_Stack_Size+0x8>)
      fa:	f3af 8000 	nop.w
      fe:	bd08      	pop	{r3, pc}
     100:	00000000 	.word	0x00000000
     104:	10000144 	.word	0x10000144
     108:	0002bf64 	.word	0x0002bf64

0000010c <strcmp>:
     10c:	f810 2b01 	ldrb.w	r2, [r0], #1
     110:	f811 3b01 	ldrb.w	r3, [r1], #1
     114:	2a01      	cmp	r2, #1
     116:	bf28      	it	cs
     118:	429a      	cmpcs	r2, r3
     11a:	d0f7      	beq.n	10c <strcmp>
     11c:	1ad0      	subs	r0, r2, r3
     11e:	4770      	bx	lr

00000120 <strlen>:
     120:	4603      	mov	r3, r0
     122:	f813 2b01 	ldrb.w	r2, [r3], #1
     126:	2a00      	cmp	r2, #0
     128:	d1fb      	bne.n	122 <strlen+0x2>
     12a:	1a18      	subs	r0, r3, r0
     12c:	3801      	subs	r0, #1
     12e:	4770      	bx	lr

00000130 <__aeabi_drsub>:
     130:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     134:	e002      	b.n	13c <__adddf3>
     136:	bf00      	nop

00000138 <__aeabi_dsub>:
     138:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000013c <__adddf3>:
     13c:	b530      	push	{r4, r5, lr}
     13e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     142:	ea4f 0543 	mov.w	r5, r3, lsl #1
     146:	ea94 0f05 	teq	r4, r5
     14a:	bf08      	it	eq
     14c:	ea90 0f02 	teqeq	r0, r2
     150:	bf1f      	itttt	ne
     152:	ea54 0c00 	orrsne.w	ip, r4, r0
     156:	ea55 0c02 	orrsne.w	ip, r5, r2
     15a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     15e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     162:	f000 80e2 	beq.w	32a <__adddf3+0x1ee>
     166:	ea4f 5454 	mov.w	r4, r4, lsr #21
     16a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     16e:	bfb8      	it	lt
     170:	426d      	neglt	r5, r5
     172:	dd0c      	ble.n	18e <__adddf3+0x52>
     174:	442c      	add	r4, r5
     176:	ea80 0202 	eor.w	r2, r0, r2
     17a:	ea81 0303 	eor.w	r3, r1, r3
     17e:	ea82 0000 	eor.w	r0, r2, r0
     182:	ea83 0101 	eor.w	r1, r3, r1
     186:	ea80 0202 	eor.w	r2, r0, r2
     18a:	ea81 0303 	eor.w	r3, r1, r3
     18e:	2d36      	cmp	r5, #54	; 0x36
     190:	bf88      	it	hi
     192:	bd30      	pophi	{r4, r5, pc}
     194:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     198:	ea4f 3101 	mov.w	r1, r1, lsl #12
     19c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1a4:	d002      	beq.n	1ac <__adddf3+0x70>
     1a6:	4240      	negs	r0, r0
     1a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1b8:	d002      	beq.n	1c0 <__adddf3+0x84>
     1ba:	4252      	negs	r2, r2
     1bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1c0:	ea94 0f05 	teq	r4, r5
     1c4:	f000 80a7 	beq.w	316 <__adddf3+0x1da>
     1c8:	f1a4 0401 	sub.w	r4, r4, #1
     1cc:	f1d5 0e20 	rsbs	lr, r5, #32
     1d0:	db0d      	blt.n	1ee <__adddf3+0xb2>
     1d2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1d6:	fa22 f205 	lsr.w	r2, r2, r5
     1da:	1880      	adds	r0, r0, r2
     1dc:	f141 0100 	adc.w	r1, r1, #0
     1e0:	fa03 f20e 	lsl.w	r2, r3, lr
     1e4:	1880      	adds	r0, r0, r2
     1e6:	fa43 f305 	asr.w	r3, r3, r5
     1ea:	4159      	adcs	r1, r3
     1ec:	e00e      	b.n	20c <__adddf3+0xd0>
     1ee:	f1a5 0520 	sub.w	r5, r5, #32
     1f2:	f10e 0e20 	add.w	lr, lr, #32
     1f6:	2a01      	cmp	r2, #1
     1f8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1fc:	bf28      	it	cs
     1fe:	f04c 0c02 	orrcs.w	ip, ip, #2
     202:	fa43 f305 	asr.w	r3, r3, r5
     206:	18c0      	adds	r0, r0, r3
     208:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     20c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     210:	d507      	bpl.n	222 <__adddf3+0xe6>
     212:	f04f 0e00 	mov.w	lr, #0
     216:	f1dc 0c00 	rsbs	ip, ip, #0
     21a:	eb7e 0000 	sbcs.w	r0, lr, r0
     21e:	eb6e 0101 	sbc.w	r1, lr, r1
     222:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     226:	d31b      	bcc.n	260 <__adddf3+0x124>
     228:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     22c:	d30c      	bcc.n	248 <__adddf3+0x10c>
     22e:	0849      	lsrs	r1, r1, #1
     230:	ea5f 0030 	movs.w	r0, r0, rrx
     234:	ea4f 0c3c 	mov.w	ip, ip, rrx
     238:	f104 0401 	add.w	r4, r4, #1
     23c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     240:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     244:	f080 809a 	bcs.w	37c <__adddf3+0x240>
     248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     24c:	bf08      	it	eq
     24e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     252:	f150 0000 	adcs.w	r0, r0, #0
     256:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     25a:	ea41 0105 	orr.w	r1, r1, r5
     25e:	bd30      	pop	{r4, r5, pc}
     260:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     264:	4140      	adcs	r0, r0
     266:	eb41 0101 	adc.w	r1, r1, r1
     26a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     26e:	f1a4 0401 	sub.w	r4, r4, #1
     272:	d1e9      	bne.n	248 <__adddf3+0x10c>
     274:	f091 0f00 	teq	r1, #0
     278:	bf04      	itt	eq
     27a:	4601      	moveq	r1, r0
     27c:	2000      	moveq	r0, #0
     27e:	fab1 f381 	clz	r3, r1
     282:	bf08      	it	eq
     284:	3320      	addeq	r3, #32
     286:	f1a3 030b 	sub.w	r3, r3, #11
     28a:	f1b3 0220 	subs.w	r2, r3, #32
     28e:	da0c      	bge.n	2aa <__adddf3+0x16e>
     290:	320c      	adds	r2, #12
     292:	dd08      	ble.n	2a6 <__adddf3+0x16a>
     294:	f102 0c14 	add.w	ip, r2, #20
     298:	f1c2 020c 	rsb	r2, r2, #12
     29c:	fa01 f00c 	lsl.w	r0, r1, ip
     2a0:	fa21 f102 	lsr.w	r1, r1, r2
     2a4:	e00c      	b.n	2c0 <__adddf3+0x184>
     2a6:	f102 0214 	add.w	r2, r2, #20
     2aa:	bfd8      	it	le
     2ac:	f1c2 0c20 	rsble	ip, r2, #32
     2b0:	fa01 f102 	lsl.w	r1, r1, r2
     2b4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2b8:	bfdc      	itt	le
     2ba:	ea41 010c 	orrle.w	r1, r1, ip
     2be:	4090      	lslle	r0, r2
     2c0:	1ae4      	subs	r4, r4, r3
     2c2:	bfa2      	ittt	ge
     2c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2c8:	4329      	orrge	r1, r5
     2ca:	bd30      	popge	{r4, r5, pc}
     2cc:	ea6f 0404 	mvn.w	r4, r4
     2d0:	3c1f      	subs	r4, #31
     2d2:	da1c      	bge.n	30e <__adddf3+0x1d2>
     2d4:	340c      	adds	r4, #12
     2d6:	dc0e      	bgt.n	2f6 <__adddf3+0x1ba>
     2d8:	f104 0414 	add.w	r4, r4, #20
     2dc:	f1c4 0220 	rsb	r2, r4, #32
     2e0:	fa20 f004 	lsr.w	r0, r0, r4
     2e4:	fa01 f302 	lsl.w	r3, r1, r2
     2e8:	ea40 0003 	orr.w	r0, r0, r3
     2ec:	fa21 f304 	lsr.w	r3, r1, r4
     2f0:	ea45 0103 	orr.w	r1, r5, r3
     2f4:	bd30      	pop	{r4, r5, pc}
     2f6:	f1c4 040c 	rsb	r4, r4, #12
     2fa:	f1c4 0220 	rsb	r2, r4, #32
     2fe:	fa20 f002 	lsr.w	r0, r0, r2
     302:	fa01 f304 	lsl.w	r3, r1, r4
     306:	ea40 0003 	orr.w	r0, r0, r3
     30a:	4629      	mov	r1, r5
     30c:	bd30      	pop	{r4, r5, pc}
     30e:	fa21 f004 	lsr.w	r0, r1, r4
     312:	4629      	mov	r1, r5
     314:	bd30      	pop	{r4, r5, pc}
     316:	f094 0f00 	teq	r4, #0
     31a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     31e:	bf06      	itte	eq
     320:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     324:	3401      	addeq	r4, #1
     326:	3d01      	subne	r5, #1
     328:	e74e      	b.n	1c8 <__adddf3+0x8c>
     32a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     32e:	bf18      	it	ne
     330:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     334:	d029      	beq.n	38a <__adddf3+0x24e>
     336:	ea94 0f05 	teq	r4, r5
     33a:	bf08      	it	eq
     33c:	ea90 0f02 	teqeq	r0, r2
     340:	d005      	beq.n	34e <__adddf3+0x212>
     342:	ea54 0c00 	orrs.w	ip, r4, r0
     346:	bf04      	itt	eq
     348:	4619      	moveq	r1, r3
     34a:	4610      	moveq	r0, r2
     34c:	bd30      	pop	{r4, r5, pc}
     34e:	ea91 0f03 	teq	r1, r3
     352:	bf1e      	ittt	ne
     354:	2100      	movne	r1, #0
     356:	2000      	movne	r0, #0
     358:	bd30      	popne	{r4, r5, pc}
     35a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     35e:	d105      	bne.n	36c <__adddf3+0x230>
     360:	0040      	lsls	r0, r0, #1
     362:	4149      	adcs	r1, r1
     364:	bf28      	it	cs
     366:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     36a:	bd30      	pop	{r4, r5, pc}
     36c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     370:	bf3c      	itt	cc
     372:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     376:	bd30      	popcc	{r4, r5, pc}
     378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     37c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     380:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     384:	f04f 0000 	mov.w	r0, #0
     388:	bd30      	pop	{r4, r5, pc}
     38a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     38e:	bf1a      	itte	ne
     390:	4619      	movne	r1, r3
     392:	4610      	movne	r0, r2
     394:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     398:	bf1c      	itt	ne
     39a:	460b      	movne	r3, r1
     39c:	4602      	movne	r2, r0
     39e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3a2:	bf06      	itte	eq
     3a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3a8:	ea91 0f03 	teqeq	r1, r3
     3ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	bf00      	nop

000003b4 <__aeabi_ui2d>:
     3b4:	f090 0f00 	teq	r0, #0
     3b8:	bf04      	itt	eq
     3ba:	2100      	moveq	r1, #0
     3bc:	4770      	bxeq	lr
     3be:	b530      	push	{r4, r5, lr}
     3c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3c8:	f04f 0500 	mov.w	r5, #0
     3cc:	f04f 0100 	mov.w	r1, #0
     3d0:	e750      	b.n	274 <__adddf3+0x138>
     3d2:	bf00      	nop

000003d4 <__aeabi_i2d>:
     3d4:	f090 0f00 	teq	r0, #0
     3d8:	bf04      	itt	eq
     3da:	2100      	moveq	r1, #0
     3dc:	4770      	bxeq	lr
     3de:	b530      	push	{r4, r5, lr}
     3e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3ec:	bf48      	it	mi
     3ee:	4240      	negmi	r0, r0
     3f0:	f04f 0100 	mov.w	r1, #0
     3f4:	e73e      	b.n	274 <__adddf3+0x138>
     3f6:	bf00      	nop

000003f8 <__aeabi_f2d>:
     3f8:	0042      	lsls	r2, r0, #1
     3fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3fe:	ea4f 0131 	mov.w	r1, r1, rrx
     402:	ea4f 7002 	mov.w	r0, r2, lsl #28
     406:	bf1f      	itttt	ne
     408:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     40c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     410:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     414:	4770      	bxne	lr
     416:	f092 0f00 	teq	r2, #0
     41a:	bf14      	ite	ne
     41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     420:	4770      	bxeq	lr
     422:	b530      	push	{r4, r5, lr}
     424:	f44f 7460 	mov.w	r4, #896	; 0x380
     428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     42c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     430:	e720      	b.n	274 <__adddf3+0x138>
     432:	bf00      	nop

00000434 <__aeabi_ul2d>:
     434:	ea50 0201 	orrs.w	r2, r0, r1
     438:	bf08      	it	eq
     43a:	4770      	bxeq	lr
     43c:	b530      	push	{r4, r5, lr}
     43e:	f04f 0500 	mov.w	r5, #0
     442:	e00a      	b.n	45a <__aeabi_l2d+0x16>

00000444 <__aeabi_l2d>:
     444:	ea50 0201 	orrs.w	r2, r0, r1
     448:	bf08      	it	eq
     44a:	4770      	bxeq	lr
     44c:	b530      	push	{r4, r5, lr}
     44e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     452:	d502      	bpl.n	45a <__aeabi_l2d+0x16>
     454:	4240      	negs	r0, r0
     456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     45a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     45e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     462:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     466:	f43f aedc 	beq.w	222 <__adddf3+0xe6>
     46a:	f04f 0203 	mov.w	r2, #3
     46e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     472:	bf18      	it	ne
     474:	3203      	addne	r2, #3
     476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     47a:	bf18      	it	ne
     47c:	3203      	addne	r2, #3
     47e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     482:	f1c2 0320 	rsb	r3, r2, #32
     486:	fa00 fc03 	lsl.w	ip, r0, r3
     48a:	fa20 f002 	lsr.w	r0, r0, r2
     48e:	fa01 fe03 	lsl.w	lr, r1, r3
     492:	ea40 000e 	orr.w	r0, r0, lr
     496:	fa21 f102 	lsr.w	r1, r1, r2
     49a:	4414      	add	r4, r2
     49c:	e6c1      	b.n	222 <__adddf3+0xe6>
     49e:	bf00      	nop

000004a0 <__aeabi_dmul>:
     4a0:	b570      	push	{r4, r5, r6, lr}
     4a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4ae:	bf1d      	ittte	ne
     4b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4b4:	ea94 0f0c 	teqne	r4, ip
     4b8:	ea95 0f0c 	teqne	r5, ip
     4bc:	f000 f8de 	bleq	67c <__aeabi_dmul+0x1dc>
     4c0:	442c      	add	r4, r5
     4c2:	ea81 0603 	eor.w	r6, r1, r3
     4c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4d2:	bf18      	it	ne
     4d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4e0:	d038      	beq.n	554 <__aeabi_dmul+0xb4>
     4e2:	fba0 ce02 	umull	ip, lr, r0, r2
     4e6:	f04f 0500 	mov.w	r5, #0
     4ea:	fbe1 e502 	umlal	lr, r5, r1, r2
     4ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4f2:	fbe0 e503 	umlal	lr, r5, r0, r3
     4f6:	f04f 0600 	mov.w	r6, #0
     4fa:	fbe1 5603 	umlal	r5, r6, r1, r3
     4fe:	f09c 0f00 	teq	ip, #0
     502:	bf18      	it	ne
     504:	f04e 0e01 	orrne.w	lr, lr, #1
     508:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     50c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     510:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     514:	d204      	bcs.n	520 <__aeabi_dmul+0x80>
     516:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     51a:	416d      	adcs	r5, r5
     51c:	eb46 0606 	adc.w	r6, r6, r6
     520:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     524:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     528:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     52c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     530:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     534:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     538:	bf88      	it	hi
     53a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     53e:	d81e      	bhi.n	57e <__aeabi_dmul+0xde>
     540:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     544:	bf08      	it	eq
     546:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     54a:	f150 0000 	adcs.w	r0, r0, #0
     54e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     552:	bd70      	pop	{r4, r5, r6, pc}
     554:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     558:	ea46 0101 	orr.w	r1, r6, r1
     55c:	ea40 0002 	orr.w	r0, r0, r2
     560:	ea81 0103 	eor.w	r1, r1, r3
     564:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     568:	bfc2      	ittt	gt
     56a:	ebd4 050c 	rsbsgt	r5, r4, ip
     56e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     572:	bd70      	popgt	{r4, r5, r6, pc}
     574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     578:	f04f 0e00 	mov.w	lr, #0
     57c:	3c01      	subs	r4, #1
     57e:	f300 80ab 	bgt.w	6d8 <__aeabi_dmul+0x238>
     582:	f114 0f36 	cmn.w	r4, #54	; 0x36
     586:	bfde      	ittt	le
     588:	2000      	movle	r0, #0
     58a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     58e:	bd70      	pople	{r4, r5, r6, pc}
     590:	f1c4 0400 	rsb	r4, r4, #0
     594:	3c20      	subs	r4, #32
     596:	da35      	bge.n	604 <__aeabi_dmul+0x164>
     598:	340c      	adds	r4, #12
     59a:	dc1b      	bgt.n	5d4 <__aeabi_dmul+0x134>
     59c:	f104 0414 	add.w	r4, r4, #20
     5a0:	f1c4 0520 	rsb	r5, r4, #32
     5a4:	fa00 f305 	lsl.w	r3, r0, r5
     5a8:	fa20 f004 	lsr.w	r0, r0, r4
     5ac:	fa01 f205 	lsl.w	r2, r1, r5
     5b0:	ea40 0002 	orr.w	r0, r0, r2
     5b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5c0:	fa21 f604 	lsr.w	r6, r1, r4
     5c4:	eb42 0106 	adc.w	r1, r2, r6
     5c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5cc:	bf08      	it	eq
     5ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5d2:	bd70      	pop	{r4, r5, r6, pc}
     5d4:	f1c4 040c 	rsb	r4, r4, #12
     5d8:	f1c4 0520 	rsb	r5, r4, #32
     5dc:	fa00 f304 	lsl.w	r3, r0, r4
     5e0:	fa20 f005 	lsr.w	r0, r0, r5
     5e4:	fa01 f204 	lsl.w	r2, r1, r4
     5e8:	ea40 0002 	orr.w	r0, r0, r2
     5ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f4:	f141 0100 	adc.w	r1, r1, #0
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 0520 	rsb	r5, r4, #32
     608:	fa00 f205 	lsl.w	r2, r0, r5
     60c:	ea4e 0e02 	orr.w	lr, lr, r2
     610:	fa20 f304 	lsr.w	r3, r0, r4
     614:	fa01 f205 	lsl.w	r2, r1, r5
     618:	ea43 0302 	orr.w	r3, r3, r2
     61c:	fa21 f004 	lsr.w	r0, r1, r4
     620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     624:	fa21 f204 	lsr.w	r2, r1, r4
     628:	ea20 0002 	bic.w	r0, r0, r2
     62c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     634:	bf08      	it	eq
     636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     63a:	bd70      	pop	{r4, r5, r6, pc}
     63c:	f094 0f00 	teq	r4, #0
     640:	d10f      	bne.n	662 <__aeabi_dmul+0x1c2>
     642:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     646:	0040      	lsls	r0, r0, #1
     648:	eb41 0101 	adc.w	r1, r1, r1
     64c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     650:	bf08      	it	eq
     652:	3c01      	subeq	r4, #1
     654:	d0f7      	beq.n	646 <__aeabi_dmul+0x1a6>
     656:	ea41 0106 	orr.w	r1, r1, r6
     65a:	f095 0f00 	teq	r5, #0
     65e:	bf18      	it	ne
     660:	4770      	bxne	lr
     662:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     666:	0052      	lsls	r2, r2, #1
     668:	eb43 0303 	adc.w	r3, r3, r3
     66c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     670:	bf08      	it	eq
     672:	3d01      	subeq	r5, #1
     674:	d0f7      	beq.n	666 <__aeabi_dmul+0x1c6>
     676:	ea43 0306 	orr.w	r3, r3, r6
     67a:	4770      	bx	lr
     67c:	ea94 0f0c 	teq	r4, ip
     680:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     684:	bf18      	it	ne
     686:	ea95 0f0c 	teqne	r5, ip
     68a:	d00c      	beq.n	6a6 <__aeabi_dmul+0x206>
     68c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     690:	bf18      	it	ne
     692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     696:	d1d1      	bne.n	63c <__aeabi_dmul+0x19c>
     698:	ea81 0103 	eor.w	r1, r1, r3
     69c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6a0:	f04f 0000 	mov.w	r0, #0
     6a4:	bd70      	pop	{r4, r5, r6, pc}
     6a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6aa:	bf06      	itte	eq
     6ac:	4610      	moveq	r0, r2
     6ae:	4619      	moveq	r1, r3
     6b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6b4:	d019      	beq.n	6ea <__aeabi_dmul+0x24a>
     6b6:	ea94 0f0c 	teq	r4, ip
     6ba:	d102      	bne.n	6c2 <__aeabi_dmul+0x222>
     6bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6c0:	d113      	bne.n	6ea <__aeabi_dmul+0x24a>
     6c2:	ea95 0f0c 	teq	r5, ip
     6c6:	d105      	bne.n	6d4 <__aeabi_dmul+0x234>
     6c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6cc:	bf1c      	itt	ne
     6ce:	4610      	movne	r0, r2
     6d0:	4619      	movne	r1, r3
     6d2:	d10a      	bne.n	6ea <__aeabi_dmul+0x24a>
     6d4:	ea81 0103 	eor.w	r1, r1, r3
     6d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6e4:	f04f 0000 	mov.w	r0, #0
     6e8:	bd70      	pop	{r4, r5, r6, pc}
     6ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6f2:	bd70      	pop	{r4, r5, r6, pc}

000006f4 <__aeabi_ddiv>:
     6f4:	b570      	push	{r4, r5, r6, lr}
     6f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     702:	bf1d      	ittte	ne
     704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     708:	ea94 0f0c 	teqne	r4, ip
     70c:	ea95 0f0c 	teqne	r5, ip
     710:	f000 f8a7 	bleq	862 <__aeabi_ddiv+0x16e>
     714:	eba4 0405 	sub.w	r4, r4, r5
     718:	ea81 0e03 	eor.w	lr, r1, r3
     71c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     720:	ea4f 3101 	mov.w	r1, r1, lsl #12
     724:	f000 8088 	beq.w	838 <__aeabi_ddiv+0x144>
     728:	ea4f 3303 	mov.w	r3, r3, lsl #12
     72c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     730:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     734:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     738:	ea4f 2202 	mov.w	r2, r2, lsl #8
     73c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     740:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     744:	ea4f 2600 	mov.w	r6, r0, lsl #8
     748:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     74c:	429d      	cmp	r5, r3
     74e:	bf08      	it	eq
     750:	4296      	cmpeq	r6, r2
     752:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     756:	f504 7440 	add.w	r4, r4, #768	; 0x300
     75a:	d202      	bcs.n	762 <__aeabi_ddiv+0x6e>
     75c:	085b      	lsrs	r3, r3, #1
     75e:	ea4f 0232 	mov.w	r2, r2, rrx
     762:	1ab6      	subs	r6, r6, r2
     764:	eb65 0503 	sbc.w	r5, r5, r3
     768:	085b      	lsrs	r3, r3, #1
     76a:	ea4f 0232 	mov.w	r2, r2, rrx
     76e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     772:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 000c 	orrcs.w	r0, r0, ip
     788:	085b      	lsrs	r3, r3, #1
     78a:	ea4f 0232 	mov.w	r2, r2, rrx
     78e:	ebb6 0e02 	subs.w	lr, r6, r2
     792:	eb75 0e03 	sbcs.w	lr, r5, r3
     796:	bf22      	ittt	cs
     798:	1ab6      	subcs	r6, r6, r2
     79a:	4675      	movcs	r5, lr
     79c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7a0:	085b      	lsrs	r3, r3, #1
     7a2:	ea4f 0232 	mov.w	r2, r2, rrx
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7d0:	ea55 0e06 	orrs.w	lr, r5, r6
     7d4:	d018      	beq.n	808 <__aeabi_ddiv+0x114>
     7d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7de:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7f2:	d1c0      	bne.n	776 <__aeabi_ddiv+0x82>
     7f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7f8:	d10b      	bne.n	812 <__aeabi_ddiv+0x11e>
     7fa:	ea41 0100 	orr.w	r1, r1, r0
     7fe:	f04f 0000 	mov.w	r0, #0
     802:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     806:	e7b6      	b.n	776 <__aeabi_ddiv+0x82>
     808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     80c:	bf04      	itt	eq
     80e:	4301      	orreq	r1, r0
     810:	2000      	moveq	r0, #0
     812:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     816:	bf88      	it	hi
     818:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     81c:	f63f aeaf 	bhi.w	57e <__aeabi_dmul+0xde>
     820:	ebb5 0c03 	subs.w	ip, r5, r3
     824:	bf04      	itt	eq
     826:	ebb6 0c02 	subseq.w	ip, r6, r2
     82a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     82e:	f150 0000 	adcs.w	r0, r0, #0
     832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     836:	bd70      	pop	{r4, r5, r6, pc}
     838:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     83c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     840:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     844:	bfc2      	ittt	gt
     846:	ebd4 050c 	rsbsgt	r5, r4, ip
     84a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     84e:	bd70      	popgt	{r4, r5, r6, pc}
     850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     854:	f04f 0e00 	mov.w	lr, #0
     858:	3c01      	subs	r4, #1
     85a:	e690      	b.n	57e <__aeabi_dmul+0xde>
     85c:	ea45 0e06 	orr.w	lr, r5, r6
     860:	e68d      	b.n	57e <__aeabi_dmul+0xde>
     862:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     866:	ea94 0f0c 	teq	r4, ip
     86a:	bf08      	it	eq
     86c:	ea95 0f0c 	teqeq	r5, ip
     870:	f43f af3b 	beq.w	6ea <__aeabi_dmul+0x24a>
     874:	ea94 0f0c 	teq	r4, ip
     878:	d10a      	bne.n	890 <__aeabi_ddiv+0x19c>
     87a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     87e:	f47f af34 	bne.w	6ea <__aeabi_dmul+0x24a>
     882:	ea95 0f0c 	teq	r5, ip
     886:	f47f af25 	bne.w	6d4 <__aeabi_dmul+0x234>
     88a:	4610      	mov	r0, r2
     88c:	4619      	mov	r1, r3
     88e:	e72c      	b.n	6ea <__aeabi_dmul+0x24a>
     890:	ea95 0f0c 	teq	r5, ip
     894:	d106      	bne.n	8a4 <__aeabi_ddiv+0x1b0>
     896:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     89a:	f43f aefd 	beq.w	698 <__aeabi_dmul+0x1f8>
     89e:	4610      	mov	r0, r2
     8a0:	4619      	mov	r1, r3
     8a2:	e722      	b.n	6ea <__aeabi_dmul+0x24a>
     8a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8a8:	bf18      	it	ne
     8aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8ae:	f47f aec5 	bne.w	63c <__aeabi_dmul+0x19c>
     8b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8b6:	f47f af0d 	bne.w	6d4 <__aeabi_dmul+0x234>
     8ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8be:	f47f aeeb 	bne.w	698 <__aeabi_dmul+0x1f8>
     8c2:	e712      	b.n	6ea <__aeabi_dmul+0x24a>

000008c4 <__aeabi_d2iz>:
     8c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8cc:	d215      	bcs.n	8fa <__aeabi_d2iz+0x36>
     8ce:	d511      	bpl.n	8f4 <__aeabi_d2iz+0x30>
     8d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8d8:	d912      	bls.n	900 <__aeabi_d2iz+0x3c>
     8da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8ea:	fa23 f002 	lsr.w	r0, r3, r2
     8ee:	bf18      	it	ne
     8f0:	4240      	negne	r0, r0
     8f2:	4770      	bx	lr
     8f4:	f04f 0000 	mov.w	r0, #0
     8f8:	4770      	bx	lr
     8fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8fe:	d105      	bne.n	90c <__aeabi_d2iz+0x48>
     900:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     904:	bf08      	it	eq
     906:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     90a:	4770      	bx	lr
     90c:	f04f 0000 	mov.w	r0, #0
     910:	4770      	bx	lr
     912:	bf00      	nop

00000914 <__aeabi_d2uiz>:
     914:	004a      	lsls	r2, r1, #1
     916:	d211      	bcs.n	93c <__aeabi_d2uiz+0x28>
     918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     91c:	d211      	bcs.n	942 <__aeabi_d2uiz+0x2e>
     91e:	d50d      	bpl.n	93c <__aeabi_d2uiz+0x28>
     920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     928:	d40e      	bmi.n	948 <__aeabi_d2uiz+0x34>
     92a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     936:	fa23 f002 	lsr.w	r0, r3, r2
     93a:	4770      	bx	lr
     93c:	f04f 0000 	mov.w	r0, #0
     940:	4770      	bx	lr
     942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     946:	d102      	bne.n	94e <__aeabi_d2uiz+0x3a>
     948:	f04f 30ff 	mov.w	r0, #4294967295
     94c:	4770      	bx	lr
     94e:	f04f 0000 	mov.w	r0, #0
     952:	4770      	bx	lr

00000954 <__aeabi_f2iz>:
     954:	ea4f 0240 	mov.w	r2, r0, lsl #1
     958:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     95c:	d30f      	bcc.n	97e <__aeabi_f2iz+0x2a>
     95e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     962:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     966:	d90d      	bls.n	984 <__aeabi_f2iz+0x30>
     968:	ea4f 2300 	mov.w	r3, r0, lsl #8
     96c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     970:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     974:	fa23 f002 	lsr.w	r0, r3, r2
     978:	bf18      	it	ne
     97a:	4240      	negne	r0, r0
     97c:	4770      	bx	lr
     97e:	f04f 0000 	mov.w	r0, #0
     982:	4770      	bx	lr
     984:	f112 0f61 	cmn.w	r2, #97	; 0x61
     988:	d101      	bne.n	98e <__aeabi_f2iz+0x3a>
     98a:	0242      	lsls	r2, r0, #9
     98c:	d105      	bne.n	99a <__aeabi_f2iz+0x46>
     98e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     992:	bf08      	it	eq
     994:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     998:	4770      	bx	lr
     99a:	f04f 0000 	mov.w	r0, #0
     99e:	4770      	bx	lr

000009a0 <__aeabi_ldivmod>:
     9a0:	b97b      	cbnz	r3, 9c2 <__aeabi_ldivmod+0x22>
     9a2:	b972      	cbnz	r2, 9c2 <__aeabi_ldivmod+0x22>
     9a4:	2900      	cmp	r1, #0
     9a6:	bfbe      	ittt	lt
     9a8:	2000      	movlt	r0, #0
     9aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     9ae:	e006      	blt.n	9be <__aeabi_ldivmod+0x1e>
     9b0:	bf08      	it	eq
     9b2:	2800      	cmpeq	r0, #0
     9b4:	bf1c      	itt	ne
     9b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     9ba:	f04f 30ff 	movne.w	r0, #4294967295
     9be:	f000 b9b5 	b.w	d2c <__aeabi_idiv0>
     9c2:	f1ad 0c08 	sub.w	ip, sp, #8
     9c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9ca:	2900      	cmp	r1, #0
     9cc:	db09      	blt.n	9e2 <__aeabi_ldivmod+0x42>
     9ce:	2b00      	cmp	r3, #0
     9d0:	db1a      	blt.n	a08 <__aeabi_ldivmod+0x68>
     9d2:	f000 f835 	bl	a40 <__udivmoddi4>
     9d6:	f8dd e004 	ldr.w	lr, [sp, #4]
     9da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9de:	b004      	add	sp, #16
     9e0:	4770      	bx	lr
     9e2:	4240      	negs	r0, r0
     9e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     9e8:	2b00      	cmp	r3, #0
     9ea:	db1b      	blt.n	a24 <__aeabi_ldivmod+0x84>
     9ec:	f000 f828 	bl	a40 <__udivmoddi4>
     9f0:	f8dd e004 	ldr.w	lr, [sp, #4]
     9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9f8:	b004      	add	sp, #16
     9fa:	4240      	negs	r0, r0
     9fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a00:	4252      	negs	r2, r2
     a02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a06:	4770      	bx	lr
     a08:	4252      	negs	r2, r2
     a0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a0e:	f000 f817 	bl	a40 <__udivmoddi4>
     a12:	f8dd e004 	ldr.w	lr, [sp, #4]
     a16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a1a:	b004      	add	sp, #16
     a1c:	4240      	negs	r0, r0
     a1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a22:	4770      	bx	lr
     a24:	4252      	negs	r2, r2
     a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a2a:	f000 f809 	bl	a40 <__udivmoddi4>
     a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a36:	b004      	add	sp, #16
     a38:	4252      	negs	r2, r2
     a3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a3e:	4770      	bx	lr

00000a40 <__udivmoddi4>:
     a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a44:	468c      	mov	ip, r1
     a46:	460c      	mov	r4, r1
     a48:	4605      	mov	r5, r0
     a4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     a4c:	2b00      	cmp	r3, #0
     a4e:	d14f      	bne.n	af0 <__udivmoddi4+0xb0>
     a50:	428a      	cmp	r2, r1
     a52:	4617      	mov	r7, r2
     a54:	d96b      	bls.n	b2e <__udivmoddi4+0xee>
     a56:	fab2 fe82 	clz	lr, r2
     a5a:	f1be 0f00 	cmp.w	lr, #0
     a5e:	d00b      	beq.n	a78 <__udivmoddi4+0x38>
     a60:	f1ce 0520 	rsb	r5, lr, #32
     a64:	fa20 f505 	lsr.w	r5, r0, r5
     a68:	fa01 f30e 	lsl.w	r3, r1, lr
     a6c:	ea45 0c03 	orr.w	ip, r5, r3
     a70:	fa02 f70e 	lsl.w	r7, r2, lr
     a74:	fa00 f50e 	lsl.w	r5, r0, lr
     a78:	0c39      	lsrs	r1, r7, #16
     a7a:	fbbc f0f1 	udiv	r0, ip, r1
     a7e:	b2ba      	uxth	r2, r7
     a80:	fb01 c310 	mls	r3, r1, r0, ip
     a84:	fb00 f802 	mul.w	r8, r0, r2
     a88:	ea4f 4c15 	mov.w	ip, r5, lsr #16
     a8c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
     a90:	45a0      	cmp	r8, r4
     a92:	d909      	bls.n	aa8 <__udivmoddi4+0x68>
     a94:	19e4      	adds	r4, r4, r7
     a96:	f100 33ff 	add.w	r3, r0, #4294967295
     a9a:	f080 8128 	bcs.w	cee <__udivmoddi4+0x2ae>
     a9e:	45a0      	cmp	r8, r4
     aa0:	f240 8125 	bls.w	cee <__udivmoddi4+0x2ae>
     aa4:	3802      	subs	r0, #2
     aa6:	443c      	add	r4, r7
     aa8:	ebc8 0404 	rsb	r4, r8, r4
     aac:	fbb4 f3f1 	udiv	r3, r4, r1
     ab0:	fb01 4c13 	mls	ip, r1, r3, r4
     ab4:	fb03 f202 	mul.w	r2, r3, r2
     ab8:	b2ac      	uxth	r4, r5
     aba:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
     abe:	428a      	cmp	r2, r1
     ac0:	d909      	bls.n	ad6 <__udivmoddi4+0x96>
     ac2:	19c9      	adds	r1, r1, r7
     ac4:	f103 34ff 	add.w	r4, r3, #4294967295
     ac8:	f080 810f 	bcs.w	cea <__udivmoddi4+0x2aa>
     acc:	428a      	cmp	r2, r1
     ace:	f240 810c 	bls.w	cea <__udivmoddi4+0x2aa>
     ad2:	3b02      	subs	r3, #2
     ad4:	4439      	add	r1, r7
     ad6:	1a8a      	subs	r2, r1, r2
     ad8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     adc:	2100      	movs	r1, #0
     ade:	2e00      	cmp	r6, #0
     ae0:	d063      	beq.n	baa <__udivmoddi4+0x16a>
     ae2:	fa22 f20e 	lsr.w	r2, r2, lr
     ae6:	2300      	movs	r3, #0
     ae8:	e886 000c 	stmia.w	r6, {r2, r3}
     aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     af0:	428b      	cmp	r3, r1
     af2:	d907      	bls.n	b04 <__udivmoddi4+0xc4>
     af4:	2e00      	cmp	r6, #0
     af6:	d056      	beq.n	ba6 <__udivmoddi4+0x166>
     af8:	2100      	movs	r1, #0
     afa:	e886 0011 	stmia.w	r6, {r0, r4}
     afe:	4608      	mov	r0, r1
     b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b04:	fab3 f183 	clz	r1, r3
     b08:	2900      	cmp	r1, #0
     b0a:	f040 8093 	bne.w	c34 <__udivmoddi4+0x1f4>
     b0e:	42a3      	cmp	r3, r4
     b10:	d302      	bcc.n	b18 <__udivmoddi4+0xd8>
     b12:	4282      	cmp	r2, r0
     b14:	f200 80fe 	bhi.w	d14 <__udivmoddi4+0x2d4>
     b18:	1a85      	subs	r5, r0, r2
     b1a:	eb64 0303 	sbc.w	r3, r4, r3
     b1e:	469c      	mov	ip, r3
     b20:	2001      	movs	r0, #1
     b22:	2e00      	cmp	r6, #0
     b24:	d041      	beq.n	baa <__udivmoddi4+0x16a>
     b26:	e886 1020 	stmia.w	r6, {r5, ip}
     b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b2e:	b912      	cbnz	r2, b36 <__udivmoddi4+0xf6>
     b30:	2701      	movs	r7, #1
     b32:	fbb7 f7f2 	udiv	r7, r7, r2
     b36:	fab7 fe87 	clz	lr, r7
     b3a:	f1be 0f00 	cmp.w	lr, #0
     b3e:	d136      	bne.n	bae <__udivmoddi4+0x16e>
     b40:	1be4      	subs	r4, r4, r7
     b42:	ea4f 4817 	mov.w	r8, r7, lsr #16
     b46:	fa1f f987 	uxth.w	r9, r7
     b4a:	2101      	movs	r1, #1
     b4c:	fbb4 f3f8 	udiv	r3, r4, r8
     b50:	fb08 4413 	mls	r4, r8, r3, r4
     b54:	fb09 f203 	mul.w	r2, r9, r3
     b58:	ea4f 4c15 	mov.w	ip, r5, lsr #16
     b5c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
     b60:	42a2      	cmp	r2, r4
     b62:	d907      	bls.n	b74 <__udivmoddi4+0x134>
     b64:	19e4      	adds	r4, r4, r7
     b66:	f103 30ff 	add.w	r0, r3, #4294967295
     b6a:	d202      	bcs.n	b72 <__udivmoddi4+0x132>
     b6c:	42a2      	cmp	r2, r4
     b6e:	f200 80d3 	bhi.w	d18 <__udivmoddi4+0x2d8>
     b72:	4603      	mov	r3, r0
     b74:	1aa4      	subs	r4, r4, r2
     b76:	fbb4 f0f8 	udiv	r0, r4, r8
     b7a:	fb08 4810 	mls	r8, r8, r0, r4
     b7e:	fb09 f900 	mul.w	r9, r9, r0
     b82:	b2ac      	uxth	r4, r5
     b84:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
     b88:	4591      	cmp	r9, r2
     b8a:	d907      	bls.n	b9c <__udivmoddi4+0x15c>
     b8c:	19d2      	adds	r2, r2, r7
     b8e:	f100 34ff 	add.w	r4, r0, #4294967295
     b92:	d202      	bcs.n	b9a <__udivmoddi4+0x15a>
     b94:	4591      	cmp	r9, r2
     b96:	f200 80ba 	bhi.w	d0e <__udivmoddi4+0x2ce>
     b9a:	4620      	mov	r0, r4
     b9c:	ebc9 0202 	rsb	r2, r9, r2
     ba0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     ba4:	e79b      	b.n	ade <__udivmoddi4+0x9e>
     ba6:	4631      	mov	r1, r6
     ba8:	4630      	mov	r0, r6
     baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bae:	fa07 f70e 	lsl.w	r7, r7, lr
     bb2:	f1ce 0c20 	rsb	ip, lr, #32
     bb6:	fa24 f30c 	lsr.w	r3, r4, ip
     bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
     bbe:	fbb3 faf8 	udiv	sl, r3, r8
     bc2:	fa1f f987 	uxth.w	r9, r7
     bc6:	fb08 351a 	mls	r5, r8, sl, r3
     bca:	fa20 fc0c 	lsr.w	ip, r0, ip
     bce:	fa04 f40e 	lsl.w	r4, r4, lr
     bd2:	fb0a fb09 	mul.w	fp, sl, r9
     bd6:	ea4c 0c04 	orr.w	ip, ip, r4
     bda:	ea4f 421c 	mov.w	r2, ip, lsr #16
     bde:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
     be2:	459b      	cmp	fp, r3
     be4:	fa00 f50e 	lsl.w	r5, r0, lr
     be8:	d90a      	bls.n	c00 <__udivmoddi4+0x1c0>
     bea:	19db      	adds	r3, r3, r7
     bec:	f10a 32ff 	add.w	r2, sl, #4294967295
     bf0:	f080 808b 	bcs.w	d0a <__udivmoddi4+0x2ca>
     bf4:	459b      	cmp	fp, r3
     bf6:	f240 8088 	bls.w	d0a <__udivmoddi4+0x2ca>
     bfa:	f1aa 0a02 	sub.w	sl, sl, #2
     bfe:	443b      	add	r3, r7
     c00:	ebcb 0303 	rsb	r3, fp, r3
     c04:	fbb3 f0f8 	udiv	r0, r3, r8
     c08:	fb08 3310 	mls	r3, r8, r0, r3
     c0c:	fb00 f409 	mul.w	r4, r0, r9
     c10:	fa1f fc8c 	uxth.w	ip, ip
     c14:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     c18:	429c      	cmp	r4, r3
     c1a:	d907      	bls.n	c2c <__udivmoddi4+0x1ec>
     c1c:	19db      	adds	r3, r3, r7
     c1e:	f100 32ff 	add.w	r2, r0, #4294967295
     c22:	d26e      	bcs.n	d02 <__udivmoddi4+0x2c2>
     c24:	429c      	cmp	r4, r3
     c26:	d96c      	bls.n	d02 <__udivmoddi4+0x2c2>
     c28:	3802      	subs	r0, #2
     c2a:	443b      	add	r3, r7
     c2c:	1b1c      	subs	r4, r3, r4
     c2e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
     c32:	e78b      	b.n	b4c <__udivmoddi4+0x10c>
     c34:	f1c1 0e20 	rsb	lr, r1, #32
     c38:	408b      	lsls	r3, r1
     c3a:	fa22 fc0e 	lsr.w	ip, r2, lr
     c3e:	ea4c 0c03 	orr.w	ip, ip, r3
     c42:	fa24 f70e 	lsr.w	r7, r4, lr
     c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
     c4a:	fbb7 faf9 	udiv	sl, r7, r9
     c4e:	fa1f f38c 	uxth.w	r3, ip
     c52:	fb09 771a 	mls	r7, r9, sl, r7
     c56:	fa20 f80e 	lsr.w	r8, r0, lr
     c5a:	408c      	lsls	r4, r1
     c5c:	fb0a f503 	mul.w	r5, sl, r3
     c60:	ea48 0404 	orr.w	r4, r8, r4
     c64:	ea4f 4814 	mov.w	r8, r4, lsr #16
     c68:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
     c6c:	42bd      	cmp	r5, r7
     c6e:	fa02 f201 	lsl.w	r2, r2, r1
     c72:	fa00 fb01 	lsl.w	fp, r0, r1
     c76:	d909      	bls.n	c8c <__udivmoddi4+0x24c>
     c78:	eb17 070c 	adds.w	r7, r7, ip
     c7c:	f10a 30ff 	add.w	r0, sl, #4294967295
     c80:	d241      	bcs.n	d06 <__udivmoddi4+0x2c6>
     c82:	42bd      	cmp	r5, r7
     c84:	d93f      	bls.n	d06 <__udivmoddi4+0x2c6>
     c86:	f1aa 0a02 	sub.w	sl, sl, #2
     c8a:	4467      	add	r7, ip
     c8c:	1b7f      	subs	r7, r7, r5
     c8e:	fbb7 f5f9 	udiv	r5, r7, r9
     c92:	fb09 7715 	mls	r7, r9, r5, r7
     c96:	fb05 f303 	mul.w	r3, r5, r3
     c9a:	b2a4      	uxth	r4, r4
     c9c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
     ca0:	42bb      	cmp	r3, r7
     ca2:	d908      	bls.n	cb6 <__udivmoddi4+0x276>
     ca4:	eb17 070c 	adds.w	r7, r7, ip
     ca8:	f105 30ff 	add.w	r0, r5, #4294967295
     cac:	d227      	bcs.n	cfe <__udivmoddi4+0x2be>
     cae:	42bb      	cmp	r3, r7
     cb0:	d925      	bls.n	cfe <__udivmoddi4+0x2be>
     cb2:	3d02      	subs	r5, #2
     cb4:	4467      	add	r7, ip
     cb6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
     cba:	fba0 8902 	umull	r8, r9, r0, r2
     cbe:	1aff      	subs	r7, r7, r3
     cc0:	454f      	cmp	r7, r9
     cc2:	4645      	mov	r5, r8
     cc4:	464c      	mov	r4, r9
     cc6:	d314      	bcc.n	cf2 <__udivmoddi4+0x2b2>
     cc8:	d029      	beq.n	d1e <__udivmoddi4+0x2de>
     cca:	b366      	cbz	r6, d26 <__udivmoddi4+0x2e6>
     ccc:	ebbb 0305 	subs.w	r3, fp, r5
     cd0:	eb67 0704 	sbc.w	r7, r7, r4
     cd4:	fa07 fe0e 	lsl.w	lr, r7, lr
     cd8:	40cb      	lsrs	r3, r1
     cda:	40cf      	lsrs	r7, r1
     cdc:	ea4e 0303 	orr.w	r3, lr, r3
     ce0:	e886 0088 	stmia.w	r6, {r3, r7}
     ce4:	2100      	movs	r1, #0
     ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cea:	4623      	mov	r3, r4
     cec:	e6f3      	b.n	ad6 <__udivmoddi4+0x96>
     cee:	4618      	mov	r0, r3
     cf0:	e6da      	b.n	aa8 <__udivmoddi4+0x68>
     cf2:	ebb8 0502 	subs.w	r5, r8, r2
     cf6:	eb69 040c 	sbc.w	r4, r9, ip
     cfa:	3801      	subs	r0, #1
     cfc:	e7e5      	b.n	cca <__udivmoddi4+0x28a>
     cfe:	4605      	mov	r5, r0
     d00:	e7d9      	b.n	cb6 <__udivmoddi4+0x276>
     d02:	4610      	mov	r0, r2
     d04:	e792      	b.n	c2c <__udivmoddi4+0x1ec>
     d06:	4682      	mov	sl, r0
     d08:	e7c0      	b.n	c8c <__udivmoddi4+0x24c>
     d0a:	4692      	mov	sl, r2
     d0c:	e778      	b.n	c00 <__udivmoddi4+0x1c0>
     d0e:	3802      	subs	r0, #2
     d10:	443a      	add	r2, r7
     d12:	e743      	b.n	b9c <__udivmoddi4+0x15c>
     d14:	4608      	mov	r0, r1
     d16:	e704      	b.n	b22 <__udivmoddi4+0xe2>
     d18:	3b02      	subs	r3, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72a      	b.n	b74 <__udivmoddi4+0x134>
     d1e:	45c3      	cmp	fp, r8
     d20:	d3e7      	bcc.n	cf2 <__udivmoddi4+0x2b2>
     d22:	463c      	mov	r4, r7
     d24:	e7d1      	b.n	cca <__udivmoddi4+0x28a>
     d26:	4631      	mov	r1, r6
     d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d2c <__aeabi_idiv0>:
     d2c:	4770      	bx	lr
     d2e:	bf00      	nop

00000d30 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     d30:	b480      	push	{r7}
     d32:	b083      	sub	sp, #12
     d34:	af00      	add	r7, sp, #0
     d36:	4603      	mov	r3, r0
     d38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     d3a:	4908      	ldr	r1, [pc, #32]	; (d5c <NVIC_EnableIRQ+0x2c>)
     d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     d40:	095b      	lsrs	r3, r3, #5
     d42:	79fa      	ldrb	r2, [r7, #7]
     d44:	f002 021f 	and.w	r2, r2, #31
     d48:	2001      	movs	r0, #1
     d4a:	fa00 f202 	lsl.w	r2, r0, r2
     d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     d52:	bf00      	nop
     d54:	370c      	adds	r7, #12
     d56:	46bd      	mov	sp, r7
     d58:	bc80      	pop	{r7}
     d5a:	4770      	bx	lr
     d5c:	e000e100 	.word	0xe000e100

00000d60 <UARTInit>:
**						interrupt handler can't be installed to the 
**						VIC table
** 
*****************************************************************************/
uint32_t  UARTInit( uint32_t PortNum, uint32_t baudrate )
{
     d60:	b580      	push	{r7, lr}
     d62:	b086      	sub	sp, #24
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
     d68:	6039      	str	r1, [r7, #0]
  uint32_t Fdiv;
  uint32_t pclkdiv, pclk;

  if ( PortNum == 3 )
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	2b03      	cmp	r3, #3
     d6e:	d14e      	bne.n	e0e <UARTInit+0xae>
  {
    LPC_SC->PCONP |= (1 << 25);
     d70:	4a54      	ldr	r2, [pc, #336]	; (ec4 <UARTInit+0x164>)
     d72:	4b54      	ldr	r3, [pc, #336]	; (ec4 <UARTInit+0x164>)
     d74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
     d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     d7c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
#if 0
	LPC_PINCON->PINSEL0 &= ~0x0000000F;
	LPC_PINCON->PINSEL0 |= 0x0000000A;  /* RxD3 is P0.1 and TxD3 is P0.0 */
#else
	LPC_PINCON->PINSEL9 |= 0x0F000000;  /* RxD3 is P4.29 and TxD3 is P4.28 */
     d80:	4a51      	ldr	r2, [pc, #324]	; (ec8 <UARTInit+0x168>)
     d82:	4b51      	ldr	r3, [pc, #324]	; (ec8 <UARTInit+0x168>)
     d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     d86:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     d8a:	6253      	str	r3, [r2, #36]	; 0x24
#endif
	/* By default, the PCLKSELx value is zero, thus, the PCLK for
	all the peripherals is 1/4 of the SystemFrequency. */
	/* Bit 18~19 is for UART3 */
	pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
     d8c:	4b4d      	ldr	r3, [pc, #308]	; (ec4 <UARTInit+0x164>)
     d8e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
     d92:	0c9b      	lsrs	r3, r3, #18
     d94:	f003 0303 	and.w	r3, r3, #3
     d98:	613b      	str	r3, [r7, #16]
	switch ( pclkdiv )
     d9a:	693b      	ldr	r3, [r7, #16]
     d9c:	2b02      	cmp	r3, #2
     d9e:	d00c      	beq.n	dba <UARTInit+0x5a>
     da0:	2b03      	cmp	r3, #3
     da2:	d00f      	beq.n	dc4 <UARTInit+0x64>
     da4:	2b01      	cmp	r3, #1
     da6:	d004      	beq.n	db2 <UARTInit+0x52>
	{
	  case 0x00:
	  default:
		pclk = SystemCoreClock/4;
     da8:	4b48      	ldr	r3, [pc, #288]	; (ecc <UARTInit+0x16c>)
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	089b      	lsrs	r3, r3, #2
     dae:	617b      	str	r3, [r7, #20]
		break;
     db0:	e00d      	b.n	dce <UARTInit+0x6e>
	  case 0x01:
		pclk = SystemCoreClock;
     db2:	4b46      	ldr	r3, [pc, #280]	; (ecc <UARTInit+0x16c>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	617b      	str	r3, [r7, #20]
		break; 
     db8:	e009      	b.n	dce <UARTInit+0x6e>
	  case 0x02:
		pclk = SystemCoreClock/2;
     dba:	4b44      	ldr	r3, [pc, #272]	; (ecc <UARTInit+0x16c>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	085b      	lsrs	r3, r3, #1
     dc0:	617b      	str	r3, [r7, #20]
		break; 
     dc2:	e004      	b.n	dce <UARTInit+0x6e>
	  case 0x03:
		pclk = SystemCoreClock/8;
     dc4:	4b41      	ldr	r3, [pc, #260]	; (ecc <UARTInit+0x16c>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	08db      	lsrs	r3, r3, #3
     dca:	617b      	str	r3, [r7, #20]
		break;
     dcc:	bf00      	nop
	}

    LPC_UART3->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
     dce:	4b40      	ldr	r3, [pc, #256]	; (ed0 <UARTInit+0x170>)
     dd0:	2283      	movs	r2, #131	; 0x83
     dd2:	731a      	strb	r2, [r3, #12]
	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
     dd4:	697b      	ldr	r3, [r7, #20]
     dd6:	091a      	lsrs	r2, r3, #4
     dd8:	683b      	ldr	r3, [r7, #0]
     dda:	fbb2 f3f3 	udiv	r3, r2, r3
     dde:	60fb      	str	r3, [r7, #12]
    LPC_UART3->DLM = Fdiv / 256;							
     de0:	4a3b      	ldr	r2, [pc, #236]	; (ed0 <UARTInit+0x170>)
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	0a1b      	lsrs	r3, r3, #8
     de6:	b2db      	uxtb	r3, r3
     de8:	7113      	strb	r3, [r2, #4]
    LPC_UART3->DLL = Fdiv % 256;
     dea:	4b39      	ldr	r3, [pc, #228]	; (ed0 <UARTInit+0x170>)
     dec:	68fa      	ldr	r2, [r7, #12]
     dee:	b2d2      	uxtb	r2, r2
     df0:	701a      	strb	r2, [r3, #0]
	LPC_UART3->LCR = 0x03;		/* DLAB = 0 */
     df2:	4b37      	ldr	r3, [pc, #220]	; (ed0 <UARTInit+0x170>)
     df4:	2203      	movs	r2, #3
     df6:	731a      	strb	r2, [r3, #12]
    LPC_UART3->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
     df8:	4b35      	ldr	r3, [pc, #212]	; (ed0 <UARTInit+0x170>)
     dfa:	2207      	movs	r2, #7
     dfc:	721a      	strb	r2, [r3, #8]

   	NVIC_EnableIRQ(UART3_IRQn);
     dfe:	2008      	movs	r0, #8
     e00:	f7ff ff96 	bl	d30 <NVIC_EnableIRQ>

    LPC_UART3->IER = IER_RBR | IER_RLS;	/* Enable UART3 interrupt */
     e04:	4b32      	ldr	r3, [pc, #200]	; (ed0 <UARTInit+0x170>)
     e06:	2205      	movs	r2, #5
     e08:	605a      	str	r2, [r3, #4]
    return (TRUE);
     e0a:	2301      	movs	r3, #1
     e0c:	e056      	b.n	ebc <UARTInit+0x15c>
  }
  else if (PortNum == 1)
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	2b01      	cmp	r3, #1
     e12:	d152      	bne.n	eba <UARTInit+0x15a>
	LPC_PINCON->PINSEL0 &= ~0xC0000000;
	LPC_PINCON->PINSEL0 |= 0x40000000;	/* Enable TxD1 P0.15 */
	LPC_PINCON->PINSEL1 &= ~0x00000003;
	LPC_PINCON->PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
#else
	LPC_PINCON->PINSEL4 &= ~(3 << 0) ;
     e14:	4a2c      	ldr	r2, [pc, #176]	; (ec8 <UARTInit+0x168>)
     e16:	4b2c      	ldr	r3, [pc, #176]	; (ec8 <UARTInit+0x168>)
     e18:	691b      	ldr	r3, [r3, #16]
     e1a:	f023 0303 	bic.w	r3, r3, #3
     e1e:	6113      	str	r3, [r2, #16]
	LPC_PINCON->PINSEL4 |= (1 << 1);	/* Enable TxD1 P2.0 function 10*/
     e20:	4a29      	ldr	r2, [pc, #164]	; (ec8 <UARTInit+0x168>)
     e22:	4b29      	ldr	r3, [pc, #164]	; (ec8 <UARTInit+0x168>)
     e24:	691b      	ldr	r3, [r3, #16]
     e26:	f043 0302 	orr.w	r3, r3, #2
     e2a:	6113      	str	r3, [r2, #16]
	LPC_PINCON->PINSEL4 &= ~(3 << 2);
     e2c:	4a26      	ldr	r2, [pc, #152]	; (ec8 <UARTInit+0x168>)
     e2e:	4b26      	ldr	r3, [pc, #152]	; (ec8 <UARTInit+0x168>)
     e30:	691b      	ldr	r3, [r3, #16]
     e32:	f023 030c 	bic.w	r3, r3, #12
     e36:	6113      	str	r3, [r2, #16]
	LPC_PINCON->PINSEL4 |= (1 << 3);	/* Enable RxD1 P2.1 function 10*/
     e38:	4a23      	ldr	r2, [pc, #140]	; (ec8 <UARTInit+0x168>)
     e3a:	4b23      	ldr	r3, [pc, #140]	; (ec8 <UARTInit+0x168>)
     e3c:	691b      	ldr	r3, [r3, #16]
     e3e:	f043 0308 	orr.w	r3, r3, #8
     e42:	6113      	str	r3, [r2, #16]
#endif	
	/* By default, the PCLKSELx value is zero, thus, the PCLK for
	all the peripherals is 1/4 of the SystemFrequency. */
	/* Bit 8,9 are for UART1 */
	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
     e44:	4b1f      	ldr	r3, [pc, #124]	; (ec4 <UARTInit+0x164>)
     e46:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
     e4a:	0a1b      	lsrs	r3, r3, #8
     e4c:	f003 0303 	and.w	r3, r3, #3
     e50:	613b      	str	r3, [r7, #16]
	switch ( pclkdiv )
     e52:	693b      	ldr	r3, [r7, #16]
     e54:	2b02      	cmp	r3, #2
     e56:	d00c      	beq.n	e72 <UARTInit+0x112>
     e58:	2b03      	cmp	r3, #3
     e5a:	d00f      	beq.n	e7c <UARTInit+0x11c>
     e5c:	2b01      	cmp	r3, #1
     e5e:	d004      	beq.n	e6a <UARTInit+0x10a>
	{
	  case 0x00:
	  default:
		pclk = SystemCoreClock/4;
     e60:	4b1a      	ldr	r3, [pc, #104]	; (ecc <UARTInit+0x16c>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	089b      	lsrs	r3, r3, #2
     e66:	617b      	str	r3, [r7, #20]
		break;
     e68:	e00d      	b.n	e86 <UARTInit+0x126>
	  case 0x01:
		pclk = SystemCoreClock;
     e6a:	4b18      	ldr	r3, [pc, #96]	; (ecc <UARTInit+0x16c>)
     e6c:	681b      	ldr	r3, [r3, #0]
     e6e:	617b      	str	r3, [r7, #20]
		break; 
     e70:	e009      	b.n	e86 <UARTInit+0x126>
	  case 0x02:
		pclk = SystemCoreClock/2;
     e72:	4b16      	ldr	r3, [pc, #88]	; (ecc <UARTInit+0x16c>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	085b      	lsrs	r3, r3, #1
     e78:	617b      	str	r3, [r7, #20]
		break; 
     e7a:	e004      	b.n	e86 <UARTInit+0x126>
	  case 0x03:
		pclk = SystemCoreClock/8;
     e7c:	4b13      	ldr	r3, [pc, #76]	; (ecc <UARTInit+0x16c>)
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	08db      	lsrs	r3, r3, #3
     e82:	617b      	str	r3, [r7, #20]
		break;
     e84:	bf00      	nop
	}

    LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
     e86:	4b13      	ldr	r3, [pc, #76]	; (ed4 <UARTInit+0x174>)
     e88:	2283      	movs	r2, #131	; 0x83
     e8a:	731a      	strb	r2, [r3, #12]
	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
     e8c:	697b      	ldr	r3, [r7, #20]
     e8e:	091a      	lsrs	r2, r3, #4
     e90:	683b      	ldr	r3, [r7, #0]
     e92:	fbb2 f3f3 	udiv	r3, r2, r3
     e96:	60fb      	str	r3, [r7, #12]
    LPC_UART1->DLM = Fdiv / 256;							
     e98:	4a0e      	ldr	r2, [pc, #56]	; (ed4 <UARTInit+0x174>)
     e9a:	68fb      	ldr	r3, [r7, #12]
     e9c:	0a1b      	lsrs	r3, r3, #8
     e9e:	b2db      	uxtb	r3, r3
     ea0:	7113      	strb	r3, [r2, #4]
    LPC_UART1->DLL = Fdiv % 256;
     ea2:	4b0c      	ldr	r3, [pc, #48]	; (ed4 <UARTInit+0x174>)
     ea4:	68fa      	ldr	r2, [r7, #12]
     ea6:	b2d2      	uxtb	r2, r2
     ea8:	701a      	strb	r2, [r3, #0]
	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
     eaa:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <UARTInit+0x174>)
     eac:	2203      	movs	r2, #3
     eae:	731a      	strb	r2, [r3, #12]
    LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
     eb0:	4b08      	ldr	r3, [pc, #32]	; (ed4 <UARTInit+0x174>)
     eb2:	2207      	movs	r2, #7
     eb4:	721a      	strb	r2, [r3, #8]

   	//NVIC_EnableIRQ(UART1_IRQn);      //rakesh

    //LPC_UART1->IER = IER_RBR | IER_RLS;	/* Enable UART1 interrupt */    //rakesh
    return (TRUE);
     eb6:	2301      	movs	r3, #1
     eb8:	e000      	b.n	ebc <UARTInit+0x15c>
  }
  return( FALSE ); 
     eba:	2300      	movs	r3, #0
}
     ebc:	4618      	mov	r0, r3
     ebe:	3718      	adds	r7, #24
     ec0:	46bd      	mov	sp, r7
     ec2:	bd80      	pop	{r7, pc}
     ec4:	400fc000 	.word	0x400fc000
     ec8:	4002c000 	.word	0x4002c000
     ecc:	10000084 	.word	0x10000084
     ed0:	4009c000 	.word	0x4009c000
     ed4:	40010000 	.word	0x40010000

00000ed8 <UARTSend>:
** parameters:			portNum, buffer pointer, and data length
** Returned value:		None
** 
*****************************************************************************/
void UARTSend( uint32_t portNum, uint8_t *BufferPtr, uint32_t Length )
{
     ed8:	b480      	push	{r7}
     eda:	b085      	sub	sp, #20
     edc:	af00      	add	r7, sp, #0
     ede:	60f8      	str	r0, [r7, #12]
     ee0:	60b9      	str	r1, [r7, #8]
     ee2:	607a      	str	r2, [r7, #4]

  if ( portNum == 3 )
     ee4:	68fb      	ldr	r3, [r7, #12]
     ee6:	2b03      	cmp	r3, #3
     ee8:	d12b      	bne.n	f42 <UARTSend+0x6a>
  {
    while ( Length != 0 )
     eea:	e014      	b.n	f16 <UARTSend+0x3e>
    {
	  /* THRE status, contain valid data */

      /* Check status in the LSR to see if
    	  valid data in U0THR or not */
      while( !(LPC_UART3->LSR & THRE ));
     eec:	bf00      	nop
     eee:	4b19      	ldr	r3, [pc, #100]	; (f54 <UARTSend+0x7c>)
     ef0:	7d1b      	ldrb	r3, [r3, #20]
     ef2:	b2db      	uxtb	r3, r3
     ef4:	f003 0320 	and.w	r3, r3, #32
     ef8:	2b00      	cmp	r3, #0
     efa:	d0f8      	beq.n	eee <UARTSend+0x16>

	  LPC_UART3->THR = *BufferPtr;
     efc:	4a15      	ldr	r2, [pc, #84]	; (f54 <UARTSend+0x7c>)
     efe:	68bb      	ldr	r3, [r7, #8]
     f00:	781b      	ldrb	r3, [r3, #0]
     f02:	7013      	strb	r3, [r2, #0]
	  UART3TxEmpty = 0;	/* not empty in the THR until it shifts out */
     f04:	4b14      	ldr	r3, [pc, #80]	; (f58 <UARTSend+0x80>)
     f06:	2200      	movs	r2, #0
     f08:	701a      	strb	r2, [r3, #0]
	  BufferPtr++;
     f0a:	68bb      	ldr	r3, [r7, #8]
     f0c:	3301      	adds	r3, #1
     f0e:	60bb      	str	r3, [r7, #8]
	  Length--;
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	3b01      	subs	r3, #1
     f14:	607b      	str	r3, [r7, #4]
void UARTSend( uint32_t portNum, uint8_t *BufferPtr, uint32_t Length )
{

  if ( portNum == 3 )
  {
    while ( Length != 0 )
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	2b00      	cmp	r3, #0
     f1a:	d1e7      	bne.n	eec <UARTSend+0x14>
	  //UART1TxEmpty = 0;	/* not empty in the THR until it shifts out */
	  BufferPtr++;
	  Length--;
    }
  }
  return;
     f1c:	e015      	b.n	f4a <UARTSend+0x72>
  {
	while ( Length != 0 )
    {
	  /* THRE status, contain valid data */
	  //while ( !(UART1TxEmpty & 0x01) );
	  while( !(LPC_UART1->LSR & THRE ));
     f1e:	bf00      	nop
     f20:	4b0e      	ldr	r3, [pc, #56]	; (f5c <UARTSend+0x84>)
     f22:	7d1b      	ldrb	r3, [r3, #20]
     f24:	b2db      	uxtb	r3, r3
     f26:	f003 0320 	and.w	r3, r3, #32
     f2a:	2b00      	cmp	r3, #0
     f2c:	d0f8      	beq.n	f20 <UARTSend+0x48>
	  LPC_UART1->THR = *BufferPtr;
     f2e:	4a0b      	ldr	r2, [pc, #44]	; (f5c <UARTSend+0x84>)
     f30:	68bb      	ldr	r3, [r7, #8]
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	7013      	strb	r3, [r2, #0]
	  //UART1TxEmpty = 0;	/* not empty in the THR until it shifts out */
	  BufferPtr++;
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	3301      	adds	r3, #1
     f3a:	60bb      	str	r3, [r7, #8]
	  Length--;
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	3b01      	subs	r3, #1
     f40:	607b      	str	r3, [r7, #4]
	  Length--;
	}
  }
  else
  {
	while ( Length != 0 )
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	2b00      	cmp	r3, #0
     f46:	d1ea      	bne.n	f1e <UARTSend+0x46>
	  //UART1TxEmpty = 0;	/* not empty in the THR until it shifts out */
	  BufferPtr++;
	  Length--;
    }
  }
  return;
     f48:	bf00      	nop
}
     f4a:	3714      	adds	r7, #20
     f4c:	46bd      	mov	sp, r7
     f4e:	bc80      	pop	{r7}
     f50:	4770      	bx	lr
     f52:	bf00      	nop
     f54:	4009c000 	.word	0x4009c000
     f58:	10000000 	.word	0x10000000
     f5c:	40010000 	.word	0x40010000

00000f60 <apdu_generateApplicationContextName>:
*            Is ciphering settings->
*/
int apdu_generateApplicationContextName(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
     f60:	b580      	push	{r7, lr}
     f62:	b088      	sub	sp, #32
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
     f68:	6039      	str	r1, [r7, #0]
    //ProtocolVersion
    if (settings->protocolVersion != NULL)
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
     f70:	2b00      	cmp	r3, #0
     f72:	d04a      	beq.n	100a <apdu_generateApplicationContextName+0xaa>
    {
        unsigned char pos, len = (unsigned char)strlen(settings->protocolVersion);
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
     f7a:	4618      	mov	r0, r3
     f7c:	f7ff f8d0 	bl	120 <strlen>
     f80:	4603      	mov	r3, r0
     f82:	77bb      	strb	r3, [r7, #30]
        int value;
        bitArray ba;
        ba_init(&ba);
     f84:	f107 030c 	add.w	r3, r7, #12
     f88:	4618      	mov	r0, r3
     f8a:	f001 fc35 	bl	27f8 <ba_init>
        bb_setUInt8(data, BER_TYPE_CONTEXT | PDU_TYPE_PROTOCOL_VERSION);
     f8e:	2180      	movs	r1, #128	; 0x80
     f90:	6838      	ldr	r0, [r7, #0]
     f92:	f001 ff3f 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 2);
     f96:	2102      	movs	r1, #2
     f98:	6838      	ldr	r0, [r7, #0]
     f9a:	f001 ff3b 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)(8 - len));
     f9e:	7fbb      	ldrb	r3, [r7, #30]
     fa0:	f1c3 0308 	rsb	r3, r3, #8
     fa4:	b2db      	uxtb	r3, r3
     fa6:	4619      	mov	r1, r3
     fa8:	6838      	ldr	r0, [r7, #0]
     faa:	f001 ff33 	bl	2e14 <bb_setUInt8>
        for (pos = 0; pos != 8; ++pos)
     fae:	2300      	movs	r3, #0
     fb0:	77fb      	strb	r3, [r7, #31]
     fb2:	e014      	b.n	fde <apdu_generateApplicationContextName+0x7e>
        {
            ba_set(&ba, settings->protocolVersion[pos] == '0' ? 0 : 1);
     fb4:	687b      	ldr	r3, [r7, #4]
     fb6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
     fba:	7ffb      	ldrb	r3, [r7, #31]
     fbc:	4413      	add	r3, r2
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	2b30      	cmp	r3, #48	; 0x30
     fc2:	bf14      	ite	ne
     fc4:	2301      	movne	r3, #1
     fc6:	2300      	moveq	r3, #0
     fc8:	b2db      	uxtb	r3, r3
     fca:	461a      	mov	r2, r3
     fcc:	f107 030c 	add.w	r3, r7, #12
     fd0:	4611      	mov	r1, r2
     fd2:	4618      	mov	r0, r3
     fd4:	f001 fc64 	bl	28a0 <ba_set>
        bitArray ba;
        ba_init(&ba);
        bb_setUInt8(data, BER_TYPE_CONTEXT | PDU_TYPE_PROTOCOL_VERSION);
        bb_setUInt8(data, 2);
        bb_setUInt8(data, (unsigned char)(8 - len));
        for (pos = 0; pos != 8; ++pos)
     fd8:	7ffb      	ldrb	r3, [r7, #31]
     fda:	3301      	adds	r3, #1
     fdc:	77fb      	strb	r3, [r7, #31]
     fde:	7ffb      	ldrb	r3, [r7, #31]
     fe0:	2b08      	cmp	r3, #8
     fe2:	d1e7      	bne.n	fb4 <apdu_generateApplicationContextName+0x54>
        {
            ba_set(&ba, settings->protocolVersion[pos] == '0' ? 0 : 1);
        }
        ba_toInteger(&ba, &value);
     fe4:	f107 0218 	add.w	r2, r7, #24
     fe8:	f107 030c 	add.w	r3, r7, #12
     fec:	4611      	mov	r1, r2
     fee:	4618      	mov	r0, r3
     ff0:	f001 fde0 	bl	2bb4 <ba_toInteger>
        bb_setUInt8(data, (unsigned char)value);
     ff4:	69bb      	ldr	r3, [r7, #24]
     ff6:	b2db      	uxtb	r3, r3
     ff8:	4619      	mov	r1, r3
     ffa:	6838      	ldr	r0, [r7, #0]
     ffc:	f001 ff0a 	bl	2e14 <bb_setUInt8>
        ba_clear(&ba);
    1000:	f107 030c 	add.w	r3, r7, #12
    1004:	4618      	mov	r0, r3
    1006:	f001 fd7f 	bl	2b08 <ba_clear>
    }
    unsigned char ciphered;
    // Application context name tag
    bb_setUInt8(data, (BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_APPLICATION_CONTEXT_NAME));
    100a:	21a1      	movs	r1, #161	; 0xa1
    100c:	6838      	ldr	r0, [r7, #0]
    100e:	f001 ff01 	bl	2e14 <bb_setUInt8>
    // Len
    bb_setUInt8(data, 0x09);
    1012:	2109      	movs	r1, #9
    1014:	6838      	ldr	r0, [r7, #0]
    1016:	f001 fefd 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, BER_TYPE_OBJECT_IDENTIFIER);
    101a:	2106      	movs	r1, #6
    101c:	6838      	ldr	r0, [r7, #0]
    101e:	f001 fef9 	bl	2e14 <bb_setUInt8>
    // Len
    bb_setUInt8(data, 0x07);
    1022:	2107      	movs	r1, #7
    1024:	6838      	ldr	r0, [r7, #0]
    1026:	f001 fef5 	bl	2e14 <bb_setUInt8>
#ifndef DLMS_IGNORE_HIGH_GMAC
    ciphered = isCiphered(&settings->cipher);
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	3388      	adds	r3, #136	; 0x88
    102e:	4618      	mov	r0, r3
    1030:	f00a ff94 	bl	bf5c <isCiphered>
    1034:	4603      	mov	r3, r0
    1036:	777b      	strb	r3, [r7, #29]
#else
    ciphered = 0;
#endif //DLMS_IGNORE_HIGH_GMAC
    bb_setUInt8(data, 0x60);
    1038:	2160      	movs	r1, #96	; 0x60
    103a:	6838      	ldr	r0, [r7, #0]
    103c:	f001 feea 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x85);
    1040:	2185      	movs	r1, #133	; 0x85
    1042:	6838      	ldr	r0, [r7, #0]
    1044:	f001 fee6 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x74);
    1048:	2174      	movs	r1, #116	; 0x74
    104a:	6838      	ldr	r0, [r7, #0]
    104c:	f001 fee2 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x05);
    1050:	2105      	movs	r1, #5
    1052:	6838      	ldr	r0, [r7, #0]
    1054:	f001 fede 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x08);
    1058:	2108      	movs	r1, #8
    105a:	6838      	ldr	r0, [r7, #0]
    105c:	f001 feda 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x01);
    1060:	2101      	movs	r1, #1
    1062:	6838      	ldr	r0, [r7, #0]
    1064:	f001 fed6 	bl	2e14 <bb_setUInt8>
    if (settings->useLogicalNameReferencing)
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    106e:	2b00      	cmp	r3, #0
    1070:	d00c      	beq.n	108c <apdu_generateApplicationContextName+0x12c>
    {
        if (ciphered)
    1072:	7f7b      	ldrb	r3, [r7, #29]
    1074:	2b00      	cmp	r3, #0
    1076:	d004      	beq.n	1082 <apdu_generateApplicationContextName+0x122>
        {
            bb_setUInt8(data, 0x03);
    1078:	2103      	movs	r1, #3
    107a:	6838      	ldr	r0, [r7, #0]
    107c:	f001 feca 	bl	2e14 <bb_setUInt8>
    1080:	e010      	b.n	10a4 <apdu_generateApplicationContextName+0x144>
        }
        else
        {
            bb_setUInt8(data, 0x01);
    1082:	2101      	movs	r1, #1
    1084:	6838      	ldr	r0, [r7, #0]
    1086:	f001 fec5 	bl	2e14 <bb_setUInt8>
    108a:	e00b      	b.n	10a4 <apdu_generateApplicationContextName+0x144>
        }
    }
    else
    {
        if (ciphered)
    108c:	7f7b      	ldrb	r3, [r7, #29]
    108e:	2b00      	cmp	r3, #0
    1090:	d004      	beq.n	109c <apdu_generateApplicationContextName+0x13c>
        {
            bb_setUInt8(data, 0x04);
    1092:	2104      	movs	r1, #4
    1094:	6838      	ldr	r0, [r7, #0]
    1096:	f001 febd 	bl	2e14 <bb_setUInt8>
    109a:	e003      	b.n	10a4 <apdu_generateApplicationContextName+0x144>
        }
        else
        {
            bb_setUInt8(data, 0x02);
    109c:	2102      	movs	r1, #2
    109e:	6838      	ldr	r0, [r7, #0]
    10a0:	f001 feb8 	bl	2e14 <bb_setUInt8>
        }
    }
    // Add system title.
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (!settings->server && (ciphered || settings->authentication == DLMS_AUTHENTICATION_HIGH_GMAC))
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    10aa:	2b00      	cmp	r3, #0
    10ac:	d133      	bne.n	1116 <apdu_generateApplicationContextName+0x1b6>
    10ae:	7f7b      	ldrb	r3, [r7, #29]
    10b0:	2b00      	cmp	r3, #0
    10b2:	d104      	bne.n	10be <apdu_generateApplicationContextName+0x15e>
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    10ba:	2b05      	cmp	r3, #5
    10bc:	d12b      	bne.n	1116 <apdu_generateApplicationContextName+0x1b6>
    {
        if (settings->cipher.systemTitle.size == 0)
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    10c4:	2b00      	cmp	r3, #0
    10c6:	d102      	bne.n	10ce <apdu_generateApplicationContextName+0x16e>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    10c8:	f44f 7381 	mov.w	r3, #258	; 0x102
    10cc:	e04c      	b.n	1168 <apdu_generateApplicationContextName+0x208>
        }
        // Add calling-AP-title
        bb_setUInt8(data, (BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | 6));
    10ce:	21a6      	movs	r1, #166	; 0xa6
    10d0:	6838      	ldr	r0, [r7, #0]
    10d2:	f001 fe9f 	bl	2e14 <bb_setUInt8>
        // LEN
        bb_setUInt8(data, (unsigned char)(2 + settings->cipher.systemTitle.size));
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    10dc:	b2db      	uxtb	r3, r3
    10de:	3302      	adds	r3, #2
    10e0:	b2db      	uxtb	r3, r3
    10e2:	4619      	mov	r1, r3
    10e4:	6838      	ldr	r0, [r7, #0]
    10e6:	f001 fe95 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, BER_TYPE_OCTET_STRING);
    10ea:	2104      	movs	r1, #4
    10ec:	6838      	ldr	r0, [r7, #0]
    10ee:	f001 fe91 	bl	2e14 <bb_setUInt8>
        // LEN
        bb_setUInt8(data, (unsigned char)settings->cipher.systemTitle.size);
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    10f8:	b2db      	uxtb	r3, r3
    10fa:	4619      	mov	r1, r3
    10fc:	6838      	ldr	r0, [r7, #0]
    10fe:	f001 fe89 	bl	2e14 <bb_setUInt8>
        bb_set(data, settings->cipher.systemTitle.data, settings->cipher.systemTitle.size);
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    110e:	461a      	mov	r2, r3
    1110:	6838      	ldr	r0, [r7, #0]
    1112:	f002 fa25 	bl	3560 <bb_set>
    }
    //Add CallingAEInvocationId.
    if (!settings->server && settings->userId != -1 && settings->cipher.security != DLMS_SECURITY_NONE)
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    111c:	2b00      	cmp	r3, #0
    111e:	d122      	bne.n	1166 <apdu_generateApplicationContextName+0x206>
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
    1126:	f1b3 3fff 	cmp.w	r3, #4294967295
    112a:	d01c      	beq.n	1166 <apdu_generateApplicationContextName+0x206>
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    1132:	2b00      	cmp	r3, #0
    1134:	d017      	beq.n	1166 <apdu_generateApplicationContextName+0x206>
    {
        bb_setUInt8(data, (BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLING_AE_INVOCATION_ID));
    1136:	21a9      	movs	r1, #169	; 0xa9
    1138:	6838      	ldr	r0, [r7, #0]
    113a:	f001 fe6b 	bl	2e14 <bb_setUInt8>
        //LEN
        bb_setUInt8(data, 3);
    113e:	2103      	movs	r1, #3
    1140:	6838      	ldr	r0, [r7, #0]
    1142:	f001 fe67 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, BER_TYPE_INTEGER);
    1146:	2102      	movs	r1, #2
    1148:	6838      	ldr	r0, [r7, #0]
    114a:	f001 fe63 	bl	2e14 <bb_setUInt8>
        //LEN
        bb_setUInt8(data, 1);
    114e:	2101      	movs	r1, #1
    1150:	6838      	ldr	r0, [r7, #0]
    1152:	f001 fe5f 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)settings->userId);
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
    115c:	b2db      	uxtb	r3, r3
    115e:	4619      	mov	r1, r3
    1160:	6838      	ldr	r0, [r7, #0]
    1162:	f001 fe57 	bl	2e14 <bb_setUInt8>
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return 0;
    1166:	2300      	movs	r3, #0
}
    1168:	4618      	mov	r0, r3
    116a:	3720      	adds	r7, #32
    116c:	46bd      	mov	sp, r7
    116e:	bd80      	pop	{r7, pc}

00001170 <apdu_parseUserInformation>:
 * Parse User Information from PDU.
 */
int apdu_parseUserInformation(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
    1170:	b580      	push	{r7, lr}
    1172:	b08e      	sub	sp, #56	; 0x38
    1174:	af02      	add	r7, sp, #8
    1176:	6078      	str	r0, [r7, #4]
    1178:	6039      	str	r1, [r7, #0]
    gxByteBuffer bb;
    unsigned char response;
    unsigned short pduSize;
    unsigned char ch, len, tag;
    unsigned long v;
    if ((ret = bb_getUInt8(data, &len)) != 0)
    117a:	f107 0318 	add.w	r3, r7, #24
    117e:	4619      	mov	r1, r3
    1180:	6838      	ldr	r0, [r7, #0]
    1182:	f002 fb13 	bl	37ac <bb_getUInt8>
    1186:	62f8      	str	r0, [r7, #44]	; 0x2c
    1188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    118a:	2b00      	cmp	r3, #0
    118c:	d001      	beq.n	1192 <apdu_parseUserInformation+0x22>
    {
        return ret;
    118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1190:	e22a      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    if (data->size - data->position < len)
    1192:	683b      	ldr	r3, [r7, #0]
    1194:	88db      	ldrh	r3, [r3, #6]
    1196:	461a      	mov	r2, r3
    1198:	683b      	ldr	r3, [r7, #0]
    119a:	891b      	ldrh	r3, [r3, #8]
    119c:	1ad3      	subs	r3, r2, r3
    119e:	7e3a      	ldrb	r2, [r7, #24]
    11a0:	4293      	cmp	r3, r2
    11a2:	da02      	bge.n	11aa <apdu_parseUserInformation+0x3a>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    11a4:	f44f 7382 	mov.w	r3, #260	; 0x104
    11a8:	e21e      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    // Encoding the choice for user information
    if ((ret = bb_getUInt8(data, &tag)) != 0)
    11aa:	f107 0317 	add.w	r3, r7, #23
    11ae:	4619      	mov	r1, r3
    11b0:	6838      	ldr	r0, [r7, #0]
    11b2:	f002 fafb 	bl	37ac <bb_getUInt8>
    11b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    11b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11ba:	2b00      	cmp	r3, #0
    11bc:	d001      	beq.n	11c2 <apdu_parseUserInformation+0x52>
    {
        return ret;
    11be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11c0:	e212      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    if (tag != 0x4)
    11c2:	7dfb      	ldrb	r3, [r7, #23]
    11c4:	2b04      	cmp	r3, #4
    11c6:	d002      	beq.n	11ce <apdu_parseUserInformation+0x5e>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    11c8:	f240 130f 	movw	r3, #271	; 0x10f
    11cc:	e20c      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    if ((ret = bb_getUInt8(data, &len)) != 0)
    11ce:	f107 0318 	add.w	r3, r7, #24
    11d2:	4619      	mov	r1, r3
    11d4:	6838      	ldr	r0, [r7, #0]
    11d6:	f002 fae9 	bl	37ac <bb_getUInt8>
    11da:	62f8      	str	r0, [r7, #44]	; 0x2c
    11dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11de:	2b00      	cmp	r3, #0
    11e0:	d001      	beq.n	11e6 <apdu_parseUserInformation+0x76>
    {
        return ret;
    11e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11e4:	e200      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    // Tag for xDLMS-Initate.response
    if ((ret = bb_getUInt8(data, &tag)) != 0)
    11e6:	f107 0317 	add.w	r3, r7, #23
    11ea:	4619      	mov	r1, r3
    11ec:	6838      	ldr	r0, [r7, #0]
    11ee:	f002 fadd 	bl	37ac <bb_getUInt8>
    11f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    11f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11f6:	2b00      	cmp	r3, #0
    11f8:	d001      	beq.n	11fe <apdu_parseUserInformation+0x8e>
    {
        return ret;
    11fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11fc:	e1f4      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
    11fe:	7dfb      	ldrb	r3, [r7, #23]
    1200:	2b28      	cmp	r3, #40	; 0x28
    1202:	d00e      	beq.n	1222 <apdu_parseUserInformation+0xb2>
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
    1204:	7dfb      	ldrb	r3, [r7, #23]
    if ((ret = bb_getUInt8(data, &tag)) != 0)
    {
        return ret;
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
    1206:	2b21      	cmp	r3, #33	; 0x21
    1208:	d00b      	beq.n	1222 <apdu_parseUserInformation+0xb2>
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_DED_INITIATE_RESPONSE ||
    120a:	7dfb      	ldrb	r3, [r7, #23]
    {
        return ret;
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
    120c:	2b48      	cmp	r3, #72	; 0x48
    120e:	d008      	beq.n	1222 <apdu_parseUserInformation+0xb2>
        tag == DLMS_COMMAND_DED_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_DED_INITIATE_REQUEST ||
    1210:	7dfb      	ldrb	r3, [r7, #23]
        return ret;
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_DED_INITIATE_RESPONSE ||
    1212:	2b41      	cmp	r3, #65	; 0x41
    1214:	d005      	beq.n	1222 <apdu_parseUserInformation+0xb2>
        tag == DLMS_COMMAND_DED_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    1216:	7dfb      	ldrb	r3, [r7, #23]
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_DED_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_DED_INITIATE_REQUEST ||
    1218:	2bdb      	cmp	r3, #219	; 0xdb
    121a:	d002      	beq.n	1222 <apdu_parseUserInformation+0xb2>
        tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
        tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
    121c:	7dfb      	ldrb	r3, [r7, #23]
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (tag == DLMS_COMMAND_GLO_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_GLO_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_DED_INITIATE_RESPONSE ||
        tag == DLMS_COMMAND_DED_INITIATE_REQUEST ||
        tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    121e:	2bdc      	cmp	r3, #220	; 0xdc
    1220:	d126      	bne.n	1270 <apdu_parseUserInformation+0x100>
        tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
    {
        data->position = (data->position - 1);
    1222:	683b      	ldr	r3, [r7, #0]
    1224:	891b      	ldrh	r3, [r3, #8]
    1226:	3b01      	subs	r3, #1
    1228:	b29a      	uxth	r2, r3
    122a:	683b      	ldr	r3, [r7, #0]
    122c:	811a      	strh	r2, [r3, #8]
        if ((ret = cip_decrypt(&settings->cipher,
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	f103 0088 	add.w	r0, r3, #136	; 0x88
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	f103 011c 	add.w	r1, r3, #28
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	f103 028c 	add.w	r2, r3, #140	; 0x8c
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	3388      	adds	r3, #136	; 0x88
    1244:	9300      	str	r3, [sp, #0]
    1246:	683b      	ldr	r3, [r7, #0]
    1248:	f004 fa72 	bl	5730 <cip_decrypt>
    124c:	62f8      	str	r0, [r7, #44]	; 0x2c
    124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1250:	2b00      	cmp	r3, #0
    1252:	d001      	beq.n	1258 <apdu_parseUserInformation+0xe8>
            &settings->sourceSystemTitle,
            &settings->cipher.blockCipherKey,
            data,
            &settings->cipher.security)) != 0)
        {
            return ret;
    1254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1256:	e1c7      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        if ((ret = bb_getUInt8(data, &tag)) != 0)
    1258:	f107 0317 	add.w	r3, r7, #23
    125c:	4619      	mov	r1, r3
    125e:	6838      	ldr	r0, [r7, #0]
    1260:	f002 faa4 	bl	37ac <bb_getUInt8>
    1264:	62f8      	str	r0, [r7, #44]	; 0x2c
    1266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1268:	2b00      	cmp	r3, #0
    126a:	d001      	beq.n	1270 <apdu_parseUserInformation+0x100>
        {
            return ret;
    126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    126e:	e1bb      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    response = tag == DLMS_COMMAND_INITIATE_RESPONSE;
    1270:	7dfb      	ldrb	r3, [r7, #23]
    1272:	2b08      	cmp	r3, #8
    1274:	bf0c      	ite	eq
    1276:	2301      	moveq	r3, #1
    1278:	2300      	movne	r3, #0
    127a:	b2db      	uxtb	r3, r3
    127c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (response)
    1280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    1284:	2b00      	cmp	r3, #0
    1286:	d01c      	beq.n	12c2 <apdu_parseUserInformation+0x152>
    {
        // Optional usage field of the negotiated quality of service
        // component
        if ((ret = bb_getUInt8(data, &tag)) != 0)
    1288:	f107 0317 	add.w	r3, r7, #23
    128c:	4619      	mov	r1, r3
    128e:	6838      	ldr	r0, [r7, #0]
    1290:	f002 fa8c 	bl	37ac <bb_getUInt8>
    1294:	62f8      	str	r0, [r7, #44]	; 0x2c
    1296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1298:	2b00      	cmp	r3, #0
    129a:	d001      	beq.n	12a0 <apdu_parseUserInformation+0x130>
        {
            return ret;
    129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    129e:	e1a3      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        if (tag != 0)
    12a0:	7dfb      	ldrb	r3, [r7, #23]
    12a2:	2b00      	cmp	r3, #0
    12a4:	f000 80a7 	beq.w	13f6 <apdu_parseUserInformation+0x286>
        {
            if ((ret = bb_getUInt8(data, &settings->qualityOfService)) != 0)
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	33c0      	adds	r3, #192	; 0xc0
    12ac:	4619      	mov	r1, r3
    12ae:	6838      	ldr	r0, [r7, #0]
    12b0:	f002 fa7c 	bl	37ac <bb_getUInt8>
    12b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    12b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12b8:	2b00      	cmp	r3, #0
    12ba:	f000 809c 	beq.w	13f6 <apdu_parseUserInformation+0x286>
            {
                return ret;
    12be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12c0:	e192      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
        }
    }
    else if (tag == DLMS_COMMAND_INITIATE_REQUEST)
    12c2:	7dfb      	ldrb	r3, [r7, #23]
    12c4:	2b01      	cmp	r3, #1
    12c6:	f040 8093 	bne.w	13f0 <apdu_parseUserInformation+0x280>
    {
        // Optional usage field of the negotiated quality of service
        // component
        if ((ret = bb_getUInt8(data, &tag)) != 0)
    12ca:	f107 0317 	add.w	r3, r7, #23
    12ce:	4619      	mov	r1, r3
    12d0:	6838      	ldr	r0, [r7, #0]
    12d2:	f002 fa6b 	bl	37ac <bb_getUInt8>
    12d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    12d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12da:	2b00      	cmp	r3, #0
    12dc:	d001      	beq.n	12e2 <apdu_parseUserInformation+0x172>
        {
            return ret;
    12de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12e0:	e182      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        // Dedicated key.
#ifdef DLMS_IGNORE_HIGH_GMAC

#else
        if (tag != 0)
    12e2:	7dfb      	ldrb	r3, [r7, #23]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d030      	beq.n	134a <apdu_parseUserInformation+0x1da>
        {
            if ((ret = bb_getUInt8(data, &len)) != 0)
    12e8:	f107 0318 	add.w	r3, r7, #24
    12ec:	4619      	mov	r1, r3
    12ee:	6838      	ldr	r0, [r7, #0]
    12f0:	f002 fa5c 	bl	37ac <bb_getUInt8>
    12f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    12f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12f8:	2b00      	cmp	r3, #0
    12fa:	d001      	beq.n	1300 <apdu_parseUserInformation+0x190>
            {
                return ret;
    12fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12fe:	e173      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
            if (settings->cipher.dedicatedKey == NULL)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1306:	2b00      	cmp	r3, #0
    1308:	d10e      	bne.n	1328 <apdu_parseUserInformation+0x1b8>
            {
                settings->cipher.dedicatedKey = gxmalloc(sizeof(gxByteBuffer));
    130a:	200c      	movs	r0, #12
    130c:	f028 fb9a 	bl	29a44 <malloc>
    1310:	4603      	mov	r3, r0
    1312:	461a      	mov	r2, r3
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
                bb_init(settings->cipher.dedicatedKey);
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1320:	4618      	mov	r0, r3
    1322:	f001 fce1 	bl	2ce8 <bb_init>
    1326:	e005      	b.n	1334 <apdu_parseUserInformation+0x1c4>
            }
            else
            {
                bb_clear(settings->cipher.dedicatedKey);
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    132e:	4618      	mov	r0, r3
    1330:	f002 fa18 	bl	3764 <bb_clear>
            }
            bb_set2(settings->cipher.dedicatedKey, data, data->position, len);
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    133a:	683b      	ldr	r3, [r7, #0]
    133c:	891a      	ldrh	r2, [r3, #8]
    133e:	7e3b      	ldrb	r3, [r7, #24]
    1340:	b29b      	uxth	r3, r3
    1342:	6839      	ldr	r1, [r7, #0]
    1344:	f002 f96c 	bl	3620 <bb_set2>
    1348:	e014      	b.n	1374 <apdu_parseUserInformation+0x204>
        }
        else if (settings->cipher.dedicatedKey != NULL)
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1350:	2b00      	cmp	r3, #0
    1352:	d00f      	beq.n	1374 <apdu_parseUserInformation+0x204>
        {
            bb_clear(settings->cipher.dedicatedKey);
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    135a:	4618      	mov	r0, r3
    135c:	f002 fa02 	bl	3764 <bb_clear>
            gxfree(settings->cipher.dedicatedKey);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1366:	4618      	mov	r0, r3
    1368:	f028 fb74 	bl	29a54 <free>
            settings->cipher.dedicatedKey = NULL;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	2200      	movs	r2, #0
    1370:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        }
#endif //DLMS_IGNORE_HIGH_GMAC
        // Optional usage field of the negotiated quality of service
        // component
        if ((ret = bb_getUInt8(data, &tag)) != 0)
    1374:	f107 0317 	add.w	r3, r7, #23
    1378:	4619      	mov	r1, r3
    137a:	6838      	ldr	r0, [r7, #0]
    137c:	f002 fa16 	bl	37ac <bb_getUInt8>
    1380:	62f8      	str	r0, [r7, #44]	; 0x2c
    1382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1384:	2b00      	cmp	r3, #0
    1386:	d001      	beq.n	138c <apdu_parseUserInformation+0x21c>
        {
            return ret;
    1388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    138a:	e12d      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        // Skip if used.
        if (tag != 0)
    138c:	7dfb      	ldrb	r3, [r7, #23]
    138e:	2b00      	cmp	r3, #0
    1390:	d013      	beq.n	13ba <apdu_parseUserInformation+0x24a>
        {
            if ((ret = bb_getUInt8(data, &len)) != 0)
    1392:	f107 0318 	add.w	r3, r7, #24
    1396:	4619      	mov	r1, r3
    1398:	6838      	ldr	r0, [r7, #0]
    139a:	f002 fa07 	bl	37ac <bb_getUInt8>
    139e:	62f8      	str	r0, [r7, #44]	; 0x2c
    13a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13a2:	2b00      	cmp	r3, #0
    13a4:	d001      	beq.n	13aa <apdu_parseUserInformation+0x23a>
            {
                return ret;
    13a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13a8:	e11e      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
            data->position = (data->position + len);
    13aa:	683b      	ldr	r3, [r7, #0]
    13ac:	891a      	ldrh	r2, [r3, #8]
    13ae:	7e3b      	ldrb	r3, [r7, #24]
    13b0:	b29b      	uxth	r3, r3
    13b2:	4413      	add	r3, r2
    13b4:	b29a      	uxth	r2, r3
    13b6:	683b      	ldr	r3, [r7, #0]
    13b8:	811a      	strh	r2, [r3, #8]
        }
        // Optional usage field of the proposed quality of service component
        if ((ret = bb_getUInt8(data, &tag)) != 0)
    13ba:	f107 0317 	add.w	r3, r7, #23
    13be:	4619      	mov	r1, r3
    13c0:	6838      	ldr	r0, [r7, #0]
    13c2:	f002 f9f3 	bl	37ac <bb_getUInt8>
    13c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    13c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13ca:	2b00      	cmp	r3, #0
    13cc:	d001      	beq.n	13d2 <apdu_parseUserInformation+0x262>
        {
            return ret;
    13ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13d0:	e10a      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        // Skip if used.
        if (tag != 0)
    13d2:	7dfb      	ldrb	r3, [r7, #23]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d00e      	beq.n	13f6 <apdu_parseUserInformation+0x286>
        {
            if ((ret = bb_getUInt8(data, &settings->qualityOfService)) != 0)
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	33c0      	adds	r3, #192	; 0xc0
    13dc:	4619      	mov	r1, r3
    13de:	6838      	ldr	r0, [r7, #0]
    13e0:	f002 f9e4 	bl	37ac <bb_getUInt8>
    13e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    13e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13e8:	2b00      	cmp	r3, #0
    13ea:	d004      	beq.n	13f6 <apdu_parseUserInformation+0x286>
            {
                return ret;
    13ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13ee:	e0fb      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    13f0:	f240 130f 	movw	r3, #271	; 0x10f
    13f4:	e0f8      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    // Get DLMS version number.
    if (settings->server)
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    13fc:	2b00      	cmp	r3, #0
    13fe:	d010      	beq.n	1422 <apdu_parseUserInformation+0x2b2>
    {
        if ((ret = bb_getUInt8(data, &ch)) != 0)
    1400:	f107 0319 	add.w	r3, r7, #25
    1404:	4619      	mov	r1, r3
    1406:	6838      	ldr	r0, [r7, #0]
    1408:	f002 f9d0 	bl	37ac <bb_getUInt8>
    140c:	62f8      	str	r0, [r7, #44]	; 0x2c
    140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1410:	2b00      	cmp	r3, #0
    1412:	d001      	beq.n	1418 <apdu_parseUserInformation+0x2a8>
        {
            return ret;
    1414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1416:	e0e7      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        settings->dlmsVersionNumber = ch;
    1418:	7e7a      	ldrb	r2, [r7, #25]
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    1420:	e011      	b.n	1446 <apdu_parseUserInformation+0x2d6>
    }
    else
    {
        if ((ret = bb_getUInt8(data, &ch)) != 0)
    1422:	f107 0319 	add.w	r3, r7, #25
    1426:	4619      	mov	r1, r3
    1428:	6838      	ldr	r0, [r7, #0]
    142a:	f002 f9bf 	bl	37ac <bb_getUInt8>
    142e:	62f8      	str	r0, [r7, #44]	; 0x2c
    1430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1432:	2b00      	cmp	r3, #0
    1434:	d001      	beq.n	143a <apdu_parseUserInformation+0x2ca>
        {
            return ret;
    1436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1438:	e0d6      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        if (ch < 6)
    143a:	7e7b      	ldrb	r3, [r7, #25]
    143c:	2b05      	cmp	r3, #5
    143e:	d802      	bhi.n	1446 <apdu_parseUserInformation+0x2d6>
        {
            //Invalid DLMS version number.
            return DLMS_ERROR_CODE_INVALID_VERSION_NUMBER;
    1440:	f44f 7385 	mov.w	r3, #266	; 0x10a
    1444:	e0d0      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
    }

    // Tag for conformance block
    if ((ret = bb_getUInt8(data, &tag)) != 0)
    1446:	f107 0317 	add.w	r3, r7, #23
    144a:	4619      	mov	r1, r3
    144c:	6838      	ldr	r0, [r7, #0]
    144e:	f002 f9ad 	bl	37ac <bb_getUInt8>
    1452:	62f8      	str	r0, [r7, #44]	; 0x2c
    1454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1456:	2b00      	cmp	r3, #0
    1458:	d001      	beq.n	145e <apdu_parseUserInformation+0x2ee>
    {
        return ret;
    145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    145c:	e0c4      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    if (tag != 0x5F)
    145e:	7dfb      	ldrb	r3, [r7, #23]
    1460:	2b5f      	cmp	r3, #95	; 0x5f
    1462:	d002      	beq.n	146a <apdu_parseUserInformation+0x2fa>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    1464:	f240 130f 	movw	r3, #271	; 0x10f
    1468:	e0be      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    // Old Way...
    tag = data->data[data->position];
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	681b      	ldr	r3, [r3, #0]
    146e:	683a      	ldr	r2, [r7, #0]
    1470:	8912      	ldrh	r2, [r2, #8]
    1472:	4413      	add	r3, r2
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	75fb      	strb	r3, [r7, #23]
    if (tag == 0x1F)
    1478:	7dfb      	ldrb	r3, [r7, #23]
    147a:	2b1f      	cmp	r3, #31
    147c:	d105      	bne.n	148a <apdu_parseUserInformation+0x31a>
    {
        data->position = (data->position + 1);
    147e:	683b      	ldr	r3, [r7, #0]
    1480:	891b      	ldrh	r3, [r3, #8]
    1482:	3301      	adds	r3, #1
    1484:	b29a      	uxth	r2, r3
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	811a      	strh	r2, [r3, #8]
    }
    if ((ret = bb_getUInt8(data, &len)) != 0)
    148a:	f107 0318 	add.w	r3, r7, #24
    148e:	4619      	mov	r1, r3
    1490:	6838      	ldr	r0, [r7, #0]
    1492:	f002 f98b 	bl	37ac <bb_getUInt8>
    1496:	62f8      	str	r0, [r7, #44]	; 0x2c
    1498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    149a:	2b00      	cmp	r3, #0
    149c:	d001      	beq.n	14a2 <apdu_parseUserInformation+0x332>
    {
        return ret;
    149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14a0:	e0a2      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    // The number of unused bits in the bit string.
    if ((ret = bb_getUInt8(data, &tag)) != 0)
    14a2:	f107 0317 	add.w	r3, r7, #23
    14a6:	4619      	mov	r1, r3
    14a8:	6838      	ldr	r0, [r7, #0]
    14aa:	f002 f97f 	bl	37ac <bb_getUInt8>
    14ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    14b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14b2:	2b00      	cmp	r3, #0
    14b4:	d001      	beq.n	14ba <apdu_parseUserInformation+0x34a>
    {
        return ret;
    14b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14b8:	e096      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    bb_get(data, tmp, 3);
    14ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
    14be:	2203      	movs	r2, #3
    14c0:	4619      	mov	r1, r3
    14c2:	6838      	ldr	r0, [r7, #0]
    14c4:	f002 fd94 	bl	3ff0 <bb_get>
    bb_init(&bb);
    14c8:	f107 031c 	add.w	r3, r7, #28
    14cc:	4618      	mov	r0, r3
    14ce:	f001 fc0b 	bl	2ce8 <bb_init>
    bb_setInt8(&bb, 0);
    14d2:	f107 031c 	add.w	r3, r7, #28
    14d6:	2100      	movs	r1, #0
    14d8:	4618      	mov	r0, r3
    14da:	f001 ffff 	bl	34dc <bb_setInt8>
    bb_set(&bb, tmp, 3);
    14de:	f107 0128 	add.w	r1, r7, #40	; 0x28
    14e2:	f107 031c 	add.w	r3, r7, #28
    14e6:	2203      	movs	r2, #3
    14e8:	4618      	mov	r0, r3
    14ea:	f002 f839 	bl	3560 <bb_set>
    if ((ret = bb_getUInt32(&bb, &v)) != 0)
    14ee:	f107 0210 	add.w	r2, r7, #16
    14f2:	f107 031c 	add.w	r3, r7, #28
    14f6:	4611      	mov	r1, r2
    14f8:	4618      	mov	r0, r3
    14fa:	f002 f9e9 	bl	38d0 <bb_getUInt32>
    14fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    1500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1502:	2b00      	cmp	r3, #0
    1504:	d001      	beq.n	150a <apdu_parseUserInformation+0x39a>
    {
        return ret;
    1506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1508:	e06e      	b.n	15e8 <apdu_parseUserInformation+0x478>
    }
    bb_clear(&bb);
    150a:	f107 031c 	add.w	r3, r7, #28
    150e:	4618      	mov	r0, r3
    1510:	f002 f928 	bl	3764 <bb_clear>
    if (settings->server)
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    151a:	2b00      	cmp	r3, #0
    151c:	d006      	beq.n	152c <apdu_parseUserInformation+0x3bc>
    {
        settings->negotiatedConformance = (DLMS_CONFORMANCE)(v & settings->proposedConformance);
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1522:	693b      	ldr	r3, [r7, #16]
    1524:	401a      	ands	r2, r3
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	669a      	str	r2, [r3, #104]	; 0x68
    152a:	e002      	b.n	1532 <apdu_parseUserInformation+0x3c2>
    }
    else
    {
        settings->negotiatedConformance = (DLMS_CONFORMANCE)v;
    152c:	693a      	ldr	r2, [r7, #16]
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (settings->server)
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    1538:	2b00      	cmp	r3, #0
    153a:	d01a      	beq.n	1572 <apdu_parseUserInformation+0x402>
    {
        if ((ret = bb_getUInt16(data, &pduSize)) != 0)
    153c:	f107 031a 	add.w	r3, r7, #26
    1540:	4619      	mov	r1, r3
    1542:	6838      	ldr	r0, [r7, #0]
    1544:	f002 f994 	bl	3870 <bb_getUInt16>
    1548:	62f8      	str	r0, [r7, #44]	; 0x2c
    154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    154c:	2b00      	cmp	r3, #0
    154e:	d001      	beq.n	1554 <apdu_parseUserInformation+0x3e4>
        {
            return ret;
    1550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1552:	e049      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        //If client asks too high PDU.
        if (pduSize > settings->maxServerPDUSize)
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
    155a:	8b7b      	ldrh	r3, [r7, #26]
    155c:	429a      	cmp	r2, r3
    155e:	d203      	bcs.n	1568 <apdu_parseUserInformation+0x3f8>
        {
            pduSize = settings->maxServerPDUSize;
    1560:	687b      	ldr	r3, [r7, #4]
    1562:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
    1566:	837b      	strh	r3, [r7, #26]
        }
        settings->maxPduSize = pduSize;
    1568:	8b7a      	ldrh	r2, [r7, #26]
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    1570:	e00f      	b.n	1592 <apdu_parseUserInformation+0x422>
    }
    else
    {
        if ((ret = bb_getUInt16(data, &pduSize)) != 0)
    1572:	f107 031a 	add.w	r3, r7, #26
    1576:	4619      	mov	r1, r3
    1578:	6838      	ldr	r0, [r7, #0]
    157a:	f002 f979 	bl	3870 <bb_getUInt16>
    157e:	62f8      	str	r0, [r7, #44]	; 0x2c
    1580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1582:	2b00      	cmp	r3, #0
    1584:	d001      	beq.n	158a <apdu_parseUserInformation+0x41a>
        {
            return ret;
    1586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1588:	e02e      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        settings->maxPduSize = pduSize;
    158a:	8b7a      	ldrh	r2, [r7, #26]
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    }
    if (response)
    1592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    1596:	2b00      	cmp	r3, #0
    1598:	d025      	beq.n	15e6 <apdu_parseUserInformation+0x476>
    {
        // VAA Name
        unsigned short vaa;
        if ((ret = bb_getUInt16(data, &vaa)) != 0)
    159a:	f107 030e 	add.w	r3, r7, #14
    159e:	4619      	mov	r1, r3
    15a0:	6838      	ldr	r0, [r7, #0]
    15a2:	f002 f965 	bl	3870 <bb_getUInt16>
    15a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    15a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15aa:	2b00      	cmp	r3, #0
    15ac:	d001      	beq.n	15b2 <apdu_parseUserInformation+0x442>
        {
            return ret;
    15ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15b0:	e01a      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
        if (vaa == 0x0007)
    15b2:	89fb      	ldrh	r3, [r7, #14]
    15b4:	2b07      	cmp	r3, #7
    15b6:	d107      	bne.n	15c8 <apdu_parseUserInformation+0x458>
        {
            // If LN
            if (!settings->useLogicalNameReferencing)
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    15be:	2b00      	cmp	r3, #0
    15c0:	d111      	bne.n	15e6 <apdu_parseUserInformation+0x476>
            {
                //Invalid VAA.
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    15c2:	f44f 7381 	mov.w	r3, #258	; 0x102
    15c6:	e00f      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
        }
        else if (vaa == 0xFA00)
    15c8:	89fb      	ldrh	r3, [r7, #14]
    15ca:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
    15ce:	d107      	bne.n	15e0 <apdu_parseUserInformation+0x470>
        {
            // If SN
            if (settings->useLogicalNameReferencing)
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    15d6:	2b00      	cmp	r3, #0
    15d8:	d005      	beq.n	15e6 <apdu_parseUserInformation+0x476>
            {
                //Invalid VAA.
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    15da:	f44f 7381 	mov.w	r3, #258	; 0x102
    15de:	e003      	b.n	15e8 <apdu_parseUserInformation+0x478>
            }
        }
        else
        {
            // Unknown VAA.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    15e0:	f44f 7381 	mov.w	r3, #258	; 0x102
    15e4:	e000      	b.n	15e8 <apdu_parseUserInformation+0x478>
        }
    }
    return 0;
    15e6:	2300      	movs	r3, #0
}
    15e8:	4618      	mov	r0, r3
    15ea:	3730      	adds	r7, #48	; 0x30
    15ec:	46bd      	mov	sp, r7
    15ee:	bd80      	pop	{r7, pc}

000015f0 <apdu_parseApplicationContextName>:
 */
int apdu_parseApplicationContextName(
    dlmsSettings* settings,
    gxByteBuffer* buff,
    unsigned char* ciphered)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	b086      	sub	sp, #24
    15f4:	af00      	add	r7, sp, #0
    15f6:	60f8      	str	r0, [r7, #12]
    15f8:	60b9      	str	r1, [r7, #8]
    15fa:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char len, ch;
    // Get length.
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    15fc:	f107 0313 	add.w	r3, r7, #19
    1600:	4619      	mov	r1, r3
    1602:	68b8      	ldr	r0, [r7, #8]
    1604:	f002 f8d2 	bl	37ac <bb_getUInt8>
    1608:	6178      	str	r0, [r7, #20]
    160a:	697b      	ldr	r3, [r7, #20]
    160c:	2b00      	cmp	r3, #0
    160e:	d001      	beq.n	1614 <apdu_parseApplicationContextName+0x24>
    {
        return ret;
    1610:	697b      	ldr	r3, [r7, #20]
    1612:	e0d8      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (buff->size - buff->position < len)
    1614:	68bb      	ldr	r3, [r7, #8]
    1616:	88db      	ldrh	r3, [r3, #6]
    1618:	461a      	mov	r2, r3
    161a:	68bb      	ldr	r3, [r7, #8]
    161c:	891b      	ldrh	r3, [r3, #8]
    161e:	1ad3      	subs	r3, r2, r3
    1620:	7cfa      	ldrb	r2, [r7, #19]
    1622:	4293      	cmp	r3, r2
    1624:	da02      	bge.n	162c <apdu_parseApplicationContextName+0x3c>
    {
        //Encoding failed. Not enough data->
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    1626:	f44f 7382 	mov.w	r3, #260	; 0x104
    162a:	e0cc      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    162c:	f107 0312 	add.w	r3, r7, #18
    1630:	4619      	mov	r1, r3
    1632:	68b8      	ldr	r0, [r7, #8]
    1634:	f002 f8ba 	bl	37ac <bb_getUInt8>
    1638:	6178      	str	r0, [r7, #20]
    163a:	697b      	ldr	r3, [r7, #20]
    163c:	2b00      	cmp	r3, #0
    163e:	d001      	beq.n	1644 <apdu_parseApplicationContextName+0x54>
    {
        return ret;
    1640:	697b      	ldr	r3, [r7, #20]
    1642:	e0c0      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x6)
    1644:	7cbb      	ldrb	r3, [r7, #18]
    1646:	2b06      	cmp	r3, #6
    1648:	d002      	beq.n	1650 <apdu_parseApplicationContextName+0x60>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    164a:	f44f 7381 	mov.w	r3, #258	; 0x102
    164e:	e0ba      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (settings->server)
    1650:	68fb      	ldr	r3, [r7, #12]
    1652:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    1656:	2b00      	cmp	r3, #0
    1658:	d003      	beq.n	1662 <apdu_parseApplicationContextName+0x72>
    {
        settings->cipher.security = DLMS_SECURITY_NONE;
    165a:	68fb      	ldr	r3, [r7, #12]
    165c:	2200      	movs	r2, #0
    165e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    // Object ID length.
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    1662:	f107 0313 	add.w	r3, r7, #19
    1666:	4619      	mov	r1, r3
    1668:	68b8      	ldr	r0, [r7, #8]
    166a:	f002 f89f 	bl	37ac <bb_getUInt8>
    166e:	6178      	str	r0, [r7, #20]
    1670:	697b      	ldr	r3, [r7, #20]
    1672:	2b00      	cmp	r3, #0
    1674:	d001      	beq.n	167a <apdu_parseApplicationContextName+0x8a>
    {
        return ret;
    1676:	697b      	ldr	r3, [r7, #20]
    1678:	e0a5      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    167a:	f107 0312 	add.w	r3, r7, #18
    167e:	4619      	mov	r1, r3
    1680:	68b8      	ldr	r0, [r7, #8]
    1682:	f002 f893 	bl	37ac <bb_getUInt8>
    1686:	6178      	str	r0, [r7, #20]
    1688:	697b      	ldr	r3, [r7, #20]
    168a:	2b00      	cmp	r3, #0
    168c:	d001      	beq.n	1692 <apdu_parseApplicationContextName+0xa2>
    {
        return ret;
    168e:	697b      	ldr	r3, [r7, #20]
    1690:	e099      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x60)
    1692:	7cbb      	ldrb	r3, [r7, #18]
    1694:	2b60      	cmp	r3, #96	; 0x60
    1696:	d002      	beq.n	169e <apdu_parseApplicationContextName+0xae>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1698:	f44f 7381 	mov.w	r3, #258	; 0x102
    169c:	e093      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    169e:	f107 0312 	add.w	r3, r7, #18
    16a2:	4619      	mov	r1, r3
    16a4:	68b8      	ldr	r0, [r7, #8]
    16a6:	f002 f881 	bl	37ac <bb_getUInt8>
    16aa:	6178      	str	r0, [r7, #20]
    16ac:	697b      	ldr	r3, [r7, #20]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d001      	beq.n	16b6 <apdu_parseApplicationContextName+0xc6>
    {
        return ret;
    16b2:	697b      	ldr	r3, [r7, #20]
    16b4:	e087      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x85)
    16b6:	7cbb      	ldrb	r3, [r7, #18]
    16b8:	2b85      	cmp	r3, #133	; 0x85
    16ba:	d002      	beq.n	16c2 <apdu_parseApplicationContextName+0xd2>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    16bc:	f44f 7381 	mov.w	r3, #258	; 0x102
    16c0:	e081      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    16c2:	f107 0312 	add.w	r3, r7, #18
    16c6:	4619      	mov	r1, r3
    16c8:	68b8      	ldr	r0, [r7, #8]
    16ca:	f002 f86f 	bl	37ac <bb_getUInt8>
    16ce:	6178      	str	r0, [r7, #20]
    16d0:	697b      	ldr	r3, [r7, #20]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d001      	beq.n	16da <apdu_parseApplicationContextName+0xea>
    {
        return ret;
    16d6:	697b      	ldr	r3, [r7, #20]
    16d8:	e075      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x74)
    16da:	7cbb      	ldrb	r3, [r7, #18]
    16dc:	2b74      	cmp	r3, #116	; 0x74
    16de:	d002      	beq.n	16e6 <apdu_parseApplicationContextName+0xf6>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    16e0:	f44f 7381 	mov.w	r3, #258	; 0x102
    16e4:	e06f      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }

    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    16e6:	f107 0312 	add.w	r3, r7, #18
    16ea:	4619      	mov	r1, r3
    16ec:	68b8      	ldr	r0, [r7, #8]
    16ee:	f002 f85d 	bl	37ac <bb_getUInt8>
    16f2:	6178      	str	r0, [r7, #20]
    16f4:	697b      	ldr	r3, [r7, #20]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d001      	beq.n	16fe <apdu_parseApplicationContextName+0x10e>
    {
        return ret;
    16fa:	697b      	ldr	r3, [r7, #20]
    16fc:	e063      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x05)
    16fe:	7cbb      	ldrb	r3, [r7, #18]
    1700:	2b05      	cmp	r3, #5
    1702:	d002      	beq.n	170a <apdu_parseApplicationContextName+0x11a>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1704:	f44f 7381 	mov.w	r3, #258	; 0x102
    1708:	e05d      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    170a:	f107 0312 	add.w	r3, r7, #18
    170e:	4619      	mov	r1, r3
    1710:	68b8      	ldr	r0, [r7, #8]
    1712:	f002 f84b 	bl	37ac <bb_getUInt8>
    1716:	6178      	str	r0, [r7, #20]
    1718:	697b      	ldr	r3, [r7, #20]
    171a:	2b00      	cmp	r3, #0
    171c:	d001      	beq.n	1722 <apdu_parseApplicationContextName+0x132>
    {
        return ret;
    171e:	697b      	ldr	r3, [r7, #20]
    1720:	e051      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x08)
    1722:	7cbb      	ldrb	r3, [r7, #18]
    1724:	2b08      	cmp	r3, #8
    1726:	d002      	beq.n	172e <apdu_parseApplicationContextName+0x13e>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1728:	f44f 7381 	mov.w	r3, #258	; 0x102
    172c:	e04b      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    172e:	f107 0312 	add.w	r3, r7, #18
    1732:	4619      	mov	r1, r3
    1734:	68b8      	ldr	r0, [r7, #8]
    1736:	f002 f839 	bl	37ac <bb_getUInt8>
    173a:	6178      	str	r0, [r7, #20]
    173c:	697b      	ldr	r3, [r7, #20]
    173e:	2b00      	cmp	r3, #0
    1740:	d001      	beq.n	1746 <apdu_parseApplicationContextName+0x156>
    {
        return ret;
    1742:	697b      	ldr	r3, [r7, #20]
    1744:	e03f      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (ch != 0x01)
    1746:	7cbb      	ldrb	r3, [r7, #18]
    1748:	2b01      	cmp	r3, #1
    174a:	d002      	beq.n	1752 <apdu_parseApplicationContextName+0x162>
    {
        //Encoding failed. Not an Object ID.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    174c:	f44f 7381 	mov.w	r3, #258	; 0x102
    1750:	e039      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    1752:	f107 0312 	add.w	r3, r7, #18
    1756:	4619      	mov	r1, r3
    1758:	68b8      	ldr	r0, [r7, #8]
    175a:	f002 f827 	bl	37ac <bb_getUInt8>
    175e:	6178      	str	r0, [r7, #20]
    1760:	697b      	ldr	r3, [r7, #20]
    1762:	2b00      	cmp	r3, #0
    1764:	d001      	beq.n	176a <apdu_parseApplicationContextName+0x17a>
    {
        return ret;
    1766:	697b      	ldr	r3, [r7, #20]
    1768:	e02d      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    if (settings->useLogicalNameReferencing)
    176a:	68fb      	ldr	r3, [r7, #12]
    176c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    1770:	2b00      	cmp	r3, #0
    1772:	d014      	beq.n	179e <apdu_parseApplicationContextName+0x1ae>
    {
        *ciphered = ch == 3;
    1774:	7cbb      	ldrb	r3, [r7, #18]
    1776:	2b03      	cmp	r3, #3
    1778:	bf0c      	ite	eq
    177a:	2301      	moveq	r3, #1
    177c:	2300      	movne	r3, #0
    177e:	b2db      	uxtb	r3, r3
    1780:	461a      	mov	r2, r3
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	701a      	strb	r2, [r3, #0]
        if (ch == 1 || *ciphered)
    1786:	7cbb      	ldrb	r3, [r7, #18]
    1788:	2b01      	cmp	r3, #1
    178a:	d003      	beq.n	1794 <apdu_parseApplicationContextName+0x1a4>
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d001      	beq.n	1798 <apdu_parseApplicationContextName+0x1a8>
        {
            return 0;
    1794:	2300      	movs	r3, #0
    1796:	e016      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
        }
        return DLMS_ERROR_CODE_FALSE;
    1798:	f04f 33ff 	mov.w	r3, #4294967295
    179c:	e013      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    *ciphered = ch == 4;
    179e:	7cbb      	ldrb	r3, [r7, #18]
    17a0:	2b04      	cmp	r3, #4
    17a2:	bf0c      	ite	eq
    17a4:	2301      	moveq	r3, #1
    17a6:	2300      	movne	r3, #0
    17a8:	b2db      	uxtb	r3, r3
    17aa:	461a      	mov	r2, r3
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	701a      	strb	r2, [r3, #0]
    if (ch == 2 || *ciphered)
    17b0:	7cbb      	ldrb	r3, [r7, #18]
    17b2:	2b02      	cmp	r3, #2
    17b4:	d003      	beq.n	17be <apdu_parseApplicationContextName+0x1ce>
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d001      	beq.n	17c2 <apdu_parseApplicationContextName+0x1d2>
    {
        return 0;
    17be:	2300      	movs	r3, #0
    17c0:	e001      	b.n	17c6 <apdu_parseApplicationContextName+0x1d6>
    }
    return DLMS_ERROR_CODE_FALSE;
    17c2:	f04f 33ff 	mov.w	r3, #4294967295
}
    17c6:	4618      	mov	r0, r3
    17c8:	3718      	adds	r7, #24
    17ca:	46bd      	mov	sp, r7
    17cc:	bd80      	pop	{r7, pc}
    17ce:	bf00      	nop

000017d0 <apdu_validateAare>:

int apdu_validateAare(
    dlmsSettings* settings,
    gxByteBuffer* buff)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b084      	sub	sp, #16
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
    17d8:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char tag;
    if ((ret = bb_getUInt8(buff, &tag)) != 0)
    17da:	f107 030b 	add.w	r3, r7, #11
    17de:	4619      	mov	r1, r3
    17e0:	6838      	ldr	r0, [r7, #0]
    17e2:	f001 ffe3 	bl	37ac <bb_getUInt8>
    17e6:	60f8      	str	r0, [r7, #12]
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d001      	beq.n	17f2 <apdu_validateAare+0x22>
    {
        return ret;
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	e011      	b.n	1816 <apdu_validateAare+0x46>
    }
    if (settings->server)
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    17f8:	2b00      	cmp	r3, #0
    17fa:	d005      	beq.n	1808 <apdu_validateAare+0x38>
    {
        if (tag != (BER_TYPE_APPLICATION
    17fc:	7afb      	ldrb	r3, [r7, #11]
    17fe:	2b60      	cmp	r3, #96	; 0x60
    1800:	d008      	beq.n	1814 <apdu_validateAare+0x44>
            | BER_TYPE_CONSTRUCTED
            | PDU_TYPE_PROTOCOL_VERSION))
        {
            return DLMS_ERROR_CODE_INVALID_TAG;
    1802:	f240 130f 	movw	r3, #271	; 0x10f
    1806:	e006      	b.n	1816 <apdu_validateAare+0x46>
        }
    }
    else
    {
        if (tag != (BER_TYPE_APPLICATION
    1808:	7afb      	ldrb	r3, [r7, #11]
    180a:	2b61      	cmp	r3, #97	; 0x61
    180c:	d002      	beq.n	1814 <apdu_validateAare+0x44>
            | BER_TYPE_CONSTRUCTED
            | PDU_TYPE_APPLICATION_CONTEXT_NAME))
        {
            return DLMS_ERROR_CODE_INVALID_TAG;
    180e:	f240 130f 	movw	r3, #271	; 0x10f
    1812:	e000      	b.n	1816 <apdu_validateAare+0x46>
        }
    }
    return 0;
    1814:	2300      	movs	r3, #0
}
    1816:	4618      	mov	r0, r3
    1818:	3710      	adds	r7, #16
    181a:	46bd      	mov	sp, r7
    181c:	bd80      	pop	{r7, pc}
    181e:	bf00      	nop

00001820 <apdu_updatePassword>:

int apdu_updatePassword(
    dlmsSettings* settings,
    gxByteBuffer* buff)
{
    1820:	b580      	push	{r7, lr}
    1822:	b084      	sub	sp, #16
    1824:	af00      	add	r7, sp, #0
    1826:	6078      	str	r0, [r7, #4]
    1828:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char ch, len;
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    182a:	f107 030a 	add.w	r3, r7, #10
    182e:	4619      	mov	r1, r3
    1830:	6838      	ldr	r0, [r7, #0]
    1832:	f001 ffbb 	bl	37ac <bb_getUInt8>
    1836:	60f8      	str	r0, [r7, #12]
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	2b00      	cmp	r3, #0
    183c:	d001      	beq.n	1842 <apdu_updatePassword+0x22>
    {
        return ret;
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	e041      	b.n	18c6 <apdu_updatePassword+0xa6>
    }

    // Get authentication information.
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    1842:	f107 030b 	add.w	r3, r7, #11
    1846:	4619      	mov	r1, r3
    1848:	6838      	ldr	r0, [r7, #0]
    184a:	f001 ffaf 	bl	37ac <bb_getUInt8>
    184e:	60f8      	str	r0, [r7, #12]
    1850:	68fb      	ldr	r3, [r7, #12]
    1852:	2b00      	cmp	r3, #0
    1854:	d001      	beq.n	185a <apdu_updatePassword+0x3a>
    {
        return ret;
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	e035      	b.n	18c6 <apdu_updatePassword+0xa6>
    }
    if (ch != 0x80)
    185a:	7afb      	ldrb	r3, [r7, #11]
    185c:	2b80      	cmp	r3, #128	; 0x80
    185e:	d002      	beq.n	1866 <apdu_updatePassword+0x46>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    1860:	f240 130f 	movw	r3, #271	; 0x10f
    1864:	e02f      	b.n	18c6 <apdu_updatePassword+0xa6>
    }
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    1866:	f107 030a 	add.w	r3, r7, #10
    186a:	4619      	mov	r1, r3
    186c:	6838      	ldr	r0, [r7, #0]
    186e:	f001 ff9d 	bl	37ac <bb_getUInt8>
    1872:	60f8      	str	r0, [r7, #12]
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	2b00      	cmp	r3, #0
    1878:	d001      	beq.n	187e <apdu_updatePassword+0x5e>
    {
        return ret;
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	e023      	b.n	18c6 <apdu_updatePassword+0xa6>
    }
    if (settings->authentication == DLMS_AUTHENTICATION_LOW)
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    1884:	2b01      	cmp	r3, #1
    1886:	d10f      	bne.n	18a8 <apdu_updatePassword+0x88>
    {
        bb_clear(&settings->password);
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	333c      	adds	r3, #60	; 0x3c
    188c:	4618      	mov	r0, r3
    188e:	f001 ff69 	bl	3764 <bb_clear>
        bb_set2(&settings->password, buff, buff->position, len);
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    1898:	683b      	ldr	r3, [r7, #0]
    189a:	891a      	ldrh	r2, [r3, #8]
    189c:	7abb      	ldrb	r3, [r7, #10]
    189e:	b29b      	uxth	r3, r3
    18a0:	6839      	ldr	r1, [r7, #0]
    18a2:	f001 febd 	bl	3620 <bb_set2>
    18a6:	e00d      	b.n	18c4 <apdu_updatePassword+0xa4>
    }
    else
    {
        bb_clear(&settings->ctoSChallenge);
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	3304      	adds	r3, #4
    18ac:	4618      	mov	r0, r3
    18ae:	f001 ff59 	bl	3764 <bb_clear>
        bb_set2(&settings->ctoSChallenge, buff, buff->position, len);
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	1d18      	adds	r0, r3, #4
    18b6:	683b      	ldr	r3, [r7, #0]
    18b8:	891a      	ldrh	r2, [r3, #8]
    18ba:	7abb      	ldrb	r3, [r7, #10]
    18bc:	b29b      	uxth	r3, r3
    18be:	6839      	ldr	r1, [r7, #0]
    18c0:	f001 feae 	bl	3620 <bb_set2>
    }
    return 0;
    18c4:	2300      	movs	r3, #0
}
    18c6:	4618      	mov	r0, r3
    18c8:	3710      	adds	r7, #16
    18ca:	46bd      	mov	sp, r7
    18cc:	bd80      	pop	{r7, pc}
    18ce:	bf00      	nop

000018d0 <apdu_updateAuthentication>:

int apdu_updateAuthentication(
    dlmsSettings* settings,
    gxByteBuffer* buff)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b084      	sub	sp, #16
    18d4:	af00      	add	r7, sp, #0
    18d6:	6078      	str	r0, [r7, #4]
    18d8:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char ch;
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    18da:	f107 030b 	add.w	r3, r7, #11
    18de:	4619      	mov	r1, r3
    18e0:	6838      	ldr	r0, [r7, #0]
    18e2:	f001 ff63 	bl	37ac <bb_getUInt8>
    18e6:	60f8      	str	r0, [r7, #12]
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d001      	beq.n	18f2 <apdu_updateAuthentication+0x22>
    {
        return ret;
    18ee:	68fb      	ldr	r3, [r7, #12]
    18f0:	e082      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }

    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    18f2:	f107 030b 	add.w	r3, r7, #11
    18f6:	4619      	mov	r1, r3
    18f8:	6838      	ldr	r0, [r7, #0]
    18fa:	f001 ff57 	bl	37ac <bb_getUInt8>
    18fe:	60f8      	str	r0, [r7, #12]
    1900:	68fb      	ldr	r3, [r7, #12]
    1902:	2b00      	cmp	r3, #0
    1904:	d001      	beq.n	190a <apdu_updateAuthentication+0x3a>
    {
        return ret;
    1906:	68fb      	ldr	r3, [r7, #12]
    1908:	e076      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x60)
    190a:	7afb      	ldrb	r3, [r7, #11]
    190c:	2b60      	cmp	r3, #96	; 0x60
    190e:	d002      	beq.n	1916 <apdu_updateAuthentication+0x46>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    1910:	f240 130f 	movw	r3, #271	; 0x10f
    1914:	e070      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    1916:	f107 030b 	add.w	r3, r7, #11
    191a:	4619      	mov	r1, r3
    191c:	6838      	ldr	r0, [r7, #0]
    191e:	f001 ff45 	bl	37ac <bb_getUInt8>
    1922:	60f8      	str	r0, [r7, #12]
    1924:	68fb      	ldr	r3, [r7, #12]
    1926:	2b00      	cmp	r3, #0
    1928:	d001      	beq.n	192e <apdu_updateAuthentication+0x5e>
    {
        return ret;
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	e064      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x85)
    192e:	7afb      	ldrb	r3, [r7, #11]
    1930:	2b85      	cmp	r3, #133	; 0x85
    1932:	d002      	beq.n	193a <apdu_updateAuthentication+0x6a>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    1934:	f240 130f 	movw	r3, #271	; 0x10f
    1938:	e05e      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    193a:	f107 030b 	add.w	r3, r7, #11
    193e:	4619      	mov	r1, r3
    1940:	6838      	ldr	r0, [r7, #0]
    1942:	f001 ff33 	bl	37ac <bb_getUInt8>
    1946:	60f8      	str	r0, [r7, #12]
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	2b00      	cmp	r3, #0
    194c:	d001      	beq.n	1952 <apdu_updateAuthentication+0x82>
    {
        return ret;
    194e:	68fb      	ldr	r3, [r7, #12]
    1950:	e052      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x74)
    1952:	7afb      	ldrb	r3, [r7, #11]
    1954:	2b74      	cmp	r3, #116	; 0x74
    1956:	d002      	beq.n	195e <apdu_updateAuthentication+0x8e>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    1958:	f240 130f 	movw	r3, #271	; 0x10f
    195c:	e04c      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    195e:	f107 030b 	add.w	r3, r7, #11
    1962:	4619      	mov	r1, r3
    1964:	6838      	ldr	r0, [r7, #0]
    1966:	f001 ff21 	bl	37ac <bb_getUInt8>
    196a:	60f8      	str	r0, [r7, #12]
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	2b00      	cmp	r3, #0
    1970:	d001      	beq.n	1976 <apdu_updateAuthentication+0xa6>
    {
        return ret;
    1972:	68fb      	ldr	r3, [r7, #12]
    1974:	e040      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x05)
    1976:	7afb      	ldrb	r3, [r7, #11]
    1978:	2b05      	cmp	r3, #5
    197a:	d002      	beq.n	1982 <apdu_updateAuthentication+0xb2>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    197c:	f240 130f 	movw	r3, #271	; 0x10f
    1980:	e03a      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    1982:	f107 030b 	add.w	r3, r7, #11
    1986:	4619      	mov	r1, r3
    1988:	6838      	ldr	r0, [r7, #0]
    198a:	f001 ff0f 	bl	37ac <bb_getUInt8>
    198e:	60f8      	str	r0, [r7, #12]
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	2b00      	cmp	r3, #0
    1994:	d001      	beq.n	199a <apdu_updateAuthentication+0xca>
    {
        return ret;
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	e02e      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x08)
    199a:	7afb      	ldrb	r3, [r7, #11]
    199c:	2b08      	cmp	r3, #8
    199e:	d002      	beq.n	19a6 <apdu_updateAuthentication+0xd6>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    19a0:	f240 130f 	movw	r3, #271	; 0x10f
    19a4:	e028      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    19a6:	f107 030b 	add.w	r3, r7, #11
    19aa:	4619      	mov	r1, r3
    19ac:	6838      	ldr	r0, [r7, #0]
    19ae:	f001 fefd 	bl	37ac <bb_getUInt8>
    19b2:	60f8      	str	r0, [r7, #12]
    19b4:	68fb      	ldr	r3, [r7, #12]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d001      	beq.n	19be <apdu_updateAuthentication+0xee>
    {
        return ret;
    19ba:	68fb      	ldr	r3, [r7, #12]
    19bc:	e01c      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch != 0x02)
    19be:	7afb      	ldrb	r3, [r7, #11]
    19c0:	2b02      	cmp	r3, #2
    19c2:	d002      	beq.n	19ca <apdu_updateAuthentication+0xfa>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    19c4:	f240 130f 	movw	r3, #271	; 0x10f
    19c8:	e016      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    19ca:	f107 030b 	add.w	r3, r7, #11
    19ce:	4619      	mov	r1, r3
    19d0:	6838      	ldr	r0, [r7, #0]
    19d2:	f001 feeb 	bl	37ac <bb_getUInt8>
    19d6:	60f8      	str	r0, [r7, #12]
    19d8:	68fb      	ldr	r3, [r7, #12]
    19da:	2b00      	cmp	r3, #0
    19dc:	d001      	beq.n	19e2 <apdu_updateAuthentication+0x112>
    {
        return ret;
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	e00a      	b.n	19f8 <apdu_updateAuthentication+0x128>
    }
    if (ch > DLMS_AUTHENTICATION_HIGH_SHA256)
    19e2:	7afb      	ldrb	r3, [r7, #11]
    19e4:	2b06      	cmp	r3, #6
    19e6:	d902      	bls.n	19ee <apdu_updateAuthentication+0x11e>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    19e8:	f240 130f 	movw	r3, #271	; 0x10f
    19ec:	e004      	b.n	19f8 <apdu_updateAuthentication+0x128>
    if (ch == DLMS_AUTHENTICATION_HIGH_GMAC)
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    settings->authentication = (DLMS_AUTHENTICATION)ch;
    19ee:	7afa      	ldrb	r2, [r7, #11]
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return 0;
    19f6:	2300      	movs	r3, #0
}
    19f8:	4618      	mov	r0, r3
    19fa:	3710      	adds	r7, #16
    19fc:	46bd      	mov	sp, r7
    19fe:	bd80      	pop	{r7, pc}

00001a00 <apdu_getUserInformation>:

int apdu_getUserInformation(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
    1a00:	b5b0      	push	{r4, r5, r7, lr}
    1a02:	b090      	sub	sp, #64	; 0x40
    1a04:	af06      	add	r7, sp, #24
    1a06:	6078      	str	r0, [r7, #4]
    1a08:	6039      	str	r1, [r7, #0]
    int ret = 0;
    1a0a:	2300      	movs	r3, #0
    1a0c:	627b      	str	r3, [r7, #36]	; 0x24
    gxByteBuffer bb;
    bb_clear(data);
    1a0e:	6838      	ldr	r0, [r7, #0]
    1a10:	f001 fea8 	bl	3764 <bb_clear>
    bb_setUInt8(data, DLMS_COMMAND_INITIATE_RESPONSE); // Tag for xDLMS-Initiate
    1a14:	2108      	movs	r1, #8
    1a16:	6838      	ldr	r0, [r7, #0]
    1a18:	f001 f9fc 	bl	2e14 <bb_setUInt8>
    //NegotiatedQualityOfService
    if (settings->qualityOfService == 0)
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    1a22:	2b00      	cmp	r3, #0
    1a24:	d104      	bne.n	1a30 <apdu_getUserInformation+0x30>
    {
        // Not used.
        bb_setUInt8(data, 0x00);
    1a26:	2100      	movs	r1, #0
    1a28:	6838      	ldr	r0, [r7, #0]
    1a2a:	f001 f9f3 	bl	2e14 <bb_setUInt8>
    1a2e:	e00a      	b.n	1a46 <apdu_getUserInformation+0x46>
    }
    else
    {
        bb_setUInt8(data, 0x01);
    1a30:	2101      	movs	r1, #1
    1a32:	6838      	ldr	r0, [r7, #0]
    1a34:	f001 f9ee 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, settings->qualityOfService);
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    1a3e:	4619      	mov	r1, r3
    1a40:	6838      	ldr	r0, [r7, #0]
    1a42:	f001 f9e7 	bl	2e14 <bb_setUInt8>
    }
    // DLMS Version Number
    bb_setUInt8(data, 06);
    1a46:	2106      	movs	r1, #6
    1a48:	6838      	ldr	r0, [r7, #0]
    1a4a:	f001 f9e3 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x5F);
    1a4e:	215f      	movs	r1, #95	; 0x5f
    1a50:	6838      	ldr	r0, [r7, #0]
    1a52:	f001 f9df 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x1F);
    1a56:	211f      	movs	r1, #31
    1a58:	6838      	ldr	r0, [r7, #0]
    1a5a:	f001 f9db 	bl	2e14 <bb_setUInt8>
    // length of the conformance block
    bb_setUInt8(data, 0x04);
    1a5e:	2104      	movs	r1, #4
    1a60:	6838      	ldr	r0, [r7, #0]
    1a62:	f001 f9d7 	bl	2e14 <bb_setUInt8>
    // encoding the number of unused bits in the bit string
    bb_setUInt8(data, 0x00);
    1a66:	2100      	movs	r1, #0
    1a68:	6838      	ldr	r0, [r7, #0]
    1a6a:	f001 f9d3 	bl	2e14 <bb_setUInt8>
    bb_init(&bb);
    1a6e:	f107 0314 	add.w	r3, r7, #20
    1a72:	4618      	mov	r0, r3
    1a74:	f001 f938 	bl	2ce8 <bb_init>
    bb_setUInt32(&bb, settings->negotiatedConformance);
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    1a7c:	f107 0314 	add.w	r3, r7, #20
    1a80:	4611      	mov	r1, r2
    1a82:	4618      	mov	r0, r3
    1a84:	f001 faba 	bl	2ffc <bb_setUInt32>
    bb_set2(data, &bb, 1, 3);
    1a88:	f107 0114 	add.w	r1, r7, #20
    1a8c:	2303      	movs	r3, #3
    1a8e:	2201      	movs	r2, #1
    1a90:	6838      	ldr	r0, [r7, #0]
    1a92:	f001 fdc5 	bl	3620 <bb_set2>
    bb_clear(&bb);
    1a96:	f107 0314 	add.w	r3, r7, #20
    1a9a:	4618      	mov	r0, r3
    1a9c:	f001 fe62 	bl	3764 <bb_clear>
    bb_setUInt16(data, settings->maxPduSize);
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    1aa6:	4619      	mov	r1, r3
    1aa8:	6838      	ldr	r0, [r7, #0]
    1aaa:	f001 fa45 	bl	2f38 <bb_setUInt16>
    // VAA Name VAA name (0x0007 for LN referencing and 0xFA00 for SN)
    if (settings->useLogicalNameReferencing)
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d004      	beq.n	1ac2 <apdu_getUserInformation+0xc2>
    {
        bb_setUInt16(data, 0x0007);
    1ab8:	2107      	movs	r1, #7
    1aba:	6838      	ldr	r0, [r7, #0]
    1abc:	f001 fa3c 	bl	2f38 <bb_setUInt16>
    1ac0:	e004      	b.n	1acc <apdu_getUserInformation+0xcc>
    }
    else
    {
        bb_setUInt16(data, 0xFA00);
    1ac2:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
    1ac6:	6838      	ldr	r0, [r7, #0]
    1ac8:	f001 fa36 	bl	2f38 <bb_setUInt16>
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (isCiphered(&settings->cipher))
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	3388      	adds	r3, #136	; 0x88
    1ad0:	4618      	mov	r0, r3
    1ad2:	f00a fa43 	bl	bf5c <isCiphered>
    1ad6:	4603      	mov	r3, r0
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d051      	beq.n	1b80 <apdu_getUserInformation+0x180>
    {
        gxByteBuffer tmp;
        unsigned char cmd;
        if ((settings->negotiatedConformance & DLMS_CONFORMANCE_GENERAL_PROTECTION) != 0)
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d010      	beq.n	1b0a <apdu_getUserInformation+0x10a>
        {
            if (bb_size(settings->cipher.dedicatedKey) != 0)
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1aee:	4618      	mov	r0, r3
    1af0:	f001 f8ea 	bl	2cc8 <bb_size>
    1af4:	4603      	mov	r3, r0
    1af6:	2b00      	cmp	r3, #0
    1af8:	d003      	beq.n	1b02 <apdu_getUserInformation+0x102>
            {
                cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
    1afa:	23dc      	movs	r3, #220	; 0xdc
    1afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1b00:	e006      	b.n	1b10 <apdu_getUserInformation+0x110>
            }
            else
            {
                cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
    1b02:	23db      	movs	r3, #219	; 0xdb
    1b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1b08:	e002      	b.n	1b10 <apdu_getUserInformation+0x110>
            }
        }
        else
        {
            cmd = DLMS_COMMAND_GLO_INITIATE_RESPONSE;
    1b0a:	2328      	movs	r3, #40	; 0x28
    1b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
        bb_init(&tmp);
    1b10:	f107 0308 	add.w	r3, r7, #8
    1b14:	4618      	mov	r0, r3
    1b16:	f001 f8e7 	bl	2ce8 <bb_init>
        bb_set2(&tmp, data, data->position, data->size - data->position);
    1b1a:	683b      	ldr	r3, [r7, #0]
    1b1c:	8919      	ldrh	r1, [r3, #8]
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	88da      	ldrh	r2, [r3, #6]
    1b22:	683b      	ldr	r3, [r7, #0]
    1b24:	891b      	ldrh	r3, [r3, #8]
    1b26:	1ad3      	subs	r3, r2, r3
    1b28:	b29b      	uxth	r3, r3
    1b2a:	f107 0008 	add.w	r0, r7, #8
    1b2e:	460a      	mov	r2, r1
    1b30:	6839      	ldr	r1, [r7, #0]
    1b32:	f001 fd75 	bl	3620 <bb_set2>
        bb_clear(data);
    1b36:	6838      	ldr	r0, [r7, #0]
    1b38:	f001 fe14 	bl	3764 <bb_clear>

        ret = cip_encrypt(&settings->cipher,
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	f103 0088 	add.w	r0, r3, #136	; 0x88
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	f893 4088 	ldrb.w	r4, [r3, #136]	; 0x88
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	3398      	adds	r3, #152	; 0x98
    1b52:	687a      	ldr	r2, [r7, #4]
    1b54:	328c      	adds	r2, #140	; 0x8c
    1b56:	6839      	ldr	r1, [r7, #0]
    1b58:	9104      	str	r1, [sp, #16]
    1b5a:	f107 0108 	add.w	r1, r7, #8
    1b5e:	9103      	str	r1, [sp, #12]
    1b60:	9202      	str	r2, [sp, #8]
    1b62:	9301      	str	r3, [sp, #4]
    1b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1b68:	9300      	str	r3, [sp, #0]
    1b6a:	462b      	mov	r3, r5
    1b6c:	2203      	movs	r2, #3
    1b6e:	4621      	mov	r1, r4
    1b70:	f003 fb70 	bl	5254 <cip_encrypt>
    1b74:	6278      	str	r0, [r7, #36]	; 0x24
            cmd,
            &settings->cipher.systemTitle,
            &settings->cipher.blockCipherKey,
            &tmp,
            data);
        bb_clear(&tmp);
    1b76:	f107 0308 	add.w	r3, r7, #8
    1b7a:	4618      	mov	r0, r3
    1b7c:	f001 fdf2 	bl	3764 <bb_clear>
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return ret;
    1b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1b82:	4618      	mov	r0, r3
    1b84:	3728      	adds	r7, #40	; 0x28
    1b86:	46bd      	mov	sp, r7
    1b88:	bdb0      	pop	{r4, r5, r7, pc}
    1b8a:	bf00      	nop

00001b8c <apdu_handleResultComponent>:
    return 0;
}
#endif //DLMS_IGNORE_CLIENT

int apdu_handleResultComponent(DLMS_SOURCE_DIAGNOSTIC value)
{
    1b8c:	b480      	push	{r7}
    1b8e:	b085      	sub	sp, #20
    1b90:	af00      	add	r7, sp, #0
    1b92:	4603      	mov	r3, r0
    1b94:	71fb      	strb	r3, [r7, #7]
    int ret;
    switch ((int)value)
    1b96:	79fb      	ldrb	r3, [r7, #7]
    1b98:	3b01      	subs	r3, #1
    1b9a:	2b0c      	cmp	r3, #12
    1b9c:	d830      	bhi.n	1c00 <apdu_handleResultComponent+0x74>
    1b9e:	a201      	add	r2, pc, #4	; (adr r2, 1ba4 <apdu_handleResultComponent+0x18>)
    1ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ba4:	00001bd9 	.word	0x00001bd9
    1ba8:	00001be1 	.word	0x00001be1
    1bac:	00001c01 	.word	0x00001c01
    1bb0:	00001c01 	.word	0x00001c01
    1bb4:	00001c01 	.word	0x00001c01
    1bb8:	00001c01 	.word	0x00001c01
    1bbc:	00001c01 	.word	0x00001c01
    1bc0:	00001c01 	.word	0x00001c01
    1bc4:	00001c01 	.word	0x00001c01
    1bc8:	00001c01 	.word	0x00001c01
    1bcc:	00001be9 	.word	0x00001be9
    1bd0:	00001bf1 	.word	0x00001bf1
    1bd4:	00001bf9 	.word	0x00001bf9
    {
    case DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN:
        ret = DLMS_ERROR_CODE_NO_REASON_GIVEN;
    1bd8:	f240 1313 	movw	r3, #275	; 0x113
    1bdc:	60fb      	str	r3, [r7, #12]
        break;
    1bde:	e012      	b.n	1c06 <apdu_handleResultComponent+0x7a>
    case DLMS_SOURCE_DIAGNOSTIC_APPLICATION_CONTEXT_NAME_NOT_SUPPORTED:
        ret = DLMS_ERROR_CODE_APPLICATION_CONTEXT_NAME_NOT_SUPPORTED;
    1be0:	f44f 738a 	mov.w	r3, #276	; 0x114
    1be4:	60fb      	str	r3, [r7, #12]
        break;
    1be6:	e00e      	b.n	1c06 <apdu_handleResultComponent+0x7a>
    case DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_MECHANISM_NAME_NOT_RECOGNISED:
        ret = DLMS_ERROR_CODE_AUTHENTICATION_MECHANISM_NAME_NOT_RECOGNISED;
    1be8:	f240 1315 	movw	r3, #277	; 0x115
    1bec:	60fb      	str	r3, [r7, #12]
        break;
    1bee:	e00a      	b.n	1c06 <apdu_handleResultComponent+0x7a>
    case DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_MECHANISM_NAME_REQUIRED:
        ret = DLMS_ERROR_CODE_AUTHENTICATION_MECHANISM_NAME_REQUIRED;
    1bf0:	f44f 738b 	mov.w	r3, #278	; 0x116
    1bf4:	60fb      	str	r3, [r7, #12]
        break;
    1bf6:	e006      	b.n	1c06 <apdu_handleResultComponent+0x7a>
    case DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_FAILURE:
        ret = DLMS_ERROR_CODE_AUTHENTICATION_FAILURE;
    1bf8:	f240 1317 	movw	r3, #279	; 0x117
    1bfc:	60fb      	str	r3, [r7, #12]
        break;
    1bfe:	e002      	b.n	1c06 <apdu_handleResultComponent+0x7a>
    default:
        //OK.
        ret = 0;
    1c00:	2300      	movs	r3, #0
    1c02:	60fb      	str	r3, [r7, #12]
        break;
    1c04:	bf00      	nop
    }
    return ret;
    1c06:	68fb      	ldr	r3, [r7, #12]
}
    1c08:	4618      	mov	r0, r3
    1c0a:	3714      	adds	r7, #20
    1c0c:	46bd      	mov	sp, r7
    1c0e:	bc80      	pop	{r7}
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop

00001c14 <apdu_parseProtocolVersion>:

int apdu_parseProtocolVersion(dlmsSettings* settings,
    gxByteBuffer* buff)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b088      	sub	sp, #32
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
    1c1c:	6039      	str	r1, [r7, #0]
    unsigned char cnt, unusedBits, value;
    int ret;
    if ((ret = bb_getUInt8(buff, &cnt)) != 0)
    1c1e:	f107 0317 	add.w	r3, r7, #23
    1c22:	4619      	mov	r1, r3
    1c24:	6838      	ldr	r0, [r7, #0]
    1c26:	f001 fdc1 	bl	37ac <bb_getUInt8>
    1c2a:	61f8      	str	r0, [r7, #28]
    1c2c:	69fb      	ldr	r3, [r7, #28]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d001      	beq.n	1c36 <apdu_parseProtocolVersion+0x22>
    {
        return ret;
    1c32:	69fb      	ldr	r3, [r7, #28]
    1c34:	e050      	b.n	1cd8 <apdu_parseProtocolVersion+0xc4>
    }
    if ((ret = bb_getUInt8(buff, &unusedBits)) != 0)
    1c36:	f107 0316 	add.w	r3, r7, #22
    1c3a:	4619      	mov	r1, r3
    1c3c:	6838      	ldr	r0, [r7, #0]
    1c3e:	f001 fdb5 	bl	37ac <bb_getUInt8>
    1c42:	61f8      	str	r0, [r7, #28]
    1c44:	69fb      	ldr	r3, [r7, #28]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d001      	beq.n	1c4e <apdu_parseProtocolVersion+0x3a>
    {
        return ret;
    1c4a:	69fb      	ldr	r3, [r7, #28]
    1c4c:	e044      	b.n	1cd8 <apdu_parseProtocolVersion+0xc4>
    }
    if ((ret = bb_getUInt8(buff, &value)) != 0)
    1c4e:	f107 0315 	add.w	r3, r7, #21
    1c52:	4619      	mov	r1, r3
    1c54:	6838      	ldr	r0, [r7, #0]
    1c56:	f001 fda9 	bl	37ac <bb_getUInt8>
    1c5a:	61f8      	str	r0, [r7, #28]
    1c5c:	69fb      	ldr	r3, [r7, #28]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d001      	beq.n	1c66 <apdu_parseProtocolVersion+0x52>
    {
        return ret;
    1c62:	69fb      	ldr	r3, [r7, #28]
    1c64:	e038      	b.n	1cd8 <apdu_parseProtocolVersion+0xc4>
    }
    bitArray bb;
    ba_init(&bb);
    1c66:	f107 0308 	add.w	r3, r7, #8
    1c6a:	4618      	mov	r0, r3
    1c6c:	f000 fdc4 	bl	27f8 <ba_init>
    ba_copy(&bb, &value, 8 - unusedBits);
    1c70:	7dbb      	ldrb	r3, [r7, #22]
    1c72:	b29b      	uxth	r3, r3
    1c74:	f1c3 0308 	rsb	r3, r3, #8
    1c78:	b29a      	uxth	r2, r3
    1c7a:	f107 0115 	add.w	r1, r7, #21
    1c7e:	f107 0308 	add.w	r3, r7, #8
    1c82:	4618      	mov	r0, r3
    1c84:	f000 ff16 	bl	2ab4 <ba_copy>
    char* pv = ba_toString(&bb);
    1c88:	f107 0308 	add.w	r3, r7, #8
    1c8c:	4618      	mov	r0, r3
    1c8e:	f000 ffc7 	bl	2c20 <ba_toString>
    1c92:	61b8      	str	r0, [r7, #24]
    if (strcmp(pv, "100001") != 0)
    1c94:	4912      	ldr	r1, [pc, #72]	; (1ce0 <apdu_parseProtocolVersion+0xcc>)
    1c96:	69b8      	ldr	r0, [r7, #24]
    1c98:	f7fe fa38 	bl	10c <strcmp>
    1c9c:	4603      	mov	r3, r0
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d005      	beq.n	1cae <apdu_parseProtocolVersion+0x9a>
    {
        gxfree(pv);
    1ca2:	69b8      	ldr	r0, [r7, #24]
    1ca4:	f027 fed6 	bl	29a54 <free>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1ca8:	f44f 7381 	mov.w	r3, #258	; 0x102
    1cac:	e014      	b.n	1cd8 <apdu_parseProtocolVersion+0xc4>
    }
    if (settings->protocolVersion != NULL)
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d005      	beq.n	1cc4 <apdu_parseProtocolVersion+0xb0>
    {
        gxfree(settings->protocolVersion);
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    1cbe:	4618      	mov	r0, r3
    1cc0:	f027 fec8 	bl	29a54 <free>
    }
    settings->protocolVersion = pv;
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	69ba      	ldr	r2, [r7, #24]
    1cc8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    ba_clear(&bb);
    1ccc:	f107 0308 	add.w	r3, r7, #8
    1cd0:	4618      	mov	r0, r3
    1cd2:	f000 ff19 	bl	2b08 <ba_clear>
    return 0;
    1cd6:	2300      	movs	r3, #0
}
    1cd8:	4618      	mov	r0, r3
    1cda:	3720      	adds	r7, #32
    1cdc:	46bd      	mov	sp, r7
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	0002bf84 	.word	0x0002bf84

00001ce4 <apdu_parsePDU>:
int apdu_parsePDU(
    dlmsSettings* settings,
    gxByteBuffer* buff,
    DLMS_ASSOCIATION_RESULT* result,
    unsigned char* diagnostic)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b088      	sub	sp, #32
    1ce8:	af00      	add	r7, sp, #0
    1cea:	60f8      	str	r0, [r7, #12]
    1cec:	60b9      	str	r1, [r7, #8]
    1cee:	607a      	str	r2, [r7, #4]
    1cf0:	603b      	str	r3, [r7, #0]
    unsigned char ciphered;
    unsigned short size;
    unsigned char len;
    unsigned char tag;
    int ret;
    *result = DLMS_ASSOCIATION_RESULT_ACCEPTED;
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	2200      	movs	r2, #0
    1cf6:	701a      	strb	r2, [r3, #0]
    *diagnostic = DLMS_SOURCE_DIAGNOSTIC_NONE;
    1cf8:	683b      	ldr	r3, [r7, #0]
    1cfa:	2200      	movs	r2, #0
    1cfc:	701a      	strb	r2, [r3, #0]
    // Get AARE tag and length
    if ((ret = apdu_validateAare(settings, buff)) != 0)
    1cfe:	68b9      	ldr	r1, [r7, #8]
    1d00:	68f8      	ldr	r0, [r7, #12]
    1d02:	f7ff fd65 	bl	17d0 <apdu_validateAare>
    1d06:	61f8      	str	r0, [r7, #28]
    1d08:	69fb      	ldr	r3, [r7, #28]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d001      	beq.n	1d12 <apdu_parsePDU+0x2e>
    {
        return ret;
    1d0e:	69fb      	ldr	r3, [r7, #28]
    1d10:	e37e      	b.n	2410 <apdu_parsePDU+0x72c>
    }
    if ((ret = hlp_getObjectCount2(buff, &size)) != 0)
    1d12:	f107 0318 	add.w	r3, r7, #24
    1d16:	4619      	mov	r1, r3
    1d18:	68b8      	ldr	r0, [r7, #8]
    1d1a:	f01f fd97 	bl	2184c <hlp_getObjectCount2>
    1d1e:	61f8      	str	r0, [r7, #28]
    1d20:	69fb      	ldr	r3, [r7, #28]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d001      	beq.n	1d2a <apdu_parsePDU+0x46>
    {
        return ret;
    1d26:	69fb      	ldr	r3, [r7, #28]
    1d28:	e372      	b.n	2410 <apdu_parsePDU+0x72c>
    }
    if (size > buff->size - buff->position)
    1d2a:	8b3b      	ldrh	r3, [r7, #24]
    1d2c:	461a      	mov	r2, r3
    1d2e:	68bb      	ldr	r3, [r7, #8]
    1d30:	88db      	ldrh	r3, [r3, #6]
    1d32:	4619      	mov	r1, r3
    1d34:	68bb      	ldr	r3, [r7, #8]
    1d36:	891b      	ldrh	r3, [r3, #8]
    1d38:	1acb      	subs	r3, r1, r3
    1d3a:	429a      	cmp	r2, r3
    1d3c:	f340 835b 	ble.w	23f6 <apdu_parsePDU+0x712>
    {
        //Encoding failed. Not enough data->
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    1d40:	f44f 7382 	mov.w	r3, #260	; 0x104
    1d44:	e364      	b.n	2410 <apdu_parsePDU+0x72c>
    }
    while (buff->position < buff->size)
    {
        if ((ret = bb_getUInt8(buff, &tag)) != 0)
    1d46:	f107 0316 	add.w	r3, r7, #22
    1d4a:	4619      	mov	r1, r3
    1d4c:	68b8      	ldr	r0, [r7, #8]
    1d4e:	f001 fd2d 	bl	37ac <bb_getUInt8>
    1d52:	61f8      	str	r0, [r7, #28]
    1d54:	69fb      	ldr	r3, [r7, #28]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d001      	beq.n	1d5e <apdu_parsePDU+0x7a>
        {
            return ret;
    1d5a:	69fb      	ldr	r3, [r7, #28]
    1d5c:	e358      	b.n	2410 <apdu_parsePDU+0x72c>
        }
        switch (tag)
    1d5e:	7dbb      	ldrb	r3, [r7, #22]
    1d60:	3b80      	subs	r3, #128	; 0x80
    1d62:	2b3e      	cmp	r3, #62	; 0x3e
    1d64:	f200 832c 	bhi.w	23c0 <apdu_parsePDU+0x6dc>
    1d68:	a201      	add	r2, pc, #4	; (adr r2, 1d70 <apdu_parsePDU+0x8c>)
    1d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d6e:	bf00      	nop
    1d70:	000023a3 	.word	0x000023a3
    1d74:	000023c1 	.word	0x000023c1
    1d78:	000023c1 	.word	0x000023c1
    1d7c:	000023c1 	.word	0x000023c1
    1d80:	000023c1 	.word	0x000023c1
    1d84:	000023c1 	.word	0x000023c1
    1d88:	000023c1 	.word	0x000023c1
    1d8c:	000023c1 	.word	0x000023c1
    1d90:	000022b3 	.word	0x000022b3
    1d94:	00002313 	.word	0x00002313
    1d98:	000022b3 	.word	0x000022b3
    1d9c:	00002313 	.word	0x00002313
    1da0:	000023c1 	.word	0x000023c1
    1da4:	000023c1 	.word	0x000023c1
    1da8:	000023c1 	.word	0x000023c1
    1dac:	000023c1 	.word	0x000023c1
    1db0:	000023c1 	.word	0x000023c1
    1db4:	000023c1 	.word	0x000023c1
    1db8:	000023c1 	.word	0x000023c1
    1dbc:	000023c1 	.word	0x000023c1
    1dc0:	000023c1 	.word	0x000023c1
    1dc4:	000023c1 	.word	0x000023c1
    1dc8:	000023c1 	.word	0x000023c1
    1dcc:	000023c1 	.word	0x000023c1
    1dd0:	000023c1 	.word	0x000023c1
    1dd4:	000023c1 	.word	0x000023c1
    1dd8:	000023c1 	.word	0x000023c1
    1ddc:	000023c1 	.word	0x000023c1
    1de0:	000023c1 	.word	0x000023c1
    1de4:	000023c1 	.word	0x000023c1
    1de8:	000023c1 	.word	0x000023c1
    1dec:	000023c1 	.word	0x000023c1
    1df0:	000023c1 	.word	0x000023c1
    1df4:	00001e6d 	.word	0x00001e6d
    1df8:	00001e93 	.word	0x00001e93
    1dfc:	00001f7b 	.word	0x00001f7b
    1e00:	0000206f 	.word	0x0000206f
    1e04:	0000223f 	.word	0x0000223f
    1e08:	00002153 	.word	0x00002153
    1e0c:	0000223f 	.word	0x0000223f
    1e10:	000023c1 	.word	0x000023c1
    1e14:	0000223f 	.word	0x0000223f
    1e18:	000021d7 	.word	0x000021d7
    1e1c:	000023c1 	.word	0x000023c1
    1e20:	00002353 	.word	0x00002353
    1e24:	000023c1 	.word	0x000023c1
    1e28:	000023c1 	.word	0x000023c1
    1e2c:	000023c1 	.word	0x000023c1
    1e30:	000023c1 	.word	0x000023c1
    1e34:	000023c1 	.word	0x000023c1
    1e38:	000023c1 	.word	0x000023c1
    1e3c:	000023c1 	.word	0x000023c1
    1e40:	000023c1 	.word	0x000023c1
    1e44:	000023c1 	.word	0x000023c1
    1e48:	000023c1 	.word	0x000023c1
    1e4c:	000023c1 	.word	0x000023c1
    1e50:	000023c1 	.word	0x000023c1
    1e54:	000023c1 	.word	0x000023c1
    1e58:	000023c1 	.word	0x000023c1
    1e5c:	000023c1 	.word	0x000023c1
    1e60:	000023c1 	.word	0x000023c1
    1e64:	000023c1 	.word	0x000023c1
    1e68:	00002367 	.word	0x00002367
        {
            //0xA1
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_APPLICATION_CONTEXT_NAME:
        {
            if (apdu_parseApplicationContextName(settings, buff, &ciphered) != 0)
    1e6c:	f107 031b 	add.w	r3, r7, #27
    1e70:	461a      	mov	r2, r3
    1e72:	68b9      	ldr	r1, [r7, #8]
    1e74:	68f8      	ldr	r0, [r7, #12]
    1e76:	f7ff fbbb 	bl	15f0 <apdu_parseApplicationContextName>
    1e7a:	4603      	mov	r3, r0
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	f000 82ba 	beq.w	23f6 <apdu_parsePDU+0x712>
            {
                *diagnostic = DLMS_SOURCE_DIAGNOSTIC_APPLICATION_CONTEXT_NAME_NOT_SUPPORTED;
    1e82:	683b      	ldr	r3, [r7, #0]
    1e84:	2202      	movs	r2, #2
    1e86:	701a      	strb	r2, [r3, #0]
                *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2201      	movs	r2, #1
    1e8c:	701a      	strb	r2, [r3, #0]
                return 0;
    1e8e:	2300      	movs	r3, #0
    1e90:	e2be      	b.n	2410 <apdu_parsePDU+0x72c>
        }
        break;
        // 0xA2
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLED_AP_TITLE:
            // Get len.
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    1e92:	f107 0317 	add.w	r3, r7, #23
    1e96:	4619      	mov	r1, r3
    1e98:	68b8      	ldr	r0, [r7, #8]
    1e9a:	f001 fc87 	bl	37ac <bb_getUInt8>
    1e9e:	61f8      	str	r0, [r7, #28]
    1ea0:	69fb      	ldr	r3, [r7, #28]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d001      	beq.n	1eaa <apdu_parsePDU+0x1c6>
            {
                return ret;
    1ea6:	69fb      	ldr	r3, [r7, #28]
    1ea8:	e2b2      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (len != 3)
    1eaa:	7dfb      	ldrb	r3, [r7, #23]
    1eac:	2b03      	cmp	r3, #3
    1eae:	d002      	beq.n	1eb6 <apdu_parsePDU+0x1d2>
            {
                return DLMS_ERROR_CODE_INVALID_TAG;
    1eb0:	f240 130f 	movw	r3, #271	; 0x10f
    1eb4:	e2ac      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            // Choice for result.
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    1eb6:	f107 0316 	add.w	r3, r7, #22
    1eba:	4619      	mov	r1, r3
    1ebc:	68b8      	ldr	r0, [r7, #8]
    1ebe:	f001 fc75 	bl	37ac <bb_getUInt8>
    1ec2:	61f8      	str	r0, [r7, #28]
    1ec4:	69fb      	ldr	r3, [r7, #28]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d001      	beq.n	1ece <apdu_parsePDU+0x1ea>
            {
                return ret;
    1eca:	69fb      	ldr	r3, [r7, #28]
    1ecc:	e2a0      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (settings->server)
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d028      	beq.n	1f2a <apdu_parsePDU+0x246>
            {
                //Ignore if client sends CalledAPTitle.
                if (tag != BER_TYPE_OCTET_STRING)
    1ed8:	7dbb      	ldrb	r3, [r7, #22]
    1eda:	2b04      	cmp	r3, #4
    1edc:	d002      	beq.n	1ee4 <apdu_parsePDU+0x200>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    1ede:	f240 130f 	movw	r3, #271	; 0x10f
    1ee2:	e295      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                // Get len.
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    1ee4:	f107 0317 	add.w	r3, r7, #23
    1ee8:	4619      	mov	r1, r3
    1eea:	68b8      	ldr	r0, [r7, #8]
    1eec:	f001 fc5e 	bl	37ac <bb_getUInt8>
    1ef0:	61f8      	str	r0, [r7, #28]
    1ef2:	69fb      	ldr	r3, [r7, #28]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d001      	beq.n	1efc <apdu_parsePDU+0x218>
                {
                    return ret;
    1ef8:	69fb      	ldr	r3, [r7, #28]
    1efa:	e289      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (ciphered && len != 8)
    1efc:	7efb      	ldrb	r3, [r7, #27]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d00a      	beq.n	1f18 <apdu_parsePDU+0x234>
    1f02:	7dfb      	ldrb	r3, [r7, #23]
    1f04:	2b08      	cmp	r3, #8
    1f06:	d007      	beq.n	1f18 <apdu_parsePDU+0x234>
                {
                    *diagnostic = DLMS_SOURCE_DIAGNOSTIC_CALLING_AP_TITLE_NOT_RECOGNIZED;
    1f08:	683b      	ldr	r3, [r7, #0]
    1f0a:	2203      	movs	r2, #3
    1f0c:	701a      	strb	r2, [r3, #0]
                    *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    1f0e:	687b      	ldr	r3, [r7, #4]
    1f10:	2201      	movs	r2, #1
    1f12:	701a      	strb	r2, [r3, #0]
                    return 0;
    1f14:	2300      	movs	r3, #0
    1f16:	e27b      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                buff->position += len;
    1f18:	68bb      	ldr	r3, [r7, #8]
    1f1a:	891a      	ldrh	r2, [r3, #8]
    1f1c:	7dfb      	ldrb	r3, [r7, #23]
    1f1e:	b29b      	uxth	r3, r3
    1f20:	4413      	add	r3, r2
    1f22:	b29a      	uxth	r2, r3
    1f24:	68bb      	ldr	r3, [r7, #8]
    1f26:	811a      	strh	r2, [r3, #8]
    1f28:	e265      	b.n	23f6 <apdu_parsePDU+0x712>
            }
            else
            {
                if (tag != BER_TYPE_INTEGER)
    1f2a:	7dbb      	ldrb	r3, [r7, #22]
    1f2c:	2b02      	cmp	r3, #2
    1f2e:	d002      	beq.n	1f36 <apdu_parsePDU+0x252>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    1f30:	f240 130f 	movw	r3, #271	; 0x10f
    1f34:	e26c      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                // Get len.
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    1f36:	f107 0317 	add.w	r3, r7, #23
    1f3a:	4619      	mov	r1, r3
    1f3c:	68b8      	ldr	r0, [r7, #8]
    1f3e:	f001 fc35 	bl	37ac <bb_getUInt8>
    1f42:	61f8      	str	r0, [r7, #28]
    1f44:	69fb      	ldr	r3, [r7, #28]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d001      	beq.n	1f4e <apdu_parsePDU+0x26a>
                {
                    return ret;
    1f4a:	69fb      	ldr	r3, [r7, #28]
    1f4c:	e260      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (len != 1)
    1f4e:	7dfb      	ldrb	r3, [r7, #23]
    1f50:	2b01      	cmp	r3, #1
    1f52:	d002      	beq.n	1f5a <apdu_parsePDU+0x276>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    1f54:	f240 130f 	movw	r3, #271	; 0x10f
    1f58:	e25a      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if ((ret = bb_getUInt8(buff, &tag)) != 0)
    1f5a:	f107 0316 	add.w	r3, r7, #22
    1f5e:	4619      	mov	r1, r3
    1f60:	68b8      	ldr	r0, [r7, #8]
    1f62:	f001 fc23 	bl	37ac <bb_getUInt8>
    1f66:	61f8      	str	r0, [r7, #28]
    1f68:	69fb      	ldr	r3, [r7, #28]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d001      	beq.n	1f72 <apdu_parsePDU+0x28e>
                {
                    return ret;
    1f6e:	69fb      	ldr	r3, [r7, #28]
    1f70:	e24e      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                *result = (DLMS_ASSOCIATION_RESULT)tag;
    1f72:	7dba      	ldrb	r2, [r7, #22]
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	701a      	strb	r2, [r3, #0]
            }
            break;
    1f78:	e23d      	b.n	23f6 <apdu_parsePDU+0x712>
            // 0xA3 SourceDiagnostic
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLED_AE_QUALIFIER:
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    1f7a:	f107 0317 	add.w	r3, r7, #23
    1f7e:	4619      	mov	r1, r3
    1f80:	68b8      	ldr	r0, [r7, #8]
    1f82:	f001 fc13 	bl	37ac <bb_getUInt8>
    1f86:	61f8      	str	r0, [r7, #28]
    1f88:	69fb      	ldr	r3, [r7, #28]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d001      	beq.n	1f92 <apdu_parsePDU+0x2ae>
            {
                return ret;
    1f8e:	69fb      	ldr	r3, [r7, #28]
    1f90:	e23e      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            // ACSE service user tag.
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    1f92:	f107 0316 	add.w	r3, r7, #22
    1f96:	4619      	mov	r1, r3
    1f98:	68b8      	ldr	r0, [r7, #8]
    1f9a:	f001 fc07 	bl	37ac <bb_getUInt8>
    1f9e:	61f8      	str	r0, [r7, #28]
    1fa0:	69fb      	ldr	r3, [r7, #28]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d001      	beq.n	1faa <apdu_parsePDU+0x2c6>
            {
                return ret;
    1fa6:	69fb      	ldr	r3, [r7, #28]
    1fa8:	e232      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    1faa:	f107 0317 	add.w	r3, r7, #23
    1fae:	4619      	mov	r1, r3
    1fb0:	68b8      	ldr	r0, [r7, #8]
    1fb2:	f001 fbfb 	bl	37ac <bb_getUInt8>
    1fb6:	61f8      	str	r0, [r7, #28]
    1fb8:	69fb      	ldr	r3, [r7, #28]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d001      	beq.n	1fc2 <apdu_parsePDU+0x2de>
            {
                return ret;
    1fbe:	69fb      	ldr	r3, [r7, #28]
    1fc0:	e226      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (settings->server)
    1fc2:	68fb      	ldr	r3, [r7, #12]
    1fc4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d01c      	beq.n	2006 <apdu_parsePDU+0x322>
            {
                //Ignore if client sends CalledAEQualifier.
                if (tag != BER_TYPE_OCTET_STRING)
    1fcc:	7dbb      	ldrb	r3, [r7, #22]
    1fce:	2b04      	cmp	r3, #4
    1fd0:	d002      	beq.n	1fd8 <apdu_parsePDU+0x2f4>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    1fd2:	f240 130f 	movw	r3, #271	; 0x10f
    1fd6:	e21b      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (ciphered && len != 8)
    1fd8:	7efb      	ldrb	r3, [r7, #27]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d00a      	beq.n	1ff4 <apdu_parsePDU+0x310>
    1fde:	7dfb      	ldrb	r3, [r7, #23]
    1fe0:	2b08      	cmp	r3, #8
    1fe2:	d007      	beq.n	1ff4 <apdu_parsePDU+0x310>
                {
                    *diagnostic = DLMS_SOURCE_DIAGNOSTIC_CALLING_AP_TITLE_NOT_RECOGNIZED;
    1fe4:	683b      	ldr	r3, [r7, #0]
    1fe6:	2203      	movs	r2, #3
    1fe8:	701a      	strb	r2, [r3, #0]
                    *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	2201      	movs	r2, #1
    1fee:	701a      	strb	r2, [r3, #0]
                    return 0;
    1ff0:	2300      	movs	r3, #0
    1ff2:	e20d      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                buff->position += len;
    1ff4:	68bb      	ldr	r3, [r7, #8]
    1ff6:	891a      	ldrh	r2, [r3, #8]
    1ff8:	7dfb      	ldrb	r3, [r7, #23]
    1ffa:	b29b      	uxth	r3, r3
    1ffc:	4413      	add	r3, r2
    1ffe:	b29a      	uxth	r2, r3
    2000:	68bb      	ldr	r3, [r7, #8]
    2002:	811a      	strh	r2, [r3, #8]
    2004:	e1f7      	b.n	23f6 <apdu_parsePDU+0x712>
            }
            else
            {
                // Result source diagnostic component.
                if ((ret = bb_getUInt8(buff, &tag)) != 0)
    2006:	f107 0316 	add.w	r3, r7, #22
    200a:	4619      	mov	r1, r3
    200c:	68b8      	ldr	r0, [r7, #8]
    200e:	f001 fbcd 	bl	37ac <bb_getUInt8>
    2012:	61f8      	str	r0, [r7, #28]
    2014:	69fb      	ldr	r3, [r7, #28]
    2016:	2b00      	cmp	r3, #0
    2018:	d001      	beq.n	201e <apdu_parsePDU+0x33a>
                {
                    return ret;
    201a:	69fb      	ldr	r3, [r7, #28]
    201c:	e1f8      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (tag != BER_TYPE_INTEGER)
    201e:	7dbb      	ldrb	r3, [r7, #22]
    2020:	2b02      	cmp	r3, #2
    2022:	d002      	beq.n	202a <apdu_parsePDU+0x346>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    2024:	f240 130f 	movw	r3, #271	; 0x10f
    2028:	e1f2      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    202a:	f107 0317 	add.w	r3, r7, #23
    202e:	4619      	mov	r1, r3
    2030:	68b8      	ldr	r0, [r7, #8]
    2032:	f001 fbbb 	bl	37ac <bb_getUInt8>
    2036:	61f8      	str	r0, [r7, #28]
    2038:	69fb      	ldr	r3, [r7, #28]
    203a:	2b00      	cmp	r3, #0
    203c:	d001      	beq.n	2042 <apdu_parsePDU+0x35e>
                {
                    return ret;
    203e:	69fb      	ldr	r3, [r7, #28]
    2040:	e1e6      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (len != 1)
    2042:	7dfb      	ldrb	r3, [r7, #23]
    2044:	2b01      	cmp	r3, #1
    2046:	d002      	beq.n	204e <apdu_parsePDU+0x36a>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    2048:	f240 130f 	movw	r3, #271	; 0x10f
    204c:	e1e0      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if ((ret = bb_getUInt8(buff, &tag)) != 0)
    204e:	f107 0316 	add.w	r3, r7, #22
    2052:	4619      	mov	r1, r3
    2054:	68b8      	ldr	r0, [r7, #8]
    2056:	f001 fba9 	bl	37ac <bb_getUInt8>
    205a:	61f8      	str	r0, [r7, #28]
    205c:	69fb      	ldr	r3, [r7, #28]
    205e:	2b00      	cmp	r3, #0
    2060:	d001      	beq.n	2066 <apdu_parsePDU+0x382>
                {
                    return ret;
    2062:	69fb      	ldr	r3, [r7, #28]
    2064:	e1d4      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                *diagnostic = (DLMS_SOURCE_DIAGNOSTIC)tag;
    2066:	7dba      	ldrb	r2, [r7, #22]
    2068:	683b      	ldr	r3, [r7, #0]
    206a:	701a      	strb	r2, [r3, #0]
            }
            break;
    206c:	e1c3      	b.n	23f6 <apdu_parsePDU+0x712>
            // 0xA4 Result
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLED_AP_INVOCATION_ID:
            // Get len.
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    206e:	f107 0317 	add.w	r3, r7, #23
    2072:	4619      	mov	r1, r3
    2074:	68b8      	ldr	r0, [r7, #8]
    2076:	f001 fb99 	bl	37ac <bb_getUInt8>
    207a:	61f8      	str	r0, [r7, #28]
    207c:	69fb      	ldr	r3, [r7, #28]
    207e:	2b00      	cmp	r3, #0
    2080:	d001      	beq.n	2086 <apdu_parsePDU+0x3a2>
            {
                return ret;
    2082:	69fb      	ldr	r3, [r7, #28]
    2084:	e1c4      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (settings->server)
    2086:	68fb      	ldr	r3, [r7, #12]
    2088:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    208c:	2b00      	cmp	r3, #0
    208e:	d02c      	beq.n	20ea <apdu_parsePDU+0x406>
            {
                if (len != 3)
    2090:	7dfb      	ldrb	r3, [r7, #23]
    2092:	2b03      	cmp	r3, #3
    2094:	d002      	beq.n	209c <apdu_parsePDU+0x3b8>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    2096:	f240 130f 	movw	r3, #271	; 0x10f
    209a:	e1b9      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                // ACSE service user tag.
                if ((ret = bb_getUInt8(buff, &tag)) != 0)
    209c:	f107 0316 	add.w	r3, r7, #22
    20a0:	4619      	mov	r1, r3
    20a2:	68b8      	ldr	r0, [r7, #8]
    20a4:	f001 fb82 	bl	37ac <bb_getUInt8>
    20a8:	61f8      	str	r0, [r7, #28]
    20aa:	69fb      	ldr	r3, [r7, #28]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d001      	beq.n	20b4 <apdu_parsePDU+0x3d0>
                {
                    return ret;
    20b0:	69fb      	ldr	r3, [r7, #28]
    20b2:	e1ad      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (tag != BER_TYPE_INTEGER)
    20b4:	7dbb      	ldrb	r3, [r7, #22]
    20b6:	2b02      	cmp	r3, #2
    20b8:	d002      	beq.n	20c0 <apdu_parsePDU+0x3dc>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    20ba:	f240 130f 	movw	r3, #271	; 0x10f
    20be:	e1a7      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    20c0:	f107 0317 	add.w	r3, r7, #23
    20c4:	4619      	mov	r1, r3
    20c6:	68b8      	ldr	r0, [r7, #8]
    20c8:	f001 fb70 	bl	37ac <bb_getUInt8>
    20cc:	61f8      	str	r0, [r7, #28]
    20ce:	69fb      	ldr	r3, [r7, #28]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d001      	beq.n	20d8 <apdu_parsePDU+0x3f4>
                {
                    return ret;
    20d4:	69fb      	ldr	r3, [r7, #28]
    20d6:	e19b      	b.n	2410 <apdu_parsePDU+0x72c>
                }

                //Ignore if client sends CalledAEQualifier.
                buff->position += len;
    20d8:	68bb      	ldr	r3, [r7, #8]
    20da:	891a      	ldrh	r2, [r3, #8]
    20dc:	7dfb      	ldrb	r3, [r7, #23]
    20de:	b29b      	uxth	r3, r3
    20e0:	4413      	add	r3, r2
    20e2:	b29a      	uxth	r2, r3
    20e4:	68bb      	ldr	r3, [r7, #8]
    20e6:	811a      	strh	r2, [r3, #8]
    20e8:	e185      	b.n	23f6 <apdu_parsePDU+0x712>
            }
            else
            {
                if (len != 0xA)
    20ea:	7dfb      	ldrb	r3, [r7, #23]
    20ec:	2b0a      	cmp	r3, #10
    20ee:	d002      	beq.n	20f6 <apdu_parsePDU+0x412>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    20f0:	f240 130f 	movw	r3, #271	; 0x10f
    20f4:	e18c      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                // Choice for result (Universal, Octet string type)
                if ((ret = bb_getUInt8(buff, &tag)) != 0)
    20f6:	f107 0316 	add.w	r3, r7, #22
    20fa:	4619      	mov	r1, r3
    20fc:	68b8      	ldr	r0, [r7, #8]
    20fe:	f001 fb55 	bl	37ac <bb_getUInt8>
    2102:	61f8      	str	r0, [r7, #28]
    2104:	69fb      	ldr	r3, [r7, #28]
    2106:	2b00      	cmp	r3, #0
    2108:	d001      	beq.n	210e <apdu_parsePDU+0x42a>
                {
                    return ret;
    210a:	69fb      	ldr	r3, [r7, #28]
    210c:	e180      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                if (tag != BER_TYPE_OCTET_STRING)
    210e:	7dbb      	ldrb	r3, [r7, #22]
    2110:	2b04      	cmp	r3, #4
    2112:	d002      	beq.n	211a <apdu_parsePDU+0x436>
                {
                    return DLMS_ERROR_CODE_INVALID_TAG;
    2114:	f240 130f 	movw	r3, #271	; 0x10f
    2118:	e17a      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                // responding-AP-title-field
                // Get len.
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    211a:	f107 0317 	add.w	r3, r7, #23
    211e:	4619      	mov	r1, r3
    2120:	68b8      	ldr	r0, [r7, #8]
    2122:	f001 fb43 	bl	37ac <bb_getUInt8>
    2126:	61f8      	str	r0, [r7, #28]
    2128:	69fb      	ldr	r3, [r7, #28]
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <apdu_parsePDU+0x44e>
                {
                    return ret;
    212e:	69fb      	ldr	r3, [r7, #28]
    2130:	e16e      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                bb_clear(&settings->sourceSystemTitle);
    2132:	68fb      	ldr	r3, [r7, #12]
    2134:	331c      	adds	r3, #28
    2136:	4618      	mov	r0, r3
    2138:	f001 fb14 	bl	3764 <bb_clear>
                bb_set2(&settings->sourceSystemTitle, buff, buff->position, len);
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	f103 001c 	add.w	r0, r3, #28
    2142:	68bb      	ldr	r3, [r7, #8]
    2144:	891a      	ldrh	r2, [r3, #8]
    2146:	7dfb      	ldrb	r3, [r7, #23]
    2148:	b29b      	uxth	r3, r3
    214a:	68b9      	ldr	r1, [r7, #8]
    214c:	f001 fa68 	bl	3620 <bb_set2>
            }
            break;
    2150:	e151      	b.n	23f6 <apdu_parsePDU+0x712>
            // 0xA6 Client system title.
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLING_AP_TITLE:
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    2152:	f107 0317 	add.w	r3, r7, #23
    2156:	4619      	mov	r1, r3
    2158:	68b8      	ldr	r0, [r7, #8]
    215a:	f001 fb27 	bl	37ac <bb_getUInt8>
    215e:	61f8      	str	r0, [r7, #28]
    2160:	69fb      	ldr	r3, [r7, #28]
    2162:	2b00      	cmp	r3, #0
    2164:	d001      	beq.n	216a <apdu_parsePDU+0x486>
            {
                return ret;
    2166:	69fb      	ldr	r3, [r7, #28]
    2168:	e152      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    216a:	f107 0316 	add.w	r3, r7, #22
    216e:	4619      	mov	r1, r3
    2170:	68b8      	ldr	r0, [r7, #8]
    2172:	f001 fb1b 	bl	37ac <bb_getUInt8>
    2176:	61f8      	str	r0, [r7, #28]
    2178:	69fb      	ldr	r3, [r7, #28]
    217a:	2b00      	cmp	r3, #0
    217c:	d001      	beq.n	2182 <apdu_parsePDU+0x49e>
            {
                return ret;
    217e:	69fb      	ldr	r3, [r7, #28]
    2180:	e146      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    2182:	f107 0317 	add.w	r3, r7, #23
    2186:	4619      	mov	r1, r3
    2188:	68b8      	ldr	r0, [r7, #8]
    218a:	f001 fb0f 	bl	37ac <bb_getUInt8>
    218e:	61f8      	str	r0, [r7, #28]
    2190:	69fb      	ldr	r3, [r7, #28]
    2192:	2b00      	cmp	r3, #0
    2194:	d001      	beq.n	219a <apdu_parsePDU+0x4b6>
            {
                return ret;
    2196:	69fb      	ldr	r3, [r7, #28]
    2198:	e13a      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (ciphered && len != 8)
    219a:	7efb      	ldrb	r3, [r7, #27]
    219c:	2b00      	cmp	r3, #0
    219e:	d00a      	beq.n	21b6 <apdu_parsePDU+0x4d2>
    21a0:	7dfb      	ldrb	r3, [r7, #23]
    21a2:	2b08      	cmp	r3, #8
    21a4:	d007      	beq.n	21b6 <apdu_parsePDU+0x4d2>
            {
                *diagnostic = DLMS_SOURCE_DIAGNOSTIC_CALLING_AP_TITLE_NOT_RECOGNIZED;
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	2203      	movs	r2, #3
    21aa:	701a      	strb	r2, [r3, #0]
                *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	2201      	movs	r2, #1
    21b0:	701a      	strb	r2, [r3, #0]
                return 0;
    21b2:	2300      	movs	r3, #0
    21b4:	e12c      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            bb_clear(&settings->sourceSystemTitle);
    21b6:	68fb      	ldr	r3, [r7, #12]
    21b8:	331c      	adds	r3, #28
    21ba:	4618      	mov	r0, r3
    21bc:	f001 fad2 	bl	3764 <bb_clear>
            bb_set2(&settings->sourceSystemTitle, buff, buff->position, len);
    21c0:	68fb      	ldr	r3, [r7, #12]
    21c2:	f103 001c 	add.w	r0, r3, #28
    21c6:	68bb      	ldr	r3, [r7, #8]
    21c8:	891a      	ldrh	r2, [r3, #8]
    21ca:	7dfb      	ldrb	r3, [r7, #23]
    21cc:	b29b      	uxth	r3, r3
    21ce:	68b9      	ldr	r1, [r7, #8]
    21d0:	f001 fa26 	bl	3620 <bb_set2>
            break;
    21d4:	e10f      	b.n	23f6 <apdu_parsePDU+0x712>
            // 0xAA Server system title.
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_SENDER_ACSE_REQUIREMENTS:
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    21d6:	f107 0317 	add.w	r3, r7, #23
    21da:	4619      	mov	r1, r3
    21dc:	68b8      	ldr	r0, [r7, #8]
    21de:	f001 fae5 	bl	37ac <bb_getUInt8>
    21e2:	61f8      	str	r0, [r7, #28]
    21e4:	69fb      	ldr	r3, [r7, #28]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d001      	beq.n	21ee <apdu_parsePDU+0x50a>
            {
                return ret;
    21ea:	69fb      	ldr	r3, [r7, #28]
    21ec:	e110      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    21ee:	f107 0316 	add.w	r3, r7, #22
    21f2:	4619      	mov	r1, r3
    21f4:	68b8      	ldr	r0, [r7, #8]
    21f6:	f001 fad9 	bl	37ac <bb_getUInt8>
    21fa:	61f8      	str	r0, [r7, #28]
    21fc:	69fb      	ldr	r3, [r7, #28]
    21fe:	2b00      	cmp	r3, #0
    2200:	d001      	beq.n	2206 <apdu_parsePDU+0x522>
            {
                return ret;
    2202:	69fb      	ldr	r3, [r7, #28]
    2204:	e104      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    2206:	f107 0317 	add.w	r3, r7, #23
    220a:	4619      	mov	r1, r3
    220c:	68b8      	ldr	r0, [r7, #8]
    220e:	f001 facd 	bl	37ac <bb_getUInt8>
    2212:	61f8      	str	r0, [r7, #28]
    2214:	69fb      	ldr	r3, [r7, #28]
    2216:	2b00      	cmp	r3, #0
    2218:	d001      	beq.n	221e <apdu_parsePDU+0x53a>
            {
                return ret;
    221a:	69fb      	ldr	r3, [r7, #28]
    221c:	e0f8      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            bb_clear(&settings->stoCChallenge);
    221e:	68fb      	ldr	r3, [r7, #12]
    2220:	3310      	adds	r3, #16
    2222:	4618      	mov	r0, r3
    2224:	f001 fa9e 	bl	3764 <bb_clear>
            bb_set2(&settings->stoCChallenge, buff, buff->position, len);
    2228:	68fb      	ldr	r3, [r7, #12]
    222a:	f103 0010 	add.w	r0, r3, #16
    222e:	68bb      	ldr	r3, [r7, #8]
    2230:	891a      	ldrh	r2, [r3, #8]
    2232:	7dfb      	ldrb	r3, [r7, #23]
    2234:	b29b      	uxth	r3, r3
    2236:	68b9      	ldr	r1, [r7, #8]
    2238:	f001 f9f2 	bl	3620 <bb_set2>
            break;
    223c:	e0db      	b.n	23f6 <apdu_parsePDU+0x712>
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLING_AE_INVOCATION_ID:
            //Client CalledAeInvocationId.
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLED_AE_INVOCATION_ID://0xA5
            //Server RespondingAEInvocationId.
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | 7://0xA7
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    223e:	f107 0317 	add.w	r3, r7, #23
    2242:	4619      	mov	r1, r3
    2244:	68b8      	ldr	r0, [r7, #8]
    2246:	f001 fab1 	bl	37ac <bb_getUInt8>
    224a:	61f8      	str	r0, [r7, #28]
    224c:	69fb      	ldr	r3, [r7, #28]
    224e:	2b00      	cmp	r3, #0
    2250:	d001      	beq.n	2256 <apdu_parsePDU+0x572>
            {
                return ret;
    2252:	69fb      	ldr	r3, [r7, #28]
    2254:	e0dc      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    2256:	f107 0316 	add.w	r3, r7, #22
    225a:	4619      	mov	r1, r3
    225c:	68b8      	ldr	r0, [r7, #8]
    225e:	f001 faa5 	bl	37ac <bb_getUInt8>
    2262:	61f8      	str	r0, [r7, #28]
    2264:	69fb      	ldr	r3, [r7, #28]
    2266:	2b00      	cmp	r3, #0
    2268:	d001      	beq.n	226e <apdu_parsePDU+0x58a>
            {
                return ret;
    226a:	69fb      	ldr	r3, [r7, #28]
    226c:	e0d0      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    226e:	f107 0317 	add.w	r3, r7, #23
    2272:	4619      	mov	r1, r3
    2274:	68b8      	ldr	r0, [r7, #8]
    2276:	f001 fa99 	bl	37ac <bb_getUInt8>
    227a:	61f8      	str	r0, [r7, #28]
    227c:	69fb      	ldr	r3, [r7, #28]
    227e:	2b00      	cmp	r3, #0
    2280:	d001      	beq.n	2286 <apdu_parsePDU+0x5a2>
            {
                return ret;
    2282:	69fb      	ldr	r3, [r7, #28]
    2284:	e0c4      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    2286:	f107 0317 	add.w	r3, r7, #23
    228a:	4619      	mov	r1, r3
    228c:	68b8      	ldr	r0, [r7, #8]
    228e:	f001 fa8d 	bl	37ac <bb_getUInt8>
    2292:	61f8      	str	r0, [r7, #28]
    2294:	69fb      	ldr	r3, [r7, #28]
    2296:	2b00      	cmp	r3, #0
    2298:	d001      	beq.n	229e <apdu_parsePDU+0x5ba>
            {
                return ret;
    229a:	69fb      	ldr	r3, [r7, #28]
    229c:	e0b8      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (ciphered)
    229e:	7efb      	ldrb	r3, [r7, #27]
    22a0:	2b00      	cmp	r3, #0
    22a2:	f000 80a8 	beq.w	23f6 <apdu_parsePDU+0x712>
            {
                settings->userId = len;
    22a6:	7dfb      	ldrb	r3, [r7, #23]
    22a8:	b21a      	sxth	r2, r3
    22aa:	68fb      	ldr	r3, [r7, #12]
    22ac:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
            }
            break;
    22b0:	e0a1      	b.n	23f6 <apdu_parsePDU+0x712>
            //  0x8A or 0x88
        case (unsigned short)BER_TYPE_CONTEXT | (unsigned char)PDU_TYPE_SENDER_ACSE_REQUIREMENTS:
        case (unsigned short)BER_TYPE_CONTEXT | (unsigned char)PDU_TYPE_CALLING_AP_INVOCATION_ID:
            // Get sender ACSE-requirements field component.
            if ((ret = bb_getUInt8(buff, &len)) != 0)
    22b2:	f107 0317 	add.w	r3, r7, #23
    22b6:	4619      	mov	r1, r3
    22b8:	68b8      	ldr	r0, [r7, #8]
    22ba:	f001 fa77 	bl	37ac <bb_getUInt8>
    22be:	61f8      	str	r0, [r7, #28]
    22c0:	69fb      	ldr	r3, [r7, #28]
    22c2:	2b00      	cmp	r3, #0
    22c4:	d001      	beq.n	22ca <apdu_parsePDU+0x5e6>
            {
                return ret;
    22c6:	69fb      	ldr	r3, [r7, #28]
    22c8:	e0a2      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (len != 2)
    22ca:	7dfb      	ldrb	r3, [r7, #23]
    22cc:	2b02      	cmp	r3, #2
    22ce:	d002      	beq.n	22d6 <apdu_parsePDU+0x5f2>
            {
                return DLMS_ERROR_CODE_INVALID_TAG;
    22d0:	f240 130f 	movw	r3, #271	; 0x10f
    22d4:	e09c      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    22d6:	f107 0316 	add.w	r3, r7, #22
    22da:	4619      	mov	r1, r3
    22dc:	68b8      	ldr	r0, [r7, #8]
    22de:	f001 fa65 	bl	37ac <bb_getUInt8>
    22e2:	61f8      	str	r0, [r7, #28]
    22e4:	69fb      	ldr	r3, [r7, #28]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d001      	beq.n	22ee <apdu_parsePDU+0x60a>
            {
                return ret;
    22ea:	69fb      	ldr	r3, [r7, #28]
    22ec:	e090      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (tag != BER_TYPE_OBJECT_DESCRIPTOR)
    22ee:	7dbb      	ldrb	r3, [r7, #22]
    22f0:	2b07      	cmp	r3, #7
    22f2:	d002      	beq.n	22fa <apdu_parsePDU+0x616>
            {
                return DLMS_ERROR_CODE_INVALID_TAG;
    22f4:	f240 130f 	movw	r3, #271	; 0x10f
    22f8:	e08a      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            //Get only value because client app is sending system title with LOW authentication.
            if ((ret = bb_getUInt8(buff, &tag)) != 0)
    22fa:	f107 0316 	add.w	r3, r7, #22
    22fe:	4619      	mov	r1, r3
    2300:	68b8      	ldr	r0, [r7, #8]
    2302:	f001 fa53 	bl	37ac <bb_getUInt8>
    2306:	61f8      	str	r0, [r7, #28]
    2308:	69fb      	ldr	r3, [r7, #28]
    230a:	2b00      	cmp	r3, #0
    230c:	d073      	beq.n	23f6 <apdu_parsePDU+0x712>
            {
                return ret;
    230e:	69fb      	ldr	r3, [r7, #28]
    2310:	e07e      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            break;
            //  0x8B or 0x89
        case (unsigned short)BER_TYPE_CONTEXT | (unsigned char)PDU_TYPE_MECHANISM_NAME:
        case (unsigned short)BER_TYPE_CONTEXT | (unsigned char)PDU_TYPE_CALLING_AE_INVOCATION_ID:
            if ((ret = apdu_updateAuthentication(settings, buff)) != 0)
    2312:	68b9      	ldr	r1, [r7, #8]
    2314:	68f8      	ldr	r0, [r7, #12]
    2316:	f7ff fadb 	bl	18d0 <apdu_updateAuthentication>
    231a:	61f8      	str	r0, [r7, #28]
    231c:	69fb      	ldr	r3, [r7, #28]
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <apdu_parsePDU+0x642>
            {
                return ret;
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	e074      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (settings->server && settings->authentication == DLMS_AUTHENTICATION_HIGH_GMAC && settings->sourceSystemTitle.size != 8)
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    232c:	2b00      	cmp	r3, #0
    232e:	d062      	beq.n	23f6 <apdu_parsePDU+0x712>
    2330:	68fb      	ldr	r3, [r7, #12]
    2332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    2336:	2b05      	cmp	r3, #5
    2338:	d15d      	bne.n	23f6 <apdu_parsePDU+0x712>
    233a:	68fb      	ldr	r3, [r7, #12]
    233c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    233e:	2b08      	cmp	r3, #8
    2340:	d059      	beq.n	23f6 <apdu_parsePDU+0x712>
            {
                *diagnostic = DLMS_SOURCE_DIAGNOSTIC_CALLING_AP_TITLE_NOT_RECOGNIZED;
    2342:	683b      	ldr	r3, [r7, #0]
    2344:	2203      	movs	r2, #3
    2346:	701a      	strb	r2, [r3, #0]
                *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	2201      	movs	r2, #1
    234c:	701a      	strb	r2, [r3, #0]
                return 0;
    234e:	2300      	movs	r3, #0
    2350:	e05e      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            break;
            // 0xAC
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLING_AUTHENTICATION_VALUE:
            if ((ret = apdu_updatePassword(settings, buff)) != 0)
    2352:	68b9      	ldr	r1, [r7, #8]
    2354:	68f8      	ldr	r0, [r7, #12]
    2356:	f7ff fa63 	bl	1820 <apdu_updatePassword>
    235a:	61f8      	str	r0, [r7, #28]
    235c:	69fb      	ldr	r3, [r7, #28]
    235e:	2b00      	cmp	r3, #0
    2360:	d049      	beq.n	23f6 <apdu_parsePDU+0x712>
            {
                return ret;
    2362:	69fb      	ldr	r3, [r7, #28]
    2364:	e054      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            break;
            // 0xBE
        case BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_USER_INFORMATION:
            //Check result component. Some meters are returning invalid user-information if connection failed.
            if (*result != DLMS_ASSOCIATION_RESULT_ACCEPTED
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	2b00      	cmp	r3, #0
    236c:	d00a      	beq.n	2384 <apdu_parsePDU+0x6a0>
                && *diagnostic != DLMS_SOURCE_DIAGNOSTIC_NONE)
    236e:	683b      	ldr	r3, [r7, #0]
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	2b00      	cmp	r3, #0
    2374:	d006      	beq.n	2384 <apdu_parsePDU+0x6a0>
            {
                return apdu_handleResultComponent(*diagnostic);
    2376:	683b      	ldr	r3, [r7, #0]
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	4618      	mov	r0, r3
    237c:	f7ff fc06 	bl	1b8c <apdu_handleResultComponent>
    2380:	4603      	mov	r3, r0
    2382:	e045      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            if (apdu_parseUserInformation(settings, buff) != 0)
    2384:	68b9      	ldr	r1, [r7, #8]
    2386:	68f8      	ldr	r0, [r7, #12]
    2388:	f7fe fef2 	bl	1170 <apdu_parseUserInformation>
    238c:	4603      	mov	r3, r0
    238e:	2b00      	cmp	r3, #0
    2390:	d031      	beq.n	23f6 <apdu_parsePDU+0x712>
            {
                *result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	2201      	movs	r2, #1
    2396:	701a      	strb	r2, [r3, #0]
                *diagnostic = DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
    2398:	683b      	ldr	r3, [r7, #0]
    239a:	2201      	movs	r2, #1
    239c:	701a      	strb	r2, [r3, #0]
                return 0;
    239e:	2300      	movs	r3, #0
    23a0:	e036      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            break;
        case BER_TYPE_CONTEXT: //0x80
            if (apdu_parseProtocolVersion(settings, buff) != 0)
    23a2:	68b9      	ldr	r1, [r7, #8]
    23a4:	68f8      	ldr	r0, [r7, #12]
    23a6:	f7ff fc35 	bl	1c14 <apdu_parseProtocolVersion>
    23aa:	4603      	mov	r3, r0
    23ac:	2b00      	cmp	r3, #0
    23ae:	d022      	beq.n	23f6 <apdu_parsePDU+0x712>
            {
                *diagnostic = DLMS_ACSE_SERVICE_PROVIDER_NO_COMMON_ACSE_VERSION;
    23b0:	683b      	ldr	r3, [r7, #0]
    23b2:	2202      	movs	r2, #2
    23b4:	701a      	strb	r2, [r3, #0]
                *result = DLMS_ASSOCIATION_RESULT_TRANSIENT_REJECTED;
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	2202      	movs	r2, #2
    23ba:	701a      	strb	r2, [r3, #0]
                return 0;
    23bc:	2300      	movs	r3, #0
    23be:	e027      	b.n	2410 <apdu_parsePDU+0x72c>
            }
            break;
        default:
            // Unknown tags.
            if (buff->position < buff->size)
    23c0:	68bb      	ldr	r3, [r7, #8]
    23c2:	891a      	ldrh	r2, [r3, #8]
    23c4:	68bb      	ldr	r3, [r7, #8]
    23c6:	88db      	ldrh	r3, [r3, #6]
    23c8:	429a      	cmp	r2, r3
    23ca:	d213      	bcs.n	23f4 <apdu_parsePDU+0x710>
            {
                if ((ret = bb_getUInt8(buff, &len)) != 0)
    23cc:	f107 0317 	add.w	r3, r7, #23
    23d0:	4619      	mov	r1, r3
    23d2:	68b8      	ldr	r0, [r7, #8]
    23d4:	f001 f9ea 	bl	37ac <bb_getUInt8>
    23d8:	61f8      	str	r0, [r7, #28]
    23da:	69fb      	ldr	r3, [r7, #28]
    23dc:	2b00      	cmp	r3, #0
    23de:	d001      	beq.n	23e4 <apdu_parsePDU+0x700>
                {
                    return ret;
    23e0:	69fb      	ldr	r3, [r7, #28]
    23e2:	e015      	b.n	2410 <apdu_parsePDU+0x72c>
                }
                buff->position = (buff->position + len);
    23e4:	68bb      	ldr	r3, [r7, #8]
    23e6:	891a      	ldrh	r2, [r3, #8]
    23e8:	7dfb      	ldrb	r3, [r7, #23]
    23ea:	b29b      	uxth	r3, r3
    23ec:	4413      	add	r3, r2
    23ee:	b29a      	uxth	r2, r3
    23f0:	68bb      	ldr	r3, [r7, #8]
    23f2:	811a      	strh	r2, [r3, #8]
            }
            break;
    23f4:	bf00      	nop
    if (size > buff->size - buff->position)
    {
        //Encoding failed. Not enough data->
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    while (buff->position < buff->size)
    23f6:	68bb      	ldr	r3, [r7, #8]
    23f8:	891a      	ldrh	r2, [r3, #8]
    23fa:	68bb      	ldr	r3, [r7, #8]
    23fc:	88db      	ldrh	r3, [r3, #6]
    23fe:	429a      	cmp	r2, r3
    2400:	f4ff aca1 	bcc.w	1d46 <apdu_parsePDU+0x62>
            break;
        }
    }
    //All meters don't send user-information if connection is failed.
    //For this reason result component is check again.
    return apdu_handleResultComponent(*diagnostic);
    2404:	683b      	ldr	r3, [r7, #0]
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	4618      	mov	r0, r3
    240a:	f7ff fbbf 	bl	1b8c <apdu_handleResultComponent>
    240e:	4603      	mov	r3, r0
}
    2410:	4618      	mov	r0, r3
    2412:	3720      	adds	r7, #32
    2414:	46bd      	mov	sp, r7
    2416:	bd80      	pop	{r7, pc}

00002418 <apdu_generateAARE>:
    gxByteBuffer* data,
    DLMS_ASSOCIATION_RESULT result,
    DLMS_SOURCE_DIAGNOSTIC diagnostic,
    gxByteBuffer* errorData,
    gxByteBuffer* encryptedData)
{
    2418:	b580      	push	{r7, lr}
    241a:	b08a      	sub	sp, #40	; 0x28
    241c:	af00      	add	r7, sp, #0
    241e:	60f8      	str	r0, [r7, #12]
    2420:	60b9      	str	r1, [r7, #8]
    2422:	4611      	mov	r1, r2
    2424:	461a      	mov	r2, r3
    2426:	460b      	mov	r3, r1
    2428:	71fb      	strb	r3, [r7, #7]
    242a:	4613      	mov	r3, r2
    242c:	71bb      	strb	r3, [r7, #6]
    int ret;
    gxByteBuffer tmp;
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    unsigned long offset = data->size;
#else
    unsigned short offset = data->size;
    242e:	68bb      	ldr	r3, [r7, #8]
    2430:	88db      	ldrh	r3, [r3, #6]
    2432:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
    // Set AARE tag and length 0x61
    bb_setUInt8(data, BER_TYPE_APPLICATION | BER_TYPE_CONSTRUCTED | PDU_TYPE_APPLICATION_CONTEXT_NAME);
    2434:	2161      	movs	r1, #97	; 0x61
    2436:	68b8      	ldr	r0, [r7, #8]
    2438:	f000 fcec 	bl	2e14 <bb_setUInt8>
    // Length is updated later.
    bb_setUInt8(data, 0);
    243c:	2100      	movs	r1, #0
    243e:	68b8      	ldr	r0, [r7, #8]
    2440:	f000 fce8 	bl	2e14 <bb_setUInt8>
    if ((ret = apdu_generateApplicationContextName(settings, data)) != 0)
    2444:	68b9      	ldr	r1, [r7, #8]
    2446:	68f8      	ldr	r0, [r7, #12]
    2448:	f7fe fd8a 	bl	f60 <apdu_generateApplicationContextName>
    244c:	6238      	str	r0, [r7, #32]
    244e:	6a3b      	ldr	r3, [r7, #32]
    2450:	2b00      	cmp	r3, #0
    2452:	d001      	beq.n	2458 <apdu_generateAARE+0x40>
    {
        return ret;
    2454:	6a3b      	ldr	r3, [r7, #32]
    2456:	e16b      	b.n	2730 <apdu_generateAARE+0x318>
    }
    // Result 0xA2
    bb_setUInt8(data, BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | BER_TYPE_INTEGER);
    2458:	21a2      	movs	r1, #162	; 0xa2
    245a:	68b8      	ldr	r0, [r7, #8]
    245c:	f000 fcda 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 3); // len
    2460:	2103      	movs	r1, #3
    2462:	68b8      	ldr	r0, [r7, #8]
    2464:	f000 fcd6 	bl	2e14 <bb_setUInt8>
    // Tag
    bb_setUInt8(data, BER_TYPE_INTEGER);
    2468:	2102      	movs	r1, #2
    246a:	68b8      	ldr	r0, [r7, #8]
    246c:	f000 fcd2 	bl	2e14 <bb_setUInt8>
    // Choice for result (INTEGER, universal)
    bb_setUInt8(data, 1); // Len
    2470:	2101      	movs	r1, #1
    2472:	68b8      	ldr	r0, [r7, #8]
    2474:	f000 fcce 	bl	2e14 <bb_setUInt8>
    // ResultValue
    bb_setUInt8(data, result);
    2478:	79fb      	ldrb	r3, [r7, #7]
    247a:	4619      	mov	r1, r3
    247c:	68b8      	ldr	r0, [r7, #8]
    247e:	f000 fcc9 	bl	2e14 <bb_setUInt8>
    // SourceDiagnostic
    bb_setUInt8(data, 0xA3);
    2482:	21a3      	movs	r1, #163	; 0xa3
    2484:	68b8      	ldr	r0, [r7, #8]
    2486:	f000 fcc5 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 5); // len
    248a:	2105      	movs	r1, #5
    248c:	68b8      	ldr	r0, [r7, #8]
    248e:	f000 fcc1 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0xA1); // Tag
    2492:	21a1      	movs	r1, #161	; 0xa1
    2494:	68b8      	ldr	r0, [r7, #8]
    2496:	f000 fcbd 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 3); // len
    249a:	2103      	movs	r1, #3
    249c:	68b8      	ldr	r0, [r7, #8]
    249e:	f000 fcb9 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 2); // Tag
    24a2:	2102      	movs	r1, #2
    24a4:	68b8      	ldr	r0, [r7, #8]
    24a6:	f000 fcb5 	bl	2e14 <bb_setUInt8>
    // Choice for result (INTEGER, universal)
    bb_setUInt8(data, 1); // Len
    24aa:	2101      	movs	r1, #1
    24ac:	68b8      	ldr	r0, [r7, #8]
    24ae:	f000 fcb1 	bl	2e14 <bb_setUInt8>
    // diagnostic
    bb_setUInt8(data, diagnostic);
    24b2:	79bb      	ldrb	r3, [r7, #6]
    24b4:	4619      	mov	r1, r3
    24b6:	68b8      	ldr	r0, [r7, #8]
    24b8:	f000 fcac 	bl	2e14 <bb_setUInt8>
    // SystemTitle
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (settings->authentication == DLMS_AUTHENTICATION_HIGH_GMAC
    24bc:	68fb      	ldr	r3, [r7, #12]
    24be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    24c2:	2b05      	cmp	r3, #5
    24c4:	d007      	beq.n	24d6 <apdu_generateAARE+0xbe>
        || isCiphered(&settings->cipher))
    24c6:	68fb      	ldr	r3, [r7, #12]
    24c8:	3388      	adds	r3, #136	; 0x88
    24ca:	4618      	mov	r0, r3
    24cc:	f009 fd46 	bl	bf5c <isCiphered>
    24d0:	4603      	mov	r3, r0
    24d2:	2b00      	cmp	r3, #0
    24d4:	d023      	beq.n	251e <apdu_generateAARE+0x106>
    {
        bb_setUInt8(data, BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLED_AP_INVOCATION_ID);
    24d6:	21a4      	movs	r1, #164	; 0xa4
    24d8:	68b8      	ldr	r0, [r7, #8]
    24da:	f000 fc9b 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)(2 + settings->cipher.systemTitle.size));
    24de:	68fb      	ldr	r3, [r7, #12]
    24e0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    24e4:	b2db      	uxtb	r3, r3
    24e6:	3302      	adds	r3, #2
    24e8:	b2db      	uxtb	r3, r3
    24ea:	4619      	mov	r1, r3
    24ec:	68b8      	ldr	r0, [r7, #8]
    24ee:	f000 fc91 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, BER_TYPE_OCTET_STRING);
    24f2:	2104      	movs	r1, #4
    24f4:	68b8      	ldr	r0, [r7, #8]
    24f6:	f000 fc8d 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)settings->cipher.systemTitle.size);
    24fa:	68fb      	ldr	r3, [r7, #12]
    24fc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    2500:	b2db      	uxtb	r3, r3
    2502:	4619      	mov	r1, r3
    2504:	68b8      	ldr	r0, [r7, #8]
    2506:	f000 fc85 	bl	2e14 <bb_setUInt8>
        bb_set(data, settings->cipher.systemTitle.data, settings->cipher.systemTitle.size);
    250a:	68fb      	ldr	r3, [r7, #12]
    250c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2510:	68fb      	ldr	r3, [r7, #12]
    2512:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
    2516:	461a      	mov	r2, r3
    2518:	68b8      	ldr	r0, [r7, #8]
    251a:	f001 f821 	bl	3560 <bb_set>
    }
#endif //LMS_IGNORE_HIGH_GMAC

    //Add CalledAEInvocationId.
    if (settings->userId != -1 && settings->cipher.security != DLMS_SECURITY_NONE)
    251e:	68fb      	ldr	r3, [r7, #12]
    2520:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
    2524:	f1b3 3fff 	cmp.w	r3, #4294967295
    2528:	d01c      	beq.n	2564 <apdu_generateAARE+0x14c>
    252a:	68fb      	ldr	r3, [r7, #12]
    252c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    2530:	2b00      	cmp	r3, #0
    2532:	d017      	beq.n	2564 <apdu_generateAARE+0x14c>
    {
        bb_setUInt8(data, BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_CALLING_AE_QUALIFIER);
    2534:	21a7      	movs	r1, #167	; 0xa7
    2536:	68b8      	ldr	r0, [r7, #8]
    2538:	f000 fc6c 	bl	2e14 <bb_setUInt8>
        //LEN
        bb_setUInt8(data, 3);
    253c:	2103      	movs	r1, #3
    253e:	68b8      	ldr	r0, [r7, #8]
    2540:	f000 fc68 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, BER_TYPE_INTEGER);
    2544:	2102      	movs	r1, #2
    2546:	68b8      	ldr	r0, [r7, #8]
    2548:	f000 fc64 	bl	2e14 <bb_setUInt8>
        //LEN
        bb_setUInt8(data, 1);
    254c:	2101      	movs	r1, #1
    254e:	68b8      	ldr	r0, [r7, #8]
    2550:	f000 fc60 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)settings->userId);
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
    255a:	b2db      	uxtb	r3, r3
    255c:	4619      	mov	r1, r3
    255e:	68b8      	ldr	r0, [r7, #8]
    2560:	f000 fc58 	bl	2e14 <bb_setUInt8>
    }
    if (settings->authentication > DLMS_AUTHENTICATION_LOW)
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    256a:	2b01      	cmp	r3, #1
    256c:	d953      	bls.n	2616 <apdu_generateAARE+0x1fe>
    {
        // Add server ACSE-requirenents field component.
        bb_setUInt8(data, 0x88);
    256e:	2188      	movs	r1, #136	; 0x88
    2570:	68b8      	ldr	r0, [r7, #8]
    2572:	f000 fc4f 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x02); // Len.
    2576:	2102      	movs	r1, #2
    2578:	68b8      	ldr	r0, [r7, #8]
    257a:	f000 fc4b 	bl	2e14 <bb_setUInt8>
        bb_setUInt16(data, 0x0780);
    257e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    2582:	68b8      	ldr	r0, [r7, #8]
    2584:	f000 fcd8 	bl	2f38 <bb_setUInt16>
        // Add tag.
        bb_setUInt8(data, 0x89);
    2588:	2189      	movs	r1, #137	; 0x89
    258a:	68b8      	ldr	r0, [r7, #8]
    258c:	f000 fc42 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x07); // Len
    2590:	2107      	movs	r1, #7
    2592:	68b8      	ldr	r0, [r7, #8]
    2594:	f000 fc3e 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x60);
    2598:	2160      	movs	r1, #96	; 0x60
    259a:	68b8      	ldr	r0, [r7, #8]
    259c:	f000 fc3a 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x85);
    25a0:	2185      	movs	r1, #133	; 0x85
    25a2:	68b8      	ldr	r0, [r7, #8]
    25a4:	f000 fc36 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x74);
    25a8:	2174      	movs	r1, #116	; 0x74
    25aa:	68b8      	ldr	r0, [r7, #8]
    25ac:	f000 fc32 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x05);
    25b0:	2105      	movs	r1, #5
    25b2:	68b8      	ldr	r0, [r7, #8]
    25b4:	f000 fc2e 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x08);
    25b8:	2108      	movs	r1, #8
    25ba:	68b8      	ldr	r0, [r7, #8]
    25bc:	f000 fc2a 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x02);
    25c0:	2102      	movs	r1, #2
    25c2:	68b8      	ldr	r0, [r7, #8]
    25c4:	f000 fc26 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, settings->authentication);
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    25ce:	4619      	mov	r1, r3
    25d0:	68b8      	ldr	r0, [r7, #8]
    25d2:	f000 fc1f 	bl	2e14 <bb_setUInt8>
        // Add tag.
        bb_setUInt8(data, 0xAA);
    25d6:	21aa      	movs	r1, #170	; 0xaa
    25d8:	68b8      	ldr	r0, [r7, #8]
    25da:	f000 fc1b 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)(2 + settings->stoCChallenge.size)); // Len
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	8adb      	ldrh	r3, [r3, #22]
    25e2:	b2db      	uxtb	r3, r3
    25e4:	3302      	adds	r3, #2
    25e6:	b2db      	uxtb	r3, r3
    25e8:	4619      	mov	r1, r3
    25ea:	68b8      	ldr	r0, [r7, #8]
    25ec:	f000 fc12 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, BER_TYPE_CONTEXT);
    25f0:	2180      	movs	r1, #128	; 0x80
    25f2:	68b8      	ldr	r0, [r7, #8]
    25f4:	f000 fc0e 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)settings->stoCChallenge.size);
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	8adb      	ldrh	r3, [r3, #22]
    25fc:	b2db      	uxtb	r3, r3
    25fe:	4619      	mov	r1, r3
    2600:	68b8      	ldr	r0, [r7, #8]
    2602:	f000 fc07 	bl	2e14 <bb_setUInt8>
        bb_set(data, settings->stoCChallenge.data, settings->stoCChallenge.size);
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	6919      	ldr	r1, [r3, #16]
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	8adb      	ldrh	r3, [r3, #22]
    260e:	461a      	mov	r2, r3
    2610:	68b8      	ldr	r0, [r7, #8]
    2612:	f000 ffa5 	bl	3560 <bb_set>
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (result == DLMS_ASSOCIATION_RESULT_ACCEPTED || !isCiphered(&settings->cipher))
    2616:	79fb      	ldrb	r3, [r7, #7]
    2618:	2b00      	cmp	r3, #0
    261a:	d007      	beq.n	262c <apdu_generateAARE+0x214>
    261c:	68fb      	ldr	r3, [r7, #12]
    261e:	3388      	adds	r3, #136	; 0x88
    2620:	4618      	mov	r0, r3
    2622:	f009 fc9b 	bl	bf5c <isCiphered>
    2626:	4603      	mov	r3, r0
    2628:	2b00      	cmp	r3, #0
    262a:	d170      	bne.n	270e <apdu_generateAARE+0x2f6>
#endif //DLMS_IGNORE_HIGH_GMAC
    {
        // Add User Information. Tag 0xBE
        bb_setUInt8(data, BER_TYPE_CONTEXT | BER_TYPE_CONSTRUCTED | PDU_TYPE_USER_INFORMATION);
    262c:	21be      	movs	r1, #190	; 0xbe
    262e:	68b8      	ldr	r0, [r7, #8]
    2630:	f000 fbf0 	bl	2e14 <bb_setUInt8>
        bb_init(&tmp);
    2634:	f107 0314 	add.w	r3, r7, #20
    2638:	4618      	mov	r0, r3
    263a:	f000 fb55 	bl	2ce8 <bb_init>
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (encryptedData != NULL && encryptedData->size != 0)
    263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2640:	2b00      	cmp	r3, #0
    2642:	d025      	beq.n	2690 <apdu_generateAARE+0x278>
    2644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2646:	88db      	ldrh	r3, [r3, #6]
    2648:	2b00      	cmp	r3, #0
    264a:	d021      	beq.n	2690 <apdu_generateAARE+0x278>
        {
            bb_capacity(&tmp, 2 + encryptedData->size);
    264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    264e:	88db      	ldrh	r3, [r3, #6]
    2650:	3302      	adds	r3, #2
    2652:	b29a      	uxth	r2, r3
    2654:	f107 0314 	add.w	r3, r7, #20
    2658:	4611      	mov	r1, r2
    265a:	4618      	mov	r0, r3
    265c:	f000 fb5a 	bl	2d14 <bb_capacity>
            bb_setUInt8(&tmp, DLMS_COMMAND_GLO_INITIATE_RESPONSE);
    2660:	f107 0314 	add.w	r3, r7, #20
    2664:	2128      	movs	r1, #40	; 0x28
    2666:	4618      	mov	r0, r3
    2668:	f000 fbd4 	bl	2e14 <bb_setUInt8>
            hlp_setObjectCount(encryptedData->size, &tmp);
    266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    266e:	88db      	ldrh	r3, [r3, #6]
    2670:	461a      	mov	r2, r3
    2672:	f107 0314 	add.w	r3, r7, #20
    2676:	4619      	mov	r1, r3
    2678:	4610      	mov	r0, r2
    267a:	f01f f92f 	bl	218dc <hlp_setObjectCount>
            bb_set2(&tmp, encryptedData, 0, encryptedData->size);
    267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2680:	88db      	ldrh	r3, [r3, #6]
    2682:	f107 0014 	add.w	r0, r7, #20
    2686:	2200      	movs	r2, #0
    2688:	6b79      	ldr	r1, [r7, #52]	; 0x34
    268a:	f000 ffc9 	bl	3620 <bb_set2>
    268e:	e020      	b.n	26d2 <apdu_generateAARE+0x2ba>
        }
        else
#endif //DLMS_IGNORE_HIGH_GMAC
        {
            if (errorData != NULL && errorData->size != 0)
    2690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2692:	2b00      	cmp	r3, #0
    2694:	d00c      	beq.n	26b0 <apdu_generateAARE+0x298>
    2696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2698:	88db      	ldrh	r3, [r3, #6]
    269a:	2b00      	cmp	r3, #0
    269c:	d008      	beq.n	26b0 <apdu_generateAARE+0x298>
            {
                bb_set2(&tmp, errorData, 0, errorData->size);
    269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    26a0:	88db      	ldrh	r3, [r3, #6]
    26a2:	f107 0014 	add.w	r0, r7, #20
    26a6:	2200      	movs	r2, #0
    26a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    26aa:	f000 ffb9 	bl	3620 <bb_set2>
    26ae:	e010      	b.n	26d2 <apdu_generateAARE+0x2ba>
            }
            else
            {
                if ((ret = apdu_getUserInformation(settings, &tmp)) != 0)
    26b0:	f107 0314 	add.w	r3, r7, #20
    26b4:	4619      	mov	r1, r3
    26b6:	68f8      	ldr	r0, [r7, #12]
    26b8:	f7ff f9a2 	bl	1a00 <apdu_getUserInformation>
    26bc:	6238      	str	r0, [r7, #32]
    26be:	6a3b      	ldr	r3, [r7, #32]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d006      	beq.n	26d2 <apdu_generateAARE+0x2ba>
                {
                    bb_clear(&tmp);
    26c4:	f107 0314 	add.w	r3, r7, #20
    26c8:	4618      	mov	r0, r3
    26ca:	f001 f84b 	bl	3764 <bb_clear>
                    return ret;
    26ce:	6a3b      	ldr	r3, [r7, #32]
    26d0:	e02e      	b.n	2730 <apdu_generateAARE+0x318>
                }
            }
        }

        bb_setUInt8(data, (unsigned char)(2 + tmp.size));
    26d2:	8b7b      	ldrh	r3, [r7, #26]
    26d4:	b2db      	uxtb	r3, r3
    26d6:	3302      	adds	r3, #2
    26d8:	b2db      	uxtb	r3, r3
    26da:	4619      	mov	r1, r3
    26dc:	68b8      	ldr	r0, [r7, #8]
    26de:	f000 fb99 	bl	2e14 <bb_setUInt8>
        // Coding the choice for user-information (Octet STRING, universal)
        bb_setUInt8(data, BER_TYPE_OCTET_STRING);
    26e2:	2104      	movs	r1, #4
    26e4:	68b8      	ldr	r0, [r7, #8]
    26e6:	f000 fb95 	bl	2e14 <bb_setUInt8>
        // Length
        bb_setUInt8(data, (unsigned char)tmp.size);
    26ea:	8b7b      	ldrh	r3, [r7, #26]
    26ec:	b2db      	uxtb	r3, r3
    26ee:	4619      	mov	r1, r3
    26f0:	68b8      	ldr	r0, [r7, #8]
    26f2:	f000 fb8f 	bl	2e14 <bb_setUInt8>
        bb_set2(data, &tmp, 0, tmp.size);
    26f6:	8b7b      	ldrh	r3, [r7, #26]
    26f8:	f107 0114 	add.w	r1, r7, #20
    26fc:	2200      	movs	r2, #0
    26fe:	68b8      	ldr	r0, [r7, #8]
    2700:	f000 ff8e 	bl	3620 <bb_set2>
        bb_clear(&tmp);
    2704:	f107 0314 	add.w	r3, r7, #20
    2708:	4618      	mov	r0, r3
    270a:	f001 f82b 	bl	3764 <bb_clear>
    }
    bb_setUInt8ByIndex(data, (offset + 1), (unsigned char)(data->size - offset - 2));
    270e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    2710:	3301      	adds	r3, #1
    2712:	b299      	uxth	r1, r3
    2714:	68bb      	ldr	r3, [r7, #8]
    2716:	88db      	ldrh	r3, [r3, #6]
    2718:	b2da      	uxtb	r2, r3
    271a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    271c:	b2db      	uxtb	r3, r3
    271e:	1ad3      	subs	r3, r2, r3
    2720:	b2db      	uxtb	r3, r3
    2722:	3b02      	subs	r3, #2
    2724:	b2db      	uxtb	r3, r3
    2726:	461a      	mov	r2, r3
    2728:	68b8      	ldr	r0, [r7, #8]
    272a:	f000 fbb1 	bl	2e90 <bb_setUInt8ByIndex>
    return 0;
    272e:	2300      	movs	r3, #0
}
    2730:	4618      	mov	r0, r3
    2732:	3728      	adds	r7, #40	; 0x28
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}

00002738 <ba_getByteCount>:
#include "../include/bitarray.h"
#include "../include/helpers.h"

//Returs needed amount of bytes to store bits.
unsigned short ba_getByteCount(unsigned short bitCount)
{
    2738:	b590      	push	{r4, r7, lr}
    273a:	b085      	sub	sp, #20
    273c:	af00      	add	r7, sp, #0
    273e:	4603      	mov	r3, r0
    2740:	80fb      	strh	r3, [r7, #6]
    double d = bitCount;
    2742:	88fb      	ldrh	r3, [r7, #6]
    2744:	4618      	mov	r0, r3
    2746:	f7fd fe35 	bl	3b4 <__aeabi_ui2d>
    274a:	4603      	mov	r3, r0
    274c:	460c      	mov	r4, r1
    274e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    if (bitCount != 0)
    2752:	88fb      	ldrh	r3, [r7, #6]
    2754:	2b00      	cmp	r3, #0
    2756:	d01e      	beq.n	2796 <ba_getByteCount+0x5e>
    {
        d /= 8;
    2758:	f04f 0200 	mov.w	r2, #0
    275c:	4b13      	ldr	r3, [pc, #76]	; (27ac <ba_getByteCount+0x74>)
    275e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    2762:	f7fd ffc7 	bl	6f4 <__aeabi_ddiv>
    2766:	4603      	mov	r3, r0
    2768:	460c      	mov	r4, r1
    276a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        if (bitCount == 0 || (bitCount % 8) != 0)
    276e:	88fb      	ldrh	r3, [r7, #6]
    2770:	2b00      	cmp	r3, #0
    2772:	d005      	beq.n	2780 <ba_getByteCount+0x48>
    2774:	88fb      	ldrh	r3, [r7, #6]
    2776:	f003 0307 	and.w	r3, r3, #7
    277a:	b29b      	uxth	r3, r3
    277c:	2b00      	cmp	r3, #0
    277e:	d00a      	beq.n	2796 <ba_getByteCount+0x5e>
        {
            ++d;
    2780:	f04f 0200 	mov.w	r2, #0
    2784:	4b0a      	ldr	r3, [pc, #40]	; (27b0 <ba_getByteCount+0x78>)
    2786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    278a:	f7fd fcd7 	bl	13c <__adddf3>
    278e:	4603      	mov	r3, r0
    2790:	460c      	mov	r4, r1
    2792:	e9c7 3402 	strd	r3, r4, [r7, #8]
        }
    }
    return (unsigned short)d;
    2796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    279a:	f7fe f8bb 	bl	914 <__aeabi_d2uiz>
    279e:	4603      	mov	r3, r0
    27a0:	b29b      	uxth	r3, r3
}
    27a2:	4618      	mov	r0, r3
    27a4:	3714      	adds	r7, #20
    27a6:	46bd      	mov	sp, r7
    27a8:	bd90      	pop	{r4, r7, pc}
    27aa:	bf00      	nop
    27ac:	40200000 	.word	0x40200000
    27b0:	3ff00000 	.word	0x3ff00000

000027b4 <getByteIndex>:

//Return byte index where bit is saved.
int getByteIndex(int bitCount)
{
    27b4:	b590      	push	{r4, r7, lr}
    27b6:	b085      	sub	sp, #20
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
    double d = bitCount;
    27bc:	6878      	ldr	r0, [r7, #4]
    27be:	f7fd fe09 	bl	3d4 <__aeabi_i2d>
    27c2:	4603      	mov	r3, r0
    27c4:	460c      	mov	r4, r1
    27c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    d /= 8;
    27ca:	f04f 0200 	mov.w	r2, #0
    27ce:	4b09      	ldr	r3, [pc, #36]	; (27f4 <getByteIndex+0x40>)
    27d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    27d4:	f7fd ff8e 	bl	6f4 <__aeabi_ddiv>
    27d8:	4603      	mov	r3, r0
    27da:	460c      	mov	r4, r1
    27dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
    return (int)d;
    27e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    27e4:	f7fe f86e 	bl	8c4 <__aeabi_d2iz>
    27e8:	4603      	mov	r3, r0
}
    27ea:	4618      	mov	r0, r3
    27ec:	3714      	adds	r7, #20
    27ee:	46bd      	mov	sp, r7
    27f0:	bd90      	pop	{r4, r7, pc}
    27f2:	bf00      	nop
    27f4:	40200000 	.word	0x40200000

000027f8 <ba_init>:

//Initialize bit array.
void ba_init(bitArray* arr)
{
    27f8:	b480      	push	{r7}
    27fa:	b083      	sub	sp, #12
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	2200      	movs	r2, #0
    2804:	809a      	strh	r2, [r3, #4]
    arr->data = NULL;
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	2200      	movs	r2, #0
    280a:	601a      	str	r2, [r3, #0]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	2200      	movs	r2, #0
    2810:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
    arr->size = 0;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	2200      	movs	r2, #0
    2816:	80da      	strh	r2, [r3, #6]
}
    2818:	bf00      	nop
    281a:	370c      	adds	r7, #12
    281c:	46bd      	mov	sp, r7
    281e:	bc80      	pop	{r7}
    2820:	4770      	bx	lr
    2822:	bf00      	nop

00002824 <ba_capacity>:

//Allocate new size for the array in bytes.
void ba_capacity(bitArray *arr, unsigned short capacity)
{
    2824:	b590      	push	{r4, r7, lr}
    2826:	b083      	sub	sp, #12
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
    282c:	460b      	mov	r3, r1
    282e:	807b      	strh	r3, [r7, #2]
    arr->capacity = capacity;
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	887a      	ldrh	r2, [r7, #2]
    2834:	809a      	strh	r2, [r3, #4]
    if (capacity == 0)
    2836:	887b      	ldrh	r3, [r7, #2]
    2838:	2b00      	cmp	r3, #0
    283a:	d10c      	bne.n	2856 <ba_capacity+0x32>
    {
        if (arr->data != NULL)
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	2b00      	cmp	r3, #0
    2842:	d029      	beq.n	2898 <ba_capacity+0x74>
        {
            gxfree(arr->data);
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	681b      	ldr	r3, [r3, #0]
    2848:	4618      	mov	r0, r3
    284a:	f027 f903 	bl	29a54 <free>
            arr->data = NULL;
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	2200      	movs	r2, #0
    2852:	601a      	str	r2, [r3, #0]
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
        }
    }
}
    2854:	e020      	b.n	2898 <ba_capacity+0x74>
            arr->data = NULL;
        }
    }
    else
    {
        if (arr->data == NULL)
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	2b00      	cmp	r3, #0
    285c:	d10d      	bne.n	287a <ba_capacity+0x56>
        {
            arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	889b      	ldrh	r3, [r3, #4]
    2862:	4618      	mov	r0, r3
    2864:	f7ff ff68 	bl	2738 <ba_getByteCount>
    2868:	4603      	mov	r3, r0
    286a:	4618      	mov	r0, r3
    286c:	f027 f8ea 	bl	29a44 <malloc>
    2870:	4603      	mov	r3, r0
    2872:	461a      	mov	r2, r3
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	601a      	str	r2, [r3, #0]
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
        }
    }
}
    2878:	e00e      	b.n	2898 <ba_capacity+0x74>
        {
            arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	681c      	ldr	r4, [r3, #0]
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	889b      	ldrh	r3, [r3, #4]
    2882:	4618      	mov	r0, r3
    2884:	f7ff ff58 	bl	2738 <ba_getByteCount>
    2888:	4603      	mov	r3, r0
    288a:	4619      	mov	r1, r3
    288c:	4620      	mov	r0, r4
    288e:	f027 fc8f 	bl	2a1b0 <realloc>
    2892:	4602      	mov	r2, r0
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	601a      	str	r2, [r3, #0]
        }
    }
}
    2898:	bf00      	nop
    289a:	370c      	adds	r7, #12
    289c:	46bd      	mov	sp, r7
    289e:	bd90      	pop	{r4, r7, pc}

000028a0 <ba_set>:

//Push new data to the bit array.
void ba_set(bitArray *arr, unsigned char item)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    28a8:	460b      	mov	r3, r1
    28aa:	70fb      	strb	r3, [r7, #3]
    ba_setByIndex(arr, arr->size, item);
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	88db      	ldrh	r3, [r3, #6]
    28b0:	4619      	mov	r1, r3
    28b2:	78fb      	ldrb	r3, [r7, #3]
    28b4:	461a      	mov	r2, r3
    28b6:	6878      	ldr	r0, [r7, #4]
    28b8:	f000 f80a 	bl	28d0 <ba_setByIndex>
    ++arr->size;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	88db      	ldrh	r3, [r3, #6]
    28c0:	3301      	adds	r3, #1
    28c2:	b29a      	uxth	r2, r3
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	80da      	strh	r2, [r3, #6]
}
    28c8:	bf00      	nop
    28ca:	3708      	adds	r7, #8
    28cc:	46bd      	mov	sp, r7
    28ce:	bd80      	pop	{r7, pc}

000028d0 <ba_setByIndex>:

//Set bit by index.
void ba_setByIndex(bitArray *arr, int index, unsigned char item)
{
    28d0:	b590      	push	{r4, r7, lr}
    28d2:	b087      	sub	sp, #28
    28d4:	af00      	add	r7, sp, #0
    28d6:	60f8      	str	r0, [r7, #12]
    28d8:	60b9      	str	r1, [r7, #8]
    28da:	4613      	mov	r3, r2
    28dc:	71fb      	strb	r3, [r7, #7]
    unsigned char newItem = 0;
    28de:	2300      	movs	r3, #0
    28e0:	75fb      	strb	r3, [r7, #23]
    int byteIndex;
    item = item == 0 ? 0 : 1;
    28e2:	79fb      	ldrb	r3, [r7, #7]
    28e4:	2b00      	cmp	r3, #0
    28e6:	bf14      	ite	ne
    28e8:	2301      	movne	r3, #1
    28ea:	2300      	moveq	r3, #0
    28ec:	b2db      	uxtb	r3, r3
    28ee:	71fb      	strb	r3, [r7, #7]
    if (index >= arr->capacity)
    28f0:	68fb      	ldr	r3, [r7, #12]
    28f2:	889b      	ldrh	r3, [r3, #4]
    28f4:	461a      	mov	r2, r3
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	429a      	cmp	r2, r3
    28fa:	dc35      	bgt.n	2968 <ba_setByIndex+0x98>
    {
        arr->capacity += BIT_ARRAY_CAPACITY;
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	889b      	ldrh	r3, [r3, #4]
    2900:	3308      	adds	r3, #8
    2902:	b29a      	uxth	r2, r3
    2904:	68fb      	ldr	r3, [r7, #12]
    2906:	809a      	strh	r2, [r3, #4]
        //If we are adding a bit to the higher than next byte.
        if (index >= arr->capacity)
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	889b      	ldrh	r3, [r3, #4]
    290c:	461a      	mov	r2, r3
    290e:	68bb      	ldr	r3, [r7, #8]
    2910:	429a      	cmp	r2, r3
    2912:	dc06      	bgt.n	2922 <ba_setByIndex+0x52>
        {
            ba_setByIndex(arr, index, item);
    2914:	79fb      	ldrb	r3, [r7, #7]
    2916:	461a      	mov	r2, r3
    2918:	68b9      	ldr	r1, [r7, #8]
    291a:	68f8      	ldr	r0, [r7, #12]
    291c:	f7ff ffd8 	bl	28d0 <ba_setByIndex>
            return;
    2920:	e054      	b.n	29cc <ba_setByIndex+0xfc>
        }
        if (arr->data == NULL)
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	2b00      	cmp	r3, #0
    2928:	d10d      	bne.n	2946 <ba_setByIndex+0x76>
        {
            arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
    292a:	68fb      	ldr	r3, [r7, #12]
    292c:	889b      	ldrh	r3, [r3, #4]
    292e:	4618      	mov	r0, r3
    2930:	f7ff ff02 	bl	2738 <ba_getByteCount>
    2934:	4603      	mov	r3, r0
    2936:	4618      	mov	r0, r3
    2938:	f027 f884 	bl	29a44 <malloc>
    293c:	4603      	mov	r3, r0
    293e:	461a      	mov	r2, r3
    2940:	68fb      	ldr	r3, [r7, #12]
    2942:	601a      	str	r2, [r3, #0]
    2944:	e00e      	b.n	2964 <ba_setByIndex+0x94>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
    2946:	68fb      	ldr	r3, [r7, #12]
    2948:	681c      	ldr	r4, [r3, #0]
    294a:	68fb      	ldr	r3, [r7, #12]
    294c:	889b      	ldrh	r3, [r3, #4]
    294e:	4618      	mov	r0, r3
    2950:	f7ff fef2 	bl	2738 <ba_getByteCount>
    2954:	4603      	mov	r3, r0
    2956:	4619      	mov	r1, r3
    2958:	4620      	mov	r0, r4
    295a:	f027 fc29 	bl	2a1b0 <realloc>
    295e:	4602      	mov	r2, r0
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	601a      	str	r2, [r3, #0]
        }
        newItem = 1;
    2964:	2301      	movs	r3, #1
    2966:	75fb      	strb	r3, [r7, #23]
    }
    byteIndex = getByteIndex(index);
    2968:	68b8      	ldr	r0, [r7, #8]
    296a:	f7ff ff23 	bl	27b4 <getByteIndex>
    296e:	6138      	str	r0, [r7, #16]
    if (index % 8 == 0 || newItem)
    2970:	68bb      	ldr	r3, [r7, #8]
    2972:	f003 0307 	and.w	r3, r3, #7
    2976:	2b00      	cmp	r3, #0
    2978:	d002      	beq.n	2980 <ba_setByIndex+0xb0>
    297a:	7dfb      	ldrb	r3, [r7, #23]
    297c:	2b00      	cmp	r3, #0
    297e:	d008      	beq.n	2992 <ba_setByIndex+0xc2>
    {
        arr->data[byteIndex] = item << 7;
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	681a      	ldr	r2, [r3, #0]
    2984:	693b      	ldr	r3, [r7, #16]
    2986:	4413      	add	r3, r2
    2988:	79fa      	ldrb	r2, [r7, #7]
    298a:	01d2      	lsls	r2, r2, #7
    298c:	b2d2      	uxtb	r2, r2
    298e:	701a      	strb	r2, [r3, #0]
    2990:	e01c      	b.n	29cc <ba_setByIndex+0xfc>
    }
    else
    {
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	681a      	ldr	r2, [r3, #0]
    2996:	693b      	ldr	r3, [r7, #16]
    2998:	441a      	add	r2, r3
    299a:	68fb      	ldr	r3, [r7, #12]
    299c:	6819      	ldr	r1, [r3, #0]
    299e:	693b      	ldr	r3, [r7, #16]
    29a0:	440b      	add	r3, r1
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	b259      	sxtb	r1, r3
    29a6:	79f8      	ldrb	r0, [r7, #7]
    29a8:	68bc      	ldr	r4, [r7, #8]
    29aa:	4b0a      	ldr	r3, [pc, #40]	; (29d4 <ba_setByIndex+0x104>)
    29ac:	4023      	ands	r3, r4
    29ae:	2b00      	cmp	r3, #0
    29b0:	da03      	bge.n	29ba <ba_setByIndex+0xea>
    29b2:	3b01      	subs	r3, #1
    29b4:	f063 0307 	orn	r3, r3, #7
    29b8:	3301      	adds	r3, #1
    29ba:	f1c3 0307 	rsb	r3, r3, #7
    29be:	fa00 f303 	lsl.w	r3, r0, r3
    29c2:	b25b      	sxtb	r3, r3
    29c4:	430b      	orrs	r3, r1
    29c6:	b25b      	sxtb	r3, r3
    29c8:	b2db      	uxtb	r3, r3
    29ca:	7013      	strb	r3, [r2, #0]
    }
}
    29cc:	371c      	adds	r7, #28
    29ce:	46bd      	mov	sp, r7
    29d0:	bd90      	pop	{r4, r7, pc}
    29d2:	bf00      	nop
    29d4:	80000007 	.word	0x80000007

000029d8 <ba_add>:

//Add bits from byte array to bit array.
int ba_add(bitArray *arr, gxByteBuffer * bytes, unsigned short count, unsigned char intelByteOrder)
{
    29d8:	b590      	push	{r4, r7, lr}
    29da:	b089      	sub	sp, #36	; 0x24
    29dc:	af00      	add	r7, sp, #0
    29de:	60f8      	str	r0, [r7, #12]
    29e0:	60b9      	str	r1, [r7, #8]
    29e2:	4611      	mov	r1, r2
    29e4:	461a      	mov	r2, r3
    29e6:	460b      	mov	r3, r1
    29e8:	80fb      	strh	r3, [r7, #6]
    29ea:	4613      	mov	r3, r2
    29ec:	717b      	strb	r3, [r7, #5]
    unsigned short index, pos, bytePos = 0;
    29ee:	2300      	movs	r3, #0
    29f0:	837b      	strh	r3, [r7, #26]
    int ret;
    unsigned char ch = 0;
    29f2:	2300      	movs	r3, #0
    29f4:	74fb      	strb	r3, [r7, #19]
    if (count == -1)
    {
        count = (unsigned short) (bytes->size - bytes->position);
    }
    if (intelByteOrder)
    29f6:	797b      	ldrb	r3, [r7, #5]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d00b      	beq.n	2a14 <ba_add+0x3c>
    {
        index = (unsigned short) (bytes->position + ba_getByteCount(count) - 1);
    29fc:	68bb      	ldr	r3, [r7, #8]
    29fe:	891c      	ldrh	r4, [r3, #8]
    2a00:	88fb      	ldrh	r3, [r7, #6]
    2a02:	4618      	mov	r0, r3
    2a04:	f7ff fe98 	bl	2738 <ba_getByteCount>
    2a08:	4603      	mov	r3, r0
    2a0a:	4423      	add	r3, r4
    2a0c:	b29b      	uxth	r3, r3
    2a0e:	3b01      	subs	r3, #1
    2a10:	83fb      	strh	r3, [r7, #30]
    2a12:	e002      	b.n	2a1a <ba_add+0x42>
    }
    else
    {
        index = (unsigned short) bytes->position;
    2a14:	68bb      	ldr	r3, [r7, #8]
    2a16:	891b      	ldrh	r3, [r3, #8]
    2a18:	83fb      	strh	r3, [r7, #30]
    }
    for (pos = 0; pos != count; ++pos)
    2a1a:	2300      	movs	r3, #0
    2a1c:	83bb      	strh	r3, [r7, #28]
    2a1e:	e03f      	b.n	2aa0 <ba_add+0xc8>
    {
        //Get next byte.
        if ((pos % 8) == 0)
    2a20:	8bbb      	ldrh	r3, [r7, #28]
    2a22:	f003 0307 	and.w	r3, r3, #7
    2a26:	b29b      	uxth	r3, r3
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d11e      	bne.n	2a6a <ba_add+0x92>
        {
            bytePos = 7;
    2a2c:	2307      	movs	r3, #7
    2a2e:	837b      	strh	r3, [r7, #26]
            ret = bb_getUInt8ByIndex(bytes, index, &ch);
    2a30:	8bfb      	ldrh	r3, [r7, #30]
    2a32:	f107 0213 	add.w	r2, r7, #19
    2a36:	4619      	mov	r1, r3
    2a38:	68b8      	ldr	r0, [r7, #8]
    2a3a:	f000 fefd 	bl	3838 <bb_getUInt8ByIndex>
    2a3e:	6178      	str	r0, [r7, #20]
            if (ret != 0)
    2a40:	697b      	ldr	r3, [r7, #20]
    2a42:	2b00      	cmp	r3, #0
    2a44:	d001      	beq.n	2a4a <ba_add+0x72>
            {
                return ret;
    2a46:	697b      	ldr	r3, [r7, #20]
    2a48:	e02f      	b.n	2aaa <ba_add+0xd2>
            }
            if (intelByteOrder)
    2a4a:	797b      	ldrb	r3, [r7, #5]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d003      	beq.n	2a58 <ba_add+0x80>
            {
                --index;
    2a50:	8bfb      	ldrh	r3, [r7, #30]
    2a52:	3b01      	subs	r3, #1
    2a54:	83fb      	strh	r3, [r7, #30]
    2a56:	e002      	b.n	2a5e <ba_add+0x86>
            }
            else
            {
                ++index;
    2a58:	8bfb      	ldrh	r3, [r7, #30]
    2a5a:	3301      	adds	r3, #1
    2a5c:	83fb      	strh	r3, [r7, #30]
            }
            ++bytes->position;
    2a5e:	68bb      	ldr	r3, [r7, #8]
    2a60:	891b      	ldrh	r3, [r3, #8]
    2a62:	3301      	adds	r3, #1
    2a64:	b29a      	uxth	r2, r3
    2a66:	68bb      	ldr	r3, [r7, #8]
    2a68:	811a      	strh	r2, [r3, #8]
        }
        ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)));
    2a6a:	8bb9      	ldrh	r1, [r7, #28]
    2a6c:	8b7b      	ldrh	r3, [r7, #26]
    2a6e:	2201      	movs	r2, #1
    2a70:	fa02 f303 	lsl.w	r3, r2, r3
    2a74:	b25a      	sxtb	r2, r3
    2a76:	7cfb      	ldrb	r3, [r7, #19]
    2a78:	b25b      	sxtb	r3, r3
    2a7a:	4013      	ands	r3, r2
    2a7c:	b25b      	sxtb	r3, r3
    2a7e:	b2db      	uxtb	r3, r3
    2a80:	461a      	mov	r2, r3
    2a82:	68f8      	ldr	r0, [r7, #12]
    2a84:	f7ff ff24 	bl	28d0 <ba_setByIndex>
        --bytePos;
    2a88:	8b7b      	ldrh	r3, [r7, #26]
    2a8a:	3b01      	subs	r3, #1
    2a8c:	837b      	strh	r3, [r7, #26]
        ++arr->size;
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	88db      	ldrh	r3, [r3, #6]
    2a92:	3301      	adds	r3, #1
    2a94:	b29a      	uxth	r2, r3
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	80da      	strh	r2, [r3, #6]
    }
    else
    {
        index = (unsigned short) bytes->position;
    }
    for (pos = 0; pos != count; ++pos)
    2a9a:	8bbb      	ldrh	r3, [r7, #28]
    2a9c:	3301      	adds	r3, #1
    2a9e:	83bb      	strh	r3, [r7, #28]
    2aa0:	8bba      	ldrh	r2, [r7, #28]
    2aa2:	88fb      	ldrh	r3, [r7, #6]
    2aa4:	429a      	cmp	r2, r3
    2aa6:	d1bb      	bne.n	2a20 <ba_add+0x48>
        }
        ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)));
        --bytePos;
        ++arr->size;
    }
    return 0;
    2aa8:	2300      	movs	r3, #0
}
    2aaa:	4618      	mov	r0, r3
    2aac:	3724      	adds	r7, #36	; 0x24
    2aae:	46bd      	mov	sp, r7
    2ab0:	bd90      	pop	{r4, r7, pc}
    2ab2:	bf00      	nop

00002ab4 <ba_copy>:

int ba_copy(
    bitArray *target,
    unsigned char *source,
    unsigned short count)
{
    2ab4:	b590      	push	{r4, r7, lr}
    2ab6:	b085      	sub	sp, #20
    2ab8:	af00      	add	r7, sp, #0
    2aba:	60f8      	str	r0, [r7, #12]
    2abc:	60b9      	str	r1, [r7, #8]
    2abe:	4613      	mov	r3, r2
    2ac0:	80fb      	strh	r3, [r7, #6]
    ba_clear(target);
    2ac2:	68f8      	ldr	r0, [r7, #12]
    2ac4:	f000 f820 	bl	2b08 <ba_clear>
    if (count != 0)
    2ac8:	88fb      	ldrh	r3, [r7, #6]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d016      	beq.n	2afc <ba_copy+0x48>
    {
        ba_capacity(target, count);
    2ace:	88fb      	ldrh	r3, [r7, #6]
    2ad0:	4619      	mov	r1, r3
    2ad2:	68f8      	ldr	r0, [r7, #12]
    2ad4:	f7ff fea6 	bl	2824 <ba_capacity>
        memcpy(target->data, source, ba_getByteCount(count));
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	681c      	ldr	r4, [r3, #0]
    2adc:	88fb      	ldrh	r3, [r7, #6]
    2ade:	4618      	mov	r0, r3
    2ae0:	f7ff fe2a 	bl	2738 <ba_getByteCount>
    2ae4:	4603      	mov	r3, r0
    2ae6:	461a      	mov	r2, r3
    2ae8:	68b9      	ldr	r1, [r7, #8]
    2aea:	4620      	mov	r0, r4
    2aec:	f026 ffc9 	bl	29a82 <memcpy>
        target->size = count;
    2af0:	68fb      	ldr	r3, [r7, #12]
    2af2:	88fa      	ldrh	r2, [r7, #6]
    2af4:	80da      	strh	r2, [r3, #6]
#ifndef GX_DLMS_MICROCONTROLLER
        target->position = 0;
    2af6:	68fb      	ldr	r3, [r7, #12]
    2af8:	2200      	movs	r2, #0
    2afa:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
    }
    return 0;
    2afc:	2300      	movs	r3, #0
}
    2afe:	4618      	mov	r0, r3
    2b00:	3714      	adds	r7, #20
    2b02:	46bd      	mov	sp, r7
    2b04:	bd90      	pop	{r4, r7, pc}
    2b06:	bf00      	nop

00002b08 <ba_clear>:

void ba_clear(bitArray *arr)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b082      	sub	sp, #8
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
    if (arr->data != NULL)
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d007      	beq.n	2b28 <ba_clear+0x20>
    {
        gxfree(arr->data);
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	4618      	mov	r0, r3
    2b1e:	f026 ff99 	bl	29a54 <free>
        arr->data = NULL;
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	2200      	movs	r2, #0
    2b26:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	2200      	movs	r2, #0
    2b2c:	809a      	strh	r2, [r3, #4]
    arr->size = 0;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	2200      	movs	r2, #0
    2b32:	80da      	strh	r2, [r3, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	2200      	movs	r2, #0
    2b38:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
}
    2b3a:	bf00      	nop
    2b3c:	3708      	adds	r7, #8
    2b3e:	46bd      	mov	sp, r7
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop

00002b44 <ba_getByIndex>:
    return ret;
}
#endif //GX_DLMS_MICROCONTROLLER

int ba_getByIndex(bitArray *arr, int index, unsigned char *value)
{
    2b44:	b590      	push	{r4, r7, lr}
    2b46:	b087      	sub	sp, #28
    2b48:	af00      	add	r7, sp, #0
    2b4a:	60f8      	str	r0, [r7, #12]
    2b4c:	60b9      	str	r1, [r7, #8]
    2b4e:	607a      	str	r2, [r7, #4]
    char ch;
    if (index >= arr->size)
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	88db      	ldrh	r3, [r3, #6]
    2b54:	461a      	mov	r2, r3
    2b56:	68bb      	ldr	r3, [r7, #8]
    2b58:	429a      	cmp	r2, r3
    2b5a:	dc02      	bgt.n	2b62 <ba_getByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    2b5c:	f44f 7382 	mov.w	r3, #260	; 0x104
    2b60:	e021      	b.n	2ba6 <ba_getByIndex+0x62>
    }
    ch = arr->data[getByteIndex(index)];
    2b62:	68fb      	ldr	r3, [r7, #12]
    2b64:	681c      	ldr	r4, [r3, #0]
    2b66:	68b8      	ldr	r0, [r7, #8]
    2b68:	f7ff fe24 	bl	27b4 <getByteIndex>
    2b6c:	4603      	mov	r3, r0
    2b6e:	4423      	add	r3, r4
    2b70:	781b      	ldrb	r3, [r3, #0]
    2b72:	75fb      	strb	r3, [r7, #23]
    *value = (ch &  (1 << (7 - (index % 8)))) != 0;
    2b74:	7dfa      	ldrb	r2, [r7, #23]
    2b76:	68b9      	ldr	r1, [r7, #8]
    2b78:	4b0d      	ldr	r3, [pc, #52]	; (2bb0 <ba_getByIndex+0x6c>)
    2b7a:	400b      	ands	r3, r1
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	da03      	bge.n	2b88 <ba_getByIndex+0x44>
    2b80:	3b01      	subs	r3, #1
    2b82:	f063 0307 	orn	r3, r3, #7
    2b86:	3301      	adds	r3, #1
    2b88:	f1c3 0307 	rsb	r3, r3, #7
    2b8c:	fa42 f303 	asr.w	r3, r2, r3
    2b90:	f003 0301 	and.w	r3, r3, #1
    2b94:	2b00      	cmp	r3, #0
    2b96:	bf14      	ite	ne
    2b98:	2301      	movne	r3, #1
    2b9a:	2300      	moveq	r3, #0
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	461a      	mov	r2, r3
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	701a      	strb	r2, [r3, #0]
    return 0;
    2ba4:	2300      	movs	r3, #0
}
    2ba6:	4618      	mov	r0, r3
    2ba8:	371c      	adds	r7, #28
    2baa:	46bd      	mov	sp, r7
    2bac:	bd90      	pop	{r4, r7, pc}
    2bae:	bf00      	nop
    2bb0:	80000007 	.word	0x80000007

00002bb4 <ba_toInteger>:

int ba_toInteger(bitArray *arr, int *value)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b086      	sub	sp, #24
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
    2bbc:	6039      	str	r1, [r7, #0]
    *value = 0;
    2bbe:	683b      	ldr	r3, [r7, #0]
    2bc0:	2200      	movs	r2, #0
    2bc2:	601a      	str	r2, [r3, #0]
    unsigned char ch;
    int pos, ret;
    for (pos = 0; pos != arr->size; ++pos)
    2bc4:	2300      	movs	r3, #0
    2bc6:	617b      	str	r3, [r7, #20]
    2bc8:	e01e      	b.n	2c08 <ba_toInteger+0x54>
    {
        if ((ret = ba_getByIndex(arr, pos, &ch)) != 0)
    2bca:	f107 030f 	add.w	r3, r7, #15
    2bce:	461a      	mov	r2, r3
    2bd0:	6979      	ldr	r1, [r7, #20]
    2bd2:	6878      	ldr	r0, [r7, #4]
    2bd4:	f7ff ffb6 	bl	2b44 <ba_getByIndex>
    2bd8:	6138      	str	r0, [r7, #16]
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d001      	beq.n	2be4 <ba_toInteger+0x30>
        {
            return ret;
    2be0:	693b      	ldr	r3, [r7, #16]
    2be2:	e018      	b.n	2c16 <ba_toInteger+0x62>
        }
        *value |= ch << (arr->size - pos - 1);
    2be4:	683b      	ldr	r3, [r7, #0]
    2be6:	681a      	ldr	r2, [r3, #0]
    2be8:	7bfb      	ldrb	r3, [r7, #15]
    2bea:	4619      	mov	r1, r3
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	88db      	ldrh	r3, [r3, #6]
    2bf0:	4618      	mov	r0, r3
    2bf2:	697b      	ldr	r3, [r7, #20]
    2bf4:	1ac3      	subs	r3, r0, r3
    2bf6:	3b01      	subs	r3, #1
    2bf8:	fa01 f303 	lsl.w	r3, r1, r3
    2bfc:	431a      	orrs	r2, r3
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	601a      	str	r2, [r3, #0]
int ba_toInteger(bitArray *arr, int *value)
{
    *value = 0;
    unsigned char ch;
    int pos, ret;
    for (pos = 0; pos != arr->size; ++pos)
    2c02:	697b      	ldr	r3, [r7, #20]
    2c04:	3301      	adds	r3, #1
    2c06:	617b      	str	r3, [r7, #20]
    2c08:	687b      	ldr	r3, [r7, #4]
    2c0a:	88db      	ldrh	r3, [r3, #6]
    2c0c:	461a      	mov	r2, r3
    2c0e:	697b      	ldr	r3, [r7, #20]
    2c10:	429a      	cmp	r2, r3
    2c12:	d1da      	bne.n	2bca <ba_toInteger+0x16>
        {
            return ret;
        }
        *value |= ch << (arr->size - pos - 1);
    }
    return 0;
    2c14:	2300      	movs	r3, #0
}
    2c16:	4618      	mov	r0, r3
    2c18:	3718      	adds	r7, #24
    2c1a:	46bd      	mov	sp, r7
    2c1c:	bd80      	pop	{r7, pc}
    2c1e:	bf00      	nop

00002c20 <ba_toString>:


char* ba_toString(bitArray *arr)
{
    2c20:	b580      	push	{r7, lr}
    2c22:	b086      	sub	sp, #24
    2c24:	af00      	add	r7, sp, #0
    2c26:	6078      	str	r0, [r7, #4]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    int pos, ret;
#else
    int pos;
#endif
    char* buff = (char*)gxmalloc(arr->size + 1);
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	88db      	ldrh	r3, [r3, #6]
    2c2c:	3301      	adds	r3, #1
    2c2e:	4618      	mov	r0, r3
    2c30:	f026 ff08 	bl	29a44 <malloc>
    2c34:	4603      	mov	r3, r0
    2c36:	613b      	str	r3, [r7, #16]
    for (pos = 0; pos != arr->size; ++pos)
    2c38:	2300      	movs	r3, #0
    2c3a:	617b      	str	r3, [r7, #20]
    2c3c:	e013      	b.n	2c66 <ba_toString+0x46>
    {
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        ret = ba_getByIndex(arr, pos, &ch);
        assert(ret == 0);
#else
        ba_getByIndex(arr, pos, &ch);
    2c3e:	f107 030f 	add.w	r3, r7, #15
    2c42:	461a      	mov	r2, r3
    2c44:	6979      	ldr	r1, [r7, #20]
    2c46:	6878      	ldr	r0, [r7, #4]
    2c48:	f7ff ff7c 	bl	2b44 <ba_getByIndex>
#endif
        buff[pos] = ch == 0 ? '0' : '1';
    2c4c:	697b      	ldr	r3, [r7, #20]
    2c4e:	693a      	ldr	r2, [r7, #16]
    2c50:	4413      	add	r3, r2
    2c52:	7bfa      	ldrb	r2, [r7, #15]
    2c54:	2a00      	cmp	r2, #0
    2c56:	d101      	bne.n	2c5c <ba_toString+0x3c>
    2c58:	2230      	movs	r2, #48	; 0x30
    2c5a:	e000      	b.n	2c5e <ba_toString+0x3e>
    2c5c:	2231      	movs	r2, #49	; 0x31
    2c5e:	701a      	strb	r2, [r3, #0]
    int pos, ret;
#else
    int pos;
#endif
    char* buff = (char*)gxmalloc(arr->size + 1);
    for (pos = 0; pos != arr->size; ++pos)
    2c60:	697b      	ldr	r3, [r7, #20]
    2c62:	3301      	adds	r3, #1
    2c64:	617b      	str	r3, [r7, #20]
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	88db      	ldrh	r3, [r3, #6]
    2c6a:	461a      	mov	r2, r3
    2c6c:	697b      	ldr	r3, [r7, #20]
    2c6e:	429a      	cmp	r2, r3
    2c70:	d1e5      	bne.n	2c3e <ba_toString+0x1e>
#else
        ba_getByIndex(arr, pos, &ch);
#endif
        buff[pos] = ch == 0 ? '0' : '1';
    }
    *(buff + arr->size) = 0;
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	88db      	ldrh	r3, [r3, #6]
    2c76:	461a      	mov	r2, r3
    2c78:	693b      	ldr	r3, [r7, #16]
    2c7a:	4413      	add	r3, r2
    2c7c:	2200      	movs	r2, #0
    2c7e:	701a      	strb	r2, [r3, #0]
    return buff;
    2c80:	693b      	ldr	r3, [r7, #16]
}
    2c82:	4618      	mov	r0, r3
    2c84:	3718      	adds	r7, #24
    2c86:	46bd      	mov	sp, r7
    2c88:	bd80      	pop	{r7, pc}
    2c8a:	bf00      	nop

00002c8c <bb_isAttached>:
#include "../include/errorcodes.h"
#include "../include/bytebuffer.h"
#include "../include/helpers.h"

char bb_isAttached(gxByteBuffer* arr)
{
    2c8c:	b480      	push	{r7}
    2c8e:	b083      	sub	sp, #12
    2c90:	af00      	add	r7, sp, #0
    2c92:	6078      	str	r0, [r7, #4]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    //If byte buffer is attached.
    return (arr->capacity & 0x80000000) == 0x80000000;
#else
    return (arr->capacity & 0x8000) == 0x8000;
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	889b      	ldrh	r3, [r3, #4]
    2c98:	b21b      	sxth	r3, r3
    2c9a:	b29b      	uxth	r3, r3
    2c9c:	0bdb      	lsrs	r3, r3, #15
    2c9e:	b2db      	uxtb	r3, r3
#endif
}
    2ca0:	4618      	mov	r0, r3
    2ca2:	370c      	adds	r7, #12
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bc80      	pop	{r7}
    2ca8:	4770      	bx	lr
    2caa:	bf00      	nop

00002cac <bb_getCapacity>:
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
unsigned long bb_getCapacity(gxByteBuffer* arr)
#else
unsigned short bb_getCapacity(gxByteBuffer* arr)
#endif
{
    2cac:	b480      	push	{r7}
    2cae:	b083      	sub	sp, #12
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
#if !defined(GX_DLMS_MICROCONTROLLER)&& (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    //If byte buffer is attached.
    return arr->capacity & 0x7FFFFFFF;
#else
    return arr->capacity & 0x7FFF;
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	889b      	ldrh	r3, [r3, #4]
    2cb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
    2cbc:	b29b      	uxth	r3, r3
#endif
}
    2cbe:	4618      	mov	r0, r3
    2cc0:	370c      	adds	r7, #12
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bc80      	pop	{r7}
    2cc6:	4770      	bx	lr

00002cc8 <bb_size>:
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
unsigned long bb_size(gxByteBuffer* arr)
#else
unsigned short bb_size(gxByteBuffer* arr)
#endif
{
    2cc8:	b480      	push	{r7}
    2cca:	b083      	sub	sp, #12
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
    if (arr == NULL)
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d101      	bne.n	2cda <bb_size+0x12>
    {
        return 0;
    2cd6:	2300      	movs	r3, #0
    2cd8:	e001      	b.n	2cde <bb_size+0x16>
    }
    return arr->size;
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	88db      	ldrh	r3, [r3, #6]
}
    2cde:	4618      	mov	r0, r3
    2ce0:	370c      	adds	r7, #12
    2ce2:	46bd      	mov	sp, r7
    2ce4:	bc80      	pop	{r7}
    2ce6:	4770      	bx	lr

00002ce8 <bb_init>:

int bb_init(
    gxByteBuffer* arr)
{
    2ce8:	b480      	push	{r7}
    2cea:	b083      	sub	sp, #12
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	2200      	movs	r2, #0
    2cf4:	809a      	strh	r2, [r3, #4]
    arr->data = NULL;
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	2200      	movs	r2, #0
    2cfa:	601a      	str	r2, [r3, #0]
    arr->position = 0;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	2200      	movs	r2, #0
    2d00:	811a      	strh	r2, [r3, #8]
    arr->size = 0;
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	2200      	movs	r2, #0
    2d06:	80da      	strh	r2, [r3, #6]
    return 0;
    2d08:	2300      	movs	r3, #0
}
    2d0a:	4618      	mov	r0, r3
    2d0c:	370c      	adds	r7, #12
    2d0e:	46bd      	mov	sp, r7
    2d10:	bc80      	pop	{r7}
    2d12:	4770      	bx	lr

00002d14 <bb_capacity>:
#else
int bb_capacity(
    gxByteBuffer* arr,
    unsigned short capacity)
#endif
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b082      	sub	sp, #8
    2d18:	af00      	add	r7, sp, #0
    2d1a:	6078      	str	r0, [r7, #4]
    2d1c:	460b      	mov	r3, r1
    2d1e:	807b      	strh	r3, [r7, #2]
    //Capacity can't change if it's attached.
    if (!bb_isAttached(arr))
    2d20:	6878      	ldr	r0, [r7, #4]
    2d22:	f7ff ffb3 	bl	2c8c <bb_isAttached>
    2d26:	4603      	mov	r3, r0
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d13b      	bne.n	2da4 <bb_capacity+0x90>
    {
        if (capacity == 0)
    2d2c:	887b      	ldrh	r3, [r7, #2]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d10f      	bne.n	2d52 <bb_capacity+0x3e>
        {
            if (arr->data != NULL)
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	681b      	ldr	r3, [r3, #0]
    2d36:	2b00      	cmp	r3, #0
    2d38:	d031      	beq.n	2d9e <bb_capacity+0x8a>
            {
                gxfree(arr->data);
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	4618      	mov	r0, r3
    2d40:	f026 fe88 	bl	29a54 <free>
                arr->data = NULL;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	2200      	movs	r2, #0
    2d48:	601a      	str	r2, [r3, #0]
                arr->size = 0;
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	2200      	movs	r2, #0
    2d4e:	80da      	strh	r2, [r3, #6]
    2d50:	e025      	b.n	2d9e <bb_capacity+0x8a>
            }
        }
        else
        {
            if (arr->capacity == 0)
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	889b      	ldrh	r3, [r3, #4]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d108      	bne.n	2d6c <bb_capacity+0x58>
            {
                arr->data = (unsigned char*)gxmalloc(capacity);
    2d5a:	887b      	ldrh	r3, [r7, #2]
    2d5c:	4618      	mov	r0, r3
    2d5e:	f026 fe71 	bl	29a44 <malloc>
    2d62:	4603      	mov	r3, r0
    2d64:	461a      	mov	r2, r3
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	601a      	str	r2, [r3, #0]
    2d6a:	e010      	b.n	2d8e <bb_capacity+0x7a>
            }
            else
            {
                arr->data = (unsigned char*)gxrealloc(arr->data, capacity);
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	887a      	ldrh	r2, [r7, #2]
    2d72:	4611      	mov	r1, r2
    2d74:	4618      	mov	r0, r3
    2d76:	f027 fa1b 	bl	2a1b0 <realloc>
    2d7a:	4602      	mov	r2, r0
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	601a      	str	r2, [r3, #0]
                //If not enought memory available.
                if (arr->data == NULL)
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	681b      	ldr	r3, [r3, #0]
    2d84:	2b00      	cmp	r3, #0
    2d86:	d102      	bne.n	2d8e <bb_capacity+0x7a>
                {
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    2d88:	f44f 7382 	mov.w	r3, #260	; 0x104
    2d8c:	e00b      	b.n	2da6 <bb_capacity+0x92>
                }
            }
            if (arr->size > capacity)
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	88db      	ldrh	r3, [r3, #6]
    2d92:	887a      	ldrh	r2, [r7, #2]
    2d94:	429a      	cmp	r2, r3
    2d96:	d202      	bcs.n	2d9e <bb_capacity+0x8a>
            {
                arr->size = capacity;
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	887a      	ldrh	r2, [r7, #2]
    2d9c:	80da      	strh	r2, [r3, #6]
            }
        }
        arr->capacity = capacity;
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	887a      	ldrh	r2, [r7, #2]
    2da2:	809a      	strh	r2, [r3, #4]
    }
    return DLMS_ERROR_CODE_OK;
    2da4:	2300      	movs	r3, #0
}
    2da6:	4618      	mov	r0, r3
    2da8:	3708      	adds	r7, #8
    2daa:	46bd      	mov	sp, r7
    2dac:	bd80      	pop	{r7, pc}
    2dae:	bf00      	nop

00002db0 <bb_zero>:
void bb_zero(
    gxByteBuffer* arr,
    unsigned short index,
    unsigned short count)
#endif
{
    2db0:	b580      	push	{r7, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
    2db8:	460b      	mov	r3, r1
    2dba:	807b      	strh	r3, [r7, #2]
    2dbc:	4613      	mov	r3, r2
    2dbe:	803b      	strh	r3, [r7, #0]
    if (index + count > arr->capacity)
    2dc0:	887a      	ldrh	r2, [r7, #2]
    2dc2:	883b      	ldrh	r3, [r7, #0]
    2dc4:	4413      	add	r3, r2
    2dc6:	687a      	ldr	r2, [r7, #4]
    2dc8:	8892      	ldrh	r2, [r2, #4]
    2dca:	4293      	cmp	r3, r2
    2dcc:	dd07      	ble.n	2dde <bb_zero+0x2e>
    {
        bb_capacity(arr, index + count);
    2dce:	887a      	ldrh	r2, [r7, #2]
    2dd0:	883b      	ldrh	r3, [r7, #0]
    2dd2:	4413      	add	r3, r2
    2dd4:	b29b      	uxth	r3, r3
    2dd6:	4619      	mov	r1, r3
    2dd8:	6878      	ldr	r0, [r7, #4]
    2dda:	f7ff ff9b 	bl	2d14 <bb_capacity>
    }
    if (arr->size < index + count)
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	88db      	ldrh	r3, [r3, #6]
    2de2:	4619      	mov	r1, r3
    2de4:	887a      	ldrh	r2, [r7, #2]
    2de6:	883b      	ldrh	r3, [r7, #0]
    2de8:	4413      	add	r3, r2
    2dea:	4299      	cmp	r1, r3
    2dec:	da05      	bge.n	2dfa <bb_zero+0x4a>
    {
        arr->size = index + count;
    2dee:	887a      	ldrh	r2, [r7, #2]
    2df0:	883b      	ldrh	r3, [r7, #0]
    2df2:	4413      	add	r3, r2
    2df4:	b29a      	uxth	r2, r3
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	80da      	strh	r2, [r3, #6]
    }
    memset(arr->data + index, 0, count);
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	681a      	ldr	r2, [r3, #0]
    2dfe:	887b      	ldrh	r3, [r7, #2]
    2e00:	4413      	add	r3, r2
    2e02:	883a      	ldrh	r2, [r7, #0]
    2e04:	2100      	movs	r1, #0
    2e06:	4618      	mov	r0, r3
    2e08:	f026 fe61 	bl	29ace <memset>
}
    2e0c:	bf00      	nop
    2e0e:	3708      	adds	r7, #8
    2e10:	46bd      	mov	sp, r7
    2e12:	bd80      	pop	{r7, pc}

00002e14 <bb_setUInt8>:

int bb_setUInt8(
    gxByteBuffer * arr,
    unsigned char item)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b084      	sub	sp, #16
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	460b      	mov	r3, r1
    2e1e:	70fb      	strb	r3, [r7, #3]
    int ret = bb_setUInt8ByIndex(arr, arr->size, item);
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	88db      	ldrh	r3, [r3, #6]
    2e24:	78fa      	ldrb	r2, [r7, #3]
    2e26:	4619      	mov	r1, r3
    2e28:	6878      	ldr	r0, [r7, #4]
    2e2a:	f000 f831 	bl	2e90 <bb_setUInt8ByIndex>
    2e2e:	60f8      	str	r0, [r7, #12]
    if (ret == 0)
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d105      	bne.n	2e42 <bb_setUInt8+0x2e>
    {
        ++arr->size;
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	88db      	ldrh	r3, [r3, #6]
    2e3a:	3301      	adds	r3, #1
    2e3c:	b29a      	uxth	r2, r3
    2e3e:	687b      	ldr	r3, [r7, #4]
    2e40:	80da      	strh	r2, [r3, #6]
    }
    return ret;
    2e42:	68fb      	ldr	r3, [r7, #12]
}
    2e44:	4618      	mov	r0, r3
    2e46:	3710      	adds	r7, #16
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}

00002e4c <bb_insertUInt8>:
int bb_insertUInt8(
    gxByteBuffer * arr,
    unsigned short index,
    unsigned char item)
#endif
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b084      	sub	sp, #16
    2e50:	af00      	add	r7, sp, #0
    2e52:	6078      	str	r0, [r7, #4]
    2e54:	460b      	mov	r3, r1
    2e56:	807b      	strh	r3, [r7, #2]
    2e58:	4613      	mov	r3, r2
    2e5a:	707b      	strb	r3, [r7, #1]
    int ret;
    if ((ret = bb_move(arr, index, index + 1, arr->size)) == 0)
    2e5c:	887b      	ldrh	r3, [r7, #2]
    2e5e:	3301      	adds	r3, #1
    2e60:	b29a      	uxth	r2, r3
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	88db      	ldrh	r3, [r3, #6]
    2e66:	8879      	ldrh	r1, [r7, #2]
    2e68:	6878      	ldr	r0, [r7, #4]
    2e6a:	f000 fff3 	bl	3e54 <bb_move>
    2e6e:	60f8      	str	r0, [r7, #12]
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d106      	bne.n	2e84 <bb_insertUInt8+0x38>
    {
        ret = bb_setUInt8ByIndex(arr, index, item);
    2e76:	787a      	ldrb	r2, [r7, #1]
    2e78:	887b      	ldrh	r3, [r7, #2]
    2e7a:	4619      	mov	r1, r3
    2e7c:	6878      	ldr	r0, [r7, #4]
    2e7e:	f000 f807 	bl	2e90 <bb_setUInt8ByIndex>
    2e82:	60f8      	str	r0, [r7, #12]
    }
    return ret;
    2e84:	68fb      	ldr	r3, [r7, #12]
}
    2e86:	4618      	mov	r0, r3
    2e88:	3710      	adds	r7, #16
    2e8a:	46bd      	mov	sp, r7
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	bf00      	nop

00002e90 <bb_setUInt8ByIndex>:
int bb_setUInt8ByIndex(
    gxByteBuffer *arr,
    unsigned short index,
    unsigned char item)
#endif
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
    2e98:	460b      	mov	r3, r1
    2e9a:	807b      	strh	r3, [r7, #2]
    2e9c:	4613      	mov	r3, r2
    2e9e:	707b      	strb	r3, [r7, #1]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || index >= arr->capacity))
    2ea0:	6878      	ldr	r0, [r7, #4]
    2ea2:	f7ff fef3 	bl	2c8c <bb_isAttached>
    2ea6:	4603      	mov	r3, r0
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d12e      	bne.n	2f0a <bb_setUInt8ByIndex+0x7a>
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	889b      	ldrh	r3, [r3, #4]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d004      	beq.n	2ebe <bb_setUInt8ByIndex+0x2e>
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	889b      	ldrh	r3, [r3, #4]
    2eb8:	887a      	ldrh	r2, [r7, #2]
    2eba:	429a      	cmp	r2, r3
    2ebc:	d325      	bcc.n	2f0a <bb_setUInt8ByIndex+0x7a>
    {
        arr->capacity += VECTOR_CAPACITY;
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	889b      	ldrh	r3, [r3, #4]
    2ec2:	3332      	adds	r3, #50	; 0x32
    2ec4:	b29a      	uxth	r2, r3
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	809a      	strh	r2, [r3, #4]
        if (arr->size == 0)
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	88db      	ldrh	r3, [r3, #6]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d109      	bne.n	2ee6 <bb_setUInt8ByIndex+0x56>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	889b      	ldrh	r3, [r3, #4]
    2ed6:	4618      	mov	r0, r3
    2ed8:	f026 fdb4 	bl	29a44 <malloc>
    2edc:	4603      	mov	r3, r0
    2ede:	461a      	mov	r2, r3
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	601a      	str	r2, [r3, #0]
    2ee4:	e011      	b.n	2f0a <bb_setUInt8ByIndex+0x7a>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	681a      	ldr	r2, [r3, #0]
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	889b      	ldrh	r3, [r3, #4]
    2eee:	4619      	mov	r1, r3
    2ef0:	4610      	mov	r0, r2
    2ef2:	f027 f95d 	bl	2a1b0 <realloc>
    2ef6:	4602      	mov	r2, r0
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	601a      	str	r2, [r3, #0]
            if (arr->data == NULL)
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	2b00      	cmp	r3, #0
    2f02:	d102      	bne.n	2f0a <bb_setUInt8ByIndex+0x7a>
            {
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    2f04:	f44f 7382 	mov.w	r3, #260	; 0x104
    2f08:	e011      	b.n	2f2e <bb_setUInt8ByIndex+0x9e>
            }
        }
    }
    if (bb_getCapacity(arr) <= index)
    2f0a:	6878      	ldr	r0, [r7, #4]
    2f0c:	f7ff fece 	bl	2cac <bb_getCapacity>
    2f10:	4603      	mov	r3, r0
    2f12:	461a      	mov	r2, r3
    2f14:	887b      	ldrh	r3, [r7, #2]
    2f16:	4293      	cmp	r3, r2
    2f18:	d302      	bcc.n	2f20 <bb_setUInt8ByIndex+0x90>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    2f1a:	f44f 7382 	mov.w	r3, #260	; 0x104
    2f1e:	e006      	b.n	2f2e <bb_setUInt8ByIndex+0x9e>
    }
    arr->data[index] = item;
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	681a      	ldr	r2, [r3, #0]
    2f24:	887b      	ldrh	r3, [r7, #2]
    2f26:	4413      	add	r3, r2
    2f28:	787a      	ldrb	r2, [r7, #1]
    2f2a:	701a      	strb	r2, [r3, #0]
    return 0;
    2f2c:	2300      	movs	r3, #0
}
    2f2e:	4618      	mov	r0, r3
    2f30:	3708      	adds	r7, #8
    2f32:	46bd      	mov	sp, r7
    2f34:	bd80      	pop	{r7, pc}
    2f36:	bf00      	nop

00002f38 <bb_setUInt16>:


int bb_setUInt16(
    gxByteBuffer *arr,
    unsigned short item)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
    2f40:	460b      	mov	r3, r1
    2f42:	807b      	strh	r3, [r7, #2]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || arr->size + 2 > arr->capacity))
    2f44:	6878      	ldr	r0, [r7, #4]
    2f46:	f7ff fea1 	bl	2c8c <bb_isAttached>
    2f4a:	4603      	mov	r3, r0
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d129      	bne.n	2fa4 <bb_setUInt16+0x6c>
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	889b      	ldrh	r3, [r3, #4]
    2f54:	2b00      	cmp	r3, #0
    2f56:	d006      	beq.n	2f66 <bb_setUInt16+0x2e>
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	88db      	ldrh	r3, [r3, #6]
    2f5c:	3302      	adds	r3, #2
    2f5e:	687a      	ldr	r2, [r7, #4]
    2f60:	8892      	ldrh	r2, [r2, #4]
    2f62:	4293      	cmp	r3, r2
    2f64:	dd1e      	ble.n	2fa4 <bb_setUInt16+0x6c>
    {
        arr->capacity += VECTOR_CAPACITY;
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	889b      	ldrh	r3, [r3, #4]
    2f6a:	3332      	adds	r3, #50	; 0x32
    2f6c:	b29a      	uxth	r2, r3
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	809a      	strh	r2, [r3, #4]
        if (arr->size == 0)
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	88db      	ldrh	r3, [r3, #6]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d109      	bne.n	2f8e <bb_setUInt16+0x56>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	889b      	ldrh	r3, [r3, #4]
    2f7e:	4618      	mov	r0, r3
    2f80:	f026 fd60 	bl	29a44 <malloc>
    2f84:	4603      	mov	r3, r0
    2f86:	461a      	mov	r2, r3
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	601a      	str	r2, [r3, #0]
    2f8c:	e00a      	b.n	2fa4 <bb_setUInt16+0x6c>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	681a      	ldr	r2, [r3, #0]
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	889b      	ldrh	r3, [r3, #4]
    2f96:	4619      	mov	r1, r3
    2f98:	4610      	mov	r0, r2
    2f9a:	f027 f909 	bl	2a1b0 <realloc>
    2f9e:	4602      	mov	r2, r0
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < arr->size + 2)
    2fa4:	6878      	ldr	r0, [r7, #4]
    2fa6:	f7ff fe81 	bl	2cac <bb_getCapacity>
    2faa:	4603      	mov	r3, r0
    2fac:	461a      	mov	r2, r3
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	88db      	ldrh	r3, [r3, #6]
    2fb2:	3302      	adds	r3, #2
    2fb4:	429a      	cmp	r2, r3
    2fb6:	da02      	bge.n	2fbe <bb_setUInt16+0x86>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    2fb8:	f44f 7382 	mov.w	r3, #260	; 0x104
    2fbc:	e019      	b.n	2ff2 <bb_setUInt16+0xba>
    }
    arr->data[arr->size] = (item >> 8) & 0xFF;
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	687a      	ldr	r2, [r7, #4]
    2fc4:	88d2      	ldrh	r2, [r2, #6]
    2fc6:	4413      	add	r3, r2
    2fc8:	887a      	ldrh	r2, [r7, #2]
    2fca:	0a12      	lsrs	r2, r2, #8
    2fcc:	b292      	uxth	r2, r2
    2fce:	b2d2      	uxtb	r2, r2
    2fd0:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 1] = item & 0xFF;
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	681a      	ldr	r2, [r3, #0]
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	88db      	ldrh	r3, [r3, #6]
    2fda:	3301      	adds	r3, #1
    2fdc:	4413      	add	r3, r2
    2fde:	887a      	ldrh	r2, [r7, #2]
    2fe0:	b2d2      	uxtb	r2, r2
    2fe2:	701a      	strb	r2, [r3, #0]
    arr->size += 2;
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	88db      	ldrh	r3, [r3, #6]
    2fe8:	3302      	adds	r3, #2
    2fea:	b29a      	uxth	r2, r3
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	80da      	strh	r2, [r3, #6]
    return 0;
    2ff0:	2300      	movs	r3, #0
}
    2ff2:	4618      	mov	r0, r3
    2ff4:	3708      	adds	r7, #8
    2ff6:	46bd      	mov	sp, r7
    2ff8:	bd80      	pop	{r7, pc}
    2ffa:	bf00      	nop

00002ffc <bb_setUInt32>:

int bb_setUInt32(
    gxByteBuffer* arr,
    unsigned long item)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	b084      	sub	sp, #16
    3000:	af00      	add	r7, sp, #0
    3002:	6078      	str	r0, [r7, #4]
    3004:	6039      	str	r1, [r7, #0]
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	88db      	ldrh	r3, [r3, #6]
    300a:	683a      	ldr	r2, [r7, #0]
    300c:	4619      	mov	r1, r3
    300e:	6878      	ldr	r0, [r7, #4]
    3010:	f000 f810 	bl	3034 <bb_setUInt32ByIndex>
    3014:	60f8      	str	r0, [r7, #12]
    if (ret == 0)
    3016:	68fb      	ldr	r3, [r7, #12]
    3018:	2b00      	cmp	r3, #0
    301a:	d105      	bne.n	3028 <bb_setUInt32+0x2c>
    {
        arr->size += 4;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	88db      	ldrh	r3, [r3, #6]
    3020:	3304      	adds	r3, #4
    3022:	b29a      	uxth	r2, r3
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	80da      	strh	r2, [r3, #6]
    }
    return ret;
    3028:	68fb      	ldr	r3, [r7, #12]
}
    302a:	4618      	mov	r0, r3
    302c:	3710      	adds	r7, #16
    302e:	46bd      	mov	sp, r7
    3030:	bd80      	pop	{r7, pc}
    3032:	bf00      	nop

00003034 <bb_setUInt32ByIndex>:

int bb_setUInt32ByIndex(
    gxByteBuffer* arr,
    unsigned long index,
    unsigned long item)
{
    3034:	b580      	push	{r7, lr}
    3036:	b084      	sub	sp, #16
    3038:	af00      	add	r7, sp, #0
    303a:	60f8      	str	r0, [r7, #12]
    303c:	60b9      	str	r1, [r7, #8]
    303e:	607a      	str	r2, [r7, #4]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || index + 4 > arr->capacity))
    3040:	68f8      	ldr	r0, [r7, #12]
    3042:	f7ff fe23 	bl	2c8c <bb_isAttached>
    3046:	4603      	mov	r3, r0
    3048:	2b00      	cmp	r3, #0
    304a:	d128      	bne.n	309e <bb_setUInt32ByIndex+0x6a>
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	889b      	ldrh	r3, [r3, #4]
    3050:	2b00      	cmp	r3, #0
    3052:	d005      	beq.n	3060 <bb_setUInt32ByIndex+0x2c>
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	3304      	adds	r3, #4
    3058:	68fa      	ldr	r2, [r7, #12]
    305a:	8892      	ldrh	r2, [r2, #4]
    305c:	4293      	cmp	r3, r2
    305e:	d91e      	bls.n	309e <bb_setUInt32ByIndex+0x6a>
    {
        arr->capacity += VECTOR_CAPACITY;
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	889b      	ldrh	r3, [r3, #4]
    3064:	3332      	adds	r3, #50	; 0x32
    3066:	b29a      	uxth	r2, r3
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	809a      	strh	r2, [r3, #4]
        if (arr->data == NULL)
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	681b      	ldr	r3, [r3, #0]
    3070:	2b00      	cmp	r3, #0
    3072:	d109      	bne.n	3088 <bb_setUInt32ByIndex+0x54>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	889b      	ldrh	r3, [r3, #4]
    3078:	4618      	mov	r0, r3
    307a:	f026 fce3 	bl	29a44 <malloc>
    307e:	4603      	mov	r3, r0
    3080:	461a      	mov	r2, r3
    3082:	68fb      	ldr	r3, [r7, #12]
    3084:	601a      	str	r2, [r3, #0]
    3086:	e00a      	b.n	309e <bb_setUInt32ByIndex+0x6a>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	681a      	ldr	r2, [r3, #0]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	889b      	ldrh	r3, [r3, #4]
    3090:	4619      	mov	r1, r3
    3092:	4610      	mov	r0, r2
    3094:	f027 f88c 	bl	2a1b0 <realloc>
    3098:	4602      	mov	r2, r0
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < index + 4)
    309e:	68f8      	ldr	r0, [r7, #12]
    30a0:	f7ff fe04 	bl	2cac <bb_getCapacity>
    30a4:	4603      	mov	r3, r0
    30a6:	461a      	mov	r2, r3
    30a8:	68bb      	ldr	r3, [r7, #8]
    30aa:	3304      	adds	r3, #4
    30ac:	429a      	cmp	r2, r3
    30ae:	d202      	bcs.n	30b6 <bb_setUInt32ByIndex+0x82>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    30b0:	f44f 7382 	mov.w	r3, #260	; 0x104
    30b4:	e022      	b.n	30fc <bb_setUInt32ByIndex+0xc8>
    }
    PUT32(arr->data + index, item);
    30b6:	68fb      	ldr	r3, [r7, #12]
    30b8:	681a      	ldr	r2, [r3, #0]
    30ba:	68bb      	ldr	r3, [r7, #8]
    30bc:	4413      	add	r3, r2
    30be:	687a      	ldr	r2, [r7, #4]
    30c0:	0e12      	lsrs	r2, r2, #24
    30c2:	b2d2      	uxtb	r2, r2
    30c4:	701a      	strb	r2, [r3, #0]
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	681a      	ldr	r2, [r3, #0]
    30ca:	68bb      	ldr	r3, [r7, #8]
    30cc:	3301      	adds	r3, #1
    30ce:	4413      	add	r3, r2
    30d0:	687a      	ldr	r2, [r7, #4]
    30d2:	0c12      	lsrs	r2, r2, #16
    30d4:	b2d2      	uxtb	r2, r2
    30d6:	701a      	strb	r2, [r3, #0]
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	681a      	ldr	r2, [r3, #0]
    30dc:	68bb      	ldr	r3, [r7, #8]
    30de:	3302      	adds	r3, #2
    30e0:	4413      	add	r3, r2
    30e2:	687a      	ldr	r2, [r7, #4]
    30e4:	0a12      	lsrs	r2, r2, #8
    30e6:	b2d2      	uxtb	r2, r2
    30e8:	701a      	strb	r2, [r3, #0]
    30ea:	68fb      	ldr	r3, [r7, #12]
    30ec:	681a      	ldr	r2, [r3, #0]
    30ee:	68bb      	ldr	r3, [r7, #8]
    30f0:	3303      	adds	r3, #3
    30f2:	4413      	add	r3, r2
    30f4:	687a      	ldr	r2, [r7, #4]
    30f6:	b2d2      	uxtb	r2, r2
    30f8:	701a      	strb	r2, [r3, #0]
    return 0;
    30fa:	2300      	movs	r3, #0
}
    30fc:	4618      	mov	r0, r3
    30fe:	3710      	adds	r7, #16
    3100:	46bd      	mov	sp, r7
    3102:	bd80      	pop	{r7, pc}

00003104 <bb_setUInt64>:

int bb_setUInt64(
    gxByteBuffer* arr,
    unsigned long long item)
{
    3104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3108:	b08d      	sub	sp, #52	; 0x34
    310a:	af00      	add	r7, sp, #0
    310c:	62f8      	str	r0, [r7, #44]	; 0x2c
    310e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || arr->size + 8 > arr->capacity))
    3112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3114:	f7ff fdba 	bl	2c8c <bb_isAttached>
    3118:	4603      	mov	r3, r0
    311a:	2b00      	cmp	r3, #0
    311c:	d12a      	bne.n	3174 <bb_setUInt64+0x70>
    311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3120:	889b      	ldrh	r3, [r3, #4]
    3122:	2b00      	cmp	r3, #0
    3124:	d007      	beq.n	3136 <bb_setUInt64+0x32>
    3126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3128:	88db      	ldrh	r3, [r3, #6]
    312a:	f103 0208 	add.w	r2, r3, #8
    312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3130:	889b      	ldrh	r3, [r3, #4]
    3132:	429a      	cmp	r2, r3
    3134:	dd1e      	ble.n	3174 <bb_setUInt64+0x70>
    {
        arr->capacity += VECTOR_CAPACITY;
    3136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3138:	889b      	ldrh	r3, [r3, #4]
    313a:	3332      	adds	r3, #50	; 0x32
    313c:	b29b      	uxth	r3, r3
    313e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3140:	8093      	strh	r3, [r2, #4]
        if (arr->data == NULL)
    3142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3144:	681b      	ldr	r3, [r3, #0]
    3146:	2b00      	cmp	r3, #0
    3148:	d109      	bne.n	315e <bb_setUInt64+0x5a>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    314c:	889b      	ldrh	r3, [r3, #4]
    314e:	4618      	mov	r0, r3
    3150:	f026 fc78 	bl	29a44 <malloc>
    3154:	4603      	mov	r3, r0
    3156:	461a      	mov	r2, r3
    3158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    315a:	601a      	str	r2, [r3, #0]
    315c:	e00a      	b.n	3174 <bb_setUInt64+0x70>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3160:	681a      	ldr	r2, [r3, #0]
    3162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3164:	889b      	ldrh	r3, [r3, #4]
    3166:	4619      	mov	r1, r3
    3168:	4610      	mov	r0, r2
    316a:	f027 f821 	bl	2a1b0 <realloc>
    316e:	4602      	mov	r2, r0
    3170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3172:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < arr->size + 8)
    3174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3176:	f7ff fd99 	bl	2cac <bb_getCapacity>
    317a:	4603      	mov	r3, r0
    317c:	461a      	mov	r2, r3
    317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3180:	88db      	ldrh	r3, [r3, #6]
    3182:	3308      	adds	r3, #8
    3184:	429a      	cmp	r2, r3
    3186:	da02      	bge.n	318e <bb_setUInt64+0x8a>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3188:	f44f 7382 	mov.w	r3, #260	; 0x104
    318c:	e0a1      	b.n	32d2 <bb_setUInt64+0x1ce>
    }
    ((unsigned char*)arr->data)[arr->size + 7] = item & 0xFF;
    318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3190:	681a      	ldr	r2, [r3, #0]
    3192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3194:	88db      	ldrh	r3, [r3, #6]
    3196:	3307      	adds	r3, #7
    3198:	441a      	add	r2, r3
    319a:	f897 3020 	ldrb.w	r3, [r7, #32]
    319e:	7013      	strb	r3, [r2, #0]
    item >>= 8;
    31a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    31a4:	0a1d      	lsrs	r5, r3, #8
    31a6:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
    31aa:	0a26      	lsrs	r6, r4, #8
    31ac:	e9c7 5608 	strd	r5, r6, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    31b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    31b2:	681a      	ldr	r2, [r3, #0]
    31b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    31b6:	88db      	ldrh	r3, [r3, #6]
    31b8:	3306      	adds	r3, #6
    31ba:	441a      	add	r2, r3
    31bc:	f897 3020 	ldrb.w	r3, [r7, #32]
    31c0:	7013      	strb	r3, [r2, #0]
    item >>= 8;
    31c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    31c6:	0a1a      	lsrs	r2, r3, #8
    31c8:	61ba      	str	r2, [r7, #24]
    31ca:	69ba      	ldr	r2, [r7, #24]
    31cc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    31d0:	61ba      	str	r2, [r7, #24]
    31d2:	0a23      	lsrs	r3, r4, #8
    31d4:	61fb      	str	r3, [r7, #28]
    31d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    31da:	e9c7 3408 	strd	r3, r4, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    31de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    31e0:	681a      	ldr	r2, [r3, #0]
    31e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    31e4:	88db      	ldrh	r3, [r3, #6]
    31e6:	3305      	adds	r3, #5
    31e8:	4413      	add	r3, r2
    31ea:	f897 2020 	ldrb.w	r2, [r7, #32]
    31ee:	701a      	strb	r2, [r3, #0]
    item >>= 8;
    31f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    31f4:	0a1a      	lsrs	r2, r3, #8
    31f6:	613a      	str	r2, [r7, #16]
    31f8:	693a      	ldr	r2, [r7, #16]
    31fa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    31fe:	613a      	str	r2, [r7, #16]
    3200:	0a23      	lsrs	r3, r4, #8
    3202:	617b      	str	r3, [r7, #20]
    3204:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    3208:	e9c7 3408 	strd	r3, r4, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    320e:	681a      	ldr	r2, [r3, #0]
    3210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3212:	88db      	ldrh	r3, [r3, #6]
    3214:	3304      	adds	r3, #4
    3216:	4413      	add	r3, r2
    3218:	f897 2020 	ldrb.w	r2, [r7, #32]
    321c:	701a      	strb	r2, [r3, #0]
    item >>= 8;
    321e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    3222:	0a1a      	lsrs	r2, r3, #8
    3224:	60ba      	str	r2, [r7, #8]
    3226:	68ba      	ldr	r2, [r7, #8]
    3228:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    322c:	60ba      	str	r2, [r7, #8]
    322e:	0a23      	lsrs	r3, r4, #8
    3230:	60fb      	str	r3, [r7, #12]
    3232:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    3236:	e9c7 3408 	strd	r3, r4, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 3] = item & 0xFF;
    323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    323c:	681a      	ldr	r2, [r3, #0]
    323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3240:	88db      	ldrh	r3, [r3, #6]
    3242:	3303      	adds	r3, #3
    3244:	4413      	add	r3, r2
    3246:	f897 2020 	ldrb.w	r2, [r7, #32]
    324a:	701a      	strb	r2, [r3, #0]
    item >>= 8;
    324c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    3250:	0a1a      	lsrs	r2, r3, #8
    3252:	603a      	str	r2, [r7, #0]
    3254:	683a      	ldr	r2, [r7, #0]
    3256:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    325a:	603a      	str	r2, [r7, #0]
    325c:	0a23      	lsrs	r3, r4, #8
    325e:	607b      	str	r3, [r7, #4]
    3260:	e897 0018 	ldmia.w	r7, {r3, r4}
    3264:	e9c7 3408 	strd	r3, r4, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    3268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    326a:	681a      	ldr	r2, [r3, #0]
    326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    326e:	88db      	ldrh	r3, [r3, #6]
    3270:	3302      	adds	r3, #2
    3272:	4413      	add	r3, r2
    3274:	f897 2020 	ldrb.w	r2, [r7, #32]
    3278:	701a      	strb	r2, [r3, #0]
    item >>= 8;
    327a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    327e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    3282:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
    3286:	ea4f 2b14 	mov.w	fp, r4, lsr #8
    328a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
    ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3290:	681a      	ldr	r2, [r3, #0]
    3292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3294:	88db      	ldrh	r3, [r3, #6]
    3296:	3301      	adds	r3, #1
    3298:	4413      	add	r3, r2
    329a:	f897 2020 	ldrb.w	r2, [r7, #32]
    329e:	701a      	strb	r2, [r3, #0]
    item >>= 8;
    32a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    32a4:	ea4f 2813 	mov.w	r8, r3, lsr #8
    32a8:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
    32ac:	ea4f 2914 	mov.w	r9, r4, lsr #8
    32b0:	e9c7 8908 	strd	r8, r9, [r7, #32]
    ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    32b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    32ba:	88d2      	ldrh	r2, [r2, #6]
    32bc:	4413      	add	r3, r2
    32be:	f897 2020 	ldrb.w	r2, [r7, #32]
    32c2:	701a      	strb	r2, [r3, #0]
    ((unsigned char*)arr->data)[arr->size + 4] = (item >> 24) & 0xFF;
    ((unsigned char*)arr->data)[arr->size + 5] = (item >> 16) & 0xFF;
    ((unsigned char*)arr->data)[arr->size + 6] = (item >> 8) & 0xFF;
    ((unsigned char*)arr->data)[arr->size + 7] = item & 0xFF;
*/
    arr->size += 8;
    32c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32c6:	88db      	ldrh	r3, [r3, #6]
    32c8:	3308      	adds	r3, #8
    32ca:	b29a      	uxth	r2, r3
    32cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32ce:	80da      	strh	r2, [r3, #6]
    return 0;
    32d0:	2300      	movs	r3, #0
}
    32d2:	4618      	mov	r0, r3
    32d4:	3734      	adds	r7, #52	; 0x34
    32d6:	46bd      	mov	sp, r7
    32d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000032dc <bb_setFloat>:

#ifndef GX_DLMS_MICROCONTROLLER
int bb_setFloat(
    gxByteBuffer* arr,
    float value)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
    32e4:	6039      	str	r1, [r7, #0]
        float value;
        char b[sizeof(float)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    32e6:	683b      	ldr	r3, [r7, #0]
    32e8:	60fb      	str	r3, [r7, #12]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || arr->size + 4 > arr->capacity))
    32ea:	6878      	ldr	r0, [r7, #4]
    32ec:	f7ff fcce 	bl	2c8c <bb_isAttached>
    32f0:	4603      	mov	r3, r0
    32f2:	2b00      	cmp	r3, #0
    32f4:	d129      	bne.n	334a <bb_setFloat+0x6e>
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	889b      	ldrh	r3, [r3, #4]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d006      	beq.n	330c <bb_setFloat+0x30>
    32fe:	687b      	ldr	r3, [r7, #4]
    3300:	88db      	ldrh	r3, [r3, #6]
    3302:	3304      	adds	r3, #4
    3304:	687a      	ldr	r2, [r7, #4]
    3306:	8892      	ldrh	r2, [r2, #4]
    3308:	4293      	cmp	r3, r2
    330a:	dd1e      	ble.n	334a <bb_setFloat+0x6e>
    {
        arr->capacity += VECTOR_CAPACITY;
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	889b      	ldrh	r3, [r3, #4]
    3310:	3332      	adds	r3, #50	; 0x32
    3312:	b29a      	uxth	r2, r3
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	809a      	strh	r2, [r3, #4]
        if (arr->data == NULL)
    3318:	687b      	ldr	r3, [r7, #4]
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	2b00      	cmp	r3, #0
    331e:	d109      	bne.n	3334 <bb_setFloat+0x58>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	889b      	ldrh	r3, [r3, #4]
    3324:	4618      	mov	r0, r3
    3326:	f026 fb8d 	bl	29a44 <malloc>
    332a:	4603      	mov	r3, r0
    332c:	461a      	mov	r2, r3
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	601a      	str	r2, [r3, #0]
    3332:	e00a      	b.n	334a <bb_setFloat+0x6e>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	681a      	ldr	r2, [r3, #0]
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	889b      	ldrh	r3, [r3, #4]
    333c:	4619      	mov	r1, r3
    333e:	4610      	mov	r0, r2
    3340:	f026 ff36 	bl	2a1b0 <realloc>
    3344:	4602      	mov	r2, r0
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < arr->size + 4)
    334a:	6878      	ldr	r0, [r7, #4]
    334c:	f7ff fcae 	bl	2cac <bb_getCapacity>
    3350:	4603      	mov	r3, r0
    3352:	461a      	mov	r2, r3
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	88db      	ldrh	r3, [r3, #6]
    3358:	3304      	adds	r3, #4
    335a:	429a      	cmp	r2, r3
    335c:	da02      	bge.n	3364 <bb_setFloat+0x88>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    335e:	f44f 7382 	mov.w	r3, #260	; 0x104
    3362:	e025      	b.n	33b0 <bb_setFloat+0xd4>
    }
    arr->data[arr->size] = tmp.b[3];
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	687a      	ldr	r2, [r7, #4]
    336a:	88d2      	ldrh	r2, [r2, #6]
    336c:	4413      	add	r3, r2
    336e:	7bfa      	ldrb	r2, [r7, #15]
    3370:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 1] = tmp.b[2];
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	681a      	ldr	r2, [r3, #0]
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	88db      	ldrh	r3, [r3, #6]
    337a:	3301      	adds	r3, #1
    337c:	4413      	add	r3, r2
    337e:	7bba      	ldrb	r2, [r7, #14]
    3380:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 2] = tmp.b[1];
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	681a      	ldr	r2, [r3, #0]
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	88db      	ldrh	r3, [r3, #6]
    338a:	3302      	adds	r3, #2
    338c:	4413      	add	r3, r2
    338e:	7b7a      	ldrb	r2, [r7, #13]
    3390:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 3] = tmp.b[0];
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	681a      	ldr	r2, [r3, #0]
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	88db      	ldrh	r3, [r3, #6]
    339a:	3303      	adds	r3, #3
    339c:	4413      	add	r3, r2
    339e:	7b3a      	ldrb	r2, [r7, #12]
    33a0:	701a      	strb	r2, [r3, #0]
    arr->size += 4;
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	88db      	ldrh	r3, [r3, #6]
    33a6:	3304      	adds	r3, #4
    33a8:	b29a      	uxth	r2, r3
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	80da      	strh	r2, [r3, #6]
    return 0;
    33ae:	2300      	movs	r3, #0
}
    33b0:	4618      	mov	r0, r3
    33b2:	3710      	adds	r7, #16
    33b4:	46bd      	mov	sp, r7
    33b6:	bd80      	pop	{r7, pc}

000033b8 <bb_setDouble>:

int bb_setDouble(
    gxByteBuffer* arr,
    double value)
{
    33b8:	b590      	push	{r4, r7, lr}
    33ba:	b087      	sub	sp, #28
    33bc:	af00      	add	r7, sp, #0
    33be:	60f8      	str	r0, [r7, #12]
    33c0:	e9c7 2300 	strd	r2, r3, [r7]
        double value;
        char b[sizeof(double)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    33c4:	e897 0018 	ldmia.w	r7, {r3, r4}
    33c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (!bb_isAttached(arr) && (arr->capacity == 0 || arr->size + 8 > arr->capacity))
    33cc:	68f8      	ldr	r0, [r7, #12]
    33ce:	f7ff fc5d 	bl	2c8c <bb_isAttached>
    33d2:	4603      	mov	r3, r0
    33d4:	2b00      	cmp	r3, #0
    33d6:	d129      	bne.n	342c <bb_setDouble+0x74>
    33d8:	68fb      	ldr	r3, [r7, #12]
    33da:	889b      	ldrh	r3, [r3, #4]
    33dc:	2b00      	cmp	r3, #0
    33de:	d006      	beq.n	33ee <bb_setDouble+0x36>
    33e0:	68fb      	ldr	r3, [r7, #12]
    33e2:	88db      	ldrh	r3, [r3, #6]
    33e4:	3308      	adds	r3, #8
    33e6:	68fa      	ldr	r2, [r7, #12]
    33e8:	8892      	ldrh	r2, [r2, #4]
    33ea:	4293      	cmp	r3, r2
    33ec:	dd1e      	ble.n	342c <bb_setDouble+0x74>
    {
        arr->capacity += VECTOR_CAPACITY;
    33ee:	68fb      	ldr	r3, [r7, #12]
    33f0:	889b      	ldrh	r3, [r3, #4]
    33f2:	3332      	adds	r3, #50	; 0x32
    33f4:	b29a      	uxth	r2, r3
    33f6:	68fb      	ldr	r3, [r7, #12]
    33f8:	809a      	strh	r2, [r3, #4]
        if (arr->data == NULL)
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	2b00      	cmp	r3, #0
    3400:	d109      	bne.n	3416 <bb_setDouble+0x5e>
        {
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    3402:	68fb      	ldr	r3, [r7, #12]
    3404:	889b      	ldrh	r3, [r3, #4]
    3406:	4618      	mov	r0, r3
    3408:	f026 fb1c 	bl	29a44 <malloc>
    340c:	4603      	mov	r3, r0
    340e:	461a      	mov	r2, r3
    3410:	68fb      	ldr	r3, [r7, #12]
    3412:	601a      	str	r2, [r3, #0]
    3414:	e00a      	b.n	342c <bb_setDouble+0x74>
        }
        else
        {
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    3416:	68fb      	ldr	r3, [r7, #12]
    3418:	681a      	ldr	r2, [r3, #0]
    341a:	68fb      	ldr	r3, [r7, #12]
    341c:	889b      	ldrh	r3, [r3, #4]
    341e:	4619      	mov	r1, r3
    3420:	4610      	mov	r0, r2
    3422:	f026 fec5 	bl	2a1b0 <realloc>
    3426:	4602      	mov	r2, r0
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < arr->size + 8)
    342c:	68f8      	ldr	r0, [r7, #12]
    342e:	f7ff fc3d 	bl	2cac <bb_getCapacity>
    3432:	4603      	mov	r3, r0
    3434:	461a      	mov	r2, r3
    3436:	68fb      	ldr	r3, [r7, #12]
    3438:	88db      	ldrh	r3, [r3, #6]
    343a:	3308      	adds	r3, #8
    343c:	429a      	cmp	r2, r3
    343e:	da02      	bge.n	3446 <bb_setDouble+0x8e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3440:	f44f 7382 	mov.w	r3, #260	; 0x104
    3444:	e045      	b.n	34d2 <bb_setDouble+0x11a>
    }
    arr->data[arr->size] = tmp.b[7];
    3446:	68fb      	ldr	r3, [r7, #12]
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	68fa      	ldr	r2, [r7, #12]
    344c:	88d2      	ldrh	r2, [r2, #6]
    344e:	4413      	add	r3, r2
    3450:	7dfa      	ldrb	r2, [r7, #23]
    3452:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 1] = tmp.b[6];
    3454:	68fb      	ldr	r3, [r7, #12]
    3456:	681a      	ldr	r2, [r3, #0]
    3458:	68fb      	ldr	r3, [r7, #12]
    345a:	88db      	ldrh	r3, [r3, #6]
    345c:	3301      	adds	r3, #1
    345e:	4413      	add	r3, r2
    3460:	7dba      	ldrb	r2, [r7, #22]
    3462:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 2] = tmp.b[5];
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	681a      	ldr	r2, [r3, #0]
    3468:	68fb      	ldr	r3, [r7, #12]
    346a:	88db      	ldrh	r3, [r3, #6]
    346c:	3302      	adds	r3, #2
    346e:	4413      	add	r3, r2
    3470:	7d7a      	ldrb	r2, [r7, #21]
    3472:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 3] = tmp.b[4];
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	681a      	ldr	r2, [r3, #0]
    3478:	68fb      	ldr	r3, [r7, #12]
    347a:	88db      	ldrh	r3, [r3, #6]
    347c:	3303      	adds	r3, #3
    347e:	4413      	add	r3, r2
    3480:	7d3a      	ldrb	r2, [r7, #20]
    3482:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 4] = tmp.b[3];
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	681a      	ldr	r2, [r3, #0]
    3488:	68fb      	ldr	r3, [r7, #12]
    348a:	88db      	ldrh	r3, [r3, #6]
    348c:	3304      	adds	r3, #4
    348e:	4413      	add	r3, r2
    3490:	7cfa      	ldrb	r2, [r7, #19]
    3492:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 5] = tmp.b[2];
    3494:	68fb      	ldr	r3, [r7, #12]
    3496:	681a      	ldr	r2, [r3, #0]
    3498:	68fb      	ldr	r3, [r7, #12]
    349a:	88db      	ldrh	r3, [r3, #6]
    349c:	3305      	adds	r3, #5
    349e:	4413      	add	r3, r2
    34a0:	7cba      	ldrb	r2, [r7, #18]
    34a2:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 6] = tmp.b[1];
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	681a      	ldr	r2, [r3, #0]
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	88db      	ldrh	r3, [r3, #6]
    34ac:	3306      	adds	r3, #6
    34ae:	4413      	add	r3, r2
    34b0:	7c7a      	ldrb	r2, [r7, #17]
    34b2:	701a      	strb	r2, [r3, #0]
    arr->data[arr->size + 7] = tmp.b[0];
    34b4:	68fb      	ldr	r3, [r7, #12]
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	88db      	ldrh	r3, [r3, #6]
    34bc:	3307      	adds	r3, #7
    34be:	4413      	add	r3, r2
    34c0:	7c3a      	ldrb	r2, [r7, #16]
    34c2:	701a      	strb	r2, [r3, #0]
    arr->size += 8;
    34c4:	68fb      	ldr	r3, [r7, #12]
    34c6:	88db      	ldrh	r3, [r3, #6]
    34c8:	3308      	adds	r3, #8
    34ca:	b29a      	uxth	r2, r3
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	80da      	strh	r2, [r3, #6]
    return 0;
    34d0:	2300      	movs	r3, #0
}
    34d2:	4618      	mov	r0, r3
    34d4:	371c      	adds	r7, #28
    34d6:	46bd      	mov	sp, r7
    34d8:	bd90      	pop	{r4, r7, pc}
    34da:	bf00      	nop

000034dc <bb_setInt8>:


int bb_setInt8(
    gxByteBuffer* arr,
    char item)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b082      	sub	sp, #8
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	460b      	mov	r3, r1
    34e6:	70fb      	strb	r3, [r7, #3]
    return bb_setUInt8(arr, (unsigned char)item);
    34e8:	78fb      	ldrb	r3, [r7, #3]
    34ea:	4619      	mov	r1, r3
    34ec:	6878      	ldr	r0, [r7, #4]
    34ee:	f7ff fc91 	bl	2e14 <bb_setUInt8>
    34f2:	4603      	mov	r3, r0
}
    34f4:	4618      	mov	r0, r3
    34f6:	3708      	adds	r7, #8
    34f8:	46bd      	mov	sp, r7
    34fa:	bd80      	pop	{r7, pc}

000034fc <bb_setInt16>:

int bb_setInt16(
    gxByteBuffer* arr,
    short item)
{
    34fc:	b580      	push	{r7, lr}
    34fe:	b082      	sub	sp, #8
    3500:	af00      	add	r7, sp, #0
    3502:	6078      	str	r0, [r7, #4]
    3504:	460b      	mov	r3, r1
    3506:	807b      	strh	r3, [r7, #2]
    return bb_setUInt16(arr, (unsigned short)item);
    3508:	887b      	ldrh	r3, [r7, #2]
    350a:	4619      	mov	r1, r3
    350c:	6878      	ldr	r0, [r7, #4]
    350e:	f7ff fd13 	bl	2f38 <bb_setUInt16>
    3512:	4603      	mov	r3, r0
}
    3514:	4618      	mov	r0, r3
    3516:	3708      	adds	r7, #8
    3518:	46bd      	mov	sp, r7
    351a:	bd80      	pop	{r7, pc}

0000351c <bb_setInt32>:

int bb_setInt32(
    gxByteBuffer* arr,
    long item)
{
    351c:	b580      	push	{r7, lr}
    351e:	b082      	sub	sp, #8
    3520:	af00      	add	r7, sp, #0
    3522:	6078      	str	r0, [r7, #4]
    3524:	6039      	str	r1, [r7, #0]
    return bb_setUInt32(arr, (unsigned long)item);
    3526:	683b      	ldr	r3, [r7, #0]
    3528:	4619      	mov	r1, r3
    352a:	6878      	ldr	r0, [r7, #4]
    352c:	f7ff fd66 	bl	2ffc <bb_setUInt32>
    3530:	4603      	mov	r3, r0
}
    3532:	4618      	mov	r0, r3
    3534:	3708      	adds	r7, #8
    3536:	46bd      	mov	sp, r7
    3538:	bd80      	pop	{r7, pc}
    353a:	bf00      	nop

0000353c <bb_setInt64>:

int bb_setInt64(
    gxByteBuffer* arr,
    long long item)
{
    353c:	b590      	push	{r4, r7, lr}
    353e:	b085      	sub	sp, #20
    3540:	af00      	add	r7, sp, #0
    3542:	60f8      	str	r0, [r7, #12]
    3544:	e9c7 2300 	strd	r2, r3, [r7]
    return bb_setUInt64(arr, (unsigned long long) item);
    3548:	e897 0018 	ldmia.w	r7, {r3, r4}
    354c:	461a      	mov	r2, r3
    354e:	4623      	mov	r3, r4
    3550:	68f8      	ldr	r0, [r7, #12]
    3552:	f7ff fdd7 	bl	3104 <bb_setUInt64>
    3556:	4603      	mov	r3, r0
}
    3558:	4618      	mov	r0, r3
    355a:	3714      	adds	r7, #20
    355c:	46bd      	mov	sp, r7
    355e:	bd90      	pop	{r4, r7, pc}

00003560 <bb_set>:
int bb_set(
    gxByteBuffer* arr,
    const unsigned char* pSource,
    unsigned short count)
#endif
{
    3560:	b580      	push	{r7, lr}
    3562:	b084      	sub	sp, #16
    3564:	af00      	add	r7, sp, #0
    3566:	60f8      	str	r0, [r7, #12]
    3568:	60b9      	str	r1, [r7, #8]
    356a:	4613      	mov	r3, r2
    356c:	80fb      	strh	r3, [r7, #6]
    if (!bb_isAttached(arr) && (arr->size + count > arr->capacity))
    356e:	68f8      	ldr	r0, [r7, #12]
    3570:	f7ff fb8c 	bl	2c8c <bb_isAttached>
    3574:	4603      	mov	r3, r0
    3576:	2b00      	cmp	r3, #0
    3578:	d12d      	bne.n	35d6 <bb_set+0x76>
    357a:	68fb      	ldr	r3, [r7, #12]
    357c:	88db      	ldrh	r3, [r3, #6]
    357e:	461a      	mov	r2, r3
    3580:	88fb      	ldrh	r3, [r7, #6]
    3582:	4413      	add	r3, r2
    3584:	68fa      	ldr	r2, [r7, #12]
    3586:	8892      	ldrh	r2, [r2, #4]
    3588:	4293      	cmp	r3, r2
    358a:	dd24      	ble.n	35d6 <bb_set+0x76>
    {
        //First time data is reserved only for the added data.
        if (arr->capacity == 0)
    358c:	68fb      	ldr	r3, [r7, #12]
    358e:	889b      	ldrh	r3, [r3, #4]
    3590:	2b00      	cmp	r3, #0
    3592:	d10c      	bne.n	35ae <bb_set+0x4e>
        {
            arr->capacity = count;
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	88fa      	ldrh	r2, [r7, #6]
    3598:	809a      	strh	r2, [r3, #4]
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    359a:	68fb      	ldr	r3, [r7, #12]
    359c:	889b      	ldrh	r3, [r3, #4]
    359e:	4618      	mov	r0, r3
    35a0:	f026 fa50 	bl	29a44 <malloc>
    35a4:	4603      	mov	r3, r0
    35a6:	461a      	mov	r2, r3
    35a8:	68fb      	ldr	r3, [r7, #12]
    35aa:	601a      	str	r2, [r3, #0]
    35ac:	e013      	b.n	35d6 <bb_set+0x76>
        }
        else
        {
            arr->capacity += count + VECTOR_CAPACITY;
    35ae:	68fb      	ldr	r3, [r7, #12]
    35b0:	889a      	ldrh	r2, [r3, #4]
    35b2:	88fb      	ldrh	r3, [r7, #6]
    35b4:	4413      	add	r3, r2
    35b6:	b29b      	uxth	r3, r3
    35b8:	3332      	adds	r3, #50	; 0x32
    35ba:	b29a      	uxth	r2, r3
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	809a      	strh	r2, [r3, #4]
            arr->data = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    35c0:	68fb      	ldr	r3, [r7, #12]
    35c2:	681a      	ldr	r2, [r3, #0]
    35c4:	68fb      	ldr	r3, [r7, #12]
    35c6:	889b      	ldrh	r3, [r3, #4]
    35c8:	4619      	mov	r1, r3
    35ca:	4610      	mov	r0, r2
    35cc:	f026 fdf0 	bl	2a1b0 <realloc>
    35d0:	4602      	mov	r2, r0
    35d2:	68fb      	ldr	r3, [r7, #12]
    35d4:	601a      	str	r2, [r3, #0]
        }
    }
    if (bb_getCapacity(arr) < arr->size + count)
    35d6:	68f8      	ldr	r0, [r7, #12]
    35d8:	f7ff fb68 	bl	2cac <bb_getCapacity>
    35dc:	4603      	mov	r3, r0
    35de:	461a      	mov	r2, r3
    35e0:	68fb      	ldr	r3, [r7, #12]
    35e2:	88db      	ldrh	r3, [r3, #6]
    35e4:	4619      	mov	r1, r3
    35e6:	88fb      	ldrh	r3, [r7, #6]
    35e8:	440b      	add	r3, r1
    35ea:	429a      	cmp	r2, r3
    35ec:	da02      	bge.n	35f4 <bb_set+0x94>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    35ee:	f44f 7382 	mov.w	r3, #260	; 0x104
    35f2:	e011      	b.n	3618 <bb_set+0xb8>
    }
    memcpy(arr->data + arr->size, pSource, count);
    35f4:	68fb      	ldr	r3, [r7, #12]
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	68fa      	ldr	r2, [r7, #12]
    35fa:	88d2      	ldrh	r2, [r2, #6]
    35fc:	4413      	add	r3, r2
    35fe:	88fa      	ldrh	r2, [r7, #6]
    3600:	68b9      	ldr	r1, [r7, #8]
    3602:	4618      	mov	r0, r3
    3604:	f026 fa3d 	bl	29a82 <memcpy>
    arr->size += count;
    3608:	68fb      	ldr	r3, [r7, #12]
    360a:	88da      	ldrh	r2, [r3, #6]
    360c:	88fb      	ldrh	r3, [r7, #6]
    360e:	4413      	add	r3, r2
    3610:	b29a      	uxth	r2, r3
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	80da      	strh	r2, [r3, #6]
    return 0;
    3616:	2300      	movs	r3, #0
}
    3618:	4618      	mov	r0, r3
    361a:	3710      	adds	r7, #16
    361c:	46bd      	mov	sp, r7
    361e:	bd80      	pop	{r7, pc}

00003620 <bb_set2>:
    gxByteBuffer* arr,
    gxByteBuffer* data,
    unsigned short index,
    unsigned short count)
#endif
{
    3620:	b580      	push	{r7, lr}
    3622:	b086      	sub	sp, #24
    3624:	af00      	add	r7, sp, #0
    3626:	60f8      	str	r0, [r7, #12]
    3628:	60b9      	str	r1, [r7, #8]
    362a:	4611      	mov	r1, r2
    362c:	461a      	mov	r2, r3
    362e:	460b      	mov	r3, r1
    3630:	80fb      	strh	r3, [r7, #6]
    3632:	4613      	mov	r3, r2
    3634:	80bb      	strh	r3, [r7, #4]
    if (data != NULL && count != 0)
    3636:	68bb      	ldr	r3, [r7, #8]
    3638:	2b00      	cmp	r3, #0
    363a:	d022      	beq.n	3682 <bb_set2+0x62>
    363c:	88bb      	ldrh	r3, [r7, #4]
    363e:	2b00      	cmp	r3, #0
    3640:	d01f      	beq.n	3682 <bb_set2+0x62>
    {
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
        if (count == (unsigned long)-1)
#else
        if (count == (unsigned short)-1)
    3642:	88bb      	ldrh	r3, [r7, #4]
    3644:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3648:	4293      	cmp	r3, r2
    364a:	d104      	bne.n	3656 <bb_set2+0x36>
#endif
        {
            count = data->size - index;
    364c:	68bb      	ldr	r3, [r7, #8]
    364e:	88da      	ldrh	r2, [r3, #6]
    3650:	88fb      	ldrh	r3, [r7, #6]
    3652:	1ad3      	subs	r3, r2, r3
    3654:	80bb      	strh	r3, [r7, #4]
        }
        int ret = bb_set(arr, data->data + index, count);
    3656:	68bb      	ldr	r3, [r7, #8]
    3658:	681a      	ldr	r2, [r3, #0]
    365a:	88fb      	ldrh	r3, [r7, #6]
    365c:	4413      	add	r3, r2
    365e:	88ba      	ldrh	r2, [r7, #4]
    3660:	4619      	mov	r1, r3
    3662:	68f8      	ldr	r0, [r7, #12]
    3664:	f7ff ff7c 	bl	3560 <bb_set>
    3668:	6178      	str	r0, [r7, #20]
        if (ret == 0)
    366a:	697b      	ldr	r3, [r7, #20]
    366c:	2b00      	cmp	r3, #0
    366e:	d106      	bne.n	367e <bb_set2+0x5e>
        {
            data->position += count;
    3670:	68bb      	ldr	r3, [r7, #8]
    3672:	891a      	ldrh	r2, [r3, #8]
    3674:	88bb      	ldrh	r3, [r7, #4]
    3676:	4413      	add	r3, r2
    3678:	b29a      	uxth	r2, r3
    367a:	68bb      	ldr	r3, [r7, #8]
    367c:	811a      	strh	r2, [r3, #8]
        }
        return ret;
    367e:	697b      	ldr	r3, [r7, #20]
    3680:	e000      	b.n	3684 <bb_set2+0x64>
    }
    return 0;
    3682:	2300      	movs	r3, #0
}
    3684:	4618      	mov	r0, r3
    3686:	3718      	adds	r7, #24
    3688:	46bd      	mov	sp, r7
    368a:	bd80      	pop	{r7, pc}

0000368c <bb_addString>:

int bb_addString(
    gxByteBuffer* arr,
    const char* value)
{
    368c:	b580      	push	{r7, lr}
    368e:	b084      	sub	sp, #16
    3690:	af00      	add	r7, sp, #0
    3692:	6078      	str	r0, [r7, #4]
    3694:	6039      	str	r1, [r7, #0]
    if (value != NULL)
    3696:	683b      	ldr	r3, [r7, #0]
    3698:	2b00      	cmp	r3, #0
    369a:	d024      	beq.n	36e6 <bb_addString+0x5a>
    {
        int len = (int)strlen(value);
    369c:	6838      	ldr	r0, [r7, #0]
    369e:	f7fc fd3f 	bl	120 <strlen>
    36a2:	4603      	mov	r3, r0
    36a4:	60fb      	str	r3, [r7, #12]
        if (len > 0)
    36a6:	68fb      	ldr	r3, [r7, #12]
    36a8:	2b00      	cmp	r3, #0
    36aa:	dd1c      	ble.n	36e6 <bb_addString+0x5a>
        {
            int ret = bb_set(arr, (const unsigned char*)value, (unsigned short)(len + 1));
    36ac:	68fb      	ldr	r3, [r7, #12]
    36ae:	b29b      	uxth	r3, r3
    36b0:	3301      	adds	r3, #1
    36b2:	b29b      	uxth	r3, r3
    36b4:	461a      	mov	r2, r3
    36b6:	6839      	ldr	r1, [r7, #0]
    36b8:	6878      	ldr	r0, [r7, #4]
    36ba:	f7ff ff51 	bl	3560 <bb_set>
    36be:	60b8      	str	r0, [r7, #8]
            if (ret == 0)
    36c0:	68bb      	ldr	r3, [r7, #8]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d10d      	bne.n	36e2 <bb_addString+0x56>
            {
                //Add end of string, but that is not added to the length.
                arr->data[arr->size - 1] = '\0';
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	681a      	ldr	r2, [r3, #0]
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	88db      	ldrh	r3, [r3, #6]
    36ce:	3b01      	subs	r3, #1
    36d0:	4413      	add	r3, r2
    36d2:	2200      	movs	r2, #0
    36d4:	701a      	strb	r2, [r3, #0]
                --arr->size;
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	88db      	ldrh	r3, [r3, #6]
    36da:	3b01      	subs	r3, #1
    36dc:	b29a      	uxth	r2, r3
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	80da      	strh	r2, [r3, #6]
            }
            return ret;
    36e2:	68bb      	ldr	r3, [r7, #8]
    36e4:	e000      	b.n	36e8 <bb_addString+0x5c>
        }
    }
    return 0;
    36e6:	2300      	movs	r3, #0
}
    36e8:	4618      	mov	r0, r3
    36ea:	3710      	adds	r7, #16
    36ec:	46bd      	mov	sp, r7
    36ee:	bd80      	pop	{r7, pc}

000036f0 <bb_attach>:
    gxByteBuffer *arr,
    unsigned char * value,
    unsigned short count,
    unsigned short capacity)
#endif
{
    36f0:	b480      	push	{r7}
    36f2:	b085      	sub	sp, #20
    36f4:	af00      	add	r7, sp, #0
    36f6:	60f8      	str	r0, [r7, #12]
    36f8:	60b9      	str	r1, [r7, #8]
    36fa:	4611      	mov	r1, r2
    36fc:	461a      	mov	r2, r3
    36fe:	460b      	mov	r3, r1
    3700:	80fb      	strh	r3, [r7, #6]
    3702:	4613      	mov	r3, r2
    3704:	80bb      	strh	r3, [r7, #4]
    arr->data = value;
    3706:	68fb      	ldr	r3, [r7, #12]
    3708:	68ba      	ldr	r2, [r7, #8]
    370a:	601a      	str	r2, [r3, #0]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    arr->capacity = (0x80000000 | capacity);
#else
    arr->capacity = (unsigned short)(0x8000 | capacity);
    370c:	88bb      	ldrh	r3, [r7, #4]
    370e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3716:	b29a      	uxth	r2, r3
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	809a      	strh	r2, [r3, #4]
#endif
    arr->size = count;
    371c:	68fb      	ldr	r3, [r7, #12]
    371e:	88fa      	ldrh	r2, [r7, #6]
    3720:	80da      	strh	r2, [r3, #6]
    arr->position = 0;
    3722:	68fb      	ldr	r3, [r7, #12]
    3724:	2200      	movs	r2, #0
    3726:	811a      	strh	r2, [r3, #8]
}
    3728:	bf00      	nop
    372a:	3714      	adds	r7, #20
    372c:	46bd      	mov	sp, r7
    372e:	bc80      	pop	{r7}
    3730:	4770      	bx	lr
    3732:	bf00      	nop

00003734 <bb_attachString>:

void bb_attachString(
    gxByteBuffer* arr,
    char* value)
{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
    373c:	6039      	str	r1, [r7, #0]
    int len = (int)strlen(value);
    373e:	6838      	ldr	r0, [r7, #0]
    3740:	f7fc fcee 	bl	120 <strlen>
    3744:	4603      	mov	r3, r0
    3746:	60fb      	str	r3, [r7, #12]
    bb_set(arr, (const unsigned char*)value, (unsigned short)len);
    3748:	68fb      	ldr	r3, [r7, #12]
    374a:	b29b      	uxth	r3, r3
    374c:	461a      	mov	r2, r3
    374e:	6839      	ldr	r1, [r7, #0]
    3750:	6878      	ldr	r0, [r7, #4]
    3752:	f7ff ff05 	bl	3560 <bb_set>
    gxfree(value);
    3756:	6838      	ldr	r0, [r7, #0]
    3758:	f026 f97c 	bl	29a54 <free>
}
    375c:	bf00      	nop
    375e:	3710      	adds	r7, #16
    3760:	46bd      	mov	sp, r7
    3762:	bd80      	pop	{r7, pc}

00003764 <bb_clear>:

int bb_clear(
    gxByteBuffer* arr)
{
    3764:	b580      	push	{r7, lr}
    3766:	b082      	sub	sp, #8
    3768:	af00      	add	r7, sp, #0
    376a:	6078      	str	r0, [r7, #4]
    //If byte buffer is attached.
    if (!bb_isAttached(arr))
    376c:	6878      	ldr	r0, [r7, #4]
    376e:	f7ff fa8d 	bl	2c8c <bb_isAttached>
    3772:	4603      	mov	r3, r0
    3774:	2b00      	cmp	r3, #0
    3776:	d10e      	bne.n	3796 <bb_clear+0x32>
    {
        if (arr->data != NULL)
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	681b      	ldr	r3, [r3, #0]
    377c:	2b00      	cmp	r3, #0
    377e:	d007      	beq.n	3790 <bb_clear+0x2c>
        {
            gxfree(arr->data);
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	681b      	ldr	r3, [r3, #0]
    3784:	4618      	mov	r0, r3
    3786:	f026 f965 	bl	29a54 <free>
            arr->data = NULL;
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	2200      	movs	r2, #0
    378e:	601a      	str	r2, [r3, #0]
        }
        arr->capacity = 0;
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	2200      	movs	r2, #0
    3794:	809a      	strh	r2, [r3, #4]
    }
    arr->size = 0;
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	2200      	movs	r2, #0
    379a:	80da      	strh	r2, [r3, #6]
    arr->position = 0;
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	2200      	movs	r2, #0
    37a0:	811a      	strh	r2, [r3, #8]
    return 0;
    37a2:	2300      	movs	r3, #0
}
    37a4:	4618      	mov	r0, r3
    37a6:	3708      	adds	r7, #8
    37a8:	46bd      	mov	sp, r7
    37aa:	bd80      	pop	{r7, pc}

000037ac <bb_getUInt8>:

int bb_getUInt8(
    gxByteBuffer* arr,
    unsigned char* value)
{
    37ac:	b480      	push	{r7}
    37ae:	b083      	sub	sp, #12
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
    37b4:	6039      	str	r1, [r7, #0]
    if (arr->position >= arr->size)
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	891a      	ldrh	r2, [r3, #8]
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	88db      	ldrh	r3, [r3, #6]
    37be:	429a      	cmp	r2, r3
    37c0:	d302      	bcc.n	37c8 <bb_getUInt8+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    37c2:	f44f 7382 	mov.w	r3, #260	; 0x104
    37c6:	e00e      	b.n	37e6 <bb_getUInt8+0x3a>
    }
    *value = ((unsigned char*)arr->data)[arr->position];
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	681b      	ldr	r3, [r3, #0]
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	8912      	ldrh	r2, [r2, #8]
    37d0:	4413      	add	r3, r2
    37d2:	781a      	ldrb	r2, [r3, #0]
    37d4:	683b      	ldr	r3, [r7, #0]
    37d6:	701a      	strb	r2, [r3, #0]
    ++arr->position;
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	891b      	ldrh	r3, [r3, #8]
    37dc:	3301      	adds	r3, #1
    37de:	b29a      	uxth	r2, r3
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	811a      	strh	r2, [r3, #8]
    return 0;
    37e4:	2300      	movs	r3, #0
}
    37e6:	4618      	mov	r0, r3
    37e8:	370c      	adds	r7, #12
    37ea:	46bd      	mov	sp, r7
    37ec:	bc80      	pop	{r7}
    37ee:	4770      	bx	lr

000037f0 <bb_getInt8>:

int bb_getInt8(
    gxByteBuffer* arr,
    signed char* value)
{
    37f0:	b480      	push	{r7}
    37f2:	b083      	sub	sp, #12
    37f4:	af00      	add	r7, sp, #0
    37f6:	6078      	str	r0, [r7, #4]
    37f8:	6039      	str	r1, [r7, #0]
    if (arr->position >= arr->size)
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	891a      	ldrh	r2, [r3, #8]
    37fe:	687b      	ldr	r3, [r7, #4]
    3800:	88db      	ldrh	r3, [r3, #6]
    3802:	429a      	cmp	r2, r3
    3804:	d302      	bcc.n	380c <bb_getInt8+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3806:	f44f 7382 	mov.w	r3, #260	; 0x104
    380a:	e00f      	b.n	382c <bb_getInt8+0x3c>
    }
    *value = (signed char)((unsigned char*)arr->data)[arr->position];
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	687a      	ldr	r2, [r7, #4]
    3812:	8912      	ldrh	r2, [r2, #8]
    3814:	4413      	add	r3, r2
    3816:	781b      	ldrb	r3, [r3, #0]
    3818:	b25a      	sxtb	r2, r3
    381a:	683b      	ldr	r3, [r7, #0]
    381c:	701a      	strb	r2, [r3, #0]
    ++arr->position;
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	891b      	ldrh	r3, [r3, #8]
    3822:	3301      	adds	r3, #1
    3824:	b29a      	uxth	r2, r3
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	811a      	strh	r2, [r3, #8]
    return 0;
    382a:	2300      	movs	r3, #0
}
    382c:	4618      	mov	r0, r3
    382e:	370c      	adds	r7, #12
    3830:	46bd      	mov	sp, r7
    3832:	bc80      	pop	{r7}
    3834:	4770      	bx	lr
    3836:	bf00      	nop

00003838 <bb_getUInt8ByIndex>:

int bb_getUInt8ByIndex(
    gxByteBuffer* arr,
    unsigned long index,
    unsigned char* value)
{
    3838:	b480      	push	{r7}
    383a:	b085      	sub	sp, #20
    383c:	af00      	add	r7, sp, #0
    383e:	60f8      	str	r0, [r7, #12]
    3840:	60b9      	str	r1, [r7, #8]
    3842:	607a      	str	r2, [r7, #4]
    if (index >= arr->size)
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	88db      	ldrh	r3, [r3, #6]
    3848:	461a      	mov	r2, r3
    384a:	68bb      	ldr	r3, [r7, #8]
    384c:	429a      	cmp	r2, r3
    384e:	d802      	bhi.n	3856 <bb_getUInt8ByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3850:	f44f 7382 	mov.w	r3, #260	; 0x104
    3854:	e007      	b.n	3866 <bb_getUInt8ByIndex+0x2e>
    }
    *value = ((unsigned char*)arr->data)[index];
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	681a      	ldr	r2, [r3, #0]
    385a:	68bb      	ldr	r3, [r7, #8]
    385c:	4413      	add	r3, r2
    385e:	781a      	ldrb	r2, [r3, #0]
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	701a      	strb	r2, [r3, #0]
    return 0;
    3864:	2300      	movs	r3, #0
}
    3866:	4618      	mov	r0, r3
    3868:	3714      	adds	r7, #20
    386a:	46bd      	mov	sp, r7
    386c:	bc80      	pop	{r7}
    386e:	4770      	bx	lr

00003870 <bb_getUInt16>:


int bb_getUInt16(
    gxByteBuffer* arr,
    unsigned short* value)
{
    3870:	b480      	push	{r7}
    3872:	b083      	sub	sp, #12
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	6039      	str	r1, [r7, #0]

    if (arr->position + 2 > arr->size)
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	891b      	ldrh	r3, [r3, #8]
    387e:	3302      	adds	r3, #2
    3880:	687a      	ldr	r2, [r7, #4]
    3882:	88d2      	ldrh	r2, [r2, #6]
    3884:	4293      	cmp	r3, r2
    3886:	dd02      	ble.n	388e <bb_getUInt16+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3888:	f44f 7382 	mov.w	r3, #260	; 0x104
    388c:	e01b      	b.n	38c6 <bb_getUInt16+0x56>
    }
    *value = ((unsigned char*)arr->data)[arr->position] << 8 |
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	687a      	ldr	r2, [r7, #4]
    3894:	8912      	ldrh	r2, [r2, #8]
    3896:	4413      	add	r3, r2
    3898:	781b      	ldrb	r3, [r3, #0]
    389a:	021b      	lsls	r3, r3, #8
    389c:	b21a      	sxth	r2, r3
        ((unsigned char*)arr->data)[arr->position + 1];
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	6819      	ldr	r1, [r3, #0]
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	891b      	ldrh	r3, [r3, #8]
    38a6:	3301      	adds	r3, #1
    38a8:	440b      	add	r3, r1
    38aa:	781b      	ldrb	r3, [r3, #0]

    if (arr->position + 2 > arr->size)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[arr->position] << 8 |
    38ac:	b21b      	sxth	r3, r3
    38ae:	4313      	orrs	r3, r2
    38b0:	b21b      	sxth	r3, r3
    38b2:	b29a      	uxth	r2, r3
    38b4:	683b      	ldr	r3, [r7, #0]
    38b6:	801a      	strh	r2, [r3, #0]
        ((unsigned char*)arr->data)[arr->position + 1];
    arr->position += 2;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	3302      	adds	r3, #2
    38be:	b29a      	uxth	r2, r3
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	811a      	strh	r2, [r3, #8]
    return 0;
    38c4:	2300      	movs	r3, #0
}
    38c6:	4618      	mov	r0, r3
    38c8:	370c      	adds	r7, #12
    38ca:	46bd      	mov	sp, r7
    38cc:	bc80      	pop	{r7}
    38ce:	4770      	bx	lr

000038d0 <bb_getUInt32>:

int bb_getUInt32(
    gxByteBuffer* arr,
    unsigned long* value)
{
    38d0:	b480      	push	{r7}
    38d2:	b083      	sub	sp, #12
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
    38d8:	6039      	str	r1, [r7, #0]

    if (arr->position + 4 > arr->size)
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	891b      	ldrh	r3, [r3, #8]
    38de:	3304      	adds	r3, #4
    38e0:	687a      	ldr	r2, [r7, #4]
    38e2:	88d2      	ldrh	r2, [r2, #6]
    38e4:	4293      	cmp	r3, r2
    38e6:	dd02      	ble.n	38ee <bb_getUInt32+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    38e8:	f44f 7382 	mov.w	r3, #260	; 0x104
    38ec:	e029      	b.n	3942 <bb_getUInt32+0x72>
    }
    *value = GETU32(arr->data + arr->position);
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	687a      	ldr	r2, [r7, #4]
    38f4:	8912      	ldrh	r2, [r2, #8]
    38f6:	4413      	add	r3, r2
    38f8:	781b      	ldrb	r3, [r3, #0]
    38fa:	061a      	lsls	r2, r3, #24
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	6819      	ldr	r1, [r3, #0]
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	891b      	ldrh	r3, [r3, #8]
    3904:	3301      	adds	r3, #1
    3906:	440b      	add	r3, r1
    3908:	781b      	ldrb	r3, [r3, #0]
    390a:	041b      	lsls	r3, r3, #16
    390c:	431a      	orrs	r2, r3
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	6819      	ldr	r1, [r3, #0]
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	891b      	ldrh	r3, [r3, #8]
    3916:	3302      	adds	r3, #2
    3918:	440b      	add	r3, r1
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	021b      	lsls	r3, r3, #8
    391e:	4313      	orrs	r3, r2
    3920:	687a      	ldr	r2, [r7, #4]
    3922:	6811      	ldr	r1, [r2, #0]
    3924:	687a      	ldr	r2, [r7, #4]
    3926:	8912      	ldrh	r2, [r2, #8]
    3928:	3203      	adds	r2, #3
    392a:	440a      	add	r2, r1
    392c:	7812      	ldrb	r2, [r2, #0]
    392e:	431a      	orrs	r2, r3
    3930:	683b      	ldr	r3, [r7, #0]
    3932:	601a      	str	r2, [r3, #0]
    arr->position += 4;
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	891b      	ldrh	r3, [r3, #8]
    3938:	3304      	adds	r3, #4
    393a:	b29a      	uxth	r2, r3
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	811a      	strh	r2, [r3, #8]
    return 0;
    3940:	2300      	movs	r3, #0
}
    3942:	4618      	mov	r0, r3
    3944:	370c      	adds	r7, #12
    3946:	46bd      	mov	sp, r7
    3948:	bc80      	pop	{r7}
    394a:	4770      	bx	lr

0000394c <bb_getInt16>:

int bb_getInt16(
    gxByteBuffer* arr,
    short* value)
{
    394c:	b480      	push	{r7}
    394e:	b083      	sub	sp, #12
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
    3954:	6039      	str	r1, [r7, #0]

    if (arr->position + 2 > arr->size)
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	891b      	ldrh	r3, [r3, #8]
    395a:	3302      	adds	r3, #2
    395c:	687a      	ldr	r2, [r7, #4]
    395e:	88d2      	ldrh	r2, [r2, #6]
    3960:	4293      	cmp	r3, r2
    3962:	dd02      	ble.n	396a <bb_getInt16+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3964:	f44f 7382 	mov.w	r3, #260	; 0x104
    3968:	e01a      	b.n	39a0 <bb_getInt16+0x54>
    }
    *value = ((unsigned char*)arr->data)[arr->position] << 8 |
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	687a      	ldr	r2, [r7, #4]
    3970:	8912      	ldrh	r2, [r2, #8]
    3972:	4413      	add	r3, r2
    3974:	781b      	ldrb	r3, [r3, #0]
    3976:	021b      	lsls	r3, r3, #8
    3978:	b21a      	sxth	r2, r3
        ((unsigned char*)arr->data)[arr->position + 1];
    397a:	687b      	ldr	r3, [r7, #4]
    397c:	6819      	ldr	r1, [r3, #0]
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	891b      	ldrh	r3, [r3, #8]
    3982:	3301      	adds	r3, #1
    3984:	440b      	add	r3, r1
    3986:	781b      	ldrb	r3, [r3, #0]

    if (arr->position + 2 > arr->size)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[arr->position] << 8 |
    3988:	b21b      	sxth	r3, r3
    398a:	4313      	orrs	r3, r2
    398c:	b21a      	sxth	r2, r3
    398e:	683b      	ldr	r3, [r7, #0]
    3990:	801a      	strh	r2, [r3, #0]
        ((unsigned char*)arr->data)[arr->position + 1];
    arr->position += 2;
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	891b      	ldrh	r3, [r3, #8]
    3996:	3302      	adds	r3, #2
    3998:	b29a      	uxth	r2, r3
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	811a      	strh	r2, [r3, #8]
    return 0;
    399e:	2300      	movs	r3, #0
}
    39a0:	4618      	mov	r0, r3
    39a2:	370c      	adds	r7, #12
    39a4:	46bd      	mov	sp, r7
    39a6:	bc80      	pop	{r7}
    39a8:	4770      	bx	lr
    39aa:	bf00      	nop

000039ac <bb_getInt32>:

int bb_getInt32(
    gxByteBuffer* arr,
    long* value)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
    39b4:	6039      	str	r1, [r7, #0]

    int ret = bb_getUInt32ByIndex(arr, arr->position, (unsigned long*)value);
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	891b      	ldrh	r3, [r3, #8]
    39ba:	683a      	ldr	r2, [r7, #0]
    39bc:	4619      	mov	r1, r3
    39be:	6878      	ldr	r0, [r7, #4]
    39c0:	f000 f80c 	bl	39dc <bb_getUInt32ByIndex>
    39c4:	60f8      	str	r0, [r7, #12]
    arr->position += 4;
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	891b      	ldrh	r3, [r3, #8]
    39ca:	3304      	adds	r3, #4
    39cc:	b29a      	uxth	r2, r3
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	811a      	strh	r2, [r3, #8]
    return ret;
    39d2:	68fb      	ldr	r3, [r7, #12]
}
    39d4:	4618      	mov	r0, r3
    39d6:	3710      	adds	r7, #16
    39d8:	46bd      	mov	sp, r7
    39da:	bd80      	pop	{r7, pc}

000039dc <bb_getUInt32ByIndex>:

int bb_getUInt32ByIndex(
    gxByteBuffer* arr,
    unsigned long index,
    unsigned long* value)
{
    39dc:	b480      	push	{r7}
    39de:	b085      	sub	sp, #20
    39e0:	af00      	add	r7, sp, #0
    39e2:	60f8      	str	r0, [r7, #12]
    39e4:	60b9      	str	r1, [r7, #8]
    39e6:	607a      	str	r2, [r7, #4]

    if (index + 4 > arr->size)
    39e8:	68bb      	ldr	r3, [r7, #8]
    39ea:	3304      	adds	r3, #4
    39ec:	68fa      	ldr	r2, [r7, #12]
    39ee:	88d2      	ldrh	r2, [r2, #6]
    39f0:	4293      	cmp	r3, r2
    39f2:	d902      	bls.n	39fa <bb_getUInt32ByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    39f4:	f44f 7382 	mov.w	r3, #260	; 0x104
    39f8:	e01f      	b.n	3a3a <bb_getUInt32ByIndex+0x5e>
    }
    *value = GETU32(arr->data + index);
    39fa:	68fb      	ldr	r3, [r7, #12]
    39fc:	681a      	ldr	r2, [r3, #0]
    39fe:	68bb      	ldr	r3, [r7, #8]
    3a00:	4413      	add	r3, r2
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	061a      	lsls	r2, r3, #24
    3a06:	68fb      	ldr	r3, [r7, #12]
    3a08:	6819      	ldr	r1, [r3, #0]
    3a0a:	68bb      	ldr	r3, [r7, #8]
    3a0c:	3301      	adds	r3, #1
    3a0e:	440b      	add	r3, r1
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	041b      	lsls	r3, r3, #16
    3a14:	431a      	orrs	r2, r3
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	6819      	ldr	r1, [r3, #0]
    3a1a:	68bb      	ldr	r3, [r7, #8]
    3a1c:	3302      	adds	r3, #2
    3a1e:	440b      	add	r3, r1
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	021b      	lsls	r3, r3, #8
    3a24:	4313      	orrs	r3, r2
    3a26:	68fa      	ldr	r2, [r7, #12]
    3a28:	6811      	ldr	r1, [r2, #0]
    3a2a:	68ba      	ldr	r2, [r7, #8]
    3a2c:	3203      	adds	r2, #3
    3a2e:	440a      	add	r2, r1
    3a30:	7812      	ldrb	r2, [r2, #0]
    3a32:	431a      	orrs	r2, r3
    3a34:	687b      	ldr	r3, [r7, #4]
    3a36:	601a      	str	r2, [r3, #0]
    return 0;
    3a38:	2300      	movs	r3, #0
}
    3a3a:	4618      	mov	r0, r3
    3a3c:	3714      	adds	r7, #20
    3a3e:	46bd      	mov	sp, r7
    3a40:	bc80      	pop	{r7}
    3a42:	4770      	bx	lr

00003a44 <bb_getInt64>:

int bb_getInt64(
    gxByteBuffer* arr,
    long long* value)
{
    3a44:	b580      	push	{r7, lr}
    3a46:	b084      	sub	sp, #16
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
    3a4c:	6039      	str	r1, [r7, #0]
    int ret = bb_getUInt64ByIndex(arr, arr->position, (unsigned long long*) value);
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	891b      	ldrh	r3, [r3, #8]
    3a52:	683a      	ldr	r2, [r7, #0]
    3a54:	4619      	mov	r1, r3
    3a56:	6878      	ldr	r0, [r7, #4]
    3a58:	f000 f82c 	bl	3ab4 <bb_getUInt64ByIndex>
    3a5c:	60f8      	str	r0, [r7, #12]
    if (ret == 0)
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	2b00      	cmp	r3, #0
    3a62:	d105      	bne.n	3a70 <bb_getInt64+0x2c>
    {
        arr->position += 8;
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	891b      	ldrh	r3, [r3, #8]
    3a68:	3308      	adds	r3, #8
    3a6a:	b29a      	uxth	r2, r3
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	811a      	strh	r2, [r3, #8]
    }
    return ret;
    3a70:	68fb      	ldr	r3, [r7, #12]
}
    3a72:	4618      	mov	r0, r3
    3a74:	3710      	adds	r7, #16
    3a76:	46bd      	mov	sp, r7
    3a78:	bd80      	pop	{r7, pc}
    3a7a:	bf00      	nop

00003a7c <bb_getUInt64>:

int bb_getUInt64(
    gxByteBuffer* arr,
    unsigned long long* value)
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b084      	sub	sp, #16
    3a80:	af00      	add	r7, sp, #0
    3a82:	6078      	str	r0, [r7, #4]
    3a84:	6039      	str	r1, [r7, #0]
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	891b      	ldrh	r3, [r3, #8]
    3a8a:	683a      	ldr	r2, [r7, #0]
    3a8c:	4619      	mov	r1, r3
    3a8e:	6878      	ldr	r0, [r7, #4]
    3a90:	f000 f810 	bl	3ab4 <bb_getUInt64ByIndex>
    3a94:	60f8      	str	r0, [r7, #12]
    if (ret == 0)
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d105      	bne.n	3aa8 <bb_getUInt64+0x2c>
    {
        arr->position += 8;
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	891b      	ldrh	r3, [r3, #8]
    3aa0:	3308      	adds	r3, #8
    3aa2:	b29a      	uxth	r2, r3
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	811a      	strh	r2, [r3, #8]
    }
    return ret;
    3aa8:	68fb      	ldr	r3, [r7, #12]
}
    3aaa:	4618      	mov	r0, r3
    3aac:	3710      	adds	r7, #16
    3aae:	46bd      	mov	sp, r7
    3ab0:	bd80      	pop	{r7, pc}
    3ab2:	bf00      	nop

00003ab4 <bb_getUInt64ByIndex>:

int bb_getUInt64ByIndex(
    gxByteBuffer* arr,
    unsigned long index,
    unsigned long long* value)
{
    3ab4:	b4f0      	push	{r4, r5, r6, r7}
    3ab6:	b084      	sub	sp, #16
    3ab8:	af00      	add	r7, sp, #0
    3aba:	60f8      	str	r0, [r7, #12]
    3abc:	60b9      	str	r1, [r7, #8]
    3abe:	607a      	str	r2, [r7, #4]
    if (index + 8 > arr->size)
    3ac0:	68ba      	ldr	r2, [r7, #8]
    3ac2:	3208      	adds	r2, #8
    3ac4:	68f9      	ldr	r1, [r7, #12]
    3ac6:	88c9      	ldrh	r1, [r1, #6]
    3ac8:	428a      	cmp	r2, r1
    3aca:	d902      	bls.n	3ad2 <bb_getUInt64ByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3acc:	f44f 7382 	mov.w	r3, #260	; 0x104
    3ad0:	e05f      	b.n	3b92 <bb_getUInt64ByIndex+0xde>
    }
    *value = GETU32(arr->data + index);
    3ad2:	68fa      	ldr	r2, [r7, #12]
    3ad4:	6811      	ldr	r1, [r2, #0]
    3ad6:	68ba      	ldr	r2, [r7, #8]
    3ad8:	440a      	add	r2, r1
    3ada:	7812      	ldrb	r2, [r2, #0]
    3adc:	0611      	lsls	r1, r2, #24
    3ade:	68fa      	ldr	r2, [r7, #12]
    3ae0:	6810      	ldr	r0, [r2, #0]
    3ae2:	68ba      	ldr	r2, [r7, #8]
    3ae4:	3201      	adds	r2, #1
    3ae6:	4402      	add	r2, r0
    3ae8:	7812      	ldrb	r2, [r2, #0]
    3aea:	0412      	lsls	r2, r2, #16
    3aec:	4311      	orrs	r1, r2
    3aee:	68fa      	ldr	r2, [r7, #12]
    3af0:	6810      	ldr	r0, [r2, #0]
    3af2:	68ba      	ldr	r2, [r7, #8]
    3af4:	3202      	adds	r2, #2
    3af6:	4402      	add	r2, r0
    3af8:	7812      	ldrb	r2, [r2, #0]
    3afa:	0212      	lsls	r2, r2, #8
    3afc:	430a      	orrs	r2, r1
    3afe:	68f9      	ldr	r1, [r7, #12]
    3b00:	6808      	ldr	r0, [r1, #0]
    3b02:	68b9      	ldr	r1, [r7, #8]
    3b04:	3103      	adds	r1, #3
    3b06:	4401      	add	r1, r0
    3b08:	7809      	ldrb	r1, [r1, #0]
    3b0a:	430a      	orrs	r2, r1
    3b0c:	4611      	mov	r1, r2
    3b0e:	f04f 0200 	mov.w	r2, #0
    3b12:	6878      	ldr	r0, [r7, #4]
    3b14:	e880 0006 	stmia.w	r0, {r1, r2}
    //Some 32 bit microcontrollers can't handle *value <<= 32;
    //For this reason value is sifted on two parts.
    *value <<= 16;
    3b18:	687a      	ldr	r2, [r7, #4]
    3b1a:	ca06      	ldmia	r2, {r1, r2}
    3b1c:	0416      	lsls	r6, r2, #16
    3b1e:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
    3b22:	040d      	lsls	r5, r1, #16
    3b24:	687a      	ldr	r2, [r7, #4]
    3b26:	e882 0060 	stmia.w	r2, {r5, r6}
    *value <<= 16;
    3b2a:	687a      	ldr	r2, [r7, #4]
    3b2c:	ca06      	ldmia	r2, {r1, r2}
    3b2e:	0414      	lsls	r4, r2, #16
    3b30:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
    3b34:	040b      	lsls	r3, r1, #16
    3b36:	687a      	ldr	r2, [r7, #4]
    3b38:	e882 0018 	stmia.w	r2, {r3, r4}
    *value |= GETU32(arr->data + index + 4);
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	e893 0006 	ldmia.w	r3, {r1, r2}
    3b42:	68fb      	ldr	r3, [r7, #12]
    3b44:	6818      	ldr	r0, [r3, #0]
    3b46:	68bb      	ldr	r3, [r7, #8]
    3b48:	3304      	adds	r3, #4
    3b4a:	4403      	add	r3, r0
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	0618      	lsls	r0, r3, #24
    3b50:	68fb      	ldr	r3, [r7, #12]
    3b52:	681c      	ldr	r4, [r3, #0]
    3b54:	68bb      	ldr	r3, [r7, #8]
    3b56:	3305      	adds	r3, #5
    3b58:	4423      	add	r3, r4
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	041b      	lsls	r3, r3, #16
    3b5e:	4318      	orrs	r0, r3
    3b60:	68fb      	ldr	r3, [r7, #12]
    3b62:	681c      	ldr	r4, [r3, #0]
    3b64:	68bb      	ldr	r3, [r7, #8]
    3b66:	3306      	adds	r3, #6
    3b68:	4423      	add	r3, r4
    3b6a:	781b      	ldrb	r3, [r3, #0]
    3b6c:	021b      	lsls	r3, r3, #8
    3b6e:	4303      	orrs	r3, r0
    3b70:	68f8      	ldr	r0, [r7, #12]
    3b72:	6804      	ldr	r4, [r0, #0]
    3b74:	68b8      	ldr	r0, [r7, #8]
    3b76:	3007      	adds	r0, #7
    3b78:	4420      	add	r0, r4
    3b7a:	7800      	ldrb	r0, [r0, #0]
    3b7c:	4303      	orrs	r3, r0
    3b7e:	f04f 0400 	mov.w	r4, #0
    3b82:	ea43 0301 	orr.w	r3, r3, r1
    3b86:	ea44 0402 	orr.w	r4, r4, r2
    3b8a:	687a      	ldr	r2, [r7, #4]
    3b8c:	e882 0018 	stmia.w	r2, {r3, r4}
    return 0;
    3b90:	2300      	movs	r3, #0
}
    3b92:	4618      	mov	r0, r3
    3b94:	3710      	adds	r7, #16
    3b96:	46bd      	mov	sp, r7
    3b98:	bcf0      	pop	{r4, r5, r6, r7}
    3b9a:	4770      	bx	lr

00003b9c <bb_getFloat>:

#ifndef GX_DLMS_MICROCONTROLLER
int bb_getFloat(
    gxByteBuffer* arr,
    float* value)
{
    3b9c:	b480      	push	{r7}
    3b9e:	b085      	sub	sp, #20
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
    3ba4:	6039      	str	r1, [r7, #0]
    {
        float value;
        char b[sizeof(float)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 4 > arr->size)
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	891b      	ldrh	r3, [r3, #8]
    3baa:	3304      	adds	r3, #4
    3bac:	687a      	ldr	r2, [r7, #4]
    3bae:	88d2      	ldrh	r2, [r2, #6]
    3bb0:	4293      	cmp	r3, r2
    3bb2:	dd02      	ble.n	3bba <bb_getFloat+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3bb4:	f44f 7382 	mov.w	r3, #260	; 0x104
    3bb8:	e028      	b.n	3c0c <bb_getFloat+0x70>
    }
    tmp.b[3] = arr->data[arr->position];
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	687a      	ldr	r2, [r7, #4]
    3bc0:	8912      	ldrh	r2, [r2, #8]
    3bc2:	4413      	add	r3, r2
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	73fb      	strb	r3, [r7, #15]
    tmp.b[2] = arr->data[arr->position + 1];
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	681a      	ldr	r2, [r3, #0]
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	891b      	ldrh	r3, [r3, #8]
    3bd0:	3301      	adds	r3, #1
    3bd2:	4413      	add	r3, r2
    3bd4:	781b      	ldrb	r3, [r3, #0]
    3bd6:	73bb      	strb	r3, [r7, #14]
    tmp.b[1] = arr->data[arr->position + 2];
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	681a      	ldr	r2, [r3, #0]
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	891b      	ldrh	r3, [r3, #8]
    3be0:	3302      	adds	r3, #2
    3be2:	4413      	add	r3, r2
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	737b      	strb	r3, [r7, #13]
    tmp.b[0] = arr->data[arr->position + 3];
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	681a      	ldr	r2, [r3, #0]
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	891b      	ldrh	r3, [r3, #8]
    3bf0:	3303      	adds	r3, #3
    3bf2:	4413      	add	r3, r2
    3bf4:	781b      	ldrb	r3, [r3, #0]
    3bf6:	733b      	strb	r3, [r7, #12]
    *value = tmp.value;
    3bf8:	68fa      	ldr	r2, [r7, #12]
    3bfa:	683b      	ldr	r3, [r7, #0]
    3bfc:	601a      	str	r2, [r3, #0]
    arr->position += 4;
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	891b      	ldrh	r3, [r3, #8]
    3c02:	3304      	adds	r3, #4
    3c04:	b29a      	uxth	r2, r3
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	811a      	strh	r2, [r3, #8]
    return 0;
    3c0a:	2300      	movs	r3, #0
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	3714      	adds	r7, #20
    3c10:	46bd      	mov	sp, r7
    3c12:	bc80      	pop	{r7}
    3c14:	4770      	bx	lr
    3c16:	bf00      	nop

00003c18 <bb_getDouble>:

int bb_getDouble(
    gxByteBuffer* arr,
    double* value)
{
    3c18:	b490      	push	{r4, r7}
    3c1a:	b084      	sub	sp, #16
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    3c20:	6039      	str	r1, [r7, #0]
    {
        double value;
        char b[sizeof(double)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 8 > arr->size)
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	891b      	ldrh	r3, [r3, #8]
    3c26:	3308      	adds	r3, #8
    3c28:	687a      	ldr	r2, [r7, #4]
    3c2a:	88d2      	ldrh	r2, [r2, #6]
    3c2c:	4293      	cmp	r3, r2
    3c2e:	dd02      	ble.n	3c36 <bb_getDouble+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3c30:	f44f 7382 	mov.w	r3, #260	; 0x104
    3c34:	e04a      	b.n	3ccc <bb_getDouble+0xb4>
    }
    tmp.b[7] = arr->data[arr->position];
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	681b      	ldr	r3, [r3, #0]
    3c3a:	687a      	ldr	r2, [r7, #4]
    3c3c:	8912      	ldrh	r2, [r2, #8]
    3c3e:	4413      	add	r3, r2
    3c40:	781b      	ldrb	r3, [r3, #0]
    3c42:	73fb      	strb	r3, [r7, #15]
    tmp.b[6] = arr->data[arr->position + 1];
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	681a      	ldr	r2, [r3, #0]
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	891b      	ldrh	r3, [r3, #8]
    3c4c:	3301      	adds	r3, #1
    3c4e:	4413      	add	r3, r2
    3c50:	781b      	ldrb	r3, [r3, #0]
    3c52:	73bb      	strb	r3, [r7, #14]
    tmp.b[5] = arr->data[arr->position + 2];
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	681a      	ldr	r2, [r3, #0]
    3c58:	687b      	ldr	r3, [r7, #4]
    3c5a:	891b      	ldrh	r3, [r3, #8]
    3c5c:	3302      	adds	r3, #2
    3c5e:	4413      	add	r3, r2
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	737b      	strb	r3, [r7, #13]
    tmp.b[4] = arr->data[arr->position + 3];
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	681a      	ldr	r2, [r3, #0]
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	891b      	ldrh	r3, [r3, #8]
    3c6c:	3303      	adds	r3, #3
    3c6e:	4413      	add	r3, r2
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	733b      	strb	r3, [r7, #12]
    tmp.b[3] = arr->data[arr->position + 4];
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	681a      	ldr	r2, [r3, #0]
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	891b      	ldrh	r3, [r3, #8]
    3c7c:	3304      	adds	r3, #4
    3c7e:	4413      	add	r3, r2
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	72fb      	strb	r3, [r7, #11]
    tmp.b[2] = arr->data[arr->position + 5];
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	681a      	ldr	r2, [r3, #0]
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	891b      	ldrh	r3, [r3, #8]
    3c8c:	3305      	adds	r3, #5
    3c8e:	4413      	add	r3, r2
    3c90:	781b      	ldrb	r3, [r3, #0]
    3c92:	72bb      	strb	r3, [r7, #10]
    tmp.b[1] = arr->data[arr->position + 6];
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	681a      	ldr	r2, [r3, #0]
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	891b      	ldrh	r3, [r3, #8]
    3c9c:	3306      	adds	r3, #6
    3c9e:	4413      	add	r3, r2
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	727b      	strb	r3, [r7, #9]
    tmp.b[0] = arr->data[arr->position + 7];
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	681a      	ldr	r2, [r3, #0]
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	891b      	ldrh	r3, [r3, #8]
    3cac:	3307      	adds	r3, #7
    3cae:	4413      	add	r3, r2
    3cb0:	781b      	ldrb	r3, [r3, #0]
    3cb2:	723b      	strb	r3, [r7, #8]
    *value = tmp.value;
    3cb4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    3cb8:	683a      	ldr	r2, [r7, #0]
    3cba:	e882 0018 	stmia.w	r2, {r3, r4}
    arr->position += 8;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	891b      	ldrh	r3, [r3, #8]
    3cc2:	3308      	adds	r3, #8
    3cc4:	b29a      	uxth	r2, r3
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	811a      	strh	r2, [r3, #8]
    return 0;
    3cca:	2300      	movs	r3, #0
}
    3ccc:	4618      	mov	r0, r3
    3cce:	3710      	adds	r7, #16
    3cd0:	46bd      	mov	sp, r7
    3cd2:	bc90      	pop	{r4, r7}
    3cd4:	4770      	bx	lr
    3cd6:	bf00      	nop

00003cd8 <bb_getUInt16ByIndex>:

int bb_getUInt16ByIndex(
    gxByteBuffer* arr,
    unsigned long index,
    unsigned short* value)
{
    3cd8:	b480      	push	{r7}
    3cda:	b085      	sub	sp, #20
    3cdc:	af00      	add	r7, sp, #0
    3cde:	60f8      	str	r0, [r7, #12]
    3ce0:	60b9      	str	r1, [r7, #8]
    3ce2:	607a      	str	r2, [r7, #4]
    if (index + 2 > arr->size)
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	3302      	adds	r3, #2
    3ce8:	68fa      	ldr	r2, [r7, #12]
    3cea:	88d2      	ldrh	r2, [r2, #6]
    3cec:	4293      	cmp	r3, r2
    3cee:	d902      	bls.n	3cf6 <bb_getUInt16ByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    3cf0:	f44f 7382 	mov.w	r3, #260	; 0x104
    3cf4:	e013      	b.n	3d1e <bb_getUInt16ByIndex+0x46>
    }
    *value = ((unsigned char*)arr->data)[index] << 8 |
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	68bb      	ldr	r3, [r7, #8]
    3cfc:	4413      	add	r3, r2
    3cfe:	781b      	ldrb	r3, [r3, #0]
    3d00:	021b      	lsls	r3, r3, #8
    3d02:	b21a      	sxth	r2, r3
        ((unsigned char*)arr->data)[index + 1];
    3d04:	68fb      	ldr	r3, [r7, #12]
    3d06:	6819      	ldr	r1, [r3, #0]
    3d08:	68bb      	ldr	r3, [r7, #8]
    3d0a:	3301      	adds	r3, #1
    3d0c:	440b      	add	r3, r1
    3d0e:	781b      	ldrb	r3, [r3, #0]
{
    if (index + 2 > arr->size)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[index] << 8 |
    3d10:	b21b      	sxth	r3, r3
    3d12:	4313      	orrs	r3, r2
    3d14:	b21b      	sxth	r3, r3
    3d16:	b29a      	uxth	r2, r3
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	801a      	strh	r2, [r3, #0]
        ((unsigned char*)arr->data)[index + 1];
    return 0;
    3d1c:	2300      	movs	r3, #0
}
    3d1e:	4618      	mov	r0, r3
    3d20:	3714      	adds	r7, #20
    3d22:	46bd      	mov	sp, r7
    3d24:	bc80      	pop	{r7}
    3d26:	4770      	bx	lr

00003d28 <bb_addHexString>:

int bb_addHexString(
    gxByteBuffer* arr,
    const char* str)
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b086      	sub	sp, #24
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	6078      	str	r0, [r7, #4]
    3d30:	6039      	str	r1, [r7, #0]
    unsigned char count;
    int ret;
    unsigned char* buffer = NULL;
    3d32:	2300      	movs	r3, #0
    3d34:	60fb      	str	r3, [r7, #12]
    ret = hlp_hexToBytes(str, &buffer, &count);
    3d36:	f107 0213 	add.w	r2, r7, #19
    3d3a:	f107 030c 	add.w	r3, r7, #12
    3d3e:	4619      	mov	r1, r3
    3d40:	6838      	ldr	r0, [r7, #0]
    3d42:	f01d fe9f 	bl	21a84 <hlp_hexToBytes>
    3d46:	6178      	str	r0, [r7, #20]
    if (ret != 0)
    3d48:	697b      	ldr	r3, [r7, #20]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d001      	beq.n	3d52 <bb_addHexString+0x2a>
    {
        return ret;
    3d4e:	697b      	ldr	r3, [r7, #20]
    3d50:	e00e      	b.n	3d70 <bb_addHexString+0x48>
    }
    if (buffer != NULL)
    3d52:	68fb      	ldr	r3, [r7, #12]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d00a      	beq.n	3d6e <bb_addHexString+0x46>
    {
        bb_set(arr, buffer, count);
    3d58:	68fb      	ldr	r3, [r7, #12]
    3d5a:	7cfa      	ldrb	r2, [r7, #19]
    3d5c:	b292      	uxth	r2, r2
    3d5e:	4619      	mov	r1, r3
    3d60:	6878      	ldr	r0, [r7, #4]
    3d62:	f7ff fbfd 	bl	3560 <bb_set>
        gxfree(buffer);
    3d66:	68fb      	ldr	r3, [r7, #12]
    3d68:	4618      	mov	r0, r3
    3d6a:	f025 fe73 	bl	29a54 <free>
    }
    return 0;
    3d6e:	2300      	movs	r3, #0
}
    3d70:	4618      	mov	r0, r3
    3d72:	3718      	adds	r7, #24
    3d74:	46bd      	mov	sp, r7
    3d76:	bd80      	pop	{r7, pc}

00003d78 <bb_toHexString>:
    return buff;
}

char* bb_toHexString(
    gxByteBuffer* arr)
{
    3d78:	b580      	push	{r7, lr}
    3d7a:	b084      	sub	sp, #16
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
    char* buff = hlp_bytesToHex(arr->data, arr->size);
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	681a      	ldr	r2, [r3, #0]
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	88db      	ldrh	r3, [r3, #6]
    3d88:	4619      	mov	r1, r3
    3d8a:	4610      	mov	r0, r2
    3d8c:	f01d fdf0 	bl	21970 <hlp_bytesToHex>
    3d90:	60f8      	str	r0, [r7, #12]
    return buff;
    3d92:	68fb      	ldr	r3, [r7, #12]
}
    3d94:	4618      	mov	r0, r3
    3d96:	3710      	adds	r7, #16
    3d98:	46bd      	mov	sp, r7
    3d9a:	bd80      	pop	{r7, pc}

00003d9c <bb_addIntAsString>:

void bb_addIntAsString(
    gxByteBuffer* bb,
    int value)
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b088      	sub	sp, #32
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
    char str[20];
    hlp_intToString(str, 20, value, 1);
    3da6:	f107 000c 	add.w	r0, r7, #12
    3daa:	2301      	movs	r3, #1
    3dac:	683a      	ldr	r2, [r7, #0]
    3dae:	2114      	movs	r1, #20
    3db0:	f01d ff28 	bl	21c04 <hlp_intToString>
    bb_addString(bb, str);
    3db4:	f107 030c 	add.w	r3, r7, #12
    3db8:	4619      	mov	r1, r3
    3dba:	6878      	ldr	r0, [r7, #4]
    3dbc:	f7ff fc66 	bl	368c <bb_addString>
}
    3dc0:	bf00      	nop
    3dc2:	3720      	adds	r7, #32
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bd80      	pop	{r7, pc}

00003dc8 <bb_insert>:
int bb_insert(const unsigned char* src,
    unsigned short count,
    gxByteBuffer* target,
    unsigned short index)
#endif
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b086      	sub	sp, #24
    3dcc:	af00      	add	r7, sp, #0
    3dce:	60f8      	str	r0, [r7, #12]
    3dd0:	607a      	str	r2, [r7, #4]
    3dd2:	461a      	mov	r2, r3
    3dd4:	460b      	mov	r3, r1
    3dd6:	817b      	strh	r3, [r7, #10]
    3dd8:	4613      	mov	r3, r2
    3dda:	813b      	strh	r3, [r7, #8]
    int ret;
    if (target->size == 0)
    3ddc:	687b      	ldr	r3, [r7, #4]
    3dde:	88db      	ldrh	r3, [r3, #6]
    3de0:	2b00      	cmp	r3, #0
    3de2:	d107      	bne.n	3df4 <bb_insert+0x2c>
    {
        ret = bb_set(target, src, count);
    3de4:	897b      	ldrh	r3, [r7, #10]
    3de6:	461a      	mov	r2, r3
    3de8:	68f9      	ldr	r1, [r7, #12]
    3dea:	6878      	ldr	r0, [r7, #4]
    3dec:	f7ff fbb8 	bl	3560 <bb_set>
    3df0:	6178      	str	r0, [r7, #20]
    3df2:	e029      	b.n	3e48 <bb_insert+0x80>
    }
    else
    {
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	88da      	ldrh	r2, [r3, #6]
    3df8:	897b      	ldrh	r3, [r7, #10]
    3dfa:	4413      	add	r3, r2
    3dfc:	b29b      	uxth	r3, r3
    3dfe:	4619      	mov	r1, r3
    3e00:	6878      	ldr	r0, [r7, #4]
    3e02:	f7fe ff87 	bl	2d14 <bb_capacity>
    3e06:	6178      	str	r0, [r7, #20]
    3e08:	697b      	ldr	r3, [r7, #20]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d11c      	bne.n	3e48 <bb_insert+0x80>
            (ret = bb_move(target, index, index + count, target->size - index)) == 0)
    3e0e:	893a      	ldrh	r2, [r7, #8]
    3e10:	897b      	ldrh	r3, [r7, #10]
    3e12:	4413      	add	r3, r2
    3e14:	b298      	uxth	r0, r3
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	88da      	ldrh	r2, [r3, #6]
    3e1a:	893b      	ldrh	r3, [r7, #8]
    3e1c:	1ad3      	subs	r3, r2, r3
    3e1e:	b29b      	uxth	r3, r3
    {
        ret = bb_set(target, src, count);
    }
    else
    {
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    3e20:	8939      	ldrh	r1, [r7, #8]
    3e22:	4602      	mov	r2, r0
    3e24:	6878      	ldr	r0, [r7, #4]
    3e26:	f000 f815 	bl	3e54 <bb_move>
    3e2a:	6178      	str	r0, [r7, #20]
    3e2c:	697b      	ldr	r3, [r7, #20]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d10a      	bne.n	3e48 <bb_insert+0x80>
            (ret = bb_move(target, index, index + count, target->size - index)) == 0)
        {
            //Do not use memcpy here!
            memmove(target->data + index, src + index, count);
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	681a      	ldr	r2, [r3, #0]
    3e36:	893b      	ldrh	r3, [r7, #8]
    3e38:	18d0      	adds	r0, r2, r3
    3e3a:	893b      	ldrh	r3, [r7, #8]
    3e3c:	68fa      	ldr	r2, [r7, #12]
    3e3e:	4413      	add	r3, r2
    3e40:	897a      	ldrh	r2, [r7, #10]
    3e42:	4619      	mov	r1, r3
    3e44:	f025 fe28 	bl	29a98 <memmove>
        }
    }
    return ret;
    3e48:	697b      	ldr	r3, [r7, #20]
}
    3e4a:	4618      	mov	r0, r3
    3e4c:	3718      	adds	r7, #24
    3e4e:	46bd      	mov	sp, r7
    3e50:	bd80      	pop	{r7, pc}
    3e52:	bf00      	nop

00003e54 <bb_move>:
    gxByteBuffer* bb,
    unsigned short srcPos,
    unsigned short destPos,
    unsigned short count)
#endif
{
    3e54:	b580      	push	{r7, lr}
    3e56:	b086      	sub	sp, #24
    3e58:	af00      	add	r7, sp, #0
    3e5a:	60f8      	str	r0, [r7, #12]
    3e5c:	4608      	mov	r0, r1
    3e5e:	4611      	mov	r1, r2
    3e60:	461a      	mov	r2, r3
    3e62:	4603      	mov	r3, r0
    3e64:	817b      	strh	r3, [r7, #10]
    3e66:	460b      	mov	r3, r1
    3e68:	813b      	strh	r3, [r7, #8]
    3e6a:	4613      	mov	r3, r2
    3e6c:	80fb      	strh	r3, [r7, #6]
    //If items are removed.
    if (srcPos > destPos)
    3e6e:	897a      	ldrh	r2, [r7, #10]
    3e70:	893b      	ldrh	r3, [r7, #8]
    3e72:	429a      	cmp	r2, r3
    3e74:	d90a      	bls.n	3e8c <bb_move+0x38>
    {
        if (bb->size < destPos + count)
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	88db      	ldrh	r3, [r3, #6]
    3e7a:	4619      	mov	r1, r3
    3e7c:	893a      	ldrh	r2, [r7, #8]
    3e7e:	88fb      	ldrh	r3, [r7, #6]
    3e80:	4413      	add	r3, r2
    3e82:	4299      	cmp	r1, r3
    3e84:	da28      	bge.n	3ed8 <bb_move+0x84>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    3e86:	f44f 7381 	mov.w	r3, #258	; 0x102
    3e8a:	e053      	b.n	3f34 <bb_move+0xe0>
        }
    }
    else
    {
        //Append data.
        if (bb_getCapacity(bb) < count + destPos - srcPos)
    3e8c:	68f8      	ldr	r0, [r7, #12]
    3e8e:	f7fe ff0d 	bl	2cac <bb_getCapacity>
    3e92:	4603      	mov	r3, r0
    3e94:	4619      	mov	r1, r3
    3e96:	88fa      	ldrh	r2, [r7, #6]
    3e98:	893b      	ldrh	r3, [r7, #8]
    3e9a:	441a      	add	r2, r3
    3e9c:	897b      	ldrh	r3, [r7, #10]
    3e9e:	1ad3      	subs	r3, r2, r3
    3ea0:	4299      	cmp	r1, r3
    3ea2:	da19      	bge.n	3ed8 <bb_move+0x84>
        {
            int ret;
            if (bb_isAttached(bb))
    3ea4:	68f8      	ldr	r0, [r7, #12]
    3ea6:	f7fe fef1 	bl	2c8c <bb_isAttached>
    3eaa:	4603      	mov	r3, r0
    3eac:	2b00      	cmp	r3, #0
    3eae:	d002      	beq.n	3eb6 <bb_move+0x62>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    3eb0:	f44f 7381 	mov.w	r3, #258	; 0x102
    3eb4:	e03e      	b.n	3f34 <bb_move+0xe0>
            }
            if ((ret = bb_capacity(bb, count + destPos - srcPos)) != 0)
    3eb6:	88fa      	ldrh	r2, [r7, #6]
    3eb8:	893b      	ldrh	r3, [r7, #8]
    3eba:	4413      	add	r3, r2
    3ebc:	b29a      	uxth	r2, r3
    3ebe:	897b      	ldrh	r3, [r7, #10]
    3ec0:	1ad3      	subs	r3, r2, r3
    3ec2:	b29b      	uxth	r3, r3
    3ec4:	4619      	mov	r1, r3
    3ec6:	68f8      	ldr	r0, [r7, #12]
    3ec8:	f7fe ff24 	bl	2d14 <bb_capacity>
    3ecc:	6178      	str	r0, [r7, #20]
    3ece:	697b      	ldr	r3, [r7, #20]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d001      	beq.n	3ed8 <bb_move+0x84>
            {
                return ret;
    3ed4:	697b      	ldr	r3, [r7, #20]
    3ed6:	e02d      	b.n	3f34 <bb_move+0xe0>
            }
        }
    }
    if (count != 0)
    3ed8:	88fb      	ldrh	r3, [r7, #6]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d029      	beq.n	3f32 <bb_move+0xde>
    {
        //Do not use memcpy here!
        memmove(bb->data + destPos, bb->data + srcPos, count);
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	681a      	ldr	r2, [r3, #0]
    3ee2:	893b      	ldrh	r3, [r7, #8]
    3ee4:	18d0      	adds	r0, r2, r3
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	681a      	ldr	r2, [r3, #0]
    3eea:	897b      	ldrh	r3, [r7, #10]
    3eec:	4413      	add	r3, r2
    3eee:	88fa      	ldrh	r2, [r7, #6]
    3ef0:	4619      	mov	r1, r3
    3ef2:	f025 fdd1 	bl	29a98 <memmove>
        if (destPos < srcPos)
    3ef6:	893a      	ldrh	r2, [r7, #8]
    3ef8:	897b      	ldrh	r3, [r7, #10]
    3efa:	429a      	cmp	r2, r3
    3efc:	d206      	bcs.n	3f0c <bb_move+0xb8>
        {
            //If data is moved to the begin.
            bb->size = (destPos + count);
    3efe:	893a      	ldrh	r2, [r7, #8]
    3f00:	88fb      	ldrh	r3, [r7, #6]
    3f02:	4413      	add	r3, r2
    3f04:	b29a      	uxth	r2, r3
    3f06:	68fb      	ldr	r3, [r7, #12]
    3f08:	80da      	strh	r2, [r3, #6]
    3f0a:	e008      	b.n	3f1e <bb_move+0xca>
        }
        else
        {
            //If data is append.
            bb->size = (destPos - srcPos + count);
    3f0c:	893a      	ldrh	r2, [r7, #8]
    3f0e:	897b      	ldrh	r3, [r7, #10]
    3f10:	1ad3      	subs	r3, r2, r3
    3f12:	b29a      	uxth	r2, r3
    3f14:	88fb      	ldrh	r3, [r7, #6]
    3f16:	4413      	add	r3, r2
    3f18:	b29a      	uxth	r2, r3
    3f1a:	68fb      	ldr	r3, [r7, #12]
    3f1c:	80da      	strh	r2, [r3, #6]
        }
        if (bb->position > bb->size)
    3f1e:	68fb      	ldr	r3, [r7, #12]
    3f20:	891a      	ldrh	r2, [r3, #8]
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	88db      	ldrh	r3, [r3, #6]
    3f26:	429a      	cmp	r2, r3
    3f28:	d903      	bls.n	3f32 <bb_move+0xde>
        {
            bb->position = bb->size;
    3f2a:	68fb      	ldr	r3, [r7, #12]
    3f2c:	88da      	ldrh	r2, [r3, #6]
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	811a      	strh	r2, [r3, #8]
        }
    }
    return DLMS_ERROR_CODE_OK;
    3f32:	2300      	movs	r3, #0
}
    3f34:	4618      	mov	r0, r3
    3f36:	3718      	adds	r7, #24
    3f38:	46bd      	mov	sp, r7
    3f3a:	bd80      	pop	{r7, pc}

00003f3c <bb_trim>:

int bb_trim(
    gxByteBuffer* bb)
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b084      	sub	sp, #16
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
    int ret;
    if (bb->size == bb->position)
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	88da      	ldrh	r2, [r3, #6]
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	891b      	ldrh	r3, [r3, #8]
    3f4c:	429a      	cmp	r2, r3
    3f4e:	d103      	bne.n	3f58 <bb_trim+0x1c>
    {
        bb->size = 0;
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	2200      	movs	r2, #0
    3f54:	80da      	strh	r2, [r3, #6]
    3f56:	e011      	b.n	3f7c <bb_trim+0x40>
    }
    else
    {
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	8919      	ldrh	r1, [r3, #8]
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	88da      	ldrh	r2, [r3, #6]
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	891b      	ldrh	r3, [r3, #8]
    3f64:	1ad3      	subs	r3, r2, r3
    3f66:	b29b      	uxth	r3, r3
    3f68:	2200      	movs	r2, #0
    3f6a:	6878      	ldr	r0, [r7, #4]
    3f6c:	f7ff ff72 	bl	3e54 <bb_move>
    3f70:	60f8      	str	r0, [r7, #12]
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	2b00      	cmp	r3, #0
    3f76:	d001      	beq.n	3f7c <bb_trim+0x40>
        {
            return ret;
    3f78:	68fb      	ldr	r3, [r7, #12]
    3f7a:	e003      	b.n	3f84 <bb_trim+0x48>
        }
    }
    bb->position = 0;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	2200      	movs	r2, #0
    3f80:	811a      	strh	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
    3f82:	2300      	movs	r3, #0
}
    3f84:	4618      	mov	r0, r3
    3f86:	3710      	adds	r7, #16
    3f88:	46bd      	mov	sp, r7
    3f8a:	bd80      	pop	{r7, pc}

00003f8c <bb_compare>:
    gxByteBuffer* bb,
    unsigned char* buff,
    unsigned short length)
#endif

{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b086      	sub	sp, #24
    3f90:	af00      	add	r7, sp, #0
    3f92:	60f8      	str	r0, [r7, #12]
    3f94:	60b9      	str	r1, [r7, #8]
    3f96:	4613      	mov	r3, r2
    3f98:	80fb      	strh	r3, [r7, #6]
    unsigned char equal;
    if (bb->size - bb->position < length)
    3f9a:	68fb      	ldr	r3, [r7, #12]
    3f9c:	88db      	ldrh	r3, [r3, #6]
    3f9e:	461a      	mov	r2, r3
    3fa0:	68fb      	ldr	r3, [r7, #12]
    3fa2:	891b      	ldrh	r3, [r3, #8]
    3fa4:	1ad2      	subs	r2, r2, r3
    3fa6:	88fb      	ldrh	r3, [r7, #6]
    3fa8:	429a      	cmp	r2, r3
    3faa:	da01      	bge.n	3fb0 <bb_compare+0x24>
    {
        return 0;
    3fac:	2300      	movs	r3, #0
    3fae:	e01b      	b.n	3fe8 <bb_compare+0x5c>
    }
    equal = memcmp(bb->data + bb->position, buff, length) == 0;
    3fb0:	68fb      	ldr	r3, [r7, #12]
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	68fa      	ldr	r2, [r7, #12]
    3fb6:	8912      	ldrh	r2, [r2, #8]
    3fb8:	4413      	add	r3, r2
    3fba:	88fa      	ldrh	r2, [r7, #6]
    3fbc:	68b9      	ldr	r1, [r7, #8]
    3fbe:	4618      	mov	r0, r3
    3fc0:	f025 fd50 	bl	29a64 <memcmp>
    3fc4:	4603      	mov	r3, r0
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	bf0c      	ite	eq
    3fca:	2301      	moveq	r3, #1
    3fcc:	2300      	movne	r3, #0
    3fce:	b2db      	uxtb	r3, r3
    3fd0:	75fb      	strb	r3, [r7, #23]
    if (equal)
    3fd2:	7dfb      	ldrb	r3, [r7, #23]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d006      	beq.n	3fe6 <bb_compare+0x5a>
    {
        bb->position += length;
    3fd8:	68fb      	ldr	r3, [r7, #12]
    3fda:	891a      	ldrh	r2, [r3, #8]
    3fdc:	88fb      	ldrh	r3, [r7, #6]
    3fde:	4413      	add	r3, r2
    3fe0:	b29a      	uxth	r2, r3
    3fe2:	68fb      	ldr	r3, [r7, #12]
    3fe4:	811a      	strh	r2, [r3, #8]
    }
    return equal;
    3fe6:	7dfb      	ldrb	r3, [r7, #23]
}
    3fe8:	4618      	mov	r0, r3
    3fea:	3718      	adds	r7, #24
    3fec:	46bd      	mov	sp, r7
    3fee:	bd80      	pop	{r7, pc}

00003ff0 <bb_get>:
int bb_get(
    gxByteBuffer* bb,
    unsigned char* value,
    unsigned short count)
#endif
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b084      	sub	sp, #16
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	60f8      	str	r0, [r7, #12]
    3ff8:	60b9      	str	r1, [r7, #8]
    3ffa:	4613      	mov	r3, r2
    3ffc:	80fb      	strh	r3, [r7, #6]
    if (bb == NULL || value == NULL || bb->size - bb->position < count)
    3ffe:	68fb      	ldr	r3, [r7, #12]
    4000:	2b00      	cmp	r3, #0
    4002:	d00b      	beq.n	401c <bb_get+0x2c>
    4004:	68bb      	ldr	r3, [r7, #8]
    4006:	2b00      	cmp	r3, #0
    4008:	d008      	beq.n	401c <bb_get+0x2c>
    400a:	68fb      	ldr	r3, [r7, #12]
    400c:	88db      	ldrh	r3, [r3, #6]
    400e:	461a      	mov	r2, r3
    4010:	68fb      	ldr	r3, [r7, #12]
    4012:	891b      	ldrh	r3, [r3, #8]
    4014:	1ad2      	subs	r2, r2, r3
    4016:	88fb      	ldrh	r3, [r7, #6]
    4018:	429a      	cmp	r2, r3
    401a:	da02      	bge.n	4022 <bb_get+0x32>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    401c:	f44f 7382 	mov.w	r3, #260	; 0x104
    4020:	e011      	b.n	4046 <bb_get+0x56>
    }
    memcpy(value, bb->data + bb->position, count);
    4022:	68fb      	ldr	r3, [r7, #12]
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	68fa      	ldr	r2, [r7, #12]
    4028:	8912      	ldrh	r2, [r2, #8]
    402a:	4413      	add	r3, r2
    402c:	88fa      	ldrh	r2, [r7, #6]
    402e:	4619      	mov	r1, r3
    4030:	68b8      	ldr	r0, [r7, #8]
    4032:	f025 fd26 	bl	29a82 <memcpy>
    bb->position += count;
    4036:	68fb      	ldr	r3, [r7, #12]
    4038:	891a      	ldrh	r2, [r3, #8]
    403a:	88fb      	ldrh	r3, [r7, #6]
    403c:	4413      	add	r3, r2
    403e:	b29a      	uxth	r2, r3
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	811a      	strh	r2, [r3, #8]
    return 0;
    4044:	2300      	movs	r3, #0
}
    4046:	4618      	mov	r0, r3
    4048:	3710      	adds	r7, #16
    404a:	46bd      	mov	sp, r7
    404c:	bd80      	pop	{r7, pc}
    404e:	bf00      	nop

00004050 <cip_init>:
#include "../include/ciphering.h"
#include "../include/helpers.h"
#include "../include/gxaes.h"

void cip_init(ciphering* target)
{
    4050:	b580      	push	{r7, lr}
    4052:	b082      	sub	sp, #8
    4054:	af00      	add	r7, sp, #0
    4056:	6078      	str	r0, [r7, #4]
    static const unsigned char DEFAUlT_BLOCK_CIPHER_KEY[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    static const unsigned char DEFAULT_SYSTEM_TITLE[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48 };
    static const unsigned char DEFAUlT_AUTHENTICATION_KEY[] = { 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
                                                                0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    };
    target->invocationCounter = 0;
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	2200      	movs	r2, #0
    405c:	61da      	str	r2, [r3, #28]
    target->security = DLMS_SECURITY_NONE;
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	2200      	movs	r2, #0
    4062:	701a      	strb	r2, [r3, #0]
    target->encrypt = 0;
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	2200      	movs	r2, #0
    4068:	705a      	strb	r2, [r3, #1]
    bb_init(&target->blockCipherKey);
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	3304      	adds	r3, #4
    406e:	4618      	mov	r0, r3
    4070:	f7fe fe3a 	bl	2ce8 <bb_init>
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	3304      	adds	r3, #4
    4078:	2210      	movs	r2, #16
    407a:	4911      	ldr	r1, [pc, #68]	; (40c0 <cip_init+0x70>)
    407c:	4618      	mov	r0, r3
    407e:	f7ff fa6f 	bl	3560 <bb_set>
    bb_init(&target->systemTitle);
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	3310      	adds	r3, #16
    4086:	4618      	mov	r0, r3
    4088:	f7fe fe2e 	bl	2ce8 <bb_init>
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	3310      	adds	r3, #16
    4090:	2208      	movs	r2, #8
    4092:	490c      	ldr	r1, [pc, #48]	; (40c4 <cip_init+0x74>)
    4094:	4618      	mov	r0, r3
    4096:	f7ff fa63 	bl	3560 <bb_set>
    bb_init(&target->authenticationKey);
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	3320      	adds	r3, #32
    409e:	4618      	mov	r0, r3
    40a0:	f7fe fe22 	bl	2ce8 <bb_init>
    bb_set(&target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	3320      	adds	r3, #32
    40a8:	2210      	movs	r2, #16
    40aa:	4907      	ldr	r1, [pc, #28]	; (40c8 <cip_init+0x78>)
    40ac:	4618      	mov	r0, r3
    40ae:	f7ff fa57 	bl	3560 <bb_set>
    target->dedicatedKey = NULL;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	2200      	movs	r2, #0
    40b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
    40b8:	bf00      	nop
    40ba:	3708      	adds	r7, #8
    40bc:	46bd      	mov	sp, r7
    40be:	bd80      	pop	{r7, pc}
    40c0:	0002cab0 	.word	0x0002cab0
    40c4:	0002cac0 	.word	0x0002cac0
    40c8:	0002cac8 	.word	0x0002cac8

000040cc <cip_getAuthenticatedData>:
int cip_getAuthenticatedData(
    DLMS_SECURITY security,
    gxByteBuffer *authenticationKey,
    gxByteBuffer *plainText,
    gxByteBuffer *result)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	60b9      	str	r1, [r7, #8]
    40d4:	607a      	str	r2, [r7, #4]
    40d6:	603b      	str	r3, [r7, #0]
    40d8:	4603      	mov	r3, r0
    40da:	73fb      	strb	r3, [r7, #15]
    bb_clear(result);
    40dc:	6838      	ldr	r0, [r7, #0]
    40de:	f7ff fb41 	bl	3764 <bb_clear>
    if (security == DLMS_SECURITY_AUTHENTICATION)
    40e2:	7bfb      	ldrb	r3, [r7, #15]
    40e4:	2b10      	cmp	r3, #16
    40e6:	d11c      	bne.n	4122 <cip_getAuthenticatedData+0x56>
    {
        bb_setUInt8(result, security);
    40e8:	7bfb      	ldrb	r3, [r7, #15]
    40ea:	4619      	mov	r1, r3
    40ec:	6838      	ldr	r0, [r7, #0]
    40ee:	f7fe fe91 	bl	2e14 <bb_setUInt8>
        bb_set(result, authenticationKey->data, authenticationKey->size);
    40f2:	68bb      	ldr	r3, [r7, #8]
    40f4:	6819      	ldr	r1, [r3, #0]
    40f6:	68bb      	ldr	r3, [r7, #8]
    40f8:	88db      	ldrh	r3, [r3, #6]
    40fa:	461a      	mov	r2, r3
    40fc:	6838      	ldr	r0, [r7, #0]
    40fe:	f7ff fa2f 	bl	3560 <bb_set>
        bb_set(result, plainText->data + plainText->position,
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	687a      	ldr	r2, [r7, #4]
    4108:	8912      	ldrh	r2, [r2, #8]
    410a:	1899      	adds	r1, r3, r2
            plainText->size - plainText->position);
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	88da      	ldrh	r2, [r3, #6]
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	891b      	ldrh	r3, [r3, #8]
    bb_clear(result);
    if (security == DLMS_SECURITY_AUTHENTICATION)
    {
        bb_setUInt8(result, security);
        bb_set(result, authenticationKey->data, authenticationKey->size);
        bb_set(result, plainText->data + plainText->position,
    4114:	1ad3      	subs	r3, r2, r3
    4116:	b29b      	uxth	r3, r3
    4118:	461a      	mov	r2, r3
    411a:	6838      	ldr	r0, [r7, #0]
    411c:	f7ff fa20 	bl	3560 <bb_set>
    4120:	e01f      	b.n	4162 <cip_getAuthenticatedData+0x96>
            plainText->size - plainText->position);
    }
    else if (security == DLMS_SECURITY_ENCRYPTION)
    4122:	7bfb      	ldrb	r3, [r7, #15]
    4124:	2b20      	cmp	r3, #32
    4126:	d108      	bne.n	413a <cip_getAuthenticatedData+0x6e>
    {
        bb_set(result, authenticationKey->data, authenticationKey->size);
    4128:	68bb      	ldr	r3, [r7, #8]
    412a:	6819      	ldr	r1, [r3, #0]
    412c:	68bb      	ldr	r3, [r7, #8]
    412e:	88db      	ldrh	r3, [r3, #6]
    4130:	461a      	mov	r2, r3
    4132:	6838      	ldr	r0, [r7, #0]
    4134:	f7ff fa14 	bl	3560 <bb_set>
    4138:	e013      	b.n	4162 <cip_getAuthenticatedData+0x96>
    }
    else if (security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    413a:	7bfb      	ldrb	r3, [r7, #15]
    413c:	2b30      	cmp	r3, #48	; 0x30
    413e:	d10d      	bne.n	415c <cip_getAuthenticatedData+0x90>
    {
        bb_setUInt8(result, security);
    4140:	7bfb      	ldrb	r3, [r7, #15]
    4142:	4619      	mov	r1, r3
    4144:	6838      	ldr	r0, [r7, #0]
    4146:	f7fe fe65 	bl	2e14 <bb_setUInt8>
        bb_set(result, authenticationKey->data, authenticationKey->size);
    414a:	68bb      	ldr	r3, [r7, #8]
    414c:	6819      	ldr	r1, [r3, #0]
    414e:	68bb      	ldr	r3, [r7, #8]
    4150:	88db      	ldrh	r3, [r3, #6]
    4152:	461a      	mov	r2, r3
    4154:	6838      	ldr	r0, [r7, #0]
    4156:	f7ff fa03 	bl	3560 <bb_set>
    415a:	e002      	b.n	4162 <cip_getAuthenticatedData+0x96>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    415c:	f44f 7381 	mov.w	r3, #258	; 0x102
    4160:	e000      	b.n	4164 <cip_getAuthenticatedData+0x98>
    }
    return 0;
    4162:	2300      	movs	r3, #0
}
    4164:	4618      	mov	r0, r3
    4166:	3710      	adds	r7, #16
    4168:	46bd      	mov	sp, r7
    416a:	bd80      	pop	{r7, pc}

0000416c <cip_getNonse>:
* @param systemTitle
*            System title.
* @return
*/
static int cip_getNonse(unsigned long frameCounter, gxByteBuffer* systemTitle, gxByteBuffer* nonce)
{
    416c:	b580      	push	{r7, lr}
    416e:	b086      	sub	sp, #24
    4170:	af00      	add	r7, sp, #0
    4172:	60f8      	str	r0, [r7, #12]
    4174:	60b9      	str	r1, [r7, #8]
    4176:	607a      	str	r2, [r7, #4]
    int ret;
    if (systemTitle->size != 8)
    4178:	68bb      	ldr	r3, [r7, #8]
    417a:	88db      	ldrh	r3, [r3, #6]
    417c:	2b08      	cmp	r3, #8
    417e:	d002      	beq.n	4186 <cip_getNonse+0x1a>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4180:	f44f 7381 	mov.w	r3, #258	; 0x102
    4184:	e021      	b.n	41ca <cip_getNonse+0x5e>
    }
    nonce->size = 0;
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	2200      	movs	r2, #0
    418a:	80da      	strh	r2, [r3, #6]
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    418c:	210c      	movs	r1, #12
    418e:	6878      	ldr	r0, [r7, #4]
    4190:	f7fe fdc0 	bl	2d14 <bb_capacity>
    4194:	6178      	str	r0, [r7, #20]
    4196:	697b      	ldr	r3, [r7, #20]
    4198:	2b00      	cmp	r3, #0
    419a:	d113      	bne.n	41c4 <cip_getNonse+0x58>
        (ret = bb_set(nonce, systemTitle->data, systemTitle->size)) != 0 ||
    419c:	68bb      	ldr	r3, [r7, #8]
    419e:	6819      	ldr	r1, [r3, #0]
    41a0:	68bb      	ldr	r3, [r7, #8]
    41a2:	88db      	ldrh	r3, [r3, #6]
    if (systemTitle->size != 8)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    nonce->size = 0;
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    41a4:	461a      	mov	r2, r3
    41a6:	6878      	ldr	r0, [r7, #4]
    41a8:	f7ff f9da 	bl	3560 <bb_set>
    41ac:	6178      	str	r0, [r7, #20]
    41ae:	697b      	ldr	r3, [r7, #20]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d107      	bne.n	41c4 <cip_getNonse+0x58>
        (ret = bb_set(nonce, systemTitle->data, systemTitle->size)) != 0 ||
    41b4:	68f9      	ldr	r1, [r7, #12]
    41b6:	6878      	ldr	r0, [r7, #4]
    41b8:	f7fe ff20 	bl	2ffc <bb_setUInt32>
    41bc:	6178      	str	r0, [r7, #20]
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d001      	beq.n	41c8 <cip_getNonse+0x5c>
        (ret = bb_setUInt32(nonce, frameCounter)) != 0)
    {
        return ret;
    41c4:	697b      	ldr	r3, [r7, #20]
    41c6:	e000      	b.n	41ca <cip_getNonse+0x5e>
    }
    return 0;
    41c8:	2300      	movs	r3, #0
}
    41ca:	4618      	mov	r0, r3
    41cc:	3718      	adds	r7, #24
    41ce:	46bd      	mov	sp, r7
    41d0:	bd80      	pop	{r7, pc}
    41d2:	bf00      	nop

000041d4 <cip_int>:
#define TE444(i) ((Te0[(i) & 0xff] >> 8) & 0x000000ff)

int cip_int(unsigned long* rk,
    const unsigned char* cipherKey,
    unsigned short keyBits)
{
    41d4:	b480      	push	{r7}
    41d6:	b087      	sub	sp, #28
    41d8:	af00      	add	r7, sp, #0
    41da:	60f8      	str	r0, [r7, #12]
    41dc:	60b9      	str	r1, [r7, #8]
    41de:	4613      	mov	r3, r2
    41e0:	80fb      	strh	r3, [r7, #6]
    unsigned long i;
    unsigned long temp;

    rk[0] = GETU32(cipherKey);
    41e2:	68bb      	ldr	r3, [r7, #8]
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	061a      	lsls	r2, r3, #24
    41e8:	68bb      	ldr	r3, [r7, #8]
    41ea:	3301      	adds	r3, #1
    41ec:	781b      	ldrb	r3, [r3, #0]
    41ee:	041b      	lsls	r3, r3, #16
    41f0:	431a      	orrs	r2, r3
    41f2:	68bb      	ldr	r3, [r7, #8]
    41f4:	3302      	adds	r3, #2
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	021b      	lsls	r3, r3, #8
    41fa:	4313      	orrs	r3, r2
    41fc:	68ba      	ldr	r2, [r7, #8]
    41fe:	3203      	adds	r2, #3
    4200:	7812      	ldrb	r2, [r2, #0]
    4202:	431a      	orrs	r2, r3
    4204:	68fb      	ldr	r3, [r7, #12]
    4206:	601a      	str	r2, [r3, #0]
    rk[1] = GETU32(cipherKey + 4);
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	3304      	adds	r3, #4
    420c:	68ba      	ldr	r2, [r7, #8]
    420e:	3204      	adds	r2, #4
    4210:	7812      	ldrb	r2, [r2, #0]
    4212:	0611      	lsls	r1, r2, #24
    4214:	68ba      	ldr	r2, [r7, #8]
    4216:	3205      	adds	r2, #5
    4218:	7812      	ldrb	r2, [r2, #0]
    421a:	0412      	lsls	r2, r2, #16
    421c:	4311      	orrs	r1, r2
    421e:	68ba      	ldr	r2, [r7, #8]
    4220:	3206      	adds	r2, #6
    4222:	7812      	ldrb	r2, [r2, #0]
    4224:	0212      	lsls	r2, r2, #8
    4226:	430a      	orrs	r2, r1
    4228:	68b9      	ldr	r1, [r7, #8]
    422a:	3107      	adds	r1, #7
    422c:	7809      	ldrb	r1, [r1, #0]
    422e:	430a      	orrs	r2, r1
    4230:	601a      	str	r2, [r3, #0]
    rk[2] = GETU32(cipherKey + 8);
    4232:	68fb      	ldr	r3, [r7, #12]
    4234:	3308      	adds	r3, #8
    4236:	68ba      	ldr	r2, [r7, #8]
    4238:	3208      	adds	r2, #8
    423a:	7812      	ldrb	r2, [r2, #0]
    423c:	0611      	lsls	r1, r2, #24
    423e:	68ba      	ldr	r2, [r7, #8]
    4240:	3209      	adds	r2, #9
    4242:	7812      	ldrb	r2, [r2, #0]
    4244:	0412      	lsls	r2, r2, #16
    4246:	4311      	orrs	r1, r2
    4248:	68ba      	ldr	r2, [r7, #8]
    424a:	320a      	adds	r2, #10
    424c:	7812      	ldrb	r2, [r2, #0]
    424e:	0212      	lsls	r2, r2, #8
    4250:	430a      	orrs	r2, r1
    4252:	68b9      	ldr	r1, [r7, #8]
    4254:	310b      	adds	r1, #11
    4256:	7809      	ldrb	r1, [r1, #0]
    4258:	430a      	orrs	r2, r1
    425a:	601a      	str	r2, [r3, #0]
    rk[3] = GETU32(cipherKey + 12);
    425c:	68fb      	ldr	r3, [r7, #12]
    425e:	330c      	adds	r3, #12
    4260:	68ba      	ldr	r2, [r7, #8]
    4262:	320c      	adds	r2, #12
    4264:	7812      	ldrb	r2, [r2, #0]
    4266:	0611      	lsls	r1, r2, #24
    4268:	68ba      	ldr	r2, [r7, #8]
    426a:	320d      	adds	r2, #13
    426c:	7812      	ldrb	r2, [r2, #0]
    426e:	0412      	lsls	r2, r2, #16
    4270:	4311      	orrs	r1, r2
    4272:	68ba      	ldr	r2, [r7, #8]
    4274:	320e      	adds	r2, #14
    4276:	7812      	ldrb	r2, [r2, #0]
    4278:	0212      	lsls	r2, r2, #8
    427a:	430a      	orrs	r2, r1
    427c:	68b9      	ldr	r1, [r7, #8]
    427e:	310f      	adds	r1, #15
    4280:	7809      	ldrb	r1, [r1, #0]
    4282:	430a      	orrs	r2, r1
    4284:	601a      	str	r2, [r3, #0]

    if (keyBits == 128)
    4286:	88fb      	ldrh	r3, [r7, #6]
    4288:	2b80      	cmp	r3, #128	; 0x80
    428a:	f040 8086 	bne.w	439a <cip_int+0x1c6>
    {
        for (i = 0; i < 10; i++)
    428e:	2300      	movs	r3, #0
    4290:	617b      	str	r3, [r7, #20]
    4292:	e07c      	b.n	438e <cip_int+0x1ba>
        {
            temp = rk[3];
    4294:	68fb      	ldr	r3, [r7, #12]
    4296:	68db      	ldr	r3, [r3, #12]
    4298:	613b      	str	r3, [r7, #16]
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    429a:	68fb      	ldr	r3, [r7, #12]
    429c:	3310      	adds	r3, #16
    429e:	68fa      	ldr	r2, [r7, #12]
    42a0:	6811      	ldr	r1, [r2, #0]
    42a2:	693a      	ldr	r2, [r7, #16]
    42a4:	0c12      	lsrs	r2, r2, #16
    42a6:	b2d2      	uxtb	r2, r2
    42a8:	48a5      	ldr	r0, [pc, #660]	; (4540 <cip_int+0x36c>)
    42aa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42ae:	0212      	lsls	r2, r2, #8
    42b0:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    42b4:	4051      	eors	r1, r2
    42b6:	693a      	ldr	r2, [r7, #16]
    42b8:	0a12      	lsrs	r2, r2, #8
    42ba:	b2d2      	uxtb	r2, r2
    42bc:	48a0      	ldr	r0, [pc, #640]	; (4540 <cip_int+0x36c>)
    42be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42c2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    42c6:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp);
    42c8:	693a      	ldr	r2, [r7, #16]
    42ca:	b2d2      	uxtb	r2, r2
    42cc:	489c      	ldr	r0, [pc, #624]	; (4540 <cip_int+0x36c>)
    42ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    if (keyBits == 128)
    {
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    42d6:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp);
    42d8:	693a      	ldr	r2, [r7, #16]
    42da:	0e12      	lsrs	r2, r2, #24
    42dc:	4898      	ldr	r0, [pc, #608]	; (4540 <cip_int+0x36c>)
    42de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42e2:	0a12      	lsrs	r2, r2, #8
    42e4:	b2d2      	uxtb	r2, r2
    42e6:	404a      	eors	r2, r1
    if (keyBits == 128)
    {
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    42e8:	601a      	str	r2, [r3, #0]
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	3310      	adds	r3, #16
    42ee:	68fa      	ldr	r2, [r7, #12]
    42f0:	6811      	ldr	r1, [r2, #0]
    42f2:	693a      	ldr	r2, [r7, #16]
    42f4:	0c12      	lsrs	r2, r2, #16
    42f6:	b2d2      	uxtb	r2, r2
    42f8:	4891      	ldr	r0, [pc, #580]	; (4540 <cip_int+0x36c>)
    42fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42fe:	0212      	lsls	r2, r2, #8
    4300:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    4304:	4051      	eors	r1, r2
    4306:	693a      	ldr	r2, [r7, #16]
    4308:	0a12      	lsrs	r2, r2, #8
    430a:	b2d2      	uxtb	r2, r2
    430c:	488c      	ldr	r0, [pc, #560]	; (4540 <cip_int+0x36c>)
    430e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4312:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    4316:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    4318:	693a      	ldr	r2, [r7, #16]
    431a:	b2d2      	uxtb	r2, r2
    431c:	4888      	ldr	r0, [pc, #544]	; (4540 <cip_int+0x36c>)
    431e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4322:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    4326:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    4328:	693a      	ldr	r2, [r7, #16]
    432a:	0e12      	lsrs	r2, r2, #24
    432c:	4884      	ldr	r0, [pc, #528]	; (4540 <cip_int+0x36c>)
    432e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4332:	0a12      	lsrs	r2, r2, #8
    4334:	b2d2      	uxtb	r2, r2
    4336:	4051      	eors	r1, r2
    4338:	4882      	ldr	r0, [pc, #520]	; (4544 <cip_int+0x370>)
    433a:	697a      	ldr	r2, [r7, #20]
    433c:	4402      	add	r2, r0
    433e:	7812      	ldrb	r2, [r2, #0]
    4340:	0612      	lsls	r2, r2, #24
    4342:	404a      	eors	r2, r1
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    4344:	601a      	str	r2, [r3, #0]
                TE443(temp) ^ TE414(temp) ^ RCON(i);
            rk[5] = rk[1] ^ rk[4];
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	3314      	adds	r3, #20
    434a:	68fa      	ldr	r2, [r7, #12]
    434c:	3204      	adds	r2, #4
    434e:	6811      	ldr	r1, [r2, #0]
    4350:	68fa      	ldr	r2, [r7, #12]
    4352:	3210      	adds	r2, #16
    4354:	6812      	ldr	r2, [r2, #0]
    4356:	404a      	eors	r2, r1
    4358:	601a      	str	r2, [r3, #0]
            rk[6] = rk[2] ^ rk[5];
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	3318      	adds	r3, #24
    435e:	68fa      	ldr	r2, [r7, #12]
    4360:	3208      	adds	r2, #8
    4362:	6811      	ldr	r1, [r2, #0]
    4364:	68fa      	ldr	r2, [r7, #12]
    4366:	3214      	adds	r2, #20
    4368:	6812      	ldr	r2, [r2, #0]
    436a:	404a      	eors	r2, r1
    436c:	601a      	str	r2, [r3, #0]
            rk[7] = rk[3] ^ rk[6];
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	331c      	adds	r3, #28
    4372:	68fa      	ldr	r2, [r7, #12]
    4374:	320c      	adds	r2, #12
    4376:	6811      	ldr	r1, [r2, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	3218      	adds	r2, #24
    437c:	6812      	ldr	r2, [r2, #0]
    437e:	404a      	eors	r2, r1
    4380:	601a      	str	r2, [r3, #0]
            rk += 4;
    4382:	68fb      	ldr	r3, [r7, #12]
    4384:	3310      	adds	r3, #16
    4386:	60fb      	str	r3, [r7, #12]
    rk[2] = GETU32(cipherKey + 8);
    rk[3] = GETU32(cipherKey + 12);

    if (keyBits == 128)
    {
        for (i = 0; i < 10; i++)
    4388:	697b      	ldr	r3, [r7, #20]
    438a:	3301      	adds	r3, #1
    438c:	617b      	str	r3, [r7, #20]
    438e:	697b      	ldr	r3, [r7, #20]
    4390:	2b09      	cmp	r3, #9
    4392:	f67f af7f 	bls.w	4294 <cip_int+0xc0>
            rk[5] = rk[1] ^ rk[4];
            rk[6] = rk[2] ^ rk[5];
            rk[7] = rk[3] ^ rk[6];
            rk += 4;
        }
        return 0;
    4396:	2300      	movs	r3, #0
    4398:	e180      	b.n	469c <cip_int+0x4c8>
    }

    rk[4] = GETU32(cipherKey + 16);
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	3310      	adds	r3, #16
    439e:	68ba      	ldr	r2, [r7, #8]
    43a0:	3210      	adds	r2, #16
    43a2:	7812      	ldrb	r2, [r2, #0]
    43a4:	0611      	lsls	r1, r2, #24
    43a6:	68ba      	ldr	r2, [r7, #8]
    43a8:	3211      	adds	r2, #17
    43aa:	7812      	ldrb	r2, [r2, #0]
    43ac:	0412      	lsls	r2, r2, #16
    43ae:	4311      	orrs	r1, r2
    43b0:	68ba      	ldr	r2, [r7, #8]
    43b2:	3212      	adds	r2, #18
    43b4:	7812      	ldrb	r2, [r2, #0]
    43b6:	0212      	lsls	r2, r2, #8
    43b8:	430a      	orrs	r2, r1
    43ba:	68b9      	ldr	r1, [r7, #8]
    43bc:	3113      	adds	r1, #19
    43be:	7809      	ldrb	r1, [r1, #0]
    43c0:	430a      	orrs	r2, r1
    43c2:	601a      	str	r2, [r3, #0]
    rk[5] = GETU32(cipherKey + 20);
    43c4:	68fb      	ldr	r3, [r7, #12]
    43c6:	3314      	adds	r3, #20
    43c8:	68ba      	ldr	r2, [r7, #8]
    43ca:	3214      	adds	r2, #20
    43cc:	7812      	ldrb	r2, [r2, #0]
    43ce:	0611      	lsls	r1, r2, #24
    43d0:	68ba      	ldr	r2, [r7, #8]
    43d2:	3215      	adds	r2, #21
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	0412      	lsls	r2, r2, #16
    43d8:	4311      	orrs	r1, r2
    43da:	68ba      	ldr	r2, [r7, #8]
    43dc:	3216      	adds	r2, #22
    43de:	7812      	ldrb	r2, [r2, #0]
    43e0:	0212      	lsls	r2, r2, #8
    43e2:	430a      	orrs	r2, r1
    43e4:	68b9      	ldr	r1, [r7, #8]
    43e6:	3117      	adds	r1, #23
    43e8:	7809      	ldrb	r1, [r1, #0]
    43ea:	430a      	orrs	r2, r1
    43ec:	601a      	str	r2, [r3, #0]

    if (keyBits == 192)
    43ee:	88fb      	ldrh	r3, [r7, #6]
    43f0:	2bc0      	cmp	r3, #192	; 0xc0
    43f2:	d173      	bne.n	44dc <cip_int+0x308>
    {
        for (i = 0; i < 8; i++)
    43f4:	2300      	movs	r3, #0
    43f6:	617b      	str	r3, [r7, #20]
    43f8:	e06d      	b.n	44d6 <cip_int+0x302>
        {
            temp = rk[5];
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	695b      	ldr	r3, [r3, #20]
    43fe:	613b      	str	r3, [r7, #16]
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	3318      	adds	r3, #24
    4404:	68fa      	ldr	r2, [r7, #12]
    4406:	6811      	ldr	r1, [r2, #0]
    4408:	693a      	ldr	r2, [r7, #16]
    440a:	0c12      	lsrs	r2, r2, #16
    440c:	b2d2      	uxtb	r2, r2
    440e:	484c      	ldr	r0, [pc, #304]	; (4540 <cip_int+0x36c>)
    4410:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4414:	0212      	lsls	r2, r2, #8
    4416:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    441a:	4051      	eors	r1, r2
    441c:	693a      	ldr	r2, [r7, #16]
    441e:	0a12      	lsrs	r2, r2, #8
    4420:	b2d2      	uxtb	r2, r2
    4422:	4847      	ldr	r0, [pc, #284]	; (4540 <cip_int+0x36c>)
    4424:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4428:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    442c:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    442e:	693a      	ldr	r2, [r7, #16]
    4430:	b2d2      	uxtb	r2, r2
    4432:	4843      	ldr	r0, [pc, #268]	; (4540 <cip_int+0x36c>)
    4434:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4438:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    if (keyBits == 192)
    {
        for (i = 0; i < 8; i++)
        {
            temp = rk[5];
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    443c:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    443e:	693a      	ldr	r2, [r7, #16]
    4440:	0e12      	lsrs	r2, r2, #24
    4442:	483f      	ldr	r0, [pc, #252]	; (4540 <cip_int+0x36c>)
    4444:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4448:	0a12      	lsrs	r2, r2, #8
    444a:	b2d2      	uxtb	r2, r2
    444c:	4051      	eors	r1, r2
    444e:	483d      	ldr	r0, [pc, #244]	; (4544 <cip_int+0x370>)
    4450:	697a      	ldr	r2, [r7, #20]
    4452:	4402      	add	r2, r0
    4454:	7812      	ldrb	r2, [r2, #0]
    4456:	0612      	lsls	r2, r2, #24
    4458:	404a      	eors	r2, r1
    if (keyBits == 192)
    {
        for (i = 0; i < 8; i++)
        {
            temp = rk[5];
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    445a:	601a      	str	r2, [r3, #0]
                TE443(temp) ^ TE414(temp) ^ RCON(i);
            rk[7] = rk[1] ^ rk[6];
    445c:	68fb      	ldr	r3, [r7, #12]
    445e:	331c      	adds	r3, #28
    4460:	68fa      	ldr	r2, [r7, #12]
    4462:	3204      	adds	r2, #4
    4464:	6811      	ldr	r1, [r2, #0]
    4466:	68fa      	ldr	r2, [r7, #12]
    4468:	3218      	adds	r2, #24
    446a:	6812      	ldr	r2, [r2, #0]
    446c:	404a      	eors	r2, r1
    446e:	601a      	str	r2, [r3, #0]
            rk[8] = rk[2] ^ rk[7];
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	3320      	adds	r3, #32
    4474:	68fa      	ldr	r2, [r7, #12]
    4476:	3208      	adds	r2, #8
    4478:	6811      	ldr	r1, [r2, #0]
    447a:	68fa      	ldr	r2, [r7, #12]
    447c:	321c      	adds	r2, #28
    447e:	6812      	ldr	r2, [r2, #0]
    4480:	404a      	eors	r2, r1
    4482:	601a      	str	r2, [r3, #0]
            rk[9] = rk[3] ^ rk[8];
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	3324      	adds	r3, #36	; 0x24
    4488:	68fa      	ldr	r2, [r7, #12]
    448a:	320c      	adds	r2, #12
    448c:	6811      	ldr	r1, [r2, #0]
    448e:	68fa      	ldr	r2, [r7, #12]
    4490:	3220      	adds	r2, #32
    4492:	6812      	ldr	r2, [r2, #0]
    4494:	404a      	eors	r2, r1
    4496:	601a      	str	r2, [r3, #0]
            if (i == 7)
    4498:	697b      	ldr	r3, [r7, #20]
    449a:	2b07      	cmp	r3, #7
    449c:	d101      	bne.n	44a2 <cip_int+0x2ce>
                return 12;
    449e:	230c      	movs	r3, #12
    44a0:	e0fc      	b.n	469c <cip_int+0x4c8>
            rk[10] = rk[4] ^ rk[9];
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	3328      	adds	r3, #40	; 0x28
    44a6:	68fa      	ldr	r2, [r7, #12]
    44a8:	3210      	adds	r2, #16
    44aa:	6811      	ldr	r1, [r2, #0]
    44ac:	68fa      	ldr	r2, [r7, #12]
    44ae:	3224      	adds	r2, #36	; 0x24
    44b0:	6812      	ldr	r2, [r2, #0]
    44b2:	404a      	eors	r2, r1
    44b4:	601a      	str	r2, [r3, #0]
            rk[11] = rk[5] ^ rk[10];
    44b6:	68fb      	ldr	r3, [r7, #12]
    44b8:	332c      	adds	r3, #44	; 0x2c
    44ba:	68fa      	ldr	r2, [r7, #12]
    44bc:	3214      	adds	r2, #20
    44be:	6811      	ldr	r1, [r2, #0]
    44c0:	68fa      	ldr	r2, [r7, #12]
    44c2:	3228      	adds	r2, #40	; 0x28
    44c4:	6812      	ldr	r2, [r2, #0]
    44c6:	404a      	eors	r2, r1
    44c8:	601a      	str	r2, [r3, #0]
            rk += 6;
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	3318      	adds	r3, #24
    44ce:	60fb      	str	r3, [r7, #12]
    rk[4] = GETU32(cipherKey + 16);
    rk[5] = GETU32(cipherKey + 20);

    if (keyBits == 192)
    {
        for (i = 0; i < 8; i++)
    44d0:	697b      	ldr	r3, [r7, #20]
    44d2:	3301      	adds	r3, #1
    44d4:	617b      	str	r3, [r7, #20]
    44d6:	697b      	ldr	r3, [r7, #20]
    44d8:	2b07      	cmp	r3, #7
    44da:	d98e      	bls.n	43fa <cip_int+0x226>
            rk[11] = rk[5] ^ rk[10];
            rk += 6;
        }
    }

    rk[6] = GETU32(cipherKey + 24);
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	3318      	adds	r3, #24
    44e0:	68ba      	ldr	r2, [r7, #8]
    44e2:	3218      	adds	r2, #24
    44e4:	7812      	ldrb	r2, [r2, #0]
    44e6:	0611      	lsls	r1, r2, #24
    44e8:	68ba      	ldr	r2, [r7, #8]
    44ea:	3219      	adds	r2, #25
    44ec:	7812      	ldrb	r2, [r2, #0]
    44ee:	0412      	lsls	r2, r2, #16
    44f0:	4311      	orrs	r1, r2
    44f2:	68ba      	ldr	r2, [r7, #8]
    44f4:	321a      	adds	r2, #26
    44f6:	7812      	ldrb	r2, [r2, #0]
    44f8:	0212      	lsls	r2, r2, #8
    44fa:	430a      	orrs	r2, r1
    44fc:	68b9      	ldr	r1, [r7, #8]
    44fe:	311b      	adds	r1, #27
    4500:	7809      	ldrb	r1, [r1, #0]
    4502:	430a      	orrs	r2, r1
    4504:	601a      	str	r2, [r3, #0]
    rk[7] = GETU32(cipherKey + 28);
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	331c      	adds	r3, #28
    450a:	68ba      	ldr	r2, [r7, #8]
    450c:	321c      	adds	r2, #28
    450e:	7812      	ldrb	r2, [r2, #0]
    4510:	0611      	lsls	r1, r2, #24
    4512:	68ba      	ldr	r2, [r7, #8]
    4514:	321d      	adds	r2, #29
    4516:	7812      	ldrb	r2, [r2, #0]
    4518:	0412      	lsls	r2, r2, #16
    451a:	4311      	orrs	r1, r2
    451c:	68ba      	ldr	r2, [r7, #8]
    451e:	321e      	adds	r2, #30
    4520:	7812      	ldrb	r2, [r2, #0]
    4522:	0212      	lsls	r2, r2, #8
    4524:	430a      	orrs	r2, r1
    4526:	68b9      	ldr	r1, [r7, #8]
    4528:	311f      	adds	r1, #31
    452a:	7809      	ldrb	r1, [r1, #0]
    452c:	430a      	orrs	r2, r1
    452e:	601a      	str	r2, [r3, #0]

    if (keyBits == 256)
    4530:	88fb      	ldrh	r3, [r7, #6]
    4532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4536:	f040 80af 	bne.w	4698 <cip_int+0x4c4>
    {
        for (i = 0; i < 7; i++)
    453a:	2300      	movs	r3, #0
    453c:	617b      	str	r3, [r7, #20]
    453e:	e0a7      	b.n	4690 <cip_int+0x4bc>
    4540:	0002c6b0 	.word	0x0002c6b0
    4544:	0002c6a4 	.word	0x0002c6a4
        {
            temp = rk[7];
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	69db      	ldr	r3, [r3, #28]
    454c:	613b      	str	r3, [r7, #16]
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    454e:	68fb      	ldr	r3, [r7, #12]
    4550:	3320      	adds	r3, #32
    4552:	68fa      	ldr	r2, [r7, #12]
    4554:	6811      	ldr	r1, [r2, #0]
    4556:	693a      	ldr	r2, [r7, #16]
    4558:	0c12      	lsrs	r2, r2, #16
    455a:	b2d2      	uxtb	r2, r2
    455c:	4852      	ldr	r0, [pc, #328]	; (46a8 <cip_int+0x4d4>)
    455e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4562:	0212      	lsls	r2, r2, #8
    4564:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    4568:	4051      	eors	r1, r2
    456a:	693a      	ldr	r2, [r7, #16]
    456c:	0a12      	lsrs	r2, r2, #8
    456e:	b2d2      	uxtb	r2, r2
    4570:	484d      	ldr	r0, [pc, #308]	; (46a8 <cip_int+0x4d4>)
    4572:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4576:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    457a:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    457c:	693a      	ldr	r2, [r7, #16]
    457e:	b2d2      	uxtb	r2, r2
    4580:	4849      	ldr	r0, [pc, #292]	; (46a8 <cip_int+0x4d4>)
    4582:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4586:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    if (keyBits == 256)
    {
        for (i = 0; i < 7; i++)
        {
            temp = rk[7];
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    458a:	4051      	eors	r1, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    458c:	693a      	ldr	r2, [r7, #16]
    458e:	0e12      	lsrs	r2, r2, #24
    4590:	4845      	ldr	r0, [pc, #276]	; (46a8 <cip_int+0x4d4>)
    4592:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4596:	0a12      	lsrs	r2, r2, #8
    4598:	b2d2      	uxtb	r2, r2
    459a:	4051      	eors	r1, r2
    459c:	4843      	ldr	r0, [pc, #268]	; (46ac <cip_int+0x4d8>)
    459e:	697a      	ldr	r2, [r7, #20]
    45a0:	4402      	add	r2, r0
    45a2:	7812      	ldrb	r2, [r2, #0]
    45a4:	0612      	lsls	r2, r2, #24
    45a6:	404a      	eors	r2, r1
    if (keyBits == 256)
    {
        for (i = 0; i < 7; i++)
        {
            temp = rk[7];
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    45a8:	601a      	str	r2, [r3, #0]
                TE443(temp) ^ TE414(temp) ^ RCON(i);
            rk[9] = rk[1] ^ rk[8];
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	3324      	adds	r3, #36	; 0x24
    45ae:	68fa      	ldr	r2, [r7, #12]
    45b0:	3204      	adds	r2, #4
    45b2:	6811      	ldr	r1, [r2, #0]
    45b4:	68fa      	ldr	r2, [r7, #12]
    45b6:	3220      	adds	r2, #32
    45b8:	6812      	ldr	r2, [r2, #0]
    45ba:	404a      	eors	r2, r1
    45bc:	601a      	str	r2, [r3, #0]
            rk[10] = rk[2] ^ rk[9];
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	3328      	adds	r3, #40	; 0x28
    45c2:	68fa      	ldr	r2, [r7, #12]
    45c4:	3208      	adds	r2, #8
    45c6:	6811      	ldr	r1, [r2, #0]
    45c8:	68fa      	ldr	r2, [r7, #12]
    45ca:	3224      	adds	r2, #36	; 0x24
    45cc:	6812      	ldr	r2, [r2, #0]
    45ce:	404a      	eors	r2, r1
    45d0:	601a      	str	r2, [r3, #0]
            rk[11] = rk[3] ^ rk[10];
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	332c      	adds	r3, #44	; 0x2c
    45d6:	68fa      	ldr	r2, [r7, #12]
    45d8:	320c      	adds	r2, #12
    45da:	6811      	ldr	r1, [r2, #0]
    45dc:	68fa      	ldr	r2, [r7, #12]
    45de:	3228      	adds	r2, #40	; 0x28
    45e0:	6812      	ldr	r2, [r2, #0]
    45e2:	404a      	eors	r2, r1
    45e4:	601a      	str	r2, [r3, #0]
            if (i == 6)
    45e6:	697b      	ldr	r3, [r7, #20]
    45e8:	2b06      	cmp	r3, #6
    45ea:	d101      	bne.n	45f0 <cip_int+0x41c>
                return 14;
    45ec:	230e      	movs	r3, #14
    45ee:	e055      	b.n	469c <cip_int+0x4c8>
            temp = rk[11];
    45f0:	68fb      	ldr	r3, [r7, #12]
    45f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45f4:	613b      	str	r3, [r7, #16]
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    45f6:	68fb      	ldr	r3, [r7, #12]
    45f8:	3330      	adds	r3, #48	; 0x30
    45fa:	68fa      	ldr	r2, [r7, #12]
    45fc:	3210      	adds	r2, #16
    45fe:	6811      	ldr	r1, [r2, #0]
    4600:	693a      	ldr	r2, [r7, #16]
    4602:	0e12      	lsrs	r2, r2, #24
    4604:	4828      	ldr	r0, [pc, #160]	; (46a8 <cip_int+0x4d4>)
    4606:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    460a:	0212      	lsls	r2, r2, #8
    460c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    4610:	4051      	eors	r1, r2
    4612:	693a      	ldr	r2, [r7, #16]
    4614:	0c12      	lsrs	r2, r2, #16
    4616:	b2d2      	uxtb	r2, r2
    4618:	4823      	ldr	r0, [pc, #140]	; (46a8 <cip_int+0x4d4>)
    461a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    461e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    4622:	4051      	eors	r1, r2
                TE433(temp) ^ TE444(temp);
    4624:	693a      	ldr	r2, [r7, #16]
    4626:	0a12      	lsrs	r2, r2, #8
    4628:	b2d2      	uxtb	r2, r2
    462a:	481f      	ldr	r0, [pc, #124]	; (46a8 <cip_int+0x4d4>)
    462c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4630:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
            rk[10] = rk[2] ^ rk[9];
            rk[11] = rk[3] ^ rk[10];
            if (i == 6)
                return 14;
            temp = rk[11];
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    4634:	4051      	eors	r1, r2
                TE433(temp) ^ TE444(temp);
    4636:	693a      	ldr	r2, [r7, #16]
    4638:	b2d2      	uxtb	r2, r2
    463a:	481b      	ldr	r0, [pc, #108]	; (46a8 <cip_int+0x4d4>)
    463c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4640:	0a12      	lsrs	r2, r2, #8
    4642:	b2d2      	uxtb	r2, r2
    4644:	404a      	eors	r2, r1
            rk[10] = rk[2] ^ rk[9];
            rk[11] = rk[3] ^ rk[10];
            if (i == 6)
                return 14;
            temp = rk[11];
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    4646:	601a      	str	r2, [r3, #0]
                TE433(temp) ^ TE444(temp);
            rk[13] = rk[5] ^ rk[12];
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	3334      	adds	r3, #52	; 0x34
    464c:	68fa      	ldr	r2, [r7, #12]
    464e:	3214      	adds	r2, #20
    4650:	6811      	ldr	r1, [r2, #0]
    4652:	68fa      	ldr	r2, [r7, #12]
    4654:	3230      	adds	r2, #48	; 0x30
    4656:	6812      	ldr	r2, [r2, #0]
    4658:	404a      	eors	r2, r1
    465a:	601a      	str	r2, [r3, #0]
            rk[14] = rk[6] ^ rk[13];
    465c:	68fb      	ldr	r3, [r7, #12]
    465e:	3338      	adds	r3, #56	; 0x38
    4660:	68fa      	ldr	r2, [r7, #12]
    4662:	3218      	adds	r2, #24
    4664:	6811      	ldr	r1, [r2, #0]
    4666:	68fa      	ldr	r2, [r7, #12]
    4668:	3234      	adds	r2, #52	; 0x34
    466a:	6812      	ldr	r2, [r2, #0]
    466c:	404a      	eors	r2, r1
    466e:	601a      	str	r2, [r3, #0]
            rk[15] = rk[7] ^ rk[14];
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	333c      	adds	r3, #60	; 0x3c
    4674:	68fa      	ldr	r2, [r7, #12]
    4676:	321c      	adds	r2, #28
    4678:	6811      	ldr	r1, [r2, #0]
    467a:	68fa      	ldr	r2, [r7, #12]
    467c:	3238      	adds	r2, #56	; 0x38
    467e:	6812      	ldr	r2, [r2, #0]
    4680:	404a      	eors	r2, r1
    4682:	601a      	str	r2, [r3, #0]
            rk += 8;
    4684:	68fb      	ldr	r3, [r7, #12]
    4686:	3320      	adds	r3, #32
    4688:	60fb      	str	r3, [r7, #12]
    rk[6] = GETU32(cipherKey + 24);
    rk[7] = GETU32(cipherKey + 28);

    if (keyBits == 256)
    {
        for (i = 0; i < 7; i++)
    468a:	697b      	ldr	r3, [r7, #20]
    468c:	3301      	adds	r3, #1
    468e:	617b      	str	r3, [r7, #20]
    4690:	697b      	ldr	r3, [r7, #20]
    4692:	2b06      	cmp	r3, #6
    4694:	f67f af58 	bls.w	4548 <cip_int+0x374>
            rk[14] = rk[6] ^ rk[13];
            rk[15] = rk[7] ^ rk[14];
            rk += 8;
        }
    }
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4698:	f44f 7381 	mov.w	r3, #258	; 0x102
}
    469c:	4618      	mov	r0, r3
    469e:	371c      	adds	r7, #28
    46a0:	46bd      	mov	sp, r7
    46a2:	bc80      	pop	{r7}
    46a4:	4770      	bx	lr
    46a6:	bf00      	nop
    46a8:	0002c6b0 	.word	0x0002c6b0
    46ac:	0002c6a4 	.word	0x0002c6a4

000046b0 <aes_encrypt>:

void aes_encrypt(const unsigned long* rk, int Nr, const unsigned char* pt, unsigned char* ct)
{
    46b0:	b480      	push	{r7}
    46b2:	b08f      	sub	sp, #60	; 0x3c
    46b4:	af00      	add	r7, sp, #0
    46b6:	60f8      	str	r0, [r7, #12]
    46b8:	60b9      	str	r1, [r7, #8]
    46ba:	607a      	str	r2, [r7, #4]
    46bc:	603b      	str	r3, [r7, #0]
    unsigned long s0, s1, s2, s3, t0, t1, t2, t3;
    int r;
    s0 = GETU32(pt) ^ rk[0];
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	061a      	lsls	r2, r3, #24
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	3301      	adds	r3, #1
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	041b      	lsls	r3, r3, #16
    46cc:	431a      	orrs	r2, r3
    46ce:	687b      	ldr	r3, [r7, #4]
    46d0:	3302      	adds	r3, #2
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	021b      	lsls	r3, r3, #8
    46d6:	4313      	orrs	r3, r2
    46d8:	687a      	ldr	r2, [r7, #4]
    46da:	3203      	adds	r2, #3
    46dc:	7812      	ldrb	r2, [r2, #0]
    46de:	431a      	orrs	r2, r3
    46e0:	68fb      	ldr	r3, [r7, #12]
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	4053      	eors	r3, r2
    46e6:	637b      	str	r3, [r7, #52]	; 0x34
    s1 = GETU32(pt + 4) ^ rk[1];
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	3304      	adds	r3, #4
    46ec:	781b      	ldrb	r3, [r3, #0]
    46ee:	061a      	lsls	r2, r3, #24
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	3305      	adds	r3, #5
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	041b      	lsls	r3, r3, #16
    46f8:	431a      	orrs	r2, r3
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	3306      	adds	r3, #6
    46fe:	781b      	ldrb	r3, [r3, #0]
    4700:	021b      	lsls	r3, r3, #8
    4702:	4313      	orrs	r3, r2
    4704:	687a      	ldr	r2, [r7, #4]
    4706:	3207      	adds	r2, #7
    4708:	7812      	ldrb	r2, [r2, #0]
    470a:	431a      	orrs	r2, r3
    470c:	68fb      	ldr	r3, [r7, #12]
    470e:	3304      	adds	r3, #4
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	4053      	eors	r3, r2
    4714:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = GETU32(pt + 8) ^ rk[2];
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	3308      	adds	r3, #8
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	061a      	lsls	r2, r3, #24
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	3309      	adds	r3, #9
    4722:	781b      	ldrb	r3, [r3, #0]
    4724:	041b      	lsls	r3, r3, #16
    4726:	431a      	orrs	r2, r3
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	330a      	adds	r3, #10
    472c:	781b      	ldrb	r3, [r3, #0]
    472e:	021b      	lsls	r3, r3, #8
    4730:	4313      	orrs	r3, r2
    4732:	687a      	ldr	r2, [r7, #4]
    4734:	320b      	adds	r2, #11
    4736:	7812      	ldrb	r2, [r2, #0]
    4738:	431a      	orrs	r2, r3
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	3308      	adds	r3, #8
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	4053      	eors	r3, r2
    4742:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = GETU32(pt + 12) ^ rk[3];
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	330c      	adds	r3, #12
    4748:	781b      	ldrb	r3, [r3, #0]
    474a:	061a      	lsls	r2, r3, #24
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	330d      	adds	r3, #13
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	041b      	lsls	r3, r3, #16
    4754:	431a      	orrs	r2, r3
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	330e      	adds	r3, #14
    475a:	781b      	ldrb	r3, [r3, #0]
    475c:	021b      	lsls	r3, r3, #8
    475e:	4313      	orrs	r3, r2
    4760:	687a      	ldr	r2, [r7, #4]
    4762:	320f      	adds	r2, #15
    4764:	7812      	ldrb	r2, [r2, #0]
    4766:	431a      	orrs	r2, r3
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	330c      	adds	r3, #12
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	4053      	eors	r3, r2
    4770:	62bb      	str	r3, [r7, #40]	; 0x28
d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]

    /* Nr - 1 full rounds: */
    r = Nr >> 1;
    4772:	68bb      	ldr	r3, [r7, #8]
    4774:	105b      	asrs	r3, r3, #1
    4776:	627b      	str	r3, [r7, #36]	; 0x24
    for (;;)
    {
        ROUND(1, t, s);
    4778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    477a:	0e1b      	lsrs	r3, r3, #24
    477c:	4a93      	ldr	r2, [pc, #588]	; (49cc <aes_encrypt+0x31c>)
    477e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4784:	0c1b      	lsrs	r3, r3, #16
    4786:	b2db      	uxtb	r3, r3
    4788:	4990      	ldr	r1, [pc, #576]	; (49cc <aes_encrypt+0x31c>)
    478a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    478e:	ea4f 2333 	mov.w	r3, r3, ror #8
    4792:	405a      	eors	r2, r3
    4794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4796:	0a1b      	lsrs	r3, r3, #8
    4798:	b2db      	uxtb	r3, r3
    479a:	498c      	ldr	r1, [pc, #560]	; (49cc <aes_encrypt+0x31c>)
    479c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    47a0:	ea4f 4333 	mov.w	r3, r3, ror #16
    47a4:	405a      	eors	r2, r3
    47a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47a8:	b2db      	uxtb	r3, r3
    47aa:	4988      	ldr	r1, [pc, #544]	; (49cc <aes_encrypt+0x31c>)
    47ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    47b0:	ea4f 6333 	mov.w	r3, r3, ror #24
    47b4:	405a      	eors	r2, r3
    47b6:	68fb      	ldr	r3, [r7, #12]
    47b8:	3310      	adds	r3, #16
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	4053      	eors	r3, r2
    47be:	623b      	str	r3, [r7, #32]
    47c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    47c2:	0e1b      	lsrs	r3, r3, #24
    47c4:	4a81      	ldr	r2, [pc, #516]	; (49cc <aes_encrypt+0x31c>)
    47c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    47ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47cc:	0c1b      	lsrs	r3, r3, #16
    47ce:	b2db      	uxtb	r3, r3
    47d0:	497e      	ldr	r1, [pc, #504]	; (49cc <aes_encrypt+0x31c>)
    47d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    47d6:	ea4f 2333 	mov.w	r3, r3, ror #8
    47da:	405a      	eors	r2, r3
    47dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47de:	0a1b      	lsrs	r3, r3, #8
    47e0:	b2db      	uxtb	r3, r3
    47e2:	497a      	ldr	r1, [pc, #488]	; (49cc <aes_encrypt+0x31c>)
    47e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    47e8:	ea4f 4333 	mov.w	r3, r3, ror #16
    47ec:	405a      	eors	r2, r3
    47ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47f0:	b2db      	uxtb	r3, r3
    47f2:	4976      	ldr	r1, [pc, #472]	; (49cc <aes_encrypt+0x31c>)
    47f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    47f8:	ea4f 6333 	mov.w	r3, r3, ror #24
    47fc:	405a      	eors	r2, r3
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	3314      	adds	r3, #20
    4802:	681b      	ldr	r3, [r3, #0]
    4804:	4053      	eors	r3, r2
    4806:	61fb      	str	r3, [r7, #28]
    4808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    480a:	0e1b      	lsrs	r3, r3, #24
    480c:	4a6f      	ldr	r2, [pc, #444]	; (49cc <aes_encrypt+0x31c>)
    480e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4812:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4814:	0c1b      	lsrs	r3, r3, #16
    4816:	b2db      	uxtb	r3, r3
    4818:	496c      	ldr	r1, [pc, #432]	; (49cc <aes_encrypt+0x31c>)
    481a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    481e:	ea4f 2333 	mov.w	r3, r3, ror #8
    4822:	405a      	eors	r2, r3
    4824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4826:	0a1b      	lsrs	r3, r3, #8
    4828:	b2db      	uxtb	r3, r3
    482a:	4968      	ldr	r1, [pc, #416]	; (49cc <aes_encrypt+0x31c>)
    482c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4830:	ea4f 4333 	mov.w	r3, r3, ror #16
    4834:	405a      	eors	r2, r3
    4836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4838:	b2db      	uxtb	r3, r3
    483a:	4964      	ldr	r1, [pc, #400]	; (49cc <aes_encrypt+0x31c>)
    483c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4840:	ea4f 6333 	mov.w	r3, r3, ror #24
    4844:	405a      	eors	r2, r3
    4846:	68fb      	ldr	r3, [r7, #12]
    4848:	3318      	adds	r3, #24
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	4053      	eors	r3, r2
    484e:	61bb      	str	r3, [r7, #24]
    4850:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4852:	0e1b      	lsrs	r3, r3, #24
    4854:	4a5d      	ldr	r2, [pc, #372]	; (49cc <aes_encrypt+0x31c>)
    4856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    485c:	0c1b      	lsrs	r3, r3, #16
    485e:	b2db      	uxtb	r3, r3
    4860:	495a      	ldr	r1, [pc, #360]	; (49cc <aes_encrypt+0x31c>)
    4862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4866:	ea4f 2333 	mov.w	r3, r3, ror #8
    486a:	405a      	eors	r2, r3
    486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    486e:	0a1b      	lsrs	r3, r3, #8
    4870:	b2db      	uxtb	r3, r3
    4872:	4956      	ldr	r1, [pc, #344]	; (49cc <aes_encrypt+0x31c>)
    4874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4878:	ea4f 4333 	mov.w	r3, r3, ror #16
    487c:	405a      	eors	r2, r3
    487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4880:	b2db      	uxtb	r3, r3
    4882:	4952      	ldr	r1, [pc, #328]	; (49cc <aes_encrypt+0x31c>)
    4884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4888:	ea4f 6333 	mov.w	r3, r3, ror #24
    488c:	405a      	eors	r2, r3
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	331c      	adds	r3, #28
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	4053      	eors	r3, r2
    4896:	617b      	str	r3, [r7, #20]
        rk += 8;
    4898:	68fb      	ldr	r3, [r7, #12]
    489a:	3320      	adds	r3, #32
    489c:	60fb      	str	r3, [r7, #12]
        if (--r == 0)
    489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48a0:	3b01      	subs	r3, #1
    48a2:	627b      	str	r3, [r7, #36]	; 0x24
    48a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48a6:	2b00      	cmp	r3, #0
    48a8:	f000 8092 	beq.w	49d0 <aes_encrypt+0x320>
            break;
        ROUND(0, s, t);
    48ac:	6a3b      	ldr	r3, [r7, #32]
    48ae:	0e1b      	lsrs	r3, r3, #24
    48b0:	4a46      	ldr	r2, [pc, #280]	; (49cc <aes_encrypt+0x31c>)
    48b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    48b6:	69fb      	ldr	r3, [r7, #28]
    48b8:	0c1b      	lsrs	r3, r3, #16
    48ba:	b2db      	uxtb	r3, r3
    48bc:	4943      	ldr	r1, [pc, #268]	; (49cc <aes_encrypt+0x31c>)
    48be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    48c2:	ea4f 2333 	mov.w	r3, r3, ror #8
    48c6:	405a      	eors	r2, r3
    48c8:	69bb      	ldr	r3, [r7, #24]
    48ca:	0a1b      	lsrs	r3, r3, #8
    48cc:	b2db      	uxtb	r3, r3
    48ce:	493f      	ldr	r1, [pc, #252]	; (49cc <aes_encrypt+0x31c>)
    48d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    48d4:	ea4f 4333 	mov.w	r3, r3, ror #16
    48d8:	405a      	eors	r2, r3
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	b2db      	uxtb	r3, r3
    48de:	493b      	ldr	r1, [pc, #236]	; (49cc <aes_encrypt+0x31c>)
    48e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    48e4:	ea4f 6333 	mov.w	r3, r3, ror #24
    48e8:	405a      	eors	r2, r3
    48ea:	68fb      	ldr	r3, [r7, #12]
    48ec:	681b      	ldr	r3, [r3, #0]
    48ee:	4053      	eors	r3, r2
    48f0:	637b      	str	r3, [r7, #52]	; 0x34
    48f2:	69fb      	ldr	r3, [r7, #28]
    48f4:	0e1b      	lsrs	r3, r3, #24
    48f6:	4a35      	ldr	r2, [pc, #212]	; (49cc <aes_encrypt+0x31c>)
    48f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    48fc:	69bb      	ldr	r3, [r7, #24]
    48fe:	0c1b      	lsrs	r3, r3, #16
    4900:	b2db      	uxtb	r3, r3
    4902:	4932      	ldr	r1, [pc, #200]	; (49cc <aes_encrypt+0x31c>)
    4904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4908:	ea4f 2333 	mov.w	r3, r3, ror #8
    490c:	405a      	eors	r2, r3
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	0a1b      	lsrs	r3, r3, #8
    4912:	b2db      	uxtb	r3, r3
    4914:	492d      	ldr	r1, [pc, #180]	; (49cc <aes_encrypt+0x31c>)
    4916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    491a:	ea4f 4333 	mov.w	r3, r3, ror #16
    491e:	405a      	eors	r2, r3
    4920:	6a3b      	ldr	r3, [r7, #32]
    4922:	b2db      	uxtb	r3, r3
    4924:	4929      	ldr	r1, [pc, #164]	; (49cc <aes_encrypt+0x31c>)
    4926:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    492a:	ea4f 6333 	mov.w	r3, r3, ror #24
    492e:	405a      	eors	r2, r3
    4930:	68fb      	ldr	r3, [r7, #12]
    4932:	3304      	adds	r3, #4
    4934:	681b      	ldr	r3, [r3, #0]
    4936:	4053      	eors	r3, r2
    4938:	633b      	str	r3, [r7, #48]	; 0x30
    493a:	69bb      	ldr	r3, [r7, #24]
    493c:	0e1b      	lsrs	r3, r3, #24
    493e:	4a23      	ldr	r2, [pc, #140]	; (49cc <aes_encrypt+0x31c>)
    4940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4944:	697b      	ldr	r3, [r7, #20]
    4946:	0c1b      	lsrs	r3, r3, #16
    4948:	b2db      	uxtb	r3, r3
    494a:	4920      	ldr	r1, [pc, #128]	; (49cc <aes_encrypt+0x31c>)
    494c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4950:	ea4f 2333 	mov.w	r3, r3, ror #8
    4954:	405a      	eors	r2, r3
    4956:	6a3b      	ldr	r3, [r7, #32]
    4958:	0a1b      	lsrs	r3, r3, #8
    495a:	b2db      	uxtb	r3, r3
    495c:	491b      	ldr	r1, [pc, #108]	; (49cc <aes_encrypt+0x31c>)
    495e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4962:	ea4f 4333 	mov.w	r3, r3, ror #16
    4966:	405a      	eors	r2, r3
    4968:	69fb      	ldr	r3, [r7, #28]
    496a:	b2db      	uxtb	r3, r3
    496c:	4917      	ldr	r1, [pc, #92]	; (49cc <aes_encrypt+0x31c>)
    496e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4972:	ea4f 6333 	mov.w	r3, r3, ror #24
    4976:	405a      	eors	r2, r3
    4978:	68fb      	ldr	r3, [r7, #12]
    497a:	3308      	adds	r3, #8
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	4053      	eors	r3, r2
    4980:	62fb      	str	r3, [r7, #44]	; 0x2c
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	0e1b      	lsrs	r3, r3, #24
    4986:	4a11      	ldr	r2, [pc, #68]	; (49cc <aes_encrypt+0x31c>)
    4988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    498c:	6a3b      	ldr	r3, [r7, #32]
    498e:	0c1b      	lsrs	r3, r3, #16
    4990:	b2db      	uxtb	r3, r3
    4992:	490e      	ldr	r1, [pc, #56]	; (49cc <aes_encrypt+0x31c>)
    4994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4998:	ea4f 2333 	mov.w	r3, r3, ror #8
    499c:	405a      	eors	r2, r3
    499e:	69fb      	ldr	r3, [r7, #28]
    49a0:	0a1b      	lsrs	r3, r3, #8
    49a2:	b2db      	uxtb	r3, r3
    49a4:	4909      	ldr	r1, [pc, #36]	; (49cc <aes_encrypt+0x31c>)
    49a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    49aa:	ea4f 4333 	mov.w	r3, r3, ror #16
    49ae:	405a      	eors	r2, r3
    49b0:	69bb      	ldr	r3, [r7, #24]
    49b2:	b2db      	uxtb	r3, r3
    49b4:	4905      	ldr	r1, [pc, #20]	; (49cc <aes_encrypt+0x31c>)
    49b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    49ba:	ea4f 6333 	mov.w	r3, r3, ror #24
    49be:	405a      	eors	r2, r3
    49c0:	68fb      	ldr	r3, [r7, #12]
    49c2:	330c      	adds	r3, #12
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	4053      	eors	r3, r2
    49c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    49ca:	e6d5      	b.n	4778 <aes_encrypt+0xc8>
    49cc:	0002c6b0 	.word	0x0002c6b0
    for (;;)
    {
        ROUND(1, t, s);
        rk += 8;
        if (--r == 0)
            break;
    49d0:	bf00      	nop
        ROUND(0, s, t);
    }

#undef ROUND

    s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
    49d2:	6a3b      	ldr	r3, [r7, #32]
    49d4:	0e1b      	lsrs	r3, r3, #24
    49d6:	4a7c      	ldr	r2, [pc, #496]	; (4bc8 <aes_encrypt+0x518>)
    49d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49dc:	021b      	lsls	r3, r3, #8
    49de:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
    49e2:	69fb      	ldr	r3, [r7, #28]
    49e4:	0c1b      	lsrs	r3, r3, #16
    49e6:	b2db      	uxtb	r3, r3
    49e8:	4977      	ldr	r1, [pc, #476]	; (4bc8 <aes_encrypt+0x518>)
    49ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    49ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    49f2:	405a      	eors	r2, r3
    49f4:	69bb      	ldr	r3, [r7, #24]
    49f6:	0a1b      	lsrs	r3, r3, #8
    49f8:	b2db      	uxtb	r3, r3
    49fa:	4973      	ldr	r1, [pc, #460]	; (4bc8 <aes_encrypt+0x518>)
    49fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4a04:	405a      	eors	r2, r3
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	b2db      	uxtb	r3, r3
    4a0a:	496f      	ldr	r1, [pc, #444]	; (4bc8 <aes_encrypt+0x518>)
    4a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4a10:	0a1b      	lsrs	r3, r3, #8
    4a12:	b2db      	uxtb	r3, r3
    4a14:	405a      	eors	r2, r3
    4a16:	68fb      	ldr	r3, [r7, #12]
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	4053      	eors	r3, r2
    4a1c:	637b      	str	r3, [r7, #52]	; 0x34
    PUT32(ct, s0);
    4a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a20:	0e1b      	lsrs	r3, r3, #24
    4a22:	b2da      	uxtb	r2, r3
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	701a      	strb	r2, [r3, #0]
    4a28:	683b      	ldr	r3, [r7, #0]
    4a2a:	3301      	adds	r3, #1
    4a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4a2e:	0c12      	lsrs	r2, r2, #16
    4a30:	b2d2      	uxtb	r2, r2
    4a32:	701a      	strb	r2, [r3, #0]
    4a34:	683b      	ldr	r3, [r7, #0]
    4a36:	3302      	adds	r3, #2
    4a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4a3a:	0a12      	lsrs	r2, r2, #8
    4a3c:	b2d2      	uxtb	r2, r2
    4a3e:	701a      	strb	r2, [r3, #0]
    4a40:	683b      	ldr	r3, [r7, #0]
    4a42:	3303      	adds	r3, #3
    4a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4a46:	b2d2      	uxtb	r2, r2
    4a48:	701a      	strb	r2, [r3, #0]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    4a4a:	69fb      	ldr	r3, [r7, #28]
    4a4c:	0e1b      	lsrs	r3, r3, #24
    4a4e:	4a5e      	ldr	r2, [pc, #376]	; (4bc8 <aes_encrypt+0x518>)
    4a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4a54:	021b      	lsls	r3, r3, #8
    4a56:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
    4a5a:	69bb      	ldr	r3, [r7, #24]
    4a5c:	0c1b      	lsrs	r3, r3, #16
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	4959      	ldr	r1, [pc, #356]	; (4bc8 <aes_encrypt+0x518>)
    4a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4a6a:	405a      	eors	r2, r3
    4a6c:	697b      	ldr	r3, [r7, #20]
    4a6e:	0a1b      	lsrs	r3, r3, #8
    4a70:	b2db      	uxtb	r3, r3
    4a72:	4955      	ldr	r1, [pc, #340]	; (4bc8 <aes_encrypt+0x518>)
    4a74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4a78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4a7c:	405a      	eors	r2, r3
    4a7e:	6a3b      	ldr	r3, [r7, #32]
    4a80:	b2db      	uxtb	r3, r3
    4a82:	4951      	ldr	r1, [pc, #324]	; (4bc8 <aes_encrypt+0x518>)
    4a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4a88:	0a1b      	lsrs	r3, r3, #8
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	405a      	eors	r2, r3
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	3304      	adds	r3, #4
    4a92:	681b      	ldr	r3, [r3, #0]
    4a94:	4053      	eors	r3, r2
    4a96:	633b      	str	r3, [r7, #48]	; 0x30
    PUT32(ct + 4, s1);
    4a98:	683b      	ldr	r3, [r7, #0]
    4a9a:	3304      	adds	r3, #4
    4a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4a9e:	0e12      	lsrs	r2, r2, #24
    4aa0:	b2d2      	uxtb	r2, r2
    4aa2:	701a      	strb	r2, [r3, #0]
    4aa4:	683b      	ldr	r3, [r7, #0]
    4aa6:	3305      	adds	r3, #5
    4aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4aaa:	0c12      	lsrs	r2, r2, #16
    4aac:	b2d2      	uxtb	r2, r2
    4aae:	701a      	strb	r2, [r3, #0]
    4ab0:	683b      	ldr	r3, [r7, #0]
    4ab2:	3306      	adds	r3, #6
    4ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4ab6:	0a12      	lsrs	r2, r2, #8
    4ab8:	b2d2      	uxtb	r2, r2
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	683b      	ldr	r3, [r7, #0]
    4abe:	3307      	adds	r3, #7
    4ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4ac2:	b2d2      	uxtb	r2, r2
    4ac4:	701a      	strb	r2, [r3, #0]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    4ac6:	69bb      	ldr	r3, [r7, #24]
    4ac8:	0e1b      	lsrs	r3, r3, #24
    4aca:	4a3f      	ldr	r2, [pc, #252]	; (4bc8 <aes_encrypt+0x518>)
    4acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ad0:	021b      	lsls	r3, r3, #8
    4ad2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	0c1b      	lsrs	r3, r3, #16
    4ada:	b2db      	uxtb	r3, r3
    4adc:	493a      	ldr	r1, [pc, #232]	; (4bc8 <aes_encrypt+0x518>)
    4ade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4ae2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4ae6:	405a      	eors	r2, r3
    4ae8:	6a3b      	ldr	r3, [r7, #32]
    4aea:	0a1b      	lsrs	r3, r3, #8
    4aec:	b2db      	uxtb	r3, r3
    4aee:	4936      	ldr	r1, [pc, #216]	; (4bc8 <aes_encrypt+0x518>)
    4af0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4af4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4af8:	405a      	eors	r2, r3
    4afa:	69fb      	ldr	r3, [r7, #28]
    4afc:	b2db      	uxtb	r3, r3
    4afe:	4932      	ldr	r1, [pc, #200]	; (4bc8 <aes_encrypt+0x518>)
    4b00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4b04:	0a1b      	lsrs	r3, r3, #8
    4b06:	b2db      	uxtb	r3, r3
    4b08:	405a      	eors	r2, r3
    4b0a:	68fb      	ldr	r3, [r7, #12]
    4b0c:	3308      	adds	r3, #8
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	4053      	eors	r3, r2
    4b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    PUT32(ct + 8, s2);
    4b14:	683b      	ldr	r3, [r7, #0]
    4b16:	3308      	adds	r3, #8
    4b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b1a:	0e12      	lsrs	r2, r2, #24
    4b1c:	b2d2      	uxtb	r2, r2
    4b1e:	701a      	strb	r2, [r3, #0]
    4b20:	683b      	ldr	r3, [r7, #0]
    4b22:	3309      	adds	r3, #9
    4b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b26:	0c12      	lsrs	r2, r2, #16
    4b28:	b2d2      	uxtb	r2, r2
    4b2a:	701a      	strb	r2, [r3, #0]
    4b2c:	683b      	ldr	r3, [r7, #0]
    4b2e:	330a      	adds	r3, #10
    4b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b32:	0a12      	lsrs	r2, r2, #8
    4b34:	b2d2      	uxtb	r2, r2
    4b36:	701a      	strb	r2, [r3, #0]
    4b38:	683b      	ldr	r3, [r7, #0]
    4b3a:	330b      	adds	r3, #11
    4b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b3e:	b2d2      	uxtb	r2, r2
    4b40:	701a      	strb	r2, [r3, #0]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    4b42:	697b      	ldr	r3, [r7, #20]
    4b44:	0e1b      	lsrs	r3, r3, #24
    4b46:	4a20      	ldr	r2, [pc, #128]	; (4bc8 <aes_encrypt+0x518>)
    4b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b4c:	021b      	lsls	r3, r3, #8
    4b4e:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
    4b52:	6a3b      	ldr	r3, [r7, #32]
    4b54:	0c1b      	lsrs	r3, r3, #16
    4b56:	b2db      	uxtb	r3, r3
    4b58:	491b      	ldr	r1, [pc, #108]	; (4bc8 <aes_encrypt+0x518>)
    4b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4b5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4b62:	405a      	eors	r2, r3
    4b64:	69fb      	ldr	r3, [r7, #28]
    4b66:	0a1b      	lsrs	r3, r3, #8
    4b68:	b2db      	uxtb	r3, r3
    4b6a:	4917      	ldr	r1, [pc, #92]	; (4bc8 <aes_encrypt+0x518>)
    4b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4b70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4b74:	405a      	eors	r2, r3
    4b76:	69bb      	ldr	r3, [r7, #24]
    4b78:	b2db      	uxtb	r3, r3
    4b7a:	4913      	ldr	r1, [pc, #76]	; (4bc8 <aes_encrypt+0x518>)
    4b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4b80:	0a1b      	lsrs	r3, r3, #8
    4b82:	b2db      	uxtb	r3, r3
    4b84:	405a      	eors	r2, r3
    4b86:	68fb      	ldr	r3, [r7, #12]
    4b88:	330c      	adds	r3, #12
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	4053      	eors	r3, r2
    4b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    PUT32(ct + 12, s3);
    4b90:	683b      	ldr	r3, [r7, #0]
    4b92:	330c      	adds	r3, #12
    4b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4b96:	0e12      	lsrs	r2, r2, #24
    4b98:	b2d2      	uxtb	r2, r2
    4b9a:	701a      	strb	r2, [r3, #0]
    4b9c:	683b      	ldr	r3, [r7, #0]
    4b9e:	330d      	adds	r3, #13
    4ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4ba2:	0c12      	lsrs	r2, r2, #16
    4ba4:	b2d2      	uxtb	r2, r2
    4ba6:	701a      	strb	r2, [r3, #0]
    4ba8:	683b      	ldr	r3, [r7, #0]
    4baa:	330e      	adds	r3, #14
    4bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4bae:	0a12      	lsrs	r2, r2, #8
    4bb0:	b2d2      	uxtb	r2, r2
    4bb2:	701a      	strb	r2, [r3, #0]
    4bb4:	683b      	ldr	r3, [r7, #0]
    4bb6:	330f      	adds	r3, #15
    4bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4bba:	b2d2      	uxtb	r2, r2
    4bbc:	701a      	strb	r2, [r3, #0]
}
    4bbe:	bf00      	nop
    4bc0:	373c      	adds	r7, #60	; 0x3c
    4bc2:	46bd      	mov	sp, r7
    4bc4:	bc80      	pop	{r7}
    4bc6:	4770      	bx	lr
    4bc8:	0002c6b0 	.word	0x0002c6b0

00004bcc <cip_xor>:
* @param val
*/
static void cip_xor(
    unsigned char *dst,
    const unsigned char *src)
{
    4bcc:	b480      	push	{r7}
    4bce:	b085      	sub	sp, #20
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
    4bd4:	6039      	str	r1, [r7, #0]
    int pos;
    for (pos = 0; pos != 16; ++pos)
    4bd6:	2300      	movs	r3, #0
    4bd8:	60fb      	str	r3, [r7, #12]
    4bda:	e010      	b.n	4bfe <cip_xor+0x32>
    {
        dst[pos] ^= src[pos];
    4bdc:	68fb      	ldr	r3, [r7, #12]
    4bde:	687a      	ldr	r2, [r7, #4]
    4be0:	4413      	add	r3, r2
    4be2:	68fa      	ldr	r2, [r7, #12]
    4be4:	6879      	ldr	r1, [r7, #4]
    4be6:	440a      	add	r2, r1
    4be8:	7811      	ldrb	r1, [r2, #0]
    4bea:	68fa      	ldr	r2, [r7, #12]
    4bec:	6838      	ldr	r0, [r7, #0]
    4bee:	4402      	add	r2, r0
    4bf0:	7812      	ldrb	r2, [r2, #0]
    4bf2:	404a      	eors	r2, r1
    4bf4:	b2d2      	uxtb	r2, r2
    4bf6:	701a      	strb	r2, [r3, #0]
static void cip_xor(
    unsigned char *dst,
    const unsigned char *src)
{
    int pos;
    for (pos = 0; pos != 16; ++pos)
    4bf8:	68fb      	ldr	r3, [r7, #12]
    4bfa:	3301      	adds	r3, #1
    4bfc:	60fb      	str	r3, [r7, #12]
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	2b10      	cmp	r3, #16
    4c02:	d1eb      	bne.n	4bdc <cip_xor+0x10>
    *d++ ^= *s++;
    *d++ ^= *s++;
    *d++ ^= *s++;
    *d++ ^= *s++;
    */
}
    4c04:	bf00      	nop
    4c06:	3714      	adds	r7, #20
    4c08:	46bd      	mov	sp, r7
    4c0a:	bc80      	pop	{r7}
    4c0c:	4770      	bx	lr
    4c0e:	bf00      	nop

00004c10 <shift_right_block>:

static void shift_right_block(unsigned char *v)
{
    4c10:	b480      	push	{r7}
    4c12:	b085      	sub	sp, #20
    4c14:	af00      	add	r7, sp, #0
    4c16:	6078      	str	r0, [r7, #4]
    unsigned long val = GETU32(v + 12);
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	330c      	adds	r3, #12
    4c1c:	781b      	ldrb	r3, [r3, #0]
    4c1e:	061a      	lsls	r2, r3, #24
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	330d      	adds	r3, #13
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	041b      	lsls	r3, r3, #16
    4c28:	431a      	orrs	r2, r3
    4c2a:	687b      	ldr	r3, [r7, #4]
    4c2c:	330e      	adds	r3, #14
    4c2e:	781b      	ldrb	r3, [r3, #0]
    4c30:	021b      	lsls	r3, r3, #8
    4c32:	4313      	orrs	r3, r2
    4c34:	687a      	ldr	r2, [r7, #4]
    4c36:	320f      	adds	r2, #15
    4c38:	7812      	ldrb	r2, [r2, #0]
    4c3a:	4313      	orrs	r3, r2
    4c3c:	60fb      	str	r3, [r7, #12]
    val >>= 1;
    4c3e:	68fb      	ldr	r3, [r7, #12]
    4c40:	085b      	lsrs	r3, r3, #1
    4c42:	60fb      	str	r3, [r7, #12]
    if (v[11] & 0x01)
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	330b      	adds	r3, #11
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	f003 0301 	and.w	r3, r3, #1
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d003      	beq.n	4c5a <shift_right_block+0x4a>
    {
        val |= 0x80000000;
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4c58:	60fb      	str	r3, [r7, #12]
    }
    PUT32(v + 12, val);
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	330c      	adds	r3, #12
    4c5e:	68fa      	ldr	r2, [r7, #12]
    4c60:	0e12      	lsrs	r2, r2, #24
    4c62:	b2d2      	uxtb	r2, r2
    4c64:	701a      	strb	r2, [r3, #0]
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	330d      	adds	r3, #13
    4c6a:	68fa      	ldr	r2, [r7, #12]
    4c6c:	0c12      	lsrs	r2, r2, #16
    4c6e:	b2d2      	uxtb	r2, r2
    4c70:	701a      	strb	r2, [r3, #0]
    4c72:	687b      	ldr	r3, [r7, #4]
    4c74:	330e      	adds	r3, #14
    4c76:	68fa      	ldr	r2, [r7, #12]
    4c78:	0a12      	lsrs	r2, r2, #8
    4c7a:	b2d2      	uxtb	r2, r2
    4c7c:	701a      	strb	r2, [r3, #0]
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	330f      	adds	r3, #15
    4c82:	68fa      	ldr	r2, [r7, #12]
    4c84:	b2d2      	uxtb	r2, r2
    4c86:	701a      	strb	r2, [r3, #0]

    val = GETU32(v + 8);
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	3308      	adds	r3, #8
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	061a      	lsls	r2, r3, #24
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	3309      	adds	r3, #9
    4c94:	781b      	ldrb	r3, [r3, #0]
    4c96:	041b      	lsls	r3, r3, #16
    4c98:	431a      	orrs	r2, r3
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	330a      	adds	r3, #10
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	021b      	lsls	r3, r3, #8
    4ca2:	4313      	orrs	r3, r2
    4ca4:	687a      	ldr	r2, [r7, #4]
    4ca6:	320b      	adds	r2, #11
    4ca8:	7812      	ldrb	r2, [r2, #0]
    4caa:	4313      	orrs	r3, r2
    4cac:	60fb      	str	r3, [r7, #12]
    val >>= 1;
    4cae:	68fb      	ldr	r3, [r7, #12]
    4cb0:	085b      	lsrs	r3, r3, #1
    4cb2:	60fb      	str	r3, [r7, #12]
    if (v[7] & 0x01)
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	3307      	adds	r3, #7
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	f003 0301 	and.w	r3, r3, #1
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d003      	beq.n	4cca <shift_right_block+0xba>
        val |= 0x80000000;
    4cc2:	68fb      	ldr	r3, [r7, #12]
    4cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4cc8:	60fb      	str	r3, [r7, #12]
    PUT32(v + 8, val);
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	3308      	adds	r3, #8
    4cce:	68fa      	ldr	r2, [r7, #12]
    4cd0:	0e12      	lsrs	r2, r2, #24
    4cd2:	b2d2      	uxtb	r2, r2
    4cd4:	701a      	strb	r2, [r3, #0]
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	3309      	adds	r3, #9
    4cda:	68fa      	ldr	r2, [r7, #12]
    4cdc:	0c12      	lsrs	r2, r2, #16
    4cde:	b2d2      	uxtb	r2, r2
    4ce0:	701a      	strb	r2, [r3, #0]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	330a      	adds	r3, #10
    4ce6:	68fa      	ldr	r2, [r7, #12]
    4ce8:	0a12      	lsrs	r2, r2, #8
    4cea:	b2d2      	uxtb	r2, r2
    4cec:	701a      	strb	r2, [r3, #0]
    4cee:	687b      	ldr	r3, [r7, #4]
    4cf0:	330b      	adds	r3, #11
    4cf2:	68fa      	ldr	r2, [r7, #12]
    4cf4:	b2d2      	uxtb	r2, r2
    4cf6:	701a      	strb	r2, [r3, #0]

    val = GETU32(v + 4);
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	3304      	adds	r3, #4
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	061a      	lsls	r2, r3, #24
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	3305      	adds	r3, #5
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	041b      	lsls	r3, r3, #16
    4d08:	431a      	orrs	r2, r3
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	3306      	adds	r3, #6
    4d0e:	781b      	ldrb	r3, [r3, #0]
    4d10:	021b      	lsls	r3, r3, #8
    4d12:	4313      	orrs	r3, r2
    4d14:	687a      	ldr	r2, [r7, #4]
    4d16:	3207      	adds	r2, #7
    4d18:	7812      	ldrb	r2, [r2, #0]
    4d1a:	4313      	orrs	r3, r2
    4d1c:	60fb      	str	r3, [r7, #12]
    val >>= 1;
    4d1e:	68fb      	ldr	r3, [r7, #12]
    4d20:	085b      	lsrs	r3, r3, #1
    4d22:	60fb      	str	r3, [r7, #12]
    if (v[3] & 0x01)
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	3303      	adds	r3, #3
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	f003 0301 	and.w	r3, r3, #1
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d003      	beq.n	4d3a <shift_right_block+0x12a>
        val |= 0x80000000;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4d38:	60fb      	str	r3, [r7, #12]
    PUT32(v + 4, val);
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	3304      	adds	r3, #4
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	0e12      	lsrs	r2, r2, #24
    4d42:	b2d2      	uxtb	r2, r2
    4d44:	701a      	strb	r2, [r3, #0]
    4d46:	687b      	ldr	r3, [r7, #4]
    4d48:	3305      	adds	r3, #5
    4d4a:	68fa      	ldr	r2, [r7, #12]
    4d4c:	0c12      	lsrs	r2, r2, #16
    4d4e:	b2d2      	uxtb	r2, r2
    4d50:	701a      	strb	r2, [r3, #0]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	3306      	adds	r3, #6
    4d56:	68fa      	ldr	r2, [r7, #12]
    4d58:	0a12      	lsrs	r2, r2, #8
    4d5a:	b2d2      	uxtb	r2, r2
    4d5c:	701a      	strb	r2, [r3, #0]
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	3307      	adds	r3, #7
    4d62:	68fa      	ldr	r2, [r7, #12]
    4d64:	b2d2      	uxtb	r2, r2
    4d66:	701a      	strb	r2, [r3, #0]

    val = GETU32(v);
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	061a      	lsls	r2, r3, #24
    4d6e:	687b      	ldr	r3, [r7, #4]
    4d70:	3301      	adds	r3, #1
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	041b      	lsls	r3, r3, #16
    4d76:	431a      	orrs	r2, r3
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	3302      	adds	r3, #2
    4d7c:	781b      	ldrb	r3, [r3, #0]
    4d7e:	021b      	lsls	r3, r3, #8
    4d80:	4313      	orrs	r3, r2
    4d82:	687a      	ldr	r2, [r7, #4]
    4d84:	3203      	adds	r2, #3
    4d86:	7812      	ldrb	r2, [r2, #0]
    4d88:	4313      	orrs	r3, r2
    4d8a:	60fb      	str	r3, [r7, #12]
    val >>= 1;
    4d8c:	68fb      	ldr	r3, [r7, #12]
    4d8e:	085b      	lsrs	r3, r3, #1
    4d90:	60fb      	str	r3, [r7, #12]
    PUT32(v, val);
    4d92:	68fb      	ldr	r3, [r7, #12]
    4d94:	0e1b      	lsrs	r3, r3, #24
    4d96:	b2da      	uxtb	r2, r3
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	701a      	strb	r2, [r3, #0]
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	3301      	adds	r3, #1
    4da0:	68fa      	ldr	r2, [r7, #12]
    4da2:	0c12      	lsrs	r2, r2, #16
    4da4:	b2d2      	uxtb	r2, r2
    4da6:	701a      	strb	r2, [r3, #0]
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	3302      	adds	r3, #2
    4dac:	68fa      	ldr	r2, [r7, #12]
    4dae:	0a12      	lsrs	r2, r2, #8
    4db0:	b2d2      	uxtb	r2, r2
    4db2:	701a      	strb	r2, [r3, #0]
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	3303      	adds	r3, #3
    4db8:	68fa      	ldr	r2, [r7, #12]
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	701a      	strb	r2, [r3, #0]
}
    4dbe:	bf00      	nop
    4dc0:	3714      	adds	r7, #20
    4dc2:	46bd      	mov	sp, r7
    4dc4:	bc80      	pop	{r7}
    4dc6:	4770      	bx	lr

00004dc8 <cip_multiplyH>:

static void cip_multiplyH(const unsigned char *x, const unsigned char* y, unsigned char * z)
{
    4dc8:	b590      	push	{r4, r7, lr}
    4dca:	b08b      	sub	sp, #44	; 0x2c
    4dcc:	af00      	add	r7, sp, #0
    4dce:	60f8      	str	r0, [r7, #12]
    4dd0:	60b9      	str	r1, [r7, #8]
    4dd2:	607a      	str	r2, [r7, #4]
    unsigned char tmp[16];
    int i, j;

    memset(z, 0, 16);
    4dd4:	2210      	movs	r2, #16
    4dd6:	2100      	movs	r1, #0
    4dd8:	6878      	ldr	r0, [r7, #4]
    4dda:	f024 fe78 	bl	29ace <memset>
    memcpy(tmp, y, 16);
    4dde:	68bb      	ldr	r3, [r7, #8]
    4de0:	f107 0410 	add.w	r4, r7, #16
    4de4:	6818      	ldr	r0, [r3, #0]
    4de6:	6859      	ldr	r1, [r3, #4]
    4de8:	689a      	ldr	r2, [r3, #8]
    4dea:	68db      	ldr	r3, [r3, #12]
    4dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    for (i = 0; i < 16; i++)
    4dee:	2300      	movs	r3, #0
    4df0:	627b      	str	r3, [r7, #36]	; 0x24
    4df2:	e035      	b.n	4e60 <cip_multiplyH+0x98>
    {
        for (j = 0; j < 8; j++)
    4df4:	2300      	movs	r3, #0
    4df6:	623b      	str	r3, [r7, #32]
    4df8:	e02c      	b.n	4e54 <cip_multiplyH+0x8c>
        {
            if (x[i] & 1 << (7 - j))
    4dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dfc:	68fa      	ldr	r2, [r7, #12]
    4dfe:	4413      	add	r3, r2
    4e00:	781b      	ldrb	r3, [r3, #0]
    4e02:	461a      	mov	r2, r3
    4e04:	6a3b      	ldr	r3, [r7, #32]
    4e06:	f1c3 0307 	rsb	r3, r3, #7
    4e0a:	fa42 f303 	asr.w	r3, r2, r3
    4e0e:	f003 0301 	and.w	r3, r3, #1
    4e12:	2b00      	cmp	r3, #0
    4e14:	d005      	beq.n	4e22 <cip_multiplyH+0x5a>
            {
                cip_xor(z, tmp);
    4e16:	f107 0310 	add.w	r3, r7, #16
    4e1a:	4619      	mov	r1, r3
    4e1c:	6878      	ldr	r0, [r7, #4]
    4e1e:	f7ff fed5 	bl	4bcc <cip_xor>
            }
            //If last bit.
            if (tmp[15] & 0x01)
    4e22:	7ffb      	ldrb	r3, [r7, #31]
    4e24:	f003 0301 	and.w	r3, r3, #1
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d00b      	beq.n	4e44 <cip_multiplyH+0x7c>
            {
                shift_right_block(tmp);
    4e2c:	f107 0310 	add.w	r3, r7, #16
    4e30:	4618      	mov	r0, r3
    4e32:	f7ff feed 	bl	4c10 <shift_right_block>
                tmp[0] ^= 0xe1;
    4e36:	7c3b      	ldrb	r3, [r7, #16]
    4e38:	f083 031e 	eor.w	r3, r3, #30
    4e3c:	43db      	mvns	r3, r3
    4e3e:	b2db      	uxtb	r3, r3
    4e40:	743b      	strb	r3, [r7, #16]
    4e42:	e004      	b.n	4e4e <cip_multiplyH+0x86>
            }
            else
            {
                shift_right_block(tmp);
    4e44:	f107 0310 	add.w	r3, r7, #16
    4e48:	4618      	mov	r0, r3
    4e4a:	f7ff fee1 	bl	4c10 <shift_right_block>
    memset(z, 0, 16);
    memcpy(tmp, y, 16);

    for (i = 0; i < 16; i++)
    {
        for (j = 0; j < 8; j++)
    4e4e:	6a3b      	ldr	r3, [r7, #32]
    4e50:	3301      	adds	r3, #1
    4e52:	623b      	str	r3, [r7, #32]
    4e54:	6a3b      	ldr	r3, [r7, #32]
    4e56:	2b07      	cmp	r3, #7
    4e58:	ddcf      	ble.n	4dfa <cip_multiplyH+0x32>
    int i, j;

    memset(z, 0, 16);
    memcpy(tmp, y, 16);

    for (i = 0; i < 16; i++)
    4e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e5c:	3301      	adds	r3, #1
    4e5e:	627b      	str	r3, [r7, #36]	; 0x24
    4e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e62:	2b0f      	cmp	r3, #15
    4e64:	ddc6      	ble.n	4df4 <cip_multiplyH+0x2c>
            {
                shift_right_block(tmp);
            }
        }
    }
}
    4e66:	bf00      	nop
    4e68:	372c      	adds	r7, #44	; 0x2c
    4e6a:	46bd      	mov	sp, r7
    4e6c:	bd90      	pop	{r4, r7, pc}
    4e6e:	bf00      	nop

00004e70 <cip_getGHash>:
static void cip_getGHash(
    const unsigned char *h,
    const unsigned char *x,
    int xlen,
    unsigned char *y)
{
    4e70:	b5b0      	push	{r4, r5, r7, lr}
    4e72:	b08c      	sub	sp, #48	; 0x30
    4e74:	af00      	add	r7, sp, #0
    4e76:	60f8      	str	r0, [r7, #12]
    4e78:	60b9      	str	r1, [r7, #8]
    4e7a:	607a      	str	r2, [r7, #4]
    4e7c:	603b      	str	r3, [r7, #0]
    int m, i;
    const unsigned char* xpos = x;
    4e7e:	68bb      	ldr	r3, [r7, #8]
    4e80:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned char tmp[16];
    m = xlen / 16;
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	2b00      	cmp	r3, #0
    4e86:	da00      	bge.n	4e8a <cip_getGHash+0x1a>
    4e88:	330f      	adds	r3, #15
    4e8a:	111b      	asrs	r3, r3, #4
    4e8c:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < m; i++)
    4e8e:	2300      	movs	r3, #0
    4e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    4e92:	e019      	b.n	4ec8 <cip_getGHash+0x58>
    {
        cip_xor(y, xpos);
    4e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4e96:	6838      	ldr	r0, [r7, #0]
    4e98:	f7ff fe98 	bl	4bcc <cip_xor>
        xpos += 16;
    4e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4e9e:	3310      	adds	r3, #16
    4ea0:	62bb      	str	r3, [r7, #40]	; 0x28
        cip_multiplyH(y, h, tmp);
    4ea2:	f107 0310 	add.w	r3, r7, #16
    4ea6:	461a      	mov	r2, r3
    4ea8:	68f9      	ldr	r1, [r7, #12]
    4eaa:	6838      	ldr	r0, [r7, #0]
    4eac:	f7ff ff8c 	bl	4dc8 <cip_multiplyH>
        memcpy(y, tmp, 16);
    4eb0:	683b      	ldr	r3, [r7, #0]
    4eb2:	461d      	mov	r5, r3
    4eb4:	f107 0410 	add.w	r4, r7, #16
    4eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4eba:	6028      	str	r0, [r5, #0]
    4ebc:	6069      	str	r1, [r5, #4]
    4ebe:	60aa      	str	r2, [r5, #8]
    4ec0:	60eb      	str	r3, [r5, #12]
{
    int m, i;
    const unsigned char* xpos = x;
    unsigned char tmp[16];
    m = xlen / 16;
    for (i = 0; i < m; i++)
    4ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ec4:	3301      	adds	r3, #1
    4ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    4ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ecc:	429a      	cmp	r2, r3
    4ece:	dbe1      	blt.n	4e94 <cip_getGHash+0x24>
        cip_xor(y, xpos);
        xpos += 16;
        cip_multiplyH(y, h, tmp);
        memcpy(y, tmp, 16);
    }
    if (x + xlen > xpos)
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	68ba      	ldr	r2, [r7, #8]
    4ed4:	441a      	add	r2, r3
    4ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ed8:	429a      	cmp	r2, r3
    4eda:	d92e      	bls.n	4f3a <cip_getGHash+0xca>
    {
        size_t last = x + xlen - xpos;
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	68ba      	ldr	r2, [r7, #8]
    4ee0:	4413      	add	r3, r2
    4ee2:	461a      	mov	r2, r3
    4ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ee6:	1ad3      	subs	r3, r2, r3
    4ee8:	623b      	str	r3, [r7, #32]
        memcpy(tmp, xpos, last);
    4eea:	f107 0310 	add.w	r3, r7, #16
    4eee:	6a3a      	ldr	r2, [r7, #32]
    4ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4ef2:	4618      	mov	r0, r3
    4ef4:	f024 fdc5 	bl	29a82 <memcpy>
        memset(tmp + last, 0, sizeof(tmp) - last);
    4ef8:	f107 0210 	add.w	r2, r7, #16
    4efc:	6a3b      	ldr	r3, [r7, #32]
    4efe:	18d0      	adds	r0, r2, r3
    4f00:	6a3b      	ldr	r3, [r7, #32]
    4f02:	f1c3 0310 	rsb	r3, r3, #16
    4f06:	461a      	mov	r2, r3
    4f08:	2100      	movs	r1, #0
    4f0a:	f024 fde0 	bl	29ace <memset>

        cip_xor(y, tmp);
    4f0e:	f107 0310 	add.w	r3, r7, #16
    4f12:	4619      	mov	r1, r3
    4f14:	6838      	ldr	r0, [r7, #0]
    4f16:	f7ff fe59 	bl	4bcc <cip_xor>

        cip_multiplyH(y, h, tmp);
    4f1a:	f107 0310 	add.w	r3, r7, #16
    4f1e:	461a      	mov	r2, r3
    4f20:	68f9      	ldr	r1, [r7, #12]
    4f22:	6838      	ldr	r0, [r7, #0]
    4f24:	f7ff ff50 	bl	4dc8 <cip_multiplyH>
        memcpy(y, tmp, 16);
    4f28:	683b      	ldr	r3, [r7, #0]
    4f2a:	461d      	mov	r5, r3
    4f2c:	f107 0410 	add.w	r4, r7, #16
    4f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4f32:	6028      	str	r0, [r5, #0]
    4f34:	6069      	str	r1, [r5, #4]
    4f36:	60aa      	str	r2, [r5, #8]
    4f38:	60eb      	str	r3, [r5, #12]
    }
}
    4f3a:	bf00      	nop
    4f3c:	3730      	adds	r7, #48	; 0x30
    4f3e:	46bd      	mov	sp, r7
    4f40:	bdb0      	pop	{r4, r5, r7, pc}
    4f42:	bf00      	nop

00004f44 <cip_init_j0>:
static void cip_init_j0(
    const unsigned char* iv,
    unsigned char len,
    const unsigned char* H,
    unsigned char* J0)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b088      	sub	sp, #32
    4f48:	af00      	add	r7, sp, #0
    4f4a:	60f8      	str	r0, [r7, #12]
    4f4c:	607a      	str	r2, [r7, #4]
    4f4e:	603b      	str	r3, [r7, #0]
    4f50:	460b      	mov	r3, r1
    4f52:	72fb      	strb	r3, [r7, #11]
    //IV length.
    if (len == 12)
    4f54:	7afb      	ldrb	r3, [r7, #11]
    4f56:	2b0c      	cmp	r3, #12
    4f58:	d114      	bne.n	4f84 <cip_init_j0+0x40>
    {
        memcpy(J0, iv, len);
    4f5a:	7afb      	ldrb	r3, [r7, #11]
    4f5c:	461a      	mov	r2, r3
    4f5e:	68f9      	ldr	r1, [r7, #12]
    4f60:	6838      	ldr	r0, [r7, #0]
    4f62:	f024 fd8e 	bl	29a82 <memcpy>
        memset(J0 + len, 0, 16 - len);
    4f66:	7afb      	ldrb	r3, [r7, #11]
    4f68:	683a      	ldr	r2, [r7, #0]
    4f6a:	18d0      	adds	r0, r2, r3
    4f6c:	7afb      	ldrb	r3, [r7, #11]
    4f6e:	f1c3 0310 	rsb	r3, r3, #16
    4f72:	461a      	mov	r2, r3
    4f74:	2100      	movs	r1, #0
    4f76:	f024 fdaa 	bl	29ace <memset>
        J0[15] = 0x01;
    4f7a:	683b      	ldr	r3, [r7, #0]
    4f7c:	330f      	adds	r3, #15
    4f7e:	2201      	movs	r2, #1
    4f80:	701a      	strb	r2, [r3, #0]
        //This is done because microcontrollers show warning here.
        PUT32(tmp + 8, (unsigned long)0);
        PUT32(tmp + 12, (unsigned long)(len * 8));
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    }
}
    4f82:	e03c      	b.n	4ffe <cip_init_j0+0xba>
        J0[15] = 0x01;
    }
    else
    {
        unsigned char tmp[16];
        memset(J0, 0, 16);
    4f84:	2210      	movs	r2, #16
    4f86:	2100      	movs	r1, #0
    4f88:	6838      	ldr	r0, [r7, #0]
    4f8a:	f024 fda0 	bl	29ace <memset>
        cip_getGHash(H, iv, len, J0);
    4f8e:	7afa      	ldrb	r2, [r7, #11]
    4f90:	683b      	ldr	r3, [r7, #0]
    4f92:	68f9      	ldr	r1, [r7, #12]
    4f94:	6878      	ldr	r0, [r7, #4]
    4f96:	f7ff ff6b 	bl	4e70 <cip_getGHash>
        PUT32(tmp, (unsigned long)0);
    4f9a:	2300      	movs	r3, #0
    4f9c:	743b      	strb	r3, [r7, #16]
    4f9e:	2300      	movs	r3, #0
    4fa0:	747b      	strb	r3, [r7, #17]
    4fa2:	2300      	movs	r3, #0
    4fa4:	74bb      	strb	r3, [r7, #18]
    4fa6:	2300      	movs	r3, #0
    4fa8:	74fb      	strb	r3, [r7, #19]
        PUT32(tmp + 4, (unsigned long)0);
    4faa:	2300      	movs	r3, #0
    4fac:	753b      	strb	r3, [r7, #20]
    4fae:	2300      	movs	r3, #0
    4fb0:	757b      	strb	r3, [r7, #21]
    4fb2:	2300      	movs	r3, #0
    4fb4:	75bb      	strb	r3, [r7, #22]
    4fb6:	2300      	movs	r3, #0
    4fb8:	75fb      	strb	r3, [r7, #23]
        //Here is expected that data is newer longger than 32 bit.
        //This is done because microcontrollers show warning here.
        PUT32(tmp + 8, (unsigned long)0);
    4fba:	2300      	movs	r3, #0
    4fbc:	763b      	strb	r3, [r7, #24]
    4fbe:	2300      	movs	r3, #0
    4fc0:	767b      	strb	r3, [r7, #25]
    4fc2:	2300      	movs	r3, #0
    4fc4:	76bb      	strb	r3, [r7, #26]
    4fc6:	2300      	movs	r3, #0
    4fc8:	76fb      	strb	r3, [r7, #27]
        PUT32(tmp + 12, (unsigned long)(len * 8));
    4fca:	7afb      	ldrb	r3, [r7, #11]
    4fcc:	00db      	lsls	r3, r3, #3
    4fce:	0e1b      	lsrs	r3, r3, #24
    4fd0:	b2db      	uxtb	r3, r3
    4fd2:	773b      	strb	r3, [r7, #28]
    4fd4:	7afb      	ldrb	r3, [r7, #11]
    4fd6:	00db      	lsls	r3, r3, #3
    4fd8:	0c1b      	lsrs	r3, r3, #16
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	777b      	strb	r3, [r7, #29]
    4fde:	7afb      	ldrb	r3, [r7, #11]
    4fe0:	00db      	lsls	r3, r3, #3
    4fe2:	0a1b      	lsrs	r3, r3, #8
    4fe4:	b2db      	uxtb	r3, r3
    4fe6:	77bb      	strb	r3, [r7, #30]
    4fe8:	7afb      	ldrb	r3, [r7, #11]
    4fea:	00db      	lsls	r3, r3, #3
    4fec:	b2db      	uxtb	r3, r3
    4fee:	77fb      	strb	r3, [r7, #31]
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    4ff0:	f107 0110 	add.w	r1, r7, #16
    4ff4:	683b      	ldr	r3, [r7, #0]
    4ff6:	2210      	movs	r2, #16
    4ff8:	6878      	ldr	r0, [r7, #4]
    4ffa:	f7ff ff39 	bl	4e70 <cip_getGHash>
    }
}
    4ffe:	bf00      	nop
    5000:	3720      	adds	r7, #32
    5002:	46bd      	mov	sp, r7
    5004:	bd80      	pop	{r7, pc}
    5006:	bf00      	nop

00005008 <cip_inc32>:

static void cip_inc32(unsigned char *block)
{
    5008:	b480      	push	{r7}
    500a:	b085      	sub	sp, #20
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
    unsigned long val;
    val = GETU32(block + 16 - 4);
    5010:	687b      	ldr	r3, [r7, #4]
    5012:	330c      	adds	r3, #12
    5014:	781b      	ldrb	r3, [r3, #0]
    5016:	061a      	lsls	r2, r3, #24
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	330d      	adds	r3, #13
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	041b      	lsls	r3, r3, #16
    5020:	431a      	orrs	r2, r3
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	330e      	adds	r3, #14
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	021b      	lsls	r3, r3, #8
    502a:	4313      	orrs	r3, r2
    502c:	687a      	ldr	r2, [r7, #4]
    502e:	320f      	adds	r2, #15
    5030:	7812      	ldrb	r2, [r2, #0]
    5032:	4313      	orrs	r3, r2
    5034:	60fb      	str	r3, [r7, #12]
    val++;
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	3301      	adds	r3, #1
    503a:	60fb      	str	r3, [r7, #12]
    PUT32(block + 16 - 4, val);
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	330c      	adds	r3, #12
    5040:	68fa      	ldr	r2, [r7, #12]
    5042:	0e12      	lsrs	r2, r2, #24
    5044:	b2d2      	uxtb	r2, r2
    5046:	701a      	strb	r2, [r3, #0]
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	330d      	adds	r3, #13
    504c:	68fa      	ldr	r2, [r7, #12]
    504e:	0c12      	lsrs	r2, r2, #16
    5050:	b2d2      	uxtb	r2, r2
    5052:	701a      	strb	r2, [r3, #0]
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	330e      	adds	r3, #14
    5058:	68fa      	ldr	r2, [r7, #12]
    505a:	0a12      	lsrs	r2, r2, #8
    505c:	b2d2      	uxtb	r2, r2
    505e:	701a      	strb	r2, [r3, #0]
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	330f      	adds	r3, #15
    5064:	68fa      	ldr	r2, [r7, #12]
    5066:	b2d2      	uxtb	r2, r2
    5068:	701a      	strb	r2, [r3, #0]
}
    506a:	bf00      	nop
    506c:	3714      	adds	r7, #20
    506e:	46bd      	mov	sp, r7
    5070:	bc80      	pop	{r7}
    5072:	4770      	bx	lr

00005074 <cip_gctr>:

static void cip_gctr(unsigned long *aes, const unsigned char *icb, const unsigned char *x, int xlen, unsigned char *y)
{
    5074:	b590      	push	{r4, r7, lr}
    5076:	b093      	sub	sp, #76	; 0x4c
    5078:	af00      	add	r7, sp, #0
    507a:	60f8      	str	r0, [r7, #12]
    507c:	60b9      	str	r1, [r7, #8]
    507e:	607a      	str	r2, [r7, #4]
    5080:	603b      	str	r3, [r7, #0]
    size_t i, n, last;
    unsigned char cb[16], tmp[16];
    const unsigned char *xpos = x;
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char *ypos = y;
    5086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5088:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (xlen == 0)
    508a:	683b      	ldr	r3, [r7, #0]
    508c:	2b00      	cmp	r3, #0
    508e:	d060      	beq.n	5152 <cip_gctr+0xde>
    {
        return;
    }
    n = xlen / 16;
    5090:	683b      	ldr	r3, [r7, #0]
    5092:	2b00      	cmp	r3, #0
    5094:	da00      	bge.n	5098 <cip_gctr+0x24>
    5096:	330f      	adds	r3, #15
    5098:	111b      	asrs	r3, r3, #4
    509a:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(cb, icb, 16);
    509c:	68bb      	ldr	r3, [r7, #8]
    509e:	f107 0424 	add.w	r4, r7, #36	; 0x24
    50a2:	6818      	ldr	r0, [r3, #0]
    50a4:	6859      	ldr	r1, [r3, #4]
    50a6:	689a      	ldr	r2, [r3, #8]
    50a8:	68db      	ldr	r3, [r3, #12]
    50aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    //Full blocks.
    for (i = 0; i < n; i++)
    50ac:	2300      	movs	r3, #0
    50ae:	647b      	str	r3, [r7, #68]	; 0x44
    50b0:	e01b      	b.n	50ea <cip_gctr+0x76>
    {
        aes_encrypt(aes, aes[60], cb, ypos);
    50b2:	68fb      	ldr	r3, [r7, #12]
    50b4:	33f0      	adds	r3, #240	; 0xf0
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	4619      	mov	r1, r3
    50ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
    50be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50c0:	68f8      	ldr	r0, [r7, #12]
    50c2:	f7ff faf5 	bl	46b0 <aes_encrypt>
        cip_xor(ypos, xpos);
    50c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    50c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    50ca:	f7ff fd7f 	bl	4bcc <cip_xor>
        xpos += 16;
    50ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50d0:	3310      	adds	r3, #16
    50d2:	643b      	str	r3, [r7, #64]	; 0x40
        ypos += 16;
    50d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50d6:	3310      	adds	r3, #16
    50d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        cip_inc32(cb);
    50da:	f107 0324 	add.w	r3, r7, #36	; 0x24
    50de:	4618      	mov	r0, r3
    50e0:	f7ff ff92 	bl	5008 <cip_inc32>
        return;
    }
    n = xlen / 16;
    memcpy(cb, icb, 16);
    //Full blocks.
    for (i = 0; i < n; i++)
    50e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    50e6:	3301      	adds	r3, #1
    50e8:	647b      	str	r3, [r7, #68]	; 0x44
    50ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    50ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50ee:	429a      	cmp	r2, r3
    50f0:	d3df      	bcc.n	50b2 <cip_gctr+0x3e>
        xpos += 16;
        ypos += 16;
        cip_inc32(cb);
    }

    last = x + xlen - xpos;
    50f2:	683b      	ldr	r3, [r7, #0]
    50f4:	687a      	ldr	r2, [r7, #4]
    50f6:	4413      	add	r3, r2
    50f8:	461a      	mov	r2, r3
    50fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50fc:	1ad3      	subs	r3, r2, r3
    50fe:	637b      	str	r3, [r7, #52]	; 0x34
    //Last, partial block.
    if (last)
    5100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5102:	2b00      	cmp	r3, #0
    5104:	d026      	beq.n	5154 <cip_gctr+0xe0>
    {
        aes_encrypt(aes, aes[60], cb, tmp);
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	33f0      	adds	r3, #240	; 0xf0
    510a:	681b      	ldr	r3, [r3, #0]
    510c:	4619      	mov	r1, r3
    510e:	f107 0314 	add.w	r3, r7, #20
    5112:	f107 0224 	add.w	r2, r7, #36	; 0x24
    5116:	68f8      	ldr	r0, [r7, #12]
    5118:	f7ff faca 	bl	46b0 <aes_encrypt>
        for (i = 0; i < last; i++)
    511c:	2300      	movs	r3, #0
    511e:	647b      	str	r3, [r7, #68]	; 0x44
    5120:	e012      	b.n	5148 <cip_gctr+0xd4>
        {
            *ypos = *xpos++ ^ tmp[i];
    5122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5124:	1c5a      	adds	r2, r3, #1
    5126:	643a      	str	r2, [r7, #64]	; 0x40
    5128:	781a      	ldrb	r2, [r3, #0]
    512a:	f107 0114 	add.w	r1, r7, #20
    512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5130:	440b      	add	r3, r1
    5132:	781b      	ldrb	r3, [r3, #0]
    5134:	4053      	eors	r3, r2
    5136:	b2da      	uxtb	r2, r3
    5138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    513a:	701a      	strb	r2, [r3, #0]
            ++ypos;
    513c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    513e:	3301      	adds	r3, #1
    5140:	63fb      	str	r3, [r7, #60]	; 0x3c
    last = x + xlen - xpos;
    //Last, partial block.
    if (last)
    {
        aes_encrypt(aes, aes[60], cb, tmp);
        for (i = 0; i < last; i++)
    5142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5144:	3301      	adds	r3, #1
    5146:	647b      	str	r3, [r7, #68]	; 0x44
    5148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    514c:	429a      	cmp	r2, r3
    514e:	d3e8      	bcc.n	5122 <cip_gctr+0xae>
    5150:	e000      	b.n	5154 <cip_gctr+0xe0>
    const unsigned char *xpos = x;
    unsigned char *ypos = y;

    if (xlen == 0)
    {
        return;
    5152:	bf00      	nop
        {
            *ypos = *xpos++ ^ tmp[i];
            ++ypos;
        }
    }
}
    5154:	374c      	adds	r7, #76	; 0x4c
    5156:	46bd      	mov	sp, r7
    5158:	bd90      	pop	{r4, r7, pc}
    515a:	bf00      	nop

0000515c <aes_gcm_gctr>:

static void aes_gcm_gctr(unsigned long *aes, const unsigned char *J0, const unsigned char *in, int len, unsigned char *out)
{
    515c:	b590      	push	{r4, r7, lr}
    515e:	b08b      	sub	sp, #44	; 0x2c
    5160:	af02      	add	r7, sp, #8
    5162:	60f8      	str	r0, [r7, #12]
    5164:	60b9      	str	r1, [r7, #8]
    5166:	607a      	str	r2, [r7, #4]
    5168:	603b      	str	r3, [r7, #0]
    unsigned char J0inc[16];
    if (len == 0)
    516a:	683b      	ldr	r3, [r7, #0]
    516c:	2b00      	cmp	r3, #0
    516e:	d016      	beq.n	519e <aes_gcm_gctr+0x42>
    {
        return;
    }

    memcpy(J0inc, J0, 16);
    5170:	68bb      	ldr	r3, [r7, #8]
    5172:	f107 0410 	add.w	r4, r7, #16
    5176:	6818      	ldr	r0, [r3, #0]
    5178:	6859      	ldr	r1, [r3, #4]
    517a:	689a      	ldr	r2, [r3, #8]
    517c:	68db      	ldr	r3, [r3, #12]
    517e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cip_inc32(J0inc);
    5180:	f107 0310 	add.w	r3, r7, #16
    5184:	4618      	mov	r0, r3
    5186:	f7ff ff3f 	bl	5008 <cip_inc32>
    cip_gctr(aes, J0inc, in, len, out);
    518a:	f107 0110 	add.w	r1, r7, #16
    518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5190:	9300      	str	r3, [sp, #0]
    5192:	683b      	ldr	r3, [r7, #0]
    5194:	687a      	ldr	r2, [r7, #4]
    5196:	68f8      	ldr	r0, [r7, #12]
    5198:	f7ff ff6c 	bl	5074 <cip_gctr>
    519c:	e000      	b.n	51a0 <aes_gcm_gctr+0x44>
static void aes_gcm_gctr(unsigned long *aes, const unsigned char *J0, const unsigned char *in, int len, unsigned char *out)
{
    unsigned char J0inc[16];
    if (len == 0)
    {
        return;
    519e:	bf00      	nop
    }

    memcpy(J0inc, J0, 16);
    cip_inc32(J0inc);
    cip_gctr(aes, J0inc, in, len, out);
}
    51a0:	3724      	adds	r7, #36	; 0x24
    51a2:	46bd      	mov	sp, r7
    51a4:	bd90      	pop	{r4, r7, pc}
    51a6:	bf00      	nop

000051a8 <aes_gcm_ghash>:

static void aes_gcm_ghash(const unsigned char *H, const unsigned char *aad, int aad_len,
    const unsigned char *crypt, int crypt_len, unsigned char *S)
{
    51a8:	b580      	push	{r7, lr}
    51aa:	b088      	sub	sp, #32
    51ac:	af00      	add	r7, sp, #0
    51ae:	60f8      	str	r0, [r7, #12]
    51b0:	60b9      	str	r1, [r7, #8]
    51b2:	607a      	str	r2, [r7, #4]
    51b4:	603b      	str	r3, [r7, #0]
    unsigned char len_buf[16];
    cip_getGHash(H, aad, aad_len, S);
    51b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51b8:	687a      	ldr	r2, [r7, #4]
    51ba:	68b9      	ldr	r1, [r7, #8]
    51bc:	68f8      	ldr	r0, [r7, #12]
    51be:	f7ff fe57 	bl	4e70 <cip_getGHash>
    cip_getGHash(H, crypt, crypt_len, S);
    51c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    51c6:	6839      	ldr	r1, [r7, #0]
    51c8:	68f8      	ldr	r0, [r7, #12]
    51ca:	f7ff fe51 	bl	4e70 <cip_getGHash>
    //Here is expected that data is newer longger than 32 bit.
    //This is done because microcontrollers show warning here.
    PUT32(len_buf, (unsigned long)0);
    51ce:	2300      	movs	r3, #0
    51d0:	743b      	strb	r3, [r7, #16]
    51d2:	2300      	movs	r3, #0
    51d4:	747b      	strb	r3, [r7, #17]
    51d6:	2300      	movs	r3, #0
    51d8:	74bb      	strb	r3, [r7, #18]
    51da:	2300      	movs	r3, #0
    51dc:	74fb      	strb	r3, [r7, #19]
    PUT32(len_buf + 4, (unsigned long)(aad_len * 8));
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	00db      	lsls	r3, r3, #3
    51e2:	0e1b      	lsrs	r3, r3, #24
    51e4:	b2db      	uxtb	r3, r3
    51e6:	753b      	strb	r3, [r7, #20]
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	00db      	lsls	r3, r3, #3
    51ec:	0c1b      	lsrs	r3, r3, #16
    51ee:	b2db      	uxtb	r3, r3
    51f0:	757b      	strb	r3, [r7, #21]
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	00db      	lsls	r3, r3, #3
    51f6:	0a1b      	lsrs	r3, r3, #8
    51f8:	b2db      	uxtb	r3, r3
    51fa:	75bb      	strb	r3, [r7, #22]
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	b2db      	uxtb	r3, r3
    5200:	00db      	lsls	r3, r3, #3
    5202:	b2db      	uxtb	r3, r3
    5204:	75fb      	strb	r3, [r7, #23]
    PUT32(len_buf + 8, (unsigned long)0);
    5206:	2300      	movs	r3, #0
    5208:	763b      	strb	r3, [r7, #24]
    520a:	2300      	movs	r3, #0
    520c:	767b      	strb	r3, [r7, #25]
    520e:	2300      	movs	r3, #0
    5210:	76bb      	strb	r3, [r7, #26]
    5212:	2300      	movs	r3, #0
    5214:	76fb      	strb	r3, [r7, #27]
    PUT32(len_buf + 12, (unsigned long)(crypt_len * 8));
    5216:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5218:	00db      	lsls	r3, r3, #3
    521a:	0e1b      	lsrs	r3, r3, #24
    521c:	b2db      	uxtb	r3, r3
    521e:	773b      	strb	r3, [r7, #28]
    5220:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5222:	00db      	lsls	r3, r3, #3
    5224:	0c1b      	lsrs	r3, r3, #16
    5226:	b2db      	uxtb	r3, r3
    5228:	777b      	strb	r3, [r7, #29]
    522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    522c:	00db      	lsls	r3, r3, #3
    522e:	0a1b      	lsrs	r3, r3, #8
    5230:	b2db      	uxtb	r3, r3
    5232:	77bb      	strb	r3, [r7, #30]
    5234:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5236:	b2db      	uxtb	r3, r3
    5238:	00db      	lsls	r3, r3, #3
    523a:	b2db      	uxtb	r3, r3
    523c:	77fb      	strb	r3, [r7, #31]
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    523e:	f107 0110 	add.w	r1, r7, #16
    5242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5244:	2210      	movs	r2, #16
    5246:	68f8      	ldr	r0, [r7, #12]
    5248:	f7ff fe12 	bl	4e70 <cip_getGHash>
}
    524c:	bf00      	nop
    524e:	3720      	adds	r7, #32
    5250:	46bd      	mov	sp, r7
    5252:	bd80      	pop	{r7, pc}

00005254 <cip_encrypt>:
    unsigned char tag,
    gxByteBuffer *systemTitle,
    gxByteBuffer *key,
    gxByteBuffer *input,
    gxByteBuffer *output)
{
    5254:	b5b0      	push	{r4, r5, r7, lr}
    5256:	b0da      	sub	sp, #360	; 0x168
    5258:	af02      	add	r7, sp, #8
    525a:	f107 040c 	add.w	r4, r7, #12
    525e:	6020      	str	r0, [r4, #0]
    5260:	4608      	mov	r0, r1
    5262:	4611      	mov	r1, r2
    5264:	1d3a      	adds	r2, r7, #4
    5266:	6013      	str	r3, [r2, #0]
    5268:	f107 030b 	add.w	r3, r7, #11
    526c:	4602      	mov	r2, r0
    526e:	701a      	strb	r2, [r3, #0]
    5270:	f107 030a 	add.w	r3, r7, #10
    5274:	460a      	mov	r2, r1
    5276:	701a      	strb	r2, [r3, #0]
    unsigned short headerSize = 0;
    5278:	2300      	movs	r3, #0
    527a:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
    int ret;
    unsigned long tmp[61] = { 0 };
    527e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    5282:	4618      	mov	r0, r3
    5284:	23f4      	movs	r3, #244	; 0xf4
    5286:	461a      	mov	r2, r3
    5288:	2100      	movs	r1, #0
    528a:	f024 fc20 	bl	29ace <memset>
    unsigned char H[16] = { 0 };
    528e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    5292:	461a      	mov	r2, r3
    5294:	2300      	movs	r3, #0
    5296:	6013      	str	r3, [r2, #0]
    5298:	6053      	str	r3, [r2, #4]
    529a:	6093      	str	r3, [r2, #8]
    529c:	60d3      	str	r3, [r2, #12]
    unsigned char J0[16] = { 0 };
    529e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    52a2:	461a      	mov	r2, r3
    52a4:	2300      	movs	r3, #0
    52a6:	6013      	str	r3, [r2, #0]
    52a8:	6053      	str	r3, [r2, #4]
    52aa:	6093      	str	r3, [r2, #8]
    52ac:	60d3      	str	r3, [r2, #12]
    unsigned char S[16] = { 0 };
    52ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    52b2:	461a      	mov	r2, r3
    52b4:	2300      	movs	r3, #0
    52b6:	6013      	str	r3, [r2, #0]
    52b8:	6053      	str	r3, [r2, #4]
    52ba:	6093      	str	r3, [r2, #8]
    52bc:	60d3      	str	r3, [r2, #12]
    gxByteBuffer nonse;
    gxByteBuffer aad;
    if (systemTitle == NULL || systemTitle->size != 8)
    52be:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    52c2:	2b00      	cmp	r3, #0
    52c4:	d004      	beq.n	52d0 <cip_encrypt+0x7c>
    52c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    52ca:	88db      	ldrh	r3, [r3, #6]
    52cc:	2b08      	cmp	r3, #8
    52ce:	d002      	beq.n	52d6 <cip_encrypt+0x82>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    52d0:	f44f 7381 	mov.w	r3, #258	; 0x102
    52d4:	e225      	b.n	5722 <cip_encrypt+0x4ce>
    }
    bb_init(&nonse);
    52d6:	f107 0320 	add.w	r3, r7, #32
    52da:	4618      	mov	r0, r3
    52dc:	f7fd fd04 	bl	2ce8 <bb_init>
    bb_init(&aad);
    52e0:	f107 0314 	add.w	r3, r7, #20
    52e4:	4618      	mov	r0, r3
    52e6:	f7fd fcff 	bl	2ce8 <bb_init>

    if ((ret = cip_getNonse(frameCounter, systemTitle, &nonse)) != 0)
    52ea:	f107 0220 	add.w	r2, r7, #32
    52ee:	1d3b      	adds	r3, r7, #4
    52f0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
    52f4:	6818      	ldr	r0, [r3, #0]
    52f6:	f7fe ff39 	bl	416c <cip_getNonse>
    52fa:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    52fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    5302:	2b00      	cmp	r3, #0
    5304:	d00c      	beq.n	5320 <cip_encrypt+0xcc>
    {
        bb_clear(&nonse);
    5306:	f107 0320 	add.w	r3, r7, #32
    530a:	4618      	mov	r0, r3
    530c:	f7fe fa2a 	bl	3764 <bb_clear>
        bb_clear(&aad);
    5310:	f107 0314 	add.w	r3, r7, #20
    5314:	4618      	mov	r0, r3
    5316:	f7fe fa25 	bl	3764 <bb_clear>
        return ret;
    531a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    531e:	e200      	b.n	5722 <cip_encrypt+0x4ce>
    }
    if ((ret = cip_getAuthenticatedData(
    5320:	f107 030c 	add.w	r3, r7, #12
    5324:	681b      	ldr	r3, [r3, #0]
    5326:	f103 0120 	add.w	r1, r3, #32
    532a:	f107 0214 	add.w	r2, r7, #20
    532e:	f107 030b 	add.w	r3, r7, #11
    5332:	7818      	ldrb	r0, [r3, #0]
    5334:	4613      	mov	r3, r2
    5336:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
    533a:	f7fe fec7 	bl	40cc <cip_getAuthenticatedData>
    533e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    5342:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    5346:	2b00      	cmp	r3, #0
    5348:	d007      	beq.n	535a <cip_encrypt+0x106>
        security,
        &settings->authenticationKey,
        input,
        &aad)) != 0)
    {
        bb_clear(&aad);
    534a:	f107 0314 	add.w	r3, r7, #20
    534e:	4618      	mov	r0, r3
    5350:	f7fe fa08 	bl	3764 <bb_clear>
        return ret;
    5354:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    5358:	e1e3      	b.n	5722 <cip_encrypt+0x4ce>
    }

    if ((ret = cip_int(tmp, key->data, 16 * 8)) != 0)
    535a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
    535e:	6819      	ldr	r1, [r3, #0]
    5360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    5364:	2280      	movs	r2, #128	; 0x80
    5366:	4618      	mov	r0, r3
    5368:	f7fe ff34 	bl	41d4 <cip_int>
    536c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    5370:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    5374:	2b00      	cmp	r3, #0
    5376:	d00c      	beq.n	5392 <cip_encrypt+0x13e>
    {
        bb_clear(&nonse);
    5378:	f107 0320 	add.w	r3, r7, #32
    537c:	4618      	mov	r0, r3
    537e:	f7fe f9f1 	bl	3764 <bb_clear>
        bb_clear(&aad);
    5382:	f107 0314 	add.w	r3, r7, #20
    5386:	4618      	mov	r0, r3
    5388:	f7fe f9ec 	bl	3764 <bb_clear>
        return ret;
    538c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    5390:	e1c7      	b.n	5722 <cip_encrypt+0x4ce>
    }
    tmp[60] = 10;
    5392:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    5396:	220a      	movs	r2, #10
    5398:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    //Hash subkey.
    aes_encrypt(tmp, tmp[60], H, H);
    539c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    53a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    53a4:	4619      	mov	r1, r3
    53a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    53aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    53ae:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    53b2:	f7ff f97d 	bl	46b0 <aes_encrypt>
    cip_init_j0(nonse.data, (unsigned char)nonse.size, H, J0);
    53b6:	f107 0320 	add.w	r3, r7, #32
    53ba:	6818      	ldr	r0, [r3, #0]
    53bc:	f107 0320 	add.w	r3, r7, #32
    53c0:	88db      	ldrh	r3, [r3, #6]
    53c2:	b2d9      	uxtb	r1, r3
    53c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    53c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    53cc:	f7ff fdba 	bl	4f44 <cip_init_j0>
    bb_capacity(output, 40 + 16 + (2 * input->size));
    53d0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    53d4:	88db      	ldrh	r3, [r3, #6]
    53d6:	331c      	adds	r3, #28
    53d8:	b29b      	uxth	r3, r3
    53da:	005b      	lsls	r3, r3, #1
    53dc:	b29b      	uxth	r3, r3
    53de:	4619      	mov	r1, r3
    53e0:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    53e4:	f7fd fc96 	bl	2d14 <bb_capacity>
    //Data is encrypted.
    if (type == DLMS_COUNT_TYPE_PACKET)
    53e8:	f107 030a 	add.w	r3, r7, #10
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b03      	cmp	r3, #3
    53f0:	d15e      	bne.n	54b0 <cip_encrypt+0x25c>
    {
        bb_setUInt8(output, tag);
    53f2:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
    53f6:	4619      	mov	r1, r3
    53f8:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    53fc:	f7fd fd0a 	bl	2e14 <bb_setUInt8>
        int len = 5 + input->size;
    5400:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    5404:	88db      	ldrh	r3, [r3, #6]
    5406:	3305      	adds	r3, #5
    5408:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        if (security != DLMS_SECURITY_ENCRYPTION)
    540c:	f107 030b 	add.w	r3, r7, #11
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	2b20      	cmp	r3, #32
    5414:	d004      	beq.n	5420 <cip_encrypt+0x1cc>
        {
            len += 12;
    5416:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    541a:	330c      	adds	r3, #12
    541c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        }
        if (tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    5420:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
    5424:	2bdb      	cmp	r3, #219	; 0xdb
    5426:	d003      	beq.n	5430 <cip_encrypt+0x1dc>
    5428:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
    542c:	2bdc      	cmp	r3, #220	; 0xdc
    542e:	d115      	bne.n	545c <cip_encrypt+0x208>
            tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
        {
            hlp_setObjectCount(systemTitle->size, output);
    5430:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    5434:	88db      	ldrh	r3, [r3, #6]
    5436:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
    543a:	4618      	mov	r0, r3
    543c:	f01c fa4e 	bl	218dc <hlp_setObjectCount>
            bb_set(output, systemTitle->data, bb_size(systemTitle));
    5440:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    5444:	681c      	ldr	r4, [r3, #0]
    5446:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
    544a:	f7fd fc3d 	bl	2cc8 <bb_size>
    544e:	4603      	mov	r3, r0
    5450:	461a      	mov	r2, r3
    5452:	4621      	mov	r1, r4
    5454:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    5458:	f7fe f882 	bl	3560 <bb_set>
        }
        hlp_setObjectCount(len, output);
    545c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    5460:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
    5464:	4618      	mov	r0, r3
    5466:	f01c fa39 	bl	218dc <hlp_setObjectCount>
        bb_setUInt8(output, security);
    546a:	f107 030b 	add.w	r3, r7, #11
    546e:	781b      	ldrb	r3, [r3, #0]
    5470:	4619      	mov	r1, r3
    5472:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    5476:	f7fd fccd 	bl	2e14 <bb_setUInt8>
        bb_setUInt32(output, frameCounter);
    547a:	1d3b      	adds	r3, r7, #4
    547c:	6819      	ldr	r1, [r3, #0]
    547e:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    5482:	f7fd fdbb 	bl	2ffc <bb_setUInt32>
        headerSize = (unsigned short)output->size;
    5486:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    548a:	88db      	ldrh	r3, [r3, #6]
    548c:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
        if (security == DLMS_SECURITY_AUTHENTICATION)
    5490:	f107 030b 	add.w	r3, r7, #11
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	2b10      	cmp	r3, #16
    5498:	d137      	bne.n	550a <cip_encrypt+0x2b6>
        {
            bb_set2(output, input, 0, input->size);
    549a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    549e:	88db      	ldrh	r3, [r3, #6]
    54a0:	2200      	movs	r2, #0
    54a2:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
    54a6:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    54aa:	f7fe f8b9 	bl	3620 <bb_set2>
    54ae:	e02c      	b.n	550a <cip_encrypt+0x2b6>
        }
    }
    else
    {
        //Data is decrypted.
        if (security == DLMS_SECURITY_AUTHENTICATION ||
    54b0:	f107 030b 	add.w	r3, r7, #11
    54b4:	781b      	ldrb	r3, [r3, #0]
    54b6:	2b10      	cmp	r3, #16
    54b8:	d004      	beq.n	54c4 <cip_encrypt+0x270>
    54ba:	f107 030b 	add.w	r3, r7, #11
    54be:	781b      	ldrb	r3, [r3, #0]
    54c0:	2b30      	cmp	r3, #48	; 0x30
    54c2:	d11a      	bne.n	54fa <cip_encrypt+0x2a6>
            security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
        {
            bb_capacity(output, input->size + (16 % aad.size) + aad.size);
    54c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    54c8:	88d9      	ldrh	r1, [r3, #6]
    54ca:	f107 0314 	add.w	r3, r7, #20
    54ce:	88db      	ldrh	r3, [r3, #6]
    54d0:	461a      	mov	r2, r3
    54d2:	2310      	movs	r3, #16
    54d4:	fb93 f0f2 	sdiv	r0, r3, r2
    54d8:	fb02 f200 	mul.w	r2, r2, r0
    54dc:	1a9b      	subs	r3, r3, r2
    54de:	b29b      	uxth	r3, r3
    54e0:	440b      	add	r3, r1
    54e2:	b29a      	uxth	r2, r3
    54e4:	f107 0314 	add.w	r3, r7, #20
    54e8:	88db      	ldrh	r3, [r3, #6]
    54ea:	4413      	add	r3, r2
    54ec:	b29b      	uxth	r3, r3
    54ee:	4619      	mov	r1, r3
    54f0:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    54f4:	f7fd fc0e 	bl	2d14 <bb_capacity>
    54f8:	e007      	b.n	550a <cip_encrypt+0x2b6>
        }
        else
        {
            bb_capacity(output, input->size);
    54fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    54fe:	88db      	ldrh	r3, [r3, #6]
    5500:	4619      	mov	r1, r3
    5502:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    5506:	f7fd fc05 	bl	2d14 <bb_capacity>
        }
    }
    output->size = input->size + headerSize;
    550a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    550e:	88da      	ldrh	r2, [r3, #6]
    5510:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5514:	4413      	add	r3, r2
    5516:	b29a      	uxth	r2, r3
    5518:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    551c:	80da      	strh	r2, [r3, #6]
    if (security == DLMS_SECURITY_AUTHENTICATION)
    551e:	f107 030b 	add.w	r3, r7, #11
    5522:	781b      	ldrb	r3, [r3, #0]
    5524:	2b10      	cmp	r3, #16
    5526:	d14e      	bne.n	55c6 <cip_encrypt+0x372>
    {
        if (type != DLMS_COUNT_TYPE_PACKET)
    5528:	f107 030a 	add.w	r3, r7, #10
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2b03      	cmp	r3, #3
    5530:	d004      	beq.n	553c <cip_encrypt+0x2e8>
        {
            output->size = 0;
    5532:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5536:	2200      	movs	r2, #0
    5538:	80da      	strh	r2, [r3, #6]
    553a:	e00e      	b.n	555a <cip_encrypt+0x306>
        }
        else
        {
            memcpy(output->data + headerSize, input->data, input->size);
    553c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5540:	681a      	ldr	r2, [r3, #0]
    5542:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5546:	18d0      	adds	r0, r2, r3
    5548:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    554c:	6819      	ldr	r1, [r3, #0]
    554e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    5552:	88db      	ldrh	r3, [r3, #6]
    5554:	461a      	mov	r2, r3
    5556:	f024 fa94 	bl	29a82 <memcpy>
        }
        aes_gcm_ghash(H, aad.data, aad.size, output->data + headerSize, 0, S);
    555a:	f107 0314 	add.w	r3, r7, #20
    555e:	6819      	ldr	r1, [r3, #0]
    5560:	f107 0314 	add.w	r3, r7, #20
    5564:	88db      	ldrh	r3, [r3, #6]
    5566:	461c      	mov	r4, r3
    5568:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    556c:	681a      	ldr	r2, [r3, #0]
    556e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5572:	441a      	add	r2, r3
    5574:	f107 004c 	add.w	r0, r7, #76	; 0x4c
    5578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    557c:	9301      	str	r3, [sp, #4]
    557e:	2300      	movs	r3, #0
    5580:	9300      	str	r3, [sp, #0]
    5582:	4613      	mov	r3, r2
    5584:	4622      	mov	r2, r4
    5586:	f7ff fe0f 	bl	51a8 <aes_gcm_ghash>
        cip_gctr(tmp, J0, S, aad.size, output->data + output->size);
    558a:	f107 0314 	add.w	r3, r7, #20
    558e:	88db      	ldrh	r3, [r3, #6]
    5590:	461c      	mov	r4, r3
    5592:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5596:	681b      	ldr	r3, [r3, #0]
    5598:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
    559c:	88d2      	ldrh	r2, [r2, #6]
    559e:	4413      	add	r3, r2
    55a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    55a4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
    55a8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    55ac:	9300      	str	r3, [sp, #0]
    55ae:	4623      	mov	r3, r4
    55b0:	f7ff fd60 	bl	5074 <cip_gctr>
        output->size += 12;
    55b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    55b8:	88db      	ldrh	r3, [r3, #6]
    55ba:	330c      	adds	r3, #12
    55bc:	b29a      	uxth	r2, r3
    55be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    55c2:	80da      	strh	r2, [r3, #6]
    55c4:	e0a2      	b.n	570c <cip_encrypt+0x4b8>
    }
    else if (security == DLMS_SECURITY_ENCRYPTION)
    55c6:	f107 030b 	add.w	r3, r7, #11
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	2b20      	cmp	r3, #32
    55ce:	d116      	bne.n	55fe <cip_encrypt+0x3aa>
    {
        //Encrypt the data.
        aes_gcm_gctr(tmp, J0, input->data, input->size, output->data + headerSize);
    55d0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    55d4:	681c      	ldr	r4, [r3, #0]
    55d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    55da:	88db      	ldrh	r3, [r3, #6]
    55dc:	461d      	mov	r5, r3
    55de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    55e2:	681a      	ldr	r2, [r3, #0]
    55e4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    55e8:	4413      	add	r3, r2
    55ea:	f107 013c 	add.w	r1, r7, #60	; 0x3c
    55ee:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    55f2:	9300      	str	r3, [sp, #0]
    55f4:	462b      	mov	r3, r5
    55f6:	4622      	mov	r2, r4
    55f8:	f7ff fdb0 	bl	515c <aes_gcm_gctr>
    55fc:	e086      	b.n	570c <cip_encrypt+0x4b8>
    }
    else if (security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    55fe:	f107 030b 	add.w	r3, r7, #11
    5602:	781b      	ldrb	r3, [r3, #0]
    5604:	2b30      	cmp	r3, #48	; 0x30
    5606:	f040 8081 	bne.w	570c <cip_encrypt+0x4b8>
    {
        //Encrypt the data.
        aes_gcm_gctr(tmp, J0, input->data, input->size, output->data + headerSize);
    560a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    560e:	681c      	ldr	r4, [r3, #0]
    5610:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    5614:	88db      	ldrh	r3, [r3, #6]
    5616:	461d      	mov	r5, r3
    5618:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    561c:	681a      	ldr	r2, [r3, #0]
    561e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5622:	4413      	add	r3, r2
    5624:	f107 013c 	add.w	r1, r7, #60	; 0x3c
    5628:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    562c:	9300      	str	r3, [sp, #0]
    562e:	462b      	mov	r3, r5
    5630:	4622      	mov	r2, r4
    5632:	f7ff fd93 	bl	515c <aes_gcm_gctr>
        if ((output->size - headerSize) % 16 != 0)
    5636:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    563a:	88db      	ldrh	r3, [r3, #6]
    563c:	461a      	mov	r2, r3
    563e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5642:	1ad3      	subs	r3, r2, r3
    5644:	f003 030f 	and.w	r3, r3, #15
    5648:	2b00      	cmp	r3, #0
    564a:	d027      	beq.n	569c <cip_encrypt+0x448>
        {
            unsigned short add = 16 - ((output->size - headerSize) % 16);
    564c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5650:	88db      	ldrh	r3, [r3, #6]
    5652:	461a      	mov	r2, r3
    5654:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    5658:	1ad2      	subs	r2, r2, r3
    565a:	4b34      	ldr	r3, [pc, #208]	; (572c <cip_encrypt+0x4d8>)
    565c:	4013      	ands	r3, r2
    565e:	2b00      	cmp	r3, #0
    5660:	da03      	bge.n	566a <cip_encrypt+0x416>
    5662:	3b01      	subs	r3, #1
    5664:	f063 030f 	orn	r3, r3, #15
    5668:	3301      	adds	r3, #1
    566a:	b29b      	uxth	r3, r3
    566c:	f1c3 0310 	rsb	r3, r3, #16
    5670:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
            bb_zero(output, output->size, add);
    5674:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5678:	88db      	ldrh	r3, [r3, #6]
    567a:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
    567e:	4619      	mov	r1, r3
    5680:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
    5684:	f7fd fb94 	bl	2db0 <bb_zero>
            output->size -= add;
    5688:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    568c:	88da      	ldrh	r2, [r3, #6]
    568e:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
    5692:	1ad3      	subs	r3, r2, r3
    5694:	b29a      	uxth	r2, r3
    5696:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    569a:	80da      	strh	r2, [r3, #6]
        }
        aes_gcm_ghash(H, aad.data, aad.size, output->data + headerSize, input->size, S);
    569c:	f107 0314 	add.w	r3, r7, #20
    56a0:	6819      	ldr	r1, [r3, #0]
    56a2:	f107 0314 	add.w	r3, r7, #20
    56a6:	88db      	ldrh	r3, [r3, #6]
    56a8:	461d      	mov	r5, r3
    56aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    56ae:	681a      	ldr	r2, [r3, #0]
    56b0:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
    56b4:	441a      	add	r2, r3
    56b6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    56ba:	88db      	ldrh	r3, [r3, #6]
    56bc:	461c      	mov	r4, r3
    56be:	f107 004c 	add.w	r0, r7, #76	; 0x4c
    56c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    56c6:	9301      	str	r3, [sp, #4]
    56c8:	9400      	str	r4, [sp, #0]
    56ca:	4613      	mov	r3, r2
    56cc:	462a      	mov	r2, r5
    56ce:	f7ff fd6b 	bl	51a8 <aes_gcm_ghash>
        cip_gctr(tmp, J0, S, aad.size, output->data + output->size);
    56d2:	f107 0314 	add.w	r3, r7, #20
    56d6:	88db      	ldrh	r3, [r3, #6]
    56d8:	461c      	mov	r4, r3
    56da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
    56e4:	88d2      	ldrh	r2, [r2, #6]
    56e6:	4413      	add	r3, r2
    56e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    56ec:	f107 013c 	add.w	r1, r7, #60	; 0x3c
    56f0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    56f4:	9300      	str	r3, [sp, #0]
    56f6:	4623      	mov	r3, r4
    56f8:	f7ff fcbc 	bl	5074 <cip_gctr>
        output->size += 12;
    56fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    5700:	88db      	ldrh	r3, [r3, #6]
    5702:	330c      	adds	r3, #12
    5704:	b29a      	uxth	r2, r3
    5706:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    570a:	80da      	strh	r2, [r3, #6]
    }
    bb_clear(&nonse);
    570c:	f107 0320 	add.w	r3, r7, #32
    5710:	4618      	mov	r0, r3
    5712:	f7fe f827 	bl	3764 <bb_clear>
    bb_clear(&aad);
    5716:	f107 0314 	add.w	r3, r7, #20
    571a:	4618      	mov	r0, r3
    571c:	f7fe f822 	bl	3764 <bb_clear>
    return 0;
    5720:	2300      	movs	r3, #0
}
    5722:	4618      	mov	r0, r3
    5724:	f507 77b0 	add.w	r7, r7, #352	; 0x160
    5728:	46bd      	mov	sp, r7
    572a:	bdb0      	pop	{r4, r5, r7, pc}
    572c:	8000000f 	.word	0x8000000f

00005730 <cip_decrypt>:
    ciphering *settings,
    gxByteBuffer *title,
    gxByteBuffer *key,
    gxByteBuffer *data,
    DLMS_SECURITY *security)
{
    5730:	b580      	push	{r7, lr}
    5732:	b09a      	sub	sp, #104	; 0x68
    5734:	af06      	add	r7, sp, #24
    5736:	60f8      	str	r0, [r7, #12]
    5738:	60b9      	str	r1, [r7, #8]
    573a:	607a      	str	r2, [r7, #4]
    573c:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char ch;
    unsigned long frameCounter;
    DLMS_COMMAND cmd;
    gxByteBuffer tag, ciphertext, systemTitle, countTag;
    if (data == NULL || data->size - data->position < 2)
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	2b00      	cmp	r3, #0
    5742:	d007      	beq.n	5754 <cip_decrypt+0x24>
    5744:	683b      	ldr	r3, [r7, #0]
    5746:	88db      	ldrh	r3, [r3, #6]
    5748:	461a      	mov	r2, r3
    574a:	683b      	ldr	r3, [r7, #0]
    574c:	891b      	ldrh	r3, [r3, #8]
    574e:	1ad3      	subs	r3, r2, r3
    5750:	2b01      	cmp	r3, #1
    5752:	dc02      	bgt.n	575a <cip_decrypt+0x2a>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    5754:	f44f 7381 	mov.w	r3, #258	; 0x102
    5758:	e17a      	b.n	5a50 <cip_decrypt+0x320>
    }
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    575a:	f107 0347 	add.w	r3, r7, #71	; 0x47
    575e:	4619      	mov	r1, r3
    5760:	6838      	ldr	r0, [r7, #0]
    5762:	f7fe f823 	bl	37ac <bb_getUInt8>
    5766:	64f8      	str	r0, [r7, #76]	; 0x4c
    5768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    576a:	2b00      	cmp	r3, #0
    576c:	d001      	beq.n	5772 <cip_decrypt+0x42>
    {
        return ret;
    576e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5770:	e16e      	b.n	5a50 <cip_decrypt+0x320>
    }
    bb_init(&systemTitle);
    5772:	f107 031c 	add.w	r3, r7, #28
    5776:	4618      	mov	r0, r3
    5778:	f7fd fab6 	bl	2ce8 <bb_init>
    cmd = (DLMS_COMMAND)ch;
    577c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    5780:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    switch (cmd)
    5784:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    5788:	2b48      	cmp	r3, #72	; 0x48
    578a:	d043      	beq.n	5814 <cip_decrypt+0xe4>
    578c:	2b48      	cmp	r3, #72	; 0x48
    578e:	dc12      	bgt.n	57b6 <cip_decrypt+0x86>
    5790:	2b28      	cmp	r3, #40	; 0x28
    5792:	d03f      	beq.n	5814 <cip_decrypt+0xe4>
    5794:	2b28      	cmp	r3, #40	; 0x28
    5796:	dc07      	bgt.n	57a8 <cip_decrypt+0x78>
    5798:	2b21      	cmp	r3, #33	; 0x21
    579a:	d03b      	beq.n	5814 <cip_decrypt+0xe4>
    579c:	2b21      	cmp	r3, #33	; 0x21
    579e:	db36      	blt.n	580e <cip_decrypt+0xde>
    57a0:	3b25      	subs	r3, #37	; 0x25
    57a2:	2b01      	cmp	r3, #1
    57a4:	d833      	bhi.n	580e <cip_decrypt+0xde>
    case DLMS_COMMAND_DED_SET_REQUEST:
    case DLMS_COMMAND_DED_SET_RESPONSE:
    case DLMS_COMMAND_DED_METHOD_REQUEST:
    case DLMS_COMMAND_DED_METHOD_RESPONSE:
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    57a6:	e035      	b.n	5814 <cip_decrypt+0xe4>
    {
        return ret;
    }
    bb_init(&systemTitle);
    cmd = (DLMS_COMMAND)ch;
    switch (cmd)
    57a8:	2b2c      	cmp	r3, #44	; 0x2c
    57aa:	db30      	blt.n	580e <cip_decrypt+0xde>
    57ac:	2b2d      	cmp	r3, #45	; 0x2d
    57ae:	dd31      	ble.n	5814 <cip_decrypt+0xe4>
    57b0:	2b41      	cmp	r3, #65	; 0x41
    57b2:	d02f      	beq.n	5814 <cip_decrypt+0xe4>
    57b4:	e02b      	b.n	580e <cip_decrypt+0xde>
    57b6:	2bd5      	cmp	r3, #213	; 0xd5
    57b8:	dc05      	bgt.n	57c6 <cip_decrypt+0x96>
    57ba:	2bcf      	cmp	r3, #207	; 0xcf
    57bc:	da2a      	bge.n	5814 <cip_decrypt+0xe4>
    57be:	3bc8      	subs	r3, #200	; 0xc8
    57c0:	2b05      	cmp	r3, #5
    57c2:	d824      	bhi.n	580e <cip_decrypt+0xde>
    case DLMS_COMMAND_DED_SET_REQUEST:
    case DLMS_COMMAND_DED_SET_RESPONSE:
    case DLMS_COMMAND_DED_METHOD_REQUEST:
    case DLMS_COMMAND_DED_METHOD_RESPONSE:
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    57c4:	e026      	b.n	5814 <cip_decrypt+0xe4>
    {
        return ret;
    }
    bb_init(&systemTitle);
    cmd = (DLMS_COMMAND)ch;
    switch (cmd)
    57c6:	2bd7      	cmp	r3, #215	; 0xd7
    57c8:	d024      	beq.n	5814 <cip_decrypt+0xe4>
    57ca:	2bd7      	cmp	r3, #215	; 0xd7
    57cc:	db1f      	blt.n	580e <cip_decrypt+0xde>
    57ce:	3bdb      	subs	r3, #219	; 0xdb
    57d0:	2b01      	cmp	r3, #1
    57d2:	d81c      	bhi.n	580e <cip_decrypt+0xde>
    {
    case DLMS_COMMAND_GENERAL_GLO_CIPHERING:
    case DLMS_COMMAND_GENERAL_DED_CIPHERING:
        if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    57d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
    57d8:	4619      	mov	r1, r3
    57da:	6838      	ldr	r0, [r7, #0]
    57dc:	f01c f836 	bl	2184c <hlp_getObjectCount2>
    57e0:	64f8      	str	r0, [r7, #76]	; 0x4c
    57e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    57e4:	2b00      	cmp	r3, #0
    57e6:	d001      	beq.n	57ec <cip_decrypt+0xbc>
        {
            return ret;
    57e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    57ea:	e131      	b.n	5a50 <cip_decrypt+0x320>
        }
        if (length != 0)
    57ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    57f0:	2b00      	cmp	r3, #0
    57f2:	d011      	beq.n	5818 <cip_decrypt+0xe8>
        {
            bb_set2(&systemTitle, data, data->position, length);
    57f4:	683b      	ldr	r3, [r7, #0]
    57f6:	891a      	ldrh	r2, [r3, #8]
    57f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    57fc:	f107 001c 	add.w	r0, r7, #28
    5800:	6839      	ldr	r1, [r7, #0]
    5802:	f7fd ff0d 	bl	3620 <bb_set2>
            title = &systemTitle;
    5806:	f107 031c 	add.w	r3, r7, #28
    580a:	60bb      	str	r3, [r7, #8]
        }
        break;
    580c:	e004      	b.n	5818 <cip_decrypt+0xe8>
    case DLMS_COMMAND_DED_METHOD_REQUEST:
    case DLMS_COMMAND_DED_METHOD_RESPONSE:
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    580e:	f44f 7381 	mov.w	r3, #258	; 0x102
    5812:	e11d      	b.n	5a50 <cip_decrypt+0x320>
    case DLMS_COMMAND_DED_SET_REQUEST:
    case DLMS_COMMAND_DED_SET_RESPONSE:
    case DLMS_COMMAND_DED_METHOD_REQUEST:
    case DLMS_COMMAND_DED_METHOD_RESPONSE:
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    5814:	bf00      	nop
    5816:	e000      	b.n	581a <cip_decrypt+0xea>
        if (length != 0)
        {
            bb_set2(&systemTitle, data, data->position, length);
            title = &systemTitle;
        }
        break;
    5818:	bf00      	nop
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    581a:	f107 0348 	add.w	r3, r7, #72	; 0x48
    581e:	4619      	mov	r1, r3
    5820:	6838      	ldr	r0, [r7, #0]
    5822:	f01c f813 	bl	2184c <hlp_getObjectCount2>
    5826:	64f8      	str	r0, [r7, #76]	; 0x4c
    5828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    582a:	2b00      	cmp	r3, #0
    582c:	d001      	beq.n	5832 <cip_decrypt+0x102>
    {
        return ret;
    582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5830:	e10e      	b.n	5a50 <cip_decrypt+0x320>
    }
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    5832:	f107 0347 	add.w	r3, r7, #71	; 0x47
    5836:	4619      	mov	r1, r3
    5838:	6838      	ldr	r0, [r7, #0]
    583a:	f7fd ffb7 	bl	37ac <bb_getUInt8>
    583e:	64f8      	str	r0, [r7, #76]	; 0x4c
    5840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5842:	2b00      	cmp	r3, #0
    5844:	d001      	beq.n	584a <cip_decrypt+0x11a>
    {
        return ret;
    5846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5848:	e102      	b.n	5a50 <cip_decrypt+0x320>
    }
    *security = (DLMS_SECURITY)ch;
    584a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    584e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5850:	701a      	strb	r2, [r3, #0]
    if ((ret = bb_getUInt32(data, &frameCounter)) != 0)
    5852:	f107 0340 	add.w	r3, r7, #64	; 0x40
    5856:	4619      	mov	r1, r3
    5858:	6838      	ldr	r0, [r7, #0]
    585a:	f7fe f839 	bl	38d0 <bb_getUInt32>
    585e:	64f8      	str	r0, [r7, #76]	; 0x4c
    5860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5862:	2b00      	cmp	r3, #0
    5864:	d001      	beq.n	586a <cip_decrypt+0x13a>
    {
        return ret;
    5866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5868:	e0f2      	b.n	5a50 <cip_decrypt+0x320>
    }
    if (settings->security == DLMS_SECURITY_NONE)
    586a:	68fb      	ldr	r3, [r7, #12]
    586c:	781b      	ldrb	r3, [r3, #0]
    586e:	2b00      	cmp	r3, #0
    5870:	d103      	bne.n	587a <cip_decrypt+0x14a>
    {
        settings->security = *security;
    5872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5874:	781a      	ldrb	r2, [r3, #0]
    5876:	68fb      	ldr	r3, [r7, #12]
    5878:	701a      	strb	r2, [r3, #0]
    }
    settings->invocationCounter = frameCounter + 1;
    587a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    587c:	1c5a      	adds	r2, r3, #1
    587e:	68fb      	ldr	r3, [r7, #12]
    5880:	61da      	str	r2, [r3, #28]
    if (*security == DLMS_SECURITY_AUTHENTICATION)
    5882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	2b10      	cmp	r3, #16
    5888:	d15e      	bne.n	5948 <cip_decrypt+0x218>
    {
        bb_init(&tag);
    588a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    588e:	4618      	mov	r0, r3
    5890:	f7fd fa2a 	bl	2ce8 <bb_init>
        bb_init(&countTag);
    5894:	f107 0310 	add.w	r3, r7, #16
    5898:	4618      	mov	r0, r3
    589a:	f7fd fa25 	bl	2ce8 <bb_init>
        length = (unsigned short)(data->size - data->position - 12);
    589e:	683b      	ldr	r3, [r7, #0]
    58a0:	88da      	ldrh	r2, [r3, #6]
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	891b      	ldrh	r3, [r3, #8]
    58a6:	1ad3      	subs	r3, r2, r3
    58a8:	b29b      	uxth	r3, r3
    58aa:	3b0c      	subs	r3, #12
    58ac:	b29b      	uxth	r3, r3
    58ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        //Get tag
        bb_set(&tag, data->data + data->position + length, 12);
    58b2:	683b      	ldr	r3, [r7, #0]
    58b4:	681a      	ldr	r2, [r3, #0]
    58b6:	683b      	ldr	r3, [r7, #0]
    58b8:	891b      	ldrh	r3, [r3, #8]
    58ba:	4619      	mov	r1, r3
    58bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    58c0:	440b      	add	r3, r1
    58c2:	18d1      	adds	r1, r2, r3
    58c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
    58c8:	220c      	movs	r2, #12
    58ca:	4618      	mov	r0, r3
    58cc:	f7fd fe48 	bl	3560 <bb_set>
        //Skip tag from data.
        data->size = data->position + length;
    58d0:	683b      	ldr	r3, [r7, #0]
    58d2:	891a      	ldrh	r2, [r3, #8]
    58d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    58d8:	4413      	add	r3, r2
    58da:	b29a      	uxth	r2, r3
    58dc:	683b      	ldr	r3, [r7, #0]
    58de:	80da      	strh	r2, [r3, #6]
        // Check tag.
        if ((ret = cip_encrypt(
    58e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    58e2:	7819      	ldrb	r1, [r3, #0]
    58e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    58e6:	f107 0310 	add.w	r3, r7, #16
    58ea:	9304      	str	r3, [sp, #16]
    58ec:	683b      	ldr	r3, [r7, #0]
    58ee:	9303      	str	r3, [sp, #12]
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	9302      	str	r3, [sp, #8]
    58f4:	68bb      	ldr	r3, [r7, #8]
    58f6:	9301      	str	r3, [sp, #4]
    58f8:	2300      	movs	r3, #0
    58fa:	9300      	str	r3, [sp, #0]
    58fc:	4613      	mov	r3, r2
    58fe:	2201      	movs	r2, #1
    5900:	68f8      	ldr	r0, [r7, #12]
    5902:	f7ff fca7 	bl	5254 <cip_encrypt>
    5906:	64f8      	str	r0, [r7, #76]	; 0x4c
    5908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    590a:	2b00      	cmp	r3, #0
    590c:	d10b      	bne.n	5926 <cip_decrypt+0x1f6>
            key,
            data,
            &countTag)) == 0)
        {
            // Check tag.
            if (memcmp(tag.data, countTag.data, 12) != 0)
    590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5910:	6939      	ldr	r1, [r7, #16]
    5912:	220c      	movs	r2, #12
    5914:	4618      	mov	r0, r3
    5916:	f024 f8a5 	bl	29a64 <memcmp>
    591a:	4603      	mov	r3, r0
    591c:	2b00      	cmp	r3, #0
    591e:	d002      	beq.n	5926 <cip_decrypt+0x1f6>
            {
                ret = DLMS_ERROR_CODE_INVALID_TAG;
    5920:	f240 130f 	movw	r3, #271	; 0x10f
    5924:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
        bb_clear(&tag);
    5926:	f107 0334 	add.w	r3, r7, #52	; 0x34
    592a:	4618      	mov	r0, r3
    592c:	f7fd ff1a 	bl	3764 <bb_clear>
        bb_clear(&countTag);
    5930:	f107 0310 	add.w	r3, r7, #16
    5934:	4618      	mov	r0, r3
    5936:	f7fd ff15 	bl	3764 <bb_clear>
        bb_clear(&systemTitle);
    593a:	f107 031c 	add.w	r3, r7, #28
    593e:	4618      	mov	r0, r3
    5940:	f7fd ff10 	bl	3764 <bb_clear>
        return ret;
    5944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5946:	e083      	b.n	5a50 <cip_decrypt+0x320>
    }
    bb_init(&ciphertext);
    5948:	f107 0328 	add.w	r3, r7, #40	; 0x28
    594c:	4618      	mov	r0, r3
    594e:	f7fd f9cb 	bl	2ce8 <bb_init>
    bb_init(&tag);
    5952:	f107 0334 	add.w	r3, r7, #52	; 0x34
    5956:	4618      	mov	r0, r3
    5958:	f7fd f9c6 	bl	2ce8 <bb_init>
    if (*security == DLMS_SECURITY_ENCRYPTION)
    595c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    595e:	781b      	ldrb	r3, [r3, #0]
    5960:	2b20      	cmp	r3, #32
    5962:	d111      	bne.n	5988 <cip_decrypt+0x258>
    {
        length = (unsigned short)(data->size - data->position);
    5964:	683b      	ldr	r3, [r7, #0]
    5966:	88da      	ldrh	r2, [r3, #6]
    5968:	683b      	ldr	r3, [r7, #0]
    596a:	891b      	ldrh	r3, [r3, #8]
    596c:	1ad3      	subs	r3, r2, r3
    596e:	b29b      	uxth	r3, r3
    5970:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        bb_set2(&ciphertext, data, data->position, length);
    5974:	683b      	ldr	r3, [r7, #0]
    5976:	891a      	ldrh	r2, [r3, #8]
    5978:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    597c:	f107 0028 	add.w	r0, r7, #40	; 0x28
    5980:	6839      	ldr	r1, [r7, #0]
    5982:	f7fd fe4d 	bl	3620 <bb_set2>
    5986:	e01e      	b.n	59c6 <cip_decrypt+0x296>
    }
    else if (*security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    5988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    598a:	781b      	ldrb	r3, [r3, #0]
    598c:	2b30      	cmp	r3, #48	; 0x30
    598e:	d11a      	bne.n	59c6 <cip_decrypt+0x296>
    {
        length = (unsigned short)(data->size - data->position - 12);
    5990:	683b      	ldr	r3, [r7, #0]
    5992:	88da      	ldrh	r2, [r3, #6]
    5994:	683b      	ldr	r3, [r7, #0]
    5996:	891b      	ldrh	r3, [r3, #8]
    5998:	1ad3      	subs	r3, r2, r3
    599a:	b29b      	uxth	r3, r3
    599c:	3b0c      	subs	r3, #12
    599e:	b29b      	uxth	r3, r3
    59a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        bb_set2(&ciphertext, data, data->position, length);
    59a4:	683b      	ldr	r3, [r7, #0]
    59a6:	891a      	ldrh	r2, [r3, #8]
    59a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    59ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
    59b0:	6839      	ldr	r1, [r7, #0]
    59b2:	f7fd fe35 	bl	3620 <bb_set2>
        bb_set2(&tag, data, data->position, 12);
    59b6:	683b      	ldr	r3, [r7, #0]
    59b8:	891a      	ldrh	r2, [r3, #8]
    59ba:	f107 0034 	add.w	r0, r7, #52	; 0x34
    59be:	230c      	movs	r3, #12
    59c0:	6839      	ldr	r1, [r7, #0]
    59c2:	f7fd fe2d 	bl	3620 <bb_set2>
    }
    bb_clear(data);
    59c6:	6838      	ldr	r0, [r7, #0]
    59c8:	f7fd fecc 	bl	3764 <bb_clear>
    if ((ret = cip_encrypt(
    59cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    59ce:	7819      	ldrb	r1, [r3, #0]
    59d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    59d2:	683b      	ldr	r3, [r7, #0]
    59d4:	9304      	str	r3, [sp, #16]
    59d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    59da:	9303      	str	r3, [sp, #12]
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	9302      	str	r3, [sp, #8]
    59e0:	68bb      	ldr	r3, [r7, #8]
    59e2:	9301      	str	r3, [sp, #4]
    59e4:	2300      	movs	r3, #0
    59e6:	9300      	str	r3, [sp, #0]
    59e8:	4613      	mov	r3, r2
    59ea:	2202      	movs	r2, #2
    59ec:	68f8      	ldr	r0, [r7, #12]
    59ee:	f7ff fc31 	bl	5254 <cip_encrypt>
    59f2:	64f8      	str	r0, [r7, #76]	; 0x4c
    59f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    59f6:	2b00      	cmp	r3, #0
    59f8:	d010      	beq.n	5a1c <cip_decrypt+0x2ec>
        title,
        key,
        &ciphertext,
        data)) != 0)
    {
        bb_clear(&ciphertext);
    59fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
    59fe:	4618      	mov	r0, r3
    5a00:	f7fd feb0 	bl	3764 <bb_clear>
        bb_clear(&tag);
    5a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
    5a08:	4618      	mov	r0, r3
    5a0a:	f7fd feab 	bl	3764 <bb_clear>
        bb_clear(&systemTitle);
    5a0e:	f107 031c 	add.w	r3, r7, #28
    5a12:	4618      	mov	r0, r3
    5a14:	f7fd fea6 	bl	3764 <bb_clear>
        return ret;
    5a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5a1a:	e019      	b.n	5a50 <cip_decrypt+0x320>
    }
    //Check tag.
    if (*security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    5a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	2b30      	cmp	r3, #48	; 0x30
    5a22:	d105      	bne.n	5a30 <cip_decrypt+0x300>
    {
        //Remove tag.
        data->size = data->size - 12;
    5a24:	683b      	ldr	r3, [r7, #0]
    5a26:	88db      	ldrh	r3, [r3, #6]
    5a28:	3b0c      	subs	r3, #12
    5a2a:	b29a      	uxth	r2, r3
    5a2c:	683b      	ldr	r3, [r7, #0]
    5a2e:	80da      	strh	r2, [r3, #6]
    }
    bb_clear(&ciphertext);
    5a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
    5a34:	4618      	mov	r0, r3
    5a36:	f7fd fe95 	bl	3764 <bb_clear>
    bb_clear(&systemTitle);
    5a3a:	f107 031c 	add.w	r3, r7, #28
    5a3e:	4618      	mov	r0, r3
    5a40:	f7fd fe90 	bl	3764 <bb_clear>
    bb_clear(&tag);
    5a44:	f107 0334 	add.w	r3, r7, #52	; 0x34
    5a48:	4618      	mov	r0, r3
    5a4a:	f7fd fe8b 	bl	3764 <bb_clear>
    return 0;
    5a4e:	2300      	movs	r3, #0
}
    5a50:	4618      	mov	r0, r3
    5a52:	3750      	adds	r7, #80	; 0x50
    5a54:	46bd      	mov	sp, r7
    5a56:	bd80      	pop	{r7, pc}

00005a58 <cosem_getObjectSize>:
#include "../include/snparameters.h"
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME

//cosem_getObjectSize returns zero if object is not supported.
int cosem_getObjectSize(DLMS_OBJECT_TYPE type)
{
    5a58:	b480      	push	{r7}
    5a5a:	b085      	sub	sp, #20
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	4603      	mov	r3, r0
    5a60:	80fb      	strh	r3, [r7, #6]
    int size = 0;
    5a62:	2300      	movs	r3, #0
    5a64:	60fb      	str	r3, [r7, #12]
    switch (type)
    5a66:	88fb      	ldrh	r3, [r7, #6]
    5a68:	3b01      	subs	r3, #1
    5a6a:	2b72      	cmp	r3, #114	; 0x72
    5a6c:	f200 8183 	bhi.w	5d76 <cosem_getObjectSize+0x31e>
    5a70:	a201      	add	r2, pc, #4	; (adr r2, 5a78 <cosem_getObjectSize+0x20>)
    5a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5a76:	bf00      	nop
    5a78:	00005c45 	.word	0x00005c45
    5a7c:	00005d77 	.word	0x00005d77
    5a80:	00005c4b 	.word	0x00005c4b
    5a84:	00005c87 	.word	0x00005c87
    5a88:	00005c7b 	.word	0x00005c7b
    5a8c:	00005ce1 	.word	0x00005ce1
    5a90:	00005cdb 	.word	0x00005cdb
    5a94:	00005c51 	.word	0x00005c51
    5a98:	00005d17 	.word	0x00005d17
    5a9c:	00005d11 	.word	0x00005d11
    5aa0:	00005d23 	.word	0x00005d23
    5aa4:	00005c69 	.word	0x00005c69
    5aa8:	00005d77 	.word	0x00005d77
    5aac:	00005d77 	.word	0x00005d77
    5ab0:	00005c63 	.word	0x00005c63
    5ab4:	00005d77 	.word	0x00005d77
    5ab8:	00005d0b 	.word	0x00005d0b
    5abc:	00005cb7 	.word	0x00005cb7
    5ac0:	00005c9f 	.word	0x00005c9f
    5ac4:	00005c5d 	.word	0x00005c5d
    5ac8:	00005ce7 	.word	0x00005ce7
    5acc:	00005c57 	.word	0x00005c57
    5ad0:	00005c99 	.word	0x00005c99
    5ad4:	00005ca5 	.word	0x00005ca5
    5ad8:	00005cb1 	.word	0x00005cb1
    5adc:	00005d35 	.word	0x00005d35
    5ae0:	00005ccf 	.word	0x00005ccf
    5ae4:	00005c6f 	.word	0x00005c6f
    5ae8:	00005c75 	.word	0x00005c75
    5aec:	00005d4d 	.word	0x00005d4d
    5af0:	00005d77 	.word	0x00005d77
    5af4:	00005d77 	.word	0x00005d77
    5af8:	00005d77 	.word	0x00005d77
    5afc:	00005d77 	.word	0x00005d77
    5b00:	00005d77 	.word	0x00005d77
    5b04:	00005d77 	.word	0x00005d77
    5b08:	00005d77 	.word	0x00005d77
    5b0c:	00005d77 	.word	0x00005d77
    5b10:	00005d77 	.word	0x00005d77
    5b14:	00005d47 	.word	0x00005d47
    5b18:	00005d2f 	.word	0x00005d2f
    5b1c:	00005cab 	.word	0x00005cab
    5b20:	00005c81 	.word	0x00005c81
    5b24:	00005cd5 	.word	0x00005cd5
    5b28:	00005c8d 	.word	0x00005c8d
    5b2c:	00005d1d 	.word	0x00005d1d
    5b30:	00005d6b 	.word	0x00005d6b
    5b34:	00005d77 	.word	0x00005d77
    5b38:	00005d77 	.word	0x00005d77
    5b3c:	00005d77 	.word	0x00005d77
    5b40:	00005d77 	.word	0x00005d77
    5b44:	00005d77 	.word	0x00005d77
    5b48:	00005d77 	.word	0x00005d77
    5b4c:	00005d77 	.word	0x00005d77
    5b50:	00005d77 	.word	0x00005d77
    5b54:	00005d77 	.word	0x00005d77
    5b58:	00005d77 	.word	0x00005d77
    5b5c:	00005d77 	.word	0x00005d77
    5b60:	00005d77 	.word	0x00005d77
    5b64:	00005d41 	.word	0x00005d41
    5b68:	00005ced 	.word	0x00005ced
    5b6c:	00005d71 	.word	0x00005d71
    5b70:	00005d29 	.word	0x00005d29
    5b74:	00005c93 	.word	0x00005c93
    5b78:	00005d77 	.word	0x00005d77
    5b7c:	00005d77 	.word	0x00005d77
    5b80:	00005d77 	.word	0x00005d77
    5b84:	00005d77 	.word	0x00005d77
    5b88:	00005d77 	.word	0x00005d77
    5b8c:	00005cbd 	.word	0x00005cbd
    5b90:	00005cc3 	.word	0x00005cc3
    5b94:	00005cc9 	.word	0x00005cc9
    5b98:	00005d77 	.word	0x00005d77
    5b9c:	00005d3b 	.word	0x00005d3b
    5ba0:	00005d77 	.word	0x00005d77
    5ba4:	00005d77 	.word	0x00005d77
    5ba8:	00005d77 	.word	0x00005d77
    5bac:	00005d77 	.word	0x00005d77
    5bb0:	00005d77 	.word	0x00005d77
    5bb4:	00005d77 	.word	0x00005d77
    5bb8:	00005d77 	.word	0x00005d77
    5bbc:	00005d77 	.word	0x00005d77
    5bc0:	00005d77 	.word	0x00005d77
    5bc4:	00005d77 	.word	0x00005d77
    5bc8:	00005d77 	.word	0x00005d77
    5bcc:	00005d77 	.word	0x00005d77
    5bd0:	00005d77 	.word	0x00005d77
    5bd4:	00005d77 	.word	0x00005d77
    5bd8:	00005d77 	.word	0x00005d77
    5bdc:	00005d77 	.word	0x00005d77
    5be0:	00005d77 	.word	0x00005d77
    5be4:	00005d77 	.word	0x00005d77
    5be8:	00005d77 	.word	0x00005d77
    5bec:	00005d77 	.word	0x00005d77
    5bf0:	00005d77 	.word	0x00005d77
    5bf4:	00005d77 	.word	0x00005d77
    5bf8:	00005d77 	.word	0x00005d77
    5bfc:	00005d77 	.word	0x00005d77
    5c00:	00005d77 	.word	0x00005d77
    5c04:	00005d77 	.word	0x00005d77
    5c08:	00005cf3 	.word	0x00005cf3
    5c0c:	00005cf9 	.word	0x00005cf9
    5c10:	00005cff 	.word	0x00005cff
    5c14:	00005d05 	.word	0x00005d05
    5c18:	00005d77 	.word	0x00005d77
    5c1c:	00005d77 	.word	0x00005d77
    5c20:	00005d77 	.word	0x00005d77
    5c24:	00005d77 	.word	0x00005d77
    5c28:	00005d77 	.word	0x00005d77
    5c2c:	00005d77 	.word	0x00005d77
    5c30:	00005d53 	.word	0x00005d53
    5c34:	00005d59 	.word	0x00005d59
    5c38:	00005d5f 	.word	0x00005d5f
    5c3c:	00005d77 	.word	0x00005d77
    5c40:	00005d65 	.word	0x00005d65
    {
#ifndef DLMS_IGNORE_DATA
    case DLMS_OBJECT_TYPE_DATA:
        size = sizeof(gxData);
    5c44:	2320      	movs	r3, #32
    5c46:	60fb      	str	r3, [r7, #12]
        break;
    5c48:	e097      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_DATA
#ifndef DLMS_IGNORE_REGISTER
    case DLMS_OBJECT_TYPE_REGISTER:
        size = sizeof(gxRegister);
    5c4a:	2328      	movs	r3, #40	; 0x28
    5c4c:	60fb      	str	r3, [r7, #12]
        break;
    5c4e:	e094      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_CLOCK
    case DLMS_OBJECT_TYPE_CLOCK:
        size = sizeof(gxClock);
    5c50:	23dc      	movs	r3, #220	; 0xdc
    5c52:	60fb      	str	r3, [r7, #12]
        break;
    5c54:	e091      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        size = sizeof(gxActionSchedule);
    5c56:	232c      	movs	r3, #44	; 0x2c
    5c58:	60fb      	str	r3, [r7, #12]
        break;
    5c5a:	e08e      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        size = sizeof(gxActivityCalendar);
    5c5c:	23b8      	movs	r3, #184	; 0xb8
    5c5e:	60fb      	str	r3, [r7, #12]
        break;
    5c60:	e08b      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        size = sizeof(gxAssociationLogicalName);
    5c62:	2380      	movs	r3, #128	; 0x80
    5c64:	60fb      	str	r3, [r7, #12]
        break;
    5c66:	e088      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        size = sizeof(gxAssociationShortName);
    5c68:	2330      	movs	r3, #48	; 0x30
    5c6a:	60fb      	str	r3, [r7, #12]
        break;
    5c6c:	e085      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_AUTO_ANSWER
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        size = sizeof(gxAutoAnswer);
    5c6e:	2328      	movs	r3, #40	; 0x28
    5c70:	60fb      	str	r3, [r7, #12]
        break;
    5c72:	e082      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_AUTO_ANSWER
#ifndef DLMS_IGNORE_AUTO_CONNECT
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        size = sizeof(gxAutoConnect);
    5c74:	2338      	movs	r3, #56	; 0x38
    5c76:	60fb      	str	r3, [r7, #12]
        break;
    5c78:	e07f      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        size = sizeof(gxDemandRegister);
    5c7a:	23b0      	movs	r3, #176	; 0xb0
    5c7c:	60fb      	str	r3, [r7, #12]
        break;
    5c7e:	e07c      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_DEMAND_REGISTER
#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
    case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
        size = sizeof(gxMacAddressSetup);
    5c80:	231c      	movs	r3, #28
    5c82:	60fb      	str	r3, [r7, #12]
        break;
    5c84:	e079      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
        size = sizeof(gxExtendedRegister);
    5c86:	2368      	movs	r3, #104	; 0x68
    5c88:	60fb      	str	r3, [r7, #12]
        break;
    5c8a:	e076      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_GPRS_SETUP
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        size = sizeof(gxGPRSSetup);
    5c8c:	2328      	movs	r3, #40	; 0x28
    5c8e:	60fb      	str	r3, [r7, #12]
        break;
    5c90:	e073      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_GPRS_SETUP
#ifndef DLMS_IGNORE_SECURITY_SETUP
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        size = sizeof(gxSecuritySetup);
    5c92:	233c      	movs	r3, #60	; 0x3c
    5c94:	60fb      	str	r3, [r7, #12]
        break;
    5c96:	e070      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SECURITY_SETUP
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
        size = sizeof(gxIecHdlcSetup);
    5c98:	2320      	movs	r3, #32
    5c9a:	60fb      	str	r3, [r7, #12]
        break;
    5c9c:	e06d      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        size = sizeof(gxLocalPortSetup);
    5c9e:	2344      	movs	r3, #68	; 0x44
    5ca0:	60fb      	str	r3, [r7, #12]
        break;
    5ca2:	e06a      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
#ifndef DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        size = sizeof(gxIecTwistedPairSetup);
    5ca4:	232c      	movs	r3, #44	; 0x2c
    5ca6:	60fb      	str	r3, [r7, #12]
        break;
    5ca8:	e067      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        size = sizeof(gxIp4Setup);
    5caa:	2360      	movs	r3, #96	; 0x60
    5cac:	60fb      	str	r3, [r7, #12]
        break;
    5cae:	e064      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        size = sizeof(gxMbusSlavePortSetup);
    5cb0:	2314      	movs	r3, #20
    5cb2:	60fb      	str	r3, [r7, #12]
        break;
    5cb4:	e061      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        size = sizeof(gxImageTransfer);
    5cb6:	2338      	movs	r3, #56	; 0x38
    5cb8:	60fb      	str	r3, [r7, #12]
        break;
    5cba:	e05e      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_IMAGE_TRANSFER
#ifndef DLMS_IGNORE_DISCONNECT_CONTROL
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
        size = sizeof(gxDisconnectControl);
    5cbc:	2314      	movs	r3, #20
    5cbe:	60fb      	str	r3, [r7, #12]
        break;
    5cc0:	e05b      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
    case DLMS_OBJECT_TYPE_LIMITER:
        size = sizeof(gxLimiter);
    5cc2:	23a8      	movs	r3, #168	; 0xa8
    5cc4:	60fb      	str	r3, [r7, #12]
        break;
    5cc6:	e058      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        size = sizeof(gxMBusClient);
    5cc8:	2340      	movs	r3, #64	; 0x40
    5cca:	60fb      	str	r3, [r7, #12]
        break;
    5ccc:	e055      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
    case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
        size = sizeof(gxModemConfiguration);
    5cce:	2334      	movs	r3, #52	; 0x34
    5cd0:	60fb      	str	r3, [r7, #12]
        break;
    5cd2:	e052      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
    case DLMS_OBJECT_TYPE_PPP_SETUP:
        size = sizeof(gxPppSetup);
    5cd4:	2358      	movs	r3, #88	; 0x58
    5cd6:	60fb      	str	r3, [r7, #12]
        break;
    5cd8:	e04f      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_PROFILE_GENERIC
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
        size = sizeof(gxProfileGeneric);
    5cda:	234c      	movs	r3, #76	; 0x4c
    5cdc:	60fb      	str	r3, [r7, #12]
        break;
    5cde:	e04c      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
        size = sizeof(gxRegisterActivation);
    5ce0:	233c      	movs	r3, #60	; 0x3c
    5ce2:	60fb      	str	r3, [r7, #12]
        break;
    5ce4:	e049      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
    case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
        size = sizeof(gxRegisterMonitor);
    5ce6:	2338      	movs	r3, #56	; 0x38
    5ce8:	60fb      	str	r3, [r7, #12]
        break;
    5cea:	e046      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_REGISTER_TABLE
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
        size = sizeof(gxRegisterTable);
    5cec:	2334      	movs	r3, #52	; 0x34
    5cee:	60fb      	str	r3, [r7, #12]
        break;
    5cf0:	e043      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_REGISTER_TABLE
#ifndef DLMS_IGNORE_ZIG_BEE_SAS_STARTUP
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_STARTUP:
        size = sizeof(gxZigBeeSasStartup);
    5cf2:	2310      	movs	r3, #16
    5cf4:	60fb      	str	r3, [r7, #12]
        break;
    5cf6:	e040      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ZIG_BEE_SAS_STARTUP
#ifndef DLMS_IGNORE_ZIG_BEE_SAS_JOIN
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_JOIN:
        size = sizeof(gxZigBeeSasJoin);
    5cf8:	2310      	movs	r3, #16
    5cfa:	60fb      	str	r3, [r7, #12]
        break;
    5cfc:	e03d      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //ZIG_BEE_SAS_JOIN
#ifndef DLMS_IGNORE_ZIG_BEE_SAS_APS_FRAGMENTATION
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_APS_FRAGMENTATION:
        size = sizeof(gxZigBeeSasApsFragmentation);
    5cfe:	2310      	movs	r3, #16
    5d00:	60fb      	str	r3, [r7, #12]
        break;
    5d02:	e03a      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ZIG_BEE_SAS_APS_FRAGMENTATION
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        size = sizeof(gxZigBeeNetworkControl);
    5d04:	2324      	movs	r3, #36	; 0x24
    5d06:	60fb      	str	r3, [r7, #12]
        break;
    5d08:	e037      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
        size = sizeof(gxSapAssignment);
    5d0a:	2320      	movs	r3, #32
    5d0c:	60fb      	str	r3, [r7, #12]
        break;
    5d0e:	e034      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_SCHEDULE
    case DLMS_OBJECT_TYPE_SCHEDULE:
        size = sizeof(gxSchedule);
    5d10:	2320      	movs	r3, #32
    5d12:	60fb      	str	r3, [r7, #12]
        break;
    5d14:	e031      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
        size = sizeof(gxScriptTable);
    5d16:	2320      	movs	r3, #32
    5d18:	60fb      	str	r3, [r7, #12]
        break;
    5d1a:	e02e      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_SMTP_SETUP
    case DLMS_OBJECT_TYPE_SMTP_SETUP:
        size = sizeof(gxSmtpSetup);
    5d1c:	2310      	movs	r3, #16
    5d1e:	60fb      	str	r3, [r7, #12]
        break;
    5d20:	e02b      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SMTP_SETUP
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
        size = sizeof(gxSpecialDaysTable);
    5d22:	2320      	movs	r3, #32
    5d24:	60fb      	str	r3, [r7, #12]
        break;
    5d26:	e028      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_SPECIAL_DAYS_TABLE
#ifndef DLMS_IGNORE_STATUS_MAPPING
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
        size = sizeof(gxStatusMapping);
    5d28:	2310      	movs	r3, #16
    5d2a:	60fb      	str	r3, [r7, #12]
        break;
    5d2c:	e025      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_STATUS_MAPPING
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        size = sizeof(gxTcpUdpSetup);
    5d2e:	2328      	movs	r3, #40	; 0x28
    5d30:	60fb      	str	r3, [r7, #12]
        break;
    5d32:	e022      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_TCP_UDP_SETUP
#ifndef DLMS_IGNORE_UTILITY_TABLES
    case DLMS_OBJECT_TYPE_UTILITY_TABLES:
        size = sizeof(gxUtilityTables);
    5d34:	2310      	movs	r3, #16
    5d36:	60fb      	str	r3, [r7, #12]
        break;
    5d38:	e01f      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_UTILITY_TABLES
#ifndef DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        size = sizeof(gxMBusMasterPortSetup);
    5d3a:	2314      	movs	r3, #20
    5d3c:	60fb      	str	r3, [r7, #12]
        break;
    5d3e:	e01c      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
#ifndef DLMS_IGNORE_MESSAGE_HANDLER
    case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
        size = sizeof(gxMessageHandler);
    5d40:	233c      	movs	r3, #60	; 0x3c
    5d42:	60fb      	str	r3, [r7, #12]
        break;
    5d44:	e019      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        size = sizeof(gxPushSetup);
    5d46:	2344      	movs	r3, #68	; 0x44
    5d48:	60fb      	str	r3, [r7, #12]
        break;
    5d4a:	e016      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_PUSH_SETUP
#ifndef DLMS_IGNORE_DATA_PROTECTION
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
        size = sizeof(gxDataProtection);
    5d4c:	234c      	movs	r3, #76	; 0x4c
    5d4e:	60fb      	str	r3, [r7, #12]
        break;
    5d50:	e013      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_DATA_PROTECTION
#ifndef DLMS_IGNORE_ACCOUNT
    case DLMS_OBJECT_TYPE_ACCOUNT:
        size = sizeof(gxAccount);
    5d52:	23dc      	movs	r3, #220	; 0xdc
    5d54:	60fb      	str	r3, [r7, #12]
        break;
    5d56:	e010      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_CREDIT
    case DLMS_OBJECT_TYPE_CREDIT:
        size = sizeof(gxCredit);
    5d58:	2368      	movs	r3, #104	; 0x68
    5d5a:	60fb      	str	r3, [r7, #12]
        break;
    5d5c:	e00d      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_CHARGE
    case DLMS_OBJECT_TYPE_CHARGE:
        size = sizeof(gxCharge);
    5d5e:	23c8      	movs	r3, #200	; 0xc8
    5d60:	60fb      	str	r3, [r7, #12]
        break;
    5d62:	e00a      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        size = sizeof(gxTokenGateway);
    5d64:	236c      	movs	r3, #108	; 0x6c
    5d66:	60fb      	str	r3, [r7, #12]
        break;
    5d68:	e007      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        size = sizeof(gxGsmDiagnostic);
    5d6a:	2368      	movs	r3, #104	; 0x68
    5d6c:	60fb      	str	r3, [r7, #12]
        break;
    5d6e:	e004      	b.n	5d7a <cosem_getObjectSize+0x322>
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_COMPACT_DATA
    case DLMS_OBJECT_TYPE_COMPACT_DATA:
        size = sizeof(gxCompactData);
    5d70:	2340      	movs	r3, #64	; 0x40
    5d72:	60fb      	str	r3, [r7, #12]
        break;
    5d74:	e001      	b.n	5d7a <cosem_getObjectSize+0x322>
    case DLMS_OBJECT_TYPE_TARIFF_PLAN:
        size = sizeof(gxTariffPlan);
        break;
#endif //DLMS_ITALIAN_STANDARD
    default:
        return 0;
    5d76:	2300      	movs	r3, #0
    5d78:	e000      	b.n	5d7c <cosem_getObjectSize+0x324>
            obj_typeToString(type, buff);
            printf("Object %s size: %d\r\n", buff, size);
        */
    }
#endif
    return size;
    5d7a:	68fb      	ldr	r3, [r7, #12]
}
    5d7c:	4618      	mov	r0, r3
    5d7e:	3714      	adds	r7, #20
    5d80:	46bd      	mov	sp, r7
    5d82:	bc80      	pop	{r7}
    5d84:	4770      	bx	lr
    5d86:	bf00      	nop

00005d88 <cosem_createObject>:

int cosem_createObject(DLMS_OBJECT_TYPE type, gxObject** object)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b086      	sub	sp, #24
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	4603      	mov	r3, r0
    5d90:	6039      	str	r1, [r7, #0]
    5d92:	80fb      	strh	r3, [r7, #6]
    int ret;
    unsigned char ln[] = { 0,0,40,0,0,255 };
    5d94:	4a22      	ldr	r2, [pc, #136]	; (5e20 <cosem_createObject+0x98>)
    5d96:	f107 0308 	add.w	r3, r7, #8
    5d9a:	6810      	ldr	r0, [r2, #0]
    5d9c:	6018      	str	r0, [r3, #0]
    5d9e:	8892      	ldrh	r2, [r2, #4]
    5da0:	809a      	strh	r2, [r3, #4]
    int size = cosem_getObjectSize(type);
    5da2:	88fb      	ldrh	r3, [r7, #6]
    5da4:	4618      	mov	r0, r3
    5da6:	f7ff fe57 	bl	5a58 <cosem_getObjectSize>
    5daa:	6178      	str	r0, [r7, #20]
    if (size == 0)
    5dac:	697b      	ldr	r3, [r7, #20]
    5dae:	2b00      	cmp	r3, #0
    5db0:	d102      	bne.n	5db8 <cosem_createObject+0x30>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    5db2:	f44f 7381 	mov.w	r3, #258	; 0x102
    5db6:	e02f      	b.n	5e18 <cosem_createObject+0x90>
    }
    *object = (gxObject*)gxcalloc(1, size);
    5db8:	697b      	ldr	r3, [r7, #20]
    5dba:	4619      	mov	r1, r3
    5dbc:	2001      	movs	r0, #1
    5dbe:	f023 fd1b 	bl	297f8 <calloc>
    5dc2:	4603      	mov	r3, r0
    5dc4:	461a      	mov	r2, r3
    5dc6:	683b      	ldr	r3, [r7, #0]
    5dc8:	601a      	str	r2, [r3, #0]
    if (*object == NULL)
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	681b      	ldr	r3, [r3, #0]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d102      	bne.n	5dd8 <cosem_createObject+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    5dd2:	f44f 7382 	mov.w	r3, #260	; 0x104
    5dd6:	e01f      	b.n	5e18 <cosem_createObject+0x90>
    }
    (*object)->objectType = type;
    5dd8:	683b      	ldr	r3, [r7, #0]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	88fa      	ldrh	r2, [r7, #6]
    5dde:	b2d2      	uxtb	r2, r2
    5de0:	701a      	strb	r2, [r3, #0]
    printf("Object %s size: %d\r\n", buff, (int)_msize(*object));
    }
    #endif
    */

    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    5de2:	88fb      	ldrh	r3, [r7, #6]
    5de4:	2b0f      	cmp	r3, #15
    5de6:	d009      	beq.n	5dfc <cosem_createObject+0x74>
    {
    }
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    else if (type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    5de8:	88fb      	ldrh	r3, [r7, #6]
    5dea:	2b0c      	cmp	r3, #12
    5dec:	d006      	beq.n	5dfc <cosem_createObject+0x74>
    {
    }
    else
    {
        memset(ln, 0, 6);
    5dee:	f107 0308 	add.w	r3, r7, #8
    5df2:	2206      	movs	r2, #6
    5df4:	2100      	movs	r1, #0
    5df6:	4618      	mov	r0, r3
    5df8:	f023 fe69 	bl	29ace <memset>
    }
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    ret = cosem_init2(*object, type, ln);
    5dfc:	683b      	ldr	r3, [r7, #0]
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	f107 0208 	add.w	r2, r7, #8
    5e04:	88f9      	ldrh	r1, [r7, #6]
    5e06:	4618      	mov	r0, r3
    5e08:	f000 f81e 	bl	5e48 <cosem_init2>
    5e0c:	6138      	str	r0, [r7, #16]
    (*object)->free = 1;
    5e0e:	683b      	ldr	r3, [r7, #0]
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	2201      	movs	r2, #1
    5e14:	709a      	strb	r2, [r3, #2]
    return ret;
    5e16:	693b      	ldr	r3, [r7, #16]
}
    5e18:	4618      	mov	r0, r3
    5e1a:	3718      	adds	r7, #24
    5e1c:	46bd      	mov	sp, r7
    5e1e:	bd80      	pop	{r7, pc}
    5e20:	0002bf8c 	.word	0x0002bf8c

00005e24 <cosem_setLogicalName>:
}

int cosem_setLogicalName(
    gxObject* object,
    unsigned char* value)
{
    5e24:	b580      	push	{r7, lr}
    5e26:	b082      	sub	sp, #8
    5e28:	af00      	add	r7, sp, #0
    5e2a:	6078      	str	r0, [r7, #4]
    5e2c:	6039      	str	r1, [r7, #0]
    memcpy(object->logicalName, value, 6);
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	3306      	adds	r3, #6
    5e32:	2206      	movs	r2, #6
    5e34:	6839      	ldr	r1, [r7, #0]
    5e36:	4618      	mov	r0, r3
    5e38:	f023 fe23 	bl	29a82 <memcpy>
    return 0;
    5e3c:	2300      	movs	r3, #0
}
    5e3e:	4618      	mov	r0, r3
    5e40:	3708      	adds	r7, #8
    5e42:	46bd      	mov	sp, r7
    5e44:	bd80      	pop	{r7, pc}
    5e46:	bf00      	nop

00005e48 <cosem_init2>:

int cosem_init2(
    gxObject* object,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln)
{
    5e48:	b580      	push	{r7, lr}
    5e4a:	b086      	sub	sp, #24
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	60f8      	str	r0, [r7, #12]
    5e50:	460b      	mov	r3, r1
    5e52:	607a      	str	r2, [r7, #4]
    5e54:	817b      	strh	r3, [r7, #10]
    int size = cosem_getObjectSize(type);
    5e56:	897b      	ldrh	r3, [r7, #10]
    5e58:	4618      	mov	r0, r3
    5e5a:	f7ff fdfd 	bl	5a58 <cosem_getObjectSize>
    5e5e:	6178      	str	r0, [r7, #20]
    if (size == 0)
    5e60:	697b      	ldr	r3, [r7, #20]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d102      	bne.n	5e6c <cosem_init2+0x24>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    5e66:	f44f 7381 	mov.w	r3, #258	; 0x102
    5e6a:	e172      	b.n	6152 <cosem_init2+0x30a>
    }
    memset(object, 0, size);
    5e6c:	697b      	ldr	r3, [r7, #20]
    5e6e:	461a      	mov	r2, r3
    5e70:	2100      	movs	r1, #0
    5e72:	68f8      	ldr	r0, [r7, #12]
    5e74:	f023 fe2b 	bl	29ace <memset>
    object->objectType = type;
    5e78:	897b      	ldrh	r3, [r7, #10]
    5e7a:	b2da      	uxtb	r2, r3
    5e7c:	68fb      	ldr	r3, [r7, #12]
    5e7e:	701a      	strb	r2, [r3, #0]
    object->logicalName[0] = ln[0];
    5e80:	687b      	ldr	r3, [r7, #4]
    5e82:	781a      	ldrb	r2, [r3, #0]
    5e84:	68fb      	ldr	r3, [r7, #12]
    5e86:	719a      	strb	r2, [r3, #6]
    object->logicalName[1] = ln[1];
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	785a      	ldrb	r2, [r3, #1]
    5e8c:	68fb      	ldr	r3, [r7, #12]
    5e8e:	71da      	strb	r2, [r3, #7]
    object->logicalName[2] = ln[2];
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	789a      	ldrb	r2, [r3, #2]
    5e94:	68fb      	ldr	r3, [r7, #12]
    5e96:	721a      	strb	r2, [r3, #8]
    object->logicalName[3] = ln[3];
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	78da      	ldrb	r2, [r3, #3]
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	725a      	strb	r2, [r3, #9]
    object->logicalName[4] = ln[4];
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	791a      	ldrb	r2, [r3, #4]
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	729a      	strb	r2, [r3, #10]
    object->logicalName[5] = ln[5];
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	795a      	ldrb	r2, [r3, #5]
    5eac:	68fb      	ldr	r3, [r7, #12]
    5eae:	72da      	strb	r2, [r3, #11]
    //Set default values, if any.
    switch (type)
    5eb0:	897b      	ldrh	r3, [r7, #10]
    5eb2:	3b01      	subs	r3, #1
    5eb4:	2b72      	cmp	r3, #114	; 0x72
    5eb6:	f200 814a 	bhi.w	614e <cosem_init2+0x306>
    5eba:	a201      	add	r2, pc, #4	; (adr r2, 5ec0 <cosem_init2+0x78>)
    5ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ec0:	0000614f 	.word	0x0000614f
    5ec4:	0000614f 	.word	0x0000614f
    5ec8:	0000614f 	.word	0x0000614f
    5ecc:	0000614f 	.word	0x0000614f
    5ed0:	0000614f 	.word	0x0000614f
    5ed4:	0000614f 	.word	0x0000614f
    5ed8:	0000613d 	.word	0x0000613d
    5edc:	0000614f 	.word	0x0000614f
    5ee0:	0000614f 	.word	0x0000614f
    5ee4:	0000614f 	.word	0x0000614f
    5ee8:	0000614f 	.word	0x0000614f
    5eec:	0000614f 	.word	0x0000614f
    5ef0:	0000614f 	.word	0x0000614f
    5ef4:	0000614f 	.word	0x0000614f
    5ef8:	0000608d 	.word	0x0000608d
    5efc:	0000614f 	.word	0x0000614f
    5f00:	0000614f 	.word	0x0000614f
    5f04:	0000614f 	.word	0x0000614f
    5f08:	0000614f 	.word	0x0000614f
    5f0c:	0000614f 	.word	0x0000614f
    5f10:	0000614f 	.word	0x0000614f
    5f14:	0000614f 	.word	0x0000614f
    5f18:	0000610b 	.word	0x0000610b
    5f1c:	0000614f 	.word	0x0000614f
    5f20:	0000614f 	.word	0x0000614f
    5f24:	0000614f 	.word	0x0000614f
    5f28:	0000614f 	.word	0x0000614f
    5f2c:	0000614f 	.word	0x0000614f
    5f30:	0000614f 	.word	0x0000614f
    5f34:	0000614f 	.word	0x0000614f
    5f38:	0000614f 	.word	0x0000614f
    5f3c:	0000614f 	.word	0x0000614f
    5f40:	0000614f 	.word	0x0000614f
    5f44:	0000614f 	.word	0x0000614f
    5f48:	0000614f 	.word	0x0000614f
    5f4c:	0000614f 	.word	0x0000614f
    5f50:	0000614f 	.word	0x0000614f
    5f54:	0000614f 	.word	0x0000614f
    5f58:	0000614f 	.word	0x0000614f
    5f5c:	0000614f 	.word	0x0000614f
    5f60:	0000614f 	.word	0x0000614f
    5f64:	0000614f 	.word	0x0000614f
    5f68:	0000614f 	.word	0x0000614f
    5f6c:	0000614f 	.word	0x0000614f
    5f70:	0000614f 	.word	0x0000614f
    5f74:	0000614f 	.word	0x0000614f
    5f78:	00006147 	.word	0x00006147
    5f7c:	0000614f 	.word	0x0000614f
    5f80:	0000614f 	.word	0x0000614f
    5f84:	0000614f 	.word	0x0000614f
    5f88:	0000614f 	.word	0x0000614f
    5f8c:	0000614f 	.word	0x0000614f
    5f90:	0000614f 	.word	0x0000614f
    5f94:	0000614f 	.word	0x0000614f
    5f98:	0000614f 	.word	0x0000614f
    5f9c:	0000614f 	.word	0x0000614f
    5fa0:	0000614f 	.word	0x0000614f
    5fa4:	0000614f 	.word	0x0000614f
    5fa8:	0000614f 	.word	0x0000614f
    5fac:	0000614f 	.word	0x0000614f
    5fb0:	0000614f 	.word	0x0000614f
    5fb4:	0000614f 	.word	0x0000614f
    5fb8:	0000614f 	.word	0x0000614f
    5fbc:	0000614f 	.word	0x0000614f
    5fc0:	0000614f 	.word	0x0000614f
    5fc4:	0000614f 	.word	0x0000614f
    5fc8:	0000614f 	.word	0x0000614f
    5fcc:	0000614f 	.word	0x0000614f
    5fd0:	0000614f 	.word	0x0000614f
    5fd4:	0000614f 	.word	0x0000614f
    5fd8:	0000614f 	.word	0x0000614f
    5fdc:	0000614f 	.word	0x0000614f
    5fe0:	0000614f 	.word	0x0000614f
    5fe4:	0000614f 	.word	0x0000614f
    5fe8:	0000614f 	.word	0x0000614f
    5fec:	0000614f 	.word	0x0000614f
    5ff0:	0000614f 	.word	0x0000614f
    5ff4:	0000614f 	.word	0x0000614f
    5ff8:	0000614f 	.word	0x0000614f
    5ffc:	0000614f 	.word	0x0000614f
    6000:	0000614f 	.word	0x0000614f
    6004:	0000614f 	.word	0x0000614f
    6008:	0000614f 	.word	0x0000614f
    600c:	0000614f 	.word	0x0000614f
    6010:	0000614f 	.word	0x0000614f
    6014:	0000614f 	.word	0x0000614f
    6018:	0000614f 	.word	0x0000614f
    601c:	0000614f 	.word	0x0000614f
    6020:	0000614f 	.word	0x0000614f
    6024:	0000614f 	.word	0x0000614f
    6028:	0000614f 	.word	0x0000614f
    602c:	0000614f 	.word	0x0000614f
    6030:	0000614f 	.word	0x0000614f
    6034:	0000614f 	.word	0x0000614f
    6038:	0000614f 	.word	0x0000614f
    603c:	0000614f 	.word	0x0000614f
    6040:	0000614f 	.word	0x0000614f
    6044:	0000614f 	.word	0x0000614f
    6048:	0000614f 	.word	0x0000614f
    604c:	0000614f 	.word	0x0000614f
    6050:	0000614f 	.word	0x0000614f
    6054:	0000614f 	.word	0x0000614f
    6058:	0000614f 	.word	0x0000614f
    605c:	0000614f 	.word	0x0000614f
    6060:	0000614f 	.word	0x0000614f
    6064:	0000614f 	.word	0x0000614f
    6068:	0000614f 	.word	0x0000614f
    606c:	0000614f 	.word	0x0000614f
    6070:	0000614f 	.word	0x0000614f
    6074:	0000614f 	.word	0x0000614f
    6078:	0000614f 	.word	0x0000614f
    607c:	0000614f 	.word	0x0000614f
    6080:	0000614f 	.word	0x0000614f
    6084:	0000614f 	.word	0x0000614f
    6088:	0000614f 	.word	0x0000614f
        break;
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        gxAssociationLogicalName * it = (gxAssociationLogicalName*)object;
    608c:	68fb      	ldr	r3, [r7, #12]
    608e:	613b      	str	r3, [r7, #16]
        object->version = 2;
    6090:	68fb      	ldr	r3, [r7, #12]
    6092:	2202      	movs	r2, #2
    6094:	705a      	strb	r2, [r3, #1]
        it->xDLMSContextInfo.dlmsVersionNumber = 6;
    6096:	693b      	ldr	r3, [r7, #16]
    6098:	2206      	movs	r2, #6
    609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        it->applicationContextName.jointIsoCtt = 2;
    609e:	693b      	ldr	r3, [r7, #16]
    60a0:	2202      	movs	r2, #2
    60a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        it->applicationContextName.country = 16;
    60a6:	693b      	ldr	r3, [r7, #16]
    60a8:	2210      	movs	r2, #16
    60aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        it->applicationContextName.countryName = 756;
    60ae:	693b      	ldr	r3, [r7, #16]
    60b0:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    60b4:	859a      	strh	r2, [r3, #44]	; 0x2c
        it->applicationContextName.identifiedOrganization = 5;
    60b6:	693b      	ldr	r3, [r7, #16]
    60b8:	2205      	movs	r2, #5
    60ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        it->applicationContextName.dlmsUA = 8;
    60be:	693b      	ldr	r3, [r7, #16]
    60c0:	2208      	movs	r2, #8
    60c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        it->applicationContextName.applicationContext = 1;
    60c6:	693b      	ldr	r3, [r7, #16]
    60c8:	2201      	movs	r2, #1
    60ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
    60ce:	693b      	ldr	r3, [r7, #16]
    60d0:	2201      	movs	r2, #1
    60d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        it->authenticationMechanismName.jointIsoCtt = 2;
    60d6:	693b      	ldr	r3, [r7, #16]
    60d8:	2202      	movs	r2, #2
    60da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        it->authenticationMechanismName.country = 16;
    60de:	693b      	ldr	r3, [r7, #16]
    60e0:	2210      	movs	r2, #16
    60e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        it->authenticationMechanismName.countryName = 756;
    60e6:	693b      	ldr	r3, [r7, #16]
    60e8:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    60ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        it->authenticationMechanismName.identifiedOrganization = 5;
    60f0:	693b      	ldr	r3, [r7, #16]
    60f2:	2205      	movs	r2, #5
    60f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        it->authenticationMechanismName.dlmsUA = 8;
    60f8:	693b      	ldr	r3, [r7, #16]
    60fa:	2208      	movs	r2, #8
    60fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        it->authenticationMechanismName.authenticationMechanismName = 2;
    6100:	693b      	ldr	r3, [r7, #16]
    6102:	2202      	movs	r2, #2
    6104:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    }
    break;
    6108:	e022      	b.n	6150 <cosem_init2+0x308>
        break;
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        break;
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
        object->version = 1;
    610a:	68fb      	ldr	r3, [r7, #12]
    610c:	2201      	movs	r2, #1
    610e:	705a      	strb	r2, [r3, #1]
        ((gxIecHdlcSetup*)object)->communicationSpeed = DLMS_BAUD_RATE_9600;
    6110:	68fb      	ldr	r3, [r7, #12]
    6112:	2205      	movs	r2, #5
    6114:	759a      	strb	r2, [r3, #22]
        ((gxIecHdlcSetup*)object)->windowSizeTransmit = 1;
    6116:	68fb      	ldr	r3, [r7, #12]
    6118:	2201      	movs	r2, #1
    611a:	75da      	strb	r2, [r3, #23]
        ((gxIecHdlcSetup*)object)->windowSizeReceive = 1;
    611c:	68fb      	ldr	r3, [r7, #12]
    611e:	2201      	movs	r2, #1
    6120:	761a      	strb	r2, [r3, #24]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    6122:	68fb      	ldr	r3, [r7, #12]
    6124:	2280      	movs	r2, #128	; 0x80
    6126:	829a      	strh	r2, [r3, #20]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthReceive = 128;
    6128:	68fb      	ldr	r3, [r7, #12]
    612a:	2280      	movs	r2, #128	; 0x80
    612c:	839a      	strh	r2, [r3, #28]
        ((gxIecHdlcSetup*)object)->interCharachterTimeout = 25;
    612e:	68fb      	ldr	r3, [r7, #12]
    6130:	2219      	movs	r2, #25
    6132:	835a      	strh	r2, [r3, #26]
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
    6134:	68fb      	ldr	r3, [r7, #12]
    6136:	2278      	movs	r2, #120	; 0x78
    6138:	821a      	strh	r2, [r3, #16]
        break;
    613a:	e009      	b.n	6150 <cosem_init2+0x308>
        break;
    case DLMS_OBJECT_TYPE_PPP_SETUP:
        break;
#ifndef DLMS_IGNORE_PROFILE_GENERIC
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
        ((gxProfileGeneric*)object)->maxRowCount = 1;
    613c:	68fb      	ldr	r3, [r7, #12]
    613e:	2201      	movs	r2, #1
    6140:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        break;
    6144:	e004      	b.n	6150 <cosem_init2+0x308>
    case DLMS_OBJECT_TYPE_CHARGE:
        break;
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        break;
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        object->version = 1;
    6146:	68fb      	ldr	r3, [r7, #12]
    6148:	2201      	movs	r2, #1
    614a:	705a      	strb	r2, [r3, #1]
        break;
    614c:	e000      	b.n	6150 <cosem_init2+0x308>
    default:
        break;
    614e:	bf00      	nop
    }
    return 0;
    6150:	2300      	movs	r3, #0
}
    6152:	4618      	mov	r0, r3
    6154:	3718      	adds	r7, #24
    6156:	46bd      	mov	sp, r7
    6158:	bd80      	pop	{r7, pc}
    615a:	bf00      	nop

0000615c <di_init>:
//---------------------------------------------------------------------------

#include "../include/datainfo.h"

void di_init(gxDataInfo *info)
{
    615c:	b480      	push	{r7}
    615e:	b083      	sub	sp, #12
    6160:	af00      	add	r7, sp, #0
    6162:	6078      	str	r0, [r7, #4]
    info->index = 0;
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	2200      	movs	r2, #0
    6168:	801a      	strh	r2, [r3, #0]
    info->count = 0;
    616a:	687b      	ldr	r3, [r7, #4]
    616c:	2200      	movs	r2, #0
    616e:	805a      	strh	r2, [r3, #2]
    info->type = DLMS_DATA_TYPE_NONE;
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	2200      	movs	r2, #0
    6174:	711a      	strb	r2, [r3, #4]
    info->compleate = 0;
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	2200      	movs	r2, #0
    617a:	715a      	strb	r2, [r3, #5]
}
    617c:	bf00      	nop
    617e:	370c      	adds	r7, #12
    6180:	46bd      	mov	sp, r7
    6182:	bc80      	pop	{r7}
    6184:	4770      	bx	lr
    6186:	bf00      	nop

00006188 <time_getUtcOffset>:
#endif
#include "../include/date.h"

//Get UTC offset in minutes.
void time_getUtcOffset(short* hours, short* minutes)
{
    6188:	b5b0      	push	{r4, r5, r7, lr}
    618a:	b08c      	sub	sp, #48	; 0x30
    618c:	af00      	add	r7, sp, #0
    618e:	6078      	str	r0, [r7, #4]
    6190:	6039      	str	r1, [r7, #0]
    time_t zero = 24 * 60 * 60L;
    6192:	4b14      	ldr	r3, [pc, #80]	; (61e4 <time_getUtcOffset+0x5c>)
    6194:	62fb      	str	r3, [r7, #44]	; 0x2c

    // local time for Jan 2, 1900 00:00 UTC
#if _MSC_VER > 1000
    localtime_s(&tm, &zero);
#else
    tm = *localtime(&zero);
    6196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    619a:	4618      	mov	r0, r3
    619c:	f023 fb5a 	bl	29854 <localtime>
    61a0:	4603      	mov	r3, r0
    61a2:	f107 0408 	add.w	r4, r7, #8
    61a6:	461d      	mov	r5, r3
    61a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    61aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    61ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    61ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    61b0:	682b      	ldr	r3, [r5, #0]
    61b2:	6023      	str	r3, [r4, #0]
#endif
    *hours = (short)tm.tm_hour;
    61b4:	693b      	ldr	r3, [r7, #16]
    61b6:	b21a      	sxth	r2, r3
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	801a      	strh	r2, [r3, #0]

    //If the local time is the "day before" the UTC, subtract 24 hours from the hours to get the UTC offset
    if (tm.tm_mday < 2)
    61bc:	697b      	ldr	r3, [r7, #20]
    61be:	2b01      	cmp	r3, #1
    61c0:	dc08      	bgt.n	61d4 <time_getUtcOffset+0x4c>
    {
        *hours -= 24;
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	f9b3 3000 	ldrsh.w	r3, [r3]
    61c8:	b29b      	uxth	r3, r3
    61ca:	3b18      	subs	r3, #24
    61cc:	b29b      	uxth	r3, r3
    61ce:	b21a      	sxth	r2, r3
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	801a      	strh	r2, [r3, #0]
    }
    *minutes = (short)tm.tm_min;
    61d4:	68fb      	ldr	r3, [r7, #12]
    61d6:	b21a      	sxth	r2, r3
    61d8:	683b      	ldr	r3, [r7, #0]
    61da:	801a      	strh	r2, [r3, #0]
}
    61dc:	bf00      	nop
    61de:	3730      	adds	r7, #48	; 0x30
    61e0:	46bd      	mov	sp, r7
    61e2:	bdb0      	pop	{r4, r5, r7, pc}
    61e4:	00015180 	.word	0x00015180

000061e8 <time_init>:
    int hour,
    int minute,
    int second,
    int millisecond,
    int devitation)
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b092      	sub	sp, #72	; 0x48
    61ec:	af00      	add	r7, sp, #0
    61ee:	60f8      	str	r0, [r7, #12]
    61f0:	60b9      	str	r1, [r7, #8]
    61f2:	607a      	str	r2, [r7, #4]
    61f4:	603b      	str	r3, [r7, #0]
    gxtime now;
    int skip = DATETIME_SKIPS_NONE;
    61f6:	2300      	movs	r3, #0
    61f8:	647b      	str	r3, [r7, #68]	; 0x44
    memset(&time->value, 0, sizeof(time->value));
    61fa:	68fb      	ldr	r3, [r7, #12]
    61fc:	3304      	adds	r3, #4
    61fe:	2224      	movs	r2, #36	; 0x24
    6200:	2100      	movs	r1, #0
    6202:	4618      	mov	r0, r3
    6204:	f023 fc63 	bl	29ace <memset>
    time->daylightSavingsBegin = time->daylightSavingsEnd = 0;
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	2200      	movs	r2, #0
    620c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    6210:	68fb      	ldr	r3, [r7, #12]
    6212:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    6216:	68fb      	ldr	r3, [r7, #12]
    6218:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    time->status = DLMS_CLOCK_STATUS_OK;
    621c:	68fb      	ldr	r3, [r7, #12]
    621e:	2200      	movs	r2, #0
    6220:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (year < 1 || year == 0xFFFF)
    6224:	68bb      	ldr	r3, [r7, #8]
    6226:	2b00      	cmp	r3, #0
    6228:	dd04      	ble.n	6234 <time_init+0x4c>
    622a:	68bb      	ldr	r3, [r7, #8]
    622c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6230:	4293      	cmp	r3, r2
    6232:	d10c      	bne.n	624e <time_init+0x66>
    {
        skip |= DATETIME_SKIPS_YEAR;
    6234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6236:	f043 0301 	orr.w	r3, r3, #1
    623a:	647b      	str	r3, [r7, #68]	; 0x44
        time_now(&now);
    623c:	f107 0314 	add.w	r3, r7, #20
    6240:	4618      	mov	r0, r3
    6242:	f022 fc49 	bl	28ad8 <time_now>
        year = 1900 + now.value.tm_year;
    6246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6248:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    624c:	60bb      	str	r3, [r7, #8]
    }
    if (month < 1 || month == 0xFF)
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	2b00      	cmp	r3, #0
    6252:	dd02      	ble.n	625a <time_init+0x72>
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2bff      	cmp	r3, #255	; 0xff
    6258:	d106      	bne.n	6268 <time_init+0x80>
    {
        skip |= DATETIME_SKIPS_MONTH;
    625a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    625c:	f043 0302 	orr.w	r3, r3, #2
    6260:	647b      	str	r3, [r7, #68]	; 0x44
        month = 0;
    6262:	2300      	movs	r3, #0
    6264:	607b      	str	r3, [r7, #4]
    6266:	e002      	b.n	626e <time_init+0x86>
    }
    else
    {
        --month;
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	3b01      	subs	r3, #1
    626c:	607b      	str	r3, [r7, #4]
    }
    if (day < 1 || day == 0xFF)
    626e:	683b      	ldr	r3, [r7, #0]
    6270:	2b00      	cmp	r3, #0
    6272:	dd02      	ble.n	627a <time_init+0x92>
    6274:	683b      	ldr	r3, [r7, #0]
    6276:	2bff      	cmp	r3, #255	; 0xff
    6278:	d106      	bne.n	6288 <time_init+0xa0>
    {
        skip |= DATETIME_SKIPS_DAY;
    627a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    627c:	f043 0304 	orr.w	r3, r3, #4
    6280:	647b      	str	r3, [r7, #68]	; 0x44
        day = 1;
    6282:	2301      	movs	r3, #1
    6284:	603b      	str	r3, [r7, #0]
    6286:	e017      	b.n	62b8 <time_init+0xd0>
    }
    else if (day == 0xFD)
    6288:	683b      	ldr	r3, [r7, #0]
    628a:	2bfd      	cmp	r3, #253	; 0xfd
    628c:	d109      	bne.n	62a2 <time_init+0xba>
    {
        day = date_daysInMonth(year, (short)month) - 1;
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	b21b      	sxth	r3, r3
    6292:	4619      	mov	r1, r3
    6294:	68b8      	ldr	r0, [r7, #8]
    6296:	f000 f8f9 	bl	648c <date_daysInMonth>
    629a:	4603      	mov	r3, r0
    629c:	3b01      	subs	r3, #1
    629e:	603b      	str	r3, [r7, #0]
    62a0:	e00a      	b.n	62b8 <time_init+0xd0>
    }
    else if (day == 0xFE)
    62a2:	683b      	ldr	r3, [r7, #0]
    62a4:	2bfe      	cmp	r3, #254	; 0xfe
    62a6:	d107      	bne.n	62b8 <time_init+0xd0>
    {
        day = date_daysInMonth(year, (short)month);
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	b21b      	sxth	r3, r3
    62ac:	4619      	mov	r1, r3
    62ae:	68b8      	ldr	r0, [r7, #8]
    62b0:	f000 f8ec 	bl	648c <date_daysInMonth>
    62b4:	4603      	mov	r3, r0
    62b6:	603b      	str	r3, [r7, #0]
    }
    if (hour == -1 || hour == 0xFF)
    62b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    62ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    62be:	d002      	beq.n	62c6 <time_init+0xde>
    62c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    62c2:	2bff      	cmp	r3, #255	; 0xff
    62c4:	d105      	bne.n	62d2 <time_init+0xea>
    {
        skip |= DATETIME_SKIPS_HOUR;
    62c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    62c8:	f043 0310 	orr.w	r3, r3, #16
    62cc:	647b      	str	r3, [r7, #68]	; 0x44
        hour = 1;
    62ce:	2301      	movs	r3, #1
    62d0:	653b      	str	r3, [r7, #80]	; 0x50
    }
    if (minute == -1 || minute == 0xFF)
    62d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    62d8:	d002      	beq.n	62e0 <time_init+0xf8>
    62da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    62dc:	2bff      	cmp	r3, #255	; 0xff
    62de:	d105      	bne.n	62ec <time_init+0x104>
    {
        skip |= DATETIME_SKIPS_MINUTE;
    62e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    62e2:	f043 0320 	orr.w	r3, r3, #32
    62e6:	647b      	str	r3, [r7, #68]	; 0x44
        minute = 0;
    62e8:	2300      	movs	r3, #0
    62ea:	657b      	str	r3, [r7, #84]	; 0x54
    }
    if (second == -1 || second == 0xFF)
    62ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    62ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    62f2:	d002      	beq.n	62fa <time_init+0x112>
    62f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    62f6:	2bff      	cmp	r3, #255	; 0xff
    62f8:	d105      	bne.n	6306 <time_init+0x11e>
    {
        skip |= DATETIME_SKIPS_SECOND;
    62fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    62fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6300:	647b      	str	r3, [r7, #68]	; 0x44
        second = 0;
    6302:	2300      	movs	r3, #0
    6304:	65bb      	str	r3, [r7, #88]	; 0x58
    }
    if (millisecond < 1 || millisecond == 0xFF)
    6306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6308:	2b00      	cmp	r3, #0
    630a:	dd02      	ble.n	6312 <time_init+0x12a>
    630c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    630e:	2bff      	cmp	r3, #255	; 0xff
    6310:	d105      	bne.n	631e <time_init+0x136>
    {
        skip |= DATETIME_SKIPS_MS;
    6312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6318:	647b      	str	r3, [r7, #68]	; 0x44
        millisecond = 0;
    631a:	2300      	movs	r3, #0
    631c:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    time->skip = (DATETIME_SKIPS)skip;
    631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6320:	b2da      	uxtb	r2, r3
    6322:	68fb      	ldr	r3, [r7, #12]
    6324:	701a      	strb	r2, [r3, #0]
    if (year != 0)
    6326:	68bb      	ldr	r3, [r7, #8]
    6328:	2b00      	cmp	r3, #0
    632a:	d004      	beq.n	6336 <time_init+0x14e>
    {
        time->value.tm_year = year - 1900;
    632c:	68bb      	ldr	r3, [r7, #8]
    632e:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
    6332:	68fb      	ldr	r3, [r7, #12]
    6334:	619a      	str	r2, [r3, #24]
    }
    time->value.tm_mon = month;
    6336:	68fb      	ldr	r3, [r7, #12]
    6338:	687a      	ldr	r2, [r7, #4]
    633a:	615a      	str	r2, [r3, #20]
    time->value.tm_mday = day;
    633c:	68fb      	ldr	r3, [r7, #12]
    633e:	683a      	ldr	r2, [r7, #0]
    6340:	611a      	str	r2, [r3, #16]
    time->value.tm_hour = hour;
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6346:	60da      	str	r2, [r3, #12]
    time->value.tm_min = minute;
    6348:	68fb      	ldr	r3, [r7, #12]
    634a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    634c:	609a      	str	r2, [r3, #8]
    time->value.tm_sec = second;
    634e:	68fb      	ldr	r3, [r7, #12]
    6350:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6352:	605a      	str	r2, [r3, #4]
    time->deviation = (short)devitation;
    6354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6356:	b21a      	sxth	r2, r3
    6358:	68fb      	ldr	r3, [r7, #12]
    635a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (mktime(&time->value) == -1)
    635c:	68fb      	ldr	r3, [r7, #12]
    635e:	3304      	adds	r3, #4
    6360:	4618      	mov	r0, r3
    6362:	f023 fc99 	bl	29c98 <mktime>
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
    //If summer time.
    if (time->value.tm_isdst)
    6366:	68fb      	ldr	r3, [r7, #12]
    6368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    636a:	2b00      	cmp	r3, #0
    636c:	d009      	beq.n	6382 <time_init+0x19a>
    {
        --time->value.tm_hour;
    636e:	68fb      	ldr	r3, [r7, #12]
    6370:	68db      	ldr	r3, [r3, #12]
    6372:	1e5a      	subs	r2, r3, #1
    6374:	68fb      	ldr	r3, [r7, #12]
    6376:	60da      	str	r2, [r3, #12]
        if (mktime(&time->value) == -1)
    6378:	68fb      	ldr	r3, [r7, #12]
    637a:	3304      	adds	r3, #4
    637c:	4618      	mov	r0, r3
    637e:	f023 fc8b 	bl	29c98 <mktime>
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(0);
#endif
        }
    }
}
    6382:	bf00      	nop
    6384:	3748      	adds	r7, #72	; 0x48
    6386:	46bd      	mov	sp, r7
    6388:	bd80      	pop	{r7, pc}
    638a:	bf00      	nop

0000638c <time_init2>:
}

void time_init2(
    gxtime* time,
    struct tm* value)
{
    638c:	b5f0      	push	{r4, r5, r6, r7, lr}
    638e:	b08b      	sub	sp, #44	; 0x2c
    6390:	af06      	add	r7, sp, #24
    6392:	6078      	str	r0, [r7, #4]
    6394:	6039      	str	r1, [r7, #0]
    short devitation, hours, minutes;
    time_getUtcOffset(&hours, &minutes);
    6396:	f107 020a 	add.w	r2, r7, #10
    639a:	f107 030c 	add.w	r3, r7, #12
    639e:	4611      	mov	r1, r2
    63a0:	4618      	mov	r0, r3
    63a2:	f7ff fef1 	bl	6188 <time_getUtcOffset>
    devitation = -(hours * 60 + minutes);
    63a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
    63aa:	b29b      	uxth	r3, r3
    63ac:	461a      	mov	r2, r3
    63ae:	011b      	lsls	r3, r3, #4
    63b0:	1ad3      	subs	r3, r2, r3
    63b2:	009b      	lsls	r3, r3, #2
    63b4:	b29a      	uxth	r2, r3
    63b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    63ba:	b29b      	uxth	r3, r3
    63bc:	1ad3      	subs	r3, r2, r3
    63be:	b29b      	uxth	r3, r3
    63c0:	81fb      	strh	r3, [r7, #14]
    time_init(time, value->tm_year + 1900, value->tm_mon + 1, value->tm_mday, value->tm_hour, value->tm_min,
    63c2:	683b      	ldr	r3, [r7, #0]
    63c4:	695b      	ldr	r3, [r3, #20]
    63c6:	f203 746c 	addw	r4, r3, #1900	; 0x76c
    63ca:	683b      	ldr	r3, [r7, #0]
    63cc:	691b      	ldr	r3, [r3, #16]
    63ce:	1c5d      	adds	r5, r3, #1
    63d0:	683b      	ldr	r3, [r7, #0]
    63d2:	68de      	ldr	r6, [r3, #12]
    63d4:	683b      	ldr	r3, [r7, #0]
    63d6:	689b      	ldr	r3, [r3, #8]
    63d8:	683a      	ldr	r2, [r7, #0]
    63da:	6852      	ldr	r2, [r2, #4]
    63dc:	6839      	ldr	r1, [r7, #0]
    63de:	6809      	ldr	r1, [r1, #0]
    63e0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
    63e4:	9004      	str	r0, [sp, #16]
    63e6:	2000      	movs	r0, #0
    63e8:	9003      	str	r0, [sp, #12]
    63ea:	9102      	str	r1, [sp, #8]
    63ec:	9201      	str	r2, [sp, #4]
    63ee:	9300      	str	r3, [sp, #0]
    63f0:	4633      	mov	r3, r6
    63f2:	462a      	mov	r2, r5
    63f4:	4621      	mov	r1, r4
    63f6:	6878      	ldr	r0, [r7, #4]
    63f8:	f7ff fef6 	bl	61e8 <time_init>
        value->tm_sec, 0, devitation);
}
    63fc:	bf00      	nop
    63fe:	3714      	adds	r7, #20
    6400:	46bd      	mov	sp, r7
    6402:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006404 <time_init4>:

void time_init4(
    gxtime* time,
    time_t value)
{
    6404:	b580      	push	{r7, lr}
    6406:	b082      	sub	sp, #8
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	6039      	str	r1, [r7, #0]
    time->deviation = 0;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2200      	movs	r2, #0
    6412:	851a      	strh	r2, [r3, #40]	; 0x28
    time_fromUnixTime(value, &time->value);
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	3304      	adds	r3, #4
    6418:	4619      	mov	r1, r3
    641a:	6838      	ldr	r0, [r7, #0]
    641c:	f000 fb38 	bl	6a90 <time_fromUnixTime>
    time->daylightSavingsBegin = time->daylightSavingsEnd = 0;
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	2200      	movs	r2, #0
    6424:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    time->status = DLMS_CLOCK_STATUS_OK;
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	2200      	movs	r2, #0
    6438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    time->skip = DATETIME_SKIPS_NONE;
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	2200      	movs	r2, #0
    6440:	701a      	strb	r2, [r3, #0]
}
    6442:	bf00      	nop
    6444:	3708      	adds	r7, #8
    6446:	46bd      	mov	sp, r7
    6448:	bd80      	pop	{r7, pc}
    644a:	bf00      	nop

0000644c <time_clear>:

void time_clear(
    gxtime* time)
{
    644c:	b580      	push	{r7, lr}
    644e:	b082      	sub	sp, #8
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    time->skip = DATETIME_SKIPS_NONE;
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	2200      	movs	r2, #0
    6458:	701a      	strb	r2, [r3, #0]
    memset(&time->value, 0, sizeof(struct tm));
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	3304      	adds	r3, #4
    645e:	2224      	movs	r2, #36	; 0x24
    6460:	2100      	movs	r1, #0
    6462:	4618      	mov	r0, r3
    6464:	f023 fb33 	bl	29ace <memset>
    time->daylightSavingsBegin = time->daylightSavingsEnd = 0;
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	2200      	movs	r2, #0
    646c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    time->status = DLMS_CLOCK_STATUS_OK;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	2200      	movs	r2, #0
    6480:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    6484:	bf00      	nop
    6486:	3708      	adds	r7, #8
    6488:	46bd      	mov	sp, r7
    648a:	bd80      	pop	{r7, pc}

0000648c <date_daysInMonth>:

unsigned char date_daysInMonth(
    int year,
    short month)
{
    648c:	b480      	push	{r7}
    648e:	b083      	sub	sp, #12
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
    6494:	460b      	mov	r3, r1
    6496:	807b      	strh	r3, [r7, #2]
    if (month == 0 || month == 2 || month == 4 ||
    6498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    649c:	2b00      	cmp	r3, #0
    649e:	d017      	beq.n	64d0 <date_daysInMonth+0x44>
    64a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64a4:	2b02      	cmp	r3, #2
    64a6:	d013      	beq.n	64d0 <date_daysInMonth+0x44>
    64a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64ac:	2b04      	cmp	r3, #4
    64ae:	d00f      	beq.n	64d0 <date_daysInMonth+0x44>
    64b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64b4:	2b06      	cmp	r3, #6
    64b6:	d00b      	beq.n	64d0 <date_daysInMonth+0x44>
        month == 6 || month == 7 || month == 9 || month == 11)
    64b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64bc:	2b07      	cmp	r3, #7
    64be:	d007      	beq.n	64d0 <date_daysInMonth+0x44>
    64c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64c4:	2b09      	cmp	r3, #9
    64c6:	d003      	beq.n	64d0 <date_daysInMonth+0x44>
    64c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64cc:	2b0b      	cmp	r3, #11
    64ce:	d101      	bne.n	64d4 <date_daysInMonth+0x48>
    {
        return 31;
    64d0:	231f      	movs	r3, #31
    64d2:	e038      	b.n	6546 <date_daysInMonth+0xba>
    }
    else if (month == 3 || month == 5 || month == 8 || month == 10)
    64d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64d8:	2b03      	cmp	r3, #3
    64da:	d00b      	beq.n	64f4 <date_daysInMonth+0x68>
    64dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64e0:	2b05      	cmp	r3, #5
    64e2:	d007      	beq.n	64f4 <date_daysInMonth+0x68>
    64e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64e8:	2b08      	cmp	r3, #8
    64ea:	d003      	beq.n	64f4 <date_daysInMonth+0x68>
    64ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    64f0:	2b0a      	cmp	r3, #10
    64f2:	d101      	bne.n	64f8 <date_daysInMonth+0x6c>
    {
        return 30;
    64f4:	231e      	movs	r3, #30
    64f6:	e026      	b.n	6546 <date_daysInMonth+0xba>
    }
    if (year % 4 == 0)
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	f003 0303 	and.w	r3, r3, #3
    64fe:	2b00      	cmp	r3, #0
    6500:	d120      	bne.n	6544 <date_daysInMonth+0xb8>
    {
        if (year % 100 == 0)
    6502:	687a      	ldr	r2, [r7, #4]
    6504:	4b12      	ldr	r3, [pc, #72]	; (6550 <date_daysInMonth+0xc4>)
    6506:	fb83 1302 	smull	r1, r3, r3, r2
    650a:	1159      	asrs	r1, r3, #5
    650c:	17d3      	asrs	r3, r2, #31
    650e:	1acb      	subs	r3, r1, r3
    6510:	2164      	movs	r1, #100	; 0x64
    6512:	fb01 f303 	mul.w	r3, r1, r3
    6516:	1ad3      	subs	r3, r2, r3
    6518:	2b00      	cmp	r3, #0
    651a:	d111      	bne.n	6540 <date_daysInMonth+0xb4>
        {
            if (year % 400 == 0)
    651c:	687a      	ldr	r2, [r7, #4]
    651e:	4b0c      	ldr	r3, [pc, #48]	; (6550 <date_daysInMonth+0xc4>)
    6520:	fb83 1302 	smull	r1, r3, r3, r2
    6524:	11d9      	asrs	r1, r3, #7
    6526:	17d3      	asrs	r3, r2, #31
    6528:	1acb      	subs	r3, r1, r3
    652a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    652e:	fb01 f303 	mul.w	r3, r1, r3
    6532:	1ad3      	subs	r3, r2, r3
    6534:	2b00      	cmp	r3, #0
    6536:	d101      	bne.n	653c <date_daysInMonth+0xb0>
            {
                return 29;
    6538:	231d      	movs	r3, #29
    653a:	e004      	b.n	6546 <date_daysInMonth+0xba>
            }
            return 28;
    653c:	231c      	movs	r3, #28
    653e:	e002      	b.n	6546 <date_daysInMonth+0xba>
        }
        return 29;
    6540:	231d      	movs	r3, #29
    6542:	e000      	b.n	6546 <date_daysInMonth+0xba>
    }
    return 28;
    6544:	231c      	movs	r3, #28
}
    6546:	4618      	mov	r0, r3
    6548:	370c      	adds	r7, #12
    654a:	46bd      	mov	sp, r7
    654c:	bc80      	pop	{r7}
    654e:	4770      	bx	lr
    6550:	51eb851f 	.word	0x51eb851f

00006554 <getDateFormat>:
    GXDLMS_DATE_FORMAT_YDM = 3
} GXDLMS_DATE_FORMAT;

#ifndef GX_DLMS_MICROCONTROLLER
int getDateFormat(GXDLMS_DATE_FORMAT* format, char* separator)
{
    6554:	b480      	push	{r7}
    6556:	b083      	sub	sp, #12
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
    655c:	6039      	str	r1, [r7, #0]
            }
        }
    }
    return 0;
#else
    *format = GXDLMS_DATE_FORMAT_MDY;
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	2201      	movs	r2, #1
    6562:	701a      	strb	r2, [r3, #0]
    *separator = '/';
    6564:	683b      	ldr	r3, [r7, #0]
    6566:	222f      	movs	r2, #47	; 0x2f
    6568:	701a      	strb	r2, [r3, #0]
    return 0;
    656a:	2300      	movs	r3, #0
#endif
}
    656c:	4618      	mov	r0, r3
    656e:	370c      	adds	r7, #12
    6570:	46bd      	mov	sp, r7
    6572:	bc80      	pop	{r7}
    6574:	4770      	bx	lr
    6576:	bf00      	nop

00006578 <time_toString>:
}

int time_toString(
    gxtime* time,
    gxByteBuffer* ba)
{
    6578:	b5b0      	push	{r4, r5, r7, lr}
    657a:	b096      	sub	sp, #88	; 0x58
    657c:	af04      	add	r7, sp, #16
    657e:	6078      	str	r0, [r7, #4]
    6580:	6039      	str	r1, [r7, #0]
    int ret = 0;
    6582:	2300      	movs	r3, #0
    6584:	647b      	str	r3, [r7, #68]	; 0x44
    char buff[50];
    GXDLMS_DATE_FORMAT format;
    char separator;
    if (time->skip != DATETIME_SKIPS_NONE)
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	2b00      	cmp	r3, #0
    658c:	f000 81d0 	beq.w	6930 <time_toString+0x3b8>
    {
        //Add year, month and date if used.
        if ((time->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY))
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	f003 0307 	and.w	r3, r3, #7
    6598:	2b07      	cmp	r3, #7
    659a:	f000 8172 	beq.w	6882 <time_toString+0x30a>
        {
            if ((ret = getDateFormat(&format, &separator)) != 0)
    659e:	f107 020e 	add.w	r2, r7, #14
    65a2:	f107 030f 	add.w	r3, r7, #15
    65a6:	4611      	mov	r1, r2
    65a8:	4618      	mov	r0, r3
    65aa:	f7ff ffd3 	bl	6554 <getDateFormat>
    65ae:	6478      	str	r0, [r7, #68]	; 0x44
    65b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65b2:	2b00      	cmp	r3, #0
    65b4:	d001      	beq.n	65ba <time_toString+0x42>
            {
                return ret;
    65b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65b8:	e1c6      	b.n	6948 <time_toString+0x3d0>
            }
            switch (format)
    65ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65be:	2b03      	cmp	r3, #3
    65c0:	f200 8134 	bhi.w	682c <time_toString+0x2b4>
    65c4:	a201      	add	r2, pc, #4	; (adr r2, 65cc <time_toString+0x54>)
    65c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    65ca:	bf00      	nop
    65cc:	000065dd 	.word	0x000065dd
    65d0:	0000666f 	.word	0x0000666f
    65d4:	00006705 	.word	0x00006705
    65d8:	0000679b 	.word	0x0000679b
            {
            case GXDLMS_DATE_FORMAT_DMY:
            {
                if (time->value.tm_mday != -1 && (time->skip & DATETIME_SKIPS_DAY) == 0)
    65dc:	687b      	ldr	r3, [r7, #4]
    65de:	691b      	ldr	r3, [r3, #16]
    65e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    65e4:	d00b      	beq.n	65fe <time_toString+0x86>
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	f003 0304 	and.w	r3, r3, #4
    65ee:	2b00      	cmp	r3, #0
    65f0:	d105      	bne.n	65fe <time_toString+0x86>
                {
                    bb_addIntAsString(ba, time->value.tm_mday);
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	691b      	ldr	r3, [r3, #16]
    65f6:	4619      	mov	r1, r3
    65f8:	6838      	ldr	r0, [r7, #0]
    65fa:	f7fd fbcf 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mon != -1 && (time->skip & DATETIME_SKIPS_MONTH) == 0)
    65fe:	687b      	ldr	r3, [r7, #4]
    6600:	695b      	ldr	r3, [r3, #20]
    6602:	f1b3 3fff 	cmp.w	r3, #4294967295
    6606:	d015      	beq.n	6634 <time_toString+0xbc>
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	f003 0302 	and.w	r3, r3, #2
    6610:	2b00      	cmp	r3, #0
    6612:	d10f      	bne.n	6634 <time_toString+0xbc>
                {
                    if (ba->size != 0)
    6614:	683b      	ldr	r3, [r7, #0]
    6616:	88db      	ldrh	r3, [r3, #6]
    6618:	2b00      	cmp	r3, #0
    661a:	d004      	beq.n	6626 <time_toString+0xae>
                    {
                        bb_setUInt8(ba, separator);
    661c:	7bbb      	ldrb	r3, [r7, #14]
    661e:	4619      	mov	r1, r3
    6620:	6838      	ldr	r0, [r7, #0]
    6622:	f7fc fbf7 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, 1 + time->value.tm_mon);
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	695b      	ldr	r3, [r3, #20]
    662a:	3301      	adds	r3, #1
    662c:	4619      	mov	r1, r3
    662e:	6838      	ldr	r0, [r7, #0]
    6630:	f7fd fbb4 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_year != -1 && (time->skip & DATETIME_SKIPS_YEAR) == 0)
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	699b      	ldr	r3, [r3, #24]
    6638:	f1b3 3fff 	cmp.w	r3, #4294967295
    663c:	f000 811a 	beq.w	6874 <time_toString+0x2fc>
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	f003 0301 	and.w	r3, r3, #1
    6648:	2b00      	cmp	r3, #0
    664a:	f040 8113 	bne.w	6874 <time_toString+0x2fc>
                {
                    if (ba->size != 0)
    664e:	683b      	ldr	r3, [r7, #0]
    6650:	88db      	ldrh	r3, [r3, #6]
    6652:	2b00      	cmp	r3, #0
    6654:	d004      	beq.n	6660 <time_toString+0xe8>
                    {
                        bb_setUInt8(ba, separator);
    6656:	7bbb      	ldrb	r3, [r7, #14]
    6658:	4619      	mov	r1, r3
    665a:	6838      	ldr	r0, [r7, #0]
    665c:	f7fc fbda 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, time->value.tm_year);
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	699b      	ldr	r3, [r3, #24]
    6664:	4619      	mov	r1, r3
    6666:	6838      	ldr	r0, [r7, #0]
    6668:	f7fd fb98 	bl	3d9c <bb_addIntAsString>
                }
            }
            break;
    666c:	e102      	b.n	6874 <time_toString+0x2fc>
            case GXDLMS_DATE_FORMAT_MDY:
            {
                if (time->value.tm_mon != -1 && (time->skip & DATETIME_SKIPS_MONTH) == 0)
    666e:	687b      	ldr	r3, [r7, #4]
    6670:	695b      	ldr	r3, [r3, #20]
    6672:	f1b3 3fff 	cmp.w	r3, #4294967295
    6676:	d00c      	beq.n	6692 <time_toString+0x11a>
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	781b      	ldrb	r3, [r3, #0]
    667c:	f003 0302 	and.w	r3, r3, #2
    6680:	2b00      	cmp	r3, #0
    6682:	d106      	bne.n	6692 <time_toString+0x11a>
                {
                    bb_addIntAsString(ba, 1 + time->value.tm_mon);
    6684:	687b      	ldr	r3, [r7, #4]
    6686:	695b      	ldr	r3, [r3, #20]
    6688:	3301      	adds	r3, #1
    668a:	4619      	mov	r1, r3
    668c:	6838      	ldr	r0, [r7, #0]
    668e:	f7fd fb85 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mday != -1 && (time->skip & DATETIME_SKIPS_DAY) == 0)
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	691b      	ldr	r3, [r3, #16]
    6696:	f1b3 3fff 	cmp.w	r3, #4294967295
    669a:	d014      	beq.n	66c6 <time_toString+0x14e>
    669c:	687b      	ldr	r3, [r7, #4]
    669e:	781b      	ldrb	r3, [r3, #0]
    66a0:	f003 0304 	and.w	r3, r3, #4
    66a4:	2b00      	cmp	r3, #0
    66a6:	d10e      	bne.n	66c6 <time_toString+0x14e>
                {
                    if (ba->size != 0)
    66a8:	683b      	ldr	r3, [r7, #0]
    66aa:	88db      	ldrh	r3, [r3, #6]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d004      	beq.n	66ba <time_toString+0x142>
                    {
                        bb_setUInt8(ba, separator);
    66b0:	7bbb      	ldrb	r3, [r7, #14]
    66b2:	4619      	mov	r1, r3
    66b4:	6838      	ldr	r0, [r7, #0]
    66b6:	f7fc fbad 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, time->value.tm_mday);
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	691b      	ldr	r3, [r3, #16]
    66be:	4619      	mov	r1, r3
    66c0:	6838      	ldr	r0, [r7, #0]
    66c2:	f7fd fb6b 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_year != -1 && (time->skip & DATETIME_SKIPS_YEAR) == 0)
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	699b      	ldr	r3, [r3, #24]
    66ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    66ce:	f000 80d3 	beq.w	6878 <time_toString+0x300>
    66d2:	687b      	ldr	r3, [r7, #4]
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	f003 0301 	and.w	r3, r3, #1
    66da:	2b00      	cmp	r3, #0
    66dc:	f040 80cc 	bne.w	6878 <time_toString+0x300>
                {
                    if (ba->size != 0)
    66e0:	683b      	ldr	r3, [r7, #0]
    66e2:	88db      	ldrh	r3, [r3, #6]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d004      	beq.n	66f2 <time_toString+0x17a>
                    {
                        bb_setUInt8(ba, separator);
    66e8:	7bbb      	ldrb	r3, [r7, #14]
    66ea:	4619      	mov	r1, r3
    66ec:	6838      	ldr	r0, [r7, #0]
    66ee:	f7fc fb91 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, 1900 + time->value.tm_year);
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	699b      	ldr	r3, [r3, #24]
    66f6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    66fa:	4619      	mov	r1, r3
    66fc:	6838      	ldr	r0, [r7, #0]
    66fe:	f7fd fb4d 	bl	3d9c <bb_addIntAsString>
                }
            }
            break;
    6702:	e0b9      	b.n	6878 <time_toString+0x300>
            case GXDLMS_DATE_FORMAT_YMD:
            {
                if (time->value.tm_year != -1 && (time->skip & DATETIME_SKIPS_YEAR) == 0)
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	699b      	ldr	r3, [r3, #24]
    6708:	f1b3 3fff 	cmp.w	r3, #4294967295
    670c:	d00d      	beq.n	672a <time_toString+0x1b2>
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	f003 0301 	and.w	r3, r3, #1
    6716:	2b00      	cmp	r3, #0
    6718:	d107      	bne.n	672a <time_toString+0x1b2>
                {
                    bb_addIntAsString(ba, 1900 + time->value.tm_year);
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	699b      	ldr	r3, [r3, #24]
    671e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    6722:	4619      	mov	r1, r3
    6724:	6838      	ldr	r0, [r7, #0]
    6726:	f7fd fb39 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mon != -1 && (time->skip & DATETIME_SKIPS_MONTH) == 0)
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	695b      	ldr	r3, [r3, #20]
    672e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6732:	d015      	beq.n	6760 <time_toString+0x1e8>
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	f003 0302 	and.w	r3, r3, #2
    673c:	2b00      	cmp	r3, #0
    673e:	d10f      	bne.n	6760 <time_toString+0x1e8>
                {
                    if (ba->size != 0)
    6740:	683b      	ldr	r3, [r7, #0]
    6742:	88db      	ldrh	r3, [r3, #6]
    6744:	2b00      	cmp	r3, #0
    6746:	d004      	beq.n	6752 <time_toString+0x1da>
                    {
                        bb_setUInt8(ba, separator);
    6748:	7bbb      	ldrb	r3, [r7, #14]
    674a:	4619      	mov	r1, r3
    674c:	6838      	ldr	r0, [r7, #0]
    674e:	f7fc fb61 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, 1 + time->value.tm_mon);
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	695b      	ldr	r3, [r3, #20]
    6756:	3301      	adds	r3, #1
    6758:	4619      	mov	r1, r3
    675a:	6838      	ldr	r0, [r7, #0]
    675c:	f7fd fb1e 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mday != -1 && (time->skip & DATETIME_SKIPS_DAY) == 0)
    6760:	687b      	ldr	r3, [r7, #4]
    6762:	691b      	ldr	r3, [r3, #16]
    6764:	f1b3 3fff 	cmp.w	r3, #4294967295
    6768:	f000 8088 	beq.w	687c <time_toString+0x304>
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	f003 0304 	and.w	r3, r3, #4
    6774:	2b00      	cmp	r3, #0
    6776:	f040 8081 	bne.w	687c <time_toString+0x304>
                {
                    if (ba->size != 0)
    677a:	683b      	ldr	r3, [r7, #0]
    677c:	88db      	ldrh	r3, [r3, #6]
    677e:	2b00      	cmp	r3, #0
    6780:	d004      	beq.n	678c <time_toString+0x214>
                    {
                        bb_setUInt8(ba, separator);
    6782:	7bbb      	ldrb	r3, [r7, #14]
    6784:	4619      	mov	r1, r3
    6786:	6838      	ldr	r0, [r7, #0]
    6788:	f7fc fb44 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, time->value.tm_mday);
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	691b      	ldr	r3, [r3, #16]
    6790:	4619      	mov	r1, r3
    6792:	6838      	ldr	r0, [r7, #0]
    6794:	f7fd fb02 	bl	3d9c <bb_addIntAsString>
                }
            }
            break;
    6798:	e070      	b.n	687c <time_toString+0x304>
            case GXDLMS_DATE_FORMAT_YDM:
            {
                if (time->value.tm_year != -1 && (time->skip & DATETIME_SKIPS_YEAR) == 0)
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	699b      	ldr	r3, [r3, #24]
    679e:	f1b3 3fff 	cmp.w	r3, #4294967295
    67a2:	d00d      	beq.n	67c0 <time_toString+0x248>
    67a4:	687b      	ldr	r3, [r7, #4]
    67a6:	781b      	ldrb	r3, [r3, #0]
    67a8:	f003 0301 	and.w	r3, r3, #1
    67ac:	2b00      	cmp	r3, #0
    67ae:	d107      	bne.n	67c0 <time_toString+0x248>
                {
                    bb_addIntAsString(ba, 1900 + time->value.tm_year);
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	699b      	ldr	r3, [r3, #24]
    67b4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    67b8:	4619      	mov	r1, r3
    67ba:	6838      	ldr	r0, [r7, #0]
    67bc:	f7fd faee 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mday != -1 && (time->skip & DATETIME_SKIPS_DAY) == 0)
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	691b      	ldr	r3, [r3, #16]
    67c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    67c8:	d014      	beq.n	67f4 <time_toString+0x27c>
    67ca:	687b      	ldr	r3, [r7, #4]
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	f003 0304 	and.w	r3, r3, #4
    67d2:	2b00      	cmp	r3, #0
    67d4:	d10e      	bne.n	67f4 <time_toString+0x27c>
                {
                    if (ba->size != 0)
    67d6:	683b      	ldr	r3, [r7, #0]
    67d8:	88db      	ldrh	r3, [r3, #6]
    67da:	2b00      	cmp	r3, #0
    67dc:	d004      	beq.n	67e8 <time_toString+0x270>
                    {
                        bb_setUInt8(ba, separator);
    67de:	7bbb      	ldrb	r3, [r7, #14]
    67e0:	4619      	mov	r1, r3
    67e2:	6838      	ldr	r0, [r7, #0]
    67e4:	f7fc fb16 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, time->value.tm_mday);
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	691b      	ldr	r3, [r3, #16]
    67ec:	4619      	mov	r1, r3
    67ee:	6838      	ldr	r0, [r7, #0]
    67f0:	f7fd fad4 	bl	3d9c <bb_addIntAsString>
                }
                if (time->value.tm_mon != -1 && (time->skip & DATETIME_SKIPS_MONTH) == 0)
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	695b      	ldr	r3, [r3, #20]
    67f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    67fc:	d040      	beq.n	6880 <time_toString+0x308>
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	f003 0302 	and.w	r3, r3, #2
    6806:	2b00      	cmp	r3, #0
    6808:	d13a      	bne.n	6880 <time_toString+0x308>
                {
                    if (ba->size != 0)
    680a:	683b      	ldr	r3, [r7, #0]
    680c:	88db      	ldrh	r3, [r3, #6]
    680e:	2b00      	cmp	r3, #0
    6810:	d004      	beq.n	681c <time_toString+0x2a4>
                    {
                        bb_setUInt8(ba, separator);
    6812:	7bbb      	ldrb	r3, [r7, #14]
    6814:	4619      	mov	r1, r3
    6816:	6838      	ldr	r0, [r7, #0]
    6818:	f7fc fafc 	bl	2e14 <bb_setUInt8>
                    }
                    bb_addIntAsString(ba, 1 + time->value.tm_mon);
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	695b      	ldr	r3, [r3, #20]
    6820:	3301      	adds	r3, #1
    6822:	4619      	mov	r1, r3
    6824:	6838      	ldr	r0, [r7, #0]
    6826:	f7fd fab9 	bl	3d9c <bb_addIntAsString>
                }
            }
            break;
    682a:	e029      	b.n	6880 <time_toString+0x308>
            {
                //If OS is used.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
                ret = (int)strftime(buff, 50, "%X", &time->value);
#else
                sprintf(buff, "%.2d/%.2d/%.4d %.2d:%.2d",
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	695c      	ldr	r4, [r3, #20]
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	691d      	ldr	r5, [r3, #16]
                    time->value.tm_mon,
                    time->value.tm_mday,
                    1900 + time->value.tm_year,
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	699b      	ldr	r3, [r3, #24]
            {
                //If OS is used.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
                ret = (int)strftime(buff, 50, "%X", &time->value);
#else
                sprintf(buff, "%.2d/%.2d/%.4d %.2d:%.2d",
    6838:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    683c:	687a      	ldr	r2, [r7, #4]
    683e:	68d2      	ldr	r2, [r2, #12]
    6840:	6879      	ldr	r1, [r7, #4]
    6842:	6889      	ldr	r1, [r1, #8]
    6844:	f107 0010 	add.w	r0, r7, #16
    6848:	9102      	str	r1, [sp, #8]
    684a:	9201      	str	r2, [sp, #4]
    684c:	9300      	str	r3, [sp, #0]
    684e:	462b      	mov	r3, r5
    6850:	4622      	mov	r2, r4
    6852:	493f      	ldr	r1, [pc, #252]	; (6950 <time_toString+0x3d8>)
    6854:	f023 fcc4 	bl	2a1e0 <siprintf>
                    time->value.tm_mday,
                    1900 + time->value.tm_year,
                    time->value.tm_hour,
                    time->value.tm_min);
#endif
                bb_setUInt8(ba, ' ');
    6858:	2120      	movs	r1, #32
    685a:	6838      	ldr	r0, [r7, #0]
    685c:	f7fc fada 	bl	2e14 <bb_setUInt8>
                bb_set(ba, (unsigned char*)buff, (unsigned short)ret);
    6860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6862:	b29a      	uxth	r2, r3
    6864:	f107 0310 	add.w	r3, r7, #16
    6868:	4619      	mov	r1, r3
    686a:	6838      	ldr	r0, [r7, #0]
    686c:	f7fc fe78 	bl	3560 <bb_set>
                return 0;
    6870:	2300      	movs	r3, #0
    6872:	e069      	b.n	6948 <time_toString+0x3d0>
                        bb_setUInt8(ba, separator);
                    }
                    bb_addIntAsString(ba, time->value.tm_year);
                }
            }
            break;
    6874:	bf00      	nop
    6876:	e004      	b.n	6882 <time_toString+0x30a>
                        bb_setUInt8(ba, separator);
                    }
                    bb_addIntAsString(ba, 1900 + time->value.tm_year);
                }
            }
            break;
    6878:	bf00      	nop
    687a:	e002      	b.n	6882 <time_toString+0x30a>
                        bb_setUInt8(ba, separator);
                    }
                    bb_addIntAsString(ba, time->value.tm_mday);
                }
            }
            break;
    687c:	bf00      	nop
    687e:	e000      	b.n	6882 <time_toString+0x30a>
                        bb_setUInt8(ba, separator);
                    }
                    bb_addIntAsString(ba, 1 + time->value.tm_mon);
                }
            }
            break;
    6880:	bf00      	nop
                return 0;
            }
        }
    }
        //Add hours.
        if (time->value.tm_hour != -1 && (time->skip & DATETIME_SKIPS_HOUR) == 0)
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	68db      	ldr	r3, [r3, #12]
    6886:	f1b3 3fff 	cmp.w	r3, #4294967295
    688a:	d013      	beq.n	68b4 <time_toString+0x33c>
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	f003 0310 	and.w	r3, r3, #16
    6894:	2b00      	cmp	r3, #0
    6896:	d10d      	bne.n	68b4 <time_toString+0x33c>
        {
            if (ba->size != 0)
    6898:	683b      	ldr	r3, [r7, #0]
    689a:	88db      	ldrh	r3, [r3, #6]
    689c:	2b00      	cmp	r3, #0
    689e:	d003      	beq.n	68a8 <time_toString+0x330>
            {
                bb_setUInt8(ba, ' ');
    68a0:	2120      	movs	r1, #32
    68a2:	6838      	ldr	r0, [r7, #0]
    68a4:	f7fc fab6 	bl	2e14 <bb_setUInt8>
            }
            bb_addIntAsString(ba, time->value.tm_hour);
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	68db      	ldr	r3, [r3, #12]
    68ac:	4619      	mov	r1, r3
    68ae:	6838      	ldr	r0, [r7, #0]
    68b0:	f7fd fa74 	bl	3d9c <bb_addIntAsString>
        }
        //Add minutes.
        if (time->value.tm_min != -1 && (time->skip & DATETIME_SKIPS_MINUTE) == 0)
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	689b      	ldr	r3, [r3, #8]
    68b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    68bc:	d013      	beq.n	68e6 <time_toString+0x36e>
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	f003 0320 	and.w	r3, r3, #32
    68c6:	2b00      	cmp	r3, #0
    68c8:	d10d      	bne.n	68e6 <time_toString+0x36e>
        {
            if (ba->size != 0)
    68ca:	683b      	ldr	r3, [r7, #0]
    68cc:	88db      	ldrh	r3, [r3, #6]
    68ce:	2b00      	cmp	r3, #0
    68d0:	d003      	beq.n	68da <time_toString+0x362>
            {
                bb_setUInt8(ba, ':');
    68d2:	213a      	movs	r1, #58	; 0x3a
    68d4:	6838      	ldr	r0, [r7, #0]
    68d6:	f7fc fa9d 	bl	2e14 <bb_setUInt8>
            }
            bb_addIntAsString(ba, time->value.tm_min);
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	689b      	ldr	r3, [r3, #8]
    68de:	4619      	mov	r1, r3
    68e0:	6838      	ldr	r0, [r7, #0]
    68e2:	f7fd fa5b 	bl	3d9c <bb_addIntAsString>
        }
        //Add seconds.
        if (time->value.tm_sec != -1 && (time->skip & DATETIME_SKIPS_SECOND) == 0)
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	685b      	ldr	r3, [r3, #4]
    68ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    68ee:	d013      	beq.n	6918 <time_toString+0x3a0>
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	781b      	ldrb	r3, [r3, #0]
    68f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    68f8:	2b00      	cmp	r3, #0
    68fa:	d10d      	bne.n	6918 <time_toString+0x3a0>
        {
            if (ba->size != 0)
    68fc:	683b      	ldr	r3, [r7, #0]
    68fe:	88db      	ldrh	r3, [r3, #6]
    6900:	2b00      	cmp	r3, #0
    6902:	d003      	beq.n	690c <time_toString+0x394>
            {
                bb_setUInt8(ba, ':');
    6904:	213a      	movs	r1, #58	; 0x3a
    6906:	6838      	ldr	r0, [r7, #0]
    6908:	f7fc fa84 	bl	2e14 <bb_setUInt8>
            }
            bb_addIntAsString(ba, time->value.tm_sec);
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	685b      	ldr	r3, [r3, #4]
    6910:	4619      	mov	r1, r3
    6912:	6838      	ldr	r0, [r7, #0]
    6914:	f7fd fa42 	bl	3d9c <bb_addIntAsString>
        }
        //Add end of string, but that is not added to the length.
        bb_setUInt8(ba, '\0');
    6918:	2100      	movs	r1, #0
    691a:	6838      	ldr	r0, [r7, #0]
    691c:	f7fc fa7a 	bl	2e14 <bb_setUInt8>
        --ba->size;
    6920:	683b      	ldr	r3, [r7, #0]
    6922:	88db      	ldrh	r3, [r3, #6]
    6924:	3b01      	subs	r3, #1
    6926:	b29a      	uxth	r2, r3
    6928:	683b      	ldr	r3, [r7, #0]
    692a:	80da      	strh	r2, [r3, #6]
        return 0;
    692c:	2300      	movs	r3, #0
    692e:	e00b      	b.n	6948 <time_toString+0x3d0>
}
    //If value is not set return empty string.
    if (time->value.tm_year == -1 || time->value.tm_mday == 0)
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	699b      	ldr	r3, [r3, #24]
    6934:	f1b3 3fff 	cmp.w	r3, #4294967295
    6938:	d003      	beq.n	6942 <time_toString+0x3ca>
    693a:	687b      	ldr	r3, [r7, #4]
    693c:	691b      	ldr	r3, [r3, #16]
    693e:	2b00      	cmp	r3, #0
    6940:	d101      	bne.n	6946 <time_toString+0x3ce>
    {
        return 0;
    6942:	2300      	movs	r3, #0
    6944:	e000      	b.n	6948 <time_toString+0x3d0>
    buff[ret] = '\0';
    bb_addString(ba, buff);
#else
    //TODO:
#endif
    return 0;
    6946:	2300      	movs	r3, #0
    }
    6948:	4618      	mov	r0, r3
    694a:	3748      	adds	r7, #72	; 0x48
    694c:	46bd      	mov	sp, r7
    694e:	bdb0      	pop	{r4, r5, r7, pc}
    6950:	0002bf94 	.word	0x0002bf94

00006954 <time_copy>:
#endif //GX_DLMS_MICROCONTROLLER;

void time_copy(
    gxtime* trg,
    gxtime* src)
{
    6954:	b4b0      	push	{r4, r5, r7}
    6956:	b083      	sub	sp, #12
    6958:	af00      	add	r7, sp, #0
    695a:	6078      	str	r0, [r7, #4]
    695c:	6039      	str	r1, [r7, #0]
    trg->daylightSavingsBegin = src->daylightSavingsBegin;
    695e:	683b      	ldr	r3, [r7, #0]
    6960:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    trg->daylightSavingsEnd = src->daylightSavingsEnd;
    696a:	683b      	ldr	r3, [r7, #0]
    696c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    trg->skip = src->skip;
    6976:	683b      	ldr	r3, [r7, #0]
    6978:	781a      	ldrb	r2, [r3, #0]
    697a:	687b      	ldr	r3, [r7, #4]
    697c:	701a      	strb	r2, [r3, #0]
    trg->status = src->status;
    697e:	683b      	ldr	r3, [r7, #0]
    6980:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    6984:	687b      	ldr	r3, [r7, #4]
    6986:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    trg->value = src->value;
    698a:	687a      	ldr	r2, [r7, #4]
    698c:	683b      	ldr	r3, [r7, #0]
    698e:	1d14      	adds	r4, r2, #4
    6990:	1d1d      	adds	r5, r3, #4
    6992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    699a:	682b      	ldr	r3, [r5, #0]
    699c:	6023      	str	r3, [r4, #0]
    trg->deviation = src->deviation;
    699e:	683b      	ldr	r3, [r7, #0]
    69a0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    69a8:	bf00      	nop
    69aa:	370c      	adds	r7, #12
    69ac:	46bd      	mov	sp, r7
    69ae:	bcb0      	pop	{r4, r5, r7}
    69b0:	4770      	bx	lr
    69b2:	bf00      	nop

000069b4 <time_addTime>:
void time_addTime(
    gxtime* time,
    int hours,
    int minutes,
    int seconds)
{
    69b4:	b480      	push	{r7}
    69b6:	b085      	sub	sp, #20
    69b8:	af00      	add	r7, sp, #0
    69ba:	60f8      	str	r0, [r7, #12]
    69bc:	60b9      	str	r1, [r7, #8]
    69be:	607a      	str	r2, [r7, #4]
    69c0:	603b      	str	r3, [r7, #0]
    time->value.tm_hour += hours;
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	68da      	ldr	r2, [r3, #12]
    69c6:	68bb      	ldr	r3, [r7, #8]
    69c8:	441a      	add	r2, r3
    69ca:	68fb      	ldr	r3, [r7, #12]
    69cc:	60da      	str	r2, [r3, #12]
    time->value.tm_min += minutes;
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	689a      	ldr	r2, [r3, #8]
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	441a      	add	r2, r3
    69d6:	68fb      	ldr	r3, [r7, #12]
    69d8:	609a      	str	r2, [r3, #8]
    time->value.tm_sec += seconds;
    69da:	68fb      	ldr	r3, [r7, #12]
    69dc:	685a      	ldr	r2, [r3, #4]
    69de:	683b      	ldr	r3, [r7, #0]
    69e0:	441a      	add	r2, r3
    69e2:	68fb      	ldr	r3, [r7, #12]
    69e4:	605a      	str	r2, [r3, #4]
    //If OS
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    mktime(&time->value);
#endif
}
    69e6:	bf00      	nop
    69e8:	3714      	adds	r7, #20
    69ea:	46bd      	mov	sp, r7
    69ec:	bc80      	pop	{r7}
    69ee:	4770      	bx	lr

000069f0 <time_compare>:

int time_compare(
    gxtime* value1,
    gxtime* value2)
{
    69f0:	b5b0      	push	{r4, r5, r7, lr}
    69f2:	b096      	sub	sp, #88	; 0x58
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
    69f8:	6039      	str	r1, [r7, #0]
    struct tm tm1 = value1->value;
    69fa:	687b      	ldr	r3, [r7, #4]
    69fc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    6a00:	1d1d      	adds	r5, r3, #4
    6a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a0a:	682b      	ldr	r3, [r5, #0]
    6a0c:	6023      	str	r3, [r4, #0]
    //0x8000 == -32768
    if (value1->deviation != -32768)
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    6a14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6a18:	d005      	beq.n	6a26 <time_compare+0x36>
    {
        tm1.tm_min -= value1->deviation;
    6a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6a1c:	687a      	ldr	r2, [r7, #4]
    6a1e:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
    6a22:	1a9b      	subs	r3, r3, r2
    6a24:	633b      	str	r3, [r7, #48]	; 0x30
    }
    struct tm tm2 = value2->value;
    6a26:	683b      	ldr	r3, [r7, #0]
    6a28:	f107 0408 	add.w	r4, r7, #8
    6a2c:	1d1d      	adds	r5, r3, #4
    6a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a36:	682b      	ldr	r3, [r5, #0]
    6a38:	6023      	str	r3, [r4, #0]
    if (value2->deviation != -32768)
    6a3a:	683b      	ldr	r3, [r7, #0]
    6a3c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    6a40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6a44:	d005      	beq.n	6a52 <time_compare+0x62>
    {
        tm2.tm_min -= value2->deviation;
    6a46:	68fb      	ldr	r3, [r7, #12]
    6a48:	683a      	ldr	r2, [r7, #0]
    6a4a:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
    6a4e:	1a9b      	subs	r3, r3, r2
    6a50:	60fb      	str	r3, [r7, #12]
    }
    time_t time1 = mktime(&tm1);
    6a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    6a56:	4618      	mov	r0, r3
    6a58:	f023 f91e 	bl	29c98 <mktime>
    6a5c:	6578      	str	r0, [r7, #84]	; 0x54
    time_t time2 = mktime(&tm2);
    6a5e:	f107 0308 	add.w	r3, r7, #8
    6a62:	4618      	mov	r0, r3
    6a64:	f023 f918 	bl	29c98 <mktime>
    6a68:	6538      	str	r0, [r7, #80]	; 0x50
    if (time1 < time2)
    6a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6a6e:	429a      	cmp	r2, r3
    6a70:	da02      	bge.n	6a78 <time_compare+0x88>
    {
        return -1;
    6a72:	f04f 33ff 	mov.w	r3, #4294967295
    6a76:	e006      	b.n	6a86 <time_compare+0x96>
    }
    if (time1 > time2)
    6a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6a7c:	429a      	cmp	r2, r3
    6a7e:	dd01      	ble.n	6a84 <time_compare+0x94>
    {
        return 1;
    6a80:	2301      	movs	r3, #1
    6a82:	e000      	b.n	6a86 <time_compare+0x96>
    }
    return 0;
    6a84:	2300      	movs	r3, #0
}
    6a86:	4618      	mov	r0, r3
    6a88:	3758      	adds	r7, #88	; 0x58
    6a8a:	46bd      	mov	sp, r7
    6a8c:	bdb0      	pop	{r4, r5, r7, pc}
    6a8e:	bf00      	nop

00006a90 <time_fromUnixTime>:

//Get date time from Epoch time.
int time_fromUnixTime(const time_t epoch, struct tm* time)
{
    6a90:	b5b0      	push	{r4, r5, r7, lr}
    6a92:	b082      	sub	sp, #8
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
    6a98:	6039      	str	r1, [r7, #0]
#if _MSC_VER > 1000
    return localtime_s(time, &epoch);
#else
    *time = *localtime(&epoch);
    6a9a:	1d3b      	adds	r3, r7, #4
    6a9c:	4618      	mov	r0, r3
    6a9e:	f022 fed9 	bl	29854 <localtime>
    6aa2:	4602      	mov	r2, r0
    6aa4:	683b      	ldr	r3, [r7, #0]
    6aa6:	461c      	mov	r4, r3
    6aa8:	4615      	mov	r5, r2
    6aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6ab2:	682b      	ldr	r3, [r5, #0]
    6ab4:	6023      	str	r3, [r4, #0]
#endif
    return 0;
    6ab6:	2300      	movs	r3, #0
}
    6ab8:	4618      	mov	r0, r3
    6aba:	3708      	adds	r7, #8
    6abc:	46bd      	mov	sp, r7
    6abe:	bdb0      	pop	{r4, r5, r7, pc}

00006ac0 <countCRC>:
        0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
        0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
    };

    static unsigned short countCRC(gxByteBuffer* Buff, int index, int count)
    {
    6ac0:	b490      	push	{r4, r7}
    6ac2:	b086      	sub	sp, #24
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	60f8      	str	r0, [r7, #12]
    6ac8:	60b9      	str	r1, [r7, #8]
    6aca:	607a      	str	r2, [r7, #4]
        unsigned short tmp;
        unsigned short FCS16 = 0xFFFF;
    6acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6ad0:	82fb      	strh	r3, [r7, #22]
        short pos;
        for (pos = 0; pos < count; ++pos)
    6ad2:	2300      	movs	r3, #0
    6ad4:	82bb      	strh	r3, [r7, #20]
    6ad6:	e016      	b.n	6b06 <countCRC+0x46>
        {
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    6ad8:	8afb      	ldrh	r3, [r7, #22]
    6ada:	0a1b      	lsrs	r3, r3, #8
    6adc:	b29a      	uxth	r2, r3
    6ade:	8afb      	ldrh	r3, [r7, #22]
    6ae0:	68f9      	ldr	r1, [r7, #12]
    6ae2:	6809      	ldr	r1, [r1, #0]
    6ae4:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
    6ae8:	68b8      	ldr	r0, [r7, #8]
    6aea:	4420      	add	r0, r4
    6aec:	4401      	add	r1, r0
    6aee:	7809      	ldrb	r1, [r1, #0]
    6af0:	404b      	eors	r3, r1
    6af2:	b2db      	uxtb	r3, r3
    6af4:	4911      	ldr	r1, [pc, #68]	; (6b3c <countCRC+0x7c>)
    6af6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6afa:	4053      	eors	r3, r2
    6afc:	82fb      	strh	r3, [r7, #22]
    static unsigned short countCRC(gxByteBuffer* Buff, int index, int count)
    {
        unsigned short tmp;
        unsigned short FCS16 = 0xFFFF;
        short pos;
        for (pos = 0; pos < count; ++pos)
    6afe:	8abb      	ldrh	r3, [r7, #20]
    6b00:	3301      	adds	r3, #1
    6b02:	b29b      	uxth	r3, r3
    6b04:	82bb      	strh	r3, [r7, #20]
    6b06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	429a      	cmp	r2, r3
    6b0e:	dbe3      	blt.n	6ad8 <countCRC+0x18>
        {
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
        }
        FCS16 = ~FCS16;
    6b10:	8afb      	ldrh	r3, [r7, #22]
    6b12:	43db      	mvns	r3, r3
    6b14:	82fb      	strh	r3, [r7, #22]
        //CRC is in big endian byte order.
        tmp = FCS16;
    6b16:	8afb      	ldrh	r3, [r7, #22]
    6b18:	827b      	strh	r3, [r7, #18]
        FCS16 = tmp >> 8;
    6b1a:	8a7b      	ldrh	r3, [r7, #18]
    6b1c:	0a1b      	lsrs	r3, r3, #8
    6b1e:	82fb      	strh	r3, [r7, #22]
        FCS16 |= tmp << 8;
    6b20:	8a7b      	ldrh	r3, [r7, #18]
    6b22:	021b      	lsls	r3, r3, #8
    6b24:	b21a      	sxth	r2, r3
    6b26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    6b2a:	4313      	orrs	r3, r2
    6b2c:	b21b      	sxth	r3, r3
    6b2e:	82fb      	strh	r3, [r7, #22]
        return FCS16;
    6b30:	8afb      	ldrh	r3, [r7, #22]
    }
    6b32:	4618      	mov	r0, r3
    6b34:	3718      	adds	r7, #24
    6b36:	46bd      	mov	sp, r7
    6b38:	bc90      	pop	{r4, r7}
    6b3a:	4770      	bx	lr
    6b3c:	0002cad8 	.word	0x0002cad8

00006b40 <dlms_getGloMessage>:
* @param command
*            Executed DLMS command.
* @return Integer value of glo message.
*/
unsigned char dlms_getGloMessage(dlmsSettings *settings, DLMS_COMMAND command, DLMS_COMMAND encryptedCommand)
{
    6b40:	b480      	push	{r7}
    6b42:	b087      	sub	sp, #28
    6b44:	af00      	add	r7, sp, #0
    6b46:	6078      	str	r0, [r7, #4]
    6b48:	460b      	mov	r3, r1
    6b4a:	70fb      	strb	r3, [r7, #3]
    6b4c:	4613      	mov	r3, r2
    6b4e:	70bb      	strb	r3, [r7, #2]
    unsigned char cmd;
    unsigned glo = settings->negotiatedConformance & DLMS_CONFORMANCE_GENERAL_PROTECTION;
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    6b58:	613b      	str	r3, [r7, #16]
    unsigned ded = settings->cipher.dedicatedKey != NULL && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0;
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    6b60:	2b00      	cmp	r3, #0
    6b62:	d008      	beq.n	6b76 <dlms_getGloMessage+0x36>
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    6b6a:	f003 0302 	and.w	r3, r3, #2
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d001      	beq.n	6b76 <dlms_getGloMessage+0x36>
    6b72:	2301      	movs	r3, #1
    6b74:	e000      	b.n	6b78 <dlms_getGloMessage+0x38>
    6b76:	2300      	movs	r3, #0
    6b78:	60fb      	str	r3, [r7, #12]
    if (encryptedCommand == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    6b7a:	78bb      	ldrb	r3, [r7, #2]
    6b7c:	2bdb      	cmp	r3, #219	; 0xdb
    6b7e:	d002      	beq.n	6b86 <dlms_getGloMessage+0x46>
    6b80:	78bb      	ldrb	r3, [r7, #2]
    6b82:	2bdc      	cmp	r3, #220	; 0xdc
    6b84:	d102      	bne.n	6b8c <dlms_getGloMessage+0x4c>
        encryptedCommand == DLMS_COMMAND_GENERAL_DED_CIPHERING)
    {
        cmd = encryptedCommand;
    6b86:	78bb      	ldrb	r3, [r7, #2]
    6b88:	75fb      	strb	r3, [r7, #23]
    6b8a:	e0a8      	b.n	6cde <dlms_getGloMessage+0x19e>
    }
    else if (glo && encryptedCommand == DLMS_COMMAND_NONE)
    6b8c:	693b      	ldr	r3, [r7, #16]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d00b      	beq.n	6baa <dlms_getGloMessage+0x6a>
    6b92:	78bb      	ldrb	r3, [r7, #2]
    6b94:	2b00      	cmp	r3, #0
    6b96:	d108      	bne.n	6baa <dlms_getGloMessage+0x6a>
    {
        if (ded)
    6b98:	68fb      	ldr	r3, [r7, #12]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d002      	beq.n	6ba4 <dlms_getGloMessage+0x64>
        {
            cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
    6b9e:	23dc      	movs	r3, #220	; 0xdc
    6ba0:	75fb      	strb	r3, [r7, #23]
    {
        cmd = encryptedCommand;
    }
    else if (glo && encryptedCommand == DLMS_COMMAND_NONE)
    {
        if (ded)
    6ba2:	e09c      	b.n	6cde <dlms_getGloMessage+0x19e>
        {
            cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
        }
        else
        {
            cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
    6ba4:	23db      	movs	r3, #219	; 0xdb
    6ba6:	75fb      	strb	r3, [r7, #23]
    {
        cmd = encryptedCommand;
    }
    else if (glo && encryptedCommand == DLMS_COMMAND_NONE)
    {
        if (ded)
    6ba8:	e099      	b.n	6cde <dlms_getGloMessage+0x19e>
            cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
        }
    }
    else
    {
        switch (command)
    6baa:	78fb      	ldrb	r3, [r7, #3]
    6bac:	2bc0      	cmp	r3, #192	; 0xc0
    6bae:	d02e      	beq.n	6c0e <dlms_getGloMessage+0xce>
    6bb0:	2bc0      	cmp	r3, #192	; 0xc0
    6bb2:	dc11      	bgt.n	6bd8 <dlms_getGloMessage+0x98>
    6bb4:	2b0d      	cmp	r3, #13
    6bb6:	d060      	beq.n	6c7a <dlms_getGloMessage+0x13a>
    6bb8:	2b0d      	cmp	r3, #13
    6bba:	dc06      	bgt.n	6bca <dlms_getGloMessage+0x8a>
    6bbc:	2b06      	cmp	r3, #6
    6bbe:	d02f      	beq.n	6c20 <dlms_getGloMessage+0xe0>
    6bc0:	2b0c      	cmp	r3, #12
    6bc2:	d048      	beq.n	6c56 <dlms_getGloMessage+0x116>
    6bc4:	2b05      	cmp	r3, #5
    6bc6:	d019      	beq.n	6bfc <dlms_getGloMessage+0xbc>
    6bc8:	e087      	b.n	6cda <dlms_getGloMessage+0x19a>
    6bca:	2b62      	cmp	r3, #98	; 0x62
    6bcc:	d079      	beq.n	6cc2 <dlms_getGloMessage+0x182>
    6bce:	2b63      	cmp	r3, #99	; 0x63
    6bd0:	d07a      	beq.n	6cc8 <dlms_getGloMessage+0x188>
    6bd2:	2b0f      	cmp	r3, #15
    6bd4:	d06c      	beq.n	6cb0 <dlms_getGloMessage+0x170>
    6bd6:	e080      	b.n	6cda <dlms_getGloMessage+0x19a>
    6bd8:	2bc5      	cmp	r3, #197	; 0xc5
    6bda:	d057      	beq.n	6c8c <dlms_getGloMessage+0x14c>
    6bdc:	2bc5      	cmp	r3, #197	; 0xc5
    6bde:	dc06      	bgt.n	6bee <dlms_getGloMessage+0xae>
    6be0:	2bc3      	cmp	r3, #195	; 0xc3
    6be2:	d02f      	beq.n	6c44 <dlms_getGloMessage+0x104>
    6be4:	2bc3      	cmp	r3, #195	; 0xc3
    6be6:	dc3f      	bgt.n	6c68 <dlms_getGloMessage+0x128>
    6be8:	2bc1      	cmp	r3, #193	; 0xc1
    6bea:	d022      	beq.n	6c32 <dlms_getGloMessage+0xf2>
    6bec:	e075      	b.n	6cda <dlms_getGloMessage+0x19a>
    6bee:	2bdb      	cmp	r3, #219	; 0xdb
    6bf0:	d070      	beq.n	6cd4 <dlms_getGloMessage+0x194>
    6bf2:	2bdc      	cmp	r3, #220	; 0xdc
    6bf4:	d06b      	beq.n	6cce <dlms_getGloMessage+0x18e>
    6bf6:	2bc7      	cmp	r3, #199	; 0xc7
    6bf8:	d051      	beq.n	6c9e <dlms_getGloMessage+0x15e>
    6bfa:	e06e      	b.n	6cda <dlms_getGloMessage+0x19a>
        {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_READ_REQUEST:
            if (ded)
    6bfc:	68fb      	ldr	r3, [r7, #12]
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d002      	beq.n	6c08 <dlms_getGloMessage+0xc8>
            {
                cmd = DLMS_COMMAND_DED_READ_REQUEST;
    6c02:	2345      	movs	r3, #69	; 0x45
    6c04:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_READ_REQUEST;
            }
            break;
    6c06:	e06a      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_READ_REQUEST;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_READ_REQUEST;
    6c08:	2325      	movs	r3, #37	; 0x25
    6c0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c0c:	e067      	b.n	6cde <dlms_getGloMessage+0x19e>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_GET_REQUEST:
            if (ded)
    6c0e:	68fb      	ldr	r3, [r7, #12]
    6c10:	2b00      	cmp	r3, #0
    6c12:	d002      	beq.n	6c1a <dlms_getGloMessage+0xda>
            {
                cmd = DLMS_COMMAND_DED_GET_REQUEST;
    6c14:	23d0      	movs	r3, #208	; 0xd0
    6c16:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_GET_REQUEST;
            }
            break;
    6c18:	e061      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_GET_REQUEST;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_GET_REQUEST;
    6c1a:	23c8      	movs	r3, #200	; 0xc8
    6c1c:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c1e:	e05e      	b.n	6cde <dlms_getGloMessage+0x19e>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_WRITE_REQUEST:
            if (ded)
    6c20:	68fb      	ldr	r3, [r7, #12]
    6c22:	2b00      	cmp	r3, #0
    6c24:	d002      	beq.n	6c2c <dlms_getGloMessage+0xec>
            {
                cmd = DLMS_COMMAND_DED_WRITE_REQUEST;
    6c26:	2346      	movs	r3, #70	; 0x46
    6c28:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_WRITE_REQUEST;
            }
            break;
    6c2a:	e058      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_WRITE_REQUEST;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_WRITE_REQUEST;
    6c2c:	2326      	movs	r3, #38	; 0x26
    6c2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c30:	e055      	b.n	6cde <dlms_getGloMessage+0x19e>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_SET_REQUEST:
            if (ded)
    6c32:	68fb      	ldr	r3, [r7, #12]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d002      	beq.n	6c3e <dlms_getGloMessage+0xfe>
            {
                cmd = DLMS_COMMAND_DED_SET_REQUEST;
    6c38:	23d1      	movs	r3, #209	; 0xd1
    6c3a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_SET_REQUEST;
            }
            break;
    6c3c:	e04f      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_SET_REQUEST;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_SET_REQUEST;
    6c3e:	23c9      	movs	r3, #201	; 0xc9
    6c40:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c42:	e04c      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_METHOD_REQUEST:
            if (ded)
    6c44:	68fb      	ldr	r3, [r7, #12]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d002      	beq.n	6c50 <dlms_getGloMessage+0x110>
            {
                cmd = DLMS_COMMAND_DED_METHOD_REQUEST;
    6c4a:	23d3      	movs	r3, #211	; 0xd3
    6c4c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_METHOD_REQUEST;
            }
            break;
    6c4e:	e046      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_METHOD_REQUEST;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_METHOD_REQUEST;
    6c50:	23cb      	movs	r3, #203	; 0xcb
    6c52:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c54:	e043      	b.n	6cde <dlms_getGloMessage+0x19e>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_READ_RESPONSE:
            if (ded)
    6c56:	68fb      	ldr	r3, [r7, #12]
    6c58:	2b00      	cmp	r3, #0
    6c5a:	d002      	beq.n	6c62 <dlms_getGloMessage+0x122>
            {
                cmd = DLMS_COMMAND_DED_READ_RESPONSE;
    6c5c:	234c      	movs	r3, #76	; 0x4c
    6c5e:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_READ_RESPONSE;
            }
            break;
    6c60:	e03d      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_READ_RESPONSE;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_READ_RESPONSE;
    6c62:	232c      	movs	r3, #44	; 0x2c
    6c64:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c66:	e03a      	b.n	6cde <dlms_getGloMessage+0x19e>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_GET_RESPONSE:
            if (ded)
    6c68:	68fb      	ldr	r3, [r7, #12]
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	d002      	beq.n	6c74 <dlms_getGloMessage+0x134>
            {
                cmd = DLMS_COMMAND_DED_GET_RESPONSE;
    6c6e:	23d4      	movs	r3, #212	; 0xd4
    6c70:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_GET_RESPONSE;
            }
            break;
    6c72:	e034      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_GET_RESPONSE;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_GET_RESPONSE;
    6c74:	23cc      	movs	r3, #204	; 0xcc
    6c76:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c78:	e031      	b.n	6cde <dlms_getGloMessage+0x19e>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_WRITE_RESPONSE:
            if (ded)
    6c7a:	68fb      	ldr	r3, [r7, #12]
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d002      	beq.n	6c86 <dlms_getGloMessage+0x146>
            {
                cmd = DLMS_COMMAND_DED_WRITE_RESPONSE;
    6c80:	234d      	movs	r3, #77	; 0x4d
    6c82:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_WRITE_RESPONSE;
            }
            break;
    6c84:	e02b      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_WRITE_RESPONSE;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_WRITE_RESPONSE;
    6c86:	232d      	movs	r3, #45	; 0x2d
    6c88:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c8a:	e028      	b.n	6cde <dlms_getGloMessage+0x19e>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_SET_RESPONSE:
            if (ded)
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d002      	beq.n	6c98 <dlms_getGloMessage+0x158>
            {
                cmd = DLMS_COMMAND_DED_SET_RESPONSE;
    6c92:	23d5      	movs	r3, #213	; 0xd5
    6c94:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_SET_RESPONSE;
            }
            break;
    6c96:	e022      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_SET_RESPONSE;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_SET_RESPONSE;
    6c98:	23cd      	movs	r3, #205	; 0xcd
    6c9a:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6c9c:	e01f      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_METHOD_RESPONSE:
            if (ded)
    6c9e:	68fb      	ldr	r3, [r7, #12]
    6ca0:	2b00      	cmp	r3, #0
    6ca2:	d002      	beq.n	6caa <dlms_getGloMessage+0x16a>
            {
                cmd = DLMS_COMMAND_DED_METHOD_RESPONSE;
    6ca4:	23d7      	movs	r3, #215	; 0xd7
    6ca6:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_METHOD_RESPONSE;
            }
            break;
    6ca8:	e019      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_DED_METHOD_RESPONSE;
            }
            else
            {
                cmd = DLMS_COMMAND_GLO_METHOD_RESPONSE;
    6caa:	23cf      	movs	r3, #207	; 0xcf
    6cac:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6cae:	e016      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_DATA_NOTIFICATION:
            if (ded)
    6cb0:	68fb      	ldr	r3, [r7, #12]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d002      	beq.n	6cbc <dlms_getGloMessage+0x17c>
            {
                cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
    6cb6:	23dc      	movs	r3, #220	; 0xdc
    6cb8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
            }
            break;
    6cba:	e010      	b.n	6cde <dlms_getGloMessage+0x19e>
            {
                cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
            }
            else
            {
                cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
    6cbc:	23db      	movs	r3, #219	; 0xdb
    6cbe:	75fb      	strb	r3, [r7, #23]
            }
            break;
    6cc0:	e00d      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_RELEASE_REQUEST:
            cmd = DLMS_COMMAND_RELEASE_REQUEST;
    6cc2:	2362      	movs	r3, #98	; 0x62
    6cc4:	75fb      	strb	r3, [r7, #23]
            break;
    6cc6:	e00a      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_RELEASE_RESPONSE:
            cmd = DLMS_COMMAND_RELEASE_RESPONSE;
    6cc8:	2363      	movs	r3, #99	; 0x63
    6cca:	75fb      	strb	r3, [r7, #23]
            break;
    6ccc:	e007      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_GENERAL_DED_CIPHERING:
            cmd = DLMS_COMMAND_GENERAL_DED_CIPHERING;
    6cce:	23dc      	movs	r3, #220	; 0xdc
    6cd0:	75fb      	strb	r3, [r7, #23]
            break;
    6cd2:	e004      	b.n	6cde <dlms_getGloMessage+0x19e>
        case DLMS_COMMAND_GENERAL_GLO_CIPHERING:
            cmd = DLMS_COMMAND_GENERAL_GLO_CIPHERING;
    6cd4:	23db      	movs	r3, #219	; 0xdb
    6cd6:	75fb      	strb	r3, [r7, #23]
            break;
    6cd8:	e001      	b.n	6cde <dlms_getGloMessage+0x19e>
        default:
            cmd = DLMS_COMMAND_NONE;
    6cda:	2300      	movs	r3, #0
    6cdc:	75fb      	strb	r3, [r7, #23]
        }
    }
    return cmd;
    6cde:	7dfb      	ldrb	r3, [r7, #23]
}
    6ce0:	4618      	mov	r0, r3
    6ce2:	371c      	adds	r7, #28
    6ce4:	46bd      	mov	sp, r7
    6ce6:	bc80      	pop	{r7}
    6ce8:	4770      	bx	lr
    6cea:	bf00      	nop

00006cec <dlms_getInvokeIDPriority>:
#endif //DLMS_IGNORE_HIGH_GMAC

unsigned char dlms_getInvokeIDPriority(dlmsSettings *settings)
{
    6cec:	b480      	push	{r7}
    6cee:	b085      	sub	sp, #20
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
    unsigned char value = 0;
    6cf4:	2300      	movs	r3, #0
    6cf6:	73fb      	strb	r3, [r7, #15]
    if (settings->priority == DLMS_PRIORITY_HIGH)
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6cfe:	2b01      	cmp	r3, #1
    6d00:	d103      	bne.n	6d0a <dlms_getInvokeIDPriority+0x1e>
    {
        value |= 0x80;
    6d02:	7bfb      	ldrb	r3, [r7, #15]
    6d04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6d08:	73fb      	strb	r3, [r7, #15]
    }
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6d10:	2b01      	cmp	r3, #1
    6d12:	d103      	bne.n	6d1c <dlms_getInvokeIDPriority+0x30>
    {
        value |= 0x40;
    6d14:	7bfb      	ldrb	r3, [r7, #15]
    6d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6d1a:	73fb      	strb	r3, [r7, #15]
    }
    value |= settings->invokeID;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    6d22:	7bfb      	ldrb	r3, [r7, #15]
    6d24:	4313      	orrs	r3, r2
    6d26:	73fb      	strb	r3, [r7, #15]
    return value;
    6d28:	7bfb      	ldrb	r3, [r7, #15]
}
    6d2a:	4618      	mov	r0, r3
    6d2c:	3714      	adds	r7, #20
    6d2e:	46bd      	mov	sp, r7
    6d30:	bc80      	pop	{r7}
    6d32:	4770      	bx	lr

00006d34 <dlms_getLongInvokeIDPriority>:
* @param settings
*            DLMS settings->
* @return Invoke ID and priority.
*/
long dlms_getLongInvokeIDPriority(dlmsSettings *settings)
{
    6d34:	b480      	push	{r7}
    6d36:	b085      	sub	sp, #20
    6d38:	af00      	add	r7, sp, #0
    6d3a:	6078      	str	r0, [r7, #4]
    long value = 0;
    6d3c:	2300      	movs	r3, #0
    6d3e:	60fb      	str	r3, [r7, #12]
    if (settings->priority == DLMS_PRIORITY_HIGH)
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    6d46:	2b01      	cmp	r3, #1
    6d48:	d102      	bne.n	6d50 <dlms_getLongInvokeIDPriority+0x1c>
    {
        value = 0x80000000;
    6d4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    6d4e:	60fb      	str	r3, [r7, #12]
    }
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6d56:	2b01      	cmp	r3, #1
    6d58:	d103      	bne.n	6d62 <dlms_getLongInvokeIDPriority+0x2e>
    {
        value |= 0x40000000;
    6d5a:	68fb      	ldr	r3, [r7, #12]
    6d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    6d60:	60fb      	str	r3, [r7, #12]
    }
    value |= (settings->longInvokeID & 0xFFFFFF);
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6d6a:	68fa      	ldr	r2, [r7, #12]
    6d6c:	4313      	orrs	r3, r2
    6d6e:	60fb      	str	r3, [r7, #12]
    ++settings->longInvokeID;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d74:	1c5a      	adds	r2, r3, #1
    6d76:	687b      	ldr	r3, [r7, #4]
    6d78:	62da      	str	r2, [r3, #44]	; 0x2c
    return value;
    6d7a:	68fb      	ldr	r3, [r7, #12]
}
    6d7c:	4618      	mov	r0, r3
    6d7e:	3714      	adds	r7, #20
    6d80:	46bd      	mov	sp, r7
    6d82:	bc80      	pop	{r7}
    6d84:	4770      	bx	lr
    6d86:	bf00      	nop

00006d88 <dlms_setData>:
    bb_attach(&bb, buff, length, length);
    return dlms_setData(&bb, type, value);
}

int dlms_setData(gxByteBuffer *buff, DLMS_DATA_TYPE type, dlmsVARIANT *value)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b086      	sub	sp, #24
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	60f8      	str	r0, [r7, #12]
    6d90:	460b      	mov	r3, r1
    6d92:	607a      	str	r2, [r7, #4]
    6d94:	72fb      	strb	r3, [r7, #11]
    int ret;
    ret = var_changeType(value, type);
    6d96:	7afb      	ldrb	r3, [r7, #11]
    6d98:	4619      	mov	r1, r3
    6d9a:	6878      	ldr	r0, [r7, #4]
    6d9c:	f020 fe08 	bl	279b0 <var_changeType>
    6da0:	6178      	str	r0, [r7, #20]
    if (ret != DLMS_ERROR_CODE_OK)
    6da2:	697b      	ldr	r3, [r7, #20]
    6da4:	2b00      	cmp	r3, #0
    6da6:	d001      	beq.n	6dac <dlms_setData+0x24>
    {
        return ret;
    6da8:	697b      	ldr	r3, [r7, #20]
    6daa:	e006      	b.n	6dba <dlms_setData+0x32>
    }
    return var_getBytes2(value, type, buff);
    6dac:	7afb      	ldrb	r3, [r7, #11]
    6dae:	68fa      	ldr	r2, [r7, #12]
    6db0:	4619      	mov	r1, r3
    6db2:	6878      	ldr	r0, [r7, #4]
    6db4:	f01f fc88 	bl	266c8 <var_getBytes2>
    6db8:	4603      	mov	r3, r0
}
    6dba:	4618      	mov	r0, r3
    6dbc:	3718      	adds	r7, #24
    6dbe:	46bd      	mov	sp, r7
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	bf00      	nop

00006dc4 <getCount>:

int getCount(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b084      	sub	sp, #16
    6dc8:	af00      	add	r7, sp, #0
    6dca:	60f8      	str	r0, [r7, #12]
    6dcc:	60b9      	str	r1, [r7, #8]
    6dce:	607a      	str	r2, [r7, #4]
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    6dd0:	68bb      	ldr	r3, [r7, #8]
    6dd2:	3302      	adds	r3, #2
    6dd4:	4619      	mov	r1, r3
    6dd6:	68f8      	ldr	r0, [r7, #12]
    6dd8:	f01a fd38 	bl	2184c <hlp_getObjectCount2>
    6ddc:	4603      	mov	r3, r0
    6dde:	2b00      	cmp	r3, #0
    6de0:	d002      	beq.n	6de8 <getCount+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    6de2:	f44f 7382 	mov.w	r3, #260	; 0x104
    6de6:	e01e      	b.n	6e26 <getCount+0x62>
    }
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    6de8:	200c      	movs	r0, #12
    6dea:	f022 fe2b 	bl	29a44 <malloc>
    6dee:	4603      	mov	r3, r0
    6df0:	461a      	mov	r2, r3
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	609a      	str	r2, [r3, #8]
    if (value->Arr == NULL)
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	689b      	ldr	r3, [r3, #8]
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d102      	bne.n	6e04 <getCount+0x40>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    6dfe:	f44f 7382 	mov.w	r3, #260	; 0x104
    6e02:	e010      	b.n	6e26 <getCount+0x62>
    }
    va_init(value->Arr);
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	689b      	ldr	r3, [r3, #8]
    6e08:	4618      	mov	r0, r3
    6e0a:	f01f fef1 	bl	26bf0 <va_init>
    va_capacity(value->Arr, info->count);
    6e0e:	687b      	ldr	r3, [r7, #4]
    6e10:	689a      	ldr	r2, [r3, #8]
    6e12:	68bb      	ldr	r3, [r7, #8]
    6e14:	885b      	ldrh	r3, [r3, #2]
    6e16:	4619      	mov	r1, r3
    6e18:	4610      	mov	r0, r2
    6e1a:	f01f feff 	bl	26c1c <va_capacity>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	2201      	movs	r2, #1
    6e22:	701a      	strb	r2, [r3, #0]
    return 0;
    6e24:	2300      	movs	r3, #0
}
    6e26:	4618      	mov	r0, r3
    6e28:	3710      	adds	r7, #16
    6e2a:	46bd      	mov	sp, r7
    6e2c:	bd80      	pop	{r7, pc}
    6e2e:	bf00      	nop

00006e30 <getArray>:
* index
*            starting index.
* Returns  CGXDLMSVariant array.
*/
int getArray(gxByteBuffer *buff, gxDataInfo *info, unsigned short index, dlmsVARIANT *value)
{
    6e30:	b580      	push	{r7, lr}
    6e32:	b08a      	sub	sp, #40	; 0x28
    6e34:	af00      	add	r7, sp, #0
    6e36:	60f8      	str	r0, [r7, #12]
    6e38:	60b9      	str	r1, [r7, #8]
    6e3a:	603b      	str	r3, [r7, #0]
    6e3c:	4613      	mov	r3, r2
    6e3e:	80fb      	strh	r3, [r7, #6]
    dlmsVARIANT *tmp;
    gxDataInfo info2;
    unsigned long size;
    unsigned short pos, startIndex;
    int ret;
    if (info->count == 0)
    6e40:	68bb      	ldr	r3, [r7, #8]
    6e42:	885b      	ldrh	r3, [r3, #2]
    6e44:	2b00      	cmp	r3, #0
    6e46:	d10a      	bne.n	6e5e <getArray+0x2e>
    {
        if ((ret = getCount(buff, info, value)) != 0)
    6e48:	683a      	ldr	r2, [r7, #0]
    6e4a:	68b9      	ldr	r1, [r7, #8]
    6e4c:	68f8      	ldr	r0, [r7, #12]
    6e4e:	f7ff ffb9 	bl	6dc4 <getCount>
    6e52:	6238      	str	r0, [r7, #32]
    6e54:	6a3b      	ldr	r3, [r7, #32]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d001      	beq.n	6e5e <getArray+0x2e>
        {
            return ret;
    6e5a:	6a3b      	ldr	r3, [r7, #32]
    6e5c:	e067      	b.n	6f2e <getArray+0xfe>
        va_init(value->Arr);
        va_capacity(value->Arr, cnt);
        value->vt = DLMS_DATA_TYPE_ARRAY;
        */
    }
    size = buff->size - buff->position;
    6e5e:	68fb      	ldr	r3, [r7, #12]
    6e60:	88db      	ldrh	r3, [r3, #6]
    6e62:	461a      	mov	r2, r3
    6e64:	68fb      	ldr	r3, [r7, #12]
    6e66:	891b      	ldrh	r3, [r3, #8]
    6e68:	1ad3      	subs	r3, r2, r3
    6e6a:	61fb      	str	r3, [r7, #28]
    if (info->count != 0 && size < 1)
    6e6c:	68bb      	ldr	r3, [r7, #8]
    6e6e:	885b      	ldrh	r3, [r3, #2]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d007      	beq.n	6e84 <getArray+0x54>
    6e74:	69fb      	ldr	r3, [r7, #28]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d104      	bne.n	6e84 <getArray+0x54>
    {
        info->compleate = 0;
    6e7a:	68bb      	ldr	r3, [r7, #8]
    6e7c:	2200      	movs	r2, #0
    6e7e:	715a      	strb	r2, [r3, #5]
        return 0;
    6e80:	2300      	movs	r3, #0
    6e82:	e054      	b.n	6f2e <getArray+0xfe>
    }
    startIndex = index;
    6e84:	88fb      	ldrh	r3, [r7, #6]
    6e86:	84bb      	strh	r3, [r7, #36]	; 0x24
    // Position where last row was found. Cache uses this info.
    for (pos = info->index; pos != info->count; ++pos)
    6e88:	68bb      	ldr	r3, [r7, #8]
    6e8a:	881b      	ldrh	r3, [r3, #0]
    6e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
    6e8e:	e045      	b.n	6f1c <getArray+0xec>
    {
        tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    6e90:	2010      	movs	r0, #16
    6e92:	f022 fdd7 	bl	29a44 <malloc>
    6e96:	4603      	mov	r3, r0
    6e98:	61bb      	str	r3, [r7, #24]
        if (tmp == NULL)
    6e9a:	69bb      	ldr	r3, [r7, #24]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d102      	bne.n	6ea6 <getArray+0x76>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    6ea0:	f44f 7382 	mov.w	r3, #260	; 0x104
    6ea4:	e043      	b.n	6f2e <getArray+0xfe>
        }
        var_init(tmp);
    6ea6:	69b8      	ldr	r0, [r7, #24]
    6ea8:	f01f f93e 	bl	26128 <var_init>
        di_init(&info2);
    6eac:	f107 0310 	add.w	r3, r7, #16
    6eb0:	4618      	mov	r0, r3
    6eb2:	f7ff f953 	bl	615c <di_init>
        if ((ret = dlms_getData(buff, &info2, tmp)) != 0)
    6eb6:	f107 0310 	add.w	r3, r7, #16
    6eba:	69ba      	ldr	r2, [r7, #24]
    6ebc:	4619      	mov	r1, r3
    6ebe:	68f8      	ldr	r0, [r7, #12]
    6ec0:	f000 fe9e 	bl	7c00 <dlms_getData>
    6ec4:	6238      	str	r0, [r7, #32]
    6ec6:	6a3b      	ldr	r3, [r7, #32]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d007      	beq.n	6edc <getArray+0xac>
        {
            var_clear(tmp);
    6ecc:	69b8      	ldr	r0, [r7, #24]
    6ece:	f01f f93b 	bl	26148 <var_clear>
            gxfree(tmp);
    6ed2:	69b8      	ldr	r0, [r7, #24]
    6ed4:	f022 fdbe 	bl	29a54 <free>
            return ret;
    6ed8:	6a3b      	ldr	r3, [r7, #32]
    6eda:	e028      	b.n	6f2e <getArray+0xfe>
        }
        if (!info2.compleate)
    6edc:	7d7b      	ldrb	r3, [r7, #21]
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d10c      	bne.n	6efc <getArray+0xcc>
        {
            var_clear(tmp);
    6ee2:	69b8      	ldr	r0, [r7, #24]
    6ee4:	f01f f930 	bl	26148 <var_clear>
            gxfree(tmp);
    6ee8:	69b8      	ldr	r0, [r7, #24]
    6eea:	f022 fdb3 	bl	29a54 <free>
            buff->position = startIndex;
    6eee:	68fb      	ldr	r3, [r7, #12]
    6ef0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    6ef2:	811a      	strh	r2, [r3, #8]
            info->compleate = 0;
    6ef4:	68bb      	ldr	r3, [r7, #8]
    6ef6:	2200      	movs	r2, #0
    6ef8:	715a      	strb	r2, [r3, #5]
            break;
    6efa:	e014      	b.n	6f26 <getArray+0xf6>
        }
        else
        {
            if (info2.count == info2.index)
    6efc:	8a7a      	ldrh	r2, [r7, #18]
    6efe:	8a3b      	ldrh	r3, [r7, #16]
    6f00:	429a      	cmp	r2, r3
    6f02:	d108      	bne.n	6f16 <getArray+0xe6>
            {
                startIndex = (unsigned short)buff->position;
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	891b      	ldrh	r3, [r3, #8]
    6f08:	84bb      	strh	r3, [r7, #36]	; 0x24
                va_push(value->Arr, tmp);
    6f0a:	683b      	ldr	r3, [r7, #0]
    6f0c:	689b      	ldr	r3, [r3, #8]
    6f0e:	69b9      	ldr	r1, [r7, #24]
    6f10:	4618      	mov	r0, r3
    6f12:	f01f fec3 	bl	26c9c <va_push>
        info->compleate = 0;
        return 0;
    }
    startIndex = index;
    // Position where last row was found. Cache uses this info.
    for (pos = info->index; pos != info->count; ++pos)
    6f16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    6f18:	3301      	adds	r3, #1
    6f1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    6f1c:	68bb      	ldr	r3, [r7, #8]
    6f1e:	885b      	ldrh	r3, [r3, #2]
    6f20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6f22:	429a      	cmp	r2, r3
    6f24:	d1b4      	bne.n	6e90 <getArray+0x60>
                startIndex = (unsigned short)buff->position;
                va_push(value->Arr, tmp);
            }
        }
    }
    info->index = pos;
    6f26:	68bb      	ldr	r3, [r7, #8]
    6f28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6f2a:	801a      	strh	r2, [r3, #0]
    return DLMS_ERROR_CODE_OK;
    6f2c:	2300      	movs	r3, #0
}
    6f2e:	4618      	mov	r0, r3
    6f30:	3728      	adds	r7, #40	; 0x28
    6f32:	46bd      	mov	sp, r7
    6f34:	bd80      	pop	{r7, pc}
    6f36:	bf00      	nop

00006f38 <getUInt32>:
* info
*            Data info.
* Returns  parsed UInt32 value.
*/
int getUInt32(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT * value)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b086      	sub	sp, #24
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	60f8      	str	r0, [r7, #12]
    6f40:	60b9      	str	r1, [r7, #8]
    6f42:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 4)
    6f44:	68fb      	ldr	r3, [r7, #12]
    6f46:	88db      	ldrh	r3, [r3, #6]
    6f48:	461a      	mov	r2, r3
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	891b      	ldrh	r3, [r3, #8]
    6f4e:	1ad3      	subs	r3, r2, r3
    6f50:	2b03      	cmp	r3, #3
    6f52:	dc04      	bgt.n	6f5e <getUInt32+0x26>
    {
        info->compleate = 0;
    6f54:	68bb      	ldr	r3, [r7, #8]
    6f56:	2200      	movs	r2, #0
    6f58:	715a      	strb	r2, [r3, #5]
        return 0;
    6f5a:	2300      	movs	r3, #0
    6f5c:	e00f      	b.n	6f7e <getUInt32+0x46>
    }
    value->vt = DLMS_DATA_TYPE_UINT32;
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	2206      	movs	r2, #6
    6f62:	701a      	strb	r2, [r3, #0]
    if ((ret = bb_getUInt32(buff, &value->ulVal)) != 0)
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	3308      	adds	r3, #8
    6f68:	4619      	mov	r1, r3
    6f6a:	68f8      	ldr	r0, [r7, #12]
    6f6c:	f7fc fcb0 	bl	38d0 <bb_getUInt32>
    6f70:	6178      	str	r0, [r7, #20]
    6f72:	697b      	ldr	r3, [r7, #20]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d001      	beq.n	6f7c <getUInt32+0x44>
    {
        return ret;
    6f78:	697b      	ldr	r3, [r7, #20]
    6f7a:	e000      	b.n	6f7e <getUInt32+0x46>
    }
    return DLMS_ERROR_CODE_OK;
    6f7c:	2300      	movs	r3, #0
}
    6f7e:	4618      	mov	r0, r3
    6f80:	3718      	adds	r7, #24
    6f82:	46bd      	mov	sp, r7
    6f84:	bd80      	pop	{r7, pc}
    6f86:	bf00      	nop

00006f88 <getInt32>:
* info
*            Data info.
* Returns  parsed Int32 value.
*/
int getInt32(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT * value)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b086      	sub	sp, #24
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	60f8      	str	r0, [r7, #12]
    6f90:	60b9      	str	r1, [r7, #8]
    6f92:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 4)
    6f94:	68fb      	ldr	r3, [r7, #12]
    6f96:	88db      	ldrh	r3, [r3, #6]
    6f98:	461a      	mov	r2, r3
    6f9a:	68fb      	ldr	r3, [r7, #12]
    6f9c:	891b      	ldrh	r3, [r3, #8]
    6f9e:	1ad3      	subs	r3, r2, r3
    6fa0:	2b03      	cmp	r3, #3
    6fa2:	dc04      	bgt.n	6fae <getInt32+0x26>
    {
        info->compleate = 0;
    6fa4:	68bb      	ldr	r3, [r7, #8]
    6fa6:	2200      	movs	r2, #0
    6fa8:	715a      	strb	r2, [r3, #5]
        return 0;
    6faa:	2300      	movs	r3, #0
    6fac:	e00f      	b.n	6fce <getInt32+0x46>
    }
    value->vt = DLMS_DATA_TYPE_INT32;
    6fae:	687b      	ldr	r3, [r7, #4]
    6fb0:	2205      	movs	r2, #5
    6fb2:	701a      	strb	r2, [r3, #0]
    if ((ret = bb_getInt32(buff, &value->lVal)) != 0)
    6fb4:	687b      	ldr	r3, [r7, #4]
    6fb6:	3308      	adds	r3, #8
    6fb8:	4619      	mov	r1, r3
    6fba:	68f8      	ldr	r0, [r7, #12]
    6fbc:	f7fc fcf6 	bl	39ac <bb_getInt32>
    6fc0:	6178      	str	r0, [r7, #20]
    6fc2:	697b      	ldr	r3, [r7, #20]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d001      	beq.n	6fcc <getInt32+0x44>
    {
        return ret;
    6fc8:	697b      	ldr	r3, [r7, #20]
    6fca:	e000      	b.n	6fce <getInt32+0x46>
    }
    return DLMS_ERROR_CODE_OK;
    6fcc:	2300      	movs	r3, #0
}
    6fce:	4618      	mov	r0, r3
    6fd0:	3718      	adds	r7, #24
    6fd2:	46bd      	mov	sp, r7
    6fd4:	bd80      	pop	{r7, pc}
    6fd6:	bf00      	nop

00006fd8 <getBitString>:
* buff : Received DLMS data.
* info : Data info.
* Returns parsed bit std::string value.
*/
static int getBitString(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT * value)
{
    6fd8:	b590      	push	{r4, r7, lr}
    6fda:	b08b      	sub	sp, #44	; 0x2c
    6fdc:	af00      	add	r7, sp, #0
    6fde:	60f8      	str	r0, [r7, #12]
    6fe0:	60b9      	str	r1, [r7, #8]
    6fe2:	607a      	str	r2, [r7, #4]
    double t;
    unsigned short byteCnt;
    unsigned short cnt = 0;
    6fe4:	2300      	movs	r3, #0
    6fe6:	82fb      	strh	r3, [r7, #22]
    int ret;
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    6fe8:	f107 0316 	add.w	r3, r7, #22
    6fec:	4619      	mov	r1, r3
    6fee:	68f8      	ldr	r0, [r7, #12]
    6ff0:	f01a fc2c 	bl	2184c <hlp_getObjectCount2>
    6ff4:	4603      	mov	r3, r0
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d002      	beq.n	7000 <getBitString+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    6ffa:	f44f 7382 	mov.w	r3, #260	; 0x104
    6ffe:	e051      	b.n	70a4 <getBitString+0xcc>
    }
    t = cnt;
    7000:	8afb      	ldrh	r3, [r7, #22]
    7002:	4618      	mov	r0, r3
    7004:	f7f9 f9d6 	bl	3b4 <__aeabi_ui2d>
    7008:	4603      	mov	r3, r0
    700a:	460c      	mov	r4, r1
    700c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    t /= 8;
    7010:	f04f 0200 	mov.w	r2, #0
    7014:	4b25      	ldr	r3, [pc, #148]	; (70ac <getBitString+0xd4>)
    7016:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    701a:	f7f9 fb6b 	bl	6f4 <__aeabi_ddiv>
    701e:	4603      	mov	r3, r0
    7020:	460c      	mov	r4, r1
    7022:	e9c7 3408 	strd	r3, r4, [r7, #32]
    if (cnt % 8 != 0)
    7026:	8afb      	ldrh	r3, [r7, #22]
    7028:	f003 0307 	and.w	r3, r3, #7
    702c:	b29b      	uxth	r3, r3
    702e:	2b00      	cmp	r3, #0
    7030:	d00a      	beq.n	7048 <getBitString+0x70>
    {
        ++t;
    7032:	f04f 0200 	mov.w	r2, #0
    7036:	4b1e      	ldr	r3, [pc, #120]	; (70b0 <getBitString+0xd8>)
    7038:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    703c:	f7f9 f87e 	bl	13c <__adddf3>
    7040:	4603      	mov	r3, r0
    7042:	460c      	mov	r4, r1
    7044:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }
    byteCnt = (unsigned short)t;
    7048:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    704c:	f7f9 fc62 	bl	914 <__aeabi_d2uiz>
    7050:	4603      	mov	r3, r0
    7052:	83fb      	strh	r3, [r7, #30]
    // If there is not enough data available.
    if (buff->size - buff->position < byteCnt)
    7054:	68fb      	ldr	r3, [r7, #12]
    7056:	88db      	ldrh	r3, [r3, #6]
    7058:	461a      	mov	r2, r3
    705a:	68fb      	ldr	r3, [r7, #12]
    705c:	891b      	ldrh	r3, [r3, #8]
    705e:	1ad2      	subs	r2, r2, r3
    7060:	8bfb      	ldrh	r3, [r7, #30]
    7062:	429a      	cmp	r2, r3
    7064:	da04      	bge.n	7070 <getBitString+0x98>
    {
        info->compleate = 0;
    7066:	68bb      	ldr	r3, [r7, #8]
    7068:	2200      	movs	r2, #0
    706a:	715a      	strb	r2, [r3, #5]
        return 0;
    706c:	2300      	movs	r3, #0
    706e:	e019      	b.n	70a4 <getBitString+0xcc>
    }
    value->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    7070:	200c      	movs	r0, #12
    7072:	f022 fce7 	bl	29a44 <malloc>
    7076:	4603      	mov	r3, r0
    7078:	461a      	mov	r2, r3
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	609a      	str	r2, [r3, #8]
    ba_init(value->bitArr);
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	689b      	ldr	r3, [r3, #8]
    7082:	4618      	mov	r0, r3
    7084:	f7fb fbb8 	bl	27f8 <ba_init>
    if ((ret = ba_add(value->bitArr, buff, cnt, 0)) != 0)
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	6898      	ldr	r0, [r3, #8]
    708c:	8afa      	ldrh	r2, [r7, #22]
    708e:	2300      	movs	r3, #0
    7090:	68f9      	ldr	r1, [r7, #12]
    7092:	f7fb fca1 	bl	29d8 <ba_add>
    7096:	61b8      	str	r0, [r7, #24]
    7098:	69bb      	ldr	r3, [r7, #24]
    709a:	2b00      	cmp	r3, #0
    709c:	d001      	beq.n	70a2 <getBitString+0xca>
    {
        return ret;
    709e:	69bb      	ldr	r3, [r7, #24]
    70a0:	e000      	b.n	70a4 <getBitString+0xcc>
    }
    return 0;
    70a2:	2300      	movs	r3, #0
}
    70a4:	4618      	mov	r0, r3
    70a6:	372c      	adds	r7, #44	; 0x2c
    70a8:	46bd      	mov	sp, r7
    70aa:	bd90      	pop	{r4, r7, pc}
    70ac:	40200000 	.word	0x40200000
    70b0:	3ff00000 	.word	0x3ff00000

000070b4 <getBool>:

static int getBool(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    70b4:	b580      	push	{r7, lr}
    70b6:	b086      	sub	sp, #24
    70b8:	af00      	add	r7, sp, #0
    70ba:	60f8      	str	r0, [r7, #12]
    70bc:	60b9      	str	r1, [r7, #8]
    70be:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char ch;
    // If there is not enough data available.
    if (buff->size - buff->position < 1)
    70c0:	68fb      	ldr	r3, [r7, #12]
    70c2:	88db      	ldrh	r3, [r3, #6]
    70c4:	461a      	mov	r2, r3
    70c6:	68fb      	ldr	r3, [r7, #12]
    70c8:	891b      	ldrh	r3, [r3, #8]
    70ca:	1ad3      	subs	r3, r2, r3
    70cc:	2b00      	cmp	r3, #0
    70ce:	dc04      	bgt.n	70da <getBool+0x26>
    {
        info->compleate = 0;
    70d0:	68bb      	ldr	r3, [r7, #8]
    70d2:	2200      	movs	r2, #0
    70d4:	715a      	strb	r2, [r3, #5]
        return 0;
    70d6:	2300      	movs	r3, #0
    70d8:	e018      	b.n	710c <getBool+0x58>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    70da:	f107 0313 	add.w	r3, r7, #19
    70de:	4619      	mov	r1, r3
    70e0:	68f8      	ldr	r0, [r7, #12]
    70e2:	f7fc fb63 	bl	37ac <bb_getUInt8>
    70e6:	6178      	str	r0, [r7, #20]
    70e8:	697b      	ldr	r3, [r7, #20]
    70ea:	2b00      	cmp	r3, #0
    70ec:	d001      	beq.n	70f2 <getBool+0x3e>
    {
        return ret;
    70ee:	697b      	ldr	r3, [r7, #20]
    70f0:	e00c      	b.n	710c <getBool+0x58>
    }
    value->vt = DLMS_DATA_TYPE_BOOLEAN;
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	2203      	movs	r2, #3
    70f6:	701a      	strb	r2, [r3, #0]
    value->boolVal = ch != 0;
    70f8:	7cfb      	ldrb	r3, [r7, #19]
    70fa:	2b00      	cmp	r3, #0
    70fc:	bf14      	ite	ne
    70fe:	2301      	movne	r3, #1
    7100:	2300      	moveq	r3, #0
    7102:	b2db      	uxtb	r3, r3
    7104:	461a      	mov	r2, r3
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	721a      	strb	r2, [r3, #8]
    return 0;
    710a:	2300      	movs	r3, #0
}
    710c:	4618      	mov	r0, r3
    710e:	3718      	adds	r7, #24
    7110:	46bd      	mov	sp, r7
    7112:	bd80      	pop	{r7, pc}

00007114 <getString>:
* info
*            Data info.
* Returns  parsed std::string value.
*/
int getString(gxByteBuffer *buff, gxDataInfo *info, unsigned char knownType, dlmsVARIANT *value)
{
    7114:	b580      	push	{r7, lr}
    7116:	b086      	sub	sp, #24
    7118:	af00      	add	r7, sp, #0
    711a:	60f8      	str	r0, [r7, #12]
    711c:	60b9      	str	r1, [r7, #8]
    711e:	603b      	str	r3, [r7, #0]
    7120:	4613      	mov	r3, r2
    7122:	71fb      	strb	r3, [r7, #7]
    unsigned short len = 0;
    7124:	2300      	movs	r3, #0
    7126:	82fb      	strh	r3, [r7, #22]
    if (knownType)
    7128:	79fb      	ldrb	r3, [r7, #7]
    712a:	2b00      	cmp	r3, #0
    712c:	d003      	beq.n	7136 <getString+0x22>
    {
        len = (unsigned short)buff->size;
    712e:	68fb      	ldr	r3, [r7, #12]
    7130:	88db      	ldrh	r3, [r3, #6]
    7132:	82fb      	strh	r3, [r7, #22]
    7134:	e019      	b.n	716a <getString+0x56>
    }
    else
    {
        if (hlp_getObjectCount2(buff, &len) != 0)
    7136:	f107 0316 	add.w	r3, r7, #22
    713a:	4619      	mov	r1, r3
    713c:	68f8      	ldr	r0, [r7, #12]
    713e:	f01a fb85 	bl	2184c <hlp_getObjectCount2>
    7142:	4603      	mov	r3, r0
    7144:	2b00      	cmp	r3, #0
    7146:	d002      	beq.n	714e <getString+0x3a>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    7148:	f44f 7382 	mov.w	r3, #260	; 0x104
    714c:	e032      	b.n	71b4 <getString+0xa0>
        }
        // If there is not enough data available.
        if (buff->size - buff->position < (unsigned short)len)
    714e:	68fb      	ldr	r3, [r7, #12]
    7150:	88db      	ldrh	r3, [r3, #6]
    7152:	461a      	mov	r2, r3
    7154:	68fb      	ldr	r3, [r7, #12]
    7156:	891b      	ldrh	r3, [r3, #8]
    7158:	1ad3      	subs	r3, r2, r3
    715a:	8afa      	ldrh	r2, [r7, #22]
    715c:	4293      	cmp	r3, r2
    715e:	da04      	bge.n	716a <getString+0x56>
        {
            info->compleate = 0;
    7160:	68bb      	ldr	r3, [r7, #8]
    7162:	2200      	movs	r2, #0
    7164:	715a      	strb	r2, [r3, #5]
            return 0;
    7166:	2300      	movs	r3, #0
    7168:	e024      	b.n	71b4 <getString+0xa0>
        }
    }
    value->vt = DLMS_DATA_TYPE_STRING;
    716a:	683b      	ldr	r3, [r7, #0]
    716c:	220a      	movs	r2, #10
    716e:	701a      	strb	r2, [r3, #0]
    if (len > 0)
    7170:	8afb      	ldrh	r3, [r7, #22]
    7172:	2b00      	cmp	r3, #0
    7174:	d01d      	beq.n	71b2 <getString+0x9e>
    {
        value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    7176:	200c      	movs	r0, #12
    7178:	f022 fc64 	bl	29a44 <malloc>
    717c:	4603      	mov	r3, r0
    717e:	461a      	mov	r2, r3
    7180:	683b      	ldr	r3, [r7, #0]
    7182:	609a      	str	r2, [r3, #8]
        bb_init(value->strVal);
    7184:	683b      	ldr	r3, [r7, #0]
    7186:	689b      	ldr	r3, [r3, #8]
    7188:	4618      	mov	r0, r3
    718a:	f7fb fdad 	bl	2ce8 <bb_init>
        bb_set(value->strVal, buff->data + buff->position, (unsigned short)len);
    718e:	683b      	ldr	r3, [r7, #0]
    7190:	6898      	ldr	r0, [r3, #8]
    7192:	68fb      	ldr	r3, [r7, #12]
    7194:	681b      	ldr	r3, [r3, #0]
    7196:	68fa      	ldr	r2, [r7, #12]
    7198:	8912      	ldrh	r2, [r2, #8]
    719a:	4413      	add	r3, r2
    719c:	8afa      	ldrh	r2, [r7, #22]
    719e:	4619      	mov	r1, r3
    71a0:	f7fc f9de 	bl	3560 <bb_set>
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
        buff->position += (unsigned long)len;
#else
        buff->position += (unsigned short)len;
    71a4:	68fb      	ldr	r3, [r7, #12]
    71a6:	891a      	ldrh	r2, [r3, #8]
    71a8:	8afb      	ldrh	r3, [r7, #22]
    71aa:	4413      	add	r3, r2
    71ac:	b29a      	uxth	r2, r3
    71ae:	68fb      	ldr	r3, [r7, #12]
    71b0:	811a      	strh	r2, [r3, #8]
#endif
    }
    return 0;
    71b2:	2300      	movs	r3, #0
}
    71b4:	4618      	mov	r0, r3
    71b6:	3718      	adds	r7, #24
    71b8:	46bd      	mov	sp, r7
    71ba:	bd80      	pop	{r7, pc}

000071bc <getUtfString>:
int getUtfString(
    gxByteBuffer *buff,
    gxDataInfo *info,
    unsigned char knownType,
    dlmsVARIANT *value)
{
    71bc:	b580      	push	{r7, lr}
    71be:	b086      	sub	sp, #24
    71c0:	af00      	add	r7, sp, #0
    71c2:	60f8      	str	r0, [r7, #12]
    71c4:	60b9      	str	r1, [r7, #8]
    71c6:	603b      	str	r3, [r7, #0]
    71c8:	4613      	mov	r3, r2
    71ca:	71fb      	strb	r3, [r7, #7]
    unsigned short len = 0;
    71cc:	2300      	movs	r3, #0
    71ce:	82fb      	strh	r3, [r7, #22]
    var_clear(value);
    71d0:	6838      	ldr	r0, [r7, #0]
    71d2:	f01e ffb9 	bl	26148 <var_clear>
    if (knownType)
    71d6:	79fb      	ldrb	r3, [r7, #7]
    71d8:	2b00      	cmp	r3, #0
    71da:	d003      	beq.n	71e4 <getUtfString+0x28>
    {
        len = (unsigned short)buff->size;
    71dc:	68fb      	ldr	r3, [r7, #12]
    71de:	88db      	ldrh	r3, [r3, #6]
    71e0:	82fb      	strh	r3, [r7, #22]
    71e2:	e01b      	b.n	721c <getUtfString+0x60>
    }
    else
    {
        if (hlp_getObjectCount2(buff, &len) != 0)
    71e4:	f107 0316 	add.w	r3, r7, #22
    71e8:	4619      	mov	r1, r3
    71ea:	68f8      	ldr	r0, [r7, #12]
    71ec:	f01a fb2e 	bl	2184c <hlp_getObjectCount2>
    71f0:	4603      	mov	r3, r0
    71f2:	2b00      	cmp	r3, #0
    71f4:	d002      	beq.n	71fc <getUtfString+0x40>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    71f6:	f44f 7382 	mov.w	r3, #260	; 0x104
    71fa:	e038      	b.n	726e <getUtfString+0xb2>
        }
        // If there is not enough data available.
        if (buff->size - buff->position < (unsigned short)(2 * len))
    71fc:	68fb      	ldr	r3, [r7, #12]
    71fe:	88db      	ldrh	r3, [r3, #6]
    7200:	461a      	mov	r2, r3
    7202:	68fb      	ldr	r3, [r7, #12]
    7204:	891b      	ldrh	r3, [r3, #8]
    7206:	1ad3      	subs	r3, r2, r3
    7208:	8afa      	ldrh	r2, [r7, #22]
    720a:	0052      	lsls	r2, r2, #1
    720c:	b292      	uxth	r2, r2
    720e:	4293      	cmp	r3, r2
    7210:	da04      	bge.n	721c <getUtfString+0x60>
        {
            info->compleate = 0;
    7212:	68bb      	ldr	r3, [r7, #8]
    7214:	2200      	movs	r2, #0
    7216:	715a      	strb	r2, [r3, #5]
            return 0;
    7218:	2300      	movs	r3, #0
    721a:	e028      	b.n	726e <getUtfString+0xb2>
        }
    }
    if (len > 0)
    721c:	8afb      	ldrh	r3, [r7, #22]
    721e:	2b00      	cmp	r3, #0
    7220:	d021      	beq.n	7266 <getUtfString+0xaa>
    {
        value->strUtfVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    7222:	200c      	movs	r0, #12
    7224:	f022 fc0e 	bl	29a44 <malloc>
    7228:	4603      	mov	r3, r0
    722a:	461a      	mov	r2, r3
    722c:	683b      	ldr	r3, [r7, #0]
    722e:	609a      	str	r2, [r3, #8]
        bb_init(value->strUtfVal);
    7230:	683b      	ldr	r3, [r7, #0]
    7232:	689b      	ldr	r3, [r3, #8]
    7234:	4618      	mov	r0, r3
    7236:	f7fb fd57 	bl	2ce8 <bb_init>
        bb_set(value->strUtfVal, buff->data + buff->position, (unsigned short)len);
    723a:	683b      	ldr	r3, [r7, #0]
    723c:	6898      	ldr	r0, [r3, #8]
    723e:	68fb      	ldr	r3, [r7, #12]
    7240:	681b      	ldr	r3, [r3, #0]
    7242:	68fa      	ldr	r2, [r7, #12]
    7244:	8912      	ldrh	r2, [r2, #8]
    7246:	4413      	add	r3, r2
    7248:	8afa      	ldrh	r2, [r7, #22]
    724a:	4619      	mov	r1, r3
    724c:	f7fc f988 	bl	3560 <bb_set>
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
        buff->position += (unsigned long)len;
#else
        buff->position += (unsigned short)len;
    7250:	68fb      	ldr	r3, [r7, #12]
    7252:	891a      	ldrh	r2, [r3, #8]
    7254:	8afb      	ldrh	r3, [r7, #22]
    7256:	4413      	add	r3, r2
    7258:	b29a      	uxth	r2, r3
    725a:	68fb      	ldr	r3, [r7, #12]
    725c:	811a      	strh	r2, [r3, #8]
#endif
        value->vt = DLMS_DATA_TYPE_STRING_UTF8;
    725e:	683b      	ldr	r3, [r7, #0]
    7260:	220c      	movs	r2, #12
    7262:	701a      	strb	r2, [r3, #0]
    7264:	e002      	b.n	726c <getUtfString+0xb0>
    }
    else
    {
        value->strUtfVal = NULL;
    7266:	683b      	ldr	r3, [r7, #0]
    7268:	2200      	movs	r2, #0
    726a:	609a      	str	r2, [r3, #8]
    }
    return 0;
    726c:	2300      	movs	r3, #0
}
    726e:	4618      	mov	r0, r3
    7270:	3718      	adds	r7, #24
    7272:	46bd      	mov	sp, r7
    7274:	bd80      	pop	{r7, pc}
    7276:	bf00      	nop

00007278 <getOctetString>:
* info
*            Data info.
* Returns  parsed octet std::string value.
*/
int getOctetString(gxByteBuffer *buff, gxDataInfo *info, unsigned char knownType, dlmsVARIANT *value)
{
    7278:	b580      	push	{r7, lr}
    727a:	b086      	sub	sp, #24
    727c:	af00      	add	r7, sp, #0
    727e:	60f8      	str	r0, [r7, #12]
    7280:	60b9      	str	r1, [r7, #8]
    7282:	603b      	str	r3, [r7, #0]
    7284:	4613      	mov	r3, r2
    7286:	71fb      	strb	r3, [r7, #7]
    unsigned short len;
    int ret = 0;
    7288:	2300      	movs	r3, #0
    728a:	617b      	str	r3, [r7, #20]
    if (knownType)
    728c:	79fb      	ldrb	r3, [r7, #7]
    728e:	2b00      	cmp	r3, #0
    7290:	d003      	beq.n	729a <getOctetString+0x22>
    {
        len = (unsigned short)buff->size;
    7292:	68fb      	ldr	r3, [r7, #12]
    7294:	88db      	ldrh	r3, [r3, #6]
    7296:	827b      	strh	r3, [r7, #18]
    7298:	e019      	b.n	72ce <getOctetString+0x56>
    }
    else
    {
        if (hlp_getObjectCount2(buff, &len) != 0)
    729a:	f107 0312 	add.w	r3, r7, #18
    729e:	4619      	mov	r1, r3
    72a0:	68f8      	ldr	r0, [r7, #12]
    72a2:	f01a fad3 	bl	2184c <hlp_getObjectCount2>
    72a6:	4603      	mov	r3, r0
    72a8:	2b00      	cmp	r3, #0
    72aa:	d002      	beq.n	72b2 <getOctetString+0x3a>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    72ac:	f44f 7382 	mov.w	r3, #260	; 0x104
    72b0:	e027      	b.n	7302 <getOctetString+0x8a>
        }
        // If there is not enough data available.
        if (buff->size - buff->position < len)
    72b2:	68fb      	ldr	r3, [r7, #12]
    72b4:	88db      	ldrh	r3, [r3, #6]
    72b6:	461a      	mov	r2, r3
    72b8:	68fb      	ldr	r3, [r7, #12]
    72ba:	891b      	ldrh	r3, [r3, #8]
    72bc:	1ad3      	subs	r3, r2, r3
    72be:	8a7a      	ldrh	r2, [r7, #18]
    72c0:	4293      	cmp	r3, r2
    72c2:	da04      	bge.n	72ce <getOctetString+0x56>
        {
            info->compleate = 0;
    72c4:	68bb      	ldr	r3, [r7, #8]
    72c6:	2200      	movs	r2, #0
    72c8:	715a      	strb	r2, [r3, #5]
            return 0;
    72ca:	2300      	movs	r3, #0
    72cc:	e019      	b.n	7302 <getOctetString+0x8a>
        }
    }
    if (len == 0)
    72ce:	8a7b      	ldrh	r3, [r7, #18]
    72d0:	2b00      	cmp	r3, #0
    72d2:	d103      	bne.n	72dc <getOctetString+0x64>
    {
        var_clear(value);
    72d4:	6838      	ldr	r0, [r7, #0]
    72d6:	f01e ff37 	bl	26148 <var_clear>
    72da:	e011      	b.n	7300 <getOctetString+0x88>
    }
    else
    {
        ret = var_addBytes(value, buff->data + buff->position, len);
    72dc:	68fb      	ldr	r3, [r7, #12]
    72de:	681b      	ldr	r3, [r3, #0]
    72e0:	68fa      	ldr	r2, [r7, #12]
    72e2:	8912      	ldrh	r2, [r2, #8]
    72e4:	4413      	add	r3, r2
    72e6:	8a7a      	ldrh	r2, [r7, #18]
    72e8:	4619      	mov	r1, r3
    72ea:	6838      	ldr	r0, [r7, #0]
    72ec:	f01e fea4 	bl	26038 <var_addBytes>
    72f0:	6178      	str	r0, [r7, #20]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
        buff->position += (unsigned long)len;
#else
        buff->position += (unsigned short)len;
    72f2:	68fb      	ldr	r3, [r7, #12]
    72f4:	891a      	ldrh	r2, [r3, #8]
    72f6:	8a7b      	ldrh	r3, [r7, #18]
    72f8:	4413      	add	r3, r2
    72fa:	b29a      	uxth	r2, r3
    72fc:	68fb      	ldr	r3, [r7, #12]
    72fe:	811a      	strh	r2, [r3, #8]
#endif
    }
    return ret;
    7300:	697b      	ldr	r3, [r7, #20]
}
    7302:	4618      	mov	r0, r3
    7304:	3718      	adds	r7, #24
    7306:	46bd      	mov	sp, r7
    7308:	bd80      	pop	{r7, pc}
    730a:	bf00      	nop

0000730c <getBcd>:
* info
*            Data info.
* Returns  parsed BCD value.
*/
int getBcd(gxByteBuffer *buff, gxDataInfo *info, unsigned char knownType, dlmsVARIANT *value)
{
    730c:	b580      	push	{r7, lr}
    730e:	b088      	sub	sp, #32
    7310:	af00      	add	r7, sp, #0
    7312:	60f8      	str	r0, [r7, #12]
    7314:	60b9      	str	r1, [r7, #8]
    7316:	603b      	str	r3, [r7, #0]
    7318:	4613      	mov	r3, r2
    731a:	71fb      	strb	r3, [r7, #7]
    unsigned char idHigh, idLow;
    static const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    int ret, a;
    unsigned short len;
    unsigned char ch;
    value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    731c:	200c      	movs	r0, #12
    731e:	f022 fb91 	bl	29a44 <malloc>
    7322:	4603      	mov	r3, r0
    7324:	461a      	mov	r2, r3
    7326:	683b      	ldr	r3, [r7, #0]
    7328:	609a      	str	r2, [r3, #8]
    bb_init(value->strVal);
    732a:	683b      	ldr	r3, [r7, #0]
    732c:	689b      	ldr	r3, [r3, #8]
    732e:	4618      	mov	r0, r3
    7330:	f7fb fcda 	bl	2ce8 <bb_init>
    value->vt = DLMS_DATA_TYPE_STRING;
    7334:	683b      	ldr	r3, [r7, #0]
    7336:	220a      	movs	r2, #10
    7338:	701a      	strb	r2, [r3, #0]
    if (knownType)
    733a:	79fb      	ldrb	r3, [r7, #7]
    733c:	2b00      	cmp	r3, #0
    733e:	d003      	beq.n	7348 <getBcd+0x3c>
    {
        len = (unsigned short)buff->size;
    7340:	68fb      	ldr	r3, [r7, #12]
    7342:	88db      	ldrh	r3, [r3, #6]
    7344:	82bb      	strh	r3, [r7, #20]
    7346:	e019      	b.n	737c <getBcd+0x70>
    }
    else
    {
        if (hlp_getObjectCount2(buff, &len) != 0)
    7348:	f107 0314 	add.w	r3, r7, #20
    734c:	4619      	mov	r1, r3
    734e:	68f8      	ldr	r0, [r7, #12]
    7350:	f01a fa7c 	bl	2184c <hlp_getObjectCount2>
    7354:	4603      	mov	r3, r0
    7356:	2b00      	cmp	r3, #0
    7358:	d002      	beq.n	7360 <getBcd+0x54>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    735a:	f44f 7382 	mov.w	r3, #260	; 0x104
    735e:	e045      	b.n	73ec <getBcd+0xe0>
        }
        // If there is not enough data available.
        if ((buff->size - buff->position) < (unsigned short)len)
    7360:	68fb      	ldr	r3, [r7, #12]
    7362:	88db      	ldrh	r3, [r3, #6]
    7364:	461a      	mov	r2, r3
    7366:	68fb      	ldr	r3, [r7, #12]
    7368:	891b      	ldrh	r3, [r3, #8]
    736a:	1ad3      	subs	r3, r2, r3
    736c:	8aba      	ldrh	r2, [r7, #20]
    736e:	4293      	cmp	r3, r2
    7370:	da04      	bge.n	737c <getBcd+0x70>
        {
            info->compleate = 0;
    7372:	68bb      	ldr	r3, [r7, #8]
    7374:	2200      	movs	r2, #0
    7376:	715a      	strb	r2, [r3, #5]
            return 0;
    7378:	2300      	movs	r3, #0
    737a:	e037      	b.n	73ec <getBcd+0xe0>
        }
    }
    bb_capacity(value->strVal, (unsigned short)(len * 2));
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	689a      	ldr	r2, [r3, #8]
    7380:	8abb      	ldrh	r3, [r7, #20]
    7382:	005b      	lsls	r3, r3, #1
    7384:	b29b      	uxth	r3, r3
    7386:	4619      	mov	r1, r3
    7388:	4610      	mov	r0, r2
    738a:	f7fb fcc3 	bl	2d14 <bb_capacity>
    for (a = 0; a != len; ++a)
    738e:	2300      	movs	r3, #0
    7390:	61fb      	str	r3, [r7, #28]
    7392:	e025      	b.n	73e0 <getBcd+0xd4>
    {
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7394:	f107 0313 	add.w	r3, r7, #19
    7398:	4619      	mov	r1, r3
    739a:	68f8      	ldr	r0, [r7, #12]
    739c:	f7fc fa06 	bl	37ac <bb_getUInt8>
    73a0:	61b8      	str	r0, [r7, #24]
    73a2:	69bb      	ldr	r3, [r7, #24]
    73a4:	2b00      	cmp	r3, #0
    73a6:	d001      	beq.n	73ac <getBcd+0xa0>
        {
            return ret;
    73a8:	69bb      	ldr	r3, [r7, #24]
    73aa:	e01f      	b.n	73ec <getBcd+0xe0>
        }
        idHigh = ch >> 4;
    73ac:	7cfb      	ldrb	r3, [r7, #19]
    73ae:	091b      	lsrs	r3, r3, #4
    73b0:	75fb      	strb	r3, [r7, #23]
        idLow = ch & 0x0F;
    73b2:	7cfb      	ldrb	r3, [r7, #19]
    73b4:	f003 030f 	and.w	r3, r3, #15
    73b8:	75bb      	strb	r3, [r7, #22]
        bb_setInt8(value->strVal, hexArray[idHigh]);
    73ba:	683b      	ldr	r3, [r7, #0]
    73bc:	6898      	ldr	r0, [r3, #8]
    73be:	7dfb      	ldrb	r3, [r7, #23]
    73c0:	4a0c      	ldr	r2, [pc, #48]	; (73f4 <getBcd+0xe8>)
    73c2:	5cd3      	ldrb	r3, [r2, r3]
    73c4:	4619      	mov	r1, r3
    73c6:	f7fc f889 	bl	34dc <bb_setInt8>
        bb_setInt8(value->strVal, hexArray[idLow]);
    73ca:	683b      	ldr	r3, [r7, #0]
    73cc:	6898      	ldr	r0, [r3, #8]
    73ce:	7dbb      	ldrb	r3, [r7, #22]
    73d0:	4a08      	ldr	r2, [pc, #32]	; (73f4 <getBcd+0xe8>)
    73d2:	5cd3      	ldrb	r3, [r2, r3]
    73d4:	4619      	mov	r1, r3
    73d6:	f7fc f881 	bl	34dc <bb_setInt8>
            info->compleate = 0;
            return 0;
        }
    }
    bb_capacity(value->strVal, (unsigned short)(len * 2));
    for (a = 0; a != len; ++a)
    73da:	69fb      	ldr	r3, [r7, #28]
    73dc:	3301      	adds	r3, #1
    73de:	61fb      	str	r3, [r7, #28]
    73e0:	8abb      	ldrh	r3, [r7, #20]
    73e2:	461a      	mov	r2, r3
    73e4:	69fb      	ldr	r3, [r7, #28]
    73e6:	429a      	cmp	r2, r3
    73e8:	d1d4      	bne.n	7394 <getBcd+0x88>
        idHigh = ch >> 4;
        idLow = ch & 0x0F;
        bb_setInt8(value->strVal, hexArray[idHigh]);
        bb_setInt8(value->strVal, hexArray[idLow]);
    }
    return 0;
    73ea:	2300      	movs	r3, #0
}
    73ec:	4618      	mov	r0, r3
    73ee:	3720      	adds	r7, #32
    73f0:	46bd      	mov	sp, r7
    73f2:	bd80      	pop	{r7, pc}
    73f4:	0002cce0 	.word	0x0002cce0

000073f8 <getUInt8>:
* info
*            Data info.
* Returns  parsed UInt8 value.
*/
int getUInt8(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b086      	sub	sp, #24
    73fc:	af00      	add	r7, sp, #0
    73fe:	60f8      	str	r0, [r7, #12]
    7400:	60b9      	str	r1, [r7, #8]
    7402:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 1)
    7404:	68fb      	ldr	r3, [r7, #12]
    7406:	88db      	ldrh	r3, [r3, #6]
    7408:	461a      	mov	r2, r3
    740a:	68fb      	ldr	r3, [r7, #12]
    740c:	891b      	ldrh	r3, [r3, #8]
    740e:	1ad3      	subs	r3, r2, r3
    7410:	2b00      	cmp	r3, #0
    7412:	dc04      	bgt.n	741e <getUInt8+0x26>
    {
        info->compleate = 0;
    7414:	68bb      	ldr	r3, [r7, #8]
    7416:	2200      	movs	r2, #0
    7418:	715a      	strb	r2, [r3, #5]
        return 0;
    741a:	2300      	movs	r3, #0
    741c:	e00f      	b.n	743e <getUInt8+0x46>
    }
    if ((ret = bb_getUInt8(buff, &value->bVal)) != 0)
    741e:	687b      	ldr	r3, [r7, #4]
    7420:	3308      	adds	r3, #8
    7422:	4619      	mov	r1, r3
    7424:	68f8      	ldr	r0, [r7, #12]
    7426:	f7fc f9c1 	bl	37ac <bb_getUInt8>
    742a:	6178      	str	r0, [r7, #20]
    742c:	697b      	ldr	r3, [r7, #20]
    742e:	2b00      	cmp	r3, #0
    7430:	d001      	beq.n	7436 <getUInt8+0x3e>
    {
        return ret;
    7432:	697b      	ldr	r3, [r7, #20]
    7434:	e003      	b.n	743e <getUInt8+0x46>
    }
    value->vt = DLMS_DATA_TYPE_UINT8;
    7436:	687b      	ldr	r3, [r7, #4]
    7438:	2211      	movs	r2, #17
    743a:	701a      	strb	r2, [r3, #0]
    return 0;
    743c:	2300      	movs	r3, #0
}
    743e:	4618      	mov	r0, r3
    7440:	3718      	adds	r7, #24
    7442:	46bd      	mov	sp, r7
    7444:	bd80      	pop	{r7, pc}
    7446:	bf00      	nop

00007448 <getInt16>:
* info
*            Data info.
* Returns  parsed Int16 value.
*/
int getInt16(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7448:	b580      	push	{r7, lr}
    744a:	b086      	sub	sp, #24
    744c:	af00      	add	r7, sp, #0
    744e:	60f8      	str	r0, [r7, #12]
    7450:	60b9      	str	r1, [r7, #8]
    7452:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 2)
    7454:	68fb      	ldr	r3, [r7, #12]
    7456:	88db      	ldrh	r3, [r3, #6]
    7458:	461a      	mov	r2, r3
    745a:	68fb      	ldr	r3, [r7, #12]
    745c:	891b      	ldrh	r3, [r3, #8]
    745e:	1ad3      	subs	r3, r2, r3
    7460:	2b01      	cmp	r3, #1
    7462:	dc04      	bgt.n	746e <getInt16+0x26>
    {
        info->compleate = 0;
    7464:	68bb      	ldr	r3, [r7, #8]
    7466:	2200      	movs	r2, #0
    7468:	715a      	strb	r2, [r3, #5]
        return 0;
    746a:	2300      	movs	r3, #0
    746c:	e00f      	b.n	748e <getInt16+0x46>
    }
    if ((ret = bb_getInt16(buff, &value->iVal)) != 0)
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	3308      	adds	r3, #8
    7472:	4619      	mov	r1, r3
    7474:	68f8      	ldr	r0, [r7, #12]
    7476:	f7fc fa69 	bl	394c <bb_getInt16>
    747a:	6178      	str	r0, [r7, #20]
    747c:	697b      	ldr	r3, [r7, #20]
    747e:	2b00      	cmp	r3, #0
    7480:	d001      	beq.n	7486 <getInt16+0x3e>
    {
        return ret;
    7482:	697b      	ldr	r3, [r7, #20]
    7484:	e003      	b.n	748e <getInt16+0x46>
    }
    value->vt = DLMS_DATA_TYPE_INT16;
    7486:	687b      	ldr	r3, [r7, #4]
    7488:	2210      	movs	r2, #16
    748a:	701a      	strb	r2, [r3, #0]
    return 0;
    748c:	2300      	movs	r3, #0
}
    748e:	4618      	mov	r0, r3
    7490:	3718      	adds	r7, #24
    7492:	46bd      	mov	sp, r7
    7494:	bd80      	pop	{r7, pc}
    7496:	bf00      	nop

00007498 <getInt8>:
* info
*            Data info.
* Returns  parsed Int8 value.
*/
int getInt8(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7498:	b580      	push	{r7, lr}
    749a:	b086      	sub	sp, #24
    749c:	af00      	add	r7, sp, #0
    749e:	60f8      	str	r0, [r7, #12]
    74a0:	60b9      	str	r1, [r7, #8]
    74a2:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 1)
    74a4:	68fb      	ldr	r3, [r7, #12]
    74a6:	88db      	ldrh	r3, [r3, #6]
    74a8:	461a      	mov	r2, r3
    74aa:	68fb      	ldr	r3, [r7, #12]
    74ac:	891b      	ldrh	r3, [r3, #8]
    74ae:	1ad3      	subs	r3, r2, r3
    74b0:	2b00      	cmp	r3, #0
    74b2:	dc04      	bgt.n	74be <getInt8+0x26>
    {
        info->compleate = 0;
    74b4:	68bb      	ldr	r3, [r7, #8]
    74b6:	2200      	movs	r2, #0
    74b8:	715a      	strb	r2, [r3, #5]
        return 0;
    74ba:	2300      	movs	r3, #0
    74bc:	e00f      	b.n	74de <getInt8+0x46>
    }
    if ((ret = bb_getInt8(buff, &value->cVal)) != 0)
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	3308      	adds	r3, #8
    74c2:	4619      	mov	r1, r3
    74c4:	68f8      	ldr	r0, [r7, #12]
    74c6:	f7fc f993 	bl	37f0 <bb_getInt8>
    74ca:	6178      	str	r0, [r7, #20]
    74cc:	697b      	ldr	r3, [r7, #20]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d001      	beq.n	74d6 <getInt8+0x3e>
    {
        return ret;
    74d2:	697b      	ldr	r3, [r7, #20]
    74d4:	e003      	b.n	74de <getInt8+0x46>
    }
    value->vt = DLMS_DATA_TYPE_INT8;
    74d6:	687b      	ldr	r3, [r7, #4]
    74d8:	220f      	movs	r2, #15
    74da:	701a      	strb	r2, [r3, #0]
    return 0;
    74dc:	2300      	movs	r3, #0
}
    74de:	4618      	mov	r0, r3
    74e0:	3718      	adds	r7, #24
    74e2:	46bd      	mov	sp, r7
    74e4:	bd80      	pop	{r7, pc}
    74e6:	bf00      	nop

000074e8 <getUInt16>:
* info
*            Data info.
* Returns  parsed UInt16 value.
*/
int getUInt16(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	b086      	sub	sp, #24
    74ec:	af00      	add	r7, sp, #0
    74ee:	60f8      	str	r0, [r7, #12]
    74f0:	60b9      	str	r1, [r7, #8]
    74f2:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 2)
    74f4:	68fb      	ldr	r3, [r7, #12]
    74f6:	88db      	ldrh	r3, [r3, #6]
    74f8:	461a      	mov	r2, r3
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	891b      	ldrh	r3, [r3, #8]
    74fe:	1ad3      	subs	r3, r2, r3
    7500:	2b01      	cmp	r3, #1
    7502:	dc04      	bgt.n	750e <getUInt16+0x26>
    {
        info->compleate = 0;
    7504:	68bb      	ldr	r3, [r7, #8]
    7506:	2200      	movs	r2, #0
    7508:	715a      	strb	r2, [r3, #5]
        return 0;
    750a:	2300      	movs	r3, #0
    750c:	e00f      	b.n	752e <getUInt16+0x46>
    }
    if ((ret = bb_getUInt16(buff, &value->uiVal)) != 0)
    750e:	687b      	ldr	r3, [r7, #4]
    7510:	3308      	adds	r3, #8
    7512:	4619      	mov	r1, r3
    7514:	68f8      	ldr	r0, [r7, #12]
    7516:	f7fc f9ab 	bl	3870 <bb_getUInt16>
    751a:	6178      	str	r0, [r7, #20]
    751c:	697b      	ldr	r3, [r7, #20]
    751e:	2b00      	cmp	r3, #0
    7520:	d001      	beq.n	7526 <getUInt16+0x3e>
    {
        return ret;
    7522:	697b      	ldr	r3, [r7, #20]
    7524:	e003      	b.n	752e <getUInt16+0x46>
    }
    value->vt = DLMS_DATA_TYPE_UINT16;
    7526:	687b      	ldr	r3, [r7, #4]
    7528:	2212      	movs	r2, #18
    752a:	701a      	strb	r2, [r3, #0]
    return 0;
    752c:	2300      	movs	r3, #0
}
    752e:	4618      	mov	r0, r3
    7530:	3718      	adds	r7, #24
    7532:	46bd      	mov	sp, r7
    7534:	bd80      	pop	{r7, pc}
    7536:	bf00      	nop

00007538 <getInt64>:
* info
*            Data info.
* Returns  parsed Int64 value.
*/
int getInt64(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7538:	b580      	push	{r7, lr}
    753a:	b086      	sub	sp, #24
    753c:	af00      	add	r7, sp, #0
    753e:	60f8      	str	r0, [r7, #12]
    7540:	60b9      	str	r1, [r7, #8]
    7542:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 8)
    7544:	68fb      	ldr	r3, [r7, #12]
    7546:	88db      	ldrh	r3, [r3, #6]
    7548:	461a      	mov	r2, r3
    754a:	68fb      	ldr	r3, [r7, #12]
    754c:	891b      	ldrh	r3, [r3, #8]
    754e:	1ad3      	subs	r3, r2, r3
    7550:	2b07      	cmp	r3, #7
    7552:	dc04      	bgt.n	755e <getInt64+0x26>
    {
        info->compleate = 0;
    7554:	68bb      	ldr	r3, [r7, #8]
    7556:	2200      	movs	r2, #0
    7558:	715a      	strb	r2, [r3, #5]
        return 0;
    755a:	2300      	movs	r3, #0
    755c:	e00f      	b.n	757e <getInt64+0x46>
    }
    if ((ret = bb_getInt64(buff, &value->llVal)) != 0)
    755e:	687b      	ldr	r3, [r7, #4]
    7560:	3308      	adds	r3, #8
    7562:	4619      	mov	r1, r3
    7564:	68f8      	ldr	r0, [r7, #12]
    7566:	f7fc fa6d 	bl	3a44 <bb_getInt64>
    756a:	6178      	str	r0, [r7, #20]
    756c:	697b      	ldr	r3, [r7, #20]
    756e:	2b00      	cmp	r3, #0
    7570:	d001      	beq.n	7576 <getInt64+0x3e>
    {
        return ret;
    7572:	697b      	ldr	r3, [r7, #20]
    7574:	e003      	b.n	757e <getInt64+0x46>
    }
    value->vt = DLMS_DATA_TYPE_INT64;
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	2214      	movs	r2, #20
    757a:	701a      	strb	r2, [r3, #0]
    return 0;
    757c:	2300      	movs	r3, #0
}
    757e:	4618      	mov	r0, r3
    7580:	3718      	adds	r7, #24
    7582:	46bd      	mov	sp, r7
    7584:	bd80      	pop	{r7, pc}
    7586:	bf00      	nop

00007588 <getUInt64>:
* info
*            Data info.
* Returns  parsed UInt64 value.
*/
int getUInt64(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7588:	b580      	push	{r7, lr}
    758a:	b086      	sub	sp, #24
    758c:	af00      	add	r7, sp, #0
    758e:	60f8      	str	r0, [r7, #12]
    7590:	60b9      	str	r1, [r7, #8]
    7592:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 8)
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	88db      	ldrh	r3, [r3, #6]
    7598:	461a      	mov	r2, r3
    759a:	68fb      	ldr	r3, [r7, #12]
    759c:	891b      	ldrh	r3, [r3, #8]
    759e:	1ad3      	subs	r3, r2, r3
    75a0:	2b07      	cmp	r3, #7
    75a2:	dc04      	bgt.n	75ae <getUInt64+0x26>
    {
        info->compleate = 0;
    75a4:	68bb      	ldr	r3, [r7, #8]
    75a6:	2200      	movs	r2, #0
    75a8:	715a      	strb	r2, [r3, #5]
        return 0;
    75aa:	2300      	movs	r3, #0
    75ac:	e00f      	b.n	75ce <getUInt64+0x46>
    }
    if ((ret = bb_getUInt64(buff, &value->ullVal)) != 0)
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	3308      	adds	r3, #8
    75b2:	4619      	mov	r1, r3
    75b4:	68f8      	ldr	r0, [r7, #12]
    75b6:	f7fc fa61 	bl	3a7c <bb_getUInt64>
    75ba:	6178      	str	r0, [r7, #20]
    75bc:	697b      	ldr	r3, [r7, #20]
    75be:	2b00      	cmp	r3, #0
    75c0:	d001      	beq.n	75c6 <getUInt64+0x3e>
    {
        return ret;
    75c2:	697b      	ldr	r3, [r7, #20]
    75c4:	e003      	b.n	75ce <getUInt64+0x46>
    }
    value->vt = DLMS_DATA_TYPE_UINT64;
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	2215      	movs	r2, #21
    75ca:	701a      	strb	r2, [r3, #0]
    return 0;
    75cc:	2300      	movs	r3, #0
}
    75ce:	4618      	mov	r0, r3
    75d0:	3718      	adds	r7, #24
    75d2:	46bd      	mov	sp, r7
    75d4:	bd80      	pop	{r7, pc}
    75d6:	bf00      	nop

000075d8 <getEnum>:
* info
*            Data info.
* Returns  parsed enumeration value.
*/
int getEnum(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    75d8:	b580      	push	{r7, lr}
    75da:	b086      	sub	sp, #24
    75dc:	af00      	add	r7, sp, #0
    75de:	60f8      	str	r0, [r7, #12]
    75e0:	60b9      	str	r1, [r7, #8]
    75e2:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 1)
    75e4:	68fb      	ldr	r3, [r7, #12]
    75e6:	88db      	ldrh	r3, [r3, #6]
    75e8:	461a      	mov	r2, r3
    75ea:	68fb      	ldr	r3, [r7, #12]
    75ec:	891b      	ldrh	r3, [r3, #8]
    75ee:	1ad3      	subs	r3, r2, r3
    75f0:	2b00      	cmp	r3, #0
    75f2:	dc04      	bgt.n	75fe <getEnum+0x26>
    {
        info->compleate = 0;
    75f4:	68bb      	ldr	r3, [r7, #8]
    75f6:	2200      	movs	r2, #0
    75f8:	715a      	strb	r2, [r3, #5]
        return 0;
    75fa:	2300      	movs	r3, #0
    75fc:	e00f      	b.n	761e <getEnum+0x46>
    }
    if ((ret = bb_getUInt8(buff, &value->bVal)) != 0)
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	3308      	adds	r3, #8
    7602:	4619      	mov	r1, r3
    7604:	68f8      	ldr	r0, [r7, #12]
    7606:	f7fc f8d1 	bl	37ac <bb_getUInt8>
    760a:	6178      	str	r0, [r7, #20]
    760c:	697b      	ldr	r3, [r7, #20]
    760e:	2b00      	cmp	r3, #0
    7610:	d001      	beq.n	7616 <getEnum+0x3e>
    {
        return ret;
    7612:	697b      	ldr	r3, [r7, #20]
    7614:	e003      	b.n	761e <getEnum+0x46>
    }
    value->vt = DLMS_DATA_TYPE_ENUM;
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	2216      	movs	r2, #22
    761a:	701a      	strb	r2, [r3, #0]
    return 0;
    761c:	2300      	movs	r3, #0
}
    761e:	4618      	mov	r0, r3
    7620:	3718      	adds	r7, #24
    7622:	46bd      	mov	sp, r7
    7624:	bd80      	pop	{r7, pc}
    7626:	bf00      	nop

00007628 <getDouble>:
* info
*            Data info.
* Returns  Parsed double value.
*/
int getDouble(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7628:	b580      	push	{r7, lr}
    762a:	b086      	sub	sp, #24
    762c:	af00      	add	r7, sp, #0
    762e:	60f8      	str	r0, [r7, #12]
    7630:	60b9      	str	r1, [r7, #8]
    7632:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 8)
    7634:	68fb      	ldr	r3, [r7, #12]
    7636:	88db      	ldrh	r3, [r3, #6]
    7638:	461a      	mov	r2, r3
    763a:	68fb      	ldr	r3, [r7, #12]
    763c:	891b      	ldrh	r3, [r3, #8]
    763e:	1ad3      	subs	r3, r2, r3
    7640:	2b07      	cmp	r3, #7
    7642:	dc04      	bgt.n	764e <getDouble+0x26>
    {
        info->compleate = 0;
    7644:	68bb      	ldr	r3, [r7, #8]
    7646:	2200      	movs	r2, #0
    7648:	715a      	strb	r2, [r3, #5]
        return 0;
    764a:	2300      	movs	r3, #0
    764c:	e00f      	b.n	766e <getDouble+0x46>
    }
    if ((ret = bb_getDouble(buff, &value->dblVal)) != 0)
    764e:	687b      	ldr	r3, [r7, #4]
    7650:	3308      	adds	r3, #8
    7652:	4619      	mov	r1, r3
    7654:	68f8      	ldr	r0, [r7, #12]
    7656:	f7fc fadf 	bl	3c18 <bb_getDouble>
    765a:	6178      	str	r0, [r7, #20]
    765c:	697b      	ldr	r3, [r7, #20]
    765e:	2b00      	cmp	r3, #0
    7660:	d001      	beq.n	7666 <getDouble+0x3e>
    {
        return ret;
    7662:	697b      	ldr	r3, [r7, #20]
    7664:	e003      	b.n	766e <getDouble+0x46>
    }
    value->vt = DLMS_DATA_TYPE_FLOAT64;
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	2218      	movs	r2, #24
    766a:	701a      	strb	r2, [r3, #0]
    return 0;
    766c:	2300      	movs	r3, #0
}
    766e:	4618      	mov	r0, r3
    7670:	3718      	adds	r7, #24
    7672:	46bd      	mov	sp, r7
    7674:	bd80      	pop	{r7, pc}
    7676:	bf00      	nop

00007678 <getFloat>:
* info
*            Data info.
* Returns  Parsed float value.
*/
int getFloat(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    7678:	b580      	push	{r7, lr}
    767a:	b086      	sub	sp, #24
    767c:	af00      	add	r7, sp, #0
    767e:	60f8      	str	r0, [r7, #12]
    7680:	60b9      	str	r1, [r7, #8]
    7682:	607a      	str	r2, [r7, #4]
    int ret;
    // If there is not enough data available.
    if (buff->size - buff->position < 4)
    7684:	68fb      	ldr	r3, [r7, #12]
    7686:	88db      	ldrh	r3, [r3, #6]
    7688:	461a      	mov	r2, r3
    768a:	68fb      	ldr	r3, [r7, #12]
    768c:	891b      	ldrh	r3, [r3, #8]
    768e:	1ad3      	subs	r3, r2, r3
    7690:	2b03      	cmp	r3, #3
    7692:	dc04      	bgt.n	769e <getFloat+0x26>
    {
        info->compleate = 0;
    7694:	68bb      	ldr	r3, [r7, #8]
    7696:	2200      	movs	r2, #0
    7698:	715a      	strb	r2, [r3, #5]
        return 0;
    769a:	2300      	movs	r3, #0
    769c:	e00f      	b.n	76be <getFloat+0x46>
    }
    if ((ret = bb_getFloat(buff, &value->fltVal)) != 0)
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	3308      	adds	r3, #8
    76a2:	4619      	mov	r1, r3
    76a4:	68f8      	ldr	r0, [r7, #12]
    76a6:	f7fc fa79 	bl	3b9c <bb_getFloat>
    76aa:	6178      	str	r0, [r7, #20]
    76ac:	697b      	ldr	r3, [r7, #20]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d001      	beq.n	76b6 <getFloat+0x3e>
    {
        return ret;
    76b2:	697b      	ldr	r3, [r7, #20]
    76b4:	e003      	b.n	76be <getFloat+0x46>
    }
    value->vt = DLMS_DATA_TYPE_FLOAT32;
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	2217      	movs	r2, #23
    76ba:	701a      	strb	r2, [r3, #0]
    return 0;
    76bc:	2300      	movs	r3, #0
}
    76be:	4618      	mov	r0, r3
    76c0:	3718      	adds	r7, #24
    76c2:	46bd      	mov	sp, r7
    76c4:	bd80      	pop	{r7, pc}
    76c6:	bf00      	nop

000076c8 <getTime>:
* info
*            Data info.
* Returns  Parsed time.
*/
int getTime(gxByteBuffer* buff, gxDataInfo *info, dlmsVARIANT *value)
{
    76c8:	b590      	push	{r4, r7, lr}
    76ca:	b08f      	sub	sp, #60	; 0x3c
    76cc:	af06      	add	r7, sp, #24
    76ce:	60f8      	str	r0, [r7, #12]
    76d0:	60b9      	str	r1, [r7, #8]
    76d2:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char ch, hour, minute, second;
    int ms = -1;
    76d4:	f04f 33ff 	mov.w	r3, #4294967295
    76d8:	61fb      	str	r3, [r7, #28]
    if (buff->size - buff->position < 4)
    76da:	68fb      	ldr	r3, [r7, #12]
    76dc:	88db      	ldrh	r3, [r3, #6]
    76de:	461a      	mov	r2, r3
    76e0:	68fb      	ldr	r3, [r7, #12]
    76e2:	891b      	ldrh	r3, [r3, #8]
    76e4:	1ad3      	subs	r3, r2, r3
    76e6:	2b03      	cmp	r3, #3
    76e8:	dc04      	bgt.n	76f4 <getTime+0x2c>
    {
        // If there is not enough data available.
        info->compleate = 0;
    76ea:	68bb      	ldr	r3, [r7, #8]
    76ec:	2200      	movs	r2, #0
    76ee:	715a      	strb	r2, [r3, #5]
        return 0;
    76f0:	2300      	movs	r3, #0
    76f2:	e060      	b.n	77b6 <getTime+0xee>
    }
    // Get time.
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    76f4:	f107 0314 	add.w	r3, r7, #20
    76f8:	4619      	mov	r1, r3
    76fa:	68f8      	ldr	r0, [r7, #12]
    76fc:	f7fc f856 	bl	37ac <bb_getUInt8>
    7700:	61b8      	str	r0, [r7, #24]
    7702:	69bb      	ldr	r3, [r7, #24]
    7704:	2b00      	cmp	r3, #0
    7706:	d001      	beq.n	770c <getTime+0x44>
    {
        return ret;
    7708:	69bb      	ldr	r3, [r7, #24]
    770a:	e054      	b.n	77b6 <getTime+0xee>
    }
    hour = ch;
    770c:	7d3b      	ldrb	r3, [r7, #20]
    770e:	75fb      	strb	r3, [r7, #23]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7710:	f107 0314 	add.w	r3, r7, #20
    7714:	4619      	mov	r1, r3
    7716:	68f8      	ldr	r0, [r7, #12]
    7718:	f7fc f848 	bl	37ac <bb_getUInt8>
    771c:	61b8      	str	r0, [r7, #24]
    771e:	69bb      	ldr	r3, [r7, #24]
    7720:	2b00      	cmp	r3, #0
    7722:	d001      	beq.n	7728 <getTime+0x60>
    {
        return ret;
    7724:	69bb      	ldr	r3, [r7, #24]
    7726:	e046      	b.n	77b6 <getTime+0xee>
    }
    minute = ch;
    7728:	7d3b      	ldrb	r3, [r7, #20]
    772a:	75bb      	strb	r3, [r7, #22]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    772c:	f107 0314 	add.w	r3, r7, #20
    7730:	4619      	mov	r1, r3
    7732:	68f8      	ldr	r0, [r7, #12]
    7734:	f7fc f83a 	bl	37ac <bb_getUInt8>
    7738:	61b8      	str	r0, [r7, #24]
    773a:	69bb      	ldr	r3, [r7, #24]
    773c:	2b00      	cmp	r3, #0
    773e:	d001      	beq.n	7744 <getTime+0x7c>
    {
        return ret;
    7740:	69bb      	ldr	r3, [r7, #24]
    7742:	e038      	b.n	77b6 <getTime+0xee>
    }
    second = ch;
    7744:	7d3b      	ldrb	r3, [r7, #20]
    7746:	757b      	strb	r3, [r7, #21]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7748:	f107 0314 	add.w	r3, r7, #20
    774c:	4619      	mov	r1, r3
    774e:	68f8      	ldr	r0, [r7, #12]
    7750:	f7fc f82c 	bl	37ac <bb_getUInt8>
    7754:	61b8      	str	r0, [r7, #24]
    7756:	69bb      	ldr	r3, [r7, #24]
    7758:	2b00      	cmp	r3, #0
    775a:	d001      	beq.n	7760 <getTime+0x98>
    {
        return ret;
    775c:	69bb      	ldr	r3, [r7, #24]
    775e:	e02a      	b.n	77b6 <getTime+0xee>
    }
    if (ch != 0xFF)
    7760:	7d3b      	ldrb	r3, [r7, #20]
    7762:	2bff      	cmp	r3, #255	; 0xff
    7764:	d006      	beq.n	7774 <getTime+0xac>
    {
        ms = ch * 10;
    7766:	7d3b      	ldrb	r3, [r7, #20]
    7768:	461a      	mov	r2, r3
    776a:	4613      	mov	r3, r2
    776c:	009b      	lsls	r3, r3, #2
    776e:	4413      	add	r3, r2
    7770:	005b      	lsls	r3, r3, #1
    7772:	61fb      	str	r3, [r7, #28]
    }
    value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    7774:	2030      	movs	r0, #48	; 0x30
    7776:	f022 f965 	bl	29a44 <malloc>
    777a:	4603      	mov	r3, r0
    777c:	461a      	mov	r2, r3
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	609a      	str	r2, [r3, #8]
    time_init(value->dateTime, -1, -1, -1, hour, minute, second, ms, 0x8000);
    7782:	687b      	ldr	r3, [r7, #4]
    7784:	689c      	ldr	r4, [r3, #8]
    7786:	7dfb      	ldrb	r3, [r7, #23]
    7788:	7dba      	ldrb	r2, [r7, #22]
    778a:	7d79      	ldrb	r1, [r7, #21]
    778c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7790:	9004      	str	r0, [sp, #16]
    7792:	69f8      	ldr	r0, [r7, #28]
    7794:	9003      	str	r0, [sp, #12]
    7796:	9102      	str	r1, [sp, #8]
    7798:	9201      	str	r2, [sp, #4]
    779a:	9300      	str	r3, [sp, #0]
    779c:	f04f 33ff 	mov.w	r3, #4294967295
    77a0:	f04f 32ff 	mov.w	r2, #4294967295
    77a4:	f04f 31ff 	mov.w	r1, #4294967295
    77a8:	4620      	mov	r0, r4
    77aa:	f7fe fd1d 	bl	61e8 <time_init>
    value->vt = DLMS_DATA_TYPE_TIME;
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	221b      	movs	r2, #27
    77b2:	701a      	strb	r2, [r3, #0]
    return 0;
    77b4:	2300      	movs	r3, #0
}
    77b6:	4618      	mov	r0, r3
    77b8:	3724      	adds	r7, #36	; 0x24
    77ba:	46bd      	mov	sp, r7
    77bc:	bd90      	pop	{r4, r7, pc}
    77be:	bf00      	nop

000077c0 <getDate>:
* info
*            Data info.
* Returns  Parsed date.
*/
int getDate(gxByteBuffer* buff, gxDataInfo *info, dlmsVARIANT *value)
{
    77c0:	b580      	push	{r7, lr}
    77c2:	b08e      	sub	sp, #56	; 0x38
    77c4:	af06      	add	r7, sp, #24
    77c6:	60f8      	str	r0, [r7, #12]
    77c8:	60b9      	str	r1, [r7, #8]
    77ca:	607a      	str	r2, [r7, #4]
    int ret, month, day;
    unsigned short year;
    unsigned char ch;
    if (buff->size - buff->position < 5)
    77cc:	68fb      	ldr	r3, [r7, #12]
    77ce:	88db      	ldrh	r3, [r3, #6]
    77d0:	461a      	mov	r2, r3
    77d2:	68fb      	ldr	r3, [r7, #12]
    77d4:	891b      	ldrh	r3, [r3, #8]
    77d6:	1ad3      	subs	r3, r2, r3
    77d8:	2b04      	cmp	r3, #4
    77da:	dc04      	bgt.n	77e6 <getDate+0x26>
    {
        // If there is not enough data available.
        info->compleate = 0;
    77dc:	68bb      	ldr	r3, [r7, #8]
    77de:	2200      	movs	r2, #0
    77e0:	715a      	strb	r2, [r3, #5]
        return 0;
    77e2:	2300      	movs	r3, #0
    77e4:	e055      	b.n	7892 <getDate+0xd2>
    }
    // Get year.
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    77e6:	f107 0312 	add.w	r3, r7, #18
    77ea:	4619      	mov	r1, r3
    77ec:	68f8      	ldr	r0, [r7, #12]
    77ee:	f7fc f83f 	bl	3870 <bb_getUInt16>
    77f2:	61f8      	str	r0, [r7, #28]
    77f4:	69fb      	ldr	r3, [r7, #28]
    77f6:	2b00      	cmp	r3, #0
    77f8:	d001      	beq.n	77fe <getDate+0x3e>
    {
        return ret;
    77fa:	69fb      	ldr	r3, [r7, #28]
    77fc:	e049      	b.n	7892 <getDate+0xd2>
    }
    // Get month
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    77fe:	f107 0311 	add.w	r3, r7, #17
    7802:	4619      	mov	r1, r3
    7804:	68f8      	ldr	r0, [r7, #12]
    7806:	f7fb ffd1 	bl	37ac <bb_getUInt8>
    780a:	61f8      	str	r0, [r7, #28]
    780c:	69fb      	ldr	r3, [r7, #28]
    780e:	2b00      	cmp	r3, #0
    7810:	d001      	beq.n	7816 <getDate+0x56>
    {
        return ret;
    7812:	69fb      	ldr	r3, [r7, #28]
    7814:	e03d      	b.n	7892 <getDate+0xd2>
    }
    month = ch;
    7816:	7c7b      	ldrb	r3, [r7, #17]
    7818:	61bb      	str	r3, [r7, #24]
    // Get day
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    781a:	f107 0311 	add.w	r3, r7, #17
    781e:	4619      	mov	r1, r3
    7820:	68f8      	ldr	r0, [r7, #12]
    7822:	f7fb ffc3 	bl	37ac <bb_getUInt8>
    7826:	61f8      	str	r0, [r7, #28]
    7828:	69fb      	ldr	r3, [r7, #28]
    782a:	2b00      	cmp	r3, #0
    782c:	d001      	beq.n	7832 <getDate+0x72>
    {
        return ret;
    782e:	69fb      	ldr	r3, [r7, #28]
    7830:	e02f      	b.n	7892 <getDate+0xd2>
    }
    day = ch;
    7832:	7c7b      	ldrb	r3, [r7, #17]
    7834:	617b      	str	r3, [r7, #20]
    // Skip week day
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7836:	f107 0311 	add.w	r3, r7, #17
    783a:	4619      	mov	r1, r3
    783c:	68f8      	ldr	r0, [r7, #12]
    783e:	f7fb ffb5 	bl	37ac <bb_getUInt8>
    7842:	61f8      	str	r0, [r7, #28]
    7844:	69fb      	ldr	r3, [r7, #28]
    7846:	2b00      	cmp	r3, #0
    7848:	d001      	beq.n	784e <getDate+0x8e>
    {
        return ret;
    784a:	69fb      	ldr	r3, [r7, #28]
    784c:	e021      	b.n	7892 <getDate+0xd2>
    }
    value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    784e:	2030      	movs	r0, #48	; 0x30
    7850:	f022 f8f8 	bl	29a44 <malloc>
    7854:	4603      	mov	r3, r0
    7856:	461a      	mov	r2, r3
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	609a      	str	r2, [r3, #8]
    time_init(value->dateTime, year, month, day, -1, -1, -1, -1, 0x8000);
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	6898      	ldr	r0, [r3, #8]
    7860:	8a7b      	ldrh	r3, [r7, #18]
    7862:	4619      	mov	r1, r3
    7864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    7868:	9304      	str	r3, [sp, #16]
    786a:	f04f 33ff 	mov.w	r3, #4294967295
    786e:	9303      	str	r3, [sp, #12]
    7870:	f04f 33ff 	mov.w	r3, #4294967295
    7874:	9302      	str	r3, [sp, #8]
    7876:	f04f 33ff 	mov.w	r3, #4294967295
    787a:	9301      	str	r3, [sp, #4]
    787c:	f04f 33ff 	mov.w	r3, #4294967295
    7880:	9300      	str	r3, [sp, #0]
    7882:	697b      	ldr	r3, [r7, #20]
    7884:	69ba      	ldr	r2, [r7, #24]
    7886:	f7fe fcaf 	bl	61e8 <time_init>
    value->vt = DLMS_DATA_TYPE_DATE;
    788a:	687b      	ldr	r3, [r7, #4]
    788c:	221a      	movs	r2, #26
    788e:	701a      	strb	r2, [r3, #0]
    return 0;
    7890:	2300      	movs	r3, #0
}
    7892:	4618      	mov	r0, r3
    7894:	3720      	adds	r7, #32
    7896:	46bd      	mov	sp, r7
    7898:	bd80      	pop	{r7, pc}
    789a:	bf00      	nop

0000789c <getDateTime>:
* info
*            Data info.
* Returns  Parsed date and time.
*/
int getDateTime(gxByteBuffer *buff, gxDataInfo *info, dlmsVARIANT *value)
{
    789c:	b580      	push	{r7, lr}
    789e:	b088      	sub	sp, #32
    78a0:	af00      	add	r7, sp, #0
    78a2:	60f8      	str	r0, [r7, #12]
    78a4:	60b9      	str	r1, [r7, #8]
    78a6:	607a      	str	r2, [r7, #4]
    unsigned short year;
    int ret, ms, status;
    unsigned char ch;
    // If there is not enough data available.
    if (buff->size - buff->position < 12)
    78a8:	68fb      	ldr	r3, [r7, #12]
    78aa:	88db      	ldrh	r3, [r3, #6]
    78ac:	461a      	mov	r2, r3
    78ae:	68fb      	ldr	r3, [r7, #12]
    78b0:	891b      	ldrh	r3, [r3, #8]
    78b2:	1ad3      	subs	r3, r2, r3
    78b4:	2b0b      	cmp	r3, #11
    78b6:	dc04      	bgt.n	78c2 <getDateTime+0x26>
    {
        info->compleate = 0;
    78b8:	68bb      	ldr	r3, [r7, #8]
    78ba:	2200      	movs	r2, #0
    78bc:	715a      	strb	r2, [r3, #5]
        return 0;
    78be:	2300      	movs	r3, #0
    78c0:	e19a      	b.n	7bf8 <getDateTime+0x35c>
    }
    // Get year.
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    78c2:	f107 0312 	add.w	r3, r7, #18
    78c6:	4619      	mov	r1, r3
    78c8:	68f8      	ldr	r0, [r7, #12]
    78ca:	f7fb ffd1 	bl	3870 <bb_getUInt16>
    78ce:	61f8      	str	r0, [r7, #28]
    78d0:	69fb      	ldr	r3, [r7, #28]
    78d2:	2b00      	cmp	r3, #0
    78d4:	d001      	beq.n	78da <getDateTime+0x3e>
    {
        return ret;
    78d6:	69fb      	ldr	r3, [r7, #28]
    78d8:	e18e      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    78da:	2030      	movs	r0, #48	; 0x30
    78dc:	f022 f8b2 	bl	29a44 <malloc>
    78e0:	4603      	mov	r3, r0
    78e2:	461a      	mov	r2, r3
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	609a      	str	r2, [r3, #8]
    value->dateTime->value.tm_yday = 0;
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	689b      	ldr	r3, [r3, #8]
    78ec:	2200      	movs	r2, #0
    78ee:	621a      	str	r2, [r3, #32]
    value->dateTime->value.tm_year = year;
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	689b      	ldr	r3, [r3, #8]
    78f4:	8a7a      	ldrh	r2, [r7, #18]
    78f6:	619a      	str	r2, [r3, #24]
    // Get month
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    78f8:	f107 0311 	add.w	r3, r7, #17
    78fc:	4619      	mov	r1, r3
    78fe:	68f8      	ldr	r0, [r7, #12]
    7900:	f7fb ff54 	bl	37ac <bb_getUInt8>
    7904:	61f8      	str	r0, [r7, #28]
    7906:	69fb      	ldr	r3, [r7, #28]
    7908:	2b00      	cmp	r3, #0
    790a:	d001      	beq.n	7910 <getDateTime+0x74>
    {
        return ret;
    790c:	69fb      	ldr	r3, [r7, #28]
    790e:	e173      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_mon = ch;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	689b      	ldr	r3, [r3, #8]
    7914:	7c7a      	ldrb	r2, [r7, #17]
    7916:	615a      	str	r2, [r3, #20]
    // Get day
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7918:	f107 0311 	add.w	r3, r7, #17
    791c:	4619      	mov	r1, r3
    791e:	68f8      	ldr	r0, [r7, #12]
    7920:	f7fb ff44 	bl	37ac <bb_getUInt8>
    7924:	61f8      	str	r0, [r7, #28]
    7926:	69fb      	ldr	r3, [r7, #28]
    7928:	2b00      	cmp	r3, #0
    792a:	d001      	beq.n	7930 <getDateTime+0x94>
    {
        return ret;
    792c:	69fb      	ldr	r3, [r7, #28]
    792e:	e163      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_mday = ch;
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	689b      	ldr	r3, [r3, #8]
    7934:	7c7a      	ldrb	r2, [r7, #17]
    7936:	611a      	str	r2, [r3, #16]
    // Skip week day
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7938:	f107 0311 	add.w	r3, r7, #17
    793c:	4619      	mov	r1, r3
    793e:	68f8      	ldr	r0, [r7, #12]
    7940:	f7fb ff34 	bl	37ac <bb_getUInt8>
    7944:	61f8      	str	r0, [r7, #28]
    7946:	69fb      	ldr	r3, [r7, #28]
    7948:	2b00      	cmp	r3, #0
    794a:	d001      	beq.n	7950 <getDateTime+0xb4>
    {
        return ret;
    794c:	69fb      	ldr	r3, [r7, #28]
    794e:	e153      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_wday = ch;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	689b      	ldr	r3, [r3, #8]
    7954:	7c7a      	ldrb	r2, [r7, #17]
    7956:	61da      	str	r2, [r3, #28]
    // Get time.
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7958:	f107 0311 	add.w	r3, r7, #17
    795c:	4619      	mov	r1, r3
    795e:	68f8      	ldr	r0, [r7, #12]
    7960:	f7fb ff24 	bl	37ac <bb_getUInt8>
    7964:	61f8      	str	r0, [r7, #28]
    7966:	69fb      	ldr	r3, [r7, #28]
    7968:	2b00      	cmp	r3, #0
    796a:	d001      	beq.n	7970 <getDateTime+0xd4>
    {
        return ret;
    796c:	69fb      	ldr	r3, [r7, #28]
    796e:	e143      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_hour = ch;
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	689b      	ldr	r3, [r3, #8]
    7974:	7c7a      	ldrb	r2, [r7, #17]
    7976:	60da      	str	r2, [r3, #12]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7978:	f107 0311 	add.w	r3, r7, #17
    797c:	4619      	mov	r1, r3
    797e:	68f8      	ldr	r0, [r7, #12]
    7980:	f7fb ff14 	bl	37ac <bb_getUInt8>
    7984:	61f8      	str	r0, [r7, #28]
    7986:	69fb      	ldr	r3, [r7, #28]
    7988:	2b00      	cmp	r3, #0
    798a:	d001      	beq.n	7990 <getDateTime+0xf4>
    {
        return ret;
    798c:	69fb      	ldr	r3, [r7, #28]
    798e:	e133      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_min = ch;
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	689b      	ldr	r3, [r3, #8]
    7994:	7c7a      	ldrb	r2, [r7, #17]
    7996:	609a      	str	r2, [r3, #8]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7998:	f107 0311 	add.w	r3, r7, #17
    799c:	4619      	mov	r1, r3
    799e:	68f8      	ldr	r0, [r7, #12]
    79a0:	f7fb ff04 	bl	37ac <bb_getUInt8>
    79a4:	61f8      	str	r0, [r7, #28]
    79a6:	69fb      	ldr	r3, [r7, #28]
    79a8:	2b00      	cmp	r3, #0
    79aa:	d001      	beq.n	79b0 <getDateTime+0x114>
    {
        return ret;
    79ac:	69fb      	ldr	r3, [r7, #28]
    79ae:	e123      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->value.tm_sec = ch;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	689b      	ldr	r3, [r3, #8]
    79b4:	7c7a      	ldrb	r2, [r7, #17]
    79b6:	605a      	str	r2, [r3, #4]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    79b8:	f107 0311 	add.w	r3, r7, #17
    79bc:	4619      	mov	r1, r3
    79be:	68f8      	ldr	r0, [r7, #12]
    79c0:	f7fb fef4 	bl	37ac <bb_getUInt8>
    79c4:	61f8      	str	r0, [r7, #28]
    79c6:	69fb      	ldr	r3, [r7, #28]
    79c8:	2b00      	cmp	r3, #0
    79ca:	d001      	beq.n	79d0 <getDateTime+0x134>
    {
        return ret;
    79cc:	69fb      	ldr	r3, [r7, #28]
    79ce:	e113      	b.n	7bf8 <getDateTime+0x35c>
    }
    value->dateTime->skip = DATETIME_SKIPS_NONE;
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	689b      	ldr	r3, [r3, #8]
    79d4:	2200      	movs	r2, #0
    79d6:	701a      	strb	r2, [r3, #0]
    ms = ch;
    79d8:	7c7b      	ldrb	r3, [r7, #17]
    79da:	61bb      	str	r3, [r7, #24]
    if (ms != 0xFF)
    79dc:	69bb      	ldr	r3, [r7, #24]
    79de:	2bff      	cmp	r3, #255	; 0xff
    79e0:	d006      	beq.n	79f0 <getDateTime+0x154>
    {
        ms *= 10;
    79e2:	69ba      	ldr	r2, [r7, #24]
    79e4:	4613      	mov	r3, r2
    79e6:	009b      	lsls	r3, r3, #2
    79e8:	4413      	add	r3, r2
    79ea:	005b      	lsls	r3, r3, #1
    79ec:	61bb      	str	r3, [r7, #24]
    79ee:	e008      	b.n	7a02 <getDateTime+0x166>
    }
    else
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_MS);
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	689b      	ldr	r3, [r3, #8]
    79f4:	687a      	ldr	r2, [r7, #4]
    79f6:	6892      	ldr	r2, [r2, #8]
    79f8:	7812      	ldrb	r2, [r2, #0]
    79fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    79fe:	b2d2      	uxtb	r2, r2
    7a00:	701a      	strb	r2, [r3, #0]
    }
    if ((ret = bb_getInt16(buff, &value->dateTime->deviation)) != 0)
    7a02:	687b      	ldr	r3, [r7, #4]
    7a04:	689b      	ldr	r3, [r3, #8]
    7a06:	3328      	adds	r3, #40	; 0x28
    7a08:	4619      	mov	r1, r3
    7a0a:	68f8      	ldr	r0, [r7, #12]
    7a0c:	f7fb ff9e 	bl	394c <bb_getInt16>
    7a10:	61f8      	str	r0, [r7, #28]
    7a12:	69fb      	ldr	r3, [r7, #28]
    7a14:	2b00      	cmp	r3, #0
    7a16:	d001      	beq.n	7a1c <getDateTime+0x180>
    {
        return ret;
    7a18:	69fb      	ldr	r3, [r7, #28]
    7a1a:	e0ed      	b.n	7bf8 <getDateTime+0x35c>
    }
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7a1c:	f107 0311 	add.w	r3, r7, #17
    7a20:	4619      	mov	r1, r3
    7a22:	68f8      	ldr	r0, [r7, #12]
    7a24:	f7fb fec2 	bl	37ac <bb_getUInt8>
    7a28:	61f8      	str	r0, [r7, #28]
    7a2a:	69fb      	ldr	r3, [r7, #28]
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	d001      	beq.n	7a34 <getDateTime+0x198>
    {
        return ret;
    7a30:	69fb      	ldr	r3, [r7, #28]
    7a32:	e0e1      	b.n	7bf8 <getDateTime+0x35c>
    }
    status = ch;
    7a34:	7c7b      	ldrb	r3, [r7, #17]
    7a36:	617b      	str	r3, [r7, #20]
    value->dateTime->status = (DLMS_CLOCK_STATUS)status;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	689b      	ldr	r3, [r3, #8]
    7a3c:	697a      	ldr	r2, [r7, #20]
    7a3e:	b2d2      	uxtb	r2, r2
    7a40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (year < 1 || year == 0xFFFF)
    7a44:	8a7b      	ldrh	r3, [r7, #18]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d004      	beq.n	7a54 <getDateTime+0x1b8>
    7a4a:	8a7b      	ldrh	r3, [r7, #18]
    7a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7a50:	4293      	cmp	r3, r2
    7a52:	d10d      	bne.n	7a70 <getDateTime+0x1d4>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_YEAR);
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	689b      	ldr	r3, [r3, #8]
    7a58:	687a      	ldr	r2, [r7, #4]
    7a5a:	6892      	ldr	r2, [r2, #8]
    7a5c:	7812      	ldrb	r2, [r2, #0]
    7a5e:	f042 0201 	orr.w	r2, r2, #1
    7a62:	b2d2      	uxtb	r2, r2
    7a64:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_year = 0;
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	689b      	ldr	r3, [r3, #8]
    7a6a:	2200      	movs	r2, #0
    7a6c:	619a      	str	r2, [r3, #24]
    7a6e:	e007      	b.n	7a80 <getDateTime+0x1e4>
    }
    else
    {
        value->dateTime->value.tm_year -= 1900;
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	689b      	ldr	r3, [r3, #8]
    7a74:	687a      	ldr	r2, [r7, #4]
    7a76:	6892      	ldr	r2, [r2, #8]
    7a78:	6992      	ldr	r2, [r2, #24]
    7a7a:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    7a7e:	619a      	str	r2, [r3, #24]
    }
    if (value->dateTime->value.tm_wday < 0 || value->dateTime->value.tm_wday > 7)
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	689b      	ldr	r3, [r3, #8]
    7a84:	69db      	ldr	r3, [r3, #28]
    7a86:	2b00      	cmp	r3, #0
    7a88:	db04      	blt.n	7a94 <getDateTime+0x1f8>
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	689b      	ldr	r3, [r3, #8]
    7a8e:	69db      	ldr	r3, [r3, #28]
    7a90:	2b07      	cmp	r3, #7
    7a92:	dd0c      	ble.n	7aae <getDateTime+0x212>
    {
        value->dateTime->value.tm_wday = 0;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	689b      	ldr	r3, [r3, #8]
    7a98:	2200      	movs	r2, #0
    7a9a:	61da      	str	r2, [r3, #28]
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_DAYOFWEEK);
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	689b      	ldr	r3, [r3, #8]
    7aa0:	687a      	ldr	r2, [r7, #4]
    7aa2:	6892      	ldr	r2, [r2, #8]
    7aa4:	7812      	ldrb	r2, [r2, #0]
    7aa6:	f042 0208 	orr.w	r2, r2, #8
    7aaa:	b2d2      	uxtb	r2, r2
    7aac:	701a      	strb	r2, [r3, #0]
    }
    value->dateTime->daylightSavingsBegin = value->dateTime->value.tm_mon == 0xFE;
    7aae:	687b      	ldr	r3, [r7, #4]
    7ab0:	689b      	ldr	r3, [r3, #8]
    7ab2:	687a      	ldr	r2, [r7, #4]
    7ab4:	6892      	ldr	r2, [r2, #8]
    7ab6:	6952      	ldr	r2, [r2, #20]
    7ab8:	2afe      	cmp	r2, #254	; 0xfe
    7aba:	bf0c      	ite	eq
    7abc:	2201      	moveq	r2, #1
    7abe:	2200      	movne	r2, #0
    7ac0:	b2d2      	uxtb	r2, r2
    7ac2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    value->dateTime->daylightSavingsEnd = value->dateTime->value.tm_mon == 0xFD;
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	689b      	ldr	r3, [r3, #8]
    7aca:	687a      	ldr	r2, [r7, #4]
    7acc:	6892      	ldr	r2, [r2, #8]
    7ace:	6952      	ldr	r2, [r2, #20]
    7ad0:	2afd      	cmp	r2, #253	; 0xfd
    7ad2:	bf0c      	ite	eq
    7ad4:	2201      	moveq	r2, #1
    7ad6:	2200      	movne	r2, #0
    7ad8:	b2d2      	uxtb	r2, r2
    7ada:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    if (value->dateTime->value.tm_mon < 1 || value->dateTime->value.tm_mon > 12)
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	689b      	ldr	r3, [r3, #8]
    7ae2:	695b      	ldr	r3, [r3, #20]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	dd04      	ble.n	7af2 <getDateTime+0x256>
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	689b      	ldr	r3, [r3, #8]
    7aec:	695b      	ldr	r3, [r3, #20]
    7aee:	2b0c      	cmp	r3, #12
    7af0:	dd0d      	ble.n	7b0e <getDateTime+0x272>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_MONTH);
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	689b      	ldr	r3, [r3, #8]
    7af6:	687a      	ldr	r2, [r7, #4]
    7af8:	6892      	ldr	r2, [r2, #8]
    7afa:	7812      	ldrb	r2, [r2, #0]
    7afc:	f042 0202 	orr.w	r2, r2, #2
    7b00:	b2d2      	uxtb	r2, r2
    7b02:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_mon = 0;
    7b04:	687b      	ldr	r3, [r7, #4]
    7b06:	689b      	ldr	r3, [r3, #8]
    7b08:	2200      	movs	r2, #0
    7b0a:	615a      	str	r2, [r3, #20]
    7b0c:	e006      	b.n	7b1c <getDateTime+0x280>
    }
    else
    {
        value->dateTime->value.tm_mon -= 1;
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	689b      	ldr	r3, [r3, #8]
    7b12:	687a      	ldr	r2, [r7, #4]
    7b14:	6892      	ldr	r2, [r2, #8]
    7b16:	6952      	ldr	r2, [r2, #20]
    7b18:	3a01      	subs	r2, #1
    7b1a:	615a      	str	r2, [r3, #20]
    }
    if (value->dateTime->value.tm_mday == -1 || value->dateTime->value.tm_mday == 0 || value->dateTime->value.tm_mday > 31)
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	689b      	ldr	r3, [r3, #8]
    7b20:	691b      	ldr	r3, [r3, #16]
    7b22:	f1b3 3fff 	cmp.w	r3, #4294967295
    7b26:	d009      	beq.n	7b3c <getDateTime+0x2a0>
    7b28:	687b      	ldr	r3, [r7, #4]
    7b2a:	689b      	ldr	r3, [r3, #8]
    7b2c:	691b      	ldr	r3, [r3, #16]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d004      	beq.n	7b3c <getDateTime+0x2a0>
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	689b      	ldr	r3, [r3, #8]
    7b36:	691b      	ldr	r3, [r3, #16]
    7b38:	2b1f      	cmp	r3, #31
    7b3a:	dd0c      	ble.n	7b56 <getDateTime+0x2ba>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_DAY);
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	689b      	ldr	r3, [r3, #8]
    7b40:	687a      	ldr	r2, [r7, #4]
    7b42:	6892      	ldr	r2, [r2, #8]
    7b44:	7812      	ldrb	r2, [r2, #0]
    7b46:	f042 0204 	orr.w	r2, r2, #4
    7b4a:	b2d2      	uxtb	r2, r2
    7b4c:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_mday = 1;
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	689b      	ldr	r3, [r3, #8]
    7b52:	2201      	movs	r2, #1
    7b54:	611a      	str	r2, [r3, #16]
    }
    else if (value->dateTime->value.tm_mday < 0)
    {
        //TODO: day = cal.GetActualMaximum(Calendar.DATE) + day + 3;
    }
    if (value->dateTime->value.tm_hour < 0 || value->dateTime->value.tm_hour > 24)
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	689b      	ldr	r3, [r3, #8]
    7b5a:	68db      	ldr	r3, [r3, #12]
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	db04      	blt.n	7b6a <getDateTime+0x2ce>
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	689b      	ldr	r3, [r3, #8]
    7b64:	68db      	ldr	r3, [r3, #12]
    7b66:	2b18      	cmp	r3, #24
    7b68:	dd0c      	ble.n	7b84 <getDateTime+0x2e8>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_HOUR);
    7b6a:	687b      	ldr	r3, [r7, #4]
    7b6c:	689b      	ldr	r3, [r3, #8]
    7b6e:	687a      	ldr	r2, [r7, #4]
    7b70:	6892      	ldr	r2, [r2, #8]
    7b72:	7812      	ldrb	r2, [r2, #0]
    7b74:	f042 0210 	orr.w	r2, r2, #16
    7b78:	b2d2      	uxtb	r2, r2
    7b7a:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_hour = 0;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	689b      	ldr	r3, [r3, #8]
    7b80:	2200      	movs	r2, #0
    7b82:	60da      	str	r2, [r3, #12]
    }
    if (value->dateTime->value.tm_min < 0 || value->dateTime->value.tm_min > 60)
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	689b      	ldr	r3, [r3, #8]
    7b88:	689b      	ldr	r3, [r3, #8]
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	db04      	blt.n	7b98 <getDateTime+0x2fc>
    7b8e:	687b      	ldr	r3, [r7, #4]
    7b90:	689b      	ldr	r3, [r3, #8]
    7b92:	689b      	ldr	r3, [r3, #8]
    7b94:	2b3c      	cmp	r3, #60	; 0x3c
    7b96:	dd0c      	ble.n	7bb2 <getDateTime+0x316>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_MINUTE);
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	689b      	ldr	r3, [r3, #8]
    7b9c:	687a      	ldr	r2, [r7, #4]
    7b9e:	6892      	ldr	r2, [r2, #8]
    7ba0:	7812      	ldrb	r2, [r2, #0]
    7ba2:	f042 0220 	orr.w	r2, r2, #32
    7ba6:	b2d2      	uxtb	r2, r2
    7ba8:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_min = 0;
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	689b      	ldr	r3, [r3, #8]
    7bae:	2200      	movs	r2, #0
    7bb0:	609a      	str	r2, [r3, #8]
    }
    if (value->dateTime->value.tm_sec < 0 || value->dateTime->value.tm_sec > 60)
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	689b      	ldr	r3, [r3, #8]
    7bb6:	685b      	ldr	r3, [r3, #4]
    7bb8:	2b00      	cmp	r3, #0
    7bba:	db04      	blt.n	7bc6 <getDateTime+0x32a>
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	689b      	ldr	r3, [r3, #8]
    7bc0:	685b      	ldr	r3, [r3, #4]
    7bc2:	2b3c      	cmp	r3, #60	; 0x3c
    7bc4:	dd0c      	ble.n	7be0 <getDateTime+0x344>
    {
        value->dateTime->skip = (DATETIME_SKIPS)(value->dateTime->skip | DATETIME_SKIPS_SECOND);
    7bc6:	687b      	ldr	r3, [r7, #4]
    7bc8:	689b      	ldr	r3, [r3, #8]
    7bca:	687a      	ldr	r2, [r7, #4]
    7bcc:	6892      	ldr	r2, [r2, #8]
    7bce:	7812      	ldrb	r2, [r2, #0]
    7bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7bd4:	b2d2      	uxtb	r2, r2
    7bd6:	701a      	strb	r2, [r3, #0]
        value->dateTime->value.tm_sec = 0;
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	689b      	ldr	r3, [r3, #8]
    7bdc:	2200      	movs	r2, #0
    7bde:	605a      	str	r2, [r3, #4]
    }
    value->dateTime->value.tm_isdst = (status & DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE) != 0;
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	689b      	ldr	r3, [r3, #8]
    7be4:	697a      	ldr	r2, [r7, #20]
    7be6:	f002 0280 	and.w	r2, r2, #128	; 0x80
    7bea:	2a00      	cmp	r2, #0
    7bec:	bf14      	ite	ne
    7bee:	2201      	movne	r2, #1
    7bf0:	2200      	moveq	r2, #0
    7bf2:	b2d2      	uxtb	r2, r2
    7bf4:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    mktime(&value->dateTime->value);
#endif
    return 0;
    7bf6:	2300      	movs	r3, #0
}
    7bf8:	4618      	mov	r0, r3
    7bfa:	3720      	adds	r7, #32
    7bfc:	46bd      	mov	sp, r7
    7bfe:	bd80      	pop	{r7, pc}

00007c00 <dlms_getData>:

int dlms_getData(gxByteBuffer* data, gxDataInfo *info, dlmsVARIANT *value)
{
    7c00:	b580      	push	{r7, lr}
    7c02:	b088      	sub	sp, #32
    7c04:	af00      	add	r7, sp, #0
    7c06:	60f8      	str	r0, [r7, #12]
    7c08:	60b9      	str	r1, [r7, #8]
    7c0a:	607a      	str	r2, [r7, #4]
    unsigned char ch, knownType;
    unsigned long startIndex = data->position;
    7c0c:	68fb      	ldr	r3, [r7, #12]
    7c0e:	891b      	ldrh	r3, [r3, #8]
    7c10:	61bb      	str	r3, [r7, #24]
    int ret;
    var_clear(value);
    7c12:	6878      	ldr	r0, [r7, #4]
    7c14:	f01e fa98 	bl	26148 <var_clear>
    if (data->position == data->size)
    7c18:	68fb      	ldr	r3, [r7, #12]
    7c1a:	891a      	ldrh	r2, [r3, #8]
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	88db      	ldrh	r3, [r3, #6]
    7c20:	429a      	cmp	r2, r3
    7c22:	d104      	bne.n	7c2e <dlms_getData+0x2e>
    {
        info->compleate = 0;
    7c24:	68bb      	ldr	r3, [r7, #8]
    7c26:	2200      	movs	r2, #0
    7c28:	715a      	strb	r2, [r3, #5]
        return 0;
    7c2a:	2300      	movs	r3, #0
    7c2c:	e118      	b.n	7e60 <dlms_getData+0x260>
    }
    info->compleate = 1;
    7c2e:	68bb      	ldr	r3, [r7, #8]
    7c30:	2201      	movs	r2, #1
    7c32:	715a      	strb	r2, [r3, #5]
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    7c34:	68bb      	ldr	r3, [r7, #8]
    7c36:	791b      	ldrb	r3, [r3, #4]
    7c38:	2b00      	cmp	r3, #0
    7c3a:	bf14      	ite	ne
    7c3c:	2301      	movne	r3, #1
    7c3e:	2300      	moveq	r3, #0
    7c40:	b2db      	uxtb	r3, r3
    7c42:	75fb      	strb	r3, [r7, #23]
    if (!knownType)
    7c44:	7dfb      	ldrb	r3, [r7, #23]
    7c46:	2b00      	cmp	r3, #0
    7c48:	d10e      	bne.n	7c68 <dlms_getData+0x68>
    {
        ret = bb_getUInt8(data, &ch);
    7c4a:	f107 0316 	add.w	r3, r7, #22
    7c4e:	4619      	mov	r1, r3
    7c50:	68f8      	ldr	r0, [r7, #12]
    7c52:	f7fb fdab 	bl	37ac <bb_getUInt8>
    7c56:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
    7c58:	69fb      	ldr	r3, [r7, #28]
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d001      	beq.n	7c62 <dlms_getData+0x62>
        {
            return ret;
    7c5e:	69fb      	ldr	r3, [r7, #28]
    7c60:	e0fe      	b.n	7e60 <dlms_getData+0x260>
        }
        info->type = (DLMS_DATA_TYPE)ch;
    7c62:	7dba      	ldrb	r2, [r7, #22]
    7c64:	68bb      	ldr	r3, [r7, #8]
    7c66:	711a      	strb	r2, [r3, #4]
    }
    if (info->type == DLMS_DATA_TYPE_NONE)
    7c68:	68bb      	ldr	r3, [r7, #8]
    7c6a:	791b      	ldrb	r3, [r3, #4]
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d101      	bne.n	7c74 <dlms_getData+0x74>
    {
        //Do nothing.
        return DLMS_ERROR_CODE_OK;
    7c70:	2300      	movs	r3, #0
    7c72:	e0f5      	b.n	7e60 <dlms_getData+0x260>
    }
    if (data->position == data->size)
    7c74:	68fb      	ldr	r3, [r7, #12]
    7c76:	891a      	ldrh	r2, [r3, #8]
    7c78:	68fb      	ldr	r3, [r7, #12]
    7c7a:	88db      	ldrh	r3, [r3, #6]
    7c7c:	429a      	cmp	r2, r3
    7c7e:	d104      	bne.n	7c8a <dlms_getData+0x8a>
    {
        info->compleate = 0;
    7c80:	68bb      	ldr	r3, [r7, #8]
    7c82:	2200      	movs	r2, #0
    7c84:	715a      	strb	r2, [r3, #5]
        return 0;
    7c86:	2300      	movs	r3, #0
    7c88:	e0ea      	b.n	7e60 <dlms_getData+0x260>
    }
    switch (info->type)
    7c8a:	68bb      	ldr	r3, [r7, #8]
    7c8c:	791b      	ldrb	r3, [r3, #4]
    7c8e:	3b01      	subs	r3, #1
    7c90:	2b1a      	cmp	r3, #26
    7c92:	f200 80da 	bhi.w	7e4a <dlms_getData+0x24a>
    7c96:	a201      	add	r2, pc, #4	; (adr r2, 7c9c <dlms_getData+0x9c>)
    7c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c9c:	00007d09 	.word	0x00007d09
    7ca0:	00007d09 	.word	0x00007d09
    7ca4:	00007d23 	.word	0x00007d23
    7ca8:	00007d31 	.word	0x00007d31
    7cac:	00007d3f 	.word	0x00007d3f
    7cb0:	00007d4d 	.word	0x00007d4d
    7cb4:	00007e4b 	.word	0x00007e4b
    7cb8:	00007e4b 	.word	0x00007e4b
    7cbc:	00007d7b 	.word	0x00007d7b
    7cc0:	00007d5b 	.word	0x00007d5b
    7cc4:	00007e4b 	.word	0x00007e4b
    7cc8:	00007d6b 	.word	0x00007d6b
    7ccc:	00007d8b 	.word	0x00007d8b
    7cd0:	00007e4b 	.word	0x00007e4b
    7cd4:	00007d9b 	.word	0x00007d9b
    7cd8:	00007da9 	.word	0x00007da9
    7cdc:	00007db7 	.word	0x00007db7
    7ce0:	00007dc5 	.word	0x00007dc5
    7ce4:	00007dd3 	.word	0x00007dd3
    7ce8:	00007ddb 	.word	0x00007ddb
    7cec:	00007de9 	.word	0x00007de9
    7cf0:	00007df7 	.word	0x00007df7
    7cf4:	00007e05 	.word	0x00007e05
    7cf8:	00007e13 	.word	0x00007e13
    7cfc:	00007e21 	.word	0x00007e21
    7d00:	00007e2f 	.word	0x00007e2f
    7d04:	00007e3d 	.word	0x00007e3d
    {
    case DLMS_DATA_TYPE_ARRAY:
    case DLMS_DATA_TYPE_STRUCTURE:
    {
        ret = getArray(data, info, (unsigned short)startIndex, value);
    7d08:	69bb      	ldr	r3, [r7, #24]
    7d0a:	b29a      	uxth	r2, r3
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	68b9      	ldr	r1, [r7, #8]
    7d10:	68f8      	ldr	r0, [r7, #12]
    7d12:	f7ff f88d 	bl	6e30 <getArray>
    7d16:	61f8      	str	r0, [r7, #28]
        value->vt = info->type;
    7d18:	68bb      	ldr	r3, [r7, #8]
    7d1a:	791a      	ldrb	r2, [r3, #4]
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	701a      	strb	r2, [r3, #0]
        break;
    7d20:	e096      	b.n	7e50 <dlms_getData+0x250>
    }
    case DLMS_DATA_TYPE_BOOLEAN:
    {
        ret = getBool(data, info, value);
    7d22:	687a      	ldr	r2, [r7, #4]
    7d24:	68b9      	ldr	r1, [r7, #8]
    7d26:	68f8      	ldr	r0, [r7, #12]
    7d28:	f7ff f9c4 	bl	70b4 <getBool>
    7d2c:	61f8      	str	r0, [r7, #28]
        break;
    7d2e:	e08f      	b.n	7e50 <dlms_getData+0x250>
    }
    case DLMS_DATA_TYPE_BIT_STRING:
        ret = getBitString(data, info, value);
    7d30:	687a      	ldr	r2, [r7, #4]
    7d32:	68b9      	ldr	r1, [r7, #8]
    7d34:	68f8      	ldr	r0, [r7, #12]
    7d36:	f7ff f94f 	bl	6fd8 <getBitString>
    7d3a:	61f8      	str	r0, [r7, #28]
        break;
    7d3c:	e088      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_INT32:
        ret = getInt32(data, info, value);
    7d3e:	687a      	ldr	r2, [r7, #4]
    7d40:	68b9      	ldr	r1, [r7, #8]
    7d42:	68f8      	ldr	r0, [r7, #12]
    7d44:	f7ff f920 	bl	6f88 <getInt32>
    7d48:	61f8      	str	r0, [r7, #28]
        break;
    7d4a:	e081      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_UINT32:
        ret = getUInt32(data, info, value);
    7d4c:	687a      	ldr	r2, [r7, #4]
    7d4e:	68b9      	ldr	r1, [r7, #8]
    7d50:	68f8      	ldr	r0, [r7, #12]
    7d52:	f7ff f8f1 	bl	6f38 <getUInt32>
    7d56:	61f8      	str	r0, [r7, #28]
        break;
    7d58:	e07a      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_STRING:
        ret = getString(data, info, knownType, value);
    7d5a:	7dfa      	ldrb	r2, [r7, #23]
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	68b9      	ldr	r1, [r7, #8]
    7d60:	68f8      	ldr	r0, [r7, #12]
    7d62:	f7ff f9d7 	bl	7114 <getString>
    7d66:	61f8      	str	r0, [r7, #28]
        break;
    7d68:	e072      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_STRING_UTF8:
        ret = getUtfString(data, info, knownType, value);
    7d6a:	7dfa      	ldrb	r2, [r7, #23]
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	68b9      	ldr	r1, [r7, #8]
    7d70:	68f8      	ldr	r0, [r7, #12]
    7d72:	f7ff fa23 	bl	71bc <getUtfString>
    7d76:	61f8      	str	r0, [r7, #28]
        break;
    7d78:	e06a      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_OCTET_STRING:
        ret = getOctetString(data, info, knownType, value);
    7d7a:	7dfa      	ldrb	r2, [r7, #23]
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	68b9      	ldr	r1, [r7, #8]
    7d80:	68f8      	ldr	r0, [r7, #12]
    7d82:	f7ff fa79 	bl	7278 <getOctetString>
    7d86:	61f8      	str	r0, [r7, #28]
        break;
    7d88:	e062      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
        ret = getBcd(data, info, knownType, value);
    7d8a:	7dfa      	ldrb	r2, [r7, #23]
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	68b9      	ldr	r1, [r7, #8]
    7d90:	68f8      	ldr	r0, [r7, #12]
    7d92:	f7ff fabb 	bl	730c <getBcd>
    7d96:	61f8      	str	r0, [r7, #28]
        break;
    7d98:	e05a      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_INT8:
        ret = getInt8(data, info, value);
    7d9a:	687a      	ldr	r2, [r7, #4]
    7d9c:	68b9      	ldr	r1, [r7, #8]
    7d9e:	68f8      	ldr	r0, [r7, #12]
    7da0:	f7ff fb7a 	bl	7498 <getInt8>
    7da4:	61f8      	str	r0, [r7, #28]
        break;
    7da6:	e053      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_INT16:
        ret = getInt16(data, info, value);
    7da8:	687a      	ldr	r2, [r7, #4]
    7daa:	68b9      	ldr	r1, [r7, #8]
    7dac:	68f8      	ldr	r0, [r7, #12]
    7dae:	f7ff fb4b 	bl	7448 <getInt16>
    7db2:	61f8      	str	r0, [r7, #28]
        break;
    7db4:	e04c      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_UINT8:
        ret = getUInt8(data, info, value);
    7db6:	687a      	ldr	r2, [r7, #4]
    7db8:	68b9      	ldr	r1, [r7, #8]
    7dba:	68f8      	ldr	r0, [r7, #12]
    7dbc:	f7ff fb1c 	bl	73f8 <getUInt8>
    7dc0:	61f8      	str	r0, [r7, #28]
        break;
    7dc2:	e045      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_UINT16:
        ret = getUInt16(data, info, value);
    7dc4:	687a      	ldr	r2, [r7, #4]
    7dc6:	68b9      	ldr	r1, [r7, #8]
    7dc8:	68f8      	ldr	r0, [r7, #12]
    7dca:	f7ff fb8d 	bl	74e8 <getUInt16>
    7dce:	61f8      	str	r0, [r7, #28]
        break;
    7dd0:	e03e      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_COMPACT_ARRAY:
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    7dd2:	f44f 7381 	mov.w	r3, #258	; 0x102
    7dd6:	61fb      	str	r3, [r7, #28]
        break;
    7dd8:	e03a      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_INT64:
        ret = getInt64(data, info, value);
    7dda:	687a      	ldr	r2, [r7, #4]
    7ddc:	68b9      	ldr	r1, [r7, #8]
    7dde:	68f8      	ldr	r0, [r7, #12]
    7de0:	f7ff fbaa 	bl	7538 <getInt64>
    7de4:	61f8      	str	r0, [r7, #28]
        break;
    7de6:	e033      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_UINT64:
        ret = getUInt64(data, info, value);
    7de8:	687a      	ldr	r2, [r7, #4]
    7dea:	68b9      	ldr	r1, [r7, #8]
    7dec:	68f8      	ldr	r0, [r7, #12]
    7dee:	f7ff fbcb 	bl	7588 <getUInt64>
    7df2:	61f8      	str	r0, [r7, #28]
        break;
    7df4:	e02c      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_ENUM:
        ret = getEnum(data, info, value);
    7df6:	687a      	ldr	r2, [r7, #4]
    7df8:	68b9      	ldr	r1, [r7, #8]
    7dfa:	68f8      	ldr	r0, [r7, #12]
    7dfc:	f7ff fbec 	bl	75d8 <getEnum>
    7e00:	61f8      	str	r0, [r7, #28]
        break;
    7e02:	e025      	b.n	7e50 <dlms_getData+0x250>
#ifndef GX_DLMS_MICROCONTROLLER
    case DLMS_DATA_TYPE_FLOAT32:
        ret = getFloat(data, info, value);
    7e04:	687a      	ldr	r2, [r7, #4]
    7e06:	68b9      	ldr	r1, [r7, #8]
    7e08:	68f8      	ldr	r0, [r7, #12]
    7e0a:	f7ff fc35 	bl	7678 <getFloat>
    7e0e:	61f8      	str	r0, [r7, #28]
        break;
    7e10:	e01e      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_FLOAT64:
        ret = getDouble(data, info, value);
    7e12:	687a      	ldr	r2, [r7, #4]
    7e14:	68b9      	ldr	r1, [r7, #8]
    7e16:	68f8      	ldr	r0, [r7, #12]
    7e18:	f7ff fc06 	bl	7628 <getDouble>
    7e1c:	61f8      	str	r0, [r7, #28]
        break;
    7e1e:	e017      	b.n	7e50 <dlms_getData+0x250>
#endif //GX_DLMS_MICROCONTROLLER
    case DLMS_DATA_TYPE_DATETIME:
        ret = getDateTime(data, info, value);
    7e20:	687a      	ldr	r2, [r7, #4]
    7e22:	68b9      	ldr	r1, [r7, #8]
    7e24:	68f8      	ldr	r0, [r7, #12]
    7e26:	f7ff fd39 	bl	789c <getDateTime>
    7e2a:	61f8      	str	r0, [r7, #28]
        break;
    7e2c:	e010      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_DATE:
        ret = getDate(data, info, value);
    7e2e:	687a      	ldr	r2, [r7, #4]
    7e30:	68b9      	ldr	r1, [r7, #8]
    7e32:	68f8      	ldr	r0, [r7, #12]
    7e34:	f7ff fcc4 	bl	77c0 <getDate>
    7e38:	61f8      	str	r0, [r7, #28]
        break;
    7e3a:	e009      	b.n	7e50 <dlms_getData+0x250>
    case DLMS_DATA_TYPE_TIME:
        ret = getTime(data, info, value);
    7e3c:	687a      	ldr	r2, [r7, #4]
    7e3e:	68b9      	ldr	r1, [r7, #8]
    7e40:	68f8      	ldr	r0, [r7, #12]
    7e42:	f7ff fc41 	bl	76c8 <getTime>
    7e46:	61f8      	str	r0, [r7, #28]
        break;
    7e48:	e002      	b.n	7e50 <dlms_getData+0x250>
        //Assert in debug version.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
#endif
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    7e4a:	f44f 7381 	mov.w	r3, #258	; 0x102
    7e4e:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0)
    7e50:	69fb      	ldr	r3, [r7, #28]
    7e52:	2b00      	cmp	r3, #0
    7e54:	d103      	bne.n	7e5e <dlms_getData+0x25e>
    {
        value->vt = info->type;
    7e56:	68bb      	ldr	r3, [r7, #8]
    7e58:	791a      	ldrb	r2, [r3, #4]
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	701a      	strb	r2, [r3, #0]
    }
    return ret;
    7e5e:	69fb      	ldr	r3, [r7, #28]
}
    7e60:	4618      	mov	r0, r3
    7e62:	3720      	adds	r7, #32
    7e64:	46bd      	mov	sp, r7
    7e66:	bd80      	pop	{r7, pc}

00007e68 <dlms_checkLLCBytes>:

//Return DLMS_ERROR_CODE_FALSE if LLC bytes are not included.
int dlms_checkLLCBytes(dlmsSettings* settings, gxByteBuffer* data)
{
    7e68:	b580      	push	{r7, lr}
    7e6a:	b082      	sub	sp, #8
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
    7e70:	6039      	str	r1, [r7, #0]
    if (settings->server)
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d00f      	beq.n	7e9c <dlms_checkLLCBytes+0x34>
    {
        //Check LLC bytes.
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    7e7c:	683b      	ldr	r3, [r7, #0]
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	683a      	ldr	r2, [r7, #0]
    7e82:	8912      	ldrh	r2, [r2, #8]
    7e84:	4413      	add	r3, r2
    7e86:	2203      	movs	r2, #3
    7e88:	4912      	ldr	r1, [pc, #72]	; (7ed4 <dlms_checkLLCBytes+0x6c>)
    7e8a:	4618      	mov	r0, r3
    7e8c:	f021 fdea 	bl	29a64 <memcmp>
    7e90:	4603      	mov	r3, r0
    7e92:	2b00      	cmp	r3, #0
    7e94:	d012      	beq.n	7ebc <dlms_checkLLCBytes+0x54>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    7e96:	f44f 7381 	mov.w	r3, #258	; 0x102
    7e9a:	e016      	b.n	7eca <dlms_checkLLCBytes+0x62>
        }
    }
    else
    {
        //Check LLC bytes.
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
    7e9c:	683b      	ldr	r3, [r7, #0]
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	683a      	ldr	r2, [r7, #0]
    7ea2:	8912      	ldrh	r2, [r2, #8]
    7ea4:	4413      	add	r3, r2
    7ea6:	2203      	movs	r2, #3
    7ea8:	490b      	ldr	r1, [pc, #44]	; (7ed8 <dlms_checkLLCBytes+0x70>)
    7eaa:	4618      	mov	r0, r3
    7eac:	f021 fdda 	bl	29a64 <memcmp>
    7eb0:	4603      	mov	r3, r0
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d002      	beq.n	7ebc <dlms_checkLLCBytes+0x54>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    7eb6:	f44f 7381 	mov.w	r3, #258	; 0x102
    7eba:	e006      	b.n	7eca <dlms_checkLLCBytes+0x62>
        }
    }
    data->position += 3;
    7ebc:	683b      	ldr	r3, [r7, #0]
    7ebe:	891b      	ldrh	r3, [r3, #8]
    7ec0:	3303      	adds	r3, #3
    7ec2:	b29a      	uxth	r2, r3
    7ec4:	683b      	ldr	r3, [r7, #0]
    7ec6:	811a      	strh	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
    7ec8:	2300      	movs	r3, #0
}
    7eca:	4618      	mov	r0, r3
    7ecc:	3708      	adds	r7, #8
    7ece:	46bd      	mov	sp, r7
    7ed0:	bd80      	pop	{r7, pc}
    7ed2:	bf00      	nop
    7ed4:	0002ccd8 	.word	0x0002ccd8
    7ed8:	0002ccdc 	.word	0x0002ccdc

00007edc <dlms_getHDLCAddress>:

int dlms_getHDLCAddress(
    gxByteBuffer *buff,
    unsigned long *address,
    unsigned char isClientAddress)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	b08a      	sub	sp, #40	; 0x28
    7ee0:	af00      	add	r7, sp, #0
    7ee2:	60f8      	str	r0, [r7, #12]
    7ee4:	60b9      	str	r1, [r7, #8]
    7ee6:	4613      	mov	r3, r2
    7ee8:	71fb      	strb	r3, [r7, #7]
    unsigned char ch;
    unsigned short s, pos;
    unsigned long l;
    int ret, size = 0;
    7eea:	2300      	movs	r3, #0
    7eec:	623b      	str	r3, [r7, #32]
    for (pos = (unsigned short)buff->position; pos != (unsigned short)buff->size; ++pos)
    7eee:	68fb      	ldr	r3, [r7, #12]
    7ef0:	891b      	ldrh	r3, [r3, #8]
    7ef2:	84fb      	strh	r3, [r7, #38]	; 0x26
    7ef4:	e017      	b.n	7f26 <dlms_getHDLCAddress+0x4a>
    {
        ++size;
    7ef6:	6a3b      	ldr	r3, [r7, #32]
    7ef8:	3301      	adds	r3, #1
    7efa:	623b      	str	r3, [r7, #32]
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
    7efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    7efe:	f107 021b 	add.w	r2, r7, #27
    7f02:	4619      	mov	r1, r3
    7f04:	68f8      	ldr	r0, [r7, #12]
    7f06:	f7fb fc97 	bl	3838 <bb_getUInt8ByIndex>
    7f0a:	61f8      	str	r0, [r7, #28]
    7f0c:	69fb      	ldr	r3, [r7, #28]
    7f0e:	2b00      	cmp	r3, #0
    7f10:	d001      	beq.n	7f16 <dlms_getHDLCAddress+0x3a>
        {
            return ret;
    7f12:	69fb      	ldr	r3, [r7, #28]
    7f14:	e072      	b.n	7ffc <dlms_getHDLCAddress+0x120>
        }
        if ((ch & 0x1) == 1)
    7f16:	7efb      	ldrb	r3, [r7, #27]
    7f18:	f003 0301 	and.w	r3, r3, #1
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d108      	bne.n	7f32 <dlms_getHDLCAddress+0x56>
{
    unsigned char ch;
    unsigned short s, pos;
    unsigned long l;
    int ret, size = 0;
    for (pos = (unsigned short)buff->position; pos != (unsigned short)buff->size; ++pos)
    7f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    7f22:	3301      	adds	r3, #1
    7f24:	84fb      	strh	r3, [r7, #38]	; 0x26
    7f26:	68fb      	ldr	r3, [r7, #12]
    7f28:	88db      	ldrh	r3, [r3, #6]
    7f2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7f2c:	429a      	cmp	r2, r3
    7f2e:	d1e2      	bne.n	7ef6 <dlms_getHDLCAddress+0x1a>
    7f30:	e000      	b.n	7f34 <dlms_getHDLCAddress+0x58>
        {
            return ret;
        }
        if ((ch & 0x1) == 1)
        {
            break;
    7f32:	bf00      	nop
        }
    }
    //DLMS CCT test requires that client size is one byte.
    if (isClientAddress && size != 1)
    7f34:	79fb      	ldrb	r3, [r7, #7]
    7f36:	2b00      	cmp	r3, #0
    7f38:	d005      	beq.n	7f46 <dlms_getHDLCAddress+0x6a>
    7f3a:	6a3b      	ldr	r3, [r7, #32]
    7f3c:	2b01      	cmp	r3, #1
    7f3e:	d002      	beq.n	7f46 <dlms_getHDLCAddress+0x6a>
    {
        return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    7f40:	f240 1307 	movw	r3, #263	; 0x107
    7f44:	e05a      	b.n	7ffc <dlms_getHDLCAddress+0x120>
    }

    if (size == 1)
    7f46:	6a3b      	ldr	r3, [r7, #32]
    7f48:	2b01      	cmp	r3, #1
    7f4a:	d112      	bne.n	7f72 <dlms_getHDLCAddress+0x96>
    {
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    7f4c:	f107 031b 	add.w	r3, r7, #27
    7f50:	4619      	mov	r1, r3
    7f52:	68f8      	ldr	r0, [r7, #12]
    7f54:	f7fb fc2a 	bl	37ac <bb_getUInt8>
    7f58:	61f8      	str	r0, [r7, #28]
    7f5a:	69fb      	ldr	r3, [r7, #28]
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d001      	beq.n	7f64 <dlms_getHDLCAddress+0x88>
        {
            return ret;
    7f60:	69fb      	ldr	r3, [r7, #28]
    7f62:	e04b      	b.n	7ffc <dlms_getHDLCAddress+0x120>
        }
        *address = ((ch & 0xFE) >> 1);
    7f64:	7efb      	ldrb	r3, [r7, #27]
    7f66:	085b      	lsrs	r3, r3, #1
    7f68:	b2db      	uxtb	r3, r3
    7f6a:	461a      	mov	r2, r3
    7f6c:	68bb      	ldr	r3, [r7, #8]
    7f6e:	601a      	str	r2, [r3, #0]
    7f70:	e043      	b.n	7ffa <dlms_getHDLCAddress+0x11e>
    }
    else if (size == 2)
    7f72:	6a3b      	ldr	r3, [r7, #32]
    7f74:	2b02      	cmp	r3, #2
    7f76:	d118      	bne.n	7faa <dlms_getHDLCAddress+0xce>
    {
        if ((ret = bb_getUInt16(buff, &s)) != 0)
    7f78:	f107 0318 	add.w	r3, r7, #24
    7f7c:	4619      	mov	r1, r3
    7f7e:	68f8      	ldr	r0, [r7, #12]
    7f80:	f7fb fc76 	bl	3870 <bb_getUInt16>
    7f84:	61f8      	str	r0, [r7, #28]
    7f86:	69fb      	ldr	r3, [r7, #28]
    7f88:	2b00      	cmp	r3, #0
    7f8a:	d001      	beq.n	7f90 <dlms_getHDLCAddress+0xb4>
        {
            return ret;
    7f8c:	69fb      	ldr	r3, [r7, #28]
    7f8e:	e035      	b.n	7ffc <dlms_getHDLCAddress+0x120>
        }
        *address = ((s & 0xFE) >> 1) | ((s & 0xFE00) >> 2);
    7f90:	8b3b      	ldrh	r3, [r7, #24]
    7f92:	105b      	asrs	r3, r3, #1
    7f94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    7f98:	8b3b      	ldrh	r3, [r7, #24]
    7f9a:	109b      	asrs	r3, r3, #2
    7f9c:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
    7fa0:	4313      	orrs	r3, r2
    7fa2:	461a      	mov	r2, r3
    7fa4:	68bb      	ldr	r3, [r7, #8]
    7fa6:	601a      	str	r2, [r3, #0]
    7fa8:	e027      	b.n	7ffa <dlms_getHDLCAddress+0x11e>
    }
    else if (size == 4)
    7faa:	6a3b      	ldr	r3, [r7, #32]
    7fac:	2b04      	cmp	r3, #4
    7fae:	d121      	bne.n	7ff4 <dlms_getHDLCAddress+0x118>
    {
        if ((ret = bb_getUInt32(buff, &l)) != 0)
    7fb0:	f107 0314 	add.w	r3, r7, #20
    7fb4:	4619      	mov	r1, r3
    7fb6:	68f8      	ldr	r0, [r7, #12]
    7fb8:	f7fb fc8a 	bl	38d0 <bb_getUInt32>
    7fbc:	61f8      	str	r0, [r7, #28]
    7fbe:	69fb      	ldr	r3, [r7, #28]
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d001      	beq.n	7fc8 <dlms_getHDLCAddress+0xec>
        {
            return ret;
    7fc4:	69fb      	ldr	r3, [r7, #28]
    7fc6:	e019      	b.n	7ffc <dlms_getHDLCAddress+0x120>
        }
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    7fc8:	697b      	ldr	r3, [r7, #20]
    7fca:	085b      	lsrs	r3, r3, #1
    7fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    7fd0:	697b      	ldr	r3, [r7, #20]
    7fd2:	089b      	lsrs	r3, r3, #2
    7fd4:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
    7fd8:	431a      	orrs	r2, r3
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    7fda:	697b      	ldr	r3, [r7, #20]
    7fdc:	08db      	lsrs	r3, r3, #3
    7fde:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
    7fe2:	431a      	orrs	r2, r3
    7fe4:	697b      	ldr	r3, [r7, #20]
    7fe6:	091b      	lsrs	r3, r3, #4
    7fe8:	f003 637e 	and.w	r3, r3, #266338304	; 0xfe00000
    7fec:	431a      	orrs	r2, r3
    {
        if ((ret = bb_getUInt32(buff, &l)) != 0)
        {
            return ret;
        }
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    7fee:	68bb      	ldr	r3, [r7, #8]
    7ff0:	601a      	str	r2, [r3, #0]
    7ff2:	e002      	b.n	7ffa <dlms_getHDLCAddress+0x11e>
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    7ff4:	f44f 7381 	mov.w	r3, #258	; 0x102
    7ff8:	e000      	b.n	7ffc <dlms_getHDLCAddress+0x120>
    }
    return DLMS_ERROR_CODE_OK;
    7ffa:	2300      	movs	r3, #0
}
    7ffc:	4618      	mov	r0, r3
    7ffe:	3728      	adds	r7, #40	; 0x28
    8000:	46bd      	mov	sp, r7
    8002:	bd80      	pop	{r7, pc}

00008004 <dlms_checkHdlcAddress>:
int dlms_checkHdlcAddress(
    unsigned char server,
    dlmsSettings* settings,
    gxByteBuffer* reply,
    unsigned short index)
{
    8004:	b580      	push	{r7, lr}
    8006:	b088      	sub	sp, #32
    8008:	af00      	add	r7, sp, #0
    800a:	60b9      	str	r1, [r7, #8]
    800c:	607a      	str	r2, [r7, #4]
    800e:	461a      	mov	r2, r3
    8010:	4603      	mov	r3, r0
    8012:	73fb      	strb	r3, [r7, #15]
    8014:	4613      	mov	r3, r2
    8016:	81bb      	strh	r3, [r7, #12]
    unsigned char ch;
    int ret;
    unsigned long source, target;
    // Get destination and source addresses.
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
    8018:	f107 0310 	add.w	r3, r7, #16
    801c:	2200      	movs	r2, #0
    801e:	4619      	mov	r1, r3
    8020:	6878      	ldr	r0, [r7, #4]
    8022:	f7ff ff5b 	bl	7edc <dlms_getHDLCAddress>
    8026:	61f8      	str	r0, [r7, #28]
    8028:	69fb      	ldr	r3, [r7, #28]
    802a:	2b00      	cmp	r3, #0
    802c:	d001      	beq.n	8032 <dlms_checkHdlcAddress+0x2e>
    {
        return ret;
    802e:	69fb      	ldr	r3, [r7, #28]
    8030:	e07c      	b.n	812c <dlms_checkHdlcAddress+0x128>
    }
    if ((ret = dlms_getHDLCAddress(reply, &source, 1)) != 0)
    8032:	f107 0314 	add.w	r3, r7, #20
    8036:	2201      	movs	r2, #1
    8038:	4619      	mov	r1, r3
    803a:	6878      	ldr	r0, [r7, #4]
    803c:	f7ff ff4e 	bl	7edc <dlms_getHDLCAddress>
    8040:	61f8      	str	r0, [r7, #28]
    8042:	69fb      	ldr	r3, [r7, #28]
    8044:	2b00      	cmp	r3, #0
    8046:	d001      	beq.n	804c <dlms_checkHdlcAddress+0x48>
    {
        return ret;
    8048:	69fb      	ldr	r3, [r7, #28]
    804a:	e06f      	b.n	812c <dlms_checkHdlcAddress+0x128>
    }
    if (server)
    804c:	7bfb      	ldrb	r3, [r7, #15]
    804e:	2b00      	cmp	r3, #0
    8050:	d048      	beq.n	80e4 <dlms_checkHdlcAddress+0xe0>
    {
        // Check that server addresses match.
        if (settings->serverAddress != 0 && settings->serverAddress != (int)target)
    8052:	68bb      	ldr	r3, [r7, #8]
    8054:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8056:	2b00      	cmp	r3, #0
    8058:	d017      	beq.n	808a <dlms_checkHdlcAddress+0x86>
    805a:	68bb      	ldr	r3, [r7, #8]
    805c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    805e:	461a      	mov	r2, r3
    8060:	693b      	ldr	r3, [r7, #16]
    8062:	429a      	cmp	r2, r3
    8064:	d011      	beq.n	808a <dlms_checkHdlcAddress+0x86>
        {
            // Get frame command.
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	891b      	ldrh	r3, [r3, #8]
    806a:	4619      	mov	r1, r3
    806c:	f107 031b 	add.w	r3, r7, #27
    8070:	461a      	mov	r2, r3
    8072:	6878      	ldr	r0, [r7, #4]
    8074:	f7fb fbe0 	bl	3838 <bb_getUInt8ByIndex>
    8078:	4603      	mov	r3, r0
    807a:	2b00      	cmp	r3, #0
    807c:	d002      	beq.n	8084 <dlms_checkHdlcAddress+0x80>
            {
                return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    807e:	f44f 7384 	mov.w	r3, #264	; 0x108
    8082:	e053      	b.n	812c <dlms_checkHdlcAddress+0x128>
            }
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    8084:	f44f 7384 	mov.w	r3, #264	; 0x108
    8088:	e050      	b.n	812c <dlms_checkHdlcAddress+0x128>
        }
        else
        {
            settings->serverAddress = (unsigned short)target;
    808a:	693b      	ldr	r3, [r7, #16]
    808c:	b29a      	uxth	r2, r3
    808e:	68bb      	ldr	r3, [r7, #8]
    8090:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        // Check that client addresses match.
        if (settings->clientAddress != 0 && settings->clientAddress != (int)source)
    8092:	68bb      	ldr	r3, [r7, #8]
    8094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8096:	2b00      	cmp	r3, #0
    8098:	d01f      	beq.n	80da <dlms_checkHdlcAddress+0xd6>
    809a:	68bb      	ldr	r3, [r7, #8]
    809c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    809e:	461a      	mov	r2, r3
    80a0:	697b      	ldr	r3, [r7, #20]
    80a2:	429a      	cmp	r2, r3
    80a4:	d019      	beq.n	80da <dlms_checkHdlcAddress+0xd6>
        {
            // Get frame command.
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    80a6:	687b      	ldr	r3, [r7, #4]
    80a8:	891b      	ldrh	r3, [r3, #8]
    80aa:	4619      	mov	r1, r3
    80ac:	f107 031b 	add.w	r3, r7, #27
    80b0:	461a      	mov	r2, r3
    80b2:	6878      	ldr	r0, [r7, #4]
    80b4:	f7fb fbc0 	bl	3838 <bb_getUInt8ByIndex>
    80b8:	4603      	mov	r3, r0
    80ba:	2b00      	cmp	r3, #0
    80bc:	d002      	beq.n	80c4 <dlms_checkHdlcAddress+0xc0>
            {
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    80be:	f240 1307 	movw	r3, #263	; 0x107
    80c2:	e033      	b.n	812c <dlms_checkHdlcAddress+0x128>
            }
            //If SNRM and client has not call disconnect and changes client ID.
            if (ch == DLMS_COMMAND_SNRM)
    80c4:	7efb      	ldrb	r3, [r7, #27]
    80c6:	2b93      	cmp	r3, #147	; 0x93
    80c8:	d104      	bne.n	80d4 <dlms_checkHdlcAddress+0xd0>
            {
                settings->clientAddress = (unsigned short)source;
    80ca:	697b      	ldr	r3, [r7, #20]
    80cc:	b29a      	uxth	r2, r3
    80ce:	68bb      	ldr	r3, [r7, #8]
    80d0:	865a      	strh	r2, [r3, #50]	; 0x32
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
            {
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
            }
            //If SNRM and client has not call disconnect and changes client ID.
            if (ch == DLMS_COMMAND_SNRM)
    80d2:	e02a      	b.n	812a <dlms_checkHdlcAddress+0x126>
            {
                settings->clientAddress = (unsigned short)source;
            }
            else
            {
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    80d4:	f240 1307 	movw	r3, #263	; 0x107
    80d8:	e028      	b.n	812c <dlms_checkHdlcAddress+0x128>
            }
        }
        else
        {
            settings->clientAddress = (unsigned short)source;
    80da:	697b      	ldr	r3, [r7, #20]
    80dc:	b29a      	uxth	r2, r3
    80de:	68bb      	ldr	r3, [r7, #8]
    80e0:	865a      	strh	r2, [r3, #50]	; 0x32
    80e2:	e022      	b.n	812a <dlms_checkHdlcAddress+0x126>
        }
    }
    else
    {
        // Check that client addresses match.
        if (settings->clientAddress != (int)target)
    80e4:	68bb      	ldr	r3, [r7, #8]
    80e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    80e8:	461a      	mov	r2, r3
    80ea:	693b      	ldr	r3, [r7, #16]
    80ec:	429a      	cmp	r2, r3
    80ee:	d013      	beq.n	8118 <dlms_checkHdlcAddress+0x114>
        {
            // If echo.
            if (settings->clientAddress == (int)source && settings->serverAddress == (int)target)
    80f0:	68bb      	ldr	r3, [r7, #8]
    80f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    80f4:	461a      	mov	r2, r3
    80f6:	697b      	ldr	r3, [r7, #20]
    80f8:	429a      	cmp	r2, r3
    80fa:	d10a      	bne.n	8112 <dlms_checkHdlcAddress+0x10e>
    80fc:	68bb      	ldr	r3, [r7, #8]
    80fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8100:	461a      	mov	r2, r3
    8102:	693b      	ldr	r3, [r7, #16]
    8104:	429a      	cmp	r2, r3
    8106:	d104      	bne.n	8112 <dlms_checkHdlcAddress+0x10e>
            {
                reply->position = index + 1;
    8108:	89bb      	ldrh	r3, [r7, #12]
    810a:	3301      	adds	r3, #1
    810c:	b29a      	uxth	r2, r3
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	811a      	strh	r2, [r3, #8]
            }
            return DLMS_ERROR_CODE_FALSE;
    8112:	f04f 33ff 	mov.w	r3, #4294967295
    8116:	e009      	b.n	812c <dlms_checkHdlcAddress+0x128>
        }
        // Check that server addresses match.
        if (settings->serverAddress != (int)source)
    8118:	68bb      	ldr	r3, [r7, #8]
    811a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    811c:	461a      	mov	r2, r3
    811e:	697b      	ldr	r3, [r7, #20]
    8120:	429a      	cmp	r2, r3
    8122:	d002      	beq.n	812a <dlms_checkHdlcAddress+0x126>
        {
            return DLMS_ERROR_CODE_FALSE;
    8124:	f04f 33ff 	mov.w	r3, #4294967295
    8128:	e000      	b.n	812c <dlms_checkHdlcAddress+0x128>
        }
    }
    return DLMS_ERROR_CODE_OK;
    812a:	2300      	movs	r3, #0
}
    812c:	4618      	mov	r0, r3
    812e:	3720      	adds	r7, #32
    8130:	46bd      	mov	sp, r7
    8132:	bd80      	pop	{r7, pc}

00008134 <dlms_getAddress>:

int dlms_getAddress(long value, unsigned long* address, int* size)
{
    8134:	b480      	push	{r7}
    8136:	b085      	sub	sp, #20
    8138:	af00      	add	r7, sp, #0
    813a:	60f8      	str	r0, [r7, #12]
    813c:	60b9      	str	r1, [r7, #8]
    813e:	607a      	str	r2, [r7, #4]
    if (value < 0x80)
    8140:	68fb      	ldr	r3, [r7, #12]
    8142:	2b7f      	cmp	r3, #127	; 0x7f
    8144:	dc0e      	bgt.n	8164 <dlms_getAddress+0x30>
    {
        *address = (unsigned char)(value << 1 | 1);
    8146:	68fb      	ldr	r3, [r7, #12]
    8148:	005b      	lsls	r3, r3, #1
    814a:	b25b      	sxtb	r3, r3
    814c:	f043 0301 	orr.w	r3, r3, #1
    8150:	b25b      	sxtb	r3, r3
    8152:	b2db      	uxtb	r3, r3
    8154:	461a      	mov	r2, r3
    8156:	68bb      	ldr	r3, [r7, #8]
    8158:	601a      	str	r2, [r3, #0]
        *size = 1;
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	2201      	movs	r2, #1
    815e:	601a      	str	r2, [r3, #0]
        return 0;
    8160:	2300      	movs	r3, #0
    8162:	e040      	b.n	81e6 <dlms_getAddress+0xb2>
    }
    else if (value < 0x4000)
    8164:	68fb      	ldr	r3, [r7, #12]
    8166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    816a:	da19      	bge.n	81a0 <dlms_getAddress+0x6c>
    {
        *address = (unsigned short)((value & 0x3F80) << 2 | (value & 0x7F) << 1 | 1);
    816c:	68fb      	ldr	r3, [r7, #12]
    816e:	009b      	lsls	r3, r3, #2
    8170:	b21b      	sxth	r3, r3
    8172:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    8176:	f023 0301 	bic.w	r3, r3, #1
    817a:	b21a      	sxth	r2, r3
    817c:	68fb      	ldr	r3, [r7, #12]
    817e:	005b      	lsls	r3, r3, #1
    8180:	b21b      	sxth	r3, r3
    8182:	b2db      	uxtb	r3, r3
    8184:	b21b      	sxth	r3, r3
    8186:	4313      	orrs	r3, r2
    8188:	b21b      	sxth	r3, r3
    818a:	f043 0301 	orr.w	r3, r3, #1
    818e:	b21b      	sxth	r3, r3
    8190:	b29b      	uxth	r3, r3
    8192:	461a      	mov	r2, r3
    8194:	68bb      	ldr	r3, [r7, #8]
    8196:	601a      	str	r2, [r3, #0]
        *size = 2;
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	2202      	movs	r2, #2
    819c:	601a      	str	r2, [r3, #0]
    819e:	e021      	b.n	81e4 <dlms_getAddress+0xb0>
    }
    else if (value < 0x10000000)
    81a0:	68fb      	ldr	r3, [r7, #12]
    81a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    81a6:	da1a      	bge.n	81de <dlms_getAddress+0xaa>
    {
        *address = (unsigned long)((value & 0xFE00000) << 4 | (value & 0x1FC000) << 3
    81a8:	68fb      	ldr	r3, [r7, #12]
    81aa:	011b      	lsls	r3, r3, #4
    81ac:	f003 427e 	and.w	r2, r3, #4261412864	; 0xfe000000
    81b0:	68fb      	ldr	r3, [r7, #12]
    81b2:	00db      	lsls	r3, r3, #3
    81b4:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
    81b8:	431a      	orrs	r2, r3
            | (value & 0x3F80) << 2 | (value & 0x7F) << 1 | 1);
    81ba:	68fb      	ldr	r3, [r7, #12]
    81bc:	009b      	lsls	r3, r3, #2
    81be:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    81c2:	431a      	orrs	r2, r3
    81c4:	68fb      	ldr	r3, [r7, #12]
    81c6:	005b      	lsls	r3, r3, #1
    81c8:	b2db      	uxtb	r3, r3
    81ca:	4313      	orrs	r3, r2
    81cc:	f043 0301 	orr.w	r3, r3, #1
        *address = (unsigned short)((value & 0x3F80) << 2 | (value & 0x7F) << 1 | 1);
        *size = 2;
    }
    else if (value < 0x10000000)
    {
        *address = (unsigned long)((value & 0xFE00000) << 4 | (value & 0x1FC000) << 3
    81d0:	461a      	mov	r2, r3
    81d2:	68bb      	ldr	r3, [r7, #8]
    81d4:	601a      	str	r2, [r3, #0]
            | (value & 0x3F80) << 2 | (value & 0x7F) << 1 | 1);
        *size = 4;
    81d6:	687b      	ldr	r3, [r7, #4]
    81d8:	2204      	movs	r2, #4
    81da:	601a      	str	r2, [r3, #0]
    81dc:	e002      	b.n	81e4 <dlms_getAddress+0xb0>
    }
    else
    {
        //Invalid address
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    81de:	f44f 7381 	mov.w	r3, #258	; 0x102
    81e2:	e000      	b.n	81e6 <dlms_getAddress+0xb2>
    }
    return DLMS_ERROR_CODE_OK;
    81e4:	2300      	movs	r3, #0
}
    81e6:	4618      	mov	r0, r3
    81e8:	3714      	adds	r7, #20
    81ea:	46bd      	mov	sp, r7
    81ec:	bc80      	pop	{r7}
    81ee:	4770      	bx	lr

000081f0 <dlms_getAddressBytes>:
* Get HDLC address as bytes.
*/
int dlms_getAddressBytes(
    unsigned long value,
    gxByteBuffer* bytes)
{
    81f0:	b580      	push	{r7, lr}
    81f2:	b086      	sub	sp, #24
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
    81f8:	6039      	str	r1, [r7, #0]
    int ret, size;
    unsigned long address;
    if ((ret = dlms_getAddress(value, &address, &size)) != 0)
    81fa:	687b      	ldr	r3, [r7, #4]
    81fc:	f107 0210 	add.w	r2, r7, #16
    8200:	f107 010c 	add.w	r1, r7, #12
    8204:	4618      	mov	r0, r3
    8206:	f7ff ff95 	bl	8134 <dlms_getAddress>
    820a:	6178      	str	r0, [r7, #20]
    820c:	697b      	ldr	r3, [r7, #20]
    820e:	2b00      	cmp	r3, #0
    8210:	d001      	beq.n	8216 <dlms_getAddressBytes+0x26>
    {
        return ret;
    8212:	697b      	ldr	r3, [r7, #20]
    8214:	e020      	b.n	8258 <dlms_getAddressBytes+0x68>
    }
    if (size == 1)
    8216:	693b      	ldr	r3, [r7, #16]
    8218:	2b01      	cmp	r3, #1
    821a:	d106      	bne.n	822a <dlms_getAddressBytes+0x3a>
    {
        bb_setUInt8(bytes, (unsigned char)address);
    821c:	68fb      	ldr	r3, [r7, #12]
    821e:	b2db      	uxtb	r3, r3
    8220:	4619      	mov	r1, r3
    8222:	6838      	ldr	r0, [r7, #0]
    8224:	f7fa fdf6 	bl	2e14 <bb_setUInt8>
    8228:	e015      	b.n	8256 <dlms_getAddressBytes+0x66>
    }
    else if (size == 2)
    822a:	693b      	ldr	r3, [r7, #16]
    822c:	2b02      	cmp	r3, #2
    822e:	d106      	bne.n	823e <dlms_getAddressBytes+0x4e>
    {
        bb_setUInt16(bytes, (unsigned short)address);
    8230:	68fb      	ldr	r3, [r7, #12]
    8232:	b29b      	uxth	r3, r3
    8234:	4619      	mov	r1, r3
    8236:	6838      	ldr	r0, [r7, #0]
    8238:	f7fa fe7e 	bl	2f38 <bb_setUInt16>
    823c:	e00b      	b.n	8256 <dlms_getAddressBytes+0x66>
    }
    else if (size == 4)
    823e:	693b      	ldr	r3, [r7, #16]
    8240:	2b04      	cmp	r3, #4
    8242:	d105      	bne.n	8250 <dlms_getAddressBytes+0x60>
    {
        bb_setUInt32(bytes, address);
    8244:	68fb      	ldr	r3, [r7, #12]
    8246:	4619      	mov	r1, r3
    8248:	6838      	ldr	r0, [r7, #0]
    824a:	f7fa fed7 	bl	2ffc <bb_setUInt32>
    824e:	e002      	b.n	8256 <dlms_getAddressBytes+0x66>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    8250:	f44f 7381 	mov.w	r3, #258	; 0x102
    8254:	e000      	b.n	8258 <dlms_getAddressBytes+0x68>
    }
    return DLMS_ERROR_CODE_OK;
    8256:	2300      	movs	r3, #0
}
    8258:	4618      	mov	r0, r3
    825a:	3718      	adds	r7, #24
    825c:	46bd      	mov	sp, r7
    825e:	bd80      	pop	{r7, pc}

00008260 <dlms_getHdlcFrame>:
int dlms_getHdlcFrame(
    dlmsSettings* settings,
    int frame,
    gxByteBuffer* data,
    gxByteBuffer* reply)
{
    8260:	b580      	push	{r7, lr}
    8262:	b08e      	sub	sp, #56	; 0x38
    8264:	af00      	add	r7, sp, #0
    8266:	60f8      	str	r0, [r7, #12]
    8268:	60b9      	str	r1, [r7, #8]
    826a:	607a      	str	r2, [r7, #4]
    826c:	603b      	str	r3, [r7, #0]
    unsigned short crc;
    int ret;
    unsigned short frameSize, len;
    gxByteBuffer primaryAddress, secondaryAddress;
    bb_clear(reply);
    826e:	6838      	ldr	r0, [r7, #0]
    8270:	f7fb fa78 	bl	3764 <bb_clear>
    bb_init(&primaryAddress);
    8274:	f107 0320 	add.w	r3, r7, #32
    8278:	4618      	mov	r0, r3
    827a:	f7fa fd35 	bl	2ce8 <bb_init>
    bb_init(&secondaryAddress);
    827e:	f107 0314 	add.w	r3, r7, #20
    8282:	4618      	mov	r0, r3
    8284:	f7fa fd30 	bl	2ce8 <bb_init>
    if (settings->server)
    8288:	68fb      	ldr	r3, [r7, #12]
    828a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    828e:	2b00      	cmp	r3, #0
    8290:	d023      	beq.n	82da <dlms_getHdlcFrame+0x7a>
    {
        bb_capacity(&primaryAddress, 1);
    8292:	f107 0320 	add.w	r3, r7, #32
    8296:	2101      	movs	r1, #1
    8298:	4618      	mov	r0, r3
    829a:	f7fa fd3b 	bl	2d14 <bb_capacity>
        bb_capacity(&secondaryAddress, 4);
    829e:	f107 0314 	add.w	r3, r7, #20
    82a2:	2104      	movs	r1, #4
    82a4:	4618      	mov	r0, r3
    82a6:	f7fa fd35 	bl	2d14 <bb_capacity>
        if ((ret = dlms_getAddressBytes(settings->clientAddress, &primaryAddress)) == 0)
    82aa:	68fb      	ldr	r3, [r7, #12]
    82ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    82ae:	461a      	mov	r2, r3
    82b0:	f107 0320 	add.w	r3, r7, #32
    82b4:	4619      	mov	r1, r3
    82b6:	4610      	mov	r0, r2
    82b8:	f7ff ff9a 	bl	81f0 <dlms_getAddressBytes>
    82bc:	6378      	str	r0, [r7, #52]	; 0x34
    82be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82c0:	2b00      	cmp	r3, #0
    82c2:	d12d      	bne.n	8320 <dlms_getHdlcFrame+0xc0>
        {
            ret = dlms_getAddressBytes(settings->serverAddress, &secondaryAddress);
    82c4:	68fb      	ldr	r3, [r7, #12]
    82c6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    82c8:	461a      	mov	r2, r3
    82ca:	f107 0314 	add.w	r3, r7, #20
    82ce:	4619      	mov	r1, r3
    82d0:	4610      	mov	r0, r2
    82d2:	f7ff ff8d 	bl	81f0 <dlms_getAddressBytes>
    82d6:	6378      	str	r0, [r7, #52]	; 0x34
    82d8:	e022      	b.n	8320 <dlms_getHdlcFrame+0xc0>
        }
    }
    else
    {
        bb_capacity(&primaryAddress, 4);
    82da:	f107 0320 	add.w	r3, r7, #32
    82de:	2104      	movs	r1, #4
    82e0:	4618      	mov	r0, r3
    82e2:	f7fa fd17 	bl	2d14 <bb_capacity>
        bb_capacity(&secondaryAddress, 1);
    82e6:	f107 0314 	add.w	r3, r7, #20
    82ea:	2101      	movs	r1, #1
    82ec:	4618      	mov	r0, r3
    82ee:	f7fa fd11 	bl	2d14 <bb_capacity>
        if ((ret = dlms_getAddressBytes(settings->serverAddress, &primaryAddress)) == 0)
    82f2:	68fb      	ldr	r3, [r7, #12]
    82f4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    82f6:	461a      	mov	r2, r3
    82f8:	f107 0320 	add.w	r3, r7, #32
    82fc:	4619      	mov	r1, r3
    82fe:	4610      	mov	r0, r2
    8300:	f7ff ff76 	bl	81f0 <dlms_getAddressBytes>
    8304:	6378      	str	r0, [r7, #52]	; 0x34
    8306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8308:	2b00      	cmp	r3, #0
    830a:	d109      	bne.n	8320 <dlms_getHdlcFrame+0xc0>
        {
            ret = dlms_getAddressBytes(settings->clientAddress, &secondaryAddress);
    830c:	68fb      	ldr	r3, [r7, #12]
    830e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8310:	461a      	mov	r2, r3
    8312:	f107 0314 	add.w	r3, r7, #20
    8316:	4619      	mov	r1, r3
    8318:	4610      	mov	r0, r2
    831a:	f7ff ff69 	bl	81f0 <dlms_getAddressBytes>
    831e:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    // Add BOP
    if (ret == 0 && (ret = bb_capacity(reply, 8)) == 0)
    8320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8322:	2b00      	cmp	r3, #0
    8324:	d10d      	bne.n	8342 <dlms_getHdlcFrame+0xe2>
    8326:	2108      	movs	r1, #8
    8328:	6838      	ldr	r0, [r7, #0]
    832a:	f7fa fcf3 	bl	2d14 <bb_capacity>
    832e:	6378      	str	r0, [r7, #52]	; 0x34
    8330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8332:	2b00      	cmp	r3, #0
    8334:	d105      	bne.n	8342 <dlms_getHdlcFrame+0xe2>
    {
        ret = bb_setUInt8(reply, HDLC_FRAME_START_END);
    8336:	237e      	movs	r3, #126	; 0x7e
    8338:	4619      	mov	r1, r3
    833a:	6838      	ldr	r0, [r7, #0]
    833c:	f7fa fd6a 	bl	2e14 <bb_setUInt8>
    8340:	6378      	str	r0, [r7, #52]	; 0x34
    }

    frameSize = settings->maxInfoTX;
    8342:	68fb      	ldr	r3, [r7, #12]
    8344:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    8348:	867b      	strh	r3, [r7, #50]	; 0x32
    if (data != NULL && data->position == 0)
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	2b00      	cmp	r3, #0
    834e:	d006      	beq.n	835e <dlms_getHdlcFrame+0xfe>
    8350:	687b      	ldr	r3, [r7, #4]
    8352:	891b      	ldrh	r3, [r3, #8]
    8354:	2b00      	cmp	r3, #0
    8356:	d102      	bne.n	835e <dlms_getHdlcFrame+0xfe>
    {
        frameSize -= 3;
    8358:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    835a:	3b03      	subs	r3, #3
    835c:	867b      	strh	r3, [r7, #50]	; 0x32
    }
    // If no data
    if (ret == 0 && (data == NULL || data->size == 0))
    835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8360:	2b00      	cmp	r3, #0
    8362:	d10e      	bne.n	8382 <dlms_getHdlcFrame+0x122>
    8364:	687b      	ldr	r3, [r7, #4]
    8366:	2b00      	cmp	r3, #0
    8368:	d003      	beq.n	8372 <dlms_getHdlcFrame+0x112>
    836a:	687b      	ldr	r3, [r7, #4]
    836c:	88db      	ldrh	r3, [r3, #6]
    836e:	2b00      	cmp	r3, #0
    8370:	d107      	bne.n	8382 <dlms_getHdlcFrame+0x122>
    {
        len = 0;
    8372:	2300      	movs	r3, #0
    8374:	863b      	strh	r3, [r7, #48]	; 0x30
        ret = bb_setUInt8(reply, 0xA0);
    8376:	21a0      	movs	r1, #160	; 0xa0
    8378:	6838      	ldr	r0, [r7, #0]
    837a:	f7fa fd4b 	bl	2e14 <bb_setUInt8>
    837e:	6378      	str	r0, [r7, #52]	; 0x34
    8380:	e030      	b.n	83e4 <dlms_getHdlcFrame+0x184>
    }
    else if (ret == 0 && data->size - data->position <= frameSize)
    8382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8384:	2b00      	cmp	r3, #0
    8386:	d123      	bne.n	83d0 <dlms_getHdlcFrame+0x170>
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	88db      	ldrh	r3, [r3, #6]
    838c:	461a      	mov	r2, r3
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	891b      	ldrh	r3, [r3, #8]
    8392:	1ad2      	subs	r2, r2, r3
    8394:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    8396:	429a      	cmp	r2, r3
    8398:	dc1a      	bgt.n	83d0 <dlms_getHdlcFrame+0x170>
    {
        len = (unsigned short)(data->size - data->position);
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	88da      	ldrh	r2, [r3, #6]
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	891b      	ldrh	r3, [r3, #8]
    83a2:	1ad3      	subs	r3, r2, r3
    83a4:	863b      	strh	r3, [r7, #48]	; 0x30
        // Is last packet.
        ret = bb_setUInt8(reply, (unsigned char)(0xA0 | (((7 + primaryAddress.size + secondaryAddress.size + len) >> 8) & 0x7)));
    83a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    83a8:	3307      	adds	r3, #7
    83aa:	8b7a      	ldrh	r2, [r7, #26]
    83ac:	441a      	add	r2, r3
    83ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    83b0:	4413      	add	r3, r2
    83b2:	121b      	asrs	r3, r3, #8
    83b4:	b25b      	sxtb	r3, r3
    83b6:	f003 0307 	and.w	r3, r3, #7
    83ba:	b25b      	sxtb	r3, r3
    83bc:	f063 035f 	orn	r3, r3, #95	; 0x5f
    83c0:	b25b      	sxtb	r3, r3
    83c2:	b2db      	uxtb	r3, r3
    83c4:	4619      	mov	r1, r3
    83c6:	6838      	ldr	r0, [r7, #0]
    83c8:	f7fa fd24 	bl	2e14 <bb_setUInt8>
    83cc:	6378      	str	r0, [r7, #52]	; 0x34
    83ce:	e009      	b.n	83e4 <dlms_getHdlcFrame+0x184>
    }
    else if (ret == 0)
    83d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    83d2:	2b00      	cmp	r3, #0
    83d4:	d106      	bne.n	83e4 <dlms_getHdlcFrame+0x184>
    {
        // More data to left.
        ret = bb_setUInt8(reply, 0xA8);
    83d6:	21a8      	movs	r1, #168	; 0xa8
    83d8:	6838      	ldr	r0, [r7, #0]
    83da:	f7fa fd1b 	bl	2e14 <bb_setUInt8>
    83de:	6378      	str	r0, [r7, #52]	; 0x34
        len = frameSize;
    83e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    83e2:	863b      	strh	r3, [r7, #48]	; 0x30
    }
    // Frame len.
    if (ret == 0 && len == 0)
    83e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    83e6:	2b00      	cmp	r3, #0
    83e8:	d114      	bne.n	8414 <dlms_getHdlcFrame+0x1b4>
    83ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    83ec:	2b00      	cmp	r3, #0
    83ee:	d111      	bne.n	8414 <dlms_getHdlcFrame+0x1b4>
    {
        ret = bb_setUInt8(reply, (unsigned char)(5 + primaryAddress.size + secondaryAddress.size + len));
    83f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    83f2:	b2da      	uxtb	r2, r3
    83f4:	8b7b      	ldrh	r3, [r7, #26]
    83f6:	b2db      	uxtb	r3, r3
    83f8:	4413      	add	r3, r2
    83fa:	b2da      	uxtb	r2, r3
    83fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    83fe:	b2db      	uxtb	r3, r3
    8400:	4413      	add	r3, r2
    8402:	b2db      	uxtb	r3, r3
    8404:	3305      	adds	r3, #5
    8406:	b2db      	uxtb	r3, r3
    8408:	4619      	mov	r1, r3
    840a:	6838      	ldr	r0, [r7, #0]
    840c:	f7fa fd02 	bl	2e14 <bb_setUInt8>
    8410:	6378      	str	r0, [r7, #52]	; 0x34
    8412:	e01e      	b.n	8452 <dlms_getHdlcFrame+0x1f2>
    }
    else if (ret == 0)
    8414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8416:	2b00      	cmp	r3, #0
    8418:	d11b      	bne.n	8452 <dlms_getHdlcFrame+0x1f2>
    {
        if ((ret = bb_capacity(reply, (unsigned short)(11 + len))) == 0)
    841a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    841c:	330b      	adds	r3, #11
    841e:	b29b      	uxth	r3, r3
    8420:	4619      	mov	r1, r3
    8422:	6838      	ldr	r0, [r7, #0]
    8424:	f7fa fc76 	bl	2d14 <bb_capacity>
    8428:	6378      	str	r0, [r7, #52]	; 0x34
    842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    842c:	2b00      	cmp	r3, #0
    842e:	d110      	bne.n	8452 <dlms_getHdlcFrame+0x1f2>
        {
            ret = bb_setUInt8(reply, (unsigned char)(7 + primaryAddress.size + secondaryAddress.size + len));
    8430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8432:	b2da      	uxtb	r2, r3
    8434:	8b7b      	ldrh	r3, [r7, #26]
    8436:	b2db      	uxtb	r3, r3
    8438:	4413      	add	r3, r2
    843a:	b2da      	uxtb	r2, r3
    843c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    843e:	b2db      	uxtb	r3, r3
    8440:	4413      	add	r3, r2
    8442:	b2db      	uxtb	r3, r3
    8444:	3307      	adds	r3, #7
    8446:	b2db      	uxtb	r3, r3
    8448:	4619      	mov	r1, r3
    844a:	6838      	ldr	r0, [r7, #0]
    844c:	f7fa fce2 	bl	2e14 <bb_setUInt8>
    8450:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }
    // Add primary address.
    if (ret == 0 && (ret = bb_set2(reply, &primaryAddress, 0, primaryAddress.size)) == 0)
    8452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8454:	2b00      	cmp	r3, #0
    8456:	d112      	bne.n	847e <dlms_getHdlcFrame+0x21e>
    8458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    845a:	f107 0120 	add.w	r1, r7, #32
    845e:	2200      	movs	r2, #0
    8460:	6838      	ldr	r0, [r7, #0]
    8462:	f7fb f8dd 	bl	3620 <bb_set2>
    8466:	6378      	str	r0, [r7, #52]	; 0x34
    8468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    846a:	2b00      	cmp	r3, #0
    846c:	d107      	bne.n	847e <dlms_getHdlcFrame+0x21e>
    {
        // Add secondary address.
        ret = bb_set2(reply, &secondaryAddress, 0, secondaryAddress.size);
    846e:	8b7b      	ldrh	r3, [r7, #26]
    8470:	f107 0114 	add.w	r1, r7, #20
    8474:	2200      	movs	r2, #0
    8476:	6838      	ldr	r0, [r7, #0]
    8478:	f7fb f8d2 	bl	3620 <bb_set2>
    847c:	6378      	str	r0, [r7, #52]	; 0x34
    }

    // Add frame ID.
    if (ret == 0 && frame == 0)
    847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8480:	2b00      	cmp	r3, #0
    8482:	d10d      	bne.n	84a0 <dlms_getHdlcFrame+0x240>
    8484:	68bb      	ldr	r3, [r7, #8]
    8486:	2b00      	cmp	r3, #0
    8488:	d10a      	bne.n	84a0 <dlms_getHdlcFrame+0x240>
    {
        ret = bb_setUInt8(reply, getNextSend(settings, 1));
    848a:	2101      	movs	r1, #1
    848c:	68f8      	ldr	r0, [r7, #12]
    848e:	f003 fd05 	bl	be9c <getNextSend>
    8492:	4603      	mov	r3, r0
    8494:	4619      	mov	r1, r3
    8496:	6838      	ldr	r0, [r7, #0]
    8498:	f7fa fcbc 	bl	2e14 <bb_setUInt8>
    849c:	6378      	str	r0, [r7, #52]	; 0x34
    849e:	e009      	b.n	84b4 <dlms_getHdlcFrame+0x254>
    }
    else if (ret == 0)
    84a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84a2:	2b00      	cmp	r3, #0
    84a4:	d106      	bne.n	84b4 <dlms_getHdlcFrame+0x254>
    {
        ret = bb_setUInt8(reply, (unsigned char)frame);
    84a6:	68bb      	ldr	r3, [r7, #8]
    84a8:	b2db      	uxtb	r3, r3
    84aa:	4619      	mov	r1, r3
    84ac:	6838      	ldr	r0, [r7, #0]
    84ae:	f7fa fcb1 	bl	2e14 <bb_setUInt8>
    84b2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if (ret == 0)
    84b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84b6:	2b00      	cmp	r3, #0
    84b8:	d10f      	bne.n	84da <dlms_getHdlcFrame+0x27a>
    {
        // Add header CRC.
        crc = countCRC(reply, 1, reply->size - 1);
    84ba:	683b      	ldr	r3, [r7, #0]
    84bc:	88db      	ldrh	r3, [r3, #6]
    84be:	3b01      	subs	r3, #1
    84c0:	461a      	mov	r2, r3
    84c2:	2101      	movs	r1, #1
    84c4:	6838      	ldr	r0, [r7, #0]
    84c6:	f7fe fafb 	bl	6ac0 <countCRC>
    84ca:	4603      	mov	r3, r0
    84cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        ret = bb_setUInt16(reply, crc);
    84ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    84d0:	4619      	mov	r1, r3
    84d2:	6838      	ldr	r0, [r7, #0]
    84d4:	f7fa fd30 	bl	2f38 <bb_setUInt16>
    84d8:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if (ret == 0 && len != 0)
    84da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84dc:	2b00      	cmp	r3, #0
    84de:	d11d      	bne.n	851c <dlms_getHdlcFrame+0x2bc>
    84e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    84e2:	2b00      	cmp	r3, #0
    84e4:	d01a      	beq.n	851c <dlms_getHdlcFrame+0x2bc>
    {
        // Add data.
        if ((ret = bb_set2(reply, data, data->position, len)) == 0)
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	891a      	ldrh	r2, [r3, #8]
    84ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    84ec:	6879      	ldr	r1, [r7, #4]
    84ee:	6838      	ldr	r0, [r7, #0]
    84f0:	f7fb f896 	bl	3620 <bb_set2>
    84f4:	6378      	str	r0, [r7, #52]	; 0x34
    84f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84f8:	2b00      	cmp	r3, #0
    84fa:	d10f      	bne.n	851c <dlms_getHdlcFrame+0x2bc>
        {
            // Add data CRC.
            crc = countCRC(reply, 1, reply->size - 1);
    84fc:	683b      	ldr	r3, [r7, #0]
    84fe:	88db      	ldrh	r3, [r3, #6]
    8500:	3b01      	subs	r3, #1
    8502:	461a      	mov	r2, r3
    8504:	2101      	movs	r1, #1
    8506:	6838      	ldr	r0, [r7, #0]
    8508:	f7fe fada 	bl	6ac0 <countCRC>
    850c:	4603      	mov	r3, r0
    850e:	85fb      	strh	r3, [r7, #46]	; 0x2e
            ret = bb_setUInt16(reply, crc);
    8510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    8512:	4619      	mov	r1, r3
    8514:	6838      	ldr	r0, [r7, #0]
    8516:	f7fa fd0f 	bl	2f38 <bb_setUInt16>
    851a:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }
    // Add EOP
    if (ret == 0)
    851c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    851e:	2b00      	cmp	r3, #0
    8520:	d105      	bne.n	852e <dlms_getHdlcFrame+0x2ce>
    {
        ret = bb_setUInt8(reply, HDLC_FRAME_START_END);
    8522:	237e      	movs	r3, #126	; 0x7e
    8524:	4619      	mov	r1, r3
    8526:	6838      	ldr	r0, [r7, #0]
    8528:	f7fa fc74 	bl	2e14 <bb_setUInt8>
    852c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    // Remove sent data in server side.
    if (ret == 0 && settings->server)
    852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8530:	2b00      	cmp	r3, #0
    8532:	d122      	bne.n	857a <dlms_getHdlcFrame+0x31a>
    8534:	68fb      	ldr	r3, [r7, #12]
    8536:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    853a:	2b00      	cmp	r3, #0
    853c:	d01d      	beq.n	857a <dlms_getHdlcFrame+0x31a>
    {
        if (data != NULL)
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	2b00      	cmp	r3, #0
    8542:	d01a      	beq.n	857a <dlms_getHdlcFrame+0x31a>
        {
            //If all data is sent.
            if (data->size == data->position)
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	88da      	ldrh	r2, [r3, #6]
    8548:	687b      	ldr	r3, [r7, #4]
    854a:	891b      	ldrh	r3, [r3, #8]
    854c:	429a      	cmp	r2, r3
    854e:	d104      	bne.n	855a <dlms_getHdlcFrame+0x2fa>
            {
                ret = bb_clear(data);
    8550:	6878      	ldr	r0, [r7, #4]
    8552:	f7fb f907 	bl	3764 <bb_clear>
    8556:	6378      	str	r0, [r7, #52]	; 0x34
    8558:	e00f      	b.n	857a <dlms_getHdlcFrame+0x31a>
            }
            else
            {
                //Remove sent data.
                ret = bb_move(data, data->position, 0, data->size - data->position);
    855a:	687b      	ldr	r3, [r7, #4]
    855c:	8919      	ldrh	r1, [r3, #8]
    855e:	687b      	ldr	r3, [r7, #4]
    8560:	88da      	ldrh	r2, [r3, #6]
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	891b      	ldrh	r3, [r3, #8]
    8566:	1ad3      	subs	r3, r2, r3
    8568:	b29b      	uxth	r3, r3
    856a:	2200      	movs	r2, #0
    856c:	6878      	ldr	r0, [r7, #4]
    856e:	f7fb fc71 	bl	3e54 <bb_move>
    8572:	6378      	str	r0, [r7, #52]	; 0x34
                data->position = 0;
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	2200      	movs	r2, #0
    8578:	811a      	strh	r2, [r3, #8]
            }
        }
    }
    bb_clear(&primaryAddress);
    857a:	f107 0320 	add.w	r3, r7, #32
    857e:	4618      	mov	r0, r3
    8580:	f7fb f8f0 	bl	3764 <bb_clear>
    bb_clear(&secondaryAddress);
    8584:	f107 0314 	add.w	r3, r7, #20
    8588:	4618      	mov	r0, r3
    858a:	f7fb f8eb 	bl	3764 <bb_clear>
    return ret;
    858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    8590:	4618      	mov	r0, r3
    8592:	3738      	adds	r7, #56	; 0x38
    8594:	46bd      	mov	sp, r7
    8596:	bd80      	pop	{r7, pc}

00008598 <dlms_getDataFromFrame>:

void dlms_getDataFromFrame(
    gxByteBuffer* reply,
    gxReplyData* data)
{
    8598:	b580      	push	{r7, lr}
    859a:	b084      	sub	sp, #16
    859c:	af00      	add	r7, sp, #0
    859e:	6078      	str	r0, [r7, #4]
    85a0:	6039      	str	r1, [r7, #0]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    unsigned long offset = data->data.size;
    unsigned long cnt;
#else
    unsigned short offset = data->data.size;
    85a2:	683b      	ldr	r3, [r7, #0]
    85a4:	895b      	ldrh	r3, [r3, #10]
    85a6:	81bb      	strh	r3, [r7, #12]
    unsigned short cnt;
#endif
    if (data->packetLength < reply->position)
    85a8:	683b      	ldr	r3, [r7, #0]
    85aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	891b      	ldrh	r3, [r3, #8]
    85b0:	429a      	cmp	r2, r3
    85b2:	d202      	bcs.n	85ba <dlms_getDataFromFrame+0x22>
    {
        cnt = 0;
    85b4:	2300      	movs	r3, #0
    85b6:	81fb      	strh	r3, [r7, #14]
    85b8:	e005      	b.n	85c6 <dlms_getDataFromFrame+0x2e>
    }
    else
    {
        cnt = data->packetLength - reply->position;
    85ba:	683b      	ldr	r3, [r7, #0]
    85bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	891b      	ldrh	r3, [r3, #8]
    85c2:	1ad3      	subs	r3, r2, r3
    85c4:	81fb      	strh	r3, [r7, #14]
    }
    if (cnt != 0)
    85c6:	89fb      	ldrh	r3, [r7, #14]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d010      	beq.n	85ee <dlms_getDataFromFrame+0x56>
    {
        bb_capacity(&data->data, offset + cnt);
    85cc:	683b      	ldr	r3, [r7, #0]
    85ce:	1d18      	adds	r0, r3, #4
    85d0:	89ba      	ldrh	r2, [r7, #12]
    85d2:	89fb      	ldrh	r3, [r7, #14]
    85d4:	4413      	add	r3, r2
    85d6:	b29b      	uxth	r3, r3
    85d8:	4619      	mov	r1, r3
    85da:	f7fa fb9b 	bl	2d14 <bb_capacity>
        bb_set2(&data->data, reply, reply->position, cnt);
    85de:	683b      	ldr	r3, [r7, #0]
    85e0:	1d18      	adds	r0, r3, #4
    85e2:	687b      	ldr	r3, [r7, #4]
    85e4:	891a      	ldrh	r2, [r3, #8]
    85e6:	89fb      	ldrh	r3, [r7, #14]
    85e8:	6879      	ldr	r1, [r7, #4]
    85ea:	f7fb f819 	bl	3620 <bb_set2>
    }
    // Set position to begin of new data.
    data->data.position = offset;
    85ee:	683b      	ldr	r3, [r7, #0]
    85f0:	89ba      	ldrh	r2, [r7, #12]
    85f2:	819a      	strh	r2, [r3, #12]
}
    85f4:	bf00      	nop
    85f6:	3710      	adds	r7, #16
    85f8:	46bd      	mov	sp, r7
    85fa:	bd80      	pop	{r7, pc}

000085fc <dlms_getHdlcData>:
    gxByteBuffer* reply,
    gxReplyData* data,
    unsigned char* frame,
    unsigned char preEstablished,
    unsigned char first)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b090      	sub	sp, #64	; 0x40
    8600:	af04      	add	r7, sp, #16
    8602:	60b9      	str	r1, [r7, #8]
    8604:	607a      	str	r2, [r7, #4]
    8606:	603b      	str	r3, [r7, #0]
    8608:	4603      	mov	r3, r0
    860a:	73fb      	strb	r3, [r7, #15]
    unsigned short eopPos;
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    unsigned long pos, frameLen = 0;
    unsigned long packetStartID = reply->position;
#else
    unsigned short pos, frameLen = 0;
    860c:	2300      	movs	r3, #0
    860e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    unsigned short packetStartID = (unsigned short)reply->position;
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	891b      	ldrh	r3, [r3, #8]
    8614:	857b      	strh	r3, [r7, #42]	; 0x2a
#endif
    unsigned short crc, crcRead;
    // If whole frame is not received yet.
    if (reply->size - reply->position < 9)
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	88db      	ldrh	r3, [r3, #6]
    861a:	461a      	mov	r2, r3
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	891b      	ldrh	r3, [r3, #8]
    8620:	1ad3      	subs	r3, r2, r3
    8622:	2b08      	cmp	r3, #8
    8624:	dc04      	bgt.n	8630 <dlms_getHdlcData+0x34>
    {
        data->complete = 0;
    8626:	683b      	ldr	r3, [r7, #0]
    8628:	2200      	movs	r2, #0
    862a:	741a      	strb	r2, [r3, #16]
        return 0;
    862c:	2300      	movs	r3, #0
    862e:	e271      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    data->complete = 1;
    8630:	683b      	ldr	r3, [r7, #0]
    8632:	2201      	movs	r2, #1
    8634:	741a      	strb	r2, [r3, #16]
    // Find start of HDLC frame.
    for (pos = (unsigned short)reply->position; pos < reply->size; ++pos)
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	891b      	ldrh	r3, [r3, #8]
    863a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    863c:	e015      	b.n	866a <dlms_getHdlcData+0x6e>
    {
        if ((ret = bb_getUInt8(reply, &ch)) != 0)
    863e:	f107 0319 	add.w	r3, r7, #25
    8642:	4619      	mov	r1, r3
    8644:	6878      	ldr	r0, [r7, #4]
    8646:	f7fb f8b1 	bl	37ac <bb_getUInt8>
    864a:	6278      	str	r0, [r7, #36]	; 0x24
    864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    864e:	2b00      	cmp	r3, #0
    8650:	d001      	beq.n	8656 <dlms_getHdlcData+0x5a>
        {
            return ret;
    8652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8654:	e25e      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        if (ch == HDLC_FRAME_START_END)
    8656:	7e7b      	ldrb	r3, [r7, #25]
    8658:	227e      	movs	r2, #126	; 0x7e
    865a:	4293      	cmp	r3, r2
    865c:	d102      	bne.n	8664 <dlms_getHdlcData+0x68>
        {
            packetStartID = pos;
    865e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    8660:	857b      	strh	r3, [r7, #42]	; 0x2a
            break;
    8662:	e007      	b.n	8674 <dlms_getHdlcData+0x78>
        data->complete = 0;
        return 0;
    }
    data->complete = 1;
    // Find start of HDLC frame.
    for (pos = (unsigned short)reply->position; pos < reply->size; ++pos)
    8664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    8666:	3301      	adds	r3, #1
    8668:	85fb      	strh	r3, [r7, #46]	; 0x2e
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	88db      	ldrh	r3, [r3, #6]
    866e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
    8670:	429a      	cmp	r2, r3
    8672:	d3e4      	bcc.n	863e <dlms_getHdlcData+0x42>
            break;
        }
    }
    // Not a HDLC frame.
    // Sometimes meters can send some strange data between DLMS frames.
    if (reply->position == reply->size)
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	891a      	ldrh	r2, [r3, #8]
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	88db      	ldrh	r3, [r3, #6]
    867c:	429a      	cmp	r2, r3
    867e:	d104      	bne.n	868a <dlms_getHdlcData+0x8e>
    {
        data->complete = 0;
    8680:	683b      	ldr	r3, [r7, #0]
    8682:	2200      	movs	r2, #0
    8684:	741a      	strb	r2, [r3, #16]
        // Not enough data to parse;
        return 0;
    8686:	2300      	movs	r3, #0
    8688:	e244      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    868a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    868c:	6878      	ldr	r0, [r7, #4]
    868e:	f7fb f88d 	bl	37ac <bb_getUInt8>
    8692:	6278      	str	r0, [r7, #36]	; 0x24
    8694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8696:	2b00      	cmp	r3, #0
    8698:	d001      	beq.n	869e <dlms_getHdlcData+0xa2>
    {
        return ret;
    869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    869c:	e23a      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    if ((*frame & 0xF0) != 0xA0)
    869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    86a6:	2ba0      	cmp	r3, #160	; 0xa0
    86a8:	d015      	beq.n	86d6 <dlms_getHdlcData+0xda>
    {
        --reply->position;
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	891b      	ldrh	r3, [r3, #8]
    86ae:	3b01      	subs	r3, #1
    86b0:	b29a      	uxth	r2, r3
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	811a      	strh	r2, [r3, #8]
        // If same data.
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    86b6:	7bf8      	ldrb	r0, [r7, #15]
    86b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    86bc:	9302      	str	r3, [sp, #8]
    86be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    86c2:	9301      	str	r3, [sp, #4]
    86c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86c6:	9300      	str	r3, [sp, #0]
    86c8:	683b      	ldr	r3, [r7, #0]
    86ca:	687a      	ldr	r2, [r7, #4]
    86cc:	68b9      	ldr	r1, [r7, #8]
    86ce:	f7ff ff95 	bl	85fc <dlms_getHdlcData>
    86d2:	4603      	mov	r3, r0
    86d4:	e21e      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    // Check frame length.
    if ((*frame & 0x7) != 0)
    86d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86d8:	781b      	ldrb	r3, [r3, #0]
    86da:	f003 0307 	and.w	r3, r3, #7
    86de:	2b00      	cmp	r3, #0
    86e0:	d006      	beq.n	86f0 <dlms_getHdlcData+0xf4>
    {
        frameLen = ((*frame & 0x7) << 8);
    86e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	021b      	lsls	r3, r3, #8
    86e8:	b29b      	uxth	r3, r3
    86ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    86ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
    86f0:	f107 0319 	add.w	r3, r7, #25
    86f4:	4619      	mov	r1, r3
    86f6:	6878      	ldr	r0, [r7, #4]
    86f8:	f7fb f858 	bl	37ac <bb_getUInt8>
    86fc:	6278      	str	r0, [r7, #36]	; 0x24
    86fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8700:	2b00      	cmp	r3, #0
    8702:	d001      	beq.n	8708 <dlms_getHdlcData+0x10c>
    {
        return ret;
    8704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8706:	e205      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    // If not enough data.
    frameLen += ch;
    8708:	7e7b      	ldrb	r3, [r7, #25]
    870a:	b29a      	uxth	r2, r3
    870c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    870e:	4413      	add	r3, r2
    8710:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if ((reply->size - reply->position + 1) < frameLen)
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	88db      	ldrh	r3, [r3, #6]
    8716:	461a      	mov	r2, r3
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	891b      	ldrh	r3, [r3, #8]
    871c:	1ad3      	subs	r3, r2, r3
    871e:	1c5a      	adds	r2, r3, #1
    8720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    8722:	429a      	cmp	r2, r3
    8724:	da07      	bge.n	8736 <dlms_getHdlcData+0x13a>
    {
        data->complete = 0;
    8726:	683b      	ldr	r3, [r7, #0]
    8728:	2200      	movs	r2, #0
    872a:	741a      	strb	r2, [r3, #16]
        reply->position = packetStartID;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    8730:	811a      	strh	r2, [r3, #8]
        // Not enough data to parse;
        return 0;
    8732:	2300      	movs	r3, #0
    8734:	e1ee      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    eopPos = (unsigned short)(frameLen + packetStartID + 1);
    8736:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    8738:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    873a:	4413      	add	r3, r2
    873c:	b29b      	uxth	r3, r3
    873e:	3301      	adds	r3, #1
    8740:	847b      	strh	r3, [r7, #34]	; 0x22
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
    8742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8744:	f107 0219 	add.w	r2, r7, #25
    8748:	4619      	mov	r1, r3
    874a:	6878      	ldr	r0, [r7, #4]
    874c:	f7fb f874 	bl	3838 <bb_getUInt8ByIndex>
    8750:	6278      	str	r0, [r7, #36]	; 0x24
    8752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8754:	2b00      	cmp	r3, #0
    8756:	d001      	beq.n	875c <dlms_getHdlcData+0x160>
    {
        return ret;
    8758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    875a:	e1db      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    if (ch != HDLC_FRAME_START_END)
    875c:	7e7b      	ldrb	r3, [r7, #25]
    875e:	227e      	movs	r2, #126	; 0x7e
    8760:	4293      	cmp	r3, r2
    8762:	d015      	beq.n	8790 <dlms_getHdlcData+0x194>
    {
        reply->position -= 2;
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	891b      	ldrh	r3, [r3, #8]
    8768:	3b02      	subs	r3, #2
    876a:	b29a      	uxth	r2, r3
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	811a      	strh	r2, [r3, #8]
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    8770:	7bf8      	ldrb	r0, [r7, #15]
    8772:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    8776:	9302      	str	r3, [sp, #8]
    8778:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    877c:	9301      	str	r3, [sp, #4]
    877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8780:	9300      	str	r3, [sp, #0]
    8782:	683b      	ldr	r3, [r7, #0]
    8784:	687a      	ldr	r2, [r7, #4]
    8786:	68b9      	ldr	r1, [r7, #8]
    8788:	f7ff ff38 	bl	85fc <dlms_getHdlcData>
    878c:	4603      	mov	r3, r0
    878e:	e1c1      	b.n	8b14 <dlms_getHdlcData+0x518>
    }

    // Check addresses.
    ret = dlms_checkHdlcAddress(server, settings, reply, eopPos);
    8790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8792:	7bf8      	ldrb	r0, [r7, #15]
    8794:	687a      	ldr	r2, [r7, #4]
    8796:	68b9      	ldr	r1, [r7, #8]
    8798:	f7ff fc34 	bl	8004 <dlms_checkHdlcAddress>
    879c:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0)
    879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87a0:	2b00      	cmp	r3, #0
    87a2:	d044      	beq.n	882e <dlms_getHdlcData+0x232>
    {
        //If pre-established client address has change.
        if (ret == DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS)
    87a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87a6:	f240 1207 	movw	r2, #263	; 0x107
    87aa:	4293      	cmp	r3, r2
    87ac:	d102      	bne.n	87b4 <dlms_getHdlcData+0x1b8>
        {
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    87ae:	f240 1307 	movw	r3, #263	; 0x107
    87b2:	e1af      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        else
        {
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    87b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87b6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
    87ba:	d10e      	bne.n	87da <dlms_getHdlcData+0x1de>
                reply->position + 4 == reply->size)
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	891b      	ldrh	r3, [r3, #8]
    87c0:	3304      	adds	r3, #4
    87c2:	687a      	ldr	r2, [r7, #4]
    87c4:	88d2      	ldrh	r2, [r2, #6]
        {
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
        }
        else
        {
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    87c6:	4293      	cmp	r3, r2
    87c8:	d107      	bne.n	87da <dlms_getHdlcData+0x1de>
                reply->position + 4 == reply->size)
            {
                data->packetLength = 0;
    87ca:	683b      	ldr	r3, [r7, #0]
    87cc:	2200      	movs	r2, #0
    87ce:	859a      	strh	r2, [r3, #44]	; 0x2c
                bb_clear(reply);
    87d0:	6878      	ldr	r0, [r7, #4]
    87d2:	f7fa ffc7 	bl	3764 <bb_clear>
                return ret;
    87d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87d8:	e19c      	b.n	8b14 <dlms_getHdlcData+0x518>
            }
            if (ret == DLMS_ERROR_CODE_FALSE)
    87da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    87e0:	d10f      	bne.n	8802 <dlms_getHdlcData+0x206>
            {
                // If echo or reply to other meter.
                return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    87e2:	7bf8      	ldrb	r0, [r7, #15]
    87e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    87e8:	9302      	str	r3, [sp, #8]
    87ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    87ee:	9301      	str	r3, [sp, #4]
    87f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    87f2:	9300      	str	r3, [sp, #0]
    87f4:	683b      	ldr	r3, [r7, #0]
    87f6:	687a      	ldr	r2, [r7, #4]
    87f8:	68b9      	ldr	r1, [r7, #8]
    87fa:	f7ff feff 	bl	85fc <dlms_getHdlcData>
    87fe:	4603      	mov	r3, r0
    8800:	e188      	b.n	8b14 <dlms_getHdlcData+0x518>
            }
            reply->position = packetStartID + 1;
    8802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    8804:	3301      	adds	r3, #1
    8806:	b29a      	uxth	r2, r3
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	811a      	strh	r2, [r3, #8]
            ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    880c:	7bf8      	ldrb	r0, [r7, #15]
    880e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    8812:	9302      	str	r3, [sp, #8]
    8814:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    8818:	9301      	str	r3, [sp, #4]
    881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    881c:	9300      	str	r3, [sp, #0]
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	687a      	ldr	r2, [r7, #4]
    8822:	68b9      	ldr	r1, [r7, #8]
    8824:	f7ff feea 	bl	85fc <dlms_getHdlcData>
    8828:	6278      	str	r0, [r7, #36]	; 0x24
            return ret;
    882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    882c:	e172      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
    }

    // Is there more data available.
    if ((*frame & 0x8) != 0)
    882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	f003 0308 	and.w	r3, r3, #8
    8836:	2b00      	cmp	r3, #0
    8838:	d007      	beq.n	884a <dlms_getHdlcData+0x24e>
    {
        data->moreData |= DLMS_DATA_REQUEST_TYPES_FRAME;
    883a:	683b      	ldr	r3, [r7, #0]
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	f043 0301 	orr.w	r3, r3, #1
    8842:	b2da      	uxtb	r2, r3
    8844:	683b      	ldr	r3, [r7, #0]
    8846:	701a      	strb	r2, [r3, #0]
    8848:	e006      	b.n	8858 <dlms_getHdlcData+0x25c>
    }
    else
    {
        data->moreData = ((DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_FRAME));
    884a:	683b      	ldr	r3, [r7, #0]
    884c:	781b      	ldrb	r3, [r3, #0]
    884e:	f023 0301 	bic.w	r3, r3, #1
    8852:	b2da      	uxtb	r2, r3
    8854:	683b      	ldr	r3, [r7, #0]
    8856:	701a      	strb	r2, [r3, #0]
    }
    // Get frame type.
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    8858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    885a:	6878      	ldr	r0, [r7, #4]
    885c:	f7fa ffa6 	bl	37ac <bb_getUInt8>
    8860:	6278      	str	r0, [r7, #36]	; 0x24
    8862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8864:	2b00      	cmp	r3, #0
    8866:	d001      	beq.n	886c <dlms_getHdlcData+0x270>
    {
        return ret;
    8868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    886a:	e153      	b.n	8b14 <dlms_getHdlcData+0x518>
    }

    if (!preEstablished && !checkFrame(settings, *frame))
    886c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    8870:	2b00      	cmp	r3, #0
    8872:	d125      	bne.n	88c0 <dlms_getHdlcData+0x2c4>
    8874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	4619      	mov	r1, r3
    887a:	68b8      	ldr	r0, [r7, #8]
    887c:	f003 fa7e 	bl	bd7c <checkFrame>
    8880:	4603      	mov	r3, r0
    8882:	2b00      	cmp	r3, #0
    8884:	d11c      	bne.n	88c0 <dlms_getHdlcData+0x2c4>
    {
        reply->position = eopPos + 1;
    8886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8888:	3301      	adds	r3, #1
    888a:	b29a      	uxth	r2, r3
    888c:	687b      	ldr	r3, [r7, #4]
    888e:	811a      	strh	r2, [r3, #8]
        if (settings->server)
    8890:	68bb      	ldr	r3, [r7, #8]
    8892:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    8896:	2b00      	cmp	r3, #0
    8898:	d002      	beq.n	88a0 <dlms_getHdlcData+0x2a4>
        {
            return DLMS_ERROR_CODE_INVALID_FRAME_NUMBER;
    889a:	f240 1319 	movw	r3, #281	; 0x119
    889e:	e139      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    88a0:	7bf8      	ldrb	r0, [r7, #15]
    88a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    88a6:	9302      	str	r3, [sp, #8]
    88a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    88ac:	9301      	str	r3, [sp, #4]
    88ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    88b0:	9300      	str	r3, [sp, #0]
    88b2:	683b      	ldr	r3, [r7, #0]
    88b4:	687a      	ldr	r2, [r7, #4]
    88b6:	68b9      	ldr	r1, [r7, #8]
    88b8:	f7ff fea0 	bl	85fc <dlms_getHdlcData>
    88bc:	4603      	mov	r3, r0
    88be:	e129      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    // Check that header CRC is correct.
    crc = countCRC(reply, packetStartID + 1,
    88c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    88c2:	1c59      	adds	r1, r3, #1
        reply->position - packetStartID - 1);
    88c4:	687b      	ldr	r3, [r7, #4]
    88c6:	891b      	ldrh	r3, [r3, #8]
    88c8:	461a      	mov	r2, r3
    88ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    88cc:	1ad3      	subs	r3, r2, r3
            return DLMS_ERROR_CODE_INVALID_FRAME_NUMBER;
        }
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    }
    // Check that header CRC is correct.
    crc = countCRC(reply, packetStartID + 1,
    88ce:	3b01      	subs	r3, #1
    88d0:	461a      	mov	r2, r3
    88d2:	6878      	ldr	r0, [r7, #4]
    88d4:	f7fe f8f4 	bl	6ac0 <countCRC>
    88d8:	4603      	mov	r3, r0
    88da:	843b      	strh	r3, [r7, #32]
        reply->position - packetStartID - 1);

    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
    88dc:	f107 0316 	add.w	r3, r7, #22
    88e0:	4619      	mov	r1, r3
    88e2:	6878      	ldr	r0, [r7, #4]
    88e4:	f7fa ffc4 	bl	3870 <bb_getUInt16>
    88e8:	6278      	str	r0, [r7, #36]	; 0x24
    88ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88ec:	2b00      	cmp	r3, #0
    88ee:	d001      	beq.n	88f4 <dlms_getHdlcData+0x2f8>
    {
        return ret;
    88f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88f2:	e10f      	b.n	8b14 <dlms_getHdlcData+0x518>
    }

    if (crc != crcRead)
    88f4:	8afb      	ldrh	r3, [r7, #22]
    88f6:	8c3a      	ldrh	r2, [r7, #32]
    88f8:	429a      	cmp	r2, r3
    88fa:	d01a      	beq.n	8932 <dlms_getHdlcData+0x336>
    {
        if (reply->size - reply->position > 8)
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	88db      	ldrh	r3, [r3, #6]
    8900:	461a      	mov	r2, r3
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	891b      	ldrh	r3, [r3, #8]
    8906:	1ad3      	subs	r3, r2, r3
    8908:	2b08      	cmp	r3, #8
    890a:	dd0f      	ble.n	892c <dlms_getHdlcData+0x330>
        {
            return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    890c:	7bf8      	ldrb	r0, [r7, #15]
    890e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    8912:	9302      	str	r3, [sp, #8]
    8914:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    8918:	9301      	str	r3, [sp, #4]
    891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    891c:	9300      	str	r3, [sp, #0]
    891e:	683b      	ldr	r3, [r7, #0]
    8920:	687a      	ldr	r2, [r7, #4]
    8922:	68b9      	ldr	r1, [r7, #8]
    8924:	f7ff fe6a 	bl	85fc <dlms_getHdlcData>
    8928:	4603      	mov	r3, r0
    892a:	e0f3      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        return DLMS_ERROR_CODE_WRONG_CRC;
    892c:	f240 130d 	movw	r3, #269	; 0x10d
    8930:	e0f0      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    // Check that packet CRC match only if there is a data part.
    if (reply->position != packetStartID + frameLen + 1)
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	891b      	ldrh	r3, [r3, #8]
    8936:	4619      	mov	r1, r3
    8938:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    893a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    893c:	4413      	add	r3, r2
    893e:	3301      	adds	r3, #1
    8940:	4299      	cmp	r1, r3
    8942:	d027      	beq.n	8994 <dlms_getHdlcData+0x398>
    {
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
    8944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    8946:	1c59      	adds	r1, r3, #1
    8948:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    894a:	3b02      	subs	r3, #2
    894c:	461a      	mov	r2, r3
    894e:	6878      	ldr	r0, [r7, #4]
    8950:	f7fe f8b6 	bl	6ac0 <countCRC>
    8954:	4603      	mov	r3, r0
    8956:	843b      	strh	r3, [r7, #32]
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
    8958:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    895a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    895c:	4413      	add	r3, r2
    895e:	3b01      	subs	r3, #1
    8960:	4619      	mov	r1, r3
    8962:	f107 0316 	add.w	r3, r7, #22
    8966:	461a      	mov	r2, r3
    8968:	6878      	ldr	r0, [r7, #4]
    896a:	f7fb f9b5 	bl	3cd8 <bb_getUInt16ByIndex>
    896e:	6278      	str	r0, [r7, #36]	; 0x24
    8970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8972:	2b00      	cmp	r3, #0
    8974:	d001      	beq.n	897a <dlms_getHdlcData+0x37e>
        {
            return ret;
    8976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8978:	e0cc      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        if (crc != crcRead)
    897a:	8afb      	ldrh	r3, [r7, #22]
    897c:	8c3a      	ldrh	r2, [r7, #32]
    897e:	429a      	cmp	r2, r3
    8980:	d002      	beq.n	8988 <dlms_getHdlcData+0x38c>
        {
            return DLMS_ERROR_CODE_WRONG_CRC;
    8982:	f240 130d 	movw	r3, #269	; 0x10d
    8986:	e0c5      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        // Remove CRC and EOP from packet length.
        data->packetLength = eopPos - 2;
    8988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    898a:	3b02      	subs	r3, #2
    898c:	b29a      	uxth	r2, r3
    898e:	683b      	ldr	r3, [r7, #0]
    8990:	859a      	strh	r2, [r3, #44]	; 0x2c
    8992:	e004      	b.n	899e <dlms_getHdlcData+0x3a2>
    }
    else
    {
        data->packetLength = eopPos - 2;
    8994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8996:	3b02      	subs	r3, #2
    8998:	b29a      	uxth	r2, r3
    899a:	683b      	ldr	r3, [r7, #0]
    899c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }

    if ((*frame & HDLC_FRAME_TYPE_U_FRAME) == HDLC_FRAME_TYPE_U_FRAME)
    899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	f003 0303 	and.w	r3, r3, #3
    89a6:	2b03      	cmp	r3, #3
    89a8:	d119      	bne.n	89de <dlms_getHdlcData+0x3e2>
    {
        // Get Eop if there is no data.
        if (reply->position == packetStartID + frameLen + 1)
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	891b      	ldrh	r3, [r3, #8]
    89ae:	4619      	mov	r1, r3
    89b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    89b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    89b4:	4413      	add	r3, r2
    89b6:	3301      	adds	r3, #1
    89b8:	4299      	cmp	r1, r3
    89ba:	d10b      	bne.n	89d4 <dlms_getHdlcData+0x3d8>
        {
            // Get EOP.
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    89bc:	f107 0319 	add.w	r3, r7, #25
    89c0:	4619      	mov	r1, r3
    89c2:	6878      	ldr	r0, [r7, #4]
    89c4:	f7fa fef2 	bl	37ac <bb_getUInt8>
    89c8:	6278      	str	r0, [r7, #36]	; 0x24
    89ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89cc:	2b00      	cmp	r3, #0
    89ce:	d001      	beq.n	89d4 <dlms_getHdlcData+0x3d8>
            {
                return ret;
    89d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89d2:	e09f      	b.n	8b14 <dlms_getHdlcData+0x518>
            }
        }
        data->command = (DLMS_COMMAND)*frame;
    89d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89d6:	781a      	ldrb	r2, [r3, #0]
    89d8:	683b      	ldr	r3, [r7, #0]
    89da:	705a      	strb	r2, [r3, #1]
    89dc:	e050      	b.n	8a80 <dlms_getHdlcData+0x484>
    }
    else if ((*frame & HDLC_FRAME_TYPE_S_FRAME) == HDLC_FRAME_TYPE_S_FRAME)
    89de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	f003 0301 	and.w	r3, r3, #1
    89e6:	2b00      	cmp	r3, #0
    89e8:	d027      	beq.n	8a3a <dlms_getHdlcData+0x43e>
    {
        // If S-frame
        int tmp = (*frame >> 2) & 0x3;
    89ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89ec:	781b      	ldrb	r3, [r3, #0]
    89ee:	089b      	lsrs	r3, r3, #2
    89f0:	b2db      	uxtb	r3, r3
    89f2:	f003 0303 	and.w	r3, r3, #3
    89f6:	61fb      	str	r3, [r7, #28]
        // If frame is rejected.
        if (tmp == HDLC_CONTROL_FRAME_REJECT)
    89f8:	69fb      	ldr	r3, [r7, #28]
    89fa:	2b02      	cmp	r3, #2
    89fc:	d102      	bne.n	8a04 <dlms_getHdlcData+0x408>
        {
            return DLMS_ERROR_CODE_REJECTED;
    89fe:	f06f 0301 	mvn.w	r3, #1
    8a02:	e087      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        else if (tmp == HDLC_CONTROL_FRAME_RECEIVE_NOT_READY)
    8a04:	69fb      	ldr	r3, [r7, #28]
    8a06:	2b01      	cmp	r3, #1
    8a08:	d102      	bne.n	8a10 <dlms_getHdlcData+0x414>
        {
            return DLMS_ERROR_CODE_REJECTED;
    8a0a:	f06f 0301 	mvn.w	r3, #1
    8a0e:	e081      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
        else if (tmp == HDLC_CONTROL_FRAME_RECEIVE_READY)
        {
        }
        // Get Eop if there is no data.
        if (reply->position == packetStartID + frameLen + 1)
    8a10:	687b      	ldr	r3, [r7, #4]
    8a12:	891b      	ldrh	r3, [r3, #8]
    8a14:	4619      	mov	r1, r3
    8a16:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    8a18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    8a1a:	4413      	add	r3, r2
    8a1c:	3301      	adds	r3, #1
    8a1e:	4299      	cmp	r1, r3
    8a20:	d12e      	bne.n	8a80 <dlms_getHdlcData+0x484>
        {
            // Get EOP.
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    8a22:	f107 0319 	add.w	r3, r7, #25
    8a26:	4619      	mov	r1, r3
    8a28:	6878      	ldr	r0, [r7, #4]
    8a2a:	f7fa febf 	bl	37ac <bb_getUInt8>
    8a2e:	6278      	str	r0, [r7, #36]	; 0x24
    8a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a32:	2b00      	cmp	r3, #0
    8a34:	d024      	beq.n	8a80 <dlms_getHdlcData+0x484>
            {
                return ret;
    8a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a38:	e06c      	b.n	8b14 <dlms_getHdlcData+0x518>
    }
    else
    {
        // I-frame
        // Get Eop if there is no data.
        if (reply->position == packetStartID + frameLen + 1)
    8a3a:	687b      	ldr	r3, [r7, #4]
    8a3c:	891b      	ldrh	r3, [r3, #8]
    8a3e:	4619      	mov	r1, r3
    8a40:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    8a42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    8a44:	4413      	add	r3, r2
    8a46:	3301      	adds	r3, #1
    8a48:	4299      	cmp	r1, r3
    8a4a:	d115      	bne.n	8a78 <dlms_getHdlcData+0x47c>
        {
            // Get EOP.
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    8a4c:	f107 0319 	add.w	r3, r7, #25
    8a50:	4619      	mov	r1, r3
    8a52:	6878      	ldr	r0, [r7, #4]
    8a54:	f7fa feaa 	bl	37ac <bb_getUInt8>
    8a58:	6278      	str	r0, [r7, #36]	; 0x24
    8a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d001      	beq.n	8a64 <dlms_getHdlcData+0x468>
            {
                return ret;
    8a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a62:	e057      	b.n	8b14 <dlms_getHdlcData+0x518>
            }
            if ((*frame & 0x1) == 0x1)
    8a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8a66:	781b      	ldrb	r3, [r3, #0]
    8a68:	f003 0301 	and.w	r3, r3, #1
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d007      	beq.n	8a80 <dlms_getHdlcData+0x484>
            {
                data->moreData = DLMS_DATA_REQUEST_TYPES_FRAME;
    8a70:	683b      	ldr	r3, [r7, #0]
    8a72:	2201      	movs	r2, #1
    8a74:	701a      	strb	r2, [r3, #0]
    8a76:	e003      	b.n	8a80 <dlms_getHdlcData+0x484>
            }
        }
        else
        {
            dlms_checkLLCBytes(settings, reply);
    8a78:	6879      	ldr	r1, [r7, #4]
    8a7a:	68b8      	ldr	r0, [r7, #8]
    8a7c:	f7ff f9f4 	bl	7e68 <dlms_checkLLCBytes>
        }
    }
    if (settings->server && (first || data->command == DLMS_COMMAND_SNRM))
    8a80:	68bb      	ldr	r3, [r7, #8]
    8a82:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    8a86:	2b00      	cmp	r3, #0
    8a88:	d043      	beq.n	8b12 <dlms_getHdlcData+0x516>
    8a8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    8a8e:	2b00      	cmp	r3, #0
    8a90:	d103      	bne.n	8a9a <dlms_getHdlcData+0x49e>
    8a92:	683b      	ldr	r3, [r7, #0]
    8a94:	785b      	ldrb	r3, [r3, #1]
    8a96:	2b93      	cmp	r3, #147	; 0x93
    8a98:	d13b      	bne.n	8b12 <dlms_getHdlcData+0x516>
    {
#ifndef DLMS_IGNORE_SERVER
        // Check is data send to this server.
        if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    8a9a:	68bb      	ldr	r3, [r7, #8]
    8a9c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8a9e:	4619      	mov	r1, r3
    8aa0:	68bb      	ldr	r3, [r7, #8]
    8aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8aa4:	461a      	mov	r2, r3
    8aa6:	68b8      	ldr	r0, [r7, #8]
    8aa8:	f020 fbf6 	bl	29298 <svr_isTarget>
    8aac:	4603      	mov	r3, r0
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d12f      	bne.n	8b12 <dlms_getHdlcData+0x516>
        {
            settings->serverAddress = 0;
    8ab2:	68bb      	ldr	r3, [r7, #8]
    8ab4:	2200      	movs	r2, #0
    8ab6:	869a      	strh	r2, [r3, #52]	; 0x34
            settings->clientAddress = 0;
    8ab8:	68bb      	ldr	r3, [r7, #8]
    8aba:	2200      	movs	r2, #0
    8abc:	865a      	strh	r2, [r3, #50]	; 0x32
            if (reply->size - reply->position > 8)
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	88db      	ldrh	r3, [r3, #6]
    8ac2:	461a      	mov	r2, r3
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	891b      	ldrh	r3, [r3, #8]
    8ac8:	1ad3      	subs	r3, r2, r3
    8aca:	2b08      	cmp	r3, #8
    8acc:	dd1e      	ble.n	8b0c <dlms_getHdlcData+0x510>
            {
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
                unsigned long pos = reply->position;
#else
                unsigned short pos = reply->position;
    8ace:	687b      	ldr	r3, [r7, #4]
    8ad0:	891b      	ldrh	r3, [r3, #8]
    8ad2:	837b      	strh	r3, [r7, #26]
#endif //!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    8ad4:	7bf8      	ldrb	r0, [r7, #15]
    8ad6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    8ada:	9302      	str	r3, [sp, #8]
    8adc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    8ae0:	9301      	str	r3, [sp, #4]
    8ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8ae4:	9300      	str	r3, [sp, #0]
    8ae6:	683b      	ldr	r3, [r7, #0]
    8ae8:	687a      	ldr	r2, [r7, #4]
    8aea:	68b9      	ldr	r1, [r7, #8]
    8aec:	f7ff fd86 	bl	85fc <dlms_getHdlcData>
    8af0:	6278      	str	r0, [r7, #36]	; 0x24
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
    8af2:	68bb      	ldr	r3, [r7, #8]
    8af4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8af6:	2b00      	cmp	r3, #0
    8af8:	d006      	beq.n	8b08 <dlms_getHdlcData+0x50c>
    8afa:	68bb      	ldr	r3, [r7, #8]
    8afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8afe:	2b00      	cmp	r3, #0
    8b00:	d002      	beq.n	8b08 <dlms_getHdlcData+0x50c>
                {
                    reply->position = pos;
    8b02:	687b      	ldr	r3, [r7, #4]
    8b04:	8b7a      	ldrh	r2, [r7, #26]
    8b06:	811a      	strh	r2, [r3, #8]
                }
                return ret;
    8b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b0a:	e003      	b.n	8b14 <dlms_getHdlcData+0x518>
            }
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    8b0c:	f240 1307 	movw	r3, #263	; 0x107
    8b10:	e000      	b.n	8b14 <dlms_getHdlcData+0x518>
        }
#endif //DLMS_IGNORE_SERVER
    }
    return DLMS_ERROR_CODE_OK;
    8b12:	2300      	movs	r3, #0
}
    8b14:	4618      	mov	r0, r3
    8b16:	3730      	adds	r7, #48	; 0x30
    8b18:	46bd      	mov	sp, r7
    8b1a:	bd80      	pop	{r7, pc}

00008b1c <dlms_checkWrapperAddress>:

int dlms_checkWrapperAddress(dlmsSettings* settings,
    gxByteBuffer *buff)
{
    8b1c:	b580      	push	{r7, lr}
    8b1e:	b084      	sub	sp, #16
    8b20:	af00      	add	r7, sp, #0
    8b22:	6078      	str	r0, [r7, #4]
    8b24:	6039      	str	r1, [r7, #0]
#ifndef DLMS_IGNORE_WRAPPER
    int ret;
    unsigned short value;
    if (settings->server)
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d036      	beq.n	8b9e <dlms_checkWrapperAddress+0x82>
    {
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    8b30:	f107 030a 	add.w	r3, r7, #10
    8b34:	4619      	mov	r1, r3
    8b36:	6838      	ldr	r0, [r7, #0]
    8b38:	f7fa fe9a 	bl	3870 <bb_getUInt16>
    8b3c:	60f8      	str	r0, [r7, #12]
    8b3e:	68fb      	ldr	r3, [r7, #12]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d001      	beq.n	8b48 <dlms_checkWrapperAddress+0x2c>
        {
            return ret;
    8b44:	68fb      	ldr	r3, [r7, #12]
    8b46:	e061      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        // Check that client addresses match.
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    8b48:	687b      	ldr	r3, [r7, #4]
    8b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8b4c:	2b00      	cmp	r3, #0
    8b4e:	d007      	beq.n	8b60 <dlms_checkWrapperAddress+0x44>
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    8b54:	897b      	ldrh	r3, [r7, #10]
    8b56:	429a      	cmp	r2, r3
    8b58:	d002      	beq.n	8b60 <dlms_checkWrapperAddress+0x44>
        {
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    8b5a:	f240 1307 	movw	r3, #263	; 0x107
    8b5e:	e055      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        else
        {
            settings->clientAddress = value;
    8b60:	897a      	ldrh	r2, [r7, #10]
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	865a      	strh	r2, [r3, #50]	; 0x32
        }

        if ((ret = bb_getUInt16(buff, &value)) != 0)
    8b66:	f107 030a 	add.w	r3, r7, #10
    8b6a:	4619      	mov	r1, r3
    8b6c:	6838      	ldr	r0, [r7, #0]
    8b6e:	f7fa fe7f 	bl	3870 <bb_getUInt16>
    8b72:	60f8      	str	r0, [r7, #12]
    8b74:	68fb      	ldr	r3, [r7, #12]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d001      	beq.n	8b7e <dlms_checkWrapperAddress+0x62>
        {
            return ret;
    8b7a:	68fb      	ldr	r3, [r7, #12]
    8b7c:	e046      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        // Check that server addresses match.
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8b82:	2b00      	cmp	r3, #0
    8b84:	d007      	beq.n	8b96 <dlms_checkWrapperAddress+0x7a>
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8b8a:	897b      	ldrh	r3, [r7, #10]
    8b8c:	429a      	cmp	r2, r3
    8b8e:	d002      	beq.n	8b96 <dlms_checkWrapperAddress+0x7a>
        {
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    8b90:	f44f 7384 	mov.w	r3, #264	; 0x108
    8b94:	e03a      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        else
        {
            settings->serverAddress = value;
    8b96:	897a      	ldrh	r2, [r7, #10]
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	869a      	strh	r2, [r3, #52]	; 0x34
    8b9c:	e035      	b.n	8c0a <dlms_checkWrapperAddress+0xee>
        }
    }
    else
    {
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    8b9e:	f107 030a 	add.w	r3, r7, #10
    8ba2:	4619      	mov	r1, r3
    8ba4:	6838      	ldr	r0, [r7, #0]
    8ba6:	f7fa fe63 	bl	3870 <bb_getUInt16>
    8baa:	60f8      	str	r0, [r7, #12]
    8bac:	68fb      	ldr	r3, [r7, #12]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d001      	beq.n	8bb6 <dlms_checkWrapperAddress+0x9a>
        {
            return ret;
    8bb2:	68fb      	ldr	r3, [r7, #12]
    8bb4:	e02a      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        // Check that server addresses match.
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d007      	beq.n	8bce <dlms_checkWrapperAddress+0xb2>
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8bc2:	897b      	ldrh	r3, [r7, #10]
    8bc4:	429a      	cmp	r2, r3
    8bc6:	d002      	beq.n	8bce <dlms_checkWrapperAddress+0xb2>
        {
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    8bc8:	f44f 7384 	mov.w	r3, #264	; 0x108
    8bcc:	e01e      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        else
        {
            settings->serverAddress = value;
    8bce:	897a      	ldrh	r2, [r7, #10]
    8bd0:	687b      	ldr	r3, [r7, #4]
    8bd2:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if ((ret = bb_getUInt16(buff, &value)) != 0)
    8bd4:	f107 030a 	add.w	r3, r7, #10
    8bd8:	4619      	mov	r1, r3
    8bda:	6838      	ldr	r0, [r7, #0]
    8bdc:	f7fa fe48 	bl	3870 <bb_getUInt16>
    8be0:	60f8      	str	r0, [r7, #12]
    8be2:	68fb      	ldr	r3, [r7, #12]
    8be4:	2b00      	cmp	r3, #0
    8be6:	d001      	beq.n	8bec <dlms_checkWrapperAddress+0xd0>
        {
            return ret;
    8be8:	68fb      	ldr	r3, [r7, #12]
    8bea:	e00f      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        // Check that client addresses match.
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    8bec:	687b      	ldr	r3, [r7, #4]
    8bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d007      	beq.n	8c04 <dlms_checkWrapperAddress+0xe8>
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    8bf8:	897b      	ldrh	r3, [r7, #10]
    8bfa:	429a      	cmp	r2, r3
    8bfc:	d002      	beq.n	8c04 <dlms_checkWrapperAddress+0xe8>
        {
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    8bfe:	f240 1307 	movw	r3, #263	; 0x107
    8c02:	e003      	b.n	8c0c <dlms_checkWrapperAddress+0xf0>
        }
        else
        {
            settings->clientAddress = value;
    8c04:	897a      	ldrh	r2, [r7, #10]
    8c06:	687b      	ldr	r3, [r7, #4]
    8c08:	865a      	strh	r2, [r3, #50]	; 0x32
        }
    }
    return DLMS_ERROR_CODE_OK;
    8c0a:	2300      	movs	r3, #0
#else
    (settings);
    (buff);
    return DLMS_ERROR_CODE_HARDWARE_FAULT;
#endif //DLMS_IGNORE_WRAPPER
}
    8c0c:	4618      	mov	r0, r3
    8c0e:	3710      	adds	r7, #16
    8c10:	46bd      	mov	sp, r7
    8c12:	bd80      	pop	{r7, pc}

00008c14 <dlms_getTcpData>:
#ifndef DLMS_IGNORE_WRAPPER
int dlms_getTcpData(
    dlmsSettings* settings,
    gxByteBuffer* buff,
    gxReplyData* data)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	b088      	sub	sp, #32
    8c18:	af00      	add	r7, sp, #0
    8c1a:	60f8      	str	r0, [r7, #12]
    8c1c:	60b9      	str	r1, [r7, #8]
    8c1e:	607a      	str	r2, [r7, #4]
    int ret, pos;
    unsigned short value;
    // If whole frame is not received yet.
    if (buff->size - buff->position < 8)
    8c20:	68bb      	ldr	r3, [r7, #8]
    8c22:	88db      	ldrh	r3, [r3, #6]
    8c24:	461a      	mov	r2, r3
    8c26:	68bb      	ldr	r3, [r7, #8]
    8c28:	891b      	ldrh	r3, [r3, #8]
    8c2a:	1ad3      	subs	r3, r2, r3
    8c2c:	2b07      	cmp	r3, #7
    8c2e:	dc04      	bgt.n	8c3a <dlms_getTcpData+0x26>
    {
        data->complete = 0;
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	2200      	movs	r2, #0
    8c34:	741a      	strb	r2, [r3, #16]
        return DLMS_ERROR_CODE_OK;
    8c36:	2300      	movs	r3, #0
    8c38:	e058      	b.n	8cec <dlms_getTcpData+0xd8>
    }
    pos = buff->position;
    8c3a:	68bb      	ldr	r3, [r7, #8]
    8c3c:	891b      	ldrh	r3, [r3, #8]
    8c3e:	61fb      	str	r3, [r7, #28]

    data->complete = 0;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	2200      	movs	r2, #0
    8c44:	741a      	strb	r2, [r3, #16]
    while (buff->position != buff->size)
    8c46:	e04a      	b.n	8cde <dlms_getTcpData+0xca>
    {
        // Get version
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    8c48:	f107 0316 	add.w	r3, r7, #22
    8c4c:	4619      	mov	r1, r3
    8c4e:	68b8      	ldr	r0, [r7, #8]
    8c50:	f7fa fe0e 	bl	3870 <bb_getUInt16>
    8c54:	61b8      	str	r0, [r7, #24]
    8c56:	69bb      	ldr	r3, [r7, #24]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d001      	beq.n	8c60 <dlms_getTcpData+0x4c>
        {
            return ret;
    8c5c:	69bb      	ldr	r3, [r7, #24]
    8c5e:	e045      	b.n	8cec <dlms_getTcpData+0xd8>
        }
        if (value == 1)
    8c60:	8afb      	ldrh	r3, [r7, #22]
    8c62:	2b01      	cmp	r3, #1
    8c64:	d135      	bne.n	8cd2 <dlms_getTcpData+0xbe>
        {
            // Check TCP/IP addresses.
            if ((ret = dlms_checkWrapperAddress(settings, buff)) != 0)
    8c66:	68b9      	ldr	r1, [r7, #8]
    8c68:	68f8      	ldr	r0, [r7, #12]
    8c6a:	f7ff ff57 	bl	8b1c <dlms_checkWrapperAddress>
    8c6e:	61b8      	str	r0, [r7, #24]
    8c70:	69bb      	ldr	r3, [r7, #24]
    8c72:	2b00      	cmp	r3, #0
    8c74:	d001      	beq.n	8c7a <dlms_getTcpData+0x66>
            {
                return ret;
    8c76:	69bb      	ldr	r3, [r7, #24]
    8c78:	e038      	b.n	8cec <dlms_getTcpData+0xd8>
            }
            // Get length.
            if ((ret = bb_getUInt16(buff, &value)) != 0)
    8c7a:	f107 0316 	add.w	r3, r7, #22
    8c7e:	4619      	mov	r1, r3
    8c80:	68b8      	ldr	r0, [r7, #8]
    8c82:	f7fa fdf5 	bl	3870 <bb_getUInt16>
    8c86:	61b8      	str	r0, [r7, #24]
    8c88:	69bb      	ldr	r3, [r7, #24]
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d001      	beq.n	8c92 <dlms_getTcpData+0x7e>
            {
                return ret;
    8c8e:	69bb      	ldr	r3, [r7, #24]
    8c90:	e02c      	b.n	8cec <dlms_getTcpData+0xd8>
            }
            data->complete = !((buff->size - buff->position) < value);
    8c92:	68bb      	ldr	r3, [r7, #8]
    8c94:	88db      	ldrh	r3, [r3, #6]
    8c96:	461a      	mov	r2, r3
    8c98:	68bb      	ldr	r3, [r7, #8]
    8c9a:	891b      	ldrh	r3, [r3, #8]
    8c9c:	1ad3      	subs	r3, r2, r3
    8c9e:	8afa      	ldrh	r2, [r7, #22]
    8ca0:	4293      	cmp	r3, r2
    8ca2:	bfac      	ite	ge
    8ca4:	2301      	movge	r3, #1
    8ca6:	2300      	movlt	r3, #0
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	461a      	mov	r2, r3
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	741a      	strb	r2, [r3, #16]
            if (!data->complete)
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	7c1b      	ldrb	r3, [r3, #16]
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d104      	bne.n	8cc2 <dlms_getTcpData+0xae>
            {
                buff->position = pos;
    8cb8:	69fb      	ldr	r3, [r7, #28]
    8cba:	b29a      	uxth	r2, r3
    8cbc:	68bb      	ldr	r3, [r7, #8]
    8cbe:	811a      	strh	r2, [r3, #8]
            }
            else
            {
                data->packetLength = buff->position + value;
            }
            break;
    8cc0:	e013      	b.n	8cea <dlms_getTcpData+0xd6>
            {
                buff->position = pos;
            }
            else
            {
                data->packetLength = buff->position + value;
    8cc2:	68bb      	ldr	r3, [r7, #8]
    8cc4:	891a      	ldrh	r2, [r3, #8]
    8cc6:	8afb      	ldrh	r3, [r7, #22]
    8cc8:	4413      	add	r3, r2
    8cca:	b29a      	uxth	r2, r3
    8ccc:	687b      	ldr	r3, [r7, #4]
    8cce:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            break;
    8cd0:	e00b      	b.n	8cea <dlms_getTcpData+0xd6>
        }
        else
        {
            --buff->position;
    8cd2:	68bb      	ldr	r3, [r7, #8]
    8cd4:	891b      	ldrh	r3, [r3, #8]
    8cd6:	3b01      	subs	r3, #1
    8cd8:	b29a      	uxth	r2, r3
    8cda:	68bb      	ldr	r3, [r7, #8]
    8cdc:	811a      	strh	r2, [r3, #8]
        return DLMS_ERROR_CODE_OK;
    }
    pos = buff->position;

    data->complete = 0;
    while (buff->position != buff->size)
    8cde:	68bb      	ldr	r3, [r7, #8]
    8ce0:	891a      	ldrh	r2, [r3, #8]
    8ce2:	68bb      	ldr	r3, [r7, #8]
    8ce4:	88db      	ldrh	r3, [r3, #6]
    8ce6:	429a      	cmp	r2, r3
    8ce8:	d1ae      	bne.n	8c48 <dlms_getTcpData+0x34>
        else
        {
            --buff->position;
        }
    }
    return DLMS_ERROR_CODE_OK;
    8cea:	2300      	movs	r3, #0
}
    8cec:	4618      	mov	r0, r3
    8cee:	3720      	adds	r7, #32
    8cf0:	46bd      	mov	sp, r7
    8cf2:	bd80      	pop	{r7, pc}

00008cf4 <dlms_getDataFromBlock>:
#endif //DLMS_IGNORE_WRAPPER

int dlms_getDataFromBlock(gxByteBuffer* data, unsigned short index)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b084      	sub	sp, #16
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	6078      	str	r0, [r7, #4]
    8cfc:	460b      	mov	r3, r1
    8cfe:	807b      	strh	r3, [r7, #2]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    unsigned long pos, len = data->position - index;
#else
    unsigned short pos, len = data->position - index;
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	891a      	ldrh	r2, [r3, #8]
    8d04:	887b      	ldrh	r3, [r7, #2]
    8d06:	1ad3      	subs	r3, r2, r3
    8d08:	81fb      	strh	r3, [r7, #14]
#endif
    if (data->size == data->position)
    8d0a:	687b      	ldr	r3, [r7, #4]
    8d0c:	88da      	ldrh	r2, [r3, #6]
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	891b      	ldrh	r3, [r3, #8]
    8d12:	429a      	cmp	r2, r3
    8d14:	d104      	bne.n	8d20 <dlms_getDataFromBlock+0x2c>
    {
        bb_clear(data);
    8d16:	6878      	ldr	r0, [r7, #4]
    8d18:	f7fa fd24 	bl	3764 <bb_clear>
        return 0;
    8d1c:	2300      	movs	r3, #0
    8d1e:	e01a      	b.n	8d56 <dlms_getDataFromBlock+0x62>
    }
    if (len < 0)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    pos = data->position;
    8d20:	687b      	ldr	r3, [r7, #4]
    8d22:	891b      	ldrh	r3, [r3, #8]
    8d24:	81bb      	strh	r3, [r7, #12]
    bb_move(data, data->position, data->position - len, data->size - data->position);
    8d26:	687b      	ldr	r3, [r7, #4]
    8d28:	8919      	ldrh	r1, [r3, #8]
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	891a      	ldrh	r2, [r3, #8]
    8d2e:	89fb      	ldrh	r3, [r7, #14]
    8d30:	1ad3      	subs	r3, r2, r3
    8d32:	b298      	uxth	r0, r3
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	88da      	ldrh	r2, [r3, #6]
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	891b      	ldrh	r3, [r3, #8]
    8d3c:	1ad3      	subs	r3, r2, r3
    8d3e:	b29b      	uxth	r3, r3
    8d40:	4602      	mov	r2, r0
    8d42:	6878      	ldr	r0, [r7, #4]
    8d44:	f7fb f886 	bl	3e54 <bb_move>
    data->position = pos - len;
    8d48:	89ba      	ldrh	r2, [r7, #12]
    8d4a:	89fb      	ldrh	r3, [r7, #14]
    8d4c:	1ad3      	subs	r3, r2, r3
    8d4e:	b29a      	uxth	r2, r3
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	811a      	strh	r2, [r3, #8]
    return 0;
    8d54:	2300      	movs	r3, #0
}
    8d56:	4618      	mov	r0, r3
    8d58:	3710      	adds	r7, #16
    8d5a:	46bd      	mov	sp, r7
    8d5c:	bd80      	pop	{r7, pc}
    8d5e:	bf00      	nop

00008d60 <dlms_getWrapperFrame>:
#ifndef DLMS_IGNORE_WRAPPER
int dlms_getWrapperFrame(
    dlmsSettings* settings,
    gxByteBuffer* data,
    gxByteBuffer* reply)
{
    8d60:	b580      	push	{r7, lr}
    8d62:	b086      	sub	sp, #24
    8d64:	af00      	add	r7, sp, #0
    8d66:	60f8      	str	r0, [r7, #12]
    8d68:	60b9      	str	r1, [r7, #8]
    8d6a:	607a      	str	r2, [r7, #4]
    int ret;
    if ((ret = bb_clear(reply)) == 0 &&
    8d6c:	6878      	ldr	r0, [r7, #4]
    8d6e:	f7fa fcf9 	bl	3764 <bb_clear>
    8d72:	6178      	str	r0, [r7, #20]
    8d74:	697b      	ldr	r3, [r7, #20]
    8d76:	2b00      	cmp	r3, #0
    8d78:	d17d      	bne.n	8e76 <dlms_getWrapperFrame+0x116>
        (ret = bb_capacity(reply, 8 + data->size - data->position)) == 0 &&
    8d7a:	68bb      	ldr	r3, [r7, #8]
    8d7c:	88da      	ldrh	r2, [r3, #6]
    8d7e:	68bb      	ldr	r3, [r7, #8]
    8d80:	891b      	ldrh	r3, [r3, #8]
    8d82:	1ad3      	subs	r3, r2, r3
    8d84:	b29b      	uxth	r3, r3
    8d86:	3308      	adds	r3, #8
    8d88:	b29b      	uxth	r3, r3
    dlmsSettings* settings,
    gxByteBuffer* data,
    gxByteBuffer* reply)
{
    int ret;
    if ((ret = bb_clear(reply)) == 0 &&
    8d8a:	4619      	mov	r1, r3
    8d8c:	6878      	ldr	r0, [r7, #4]
    8d8e:	f7f9 ffc1 	bl	2d14 <bb_capacity>
    8d92:	6178      	str	r0, [r7, #20]
    8d94:	697b      	ldr	r3, [r7, #20]
    8d96:	2b00      	cmp	r3, #0
    8d98:	d16d      	bne.n	8e76 <dlms_getWrapperFrame+0x116>
        (ret = bb_capacity(reply, 8 + data->size - data->position)) == 0 &&
    8d9a:	2101      	movs	r1, #1
    8d9c:	6878      	ldr	r0, [r7, #4]
    8d9e:	f7fa f8cb 	bl	2f38 <bb_setUInt16>
    8da2:	6178      	str	r0, [r7, #20]
    8da4:	697b      	ldr	r3, [r7, #20]
    8da6:	2b00      	cmp	r3, #0
    8da8:	d165      	bne.n	8e76 <dlms_getWrapperFrame+0x116>
        // Add version.
        (ret = bb_setUInt16(reply, 1)) == 0)
    {
        if (settings->server)
    8daa:	68fb      	ldr	r3, [r7, #12]
    8dac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    8db0:	2b00      	cmp	r3, #0
    8db2:	d011      	beq.n	8dd8 <dlms_getWrapperFrame+0x78>
        {
            if ((ret = bb_setUInt16(reply, settings->serverAddress)) == 0)
    8db4:	68fb      	ldr	r3, [r7, #12]
    8db6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8db8:	4619      	mov	r1, r3
    8dba:	6878      	ldr	r0, [r7, #4]
    8dbc:	f7fa f8bc 	bl	2f38 <bb_setUInt16>
    8dc0:	6178      	str	r0, [r7, #20]
    8dc2:	697b      	ldr	r3, [r7, #20]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d118      	bne.n	8dfa <dlms_getWrapperFrame+0x9a>
            {
                ret = bb_setUInt16(reply, settings->clientAddress);
    8dc8:	68fb      	ldr	r3, [r7, #12]
    8dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8dcc:	4619      	mov	r1, r3
    8dce:	6878      	ldr	r0, [r7, #4]
    8dd0:	f7fa f8b2 	bl	2f38 <bb_setUInt16>
    8dd4:	6178      	str	r0, [r7, #20]
    8dd6:	e010      	b.n	8dfa <dlms_getWrapperFrame+0x9a>
            }
        }
        else
        {
            if ((ret = bb_setUInt16(reply, settings->clientAddress)) == 0)
    8dd8:	68fb      	ldr	r3, [r7, #12]
    8dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8ddc:	4619      	mov	r1, r3
    8dde:	6878      	ldr	r0, [r7, #4]
    8de0:	f7fa f8aa 	bl	2f38 <bb_setUInt16>
    8de4:	6178      	str	r0, [r7, #20]
    8de6:	697b      	ldr	r3, [r7, #20]
    8de8:	2b00      	cmp	r3, #0
    8dea:	d106      	bne.n	8dfa <dlms_getWrapperFrame+0x9a>
            {
                ret = bb_setUInt16(reply, settings->serverAddress);
    8dec:	68fb      	ldr	r3, [r7, #12]
    8dee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8df0:	4619      	mov	r1, r3
    8df2:	6878      	ldr	r0, [r7, #4]
    8df4:	f7fa f8a0 	bl	2f38 <bb_setUInt16>
    8df8:	6178      	str	r0, [r7, #20]
            }
        }
        // Data length.
        if (ret == 0 && (ret = bb_setUInt16(reply, (unsigned short)data->size)) == 0)
    8dfa:	697b      	ldr	r3, [r7, #20]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d117      	bne.n	8e30 <dlms_getWrapperFrame+0xd0>
    8e00:	68bb      	ldr	r3, [r7, #8]
    8e02:	88db      	ldrh	r3, [r3, #6]
    8e04:	4619      	mov	r1, r3
    8e06:	6878      	ldr	r0, [r7, #4]
    8e08:	f7fa f896 	bl	2f38 <bb_setUInt16>
    8e0c:	6178      	str	r0, [r7, #20]
    8e0e:	697b      	ldr	r3, [r7, #20]
    8e10:	2b00      	cmp	r3, #0
    8e12:	d10d      	bne.n	8e30 <dlms_getWrapperFrame+0xd0>
        {
            // Data
            ret = bb_set2(reply, data, data->position, data->size - data->position);
    8e14:	68bb      	ldr	r3, [r7, #8]
    8e16:	8919      	ldrh	r1, [r3, #8]
    8e18:	68bb      	ldr	r3, [r7, #8]
    8e1a:	88da      	ldrh	r2, [r3, #6]
    8e1c:	68bb      	ldr	r3, [r7, #8]
    8e1e:	891b      	ldrh	r3, [r3, #8]
    8e20:	1ad3      	subs	r3, r2, r3
    8e22:	b29b      	uxth	r3, r3
    8e24:	460a      	mov	r2, r1
    8e26:	68b9      	ldr	r1, [r7, #8]
    8e28:	6878      	ldr	r0, [r7, #4]
    8e2a:	f7fa fbf9 	bl	3620 <bb_set2>
    8e2e:	6178      	str	r0, [r7, #20]
        }
        // Remove sent data in server side.
        if (ret == 0 && settings->server)
    8e30:	697b      	ldr	r3, [r7, #20]
    8e32:	2b00      	cmp	r3, #0
    8e34:	d11f      	bne.n	8e76 <dlms_getWrapperFrame+0x116>
    8e36:	68fb      	ldr	r3, [r7, #12]
    8e38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d01a      	beq.n	8e76 <dlms_getWrapperFrame+0x116>
        {
            if (data->size == data->position)
    8e40:	68bb      	ldr	r3, [r7, #8]
    8e42:	88da      	ldrh	r2, [r3, #6]
    8e44:	68bb      	ldr	r3, [r7, #8]
    8e46:	891b      	ldrh	r3, [r3, #8]
    8e48:	429a      	cmp	r2, r3
    8e4a:	d104      	bne.n	8e56 <dlms_getWrapperFrame+0xf6>
            {
                ret = bb_clear(data);
    8e4c:	68b8      	ldr	r0, [r7, #8]
    8e4e:	f7fa fc89 	bl	3764 <bb_clear>
    8e52:	6178      	str	r0, [r7, #20]
    8e54:	e00f      	b.n	8e76 <dlms_getWrapperFrame+0x116>
            }
            else
            {
                ret = bb_move(data, data->position, 0, data->size - data->position);
    8e56:	68bb      	ldr	r3, [r7, #8]
    8e58:	8919      	ldrh	r1, [r3, #8]
    8e5a:	68bb      	ldr	r3, [r7, #8]
    8e5c:	88da      	ldrh	r2, [r3, #6]
    8e5e:	68bb      	ldr	r3, [r7, #8]
    8e60:	891b      	ldrh	r3, [r3, #8]
    8e62:	1ad3      	subs	r3, r2, r3
    8e64:	b29b      	uxth	r3, r3
    8e66:	2200      	movs	r2, #0
    8e68:	68b8      	ldr	r0, [r7, #8]
    8e6a:	f7fa fff3 	bl	3e54 <bb_move>
    8e6e:	6178      	str	r0, [r7, #20]
                data->position = 0;
    8e70:	68bb      	ldr	r3, [r7, #8]
    8e72:	2200      	movs	r2, #0
    8e74:	811a      	strh	r2, [r3, #8]
            }
        }
    }
    return ret;
    8e76:	697b      	ldr	r3, [r7, #20]
}
    8e78:	4618      	mov	r0, r3
    8e7a:	3718      	adds	r7, #24
    8e7c:	46bd      	mov	sp, r7
    8e7e:	bd80      	pop	{r7, pc}

00008e80 <dlms_handleGetResponse>:

int dlms_handleGetResponse(
    dlmsSettings* settings,
    gxReplyData* reply,
    unsigned short index)
{
    8e80:	b580      	push	{r7, lr}
    8e82:	b088      	sub	sp, #32
    8e84:	af00      	add	r7, sp, #0
    8e86:	60f8      	str	r0, [r7, #12]
    8e88:	60b9      	str	r1, [r7, #8]
    8e8a:	4613      	mov	r3, r2
    8e8c:	80fb      	strh	r3, [r7, #6]
    unsigned short count;
    unsigned char ch;
    unsigned long number;
    short type;
    // Get type.
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8e8e:	68bb      	ldr	r3, [r7, #8]
    8e90:	3304      	adds	r3, #4
    8e92:	f107 0217 	add.w	r2, r7, #23
    8e96:	4611      	mov	r1, r2
    8e98:	4618      	mov	r0, r3
    8e9a:	f7fa fc87 	bl	37ac <bb_getUInt8>
    8e9e:	61f8      	str	r0, [r7, #28]
    8ea0:	69fb      	ldr	r3, [r7, #28]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d001      	beq.n	8eaa <dlms_handleGetResponse+0x2a>
    {
        return ret;
    8ea6:	69fb      	ldr	r3, [r7, #28]
    8ea8:	e105      	b.n	90b6 <dlms_handleGetResponse+0x236>
    }
    type = ch;
    8eaa:	7dfb      	ldrb	r3, [r7, #23]
    8eac:	837b      	strh	r3, [r7, #26]
    // Get invoke ID and priority.
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8eae:	68bb      	ldr	r3, [r7, #8]
    8eb0:	3304      	adds	r3, #4
    8eb2:	f107 0217 	add.w	r2, r7, #23
    8eb6:	4611      	mov	r1, r2
    8eb8:	4618      	mov	r0, r3
    8eba:	f7fa fc77 	bl	37ac <bb_getUInt8>
    8ebe:	61f8      	str	r0, [r7, #28]
    8ec0:	69fb      	ldr	r3, [r7, #28]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d001      	beq.n	8eca <dlms_handleGetResponse+0x4a>
    {
        return ret;
    8ec6:	69fb      	ldr	r3, [r7, #28]
    8ec8:	e0f5      	b.n	90b6 <dlms_handleGetResponse+0x236>
    }
    // Response normal
    if (type == 1)
    8eca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    8ece:	2b01      	cmp	r3, #1
    8ed0:	d128      	bne.n	8f24 <dlms_handleGetResponse+0xa4>
    {
        // Result
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8ed2:	68bb      	ldr	r3, [r7, #8]
    8ed4:	3304      	adds	r3, #4
    8ed6:	f107 0217 	add.w	r2, r7, #23
    8eda:	4611      	mov	r1, r2
    8edc:	4618      	mov	r0, r3
    8ede:	f7fa fc65 	bl	37ac <bb_getUInt8>
    8ee2:	61f8      	str	r0, [r7, #28]
    8ee4:	69fb      	ldr	r3, [r7, #28]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d001      	beq.n	8eee <dlms_handleGetResponse+0x6e>
        {
            return ret;
    8eea:	69fb      	ldr	r3, [r7, #28]
    8eec:	e0e3      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        if (ch != 0)
    8eee:	7dfb      	ldrb	r3, [r7, #23]
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d00f      	beq.n	8f14 <dlms_handleGetResponse+0x94>
        {
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8ef4:	68bb      	ldr	r3, [r7, #8]
    8ef6:	3304      	adds	r3, #4
    8ef8:	f107 0217 	add.w	r2, r7, #23
    8efc:	4611      	mov	r1, r2
    8efe:	4618      	mov	r0, r3
    8f00:	f7fa fc54 	bl	37ac <bb_getUInt8>
    8f04:	61f8      	str	r0, [r7, #28]
    8f06:	69fb      	ldr	r3, [r7, #28]
    8f08:	2b00      	cmp	r3, #0
    8f0a:	d001      	beq.n	8f10 <dlms_handleGetResponse+0x90>
            {
                return ret;
    8f0c:	69fb      	ldr	r3, [r7, #28]
    8f0e:	e0d2      	b.n	90b6 <dlms_handleGetResponse+0x236>
            }
            return ch;
    8f10:	7dfb      	ldrb	r3, [r7, #23]
    8f12:	e0d0      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        ret = dlms_getDataFromBlock(&reply->data, 0);
    8f14:	68bb      	ldr	r3, [r7, #8]
    8f16:	3304      	adds	r3, #4
    8f18:	2100      	movs	r1, #0
    8f1a:	4618      	mov	r0, r3
    8f1c:	f7ff feea 	bl	8cf4 <dlms_getDataFromBlock>
    8f20:	61f8      	str	r0, [r7, #28]
    8f22:	e0c7      	b.n	90b4 <dlms_handleGetResponse+0x234>
    }
    else if (type == 2)
    8f24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    8f28:	2b02      	cmp	r3, #2
    8f2a:	f040 80ab 	bne.w	9084 <dlms_handleGetResponse+0x204>
    {
        // GetResponsewithDataBlock
        // Is Last block.
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8f2e:	68bb      	ldr	r3, [r7, #8]
    8f30:	3304      	adds	r3, #4
    8f32:	f107 0217 	add.w	r2, r7, #23
    8f36:	4611      	mov	r1, r2
    8f38:	4618      	mov	r0, r3
    8f3a:	f7fa fc37 	bl	37ac <bb_getUInt8>
    8f3e:	61f8      	str	r0, [r7, #28]
    8f40:	69fb      	ldr	r3, [r7, #28]
    8f42:	2b00      	cmp	r3, #0
    8f44:	d001      	beq.n	8f4a <dlms_handleGetResponse+0xca>
        {
            return ret;
    8f46:	69fb      	ldr	r3, [r7, #28]
    8f48:	e0b5      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        if (ch == 0)
    8f4a:	7dfb      	ldrb	r3, [r7, #23]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d107      	bne.n	8f60 <dlms_handleGetResponse+0xe0>
        {
            reply->moreData = (DLMS_DATA_REQUEST_TYPES)(reply->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	f043 0302 	orr.w	r3, r3, #2
    8f58:	b2da      	uxtb	r2, r3
    8f5a:	68bb      	ldr	r3, [r7, #8]
    8f5c:	701a      	strb	r2, [r3, #0]
    8f5e:	e006      	b.n	8f6e <dlms_handleGetResponse+0xee>
        }
        else
        {
            reply->moreData =
                (DLMS_DATA_REQUEST_TYPES)(reply->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
    8f60:	68bb      	ldr	r3, [r7, #8]
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	f023 0302 	bic.w	r3, r3, #2
    8f68:	b2da      	uxtb	r2, r3
        {
            reply->moreData = (DLMS_DATA_REQUEST_TYPES)(reply->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
        }
        else
        {
            reply->moreData =
    8f6a:	68bb      	ldr	r3, [r7, #8]
    8f6c:	701a      	strb	r2, [r3, #0]
                (DLMS_DATA_REQUEST_TYPES)(reply->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
        }
        // Get Block number.
        if ((ret = bb_getUInt32(&reply->data, &number)) != 0)
    8f6e:	68bb      	ldr	r3, [r7, #8]
    8f70:	3304      	adds	r3, #4
    8f72:	f107 0210 	add.w	r2, r7, #16
    8f76:	4611      	mov	r1, r2
    8f78:	4618      	mov	r0, r3
    8f7a:	f7fa fca9 	bl	38d0 <bb_getUInt32>
    8f7e:	61f8      	str	r0, [r7, #28]
    8f80:	69fb      	ldr	r3, [r7, #28]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d001      	beq.n	8f8a <dlms_handleGetResponse+0x10a>
        {
            return ret;
    8f86:	69fb      	ldr	r3, [r7, #28]
    8f88:	e095      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        // If meter's block index is zero based or Actaris is read.
        // Actaris SL7000 might return wrong block index sometimes.
        // It's not reseted to 1.
        if (number != 1 && settings->blockIndex == 1)
    8f8a:	693b      	ldr	r3, [r7, #16]
    8f8c:	2b01      	cmp	r3, #1
    8f8e:	d009      	beq.n	8fa4 <dlms_handleGetResponse+0x124>
    8f90:	68fb      	ldr	r3, [r7, #12]
    8f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8f96:	2b01      	cmp	r3, #1
    8f98:	d104      	bne.n	8fa4 <dlms_handleGetResponse+0x124>
        {
            settings->blockIndex = number;
    8f9a:	693a      	ldr	r2, [r7, #16]
    8f9c:	68fb      	ldr	r3, [r7, #12]
    8f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    8fa2:	e007      	b.n	8fb4 <dlms_handleGetResponse+0x134>
        }
        else if (number != settings->blockIndex)
    8fa4:	68fb      	ldr	r3, [r7, #12]
    8fa6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    8faa:	693b      	ldr	r3, [r7, #16]
    8fac:	429a      	cmp	r2, r3
    8fae:	d001      	beq.n	8fb4 <dlms_handleGetResponse+0x134>
        {
            return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    8fb0:	2313      	movs	r3, #19
    8fb2:	e080      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        // Get status.
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8fb4:	68bb      	ldr	r3, [r7, #8]
    8fb6:	3304      	adds	r3, #4
    8fb8:	f107 0217 	add.w	r2, r7, #23
    8fbc:	4611      	mov	r1, r2
    8fbe:	4618      	mov	r0, r3
    8fc0:	f7fa fbf4 	bl	37ac <bb_getUInt8>
    8fc4:	61f8      	str	r0, [r7, #28]
    8fc6:	69fb      	ldr	r3, [r7, #28]
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d001      	beq.n	8fd0 <dlms_handleGetResponse+0x150>
        {
            return ret;
    8fcc:	69fb      	ldr	r3, [r7, #28]
    8fce:	e072      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        if (ch != 0)
    8fd0:	7dfb      	ldrb	r3, [r7, #23]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d00f      	beq.n	8ff6 <dlms_handleGetResponse+0x176>
        {
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    8fd6:	68bb      	ldr	r3, [r7, #8]
    8fd8:	3304      	adds	r3, #4
    8fda:	f107 0217 	add.w	r2, r7, #23
    8fde:	4611      	mov	r1, r2
    8fe0:	4618      	mov	r0, r3
    8fe2:	f7fa fbe3 	bl	37ac <bb_getUInt8>
    8fe6:	61f8      	str	r0, [r7, #28]
    8fe8:	69fb      	ldr	r3, [r7, #28]
    8fea:	2b00      	cmp	r3, #0
    8fec:	d001      	beq.n	8ff2 <dlms_handleGetResponse+0x172>
            {
                return ret;
    8fee:	69fb      	ldr	r3, [r7, #28]
    8ff0:	e061      	b.n	90b6 <dlms_handleGetResponse+0x236>
            }
            return ch;
    8ff2:	7dfb      	ldrb	r3, [r7, #23]
    8ff4:	e05f      	b.n	90b6 <dlms_handleGetResponse+0x236>
        }
        else
        {
            // Get data size.
            if ((ret = hlp_getObjectCount2(&reply->data, &count)) != 0)
    8ff6:	68bb      	ldr	r3, [r7, #8]
    8ff8:	3304      	adds	r3, #4
    8ffa:	f107 0218 	add.w	r2, r7, #24
    8ffe:	4611      	mov	r1, r2
    9000:	4618      	mov	r0, r3
    9002:	f018 fc23 	bl	2184c <hlp_getObjectCount2>
    9006:	61f8      	str	r0, [r7, #28]
    9008:	69fb      	ldr	r3, [r7, #28]
    900a:	2b00      	cmp	r3, #0
    900c:	d001      	beq.n	9012 <dlms_handleGetResponse+0x192>
            {
                return ret;
    900e:	69fb      	ldr	r3, [r7, #28]
    9010:	e051      	b.n	90b6 <dlms_handleGetResponse+0x236>
            }
            // if whole block is read.
            if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    9012:	68bb      	ldr	r3, [r7, #8]
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	f003 0301 	and.w	r3, r3, #1
    901a:	2b00      	cmp	r3, #0
    901c:	d10e      	bne.n	903c <dlms_handleGetResponse+0x1bc>
            {
                // Check Block length.
                if (count > (unsigned short)(reply->data.size - reply->data.position))
    901e:	68bb      	ldr	r3, [r7, #8]
    9020:	895a      	ldrh	r2, [r3, #10]
    9022:	68bb      	ldr	r3, [r7, #8]
    9024:	899b      	ldrh	r3, [r3, #12]
    9026:	1ad3      	subs	r3, r2, r3
    9028:	b29a      	uxth	r2, r3
    902a:	8b3b      	ldrh	r3, [r7, #24]
    902c:	429a      	cmp	r2, r3
    902e:	d202      	bcs.n	9036 <dlms_handleGetResponse+0x1b6>
                {
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    9030:	f44f 7382 	mov.w	r3, #260	; 0x104
    9034:	e03f      	b.n	90b6 <dlms_handleGetResponse+0x236>
                }
                reply->command = DLMS_COMMAND_NONE;
    9036:	68bb      	ldr	r3, [r7, #8]
    9038:	2200      	movs	r2, #0
    903a:	705a      	strb	r2, [r3, #1]
            }
            if (count == 0)
    903c:	8b3b      	ldrh	r3, [r7, #24]
    903e:	2b00      	cmp	r3, #0
    9040:	d103      	bne.n	904a <dlms_handleGetResponse+0x1ca>
            {
                // If meter sends empty data block.
                reply->data.size = index;
    9042:	68bb      	ldr	r3, [r7, #8]
    9044:	88fa      	ldrh	r2, [r7, #6]
    9046:	815a      	strh	r2, [r3, #10]
    9048:	e00c      	b.n	9064 <dlms_handleGetResponse+0x1e4>
            }
            else
            {
                if ((ret = dlms_getDataFromBlock(&reply->data, index)) != 0)
    904a:	68bb      	ldr	r3, [r7, #8]
    904c:	3304      	adds	r3, #4
    904e:	88fa      	ldrh	r2, [r7, #6]
    9050:	4611      	mov	r1, r2
    9052:	4618      	mov	r0, r3
    9054:	f7ff fe4e 	bl	8cf4 <dlms_getDataFromBlock>
    9058:	61f8      	str	r0, [r7, #28]
    905a:	69fb      	ldr	r3, [r7, #28]
    905c:	2b00      	cmp	r3, #0
    905e:	d001      	beq.n	9064 <dlms_handleGetResponse+0x1e4>
                {
                    return ret;
    9060:	69fb      	ldr	r3, [r7, #28]
    9062:	e028      	b.n	90b6 <dlms_handleGetResponse+0x236>
                }
            }
            // If last packet and data is not try to peek.
            if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    9064:	68bb      	ldr	r3, [r7, #8]
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	2b00      	cmp	r3, #0
    906a:	d123      	bne.n	90b4 <dlms_handleGetResponse+0x234>
            {
                if (!reply->peek)
    906c:	68bb      	ldr	r3, [r7, #8]
    906e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9072:	2b00      	cmp	r3, #0
    9074:	d11e      	bne.n	90b4 <dlms_handleGetResponse+0x234>
                {
                    reply->data.position = 0;
    9076:	68bb      	ldr	r3, [r7, #8]
    9078:	2200      	movs	r2, #0
    907a:	819a      	strh	r2, [r3, #12]
                    resetBlockIndex(settings);
    907c:	68f8      	ldr	r0, [r7, #12]
    907e:	f002 fe1b 	bl	bcb8 <resetBlockIndex>
    9082:	e017      	b.n	90b4 <dlms_handleGetResponse+0x234>
                }
            }
        }
    }
    else if (type == 3)
    9084:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    9088:	2b03      	cmp	r3, #3
    908a:	d110      	bne.n	90ae <dlms_handleGetResponse+0x22e>
    {
        // Get response with list.
        // Get item count.
        hlp_getObjectCount2(&reply->data, &count);
    908c:	68bb      	ldr	r3, [r7, #8]
    908e:	3304      	adds	r3, #4
    9090:	f107 0218 	add.w	r2, r7, #24
    9094:	4611      	mov	r1, r2
    9096:	4618      	mov	r0, r3
    9098:	f018 fbd8 	bl	2184c <hlp_getObjectCount2>
        dlms_getDataFromBlock(&reply->data, 0);
    909c:	68bb      	ldr	r3, [r7, #8]
    909e:	3304      	adds	r3, #4
    90a0:	2100      	movs	r1, #0
    90a2:	4618      	mov	r0, r3
    90a4:	f7ff fe26 	bl	8cf4 <dlms_getDataFromBlock>
        return DLMS_ERROR_CODE_FALSE;
    90a8:	f04f 33ff 	mov.w	r3, #4294967295
    90ac:	e003      	b.n	90b6 <dlms_handleGetResponse+0x236>
    }
    else
    {
        //Invalid Get response.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    90ae:	f44f 7381 	mov.w	r3, #258	; 0x102
    90b2:	e000      	b.n	90b6 <dlms_handleGetResponse+0x236>
    }
    return ret;
    90b4:	69fb      	ldr	r3, [r7, #28]
}
    90b6:	4618      	mov	r0, r3
    90b8:	3720      	adds	r7, #32
    90ba:	46bd      	mov	sp, r7
    90bc:	bd80      	pop	{r7, pc}
    90be:	bf00      	nop

000090c0 <dlms_handleWriteResponse>:
    return DLMS_ERROR_CODE_OK;
}

int dlms_handleWriteResponse(
    gxReplyData* data)
{
    90c0:	b580      	push	{r7, lr}
    90c2:	b086      	sub	sp, #24
    90c4:	af00      	add	r7, sp, #0
    90c6:	6078      	str	r0, [r7, #4]
    unsigned char ch;
    int ret;
    unsigned short pos, count;
    if (hlp_getObjectCount2(&data->data, &count) != 0)
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	3304      	adds	r3, #4
    90cc:	f107 020c 	add.w	r2, r7, #12
    90d0:	4611      	mov	r1, r2
    90d2:	4618      	mov	r0, r3
    90d4:	f018 fbba 	bl	2184c <hlp_getObjectCount2>
    90d8:	4603      	mov	r3, r0
    90da:	2b00      	cmp	r3, #0
    90dc:	d002      	beq.n	90e4 <dlms_handleWriteResponse+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    90de:	f44f 7382 	mov.w	r3, #260	; 0x104
    90e2:	e02b      	b.n	913c <dlms_handleWriteResponse+0x7c>
    }
    for (pos = 0; pos != count; ++pos)
    90e4:	2300      	movs	r3, #0
    90e6:	82fb      	strh	r3, [r7, #22]
    90e8:	e023      	b.n	9132 <dlms_handleWriteResponse+0x72>
    {
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	3304      	adds	r3, #4
    90ee:	f107 020f 	add.w	r2, r7, #15
    90f2:	4611      	mov	r1, r2
    90f4:	4618      	mov	r0, r3
    90f6:	f7fa fb59 	bl	37ac <bb_getUInt8>
    90fa:	6138      	str	r0, [r7, #16]
    90fc:	693b      	ldr	r3, [r7, #16]
    90fe:	2b00      	cmp	r3, #0
    9100:	d001      	beq.n	9106 <dlms_handleWriteResponse+0x46>
        {
            return ret;
    9102:	693b      	ldr	r3, [r7, #16]
    9104:	e01a      	b.n	913c <dlms_handleWriteResponse+0x7c>
        }
        if (ch != 0)
    9106:	7bfb      	ldrb	r3, [r7, #15]
    9108:	2b00      	cmp	r3, #0
    910a:	d00f      	beq.n	912c <dlms_handleWriteResponse+0x6c>
        {
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	3304      	adds	r3, #4
    9110:	f107 020f 	add.w	r2, r7, #15
    9114:	4611      	mov	r1, r2
    9116:	4618      	mov	r0, r3
    9118:	f7fa fb48 	bl	37ac <bb_getUInt8>
    911c:	6138      	str	r0, [r7, #16]
    911e:	693b      	ldr	r3, [r7, #16]
    9120:	2b00      	cmp	r3, #0
    9122:	d001      	beq.n	9128 <dlms_handleWriteResponse+0x68>
            {
                return ret;
    9124:	693b      	ldr	r3, [r7, #16]
    9126:	e009      	b.n	913c <dlms_handleWriteResponse+0x7c>
            }
            return ch;
    9128:	7bfb      	ldrb	r3, [r7, #15]
    912a:	e007      	b.n	913c <dlms_handleWriteResponse+0x7c>
    unsigned short pos, count;
    if (hlp_getObjectCount2(&data->data, &count) != 0)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    for (pos = 0; pos != count; ++pos)
    912c:	8afb      	ldrh	r3, [r7, #22]
    912e:	3301      	adds	r3, #1
    9130:	82fb      	strh	r3, [r7, #22]
    9132:	89bb      	ldrh	r3, [r7, #12]
    9134:	8afa      	ldrh	r2, [r7, #22]
    9136:	429a      	cmp	r2, r3
    9138:	d1d7      	bne.n	90ea <dlms_handleWriteResponse+0x2a>
                return ret;
            }
            return ch;
        }
    }
    return DLMS_ERROR_CODE_OK;
    913a:	2300      	movs	r3, #0
}
    913c:	4618      	mov	r0, r3
    913e:	3718      	adds	r7, #24
    9140:	46bd      	mov	sp, r7
    9142:	bd80      	pop	{r7, pc}

00009144 <dlms_getValueFromData>:

int dlms_getValueFromData(dlmsSettings* settings,
    gxReplyData* reply)
{
    9144:	b590      	push	{r4, r7, lr}
    9146:	b08d      	sub	sp, #52	; 0x34
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
    914c:	6039      	str	r1, [r7, #0]
    unsigned short index;
    int ret, pos;
    dlmsVARIANT* tmp;
    dlmsVARIANT value;
    gxDataInfo info;
    di_init(&info);
    914e:	f107 0308 	add.w	r3, r7, #8
    9152:	4618      	mov	r0, r3
    9154:	f7fd f802 	bl	615c <di_init>
    var_init(&value);
    9158:	f107 0310 	add.w	r3, r7, #16
    915c:	4618      	mov	r0, r3
    915e:	f01c ffe3 	bl	26128 <var_init>
    if (reply->dataValue.vt == DLMS_DATA_TYPE_ARRAY)
    9162:	683b      	ldr	r3, [r7, #0]
    9164:	7e1b      	ldrb	r3, [r3, #24]
    9166:	2b01      	cmp	r3, #1
    9168:	d107      	bne.n	917a <dlms_getValueFromData+0x36>
    {
        info.type = DLMS_DATA_TYPE_ARRAY;
    916a:	2301      	movs	r3, #1
    916c:	733b      	strb	r3, [r7, #12]
        info.count = (unsigned short)reply->totalCount;
    916e:	683b      	ldr	r3, [r7, #0]
    9170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9172:	817b      	strh	r3, [r7, #10]
        info.index = (unsigned short)reply->data.size;
    9174:	683b      	ldr	r3, [r7, #0]
    9176:	895b      	ldrh	r3, [r3, #10]
    9178:	813b      	strh	r3, [r7, #8]
    }
    index = (unsigned short)(reply->data.position);
    917a:	683b      	ldr	r3, [r7, #0]
    917c:	899b      	ldrh	r3, [r3, #12]
    917e:	857b      	strh	r3, [r7, #42]	; 0x2a
    reply->data.position = reply->readPosition;
    9180:	683b      	ldr	r3, [r7, #0]
    9182:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    9184:	683b      	ldr	r3, [r7, #0]
    9186:	819a      	strh	r2, [r3, #12]
    if ((ret = dlms_getData(&reply->data, &info, &value)) != 0)
    9188:	683b      	ldr	r3, [r7, #0]
    918a:	3304      	adds	r3, #4
    918c:	f107 0210 	add.w	r2, r7, #16
    9190:	f107 0108 	add.w	r1, r7, #8
    9194:	4618      	mov	r0, r3
    9196:	f7fe fd33 	bl	7c00 <dlms_getData>
    919a:	6278      	str	r0, [r7, #36]	; 0x24
    919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    919e:	2b00      	cmp	r3, #0
    91a0:	d006      	beq.n	91b0 <dlms_getValueFromData+0x6c>
    {
        var_clear(&value);
    91a2:	f107 0310 	add.w	r3, r7, #16
    91a6:	4618      	mov	r0, r3
    91a8:	f01c ffce 	bl	26148 <var_clear>
        return ret;
    91ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91ae:	e075      	b.n	929c <dlms_getValueFromData+0x158>
    }
    // If new data.
    if (value.vt != DLMS_DATA_TYPE_NONE)
    91b0:	7c3b      	ldrb	r3, [r7, #16]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d052      	beq.n	925c <dlms_getValueFromData+0x118>
    {
        if (value.vt != DLMS_DATA_TYPE_ARRAY && value.vt != DLMS_DATA_TYPE_STRUCTURE)
    91b6:	7c3b      	ldrb	r3, [r7, #16]
    91b8:	2b01      	cmp	r3, #1
    91ba:	d01a      	beq.n	91f2 <dlms_getValueFromData+0xae>
    91bc:	7c3b      	ldrb	r3, [r7, #16]
    91be:	2b02      	cmp	r3, #2
    91c0:	d017      	beq.n	91f2 <dlms_getValueFromData+0xae>
        {
            reply->dataType = info.type;
    91c2:	7b3a      	ldrb	r2, [r7, #12]
    91c4:	683b      	ldr	r3, [r7, #0]
    91c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            reply->dataValue = value;
    91ca:	683b      	ldr	r3, [r7, #0]
    91cc:	f103 0418 	add.w	r4, r3, #24
    91d0:	f107 0310 	add.w	r3, r7, #16
    91d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    91d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            reply->totalCount = 0;
    91da:	683b      	ldr	r3, [r7, #0]
    91dc:	2200      	movs	r2, #0
    91de:	851a      	strh	r2, [r3, #40]	; 0x28
            if (reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
    91e0:	683b      	ldr	r3, [r7, #0]
    91e2:	785b      	ldrb	r3, [r3, #1]
    91e4:	2b0f      	cmp	r3, #15
    91e6:	d131      	bne.n	924c <dlms_getValueFromData+0x108>
            {
                reply->readPosition = reply->data.position;
    91e8:	683b      	ldr	r3, [r7, #0]
    91ea:	899a      	ldrh	r2, [r3, #12]
    91ec:	683b      	ldr	r3, [r7, #0]
    91ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        if (value.vt != DLMS_DATA_TYPE_ARRAY && value.vt != DLMS_DATA_TYPE_STRUCTURE)
        {
            reply->dataType = info.type;
            reply->dataValue = value;
            reply->totalCount = 0;
            if (reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
    91f0:	e02c      	b.n	924c <dlms_getValueFromData+0x108>
                reply->readPosition = reply->data.position;
            }
        }
        else
        {
            if (reply->dataValue.vt == DLMS_DATA_TYPE_NONE)
    91f2:	683b      	ldr	r3, [r7, #0]
    91f4:	7e1b      	ldrb	r3, [r3, #24]
    91f6:	2b00      	cmp	r3, #0
    91f8:	d108      	bne.n	920c <dlms_getValueFromData+0xc8>
            {
                reply->dataValue = value;
    91fa:	683b      	ldr	r3, [r7, #0]
    91fc:	f103 0418 	add.w	r4, r3, #24
    9200:	f107 0310 	add.w	r3, r7, #16
    9204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    920a:	e01f      	b.n	924c <dlms_getValueFromData+0x108>
            }
            else
            {
                for (pos = 0; pos != value.Arr->size; ++pos)
    920c:	2300      	movs	r3, #0
    920e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9210:	e016      	b.n	9240 <dlms_getValueFromData+0xfc>
                {
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
    9212:	69bb      	ldr	r3, [r7, #24]
    9214:	f107 0220 	add.w	r2, r7, #32
    9218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    921a:	4618      	mov	r0, r3
    921c:	f01d fe26 	bl	26e6c <va_getByIndex>
    9220:	6278      	str	r0, [r7, #36]	; 0x24
    9222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9224:	2b00      	cmp	r3, #0
    9226:	d001      	beq.n	922c <dlms_getValueFromData+0xe8>
                    {
                        return ret;
    9228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    922a:	e037      	b.n	929c <dlms_getValueFromData+0x158>
                    }
                    va_push(reply->dataValue.Arr, tmp);
    922c:	683b      	ldr	r3, [r7, #0]
    922e:	6a1b      	ldr	r3, [r3, #32]
    9230:	6a3a      	ldr	r2, [r7, #32]
    9232:	4611      	mov	r1, r2
    9234:	4618      	mov	r0, r3
    9236:	f01d fd31 	bl	26c9c <va_push>
            {
                reply->dataValue = value;
            }
            else
            {
                for (pos = 0; pos != value.Arr->size; ++pos)
    923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    923c:	3301      	adds	r3, #1
    923e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9240:	69bb      	ldr	r3, [r7, #24]
    9242:	88db      	ldrh	r3, [r3, #6]
    9244:	461a      	mov	r2, r3
    9246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9248:	429a      	cmp	r2, r3
    924a:	d1e2      	bne.n	9212 <dlms_getValueFromData+0xce>
                    }
                    va_push(reply->dataValue.Arr, tmp);
                }
            }
        }
        reply->readPosition = reply->data.position;
    924c:	683b      	ldr	r3, [r7, #0]
    924e:	899a      	ldrh	r2, [r3, #12]
    9250:	683b      	ldr	r3, [r7, #0]
    9252:	855a      	strh	r2, [r3, #42]	; 0x2a
        // Element count.
        reply->totalCount = info.count;
    9254:	897a      	ldrh	r2, [r7, #10]
    9256:	683b      	ldr	r3, [r7, #0]
    9258:	851a      	strh	r2, [r3, #40]	; 0x28
    925a:	e00a      	b.n	9272 <dlms_getValueFromData+0x12e>
    }
    else if (info.compleate
    925c:	7b7b      	ldrb	r3, [r7, #13]
    925e:	2b00      	cmp	r3, #0
    9260:	d007      	beq.n	9272 <dlms_getValueFromData+0x12e>
        && reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
    9262:	683b      	ldr	r3, [r7, #0]
    9264:	785b      	ldrb	r3, [r3, #1]
    9266:	2b0f      	cmp	r3, #15
    9268:	d103      	bne.n	9272 <dlms_getValueFromData+0x12e>
    {
        // If last item is null. This is a special case.
        reply->readPosition = reply->data.position;
    926a:	683b      	ldr	r3, [r7, #0]
    926c:	899a      	ldrh	r2, [r3, #12]
    926e:	683b      	ldr	r3, [r7, #0]
    9270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    reply->data.position = index;
    9272:	683b      	ldr	r3, [r7, #0]
    9274:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    9276:	819a      	strh	r2, [r3, #12]

    // If last data frame of the data block is read.
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
    9278:	683b      	ldr	r3, [r7, #0]
    927a:	785b      	ldrb	r3, [r3, #1]
    927c:	2b0f      	cmp	r3, #15
    927e:	d00c      	beq.n	929a <dlms_getValueFromData+0x156>
        && info.compleate && reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    9280:	7b7b      	ldrb	r3, [r7, #13]
    9282:	2b00      	cmp	r3, #0
    9284:	d009      	beq.n	929a <dlms_getValueFromData+0x156>
    9286:	683b      	ldr	r3, [r7, #0]
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	2b00      	cmp	r3, #0
    928c:	d105      	bne.n	929a <dlms_getValueFromData+0x156>
    {
        // If all blocks are read.
        resetBlockIndex(settings);
    928e:	6878      	ldr	r0, [r7, #4]
    9290:	f002 fd12 	bl	bcb8 <resetBlockIndex>
        reply->data.position = 0;
    9294:	683b      	ldr	r3, [r7, #0]
    9296:	2200      	movs	r2, #0
    9298:	819a      	strh	r2, [r3, #12]
    }
    return 0;
    929a:	2300      	movs	r3, #0
}
    929c:	4618      	mov	r0, r3
    929e:	3734      	adds	r7, #52	; 0x34
    92a0:	46bd      	mov	sp, r7
    92a2:	bd90      	pop	{r4, r7, pc}

000092a4 <dlms_readResponseDataBlockResult>:

int dlms_readResponseDataBlockResult(
    dlmsSettings* settings,
    gxReplyData* reply,
    unsigned short index)
{
    92a4:	b580      	push	{r7, lr}
    92a6:	b088      	sub	sp, #32
    92a8:	af00      	add	r7, sp, #0
    92aa:	60f8      	str	r0, [r7, #12]
    92ac:	60b9      	str	r1, [r7, #8]
    92ae:	4613      	mov	r3, r2
    92b0:	80fb      	strh	r3, [r7, #6]
    int ret;
    unsigned short number;
    unsigned short blockLength;
    unsigned char lastBlock;
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
    92b2:	68bb      	ldr	r3, [r7, #8]
    92b4:	3304      	adds	r3, #4
    92b6:	f107 0217 	add.w	r2, r7, #23
    92ba:	4611      	mov	r1, r2
    92bc:	4618      	mov	r0, r3
    92be:	f7fa fa75 	bl	37ac <bb_getUInt8>
    92c2:	61f8      	str	r0, [r7, #28]
    92c4:	69fb      	ldr	r3, [r7, #28]
    92c6:	2b00      	cmp	r3, #0
    92c8:	d001      	beq.n	92ce <dlms_readResponseDataBlockResult+0x2a>
    {
        return ret;
    92ca:	69fb      	ldr	r3, [r7, #28]
    92cc:	e074      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    // Get Block number.
    if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
    92ce:	68bb      	ldr	r3, [r7, #8]
    92d0:	3304      	adds	r3, #4
    92d2:	f107 021a 	add.w	r2, r7, #26
    92d6:	4611      	mov	r1, r2
    92d8:	4618      	mov	r0, r3
    92da:	f7fa fac9 	bl	3870 <bb_getUInt16>
    92de:	61f8      	str	r0, [r7, #28]
    92e0:	69fb      	ldr	r3, [r7, #28]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d001      	beq.n	92ea <dlms_readResponseDataBlockResult+0x46>
    {
        return ret;
    92e6:	69fb      	ldr	r3, [r7, #28]
    92e8:	e066      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    if (hlp_getObjectCount2(&reply->data, &blockLength) != 0)
    92ea:	68bb      	ldr	r3, [r7, #8]
    92ec:	3304      	adds	r3, #4
    92ee:	f107 0218 	add.w	r2, r7, #24
    92f2:	4611      	mov	r1, r2
    92f4:	4618      	mov	r0, r3
    92f6:	f018 faa9 	bl	2184c <hlp_getObjectCount2>
    92fa:	4603      	mov	r3, r0
    92fc:	2b00      	cmp	r3, #0
    92fe:	d002      	beq.n	9306 <dlms_readResponseDataBlockResult+0x62>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    9300:	f44f 7382 	mov.w	r3, #260	; 0x104
    9304:	e058      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    // Is Last block.
    if (!lastBlock)
    9306:	7dfb      	ldrb	r3, [r7, #23]
    9308:	2b00      	cmp	r3, #0
    930a:	d107      	bne.n	931c <dlms_readResponseDataBlockResult+0x78>
    {
        reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
    930c:	68bb      	ldr	r3, [r7, #8]
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	f043 0302 	orr.w	r3, r3, #2
    9314:	b2da      	uxtb	r2, r3
    9316:	68bb      	ldr	r3, [r7, #8]
    9318:	701a      	strb	r2, [r3, #0]
    931a:	e006      	b.n	932a <dlms_readResponseDataBlockResult+0x86>
    }
    else
    {
        reply->moreData &= ~DLMS_DATA_REQUEST_TYPES_BLOCK;
    931c:	68bb      	ldr	r3, [r7, #8]
    931e:	781b      	ldrb	r3, [r3, #0]
    9320:	f023 0302 	bic.w	r3, r3, #2
    9324:	b2da      	uxtb	r2, r3
    9326:	68bb      	ldr	r3, [r7, #8]
    9328:	701a      	strb	r2, [r3, #0]
    }
    // If meter's block index is zero based.
    if (number != 1 && settings->blockIndex == 1)
    932a:	8b7b      	ldrh	r3, [r7, #26]
    932c:	2b01      	cmp	r3, #1
    932e:	d009      	beq.n	9344 <dlms_readResponseDataBlockResult+0xa0>
    9330:	68fb      	ldr	r3, [r7, #12]
    9332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    9336:	2b01      	cmp	r3, #1
    9338:	d104      	bne.n	9344 <dlms_readResponseDataBlockResult+0xa0>
    {
        settings->blockIndex = number;
    933a:	8b7b      	ldrh	r3, [r7, #26]
    933c:	461a      	mov	r2, r3
    933e:	68fb      	ldr	r3, [r7, #12]
    9340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    if (number != settings->blockIndex)
    9344:	8b7b      	ldrh	r3, [r7, #26]
    9346:	461a      	mov	r2, r3
    9348:	68fb      	ldr	r3, [r7, #12]
    934a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    934e:	429a      	cmp	r2, r3
    9350:	d001      	beq.n	9356 <dlms_readResponseDataBlockResult+0xb2>
    {
        //Invalid Block number
        return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    9352:	2313      	movs	r3, #19
    9354:	e030      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    // If whole block is not read.
    if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    9356:	68bb      	ldr	r3, [r7, #8]
    9358:	781b      	ldrb	r3, [r3, #0]
    935a:	f003 0301 	and.w	r3, r3, #1
    935e:	2b00      	cmp	r3, #0
    9360:	d009      	beq.n	9376 <dlms_readResponseDataBlockResult+0xd2>
    {
        dlms_getDataFromBlock(&reply->data, index);
    9362:	68bb      	ldr	r3, [r7, #8]
    9364:	3304      	adds	r3, #4
    9366:	88fa      	ldrh	r2, [r7, #6]
    9368:	4611      	mov	r1, r2
    936a:	4618      	mov	r0, r3
    936c:	f7ff fcc2 	bl	8cf4 <dlms_getDataFromBlock>
        return DLMS_ERROR_CODE_FALSE;
    9370:	f04f 33ff 	mov.w	r3, #4294967295
    9374:	e020      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    if (blockLength != reply->data.size - reply->data.position)
    9376:	8b3b      	ldrh	r3, [r7, #24]
    9378:	461a      	mov	r2, r3
    937a:	68bb      	ldr	r3, [r7, #8]
    937c:	895b      	ldrh	r3, [r3, #10]
    937e:	4619      	mov	r1, r3
    9380:	68bb      	ldr	r3, [r7, #8]
    9382:	899b      	ldrh	r3, [r3, #12]
    9384:	1acb      	subs	r3, r1, r3
    9386:	429a      	cmp	r2, r3
    9388:	d001      	beq.n	938e <dlms_readResponseDataBlockResult+0xea>
    {
        //Invalid block length.
        return DLMS_ERROR_CODE_BLOCK_UNAVAILABLE;
    938a:	230e      	movs	r3, #14
    938c:	e014      	b.n	93b8 <dlms_readResponseDataBlockResult+0x114>
    }
    reply->command = DLMS_COMMAND_NONE;
    938e:	68bb      	ldr	r3, [r7, #8]
    9390:	2200      	movs	r2, #0
    9392:	705a      	strb	r2, [r3, #1]

    dlms_getDataFromBlock(&reply->data, index);
    9394:	68bb      	ldr	r3, [r7, #8]
    9396:	3304      	adds	r3, #4
    9398:	88fa      	ldrh	r2, [r7, #6]
    939a:	4611      	mov	r1, r2
    939c:	4618      	mov	r0, r3
    939e:	f7ff fca9 	bl	8cf4 <dlms_getDataFromBlock>
    reply->totalCount = 0;
    93a2:	68bb      	ldr	r3, [r7, #8]
    93a4:	2200      	movs	r2, #0
    93a6:	851a      	strh	r2, [r3, #40]	; 0x28
    // If last packet and data is not try to peek.
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    93a8:	68bb      	ldr	r3, [r7, #8]
    93aa:	781b      	ldrb	r3, [r3, #0]
    93ac:	2b00      	cmp	r3, #0
    93ae:	d102      	bne.n	93b6 <dlms_readResponseDataBlockResult+0x112>
    {
        resetBlockIndex(settings);
    93b0:	68f8      	ldr	r0, [r7, #12]
    93b2:	f002 fc81 	bl	bcb8 <resetBlockIndex>
    }
    return ret;
    93b6:	69fb      	ldr	r3, [r7, #28]
}
    93b8:	4618      	mov	r0, r3
    93ba:	3720      	adds	r7, #32
    93bc:	46bd      	mov	sp, r7
    93be:	bd80      	pop	{r7, pc}

000093c0 <dlms_handleReadResponse>:
int dlms_handleReadResponse(
    dlmsSettings* settings,
    gxReplyData* reply,
    unsigned short index)
{
    93c0:	b580      	push	{r7, lr}
    93c2:	b08c      	sub	sp, #48	; 0x30
    93c4:	af00      	add	r7, sp, #0
    93c6:	60f8      	str	r0, [r7, #12]
    93c8:	60b9      	str	r1, [r7, #8]
    93ca:	4613      	mov	r3, r2
    93cc:	80fb      	strh	r3, [r7, #6]
    int ret;
    unsigned char ch;
    unsigned short number;
    unsigned short pos, cnt = reply->totalCount;
    93ce:	68bb      	ldr	r3, [r7, #8]
    93d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93d2:	847b      	strh	r3, [r7, #34]	; 0x22
    DLMS_SINGLE_READ_RESPONSE type;
    variantArray values;

    // If we are reading value first time or block is handed.
    unsigned char first = reply->totalCount == 0 || reply->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
    93d4:	68bb      	ldr	r3, [r7, #8]
    93d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93d8:	2b00      	cmp	r3, #0
    93da:	d003      	beq.n	93e4 <dlms_handleReadResponse+0x24>
    93dc:	68bb      	ldr	r3, [r7, #8]
    93de:	78db      	ldrb	r3, [r3, #3]
    93e0:	2b02      	cmp	r3, #2
    93e2:	d101      	bne.n	93e8 <dlms_handleReadResponse+0x28>
    93e4:	2301      	movs	r3, #1
    93e6:	e000      	b.n	93ea <dlms_handleReadResponse+0x2a>
    93e8:	2300      	movs	r3, #0
    93ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if (first)
    93ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    93f2:	2b00      	cmp	r3, #0
    93f4:	d010      	beq.n	9418 <dlms_handleReadResponse+0x58>
    {
        if (hlp_getObjectCount2(&reply->data, &cnt) != 0)
    93f6:	68bb      	ldr	r3, [r7, #8]
    93f8:	3304      	adds	r3, #4
    93fa:	f107 0222 	add.w	r2, r7, #34	; 0x22
    93fe:	4611      	mov	r1, r2
    9400:	4618      	mov	r0, r3
    9402:	f018 fa23 	bl	2184c <hlp_getObjectCount2>
    9406:	4603      	mov	r3, r0
    9408:	2b00      	cmp	r3, #0
    940a:	d002      	beq.n	9412 <dlms_handleReadResponse+0x52>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    940c:	f44f 7382 	mov.w	r3, #260	; 0x104
    9410:	e106      	b.n	9620 <dlms_handleReadResponse+0x260>
        }
        reply->totalCount = cnt;
    9412:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    9414:	68bb      	ldr	r3, [r7, #8]
    9416:	851a      	strh	r2, [r3, #40]	; 0x28
    }
    va_init(&values);
    9418:	f107 0314 	add.w	r3, r7, #20
    941c:	4618      	mov	r0, r3
    941e:	f01d fbe7 	bl	26bf0 <va_init>
    for (pos = 0; pos != cnt; ++pos)
    9422:	2300      	movs	r3, #0
    9424:	85fb      	strh	r3, [r7, #46]	; 0x2e
    9426:	e0d8      	b.n	95da <dlms_handleReadResponse+0x21a>
    {
        if (reply->data.size - reply->data.position == 0)
    9428:	68bb      	ldr	r3, [r7, #8]
    942a:	895a      	ldrh	r2, [r3, #10]
    942c:	68bb      	ldr	r3, [r7, #8]
    942e:	899b      	ldrh	r3, [r3, #12]
    9430:	429a      	cmp	r2, r3
    9432:	d10b      	bne.n	944c <dlms_handleReadResponse+0x8c>
        {
            if (cnt != 1)
    9434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9436:	2b01      	cmp	r3, #1
    9438:	d005      	beq.n	9446 <dlms_handleReadResponse+0x86>
            {
                dlms_getDataFromBlock(&reply->data, 0);
    943a:	68bb      	ldr	r3, [r7, #8]
    943c:	3304      	adds	r3, #4
    943e:	2100      	movs	r1, #0
    9440:	4618      	mov	r0, r3
    9442:	f7ff fc57 	bl	8cf4 <dlms_getDataFromBlock>
            }
            return DLMS_ERROR_CODE_FALSE;
    9446:	f04f 33ff 	mov.w	r3, #4294967295
    944a:	e0e9      	b.n	9620 <dlms_handleReadResponse+0x260>
        }
        // Get status code. Status code is begin of each PDU.
        if (first)
    944c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    9450:	2b00      	cmp	r3, #0
    9452:	d016      	beq.n	9482 <dlms_handleReadResponse+0xc2>
        {
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    9454:	68bb      	ldr	r3, [r7, #8]
    9456:	3304      	adds	r3, #4
    9458:	f107 0227 	add.w	r2, r7, #39	; 0x27
    945c:	4611      	mov	r1, r2
    945e:	4618      	mov	r0, r3
    9460:	f7fa f9a4 	bl	37ac <bb_getUInt8>
    9464:	62b8      	str	r0, [r7, #40]	; 0x28
    9466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9468:	2b00      	cmp	r3, #0
    946a:	d001      	beq.n	9470 <dlms_handleReadResponse+0xb0>
            {
                return ret;
    946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    946e:	e0d7      	b.n	9620 <dlms_handleReadResponse+0x260>
            }
            reply->commandType = ch;
    9470:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    9474:	68bb      	ldr	r3, [r7, #8]
    9476:	70da      	strb	r2, [r3, #3]
            type = (DLMS_SINGLE_READ_RESPONSE)ch;
    9478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    947c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    9480:	e003      	b.n	948a <dlms_handleReadResponse+0xca>
        }
        else
        {
            type = (DLMS_SINGLE_READ_RESPONSE)reply->commandType;
    9482:	68bb      	ldr	r3, [r7, #8]
    9484:	78db      	ldrb	r3, [r3, #3]
    9486:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }
        switch (type)
    948a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    948e:	2b03      	cmp	r3, #3
    9490:	f200 809c 	bhi.w	95cc <dlms_handleReadResponse+0x20c>
    9494:	a201      	add	r2, pc, #4	; (adr r2, 949c <dlms_handleReadResponse+0xdc>)
    9496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    949a:	bf00      	nop
    949c:	000094ad 	.word	0x000094ad
    94a0:	00009547 	.word	0x00009547
    94a4:	00009569 	.word	0x00009569
    94a8:	00009581 	.word	0x00009581
        {
        case DLMS_SINGLE_READ_RESPONSE_DATA:
            if (cnt == 1)
    94ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    94ae:	2b01      	cmp	r3, #1
    94b0:	d107      	bne.n	94c2 <dlms_handleReadResponse+0x102>
            {
                ret = dlms_getDataFromBlock(&reply->data, 0);
    94b2:	68bb      	ldr	r3, [r7, #8]
    94b4:	3304      	adds	r3, #4
    94b6:	2100      	movs	r1, #0
    94b8:	4618      	mov	r0, r3
    94ba:	f7ff fc1b 	bl	8cf4 <dlms_getDataFromBlock>
    94be:	62b8      	str	r0, [r7, #40]	; 0x28
                }
                reply->data.position = reply->readPosition;
                va_push(&values, &reply->dataValue);
                var_clear(&reply->dataValue);
            }
            break;
    94c0:	e088      	b.n	95d4 <dlms_handleReadResponse+0x214>
                ret = dlms_getDataFromBlock(&reply->data, 0);
            }
            else
            {
                // If read multiple items.
                reply->readPosition = reply->data.position;
    94c2:	68bb      	ldr	r3, [r7, #8]
    94c4:	899a      	ldrh	r2, [r3, #12]
    94c6:	68bb      	ldr	r3, [r7, #8]
    94c8:	855a      	strh	r2, [r3, #42]	; 0x2a
                dlms_getValueFromData(settings, reply);
    94ca:	68b9      	ldr	r1, [r7, #8]
    94cc:	68f8      	ldr	r0, [r7, #12]
    94ce:	f7ff fe39 	bl	9144 <dlms_getValueFromData>
                if (reply->data.position == (unsigned long)reply->readPosition)
    94d2:	68bb      	ldr	r3, [r7, #8]
    94d4:	899a      	ldrh	r2, [r3, #12]
    94d6:	68bb      	ldr	r3, [r7, #8]
    94d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    94da:	429a      	cmp	r2, r3
    94dc:	d120      	bne.n	9520 <dlms_handleReadResponse+0x160>
                {
                    // If multiple values remove command.
                    if (cnt != 1 && reply->totalCount == 0)
    94de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    94e0:	2b01      	cmp	r3, #1
    94e2:	d006      	beq.n	94f2 <dlms_handleReadResponse+0x132>
    94e4:	68bb      	ldr	r3, [r7, #8]
    94e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    94e8:	2b00      	cmp	r3, #0
    94ea:	d102      	bne.n	94f2 <dlms_handleReadResponse+0x132>
                    {
                        ++index;
    94ec:	88fb      	ldrh	r3, [r7, #6]
    94ee:	3301      	adds	r3, #1
    94f0:	80fb      	strh	r3, [r7, #6]
                    }
                    reply->totalCount = 0;
    94f2:	68bb      	ldr	r3, [r7, #8]
    94f4:	2200      	movs	r2, #0
    94f6:	851a      	strh	r2, [r3, #40]	; 0x28
                    reply->data.position = index;
    94f8:	68bb      	ldr	r3, [r7, #8]
    94fa:	88fa      	ldrh	r2, [r7, #6]
    94fc:	819a      	strh	r2, [r3, #12]
                    dlms_getDataFromBlock(&reply->data, 0);
    94fe:	68bb      	ldr	r3, [r7, #8]
    9500:	3304      	adds	r3, #4
    9502:	2100      	movs	r1, #0
    9504:	4618      	mov	r0, r3
    9506:	f7ff fbf5 	bl	8cf4 <dlms_getDataFromBlock>
                    var_clear(&reply->dataValue);
    950a:	68bb      	ldr	r3, [r7, #8]
    950c:	3318      	adds	r3, #24
    950e:	4618      	mov	r0, r3
    9510:	f01c fe1a 	bl	26148 <var_clear>
                    // Ask that data is parsed after last block is received.
                    reply->commandType = DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
    9514:	68bb      	ldr	r3, [r7, #8]
    9516:	2202      	movs	r2, #2
    9518:	70da      	strb	r2, [r3, #3]
                    return DLMS_ERROR_CODE_FALSE;
    951a:	f04f 33ff 	mov.w	r3, #4294967295
    951e:	e07f      	b.n	9620 <dlms_handleReadResponse+0x260>
                }
                reply->data.position = reply->readPosition;
    9520:	68bb      	ldr	r3, [r7, #8]
    9522:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    9524:	68bb      	ldr	r3, [r7, #8]
    9526:	819a      	strh	r2, [r3, #12]
                va_push(&values, &reply->dataValue);
    9528:	68bb      	ldr	r3, [r7, #8]
    952a:	f103 0218 	add.w	r2, r3, #24
    952e:	f107 0314 	add.w	r3, r7, #20
    9532:	4611      	mov	r1, r2
    9534:	4618      	mov	r0, r3
    9536:	f01d fbb1 	bl	26c9c <va_push>
                var_clear(&reply->dataValue);
    953a:	68bb      	ldr	r3, [r7, #8]
    953c:	3318      	adds	r3, #24
    953e:	4618      	mov	r0, r3
    9540:	f01c fe02 	bl	26148 <var_clear>
            }
            break;
    9544:	e046      	b.n	95d4 <dlms_handleReadResponse+0x214>
        case DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR:
            // Get error code.
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    9546:	68bb      	ldr	r3, [r7, #8]
    9548:	3304      	adds	r3, #4
    954a:	f107 0227 	add.w	r2, r7, #39	; 0x27
    954e:	4611      	mov	r1, r2
    9550:	4618      	mov	r0, r3
    9552:	f7fa f92b 	bl	37ac <bb_getUInt8>
    9556:	62b8      	str	r0, [r7, #40]	; 0x28
    9558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    955a:	2b00      	cmp	r3, #0
    955c:	d001      	beq.n	9562 <dlms_handleReadResponse+0x1a2>
            {
                return ret;
    955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9560:	e05e      	b.n	9620 <dlms_handleReadResponse+0x260>
            }
            return ch;
    9562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9566:	e05b      	b.n	9620 <dlms_handleReadResponse+0x260>
            break;
        case DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT:
            if ((ret = dlms_readResponseDataBlockResult(settings, reply, index)) != 0)
    9568:	88fb      	ldrh	r3, [r7, #6]
    956a:	461a      	mov	r2, r3
    956c:	68b9      	ldr	r1, [r7, #8]
    956e:	68f8      	ldr	r0, [r7, #12]
    9570:	f7ff fe98 	bl	92a4 <dlms_readResponseDataBlockResult>
    9574:	62b8      	str	r0, [r7, #40]	; 0x28
    9576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9578:	2b00      	cmp	r3, #0
    957a:	d02a      	beq.n	95d2 <dlms_handleReadResponse+0x212>
            {
                return ret;
    957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    957e:	e04f      	b.n	9620 <dlms_handleReadResponse+0x260>
            }
            break;
        case DLMS_SINGLE_READ_RESPONSE_BLOCK_NUMBER:
            // Get Block number.
            if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
    9580:	68bb      	ldr	r3, [r7, #8]
    9582:	3304      	adds	r3, #4
    9584:	f107 0224 	add.w	r2, r7, #36	; 0x24
    9588:	4611      	mov	r1, r2
    958a:	4618      	mov	r0, r3
    958c:	f7fa f970 	bl	3870 <bb_getUInt16>
    9590:	62b8      	str	r0, [r7, #40]	; 0x28
    9592:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9594:	2b00      	cmp	r3, #0
    9596:	d001      	beq.n	959c <dlms_handleReadResponse+0x1dc>
            {
                return ret;
    9598:	6abb      	ldr	r3, [r7, #40]	; 0x28
    959a:	e041      	b.n	9620 <dlms_handleReadResponse+0x260>
            }
            if (number != settings->blockIndex)
    959c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    959e:	461a      	mov	r2, r3
    95a0:	68fb      	ldr	r3, [r7, #12]
    95a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    95a6:	429a      	cmp	r2, r3
    95a8:	d001      	beq.n	95ae <dlms_handleReadResponse+0x1ee>
            {
                //Invalid Block number
                return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    95aa:	2313      	movs	r3, #19
    95ac:	e038      	b.n	9620 <dlms_handleReadResponse+0x260>
            }
            ++settings->blockIndex;
    95ae:	68fb      	ldr	r3, [r7, #12]
    95b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    95b4:	1c5a      	adds	r2, r3, #1
    95b6:	68fb      	ldr	r3, [r7, #12]
    95b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
    95bc:	68bb      	ldr	r3, [r7, #8]
    95be:	781b      	ldrb	r3, [r3, #0]
    95c0:	f043 0302 	orr.w	r3, r3, #2
    95c4:	b2da      	uxtb	r2, r3
    95c6:	68bb      	ldr	r3, [r7, #8]
    95c8:	701a      	strb	r2, [r3, #0]
            break;
    95ca:	e003      	b.n	95d4 <dlms_handleReadResponse+0x214>
        default:
            //HandleReadResponse failed. Invalid tag.
            return DLMS_ERROR_CODE_INVALID_TAG;
    95cc:	f240 130f 	movw	r3, #271	; 0x10f
    95d0:	e026      	b.n	9620 <dlms_handleReadResponse+0x260>
        case DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT:
            if ((ret = dlms_readResponseDataBlockResult(settings, reply, index)) != 0)
            {
                return ret;
            }
            break;
    95d2:	bf00      	nop
            return DLMS_ERROR_CODE_OUTOFMEMORY;
        }
        reply->totalCount = cnt;
    }
    va_init(&values);
    for (pos = 0; pos != cnt; ++pos)
    95d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    95d6:	3301      	adds	r3, #1
    95d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    95da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    95dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
    95de:	429a      	cmp	r2, r3
    95e0:	f47f af22 	bne.w	9428 <dlms_handleReadResponse+0x68>
        default:
            //HandleReadResponse failed. Invalid tag.
            return DLMS_ERROR_CODE_INVALID_TAG;
        }
    }
    if (values.size != 0)
    95e4:	8b7b      	ldrh	r3, [r7, #26]
    95e6:	2b00      	cmp	r3, #0
    95e8:	d013      	beq.n	9612 <dlms_handleReadResponse+0x252>
    {
        reply->dataValue.Arr = gxmalloc(sizeof(variantArray));
    95ea:	200c      	movs	r0, #12
    95ec:	f020 fa2a 	bl	29a44 <malloc>
    95f0:	4603      	mov	r3, r0
    95f2:	461a      	mov	r2, r3
    95f4:	68bb      	ldr	r3, [r7, #8]
    95f6:	621a      	str	r2, [r3, #32]
        va_init(reply->dataValue.Arr);
    95f8:	68bb      	ldr	r3, [r7, #8]
    95fa:	6a1b      	ldr	r3, [r3, #32]
    95fc:	4618      	mov	r0, r3
    95fe:	f01d faf7 	bl	26bf0 <va_init>
        va_attach(reply->dataValue.Arr, &values);
    9602:	68bb      	ldr	r3, [r7, #8]
    9604:	6a1b      	ldr	r3, [r3, #32]
    9606:	f107 0214 	add.w	r2, r7, #20
    960a:	4611      	mov	r1, r2
    960c:	4618      	mov	r0, r3
    960e:	f01d fbdf 	bl	26dd0 <va_attach>
    }
    if (cnt != 1)
    9612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9614:	2b01      	cmp	r3, #1
    9616:	d002      	beq.n	961e <dlms_handleReadResponse+0x25e>
    {
        return DLMS_ERROR_CODE_FALSE;
    9618:	f04f 33ff 	mov.w	r3, #4294967295
    961c:	e000      	b.n	9620 <dlms_handleReadResponse+0x260>
    }
    return 0;
    961e:	2300      	movs	r3, #0
}
    9620:	4618      	mov	r0, r3
    9622:	3730      	adds	r7, #48	; 0x30
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}

00009628 <dlms_handleMethodResponse>:

int dlms_handleMethodResponse(
    gxReplyData* data)
{
    9628:	b580      	push	{r7, lr}
    962a:	b084      	sub	sp, #16
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
    int ret;
    unsigned char ch, type;
    // Get type.
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	3304      	adds	r3, #4
    9634:	f107 020a 	add.w	r2, r7, #10
    9638:	4611      	mov	r1, r2
    963a:	4618      	mov	r0, r3
    963c:	f7fa f8b6 	bl	37ac <bb_getUInt8>
    9640:	60f8      	str	r0, [r7, #12]
    9642:	68fb      	ldr	r3, [r7, #12]
    9644:	2b00      	cmp	r3, #0
    9646:	d001      	beq.n	964c <dlms_handleMethodResponse+0x24>
    {
        return ret;
    9648:	68fb      	ldr	r3, [r7, #12]
    964a:	e087      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    // Get invoke ID and priority.
    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	3304      	adds	r3, #4
    9650:	f107 020b 	add.w	r2, r7, #11
    9654:	4611      	mov	r1, r2
    9656:	4618      	mov	r0, r3
    9658:	f7fa f8a8 	bl	37ac <bb_getUInt8>
    965c:	60f8      	str	r0, [r7, #12]
    965e:	68fb      	ldr	r3, [r7, #12]
    9660:	2b00      	cmp	r3, #0
    9662:	d001      	beq.n	9668 <dlms_handleMethodResponse+0x40>
    {
        return ret;
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	e079      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    //Action-Response-Normal
    if (type == 1)
    9668:	7abb      	ldrb	r3, [r7, #10]
    966a:	2b01      	cmp	r3, #1
    966c:	d160      	bne.n	9730 <dlms_handleMethodResponse+0x108>
    {
        //Get Action-Result
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    966e:	687b      	ldr	r3, [r7, #4]
    9670:	3304      	adds	r3, #4
    9672:	f107 020b 	add.w	r2, r7, #11
    9676:	4611      	mov	r1, r2
    9678:	4618      	mov	r0, r3
    967a:	f7fa f897 	bl	37ac <bb_getUInt8>
    967e:	60f8      	str	r0, [r7, #12]
    9680:	68fb      	ldr	r3, [r7, #12]
    9682:	2b00      	cmp	r3, #0
    9684:	d001      	beq.n	968a <dlms_handleMethodResponse+0x62>
        {
            return ret;
    9686:	68fb      	ldr	r3, [r7, #12]
    9688:	e068      	b.n	975c <dlms_handleMethodResponse+0x134>
        }
        if (ch != 0)
    968a:	7afb      	ldrb	r3, [r7, #11]
    968c:	2b00      	cmp	r3, #0
    968e:	d001      	beq.n	9694 <dlms_handleMethodResponse+0x6c>
        {
            return ch;
    9690:	7afb      	ldrb	r3, [r7, #11]
    9692:	e063      	b.n	975c <dlms_handleMethodResponse+0x134>
        }
        // Get data if exists. Some meters do not return here anything.
        if (data->data.position < data->data.size)
    9694:	687b      	ldr	r3, [r7, #4]
    9696:	899a      	ldrh	r2, [r3, #12]
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	895b      	ldrh	r3, [r3, #10]
    969c:	429a      	cmp	r2, r3
    969e:	d25c      	bcs.n	975a <dlms_handleMethodResponse+0x132>
        {
            //Get-Data-Result.
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	3304      	adds	r3, #4
    96a4:	f107 020b 	add.w	r2, r7, #11
    96a8:	4611      	mov	r1, r2
    96aa:	4618      	mov	r0, r3
    96ac:	f7fa f87e 	bl	37ac <bb_getUInt8>
    96b0:	60f8      	str	r0, [r7, #12]
    96b2:	68fb      	ldr	r3, [r7, #12]
    96b4:	2b00      	cmp	r3, #0
    96b6:	d001      	beq.n	96bc <dlms_handleMethodResponse+0x94>
            {
                return ret;
    96b8:	68fb      	ldr	r3, [r7, #12]
    96ba:	e04f      	b.n	975c <dlms_handleMethodResponse+0x134>
            }
            //If data.
            if (ch == 0)
    96bc:	7afb      	ldrb	r3, [r7, #11]
    96be:	2b00      	cmp	r3, #0
    96c0:	d107      	bne.n	96d2 <dlms_handleMethodResponse+0xaa>
            {
                return dlms_getDataFromBlock(&data->data, 0);
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	3304      	adds	r3, #4
    96c6:	2100      	movs	r1, #0
    96c8:	4618      	mov	r0, r3
    96ca:	f7ff fb13 	bl	8cf4 <dlms_getDataFromBlock>
    96ce:	4603      	mov	r3, r0
    96d0:	e044      	b.n	975c <dlms_handleMethodResponse+0x134>
            }
            else if (ch == 1) //Data-Access-Result
    96d2:	7afb      	ldrb	r3, [r7, #11]
    96d4:	2b01      	cmp	r3, #1
    96d6:	d128      	bne.n	972a <dlms_handleMethodResponse+0x102>
            {
                //Get Data-Access-Result
                if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	3304      	adds	r3, #4
    96dc:	f107 020b 	add.w	r2, r7, #11
    96e0:	4611      	mov	r1, r2
    96e2:	4618      	mov	r0, r3
    96e4:	f7fa f862 	bl	37ac <bb_getUInt8>
    96e8:	60f8      	str	r0, [r7, #12]
    96ea:	68fb      	ldr	r3, [r7, #12]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d001      	beq.n	96f4 <dlms_handleMethodResponse+0xcc>
                {
                    return ret;
    96f0:	68fb      	ldr	r3, [r7, #12]
    96f2:	e033      	b.n	975c <dlms_handleMethodResponse+0x134>
                }
                if (ch != 0)
    96f4:	7afb      	ldrb	r3, [r7, #11]
    96f6:	2b00      	cmp	r3, #0
    96f8:	d00f      	beq.n	971a <dlms_handleMethodResponse+0xf2>
                {
                    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	3304      	adds	r3, #4
    96fe:	f107 020b 	add.w	r2, r7, #11
    9702:	4611      	mov	r1, r2
    9704:	4618      	mov	r0, r3
    9706:	f7fa f851 	bl	37ac <bb_getUInt8>
    970a:	60f8      	str	r0, [r7, #12]
    970c:	68fb      	ldr	r3, [r7, #12]
    970e:	2b00      	cmp	r3, #0
    9710:	d001      	beq.n	9716 <dlms_handleMethodResponse+0xee>
                    {
                        return ret;
    9712:	68fb      	ldr	r3, [r7, #12]
    9714:	e022      	b.n	975c <dlms_handleMethodResponse+0x134>
                    }
                    return ch;
    9716:	7afb      	ldrb	r3, [r7, #11]
    9718:	e020      	b.n	975c <dlms_handleMethodResponse+0x134>
                }
                return dlms_getDataFromBlock(&data->data, 0);
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	3304      	adds	r3, #4
    971e:	2100      	movs	r1, #0
    9720:	4618      	mov	r0, r3
    9722:	f7ff fae7 	bl	8cf4 <dlms_getDataFromBlock>
    9726:	4603      	mov	r3, r0
    9728:	e018      	b.n	975c <dlms_handleMethodResponse+0x134>
            }
            else
            {
                return DLMS_ERROR_CODE_INVALID_TAG;
    972a:	f240 130f 	movw	r3, #271	; 0x10f
    972e:	e015      	b.n	975c <dlms_handleMethodResponse+0x134>
            }
            return dlms_getDataFromBlock(&data->data, 0);
        }
    }
    //Action-Response-With-Pblock
    else if (type == 2)
    9730:	7abb      	ldrb	r3, [r7, #10]
    9732:	2b02      	cmp	r3, #2
    9734:	d102      	bne.n	973c <dlms_handleMethodResponse+0x114>
    {
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    9736:	f44f 7380 	mov.w	r3, #256	; 0x100
    973a:	e00f      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    // Action-Response-With-List.
    else if (type == 3)
    973c:	7abb      	ldrb	r3, [r7, #10]
    973e:	2b03      	cmp	r3, #3
    9740:	d102      	bne.n	9748 <dlms_handleMethodResponse+0x120>
    {
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    9742:	f44f 7380 	mov.w	r3, #256	; 0x100
    9746:	e009      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    //Action-Response-Next-Pblock
    else if (type == 4)
    9748:	7abb      	ldrb	r3, [r7, #10]
    974a:	2b04      	cmp	r3, #4
    974c:	d102      	bne.n	9754 <dlms_handleMethodResponse+0x12c>
    {
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    974e:	f44f 7380 	mov.w	r3, #256	; 0x100
    9752:	e003      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    9754:	f44f 7380 	mov.w	r3, #256	; 0x100
    9758:	e000      	b.n	975c <dlms_handleMethodResponse+0x134>
    }
    return DLMS_ERROR_CODE_OK;
    975a:	2300      	movs	r3, #0
}
    975c:	4618      	mov	r0, r3
    975e:	3710      	adds	r7, #16
    9760:	46bd      	mov	sp, r7
    9762:	bd80      	pop	{r7, pc}

00009764 <dlms_handleSetResponse>:
    return dlms_getDataFromBlock(&reply->data, index);
}

int dlms_handleSetResponse(
    gxReplyData* data)
{
    9764:	b580      	push	{r7, lr}
    9766:	b086      	sub	sp, #24
    9768:	af00      	add	r7, sp, #0
    976a:	6078      	str	r0, [r7, #4]
    unsigned char ch, type, invokeId;
    int ret;
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	3304      	adds	r3, #4
    9770:	f107 0212 	add.w	r2, r7, #18
    9774:	4611      	mov	r1, r2
    9776:	4618      	mov	r0, r3
    9778:	f7fa f818 	bl	37ac <bb_getUInt8>
    977c:	6178      	str	r0, [r7, #20]
    977e:	697b      	ldr	r3, [r7, #20]
    9780:	2b00      	cmp	r3, #0
    9782:	d001      	beq.n	9788 <dlms_handleSetResponse+0x24>
    {
        return ret;
    9784:	697b      	ldr	r3, [r7, #20]
    9786:	e03c      	b.n	9802 <dlms_handleSetResponse+0x9e>
    }

    //Invoke ID and priority.
    if ((ret = bb_getUInt8(&data->data, &invokeId)) != 0)
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	3304      	adds	r3, #4
    978c:	f107 0211 	add.w	r2, r7, #17
    9790:	4611      	mov	r1, r2
    9792:	4618      	mov	r0, r3
    9794:	f7fa f80a 	bl	37ac <bb_getUInt8>
    9798:	6178      	str	r0, [r7, #20]
    979a:	697b      	ldr	r3, [r7, #20]
    979c:	2b00      	cmp	r3, #0
    979e:	d001      	beq.n	97a4 <dlms_handleSetResponse+0x40>
    {
        return ret;
    97a0:	697b      	ldr	r3, [r7, #20]
    97a2:	e02e      	b.n	9802 <dlms_handleSetResponse+0x9e>
    }

    // SetResponseNormal
    if (type == DLMS_SET_RESPONSE_TYPE_NORMAL)
    97a4:	7cbb      	ldrb	r3, [r7, #18]
    97a6:	2b01      	cmp	r3, #1
    97a8:	d112      	bne.n	97d0 <dlms_handleSetResponse+0x6c>
    {
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    97aa:	687b      	ldr	r3, [r7, #4]
    97ac:	3304      	adds	r3, #4
    97ae:	f107 0213 	add.w	r2, r7, #19
    97b2:	4611      	mov	r1, r2
    97b4:	4618      	mov	r0, r3
    97b6:	f7f9 fff9 	bl	37ac <bb_getUInt8>
    97ba:	6178      	str	r0, [r7, #20]
    97bc:	697b      	ldr	r3, [r7, #20]
    97be:	2b00      	cmp	r3, #0
    97c0:	d001      	beq.n	97c6 <dlms_handleSetResponse+0x62>
        {
            return ret;
    97c2:	697b      	ldr	r3, [r7, #20]
    97c4:	e01d      	b.n	9802 <dlms_handleSetResponse+0x9e>
        }
        if (ch != 0)
    97c6:	7cfb      	ldrb	r3, [r7, #19]
    97c8:	2b00      	cmp	r3, #0
    97ca:	d019      	beq.n	9800 <dlms_handleSetResponse+0x9c>
        {
            return ch;
    97cc:	7cfb      	ldrb	r3, [r7, #19]
    97ce:	e018      	b.n	9802 <dlms_handleSetResponse+0x9e>
        }
    }
    else if (type == DLMS_SET_RESPONSE_TYPE_DATA_BLOCK || type == DLMS_SET_RESPONSE_TYPE_LAST_DATA_BLOCK)
    97d0:	7cbb      	ldrb	r3, [r7, #18]
    97d2:	2b02      	cmp	r3, #2
    97d4:	d002      	beq.n	97dc <dlms_handleSetResponse+0x78>
    97d6:	7cbb      	ldrb	r3, [r7, #18]
    97d8:	2b03      	cmp	r3, #3
    97da:	d10d      	bne.n	97f8 <dlms_handleSetResponse+0x94>
    {
        unsigned long  tmp;
        if ((ret = bb_getUInt32(&data->data, &tmp)) != 0)
    97dc:	687b      	ldr	r3, [r7, #4]
    97de:	3304      	adds	r3, #4
    97e0:	f107 020c 	add.w	r2, r7, #12
    97e4:	4611      	mov	r1, r2
    97e6:	4618      	mov	r0, r3
    97e8:	f7fa f872 	bl	38d0 <bb_getUInt32>
    97ec:	6178      	str	r0, [r7, #20]
    97ee:	697b      	ldr	r3, [r7, #20]
    97f0:	2b00      	cmp	r3, #0
    97f2:	d004      	beq.n	97fe <dlms_handleSetResponse+0x9a>
        {
            return ret;
    97f4:	697b      	ldr	r3, [r7, #20]
    97f6:	e004      	b.n	9802 <dlms_handleSetResponse+0x9e>
        }
    }
    else
    {
        //Invalid data type.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    97f8:	f44f 7381 	mov.w	r3, #258	; 0x102
    97fc:	e001      	b.n	9802 <dlms_handleSetResponse+0x9e>
        {
            return ch;
        }
    }
    else if (type == DLMS_SET_RESPONSE_TYPE_DATA_BLOCK || type == DLMS_SET_RESPONSE_TYPE_LAST_DATA_BLOCK)
    {
    97fe:	bf00      	nop
    else
    {
        //Invalid data type.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return DLMS_ERROR_CODE_OK;
    9800:	2300      	movs	r3, #0
}
    9802:	4618      	mov	r0, r3
    9804:	3718      	adds	r7, #24
    9806:	46bd      	mov	sp, r7
    9808:	bd80      	pop	{r7, pc}
    980a:	bf00      	nop

0000980c <dlms_changeType2>:

int dlms_changeType2(
    dlmsVARIANT *value,
    DLMS_DATA_TYPE type,
    dlmsVARIANT *newValue)
{
    980c:	b580      	push	{r7, lr}
    980e:	b088      	sub	sp, #32
    9810:	af00      	add	r7, sp, #0
    9812:	60f8      	str	r0, [r7, #12]
    9814:	460b      	mov	r3, r1
    9816:	607a      	str	r2, [r7, #4]
    9818:	72fb      	strb	r3, [r7, #11]
    gxByteBuffer bb;
    if (value->byteArr != NULL)
    981a:	68fb      	ldr	r3, [r7, #12]
    981c:	689b      	ldr	r3, [r3, #8]
    981e:	2b00      	cmp	r3, #0
    9820:	d00c      	beq.n	983c <dlms_changeType2+0x30>
    {
        bb_attach(&bb, value->byteArr->data, value->byteArr->size, value->byteArr->size);
    9822:	68fb      	ldr	r3, [r7, #12]
    9824:	689b      	ldr	r3, [r3, #8]
    9826:	6819      	ldr	r1, [r3, #0]
    9828:	68fb      	ldr	r3, [r7, #12]
    982a:	689b      	ldr	r3, [r3, #8]
    982c:	88da      	ldrh	r2, [r3, #6]
    982e:	68fb      	ldr	r3, [r7, #12]
    9830:	689b      	ldr	r3, [r3, #8]
    9832:	88db      	ldrh	r3, [r3, #6]
    9834:	f107 0014 	add.w	r0, r7, #20
    9838:	f7f9 ff5a 	bl	36f0 <bb_attach>
    }
    return dlms_changeType(&bb, type, newValue);
    983c:	7af9      	ldrb	r1, [r7, #11]
    983e:	f107 0314 	add.w	r3, r7, #20
    9842:	687a      	ldr	r2, [r7, #4]
    9844:	4618      	mov	r0, r3
    9846:	f000 f805 	bl	9854 <dlms_changeType>
    984a:	4603      	mov	r3, r0

}
    984c:	4618      	mov	r0, r3
    984e:	3720      	adds	r7, #32
    9850:	46bd      	mov	sp, r7
    9852:	bd80      	pop	{r7, pc}

00009854 <dlms_changeType>:

int dlms_changeType(
    gxByteBuffer* value,
    DLMS_DATA_TYPE type,
    dlmsVARIANT *newValue)
{
    9854:	b580      	push	{r7, lr}
    9856:	b08a      	sub	sp, #40	; 0x28
    9858:	af00      	add	r7, sp, #0
    985a:	60f8      	str	r0, [r7, #12]
    985c:	460b      	mov	r3, r1
    985e:	607a      	str	r2, [r7, #4]
    9860:	72fb      	strb	r3, [r7, #11]
    int ret;
    gxDataInfo info;
    di_init(&info);
    9862:	f107 0314 	add.w	r3, r7, #20
    9866:	4618      	mov	r0, r3
    9868:	f7fc fc78 	bl	615c <di_init>
    var_clear(newValue);
    986c:	6878      	ldr	r0, [r7, #4]
    986e:	f01c fc6b 	bl	26148 <var_clear>
    if (value->size == 0)
    9872:	68fb      	ldr	r3, [r7, #12]
    9874:	88db      	ldrh	r3, [r3, #6]
    9876:	2b00      	cmp	r3, #0
    9878:	d10a      	bne.n	9890 <dlms_changeType+0x3c>
    {
        if (type == DLMS_DATA_TYPE_STRING || type == DLMS_DATA_TYPE_STRING_UTF8)
    987a:	7afb      	ldrb	r3, [r7, #11]
    987c:	2b0a      	cmp	r3, #10
    987e:	d002      	beq.n	9886 <dlms_changeType+0x32>
    9880:	7afb      	ldrb	r3, [r7, #11]
    9882:	2b0c      	cmp	r3, #12
    9884:	d102      	bne.n	988c <dlms_changeType+0x38>
        {
            newValue->vt = type;
    9886:	687b      	ldr	r3, [r7, #4]
    9888:	7afa      	ldrb	r2, [r7, #11]
    988a:	701a      	strb	r2, [r3, #0]
        }
        return DLMS_ERROR_CODE_OK;
    988c:	2300      	movs	r3, #0
    988e:	e05c      	b.n	994a <dlms_changeType+0xf6>
    }
    if (type == DLMS_DATA_TYPE_NONE)
    9890:	7afb      	ldrb	r3, [r7, #11]
    9892:	2b00      	cmp	r3, #0
    9894:	d11d      	bne.n	98d2 <dlms_changeType+0x7e>
    {
#ifndef GX_DLMS_MICROCONTROLLER
        char *tmp = bb_toHexString(value);
    9896:	68f8      	ldr	r0, [r7, #12]
    9898:	f7fa fa6e 	bl	3d78 <bb_toHexString>
    989c:	6278      	str	r0, [r7, #36]	; 0x24
        newValue->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    989e:	200c      	movs	r0, #12
    98a0:	f020 f8d0 	bl	29a44 <malloc>
    98a4:	4603      	mov	r3, r0
    98a6:	461a      	mov	r2, r3
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	609a      	str	r2, [r3, #8]
        bb_init(newValue->strVal);
    98ac:	687b      	ldr	r3, [r7, #4]
    98ae:	689b      	ldr	r3, [r3, #8]
    98b0:	4618      	mov	r0, r3
    98b2:	f7f9 fa19 	bl	2ce8 <bb_init>
        bb_addString(newValue->strVal, tmp);
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	689b      	ldr	r3, [r3, #8]
    98ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    98bc:	4618      	mov	r0, r3
    98be:	f7f9 fee5 	bl	368c <bb_addString>
        gxfree(tmp);
    98c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    98c4:	f020 f8c6 	bl	29a54 <free>
        newValue->vt = DLMS_DATA_TYPE_STRING;
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	220a      	movs	r2, #10
    98cc:	701a      	strb	r2, [r3, #0]
        return DLMS_ERROR_CODE_OK;
    98ce:	2300      	movs	r3, #0
    98d0:	e03b      	b.n	994a <dlms_changeType+0xf6>
#else
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
    }
    info.type = type;
    98d2:	7afb      	ldrb	r3, [r7, #11]
    98d4:	763b      	strb	r3, [r7, #24]
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
    98d6:	f107 0314 	add.w	r3, r7, #20
    98da:	687a      	ldr	r2, [r7, #4]
    98dc:	4619      	mov	r1, r3
    98de:	68f8      	ldr	r0, [r7, #12]
    98e0:	f7fe f98e 	bl	7c00 <dlms_getData>
    98e4:	6238      	str	r0, [r7, #32]
    98e6:	6a3b      	ldr	r3, [r7, #32]
    98e8:	2b00      	cmp	r3, #0
    98ea:	d001      	beq.n	98f0 <dlms_changeType+0x9c>
    {
        return ret;
    98ec:	6a3b      	ldr	r3, [r7, #32]
    98ee:	e02c      	b.n	994a <dlms_changeType+0xf6>
    }
    value->position = 0;
    98f0:	68fb      	ldr	r3, [r7, #12]
    98f2:	2200      	movs	r2, #0
    98f4:	811a      	strh	r2, [r3, #8]
    if (!info.compleate)
    98f6:	7e7b      	ldrb	r3, [r7, #25]
    98f8:	2b00      	cmp	r3, #0
    98fa:	d102      	bne.n	9902 <dlms_changeType+0xae>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    98fc:	f44f 7382 	mov.w	r3, #260	; 0x104
    9900:	e023      	b.n	994a <dlms_changeType+0xf6>
    }
    if (type == DLMS_DATA_TYPE_OCTET_STRING && newValue->vt == DLMS_DATA_TYPE_OCTET_STRING)
    9902:	7afb      	ldrb	r3, [r7, #11]
    9904:	2b09      	cmp	r3, #9
    9906:	d11f      	bne.n	9948 <dlms_changeType+0xf4>
    9908:	687b      	ldr	r3, [r7, #4]
    990a:	781b      	ldrb	r3, [r3, #0]
    990c:	2b09      	cmp	r3, #9
    990e:	d11b      	bne.n	9948 <dlms_changeType+0xf4>
    {
#ifndef GX_DLMS_MICROCONTROLLER
        char *tmp = bb_toHexString(value);
    9910:	68f8      	ldr	r0, [r7, #12]
    9912:	f7fa fa31 	bl	3d78 <bb_toHexString>
    9916:	61f8      	str	r0, [r7, #28]
        newValue->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    9918:	200c      	movs	r0, #12
    991a:	f020 f893 	bl	29a44 <malloc>
    991e:	4603      	mov	r3, r0
    9920:	461a      	mov	r2, r3
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	609a      	str	r2, [r3, #8]
        bb_init(newValue->strVal);
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	689b      	ldr	r3, [r3, #8]
    992a:	4618      	mov	r0, r3
    992c:	f7f9 f9dc 	bl	2ce8 <bb_init>
        bb_addString(newValue->strVal, tmp);
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	689b      	ldr	r3, [r3, #8]
    9934:	69f9      	ldr	r1, [r7, #28]
    9936:	4618      	mov	r0, r3
    9938:	f7f9 fea8 	bl	368c <bb_addString>
        gxfree(tmp);
    993c:	69f8      	ldr	r0, [r7, #28]
    993e:	f020 f889 	bl	29a54 <free>
        newValue->vt = DLMS_DATA_TYPE_STRING;
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	220a      	movs	r2, #10
    9946:	701a      	strb	r2, [r3, #0]
#else
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
    }
    return 0;
    9948:	2300      	movs	r3, #0
}
    994a:	4618      	mov	r0, r3
    994c:	3728      	adds	r7, #40	; 0x28
    994e:	46bd      	mov	sp, r7
    9950:	bd80      	pop	{r7, pc}
    9952:	bf00      	nop

00009954 <dlms_handleDataNotification>:
*            Received data from the client.
*/
int dlms_handleDataNotification(
    dlmsSettings* settings,
    gxReplyData* reply)
{
    9954:	b5b0      	push	{r4, r5, r7, lr}
    9956:	b08e      	sub	sp, #56	; 0x38
    9958:	af00      	add	r7, sp, #0
    995a:	6078      	str	r0, [r7, #4]
    995c:	6039      	str	r1, [r7, #0]
    unsigned long id;
    int ret;
    unsigned char len;
    gxByteBuffer tmp;
    dlmsVARIANT t;
    unsigned short start = (unsigned short)(reply->data.position - 1);
    995e:	683b      	ldr	r3, [r7, #0]
    9960:	899b      	ldrh	r3, [r3, #12]
    9962:	3b01      	subs	r3, #1
    9964:	86fb      	strh	r3, [r7, #54]	; 0x36
    // Get invoke id.
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
    9966:	683b      	ldr	r3, [r7, #0]
    9968:	3304      	adds	r3, #4
    996a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    996e:	4611      	mov	r1, r2
    9970:	4618      	mov	r0, r3
    9972:	f7f9 ffad 	bl	38d0 <bb_getUInt32>
    9976:	6338      	str	r0, [r7, #48]	; 0x30
    9978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    997a:	2b00      	cmp	r3, #0
    997c:	d001      	beq.n	9982 <dlms_handleDataNotification+0x2e>
    {
        return ret;
    997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9980:	e054      	b.n	9a2c <dlms_handleDataNotification+0xd8>
    }
    // Get date time.
    reply->time = NULL;
    9982:	683b      	ldr	r3, [r7, #0]
    9984:	2200      	movs	r2, #0
    9986:	635a      	str	r2, [r3, #52]	; 0x34
    if ((ret = bb_getUInt8(&reply->data, &len)) != 0)
    9988:	683b      	ldr	r3, [r7, #0]
    998a:	3304      	adds	r3, #4
    998c:	f107 022b 	add.w	r2, r7, #43	; 0x2b
    9990:	4611      	mov	r1, r2
    9992:	4618      	mov	r0, r3
    9994:	f7f9 ff0a 	bl	37ac <bb_getUInt8>
    9998:	6338      	str	r0, [r7, #48]	; 0x30
    999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    999c:	2b00      	cmp	r3, #0
    999e:	d001      	beq.n	99a4 <dlms_handleDataNotification+0x50>
    {
        return ret;
    99a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    99a2:	e043      	b.n	9a2c <dlms_handleDataNotification+0xd8>
    }
    if (len != 0)
    99a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    99a8:	2b00      	cmp	r3, #0
    99aa:	d02d      	beq.n	9a08 <dlms_handleDataNotification+0xb4>
    {
        var_init(&t);
    99ac:	f107 0308 	add.w	r3, r7, #8
    99b0:	4618      	mov	r0, r3
    99b2:	f01c fbb9 	bl	26128 <var_init>
        bb_init(&tmp);
    99b6:	f107 031c 	add.w	r3, r7, #28
    99ba:	4618      	mov	r0, r3
    99bc:	f7f9 f994 	bl	2ce8 <bb_init>
        bb_set2(&tmp, &reply->data, reply->data.position, len);
    99c0:	683b      	ldr	r3, [r7, #0]
    99c2:	1d19      	adds	r1, r3, #4
    99c4:	683b      	ldr	r3, [r7, #0]
    99c6:	899a      	ldrh	r2, [r3, #12]
    99c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    99cc:	b29b      	uxth	r3, r3
    99ce:	f107 001c 	add.w	r0, r7, #28
    99d2:	f7f9 fe25 	bl	3620 <bb_set2>
        if ((ret = dlms_changeType(&tmp, DLMS_DATA_TYPE_DATETIME, &t)) != 0)
    99d6:	f107 0208 	add.w	r2, r7, #8
    99da:	f107 031c 	add.w	r3, r7, #28
    99de:	2119      	movs	r1, #25
    99e0:	4618      	mov	r0, r3
    99e2:	f7ff ff37 	bl	9854 <dlms_changeType>
    99e6:	6338      	str	r0, [r7, #48]	; 0x30
    99e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    99ea:	2b00      	cmp	r3, #0
    99ec:	d001      	beq.n	99f2 <dlms_handleDataNotification+0x9e>
        {
            return ret;
    99ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    99f0:	e01c      	b.n	9a2c <dlms_handleDataNotification+0xd8>
        }
        *reply->time = t.dateTime->value;
    99f2:	683b      	ldr	r3, [r7, #0]
    99f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    99f6:	693b      	ldr	r3, [r7, #16]
    99f8:	4615      	mov	r5, r2
    99fa:	1d1c      	adds	r4, r3, #4
    99fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    99fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    9a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    9a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    9a04:	6823      	ldr	r3, [r4, #0]
    9a06:	602b      	str	r3, [r5, #0]
    }
    if ((ret = dlms_getDataFromBlock(&reply->data, start)) != 0)
    9a08:	683b      	ldr	r3, [r7, #0]
    9a0a:	3304      	adds	r3, #4
    9a0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    9a0e:	4611      	mov	r1, r2
    9a10:	4618      	mov	r0, r3
    9a12:	f7ff f96f 	bl	8cf4 <dlms_getDataFromBlock>
    9a16:	6338      	str	r0, [r7, #48]	; 0x30
    9a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d001      	beq.n	9a22 <dlms_handleDataNotification+0xce>
    {
        return ret;
    9a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9a20:	e004      	b.n	9a2c <dlms_handleDataNotification+0xd8>
    }
    return dlms_getValueFromData(settings, reply);
    9a22:	6839      	ldr	r1, [r7, #0]
    9a24:	6878      	ldr	r0, [r7, #4]
    9a26:	f7ff fb8d 	bl	9144 <dlms_getValueFromData>
    9a2a:	4603      	mov	r3, r0
}
    9a2c:	4618      	mov	r0, r3
    9a2e:	3738      	adds	r7, #56	; 0x38
    9a30:	46bd      	mov	sp, r7
    9a32:	bdb0      	pop	{r4, r5, r7, pc}

00009a34 <dlms_handleGbt>:
*            received data.
*/
int dlms_handleGbt(
    dlmsSettings* settings,
    gxReplyData* data)
{
    9a34:	b580      	push	{r7, lr}
    9a36:	b086      	sub	sp, #24
    9a38:	af00      	add	r7, sp, #0
    9a3a:	6078      	str	r0, [r7, #4]
    9a3c:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char ch, window, bn, bna;
    unsigned short index = (unsigned short)(data->data.position - 1);
    9a3e:	683b      	ldr	r3, [r7, #0]
    9a40:	899b      	ldrh	r3, [r3, #12]
    9a42:	3b01      	subs	r3, #1
    9a44:	827b      	strh	r3, [r7, #18]
    data->gbt = 1;
    9a46:	683b      	ldr	r3, [r7, #0]
    9a48:	2201      	movs	r2, #1
    9a4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9a4e:	683b      	ldr	r3, [r7, #0]
    9a50:	3304      	adds	r3, #4
    9a52:	f107 0210 	add.w	r2, r7, #16
    9a56:	4611      	mov	r1, r2
    9a58:	4618      	mov	r0, r3
    9a5a:	f7f9 fea7 	bl	37ac <bb_getUInt8>
    9a5e:	6178      	str	r0, [r7, #20]
    9a60:	697b      	ldr	r3, [r7, #20]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d001      	beq.n	9a6a <dlms_handleGbt+0x36>
    {
        return ret;
    9a66:	697b      	ldr	r3, [r7, #20]
    9a68:	e0c7      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    // Is streaming active.
    //TODO: bool streaming = (ch & 0x40) == 1;
    window = (ch & 0x3F);
    9a6a:	7c3b      	ldrb	r3, [r7, #16]
    9a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9a70:	747b      	strb	r3, [r7, #17]
    // Block number.
    if ((ret = bb_getUInt8(&data->data, &bn)) != 0)
    9a72:	683b      	ldr	r3, [r7, #0]
    9a74:	3304      	adds	r3, #4
    9a76:	f107 020f 	add.w	r2, r7, #15
    9a7a:	4611      	mov	r1, r2
    9a7c:	4618      	mov	r0, r3
    9a7e:	f7f9 fe95 	bl	37ac <bb_getUInt8>
    9a82:	6178      	str	r0, [r7, #20]
    9a84:	697b      	ldr	r3, [r7, #20]
    9a86:	2b00      	cmp	r3, #0
    9a88:	d001      	beq.n	9a8e <dlms_handleGbt+0x5a>
    {
        return ret;
    9a8a:	697b      	ldr	r3, [r7, #20]
    9a8c:	e0b5      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    // Block number acknowledged.
    if ((ret = bb_getUInt8(&data->data, &bna)) != 0)
    9a8e:	683b      	ldr	r3, [r7, #0]
    9a90:	3304      	adds	r3, #4
    9a92:	f107 020e 	add.w	r2, r7, #14
    9a96:	4611      	mov	r1, r2
    9a98:	4618      	mov	r0, r3
    9a9a:	f7f9 fe87 	bl	37ac <bb_getUInt8>
    9a9e:	6178      	str	r0, [r7, #20]
    9aa0:	697b      	ldr	r3, [r7, #20]
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d001      	beq.n	9aaa <dlms_handleGbt+0x76>
    {
        return ret;
    9aa6:	697b      	ldr	r3, [r7, #20]
    9aa8:	e0a7      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    // Get APU tag.
    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9aaa:	683b      	ldr	r3, [r7, #0]
    9aac:	3304      	adds	r3, #4
    9aae:	f107 0210 	add.w	r2, r7, #16
    9ab2:	4611      	mov	r1, r2
    9ab4:	4618      	mov	r0, r3
    9ab6:	f7f9 fe79 	bl	37ac <bb_getUInt8>
    9aba:	6178      	str	r0, [r7, #20]
    9abc:	697b      	ldr	r3, [r7, #20]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d001      	beq.n	9ac6 <dlms_handleGbt+0x92>
    {
        return ret;
    9ac2:	697b      	ldr	r3, [r7, #20]
    9ac4:	e099      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    if (ch != 0)
    9ac6:	7c3b      	ldrb	r3, [r7, #16]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d002      	beq.n	9ad2 <dlms_handleGbt+0x9e>
    {
        //Invalid APU.
        return DLMS_ERROR_CODE_INVALID_TAG;
    9acc:	f240 130f 	movw	r3, #271	; 0x10f
    9ad0:	e093      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    // Get Addl tag.
    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9ad2:	683b      	ldr	r3, [r7, #0]
    9ad4:	3304      	adds	r3, #4
    9ad6:	f107 0210 	add.w	r2, r7, #16
    9ada:	4611      	mov	r1, r2
    9adc:	4618      	mov	r0, r3
    9ade:	f7f9 fe65 	bl	37ac <bb_getUInt8>
    9ae2:	6178      	str	r0, [r7, #20]
    9ae4:	697b      	ldr	r3, [r7, #20]
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d001      	beq.n	9aee <dlms_handleGbt+0xba>
    {
        return ret;
    9aea:	697b      	ldr	r3, [r7, #20]
    9aec:	e085      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    if (ch != 0)
    9aee:	7c3b      	ldrb	r3, [r7, #16]
    9af0:	2b00      	cmp	r3, #0
    9af2:	d002      	beq.n	9afa <dlms_handleGbt+0xc6>
    {
        //Invalid APU.
        return DLMS_ERROR_CODE_INVALID_TAG;
    9af4:	f240 130f 	movw	r3, #271	; 0x10f
    9af8:	e07f      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9afa:	683b      	ldr	r3, [r7, #0]
    9afc:	3304      	adds	r3, #4
    9afe:	f107 0210 	add.w	r2, r7, #16
    9b02:	4611      	mov	r1, r2
    9b04:	4618      	mov	r0, r3
    9b06:	f7f9 fe51 	bl	37ac <bb_getUInt8>
    9b0a:	6178      	str	r0, [r7, #20]
    9b0c:	697b      	ldr	r3, [r7, #20]
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d001      	beq.n	9b16 <dlms_handleGbt+0xe2>
    {
        return ret;
    9b12:	697b      	ldr	r3, [r7, #20]
    9b14:	e071      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    if (ch != 0)
    9b16:	7c3b      	ldrb	r3, [r7, #16]
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d002      	beq.n	9b22 <dlms_handleGbt+0xee>
    {
        return DLMS_ERROR_CODE_INVALID_TAG;
    9b1c:	f240 130f 	movw	r3, #271	; 0x10f
    9b20:	e06b      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    data->command = DLMS_COMMAND_NONE;
    9b22:	683b      	ldr	r3, [r7, #0]
    9b24:	2200      	movs	r2, #0
    9b26:	705a      	strb	r2, [r3, #1]
    if (window != 0)
    9b28:	7c7b      	ldrb	r3, [r7, #17]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d01c      	beq.n	9b68 <dlms_handleGbt+0x134>
    {
        unsigned short len;
        if (hlp_getObjectCount2(&data->data, &len) != 0)
    9b2e:	683b      	ldr	r3, [r7, #0]
    9b30:	3304      	adds	r3, #4
    9b32:	f107 020c 	add.w	r2, r7, #12
    9b36:	4611      	mov	r1, r2
    9b38:	4618      	mov	r0, r3
    9b3a:	f017 fe87 	bl	2184c <hlp_getObjectCount2>
    9b3e:	4603      	mov	r3, r0
    9b40:	2b00      	cmp	r3, #0
    9b42:	d002      	beq.n	9b4a <dlms_handleGbt+0x116>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    9b44:	f44f 7382 	mov.w	r3, #260	; 0x104
    9b48:	e057      	b.n	9bfa <dlms_handleGbt+0x1c6>
        }
        if (len != (data->data.size - data->data.position))
    9b4a:	89bb      	ldrh	r3, [r7, #12]
    9b4c:	461a      	mov	r2, r3
    9b4e:	683b      	ldr	r3, [r7, #0]
    9b50:	895b      	ldrh	r3, [r3, #10]
    9b52:	4619      	mov	r1, r3
    9b54:	683b      	ldr	r3, [r7, #0]
    9b56:	899b      	ldrh	r3, [r3, #12]
    9b58:	1acb      	subs	r3, r1, r3
    9b5a:	429a      	cmp	r2, r3
    9b5c:	d004      	beq.n	9b68 <dlms_handleGbt+0x134>
        {
            data->complete = 0;
    9b5e:	683b      	ldr	r3, [r7, #0]
    9b60:	2200      	movs	r2, #0
    9b62:	741a      	strb	r2, [r3, #16]
            return 0;
    9b64:	2300      	movs	r3, #0
    9b66:	e048      	b.n	9bfa <dlms_handleGbt+0x1c6>
        }
    }
    if ((ret = dlms_getDataFromBlock(&data->data, index)) != 0 ||
    9b68:	683b      	ldr	r3, [r7, #0]
    9b6a:	3304      	adds	r3, #4
    9b6c:	8a7a      	ldrh	r2, [r7, #18]
    9b6e:	4611      	mov	r1, r2
    9b70:	4618      	mov	r0, r3
    9b72:	f7ff f8bf 	bl	8cf4 <dlms_getDataFromBlock>
    9b76:	6178      	str	r0, [r7, #20]
    9b78:	697b      	ldr	r3, [r7, #20]
    9b7a:	2b00      	cmp	r3, #0
    9b7c:	d108      	bne.n	9b90 <dlms_handleGbt+0x15c>
    9b7e:	2200      	movs	r2, #0
    9b80:	6839      	ldr	r1, [r7, #0]
    9b82:	6878      	ldr	r0, [r7, #4]
    9b84:	f000 f9f2 	bl	9f6c <dlms_getPdu>
    9b88:	6178      	str	r0, [r7, #20]
    9b8a:	697b      	ldr	r3, [r7, #20]
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d001      	beq.n	9b94 <dlms_handleGbt+0x160>
        (ret = dlms_getPdu(settings, data, 0)) != 0)
    {
        return ret;
    9b90:	697b      	ldr	r3, [r7, #20]
    9b92:	e032      	b.n	9bfa <dlms_handleGbt+0x1c6>
    }
    // Is Last block,
    if ((ch & 0x80) == 0)
    9b94:	7c3b      	ldrb	r3, [r7, #16]
    9b96:	b25b      	sxtb	r3, r3
    9b98:	2b00      	cmp	r3, #0
    9b9a:	db07      	blt.n	9bac <dlms_handleGbt+0x178>
    {
        data->moreData = (DLMS_DATA_REQUEST_TYPES)(data->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
    9b9c:	683b      	ldr	r3, [r7, #0]
    9b9e:	781b      	ldrb	r3, [r3, #0]
    9ba0:	f043 0302 	orr.w	r3, r3, #2
    9ba4:	b2da      	uxtb	r2, r3
    9ba6:	683b      	ldr	r3, [r7, #0]
    9ba8:	701a      	strb	r2, [r3, #0]
    9baa:	e006      	b.n	9bba <dlms_handleGbt+0x186>
    }
    else
    {
        data->moreData = (DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
    9bac:	683b      	ldr	r3, [r7, #0]
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	f023 0302 	bic.w	r3, r3, #2
    9bb4:	b2da      	uxtb	r2, r3
    9bb6:	683b      	ldr	r3, [r7, #0]
    9bb8:	701a      	strb	r2, [r3, #0]
    }
    // Get data if all data is read or we want to peek data.
    if (data->data.position != data->data.size
    9bba:	683b      	ldr	r3, [r7, #0]
    9bbc:	899a      	ldrh	r2, [r3, #12]
    9bbe:	683b      	ldr	r3, [r7, #0]
    9bc0:	895b      	ldrh	r3, [r3, #10]
    9bc2:	429a      	cmp	r2, r3
    9bc4:	d018      	beq.n	9bf8 <dlms_handleGbt+0x1c4>
        && (
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            data->command == DLMS_COMMAND_READ_RESPONSE ||
    9bc6:	683b      	ldr	r3, [r7, #0]
    9bc8:	785b      	ldrb	r3, [r3, #1]
    {
        data->moreData = (DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
    }
    // Get data if all data is read or we want to peek data.
    if (data->data.position != data->data.size
        && (
    9bca:	2b0c      	cmp	r3, #12
    9bcc:	d003      	beq.n	9bd6 <dlms_handleGbt+0x1a2>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            data->command == DLMS_COMMAND_READ_RESPONSE ||
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            data->command == DLMS_COMMAND_GET_RESPONSE)
    9bce:	683b      	ldr	r3, [r7, #0]
    9bd0:	785b      	ldrb	r3, [r3, #1]
    }
    // Get data if all data is read or we want to peek data.
    if (data->data.position != data->data.size
        && (
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            data->command == DLMS_COMMAND_READ_RESPONSE ||
    9bd2:	2bc4      	cmp	r3, #196	; 0xc4
    9bd4:	d110      	bne.n	9bf8 <dlms_handleGbt+0x1c4>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            data->command == DLMS_COMMAND_GET_RESPONSE)
        && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE
    9bd6:	683b      	ldr	r3, [r7, #0]
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d004      	beq.n	9be8 <dlms_handleGbt+0x1b4>
            || data->peek))
    9bde:	683b      	ldr	r3, [r7, #0]
    9be0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9be4:	2b00      	cmp	r3, #0
    9be6:	d007      	beq.n	9bf8 <dlms_handleGbt+0x1c4>
    {
        data->data.position = 0;
    9be8:	683b      	ldr	r3, [r7, #0]
    9bea:	2200      	movs	r2, #0
    9bec:	819a      	strh	r2, [r3, #12]
        ret = dlms_getValueFromData(settings, data);
    9bee:	6839      	ldr	r1, [r7, #0]
    9bf0:	6878      	ldr	r0, [r7, #4]
    9bf2:	f7ff faa7 	bl	9144 <dlms_getValueFromData>
    9bf6:	6178      	str	r0, [r7, #20]
    }
    return ret;
    9bf8:	697b      	ldr	r3, [r7, #20]
}
    9bfa:	4618      	mov	r0, r3
    9bfc:	3718      	adds	r7, #24
    9bfe:	46bd      	mov	sp, r7
    9c00:	bd80      	pop	{r7, pc}
    9c02:	bf00      	nop

00009c04 <dlms_handledGloDedRequest>:

int dlms_handledGloDedRequest(dlmsSettings* settings,
    gxReplyData* data)
{
    9c04:	b590      	push	{r4, r7, lr}
    9c06:	b087      	sub	sp, #28
    9c08:	af02      	add	r7, sp, #8
    9c0a:	6078      	str	r0, [r7, #4]
    9c0c:	6039      	str	r1, [r7, #0]
    int ret = 0;
    9c0e:	2300      	movs	r3, #0
    9c10:	60fb      	str	r3, [r7, #12]
#ifdef DLMS_IGNORE_HIGH_GMAC
    ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    // If all frames are read.
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    9c12:	683b      	ldr	r3, [r7, #0]
    9c14:	781b      	ldrb	r3, [r3, #0]
    9c16:	f003 0301 	and.w	r3, r3, #1
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	f040 80b0 	bne.w	9d80 <dlms_handledGloDedRequest+0x17c>
    {
        unsigned char ch;
        DLMS_SECURITY security;
        --data->data.position;
    9c20:	683b      	ldr	r3, [r7, #0]
    9c22:	899b      	ldrh	r3, [r3, #12]
    9c24:	3b01      	subs	r3, #1
    9c26:	b29a      	uxth	r2, r3
    9c28:	683b      	ldr	r3, [r7, #0]
    9c2a:	819a      	strh	r2, [r3, #12]
        if (settings->cipher.dedicatedKey != NULL && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    9c32:	2b00      	cmp	r3, #0
    9c34:	d01d      	beq.n	9c72 <dlms_handledGloDedRequest+0x6e>
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    9c3c:	f003 0302 	and.w	r3, r3, #2
    9c40:	2b00      	cmp	r3, #0
    9c42:	d016      	beq.n	9c72 <dlms_handledGloDedRequest+0x6e>
        {
            if ((ret = cip_decrypt(&settings->cipher,
    9c44:	687b      	ldr	r3, [r7, #4]
    9c46:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	f103 011c 	add.w	r1, r3, #28
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    9c56:	683b      	ldr	r3, [r7, #0]
    9c58:	1d1c      	adds	r4, r3, #4
    9c5a:	f107 030a 	add.w	r3, r7, #10
    9c5e:	9300      	str	r3, [sp, #0]
    9c60:	4623      	mov	r3, r4
    9c62:	f7fb fd65 	bl	5730 <cip_decrypt>
    9c66:	60f8      	str	r0, [r7, #12]
    9c68:	68fb      	ldr	r3, [r7, #12]
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	d072      	beq.n	9d54 <dlms_handledGloDedRequest+0x150>
                &settings->sourceSystemTitle,
                settings->cipher.dedicatedKey,
                &data->data,
                &security)) != 0)
            {
                return ret;
    9c6e:	68fb      	ldr	r3, [r7, #12]
    9c70:	e08d      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
            }
        }
        //If pre-set connection is made.
        else if (settings->sourceSystemTitle.size == 0)
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9c76:	2b00      	cmp	r3, #0
    9c78:	d155      	bne.n	9d26 <dlms_handledGloDedRequest+0x122>
        {
#ifndef DLMS_IGNORE_SERVER
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    9c80:	2b00      	cmp	r3, #0
    9c82:	d02f      	beq.n	9ce4 <dlms_handledGloDedRequest+0xe0>
    9c84:	687b      	ldr	r3, [r7, #4]
    9c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d12a      	bne.n	9ce4 <dlms_handledGloDedRequest+0xe0>
    9c8e:	683b      	ldr	r3, [r7, #0]
    9c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    9c94:	2b00      	cmp	r3, #0
    9c96:	d125      	bne.n	9ce4 <dlms_handledGloDedRequest+0xe0>
            {
                // Check is data send to this server.
                if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9c9c:	4619      	mov	r1, r3
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9ca2:	461a      	mov	r2, r3
    9ca4:	6878      	ldr	r0, [r7, #4]
    9ca6:	f01f faf7 	bl	29298 <svr_isTarget>
    9caa:	4603      	mov	r3, r0
    9cac:	2b00      	cmp	r3, #0
    9cae:	d110      	bne.n	9cd2 <dlms_handledGloDedRequest+0xce>
                {
                    if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    9cb6:	f003 0302 	and.w	r3, r3, #2
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d106      	bne.n	9ccc <dlms_handledGloDedRequest+0xc8>
                    {
                        settings->serverAddress = settings->clientAddress = 0;
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	2200      	movs	r2, #0
    9cc2:	865a      	strh	r2, [r3, #50]	; 0x32
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	869a      	strh	r2, [r3, #52]	; 0x34
                    }
                    return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    9ccc:	f240 1307 	movw	r3, #263	; 0x107
    9cd0:	e05d      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
                }
                if ((ret = svr_connected((dlmsServerSettings*)settings)) != 0)
    9cd2:	6878      	ldr	r0, [r7, #4]
    9cd4:	f01f fb76 	bl	293c4 <svr_connected>
    9cd8:	60f8      	str	r0, [r7, #12]
    9cda:	68fb      	ldr	r3, [r7, #12]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d001      	beq.n	9ce4 <dlms_handledGloDedRequest+0xe0>
                {
                    return ret;
    9ce0:	68fb      	ldr	r3, [r7, #12]
    9ce2:	e054      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
                }
            }
#endif //DLMS_IGNORE_SERVER
            if ((ret = cip_decrypt(&settings->cipher,
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9cea:	687b      	ldr	r3, [r7, #4]
    9cec:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	f103 028c 	add.w	r2, r3, #140	; 0x8c
    9cf6:	683b      	ldr	r3, [r7, #0]
    9cf8:	1d1c      	adds	r4, r3, #4
    9cfa:	f107 030a 	add.w	r3, r7, #10
    9cfe:	9300      	str	r3, [sp, #0]
    9d00:	4623      	mov	r3, r4
    9d02:	f7fb fd15 	bl	5730 <cip_decrypt>
    9d06:	60f8      	str	r0, [r7, #12]
    9d08:	68fb      	ldr	r3, [r7, #12]
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d001      	beq.n	9d12 <dlms_handledGloDedRequest+0x10e>
                settings->preEstablishedSystemTitle,
                &settings->cipher.blockCipherKey,
                &data->data,
                &security)) != 0)
            {
                return ret;
    9d0e:	68fb      	ldr	r3, [r7, #12]
    9d10:	e03d      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
            }
            if (data->preEstablished == 0)
    9d12:	683b      	ldr	r3, [r7, #0]
    9d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d11b      	bne.n	9d54 <dlms_handledGloDedRequest+0x150>
            {
                data->preEstablished = 1;
    9d1c:	683b      	ldr	r3, [r7, #0]
    9d1e:	2201      	movs	r2, #1
    9d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    9d24:	e016      	b.n	9d54 <dlms_handledGloDedRequest+0x150>
            }
        }
        else
        {
            if ((ret = cip_decrypt(&settings->cipher,
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	f103 011c 	add.w	r1, r3, #28
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	f103 028c 	add.w	r2, r3, #140	; 0x8c
    9d38:	683b      	ldr	r3, [r7, #0]
    9d3a:	1d1c      	adds	r4, r3, #4
    9d3c:	f107 030a 	add.w	r3, r7, #10
    9d40:	9300      	str	r3, [sp, #0]
    9d42:	4623      	mov	r3, r4
    9d44:	f7fb fcf4 	bl	5730 <cip_decrypt>
    9d48:	60f8      	str	r0, [r7, #12]
    9d4a:	68fb      	ldr	r3, [r7, #12]
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d001      	beq.n	9d54 <dlms_handledGloDedRequest+0x150>
                &settings->sourceSystemTitle,
                &settings->cipher.blockCipherKey,
                &data->data,
                &security)) != 0)
            {
                return ret;
    9d50:	68fb      	ldr	r3, [r7, #12]
    9d52:	e01c      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
            }
        }
        // Get command.
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9d54:	683b      	ldr	r3, [r7, #0]
    9d56:	3304      	adds	r3, #4
    9d58:	f107 020b 	add.w	r2, r7, #11
    9d5c:	4611      	mov	r1, r2
    9d5e:	4618      	mov	r0, r3
    9d60:	f7f9 fd24 	bl	37ac <bb_getUInt8>
    9d64:	60f8      	str	r0, [r7, #12]
    9d66:	68fb      	ldr	r3, [r7, #12]
    9d68:	2b00      	cmp	r3, #0
    9d6a:	d001      	beq.n	9d70 <dlms_handledGloDedRequest+0x16c>
        {
            return ret;
    9d6c:	68fb      	ldr	r3, [r7, #12]
    9d6e:	e00e      	b.n	9d8e <dlms_handledGloDedRequest+0x18a>
        }
        data->encryptedCommand = data->command;
    9d70:	683b      	ldr	r3, [r7, #0]
    9d72:	785a      	ldrb	r2, [r3, #1]
    9d74:	683b      	ldr	r3, [r7, #0]
    9d76:	709a      	strb	r2, [r3, #2]
        data->command = (DLMS_COMMAND)ch;
    9d78:	7afa      	ldrb	r2, [r7, #11]
    9d7a:	683b      	ldr	r3, [r7, #0]
    9d7c:	705a      	strb	r2, [r3, #1]
    9d7e:	e005      	b.n	9d8c <dlms_handledGloDedRequest+0x188>
    }
    else
    {
        data->data.position = (data->data.position - 1);
    9d80:	683b      	ldr	r3, [r7, #0]
    9d82:	899b      	ldrh	r3, [r3, #12]
    9d84:	3b01      	subs	r3, #1
    9d86:	b29a      	uxth	r2, r3
    9d88:	683b      	ldr	r3, [r7, #0]
    9d8a:	819a      	strh	r2, [r3, #12]
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return ret;
    9d8c:	68fb      	ldr	r3, [r7, #12]
}
    9d8e:	4618      	mov	r0, r3
    9d90:	3714      	adds	r7, #20
    9d92:	46bd      	mov	sp, r7
    9d94:	bd90      	pop	{r4, r7, pc}
    9d96:	bf00      	nop

00009d98 <dlms_handledGloDedResponse>:

int dlms_handledGloDedResponse(dlmsSettings* settings,
    gxReplyData* data, unsigned short index)
{
    9d98:	b5b0      	push	{r4, r5, r7, lr}
    9d9a:	b08c      	sub	sp, #48	; 0x30
    9d9c:	af02      	add	r7, sp, #8
    9d9e:	60f8      	str	r0, [r7, #12]
    9da0:	60b9      	str	r1, [r7, #8]
    9da2:	4613      	mov	r3, r2
    9da4:	80fb      	strh	r3, [r7, #6]
#ifdef DLMS_IGNORE_HIGH_GMAC
    return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    int ret = 0;
    9da6:	2300      	movs	r3, #0
    9da8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    9daa:	68bb      	ldr	r3, [r7, #8]
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	f003 0301 	and.w	r3, r3, #1
    9db2:	2b00      	cmp	r3, #0
    9db4:	f040 8089 	bne.w	9eca <dlms_handledGloDedResponse+0x132>
    {
        DLMS_SECURITY security;
        gxByteBuffer bb;
        --data->data.position;
    9db8:	68bb      	ldr	r3, [r7, #8]
    9dba:	899b      	ldrh	r3, [r3, #12]
    9dbc:	3b01      	subs	r3, #1
    9dbe:	b29a      	uxth	r2, r3
    9dc0:	68bb      	ldr	r3, [r7, #8]
    9dc2:	819a      	strh	r2, [r3, #12]
        bb_init(&bb);
    9dc4:	f107 0314 	add.w	r3, r7, #20
    9dc8:	4618      	mov	r0, r3
    9dca:	f7f8 ff8d 	bl	2ce8 <bb_init>
        bb_set2(&bb, &data->data, data->data.position, bb_size(&data->data) - data->data.position);
    9dce:	68bb      	ldr	r3, [r7, #8]
    9dd0:	1d1c      	adds	r4, r3, #4
    9dd2:	68bb      	ldr	r3, [r7, #8]
    9dd4:	899d      	ldrh	r5, [r3, #12]
    9dd6:	68bb      	ldr	r3, [r7, #8]
    9dd8:	3304      	adds	r3, #4
    9dda:	4618      	mov	r0, r3
    9ddc:	f7f8 ff74 	bl	2cc8 <bb_size>
    9de0:	4603      	mov	r3, r0
    9de2:	461a      	mov	r2, r3
    9de4:	68bb      	ldr	r3, [r7, #8]
    9de6:	899b      	ldrh	r3, [r3, #12]
    9de8:	1ad3      	subs	r3, r2, r3
    9dea:	b29b      	uxth	r3, r3
    9dec:	f107 0014 	add.w	r0, r7, #20
    9df0:	462a      	mov	r2, r5
    9df2:	4621      	mov	r1, r4
    9df4:	f7f9 fc14 	bl	3620 <bb_set2>
        data->data.position = data->data.size = index;
    9df8:	68bb      	ldr	r3, [r7, #8]
    9dfa:	88fa      	ldrh	r2, [r7, #6]
    9dfc:	815a      	strh	r2, [r3, #10]
    9dfe:	68bb      	ldr	r3, [r7, #8]
    9e00:	895a      	ldrh	r2, [r3, #10]
    9e02:	68bb      	ldr	r3, [r7, #8]
    9e04:	819a      	strh	r2, [r3, #12]
        if (settings->cipher.dedicatedKey != NULL && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    9e06:	68fb      	ldr	r3, [r7, #12]
    9e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d022      	beq.n	9e56 <dlms_handledGloDedResponse+0xbe>
    9e10:	68fb      	ldr	r3, [r7, #12]
    9e12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    9e16:	f003 0302 	and.w	r3, r3, #2
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d01b      	beq.n	9e56 <dlms_handledGloDedResponse+0xbe>
        {
            if ((ret = cip_decrypt(&settings->cipher,
    9e1e:	68fb      	ldr	r3, [r7, #12]
    9e20:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9e24:	68fb      	ldr	r3, [r7, #12]
    9e26:	f103 011c 	add.w	r1, r3, #28
    9e2a:	68fb      	ldr	r3, [r7, #12]
    9e2c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    9e30:	f107 0414 	add.w	r4, r7, #20
    9e34:	f107 0323 	add.w	r3, r7, #35	; 0x23
    9e38:	9300      	str	r3, [sp, #0]
    9e3a:	4623      	mov	r3, r4
    9e3c:	f7fb fc78 	bl	5730 <cip_decrypt>
    9e40:	6278      	str	r0, [r7, #36]	; 0x24
    9e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e44:	2b00      	cmp	r3, #0
    9e46:	d022      	beq.n	9e8e <dlms_handledGloDedResponse+0xf6>
                &settings->sourceSystemTitle,
                settings->cipher.dedicatedKey,
                &bb,
                &security)) != 0)
            {
                bb_clear(&bb);
    9e48:	f107 0314 	add.w	r3, r7, #20
    9e4c:	4618      	mov	r0, r3
    9e4e:	f7f9 fc89 	bl	3764 <bb_clear>
                return ret;
    9e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e54:	e03a      	b.n	9ecc <dlms_handledGloDedResponse+0x134>
            }
        }
        else
        {
            if ((ret = cip_decrypt(&settings->cipher,
    9e56:	68fb      	ldr	r3, [r7, #12]
    9e58:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9e5c:	68fb      	ldr	r3, [r7, #12]
    9e5e:	f103 011c 	add.w	r1, r3, #28
    9e62:	68fb      	ldr	r3, [r7, #12]
    9e64:	f103 028c 	add.w	r2, r3, #140	; 0x8c
    9e68:	f107 0414 	add.w	r4, r7, #20
    9e6c:	f107 0323 	add.w	r3, r7, #35	; 0x23
    9e70:	9300      	str	r3, [sp, #0]
    9e72:	4623      	mov	r3, r4
    9e74:	f7fb fc5c 	bl	5730 <cip_decrypt>
    9e78:	6278      	str	r0, [r7, #36]	; 0x24
    9e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d006      	beq.n	9e8e <dlms_handledGloDedResponse+0xf6>
                &settings->sourceSystemTitle,
                &settings->cipher.blockCipherKey,
                &bb,
                &security)) != 0)
            {
                bb_clear(&bb);
    9e80:	f107 0314 	add.w	r3, r7, #20
    9e84:	4618      	mov	r0, r3
    9e86:	f7f9 fc6d 	bl	3764 <bb_clear>
                return ret;
    9e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e8c:	e01e      	b.n	9ecc <dlms_handledGloDedResponse+0x134>
            }
        }
        bb_set2(&data->data, &bb, bb.position, bb.size - bb.position);
    9e8e:	68bb      	ldr	r3, [r7, #8]
    9e90:	1d18      	adds	r0, r3, #4
    9e92:	8bbc      	ldrh	r4, [r7, #28]
    9e94:	8b7a      	ldrh	r2, [r7, #26]
    9e96:	8bbb      	ldrh	r3, [r7, #28]
    9e98:	1ad3      	subs	r3, r2, r3
    9e9a:	b29b      	uxth	r3, r3
    9e9c:	f107 0114 	add.w	r1, r7, #20
    9ea0:	4622      	mov	r2, r4
    9ea2:	f7f9 fbbd 	bl	3620 <bb_set2>
        bb_clear(&bb);
    9ea6:	f107 0314 	add.w	r3, r7, #20
    9eaa:	4618      	mov	r0, r3
    9eac:	f7f9 fc5a 	bl	3764 <bb_clear>
        data->command = DLMS_COMMAND_NONE;
    9eb0:	68bb      	ldr	r3, [r7, #8]
    9eb2:	2200      	movs	r2, #0
    9eb4:	705a      	strb	r2, [r3, #1]
        ret = dlms_getPdu(settings, data, 0);
    9eb6:	2200      	movs	r2, #0
    9eb8:	68b9      	ldr	r1, [r7, #8]
    9eba:	68f8      	ldr	r0, [r7, #12]
    9ebc:	f000 f856 	bl	9f6c <dlms_getPdu>
    9ec0:	6278      	str	r0, [r7, #36]	; 0x24
        data->cipherIndex = (unsigned short)data->data.size;
    9ec2:	68bb      	ldr	r3, [r7, #8]
    9ec4:	895a      	ldrh	r2, [r3, #10]
    9ec6:	68bb      	ldr	r3, [r7, #8]
    9ec8:	865a      	strh	r2, [r3, #50]	; 0x32
    }
    return ret;
    9eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif //DLMS_IGNORE_HIGH_GMAC
}
    9ecc:	4618      	mov	r0, r3
    9ece:	3728      	adds	r7, #40	; 0x28
    9ed0:	46bd      	mov	sp, r7
    9ed2:	bdb0      	pop	{r4, r5, r7, pc}

00009ed4 <dlms_handleGeneralCiphering>:

int dlms_handleGeneralCiphering(
    dlmsSettings* settings,
    gxReplyData* data)
{
    9ed4:	b590      	push	{r4, r7, lr}
    9ed6:	b087      	sub	sp, #28
    9ed8:	af02      	add	r7, sp, #8
    9eda:	6078      	str	r0, [r7, #4]
    9edc:	6039      	str	r1, [r7, #0]
    return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    unsigned char ch;
    int ret;
    // If all frames are read.
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    9ede:	683b      	ldr	r3, [r7, #0]
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	f003 0301 	and.w	r3, r3, #1
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	d13b      	bne.n	9f62 <dlms_handleGeneralCiphering+0x8e>
    {
        --data->data.position;
    9eea:	683b      	ldr	r3, [r7, #0]
    9eec:	899b      	ldrh	r3, [r3, #12]
    9eee:	3b01      	subs	r3, #1
    9ef0:	b29a      	uxth	r2, r3
    9ef2:	683b      	ldr	r3, [r7, #0]
    9ef4:	819a      	strh	r2, [r3, #12]
        DLMS_SECURITY security;
        if ((ret = cip_decrypt(&settings->cipher,
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	f103 0088 	add.w	r0, r3, #136	; 0x88
    9efc:	687b      	ldr	r3, [r7, #4]
    9efe:	f103 011c 	add.w	r1, r3, #28
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	f103 028c 	add.w	r2, r3, #140	; 0x8c
    9f08:	683b      	ldr	r3, [r7, #0]
    9f0a:	1d1c      	adds	r4, r3, #4
    9f0c:	f107 030a 	add.w	r3, r7, #10
    9f10:	9300      	str	r3, [sp, #0]
    9f12:	4623      	mov	r3, r4
    9f14:	f7fb fc0c 	bl	5730 <cip_decrypt>
    9f18:	60f8      	str	r0, [r7, #12]
    9f1a:	68fb      	ldr	r3, [r7, #12]
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d001      	beq.n	9f24 <dlms_handleGeneralCiphering+0x50>
            &settings->sourceSystemTitle,
            &settings->cipher.blockCipherKey,
            &data->data,
            &security)) != 0)
        {
            return ret;
    9f20:	68fb      	ldr	r3, [r7, #12]
    9f22:	e01f      	b.n	9f64 <dlms_handleGeneralCiphering+0x90>
        }
        // Get command
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9f24:	683b      	ldr	r3, [r7, #0]
    9f26:	3304      	adds	r3, #4
    9f28:	f107 020b 	add.w	r2, r7, #11
    9f2c:	4611      	mov	r1, r2
    9f2e:	4618      	mov	r0, r3
    9f30:	f7f9 fc3c 	bl	37ac <bb_getUInt8>
    9f34:	60f8      	str	r0, [r7, #12]
    9f36:	68fb      	ldr	r3, [r7, #12]
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d001      	beq.n	9f40 <dlms_handleGeneralCiphering+0x6c>
        {
            return ret;
    9f3c:	68fb      	ldr	r3, [r7, #12]
    9f3e:	e011      	b.n	9f64 <dlms_handleGeneralCiphering+0x90>
        }
        data->command = DLMS_COMMAND_NONE;
    9f40:	683b      	ldr	r3, [r7, #0]
    9f42:	2200      	movs	r2, #0
    9f44:	705a      	strb	r2, [r3, #1]
        if (security != DLMS_SECURITY_NONE)
    9f46:	7abb      	ldrb	r3, [r7, #10]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d00a      	beq.n	9f62 <dlms_handleGeneralCiphering+0x8e>
        {
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
    9f4c:	2200      	movs	r2, #0
    9f4e:	6839      	ldr	r1, [r7, #0]
    9f50:	6878      	ldr	r0, [r7, #4]
    9f52:	f000 f80b 	bl	9f6c <dlms_getPdu>
    9f56:	60f8      	str	r0, [r7, #12]
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	d001      	beq.n	9f62 <dlms_handleGeneralCiphering+0x8e>
            {
                return ret;
    9f5e:	68fb      	ldr	r3, [r7, #12]
    9f60:	e000      	b.n	9f64 <dlms_handleGeneralCiphering+0x90>
            }
        }
    }
    return 0;
    9f62:	2300      	movs	r3, #0
#endif //DLMS_IGNORE_HIGH_GMAC
}
    9f64:	4618      	mov	r0, r3
    9f66:	3714      	adds	r7, #20
    9f68:	46bd      	mov	sp, r7
    9f6a:	bd90      	pop	{r4, r7, pc}

00009f6c <dlms_getPdu>:

int dlms_getPdu(
    dlmsSettings* settings,
    gxReplyData* data,
    unsigned char first)
{
    9f6c:	b580      	push	{r7, lr}
    9f6e:	b088      	sub	sp, #32
    9f70:	af00      	add	r7, sp, #0
    9f72:	60f8      	str	r0, [r7, #12]
    9f74:	60b9      	str	r1, [r7, #8]
    9f76:	4613      	mov	r3, r2
    9f78:	71fb      	strb	r3, [r7, #7]
    int ret = DLMS_ERROR_CODE_OK;
    9f7a:	2300      	movs	r3, #0
    9f7c:	61fb      	str	r3, [r7, #28]
    unsigned short index;
    unsigned char ch;
    DLMS_COMMAND cmd = data->command;
    9f7e:	68bb      	ldr	r3, [r7, #8]
    9f80:	785b      	ldrb	r3, [r3, #1]
    9f82:	76fb      	strb	r3, [r7, #27]
    // If header is not read yet or GBT message.
    if (cmd == DLMS_COMMAND_NONE || data->gbt)
    9f84:	7efb      	ldrb	r3, [r7, #27]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d005      	beq.n	9f96 <dlms_getPdu+0x2a>
    9f8a:	68bb      	ldr	r3, [r7, #8]
    9f8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    9f90:	2b00      	cmp	r3, #0
    9f92:	f000 825b 	beq.w	a44c <dlms_getPdu+0x4e0>
    {
        // If PDU is missing.
        if (data->data.size - data->data.position == 0)
    9f96:	68bb      	ldr	r3, [r7, #8]
    9f98:	895a      	ldrh	r2, [r3, #10]
    9f9a:	68bb      	ldr	r3, [r7, #8]
    9f9c:	899b      	ldrh	r3, [r3, #12]
    9f9e:	429a      	cmp	r2, r3
    9fa0:	d102      	bne.n	9fa8 <dlms_getPdu+0x3c>
        {
            // Invalid PDU.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    9fa2:	f44f 7381 	mov.w	r3, #258	; 0x102
    9fa6:	e2d8      	b.n	a55a <dlms_getPdu+0x5ee>
        }
        index = (unsigned short)(data->data.position);
    9fa8:	68bb      	ldr	r3, [r7, #8]
    9faa:	899b      	ldrh	r3, [r3, #12]
    9fac:	833b      	strh	r3, [r7, #24]
        // Get command.
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    9fae:	68bb      	ldr	r3, [r7, #8]
    9fb0:	3304      	adds	r3, #4
    9fb2:	f107 0217 	add.w	r2, r7, #23
    9fb6:	4611      	mov	r1, r2
    9fb8:	4618      	mov	r0, r3
    9fba:	f7f9 fbf7 	bl	37ac <bb_getUInt8>
    9fbe:	61f8      	str	r0, [r7, #28]
    9fc0:	69fb      	ldr	r3, [r7, #28]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d001      	beq.n	9fca <dlms_getPdu+0x5e>
        {
            return ret;
    9fc6:	69fb      	ldr	r3, [r7, #28]
    9fc8:	e2c7      	b.n	a55a <dlms_getPdu+0x5ee>
        }
        cmd = (DLMS_COMMAND)ch;
    9fca:	7dfb      	ldrb	r3, [r7, #23]
    9fcc:	76fb      	strb	r3, [r7, #27]
        data->command = cmd;
    9fce:	68bb      	ldr	r3, [r7, #8]
    9fd0:	7efa      	ldrb	r2, [r7, #27]
    9fd2:	705a      	strb	r2, [r3, #1]
        switch (cmd)
    9fd4:	7efb      	ldrb	r3, [r7, #27]
    9fd6:	3b05      	subs	r3, #5
    9fd8:	2bdb      	cmp	r3, #219	; 0xdb
    9fda:	f200 822e 	bhi.w	a43a <dlms_getPdu+0x4ce>
    9fde:	a201      	add	r2, pc, #4	; (adr r2, 9fe4 <dlms_getPdu+0x78>)
    9fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9fe4:	0000a3d5 	.word	0x0000a3d5
    9fe8:	0000a3d5 	.word	0x0000a3d5
    9fec:	0000a43b 	.word	0x0000a43b
    9ff0:	0000a43b 	.word	0x0000a43b
    9ff4:	0000a43b 	.word	0x0000a43b
    9ff8:	0000a43b 	.word	0x0000a43b
    9ffc:	0000a43b 	.word	0x0000a43b
    a000:	0000a355 	.word	0x0000a355
    a004:	0000a3a7 	.word	0x0000a3a7
    a008:	0000a43b 	.word	0x0000a43b
    a00c:	0000a42f 	.word	0x0000a42f
    a010:	0000a43b 	.word	0x0000a43b
    a014:	0000a43b 	.word	0x0000a43b
    a018:	0000a43b 	.word	0x0000a43b
    a01c:	0000a43b 	.word	0x0000a43b
    a020:	0000a43b 	.word	0x0000a43b
    a024:	0000a43b 	.word	0x0000a43b
    a028:	0000a43b 	.word	0x0000a43b
    a02c:	0000a43b 	.word	0x0000a43b
    a030:	0000a441 	.word	0x0000a441
    a034:	0000a43b 	.word	0x0000a43b
    a038:	0000a43b 	.word	0x0000a43b
    a03c:	0000a43b 	.word	0x0000a43b
    a040:	0000a43b 	.word	0x0000a43b
    a044:	0000a43b 	.word	0x0000a43b
    a048:	0000a43b 	.word	0x0000a43b
    a04c:	0000a43b 	.word	0x0000a43b
    a050:	0000a43b 	.word	0x0000a43b
    a054:	0000a43b 	.word	0x0000a43b
    a058:	0000a43b 	.word	0x0000a43b
    a05c:	0000a43b 	.word	0x0000a43b
    a060:	0000a43b 	.word	0x0000a43b
    a064:	0000a3e1 	.word	0x0000a3e1
    a068:	0000a3e1 	.word	0x0000a3e1
    a06c:	0000a43b 	.word	0x0000a43b
    a070:	0000a43b 	.word	0x0000a43b
    a074:	0000a43b 	.word	0x0000a43b
    a078:	0000a43b 	.word	0x0000a43b
    a07c:	0000a43b 	.word	0x0000a43b
    a080:	0000a3ed 	.word	0x0000a3ed
    a084:	0000a3ed 	.word	0x0000a3ed
    a088:	0000a43b 	.word	0x0000a43b
    a08c:	0000a43b 	.word	0x0000a43b
    a090:	0000a43b 	.word	0x0000a43b
    a094:	0000a43b 	.word	0x0000a43b
    a098:	0000a43b 	.word	0x0000a43b
    a09c:	0000a43b 	.word	0x0000a43b
    a0a0:	0000a43b 	.word	0x0000a43b
    a0a4:	0000a43b 	.word	0x0000a43b
    a0a8:	0000a43b 	.word	0x0000a43b
    a0ac:	0000a43b 	.word	0x0000a43b
    a0b0:	0000a43b 	.word	0x0000a43b
    a0b4:	0000a43b 	.word	0x0000a43b
    a0b8:	0000a43b 	.word	0x0000a43b
    a0bc:	0000a43b 	.word	0x0000a43b
    a0c0:	0000a43b 	.word	0x0000a43b
    a0c4:	0000a43b 	.word	0x0000a43b
    a0c8:	0000a43b 	.word	0x0000a43b
    a0cc:	0000a43b 	.word	0x0000a43b
    a0d0:	0000a43b 	.word	0x0000a43b
    a0d4:	0000a43b 	.word	0x0000a43b
    a0d8:	0000a43b 	.word	0x0000a43b
    a0dc:	0000a43b 	.word	0x0000a43b
    a0e0:	0000a43b 	.word	0x0000a43b
    a0e4:	0000a43b 	.word	0x0000a43b
    a0e8:	0000a43b 	.word	0x0000a43b
    a0ec:	0000a43b 	.word	0x0000a43b
    a0f0:	0000a43b 	.word	0x0000a43b
    a0f4:	0000a43b 	.word	0x0000a43b
    a0f8:	0000a43b 	.word	0x0000a43b
    a0fc:	0000a43b 	.word	0x0000a43b
    a100:	0000a43b 	.word	0x0000a43b
    a104:	0000a43b 	.word	0x0000a43b
    a108:	0000a43b 	.word	0x0000a43b
    a10c:	0000a43b 	.word	0x0000a43b
    a110:	0000a43b 	.word	0x0000a43b
    a114:	0000a43b 	.word	0x0000a43b
    a118:	0000a43b 	.word	0x0000a43b
    a11c:	0000a43b 	.word	0x0000a43b
    a120:	0000a43b 	.word	0x0000a43b
    a124:	0000a43b 	.word	0x0000a43b
    a128:	0000a43b 	.word	0x0000a43b
    a12c:	0000a43b 	.word	0x0000a43b
    a130:	0000a43b 	.word	0x0000a43b
    a134:	0000a43b 	.word	0x0000a43b
    a138:	0000a43b 	.word	0x0000a43b
    a13c:	0000a43b 	.word	0x0000a43b
    a140:	0000a43b 	.word	0x0000a43b
    a144:	0000a43b 	.word	0x0000a43b
    a148:	0000a43b 	.word	0x0000a43b
    a14c:	0000a43b 	.word	0x0000a43b
    a150:	0000a3c7 	.word	0x0000a3c7
    a154:	0000a3c7 	.word	0x0000a3c7
    a158:	0000a3d5 	.word	0x0000a3d5
    a15c:	0000a441 	.word	0x0000a441
    a160:	0000a43b 	.word	0x0000a43b
    a164:	0000a43b 	.word	0x0000a43b
    a168:	0000a43b 	.word	0x0000a43b
    a16c:	0000a43b 	.word	0x0000a43b
    a170:	0000a43b 	.word	0x0000a43b
    a174:	0000a43b 	.word	0x0000a43b
    a178:	0000a43b 	.word	0x0000a43b
    a17c:	0000a43b 	.word	0x0000a43b
    a180:	0000a43b 	.word	0x0000a43b
    a184:	0000a43b 	.word	0x0000a43b
    a188:	0000a43b 	.word	0x0000a43b
    a18c:	0000a43b 	.word	0x0000a43b
    a190:	0000a43b 	.word	0x0000a43b
    a194:	0000a43b 	.word	0x0000a43b
    a198:	0000a43b 	.word	0x0000a43b
    a19c:	0000a43b 	.word	0x0000a43b
    a1a0:	0000a43b 	.word	0x0000a43b
    a1a4:	0000a43b 	.word	0x0000a43b
    a1a8:	0000a43b 	.word	0x0000a43b
    a1ac:	0000a43b 	.word	0x0000a43b
    a1b0:	0000a43b 	.word	0x0000a43b
    a1b4:	0000a43b 	.word	0x0000a43b
    a1b8:	0000a43b 	.word	0x0000a43b
    a1bc:	0000a43b 	.word	0x0000a43b
    a1c0:	0000a43b 	.word	0x0000a43b
    a1c4:	0000a43b 	.word	0x0000a43b
    a1c8:	0000a43b 	.word	0x0000a43b
    a1cc:	0000a43b 	.word	0x0000a43b
    a1d0:	0000a43b 	.word	0x0000a43b
    a1d4:	0000a43b 	.word	0x0000a43b
    a1d8:	0000a43b 	.word	0x0000a43b
    a1dc:	0000a43b 	.word	0x0000a43b
    a1e0:	0000a43b 	.word	0x0000a43b
    a1e4:	0000a43b 	.word	0x0000a43b
    a1e8:	0000a43b 	.word	0x0000a43b
    a1ec:	0000a43b 	.word	0x0000a43b
    a1f0:	0000a43b 	.word	0x0000a43b
    a1f4:	0000a43b 	.word	0x0000a43b
    a1f8:	0000a43b 	.word	0x0000a43b
    a1fc:	0000a43b 	.word	0x0000a43b
    a200:	0000a43b 	.word	0x0000a43b
    a204:	0000a43b 	.word	0x0000a43b
    a208:	0000a43b 	.word	0x0000a43b
    a20c:	0000a43b 	.word	0x0000a43b
    a210:	0000a43b 	.word	0x0000a43b
    a214:	0000a43b 	.word	0x0000a43b
    a218:	0000a43b 	.word	0x0000a43b
    a21c:	0000a43b 	.word	0x0000a43b
    a220:	0000a43b 	.word	0x0000a43b
    a224:	0000a43b 	.word	0x0000a43b
    a228:	0000a43b 	.word	0x0000a43b
    a22c:	0000a43b 	.word	0x0000a43b
    a230:	0000a43b 	.word	0x0000a43b
    a234:	0000a43b 	.word	0x0000a43b
    a238:	0000a43b 	.word	0x0000a43b
    a23c:	0000a43b 	.word	0x0000a43b
    a240:	0000a43b 	.word	0x0000a43b
    a244:	0000a43b 	.word	0x0000a43b
    a248:	0000a43b 	.word	0x0000a43b
    a24c:	0000a43b 	.word	0x0000a43b
    a250:	0000a43b 	.word	0x0000a43b
    a254:	0000a43b 	.word	0x0000a43b
    a258:	0000a43b 	.word	0x0000a43b
    a25c:	0000a43b 	.word	0x0000a43b
    a260:	0000a43b 	.word	0x0000a43b
    a264:	0000a43b 	.word	0x0000a43b
    a268:	0000a43b 	.word	0x0000a43b
    a26c:	0000a43b 	.word	0x0000a43b
    a270:	0000a43b 	.word	0x0000a43b
    a274:	0000a43b 	.word	0x0000a43b
    a278:	0000a43b 	.word	0x0000a43b
    a27c:	0000a43b 	.word	0x0000a43b
    a280:	0000a43b 	.word	0x0000a43b
    a284:	0000a43b 	.word	0x0000a43b
    a288:	0000a43b 	.word	0x0000a43b
    a28c:	0000a43b 	.word	0x0000a43b
    a290:	0000a43b 	.word	0x0000a43b
    a294:	0000a43b 	.word	0x0000a43b
    a298:	0000a43b 	.word	0x0000a43b
    a29c:	0000a43b 	.word	0x0000a43b
    a2a0:	0000a43b 	.word	0x0000a43b
    a2a4:	0000a43b 	.word	0x0000a43b
    a2a8:	0000a43b 	.word	0x0000a43b
    a2ac:	0000a43b 	.word	0x0000a43b
    a2b0:	0000a43b 	.word	0x0000a43b
    a2b4:	0000a43b 	.word	0x0000a43b
    a2b8:	0000a43b 	.word	0x0000a43b
    a2bc:	0000a43b 	.word	0x0000a43b
    a2c0:	0000a43b 	.word	0x0000a43b
    a2c4:	0000a43b 	.word	0x0000a43b
    a2c8:	0000a43b 	.word	0x0000a43b
    a2cc:	0000a43b 	.word	0x0000a43b
    a2d0:	0000a3d5 	.word	0x0000a3d5
    a2d4:	0000a3d5 	.word	0x0000a3d5
    a2d8:	0000a441 	.word	0x0000a441
    a2dc:	0000a3d5 	.word	0x0000a3d5
    a2e0:	0000a379 	.word	0x0000a379
    a2e4:	0000a39d 	.word	0x0000a39d
    a2e8:	0000a43b 	.word	0x0000a43b
    a2ec:	0000a3b1 	.word	0x0000a3b1
    a2f0:	0000a3e1 	.word	0x0000a3e1
    a2f4:	0000a3e1 	.word	0x0000a3e1
    a2f8:	0000a43b 	.word	0x0000a43b
    a2fc:	0000a3e1 	.word	0x0000a3e1
    a300:	0000a3ed 	.word	0x0000a3ed
    a304:	0000a3ed 	.word	0x0000a3ed
    a308:	0000a43b 	.word	0x0000a43b
    a30c:	0000a3ed 	.word	0x0000a3ed
    a310:	0000a3e1 	.word	0x0000a3e1
    a314:	0000a3e1 	.word	0x0000a3e1
    a318:	0000a3ed 	.word	0x0000a3ed
    a31c:	0000a3e1 	.word	0x0000a3e1
    a320:	0000a3ed 	.word	0x0000a3ed
    a324:	0000a3ed 	.word	0x0000a3ed
    a328:	0000a43b 	.word	0x0000a43b
    a32c:	0000a3ed 	.word	0x0000a3ed
    a330:	0000a3d5 	.word	0x0000a3d5
    a334:	0000a43b 	.word	0x0000a43b
    a338:	0000a43b 	.word	0x0000a43b
    a33c:	0000a3fd 	.word	0x0000a3fd
    a340:	0000a3fd 	.word	0x0000a3fd
    a344:	0000a423 	.word	0x0000a423
    a348:	0000a43b 	.word	0x0000a43b
    a34c:	0000a43b 	.word	0x0000a43b
    a350:	0000a3bb 	.word	0x0000a3bb
        {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_READ_RESPONSE:
            if ((ret = dlms_handleReadResponse(settings, data, index)) != 0)
    a354:	8b3b      	ldrh	r3, [r7, #24]
    a356:	461a      	mov	r2, r3
    a358:	68b9      	ldr	r1, [r7, #8]
    a35a:	68f8      	ldr	r0, [r7, #12]
    a35c:	f7ff f830 	bl	93c0 <dlms_handleReadResponse>
    a360:	61f8      	str	r0, [r7, #28]
    a362:	69fb      	ldr	r3, [r7, #28]
    a364:	2b00      	cmp	r3, #0
    a366:	d06d      	beq.n	a444 <dlms_getPdu+0x4d8>
            {
                if (ret == DLMS_ERROR_CODE_FALSE)
    a368:	69fb      	ldr	r3, [r7, #28]
    a36a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a36e:	d101      	bne.n	a374 <dlms_getPdu+0x408>
                {
                    return DLMS_ERROR_CODE_OK;
    a370:	2300      	movs	r3, #0
    a372:	e0f2      	b.n	a55a <dlms_getPdu+0x5ee>
                }
                return ret;
    a374:	69fb      	ldr	r3, [r7, #28]
    a376:	e0f0      	b.n	a55a <dlms_getPdu+0x5ee>
            }
            break;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_GET_RESPONSE:
            if ((ret = dlms_handleGetResponse(settings, data, index)) != 0)
    a378:	8b3b      	ldrh	r3, [r7, #24]
    a37a:	461a      	mov	r2, r3
    a37c:	68b9      	ldr	r1, [r7, #8]
    a37e:	68f8      	ldr	r0, [r7, #12]
    a380:	f7fe fd7e 	bl	8e80 <dlms_handleGetResponse>
    a384:	61f8      	str	r0, [r7, #28]
    a386:	69fb      	ldr	r3, [r7, #28]
    a388:	2b00      	cmp	r3, #0
    a38a:	d05d      	beq.n	a448 <dlms_getPdu+0x4dc>
            {
                if (ret == DLMS_ERROR_CODE_FALSE)
    a38c:	69fb      	ldr	r3, [r7, #28]
    a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
    a392:	d101      	bne.n	a398 <dlms_getPdu+0x42c>
                {
                    return DLMS_ERROR_CODE_OK;
    a394:	2300      	movs	r3, #0
    a396:	e0e0      	b.n	a55a <dlms_getPdu+0x5ee>
                }
                return ret;
    a398:	69fb      	ldr	r3, [r7, #28]
    a39a:	e0de      	b.n	a55a <dlms_getPdu+0x5ee>
            }
            break;
        case DLMS_COMMAND_SET_RESPONSE:
            ret = dlms_handleSetResponse(data);
    a39c:	68b8      	ldr	r0, [r7, #8]
    a39e:	f7ff f9e1 	bl	9764 <dlms_handleSetResponse>
    a3a2:	61f8      	str	r0, [r7, #28]
            break;
    a3a4:	e051      	b.n	a44a <dlms_getPdu+0x4de>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_WRITE_RESPONSE:
            ret = dlms_handleWriteResponse(data);
    a3a6:	68b8      	ldr	r0, [r7, #8]
    a3a8:	f7fe fe8a 	bl	90c0 <dlms_handleWriteResponse>
    a3ac:	61f8      	str	r0, [r7, #28]
            break;
    a3ae:	e04c      	b.n	a44a <dlms_getPdu+0x4de>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_METHOD_RESPONSE:
            ret = dlms_handleMethodResponse(data);
    a3b0:	68b8      	ldr	r0, [r7, #8]
    a3b2:	f7ff f939 	bl	9628 <dlms_handleMethodResponse>
    a3b6:	61f8      	str	r0, [r7, #28]
            break;
    a3b8:	e047      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_GENERAL_BLOCK_TRANSFER:
            ret = dlms_handleGbt(settings, data);
    a3ba:	68b9      	ldr	r1, [r7, #8]
    a3bc:	68f8      	ldr	r0, [r7, #12]
    a3be:	f7ff fb39 	bl	9a34 <dlms_handleGbt>
    a3c2:	61f8      	str	r0, [r7, #28]
            break;
    a3c4:	e041      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_AARQ:
        case DLMS_COMMAND_AARE:
            // This is parsed later.
            data->data.position = (data->data.position - 1);
    a3c6:	68bb      	ldr	r3, [r7, #8]
    a3c8:	899b      	ldrh	r3, [r3, #12]
    a3ca:	3b01      	subs	r3, #1
    a3cc:	b29a      	uxth	r2, r3
    a3ce:	68bb      	ldr	r3, [r7, #8]
    a3d0:	819a      	strh	r2, [r3, #12]
            break;
    a3d2:	e03a      	b.n	a44a <dlms_getPdu+0x4de>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_COMMAND_SET_REQUEST:
        case DLMS_COMMAND_METHOD_REQUEST:
        case DLMS_COMMAND_RELEASE_REQUEST:
            // Server handles this.
            if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    a3d4:	68bb      	ldr	r3, [r7, #8]
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	f003 0301 	and.w	r3, r3, #1
    a3dc:	2b00      	cmp	r3, #0
            {
                break;
            }
            break;
    a3de:	e034      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_GLO_SET_REQUEST:
        case DLMS_COMMAND_GLO_METHOD_REQUEST:
        case DLMS_COMMAND_DED_GET_REQUEST:
        case DLMS_COMMAND_DED_SET_REQUEST:
        case DLMS_COMMAND_DED_METHOD_REQUEST:
            ret = dlms_handledGloDedRequest(settings, data);
    a3e0:	68b9      	ldr	r1, [r7, #8]
    a3e2:	68f8      	ldr	r0, [r7, #12]
    a3e4:	f7ff fc0e 	bl	9c04 <dlms_handledGloDedRequest>
    a3e8:	61f8      	str	r0, [r7, #28]
            // Server handles this.
            break;
    a3ea:	e02e      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_DED_GET_RESPONSE:
        case DLMS_COMMAND_DED_SET_RESPONSE:
        case DLMS_COMMAND_DED_METHOD_RESPONSE:
        case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
            // If all frames are read.
            ret = dlms_handledGloDedResponse(settings, data, index);
    a3ec:	8b3b      	ldrh	r3, [r7, #24]
    a3ee:	461a      	mov	r2, r3
    a3f0:	68b9      	ldr	r1, [r7, #8]
    a3f2:	68f8      	ldr	r0, [r7, #12]
    a3f4:	f7ff fcd0 	bl	9d98 <dlms_handledGloDedResponse>
    a3f8:	61f8      	str	r0, [r7, #28]
            break;
    a3fa:	e026      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_GENERAL_GLO_CIPHERING:
        case DLMS_COMMAND_GENERAL_DED_CIPHERING:
            if (settings->server)
    a3fc:	68fb      	ldr	r3, [r7, #12]
    a3fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a402:	2b00      	cmp	r3, #0
    a404:	d005      	beq.n	a412 <dlms_getPdu+0x4a6>
            {
                ret = dlms_handledGloDedRequest(settings, data);
    a406:	68b9      	ldr	r1, [r7, #8]
    a408:	68f8      	ldr	r0, [r7, #12]
    a40a:	f7ff fbfb 	bl	9c04 <dlms_handledGloDedRequest>
    a40e:	61f8      	str	r0, [r7, #28]
            }
            else
            {
                ret = dlms_handledGloDedResponse(settings, data, index);
            }
            break;
    a410:	e01b      	b.n	a44a <dlms_getPdu+0x4de>
            {
                ret = dlms_handledGloDedRequest(settings, data);
            }
            else
            {
                ret = dlms_handledGloDedResponse(settings, data, index);
    a412:	8b3b      	ldrh	r3, [r7, #24]
    a414:	461a      	mov	r2, r3
    a416:	68b9      	ldr	r1, [r7, #8]
    a418:	68f8      	ldr	r0, [r7, #12]
    a41a:	f7ff fcbd 	bl	9d98 <dlms_handledGloDedResponse>
    a41e:	61f8      	str	r0, [r7, #28]
            }
            break;
    a420:	e013      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_GENERAL_CIPHERING:
            ret = dlms_handleGeneralCiphering(settings, data);
    a422:	68b9      	ldr	r1, [r7, #8]
    a424:	68f8      	ldr	r0, [r7, #12]
    a426:	f7ff fd55 	bl	9ed4 <dlms_handleGeneralCiphering>
    a42a:	61f8      	str	r0, [r7, #28]
            break;
    a42c:	e00d      	b.n	a44a <dlms_getPdu+0x4de>
#endif //DLMS_IGNORE_HIGH_GMAC
        case DLMS_COMMAND_DATA_NOTIFICATION:
            ret = dlms_handleDataNotification(settings, data);
    a42e:	68b9      	ldr	r1, [r7, #8]
    a430:	68f8      	ldr	r0, [r7, #12]
    a432:	f7ff fa8f 	bl	9954 <dlms_handleDataNotification>
    a436:	61f8      	str	r0, [r7, #28]
            // Client handles this.
            break;
    a438:	e007      	b.n	a44a <dlms_getPdu+0x4de>
        case DLMS_COMMAND_INFORMATION_REPORT:
            // Client handles this.
            break;
        default:
            // Invalid command.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    a43a:	f44f 7381 	mov.w	r3, #258	; 0x102
    a43e:	e08c      	b.n	a55a <dlms_getPdu+0x5ee>
        case DLMS_COMMAND_EVENT_NOTIFICATION:
            // Client handles this.
            break;
        case DLMS_COMMAND_INFORMATION_REPORT:
            // Client handles this.
            break;
    a440:	bf00      	nop
    a442:	e060      	b.n	a506 <dlms_getPdu+0x59a>
                {
                    return DLMS_ERROR_CODE_OK;
                }
                return ret;
            }
            break;
    a444:	bf00      	nop
    a446:	e05e      	b.n	a506 <dlms_getPdu+0x59a>
                {
                    return DLMS_ERROR_CODE_OK;
                }
                return ret;
            }
            break;
    a448:	bf00      	nop
            break;
        default:
            // Invalid command.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
    }
    a44a:	e05c      	b.n	a506 <dlms_getPdu+0x59a>
    else if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    a44c:	68bb      	ldr	r3, [r7, #8]
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	f003 0301 	and.w	r3, r3, #1
    a454:	2b00      	cmp	r3, #0
    a456:	d156      	bne.n	a506 <dlms_getPdu+0x59a>
    {
        // Is whole block is read and if last packet and data is not try to
        // peek.
        if (!data->peek && data->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    a458:	68bb      	ldr	r3, [r7, #8]
    a45a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    a45e:	2b00      	cmp	r3, #0
    a460:	d115      	bne.n	a48e <dlms_getPdu+0x522>
    a462:	68bb      	ldr	r3, [r7, #8]
    a464:	781b      	ldrb	r3, [r3, #0]
    a466:	2b00      	cmp	r3, #0
    a468:	d111      	bne.n	a48e <dlms_getPdu+0x522>
        {
            if (data->command == DLMS_COMMAND_AARE
    a46a:	68bb      	ldr	r3, [r7, #8]
    a46c:	785b      	ldrb	r3, [r3, #1]
    a46e:	2b61      	cmp	r3, #97	; 0x61
    a470:	d003      	beq.n	a47a <dlms_getPdu+0x50e>
                || data->command == DLMS_COMMAND_AARQ)
    a472:	68bb      	ldr	r3, [r7, #8]
    a474:	785b      	ldrb	r3, [r3, #1]
    a476:	2b60      	cmp	r3, #96	; 0x60
    a478:	d103      	bne.n	a482 <dlms_getPdu+0x516>
            {
                data->data.position = 0;
    a47a:	68bb      	ldr	r3, [r7, #8]
    a47c:	2200      	movs	r2, #0
    a47e:	819a      	strh	r2, [r3, #12]
    a480:	e002      	b.n	a488 <dlms_getPdu+0x51c>
            }
            else
            {
                data->data.position = 1;
    a482:	68bb      	ldr	r3, [r7, #8]
    a484:	2201      	movs	r2, #1
    a486:	819a      	strh	r2, [r3, #12]
            }
            resetBlockIndex(settings);
    a488:	68f8      	ldr	r0, [r7, #12]
    a48a:	f001 fc15 	bl	bcb8 <resetBlockIndex>
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        // Get command if operating as a server.
        if (settings->server)
    a48e:	68fb      	ldr	r3, [r7, #12]
    a490:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a494:	2b00      	cmp	r3, #0
    a496:	d019      	beq.n	a4cc <dlms_getPdu+0x560>
        {
            // Ciphered messages are handled after whole PDU is received.
            switch (cmd)
    a498:	7efb      	ldrb	r3, [r7, #27]
    a49a:	2bc9      	cmp	r3, #201	; 0xc9
    a49c:	dc05      	bgt.n	a4aa <dlms_getPdu+0x53e>
    a49e:	2bc8      	cmp	r3, #200	; 0xc8
    a4a0:	da06      	bge.n	a4b0 <dlms_getPdu+0x544>
    a4a2:	3b25      	subs	r3, #37	; 0x25
    a4a4:	2b01      	cmp	r3, #1
    a4a6:	d82b      	bhi.n	a500 <dlms_getPdu+0x594>
    a4a8:	e002      	b.n	a4b0 <dlms_getPdu+0x544>
    a4aa:	2bcb      	cmp	r3, #203	; 0xcb
    a4ac:	d000      	beq.n	a4b0 <dlms_getPdu+0x544>
                data->command = DLMS_COMMAND_NONE;
                data->data.position = (data->cipherIndex);
                ret = dlms_getPdu(settings, data, 0);
                break;
            default:
                break;
    a4ae:	e027      	b.n	a500 <dlms_getPdu+0x594>
            case DLMS_COMMAND_GLO_READ_REQUEST:
            case DLMS_COMMAND_GLO_WRITE_REQUEST:
            case DLMS_COMMAND_GLO_GET_REQUEST:
            case DLMS_COMMAND_GLO_SET_REQUEST:
            case DLMS_COMMAND_GLO_METHOD_REQUEST:
                data->command = DLMS_COMMAND_NONE;
    a4b0:	68bb      	ldr	r3, [r7, #8]
    a4b2:	2200      	movs	r2, #0
    a4b4:	705a      	strb	r2, [r3, #1]
                data->data.position = (data->cipherIndex);
    a4b6:	68bb      	ldr	r3, [r7, #8]
    a4b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    a4ba:	68bb      	ldr	r3, [r7, #8]
    a4bc:	819a      	strh	r2, [r3, #12]
                ret = dlms_getPdu(settings, data, 0);
    a4be:	2200      	movs	r2, #0
    a4c0:	68b9      	ldr	r1, [r7, #8]
    a4c2:	68f8      	ldr	r0, [r7, #12]
    a4c4:	f7ff fd52 	bl	9f6c <dlms_getPdu>
    a4c8:	61f8      	str	r0, [r7, #28]
                break;
    a4ca:	e01c      	b.n	a506 <dlms_getPdu+0x59a>
            }
        }
        else
        {
            // Client do not need a command any more.
            data->command = DLMS_COMMAND_NONE;
    a4cc:	68bb      	ldr	r3, [r7, #8]
    a4ce:	2200      	movs	r2, #0
    a4d0:	705a      	strb	r2, [r3, #1]
            // Ciphered messages are handled after whole PDU is received.
            switch (cmd)
    a4d2:	7efb      	ldrb	r3, [r7, #27]
    a4d4:	2bcd      	cmp	r3, #205	; 0xcd
    a4d6:	dc05      	bgt.n	a4e4 <dlms_getPdu+0x578>
    a4d8:	2bcc      	cmp	r3, #204	; 0xcc
    a4da:	da06      	bge.n	a4ea <dlms_getPdu+0x57e>
    a4dc:	3b2c      	subs	r3, #44	; 0x2c
    a4de:	2b01      	cmp	r3, #1
    a4e0:	d810      	bhi.n	a504 <dlms_getPdu+0x598>
    a4e2:	e002      	b.n	a4ea <dlms_getPdu+0x57e>
    a4e4:	2bcf      	cmp	r3, #207	; 0xcf
    a4e6:	d000      	beq.n	a4ea <dlms_getPdu+0x57e>
            case DLMS_COMMAND_GLO_METHOD_RESPONSE:
                data->data.position = data->cipherIndex;
                ret = dlms_getPdu(settings, data, 0);
                break;
            default:
                break;
    a4e8:	e00c      	b.n	a504 <dlms_getPdu+0x598>
            case DLMS_COMMAND_GLO_READ_RESPONSE:
            case DLMS_COMMAND_GLO_WRITE_RESPONSE:
            case DLMS_COMMAND_GLO_GET_RESPONSE:
            case DLMS_COMMAND_GLO_SET_RESPONSE:
            case DLMS_COMMAND_GLO_METHOD_RESPONSE:
                data->data.position = data->cipherIndex;
    a4ea:	68bb      	ldr	r3, [r7, #8]
    a4ec:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    a4ee:	68bb      	ldr	r3, [r7, #8]
    a4f0:	819a      	strh	r2, [r3, #12]
                ret = dlms_getPdu(settings, data, 0);
    a4f2:	2200      	movs	r2, #0
    a4f4:	68b9      	ldr	r1, [r7, #8]
    a4f6:	68f8      	ldr	r0, [r7, #12]
    a4f8:	f7ff fd38 	bl	9f6c <dlms_getPdu>
    a4fc:	61f8      	str	r0, [r7, #28]
                break;
    a4fe:	e002      	b.n	a506 <dlms_getPdu+0x59a>
                data->command = DLMS_COMMAND_NONE;
                data->data.position = (data->cipherIndex);
                ret = dlms_getPdu(settings, data, 0);
                break;
            default:
                break;
    a500:	bf00      	nop
    a502:	e000      	b.n	a506 <dlms_getPdu+0x59a>
            case DLMS_COMMAND_GLO_METHOD_RESPONSE:
                data->data.position = data->cipherIndex;
                ret = dlms_getPdu(settings, data, 0);
                break;
            default:
                break;
    a504:	bf00      	nop
#endif //DLMS_IGNORE_HIGH_GMAC
    }

#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    // Get data only blocks if SN is used. This is faster.
    if (cmd == DLMS_COMMAND_READ_RESPONSE
    a506:	7efb      	ldrb	r3, [r7, #27]
    a508:	2b0c      	cmp	r3, #12
    a50a:	d10b      	bne.n	a524 <dlms_getPdu+0x5b8>
        && data->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT
    a50c:	68bb      	ldr	r3, [r7, #8]
    a50e:	78db      	ldrb	r3, [r3, #3]
    a510:	2b02      	cmp	r3, #2
    a512:	d107      	bne.n	a524 <dlms_getPdu+0x5b8>
        && (data->moreData &  DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    a514:	68bb      	ldr	r3, [r7, #8]
    a516:	781b      	ldrb	r3, [r3, #0]
    a518:	f003 0301 	and.w	r3, r3, #1
    a51c:	2b00      	cmp	r3, #0
    a51e:	d001      	beq.n	a524 <dlms_getPdu+0x5b8>
    {
        return 0;
    a520:	2300      	movs	r3, #0
    a522:	e01a      	b.n	a55a <dlms_getPdu+0x5ee>
    }
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME

    // Get data if all data is read or we want to peek data.
    if (data->data.position != data->data.size
    a524:	68bb      	ldr	r3, [r7, #8]
    a526:	899a      	ldrh	r2, [r3, #12]
    a528:	68bb      	ldr	r3, [r7, #8]
    a52a:	895b      	ldrh	r3, [r3, #10]
    a52c:	429a      	cmp	r2, r3
    a52e:	d013      	beq.n	a558 <dlms_getPdu+0x5ec>
        && (
    a530:	7efb      	ldrb	r3, [r7, #27]
    a532:	2b0c      	cmp	r3, #12
    a534:	d002      	beq.n	a53c <dlms_getPdu+0x5d0>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            cmd == DLMS_COMMAND_READ_RESPONSE ||
    a536:	7efb      	ldrb	r3, [r7, #27]
    a538:	2bc4      	cmp	r3, #196	; 0xc4
    a53a:	d10d      	bne.n	a558 <dlms_getPdu+0x5ec>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            cmd == DLMS_COMMAND_GET_RESPONSE)
        && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE
    a53c:	68bb      	ldr	r3, [r7, #8]
    a53e:	781b      	ldrb	r3, [r3, #0]
    a540:	2b00      	cmp	r3, #0
    a542:	d004      	beq.n	a54e <dlms_getPdu+0x5e2>
            || data->peek))
    a544:	68bb      	ldr	r3, [r7, #8]
    a546:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    a54a:	2b00      	cmp	r3, #0
    a54c:	d004      	beq.n	a558 <dlms_getPdu+0x5ec>
    {
        ret = dlms_getValueFromData(settings, data);
    a54e:	68b9      	ldr	r1, [r7, #8]
    a550:	68f8      	ldr	r0, [r7, #12]
    a552:	f7fe fdf7 	bl	9144 <dlms_getValueFromData>
    a556:	61f8      	str	r0, [r7, #28]
    }
    return ret;
    a558:	69fb      	ldr	r3, [r7, #28]
}
    a55a:	4618      	mov	r0, r3
    a55c:	3720      	adds	r7, #32
    a55e:	46bd      	mov	sp, r7
    a560:	bd80      	pop	{r7, pc}
    a562:	bf00      	nop

0000a564 <dlms_addLLCBytes>:
*            Data where bytes are added.
*/
void dlms_addLLCBytes(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
    a564:	b580      	push	{r7, lr}
    a566:	b082      	sub	sp, #8
    a568:	af00      	add	r7, sp, #0
    a56a:	6078      	str	r0, [r7, #4]
    a56c:	6039      	str	r1, [r7, #0]
    if (settings->server)
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a574:	2b00      	cmp	r3, #0
    a576:	d005      	beq.n	a584 <dlms_addLLCBytes+0x20>
    {
        bb_set(data, LLC_REPLY_BYTES, 3);
    a578:	2203      	movs	r2, #3
    a57a:	4907      	ldr	r1, [pc, #28]	; (a598 <dlms_addLLCBytes+0x34>)
    a57c:	6838      	ldr	r0, [r7, #0]
    a57e:	f7f8 ffef 	bl	3560 <bb_set>
    }
    else
    {
        bb_set(data, LLC_SEND_BYTES, 3);
    }
}
    a582:	e004      	b.n	a58e <dlms_addLLCBytes+0x2a>
    {
        bb_set(data, LLC_REPLY_BYTES, 3);
    }
    else
    {
        bb_set(data, LLC_SEND_BYTES, 3);
    a584:	2203      	movs	r2, #3
    a586:	4905      	ldr	r1, [pc, #20]	; (a59c <dlms_addLLCBytes+0x38>)
    a588:	6838      	ldr	r0, [r7, #0]
    a58a:	f7f8 ffe9 	bl	3560 <bb_set>
    }
}
    a58e:	bf00      	nop
    a590:	3708      	adds	r7, #8
    a592:	46bd      	mov	sp, r7
    a594:	bd80      	pop	{r7, pc}
    a596:	bf00      	nop
    a598:	0002ccdc 	.word	0x0002ccdc
    a59c:	0002ccd8 	.word	0x0002ccd8

0000a5a0 <dlms_appendMultipleSNBlocks>:

#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int dlms_appendMultipleSNBlocks(
    gxSNParameters *p,
    gxByteBuffer *reply)
{
    a5a0:	b580      	push	{r7, lr}
    a5a2:	b086      	sub	sp, #24
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
    a5a8:	6039      	str	r1, [r7, #0]
    unsigned long maxSize;
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = p->settings->cipher.security != DLMS_SECURITY_NONE;
    a5aa:	687b      	ldr	r3, [r7, #4]
    a5ac:	681b      	ldr	r3, [r3, #0]
    a5ae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	bf14      	ite	ne
    a5b6:	2301      	movne	r3, #1
    a5b8:	2300      	moveq	r3, #0
    a5ba:	b2db      	uxtb	r3, r3
    a5bc:	73fb      	strb	r3, [r7, #15]
#else
    unsigned char ciphering = 0;
#endif //DLMS_IGNORE_HIGH_GMAC
    unsigned long hSize = reply->size + 3;
    a5be:	683b      	ldr	r3, [r7, #0]
    a5c0:	88db      	ldrh	r3, [r3, #6]
    a5c2:	3303      	adds	r3, #3
    a5c4:	613b      	str	r3, [r7, #16]
    // Add LLC bytes.
    if (p->command == DLMS_COMMAND_WRITE_REQUEST
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	791b      	ldrb	r3, [r3, #4]
    a5ca:	2b06      	cmp	r3, #6
    a5cc:	d003      	beq.n	a5d6 <dlms_appendMultipleSNBlocks+0x36>
        || p->command == DLMS_COMMAND_READ_REQUEST)
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	791b      	ldrb	r3, [r3, #4]
    a5d2:	2b05      	cmp	r3, #5
    a5d4:	d10a      	bne.n	a5ec <dlms_appendMultipleSNBlocks+0x4c>
    {
        hSize += 1 + hlp_getObjectCountSizeInBytes(p->count);
    a5d6:	687b      	ldr	r3, [r7, #4]
    a5d8:	695b      	ldr	r3, [r3, #20]
    a5da:	4618      	mov	r0, r3
    a5dc:	f017 f91c 	bl	21818 <hlp_getObjectCountSizeInBytes>
    a5e0:	4603      	mov	r3, r0
    a5e2:	3301      	adds	r3, #1
    a5e4:	461a      	mov	r2, r3
    a5e6:	693b      	ldr	r3, [r7, #16]
    a5e8:	4413      	add	r3, r2
    a5ea:	613b      	str	r3, [r7, #16]
    }
    maxSize = p->settings->maxPduSize - hSize;
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    a5f4:	461a      	mov	r2, r3
    a5f6:	693b      	ldr	r3, [r7, #16]
    a5f8:	1ad3      	subs	r3, r2, r3
    a5fa:	617b      	str	r3, [r7, #20]
    if (ciphering)
    a5fc:	7bfb      	ldrb	r3, [r7, #15]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d00b      	beq.n	a61a <dlms_appendMultipleSNBlocks+0x7a>
    {
        maxSize -= CIPHERING_HEADER_SIZE;
    a602:	697b      	ldr	r3, [r7, #20]
    a604:	3b16      	subs	r3, #22
    a606:	617b      	str	r3, [r7, #20]
        if (p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	681b      	ldr	r3, [r3, #0]
    a60c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    a610:	2b00      	cmp	r3, #0
    a612:	d102      	bne.n	a61a <dlms_appendMultipleSNBlocks+0x7a>
        {
            maxSize -= 3;
    a614:	697b      	ldr	r3, [r7, #20]
    a616:	3b03      	subs	r3, #3
    a618:	617b      	str	r3, [r7, #20]
        }
    }
    maxSize -= hlp_getObjectCountSizeInBytes(maxSize);
    a61a:	6978      	ldr	r0, [r7, #20]
    a61c:	f017 f8fc 	bl	21818 <hlp_getObjectCountSizeInBytes>
    a620:	4603      	mov	r3, r0
    a622:	461a      	mov	r2, r3
    a624:	697b      	ldr	r3, [r7, #20]
    a626:	1a9b      	subs	r3, r3, r2
    a628:	617b      	str	r3, [r7, #20]
    if ((unsigned short)(p->data->size - p->data->position) > maxSize)
    a62a:	687b      	ldr	r3, [r7, #4]
    a62c:	68db      	ldr	r3, [r3, #12]
    a62e:	88da      	ldrh	r2, [r3, #6]
    a630:	687b      	ldr	r3, [r7, #4]
    a632:	68db      	ldr	r3, [r3, #12]
    a634:	891b      	ldrh	r3, [r3, #8]
    a636:	1ad3      	subs	r3, r2, r3
    a638:	b29b      	uxth	r3, r3
    a63a:	461a      	mov	r2, r3
    a63c:	697b      	ldr	r3, [r7, #20]
    a63e:	429a      	cmp	r2, r3
    a640:	d904      	bls.n	a64c <dlms_appendMultipleSNBlocks+0xac>
    {
        // More blocks.
        bb_setUInt8(reply, 0);
    a642:	2100      	movs	r1, #0
    a644:	6838      	ldr	r0, [r7, #0]
    a646:	f7f8 fbe5 	bl	2e14 <bb_setUInt8>
    a64a:	e00e      	b.n	a66a <dlms_appendMultipleSNBlocks+0xca>
    }
    else
    {
        // Last block.
        bb_setUInt8(reply, p->lastBlock);
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	7e5b      	ldrb	r3, [r3, #25]
    a650:	4619      	mov	r1, r3
    a652:	6838      	ldr	r0, [r7, #0]
    a654:	f7f8 fbde 	bl	2e14 <bb_setUInt8>
        maxSize = p->data->size - p->data->position;
    a658:	687b      	ldr	r3, [r7, #4]
    a65a:	68db      	ldr	r3, [r3, #12]
    a65c:	88db      	ldrh	r3, [r3, #6]
    a65e:	461a      	mov	r2, r3
    a660:	687b      	ldr	r3, [r7, #4]
    a662:	68db      	ldr	r3, [r3, #12]
    a664:	891b      	ldrh	r3, [r3, #8]
    a666:	1ad3      	subs	r3, r2, r3
    a668:	617b      	str	r3, [r7, #20]
    }
    // Add block index.
    bb_setUInt16(reply, p->blockIndex);
    a66a:	687b      	ldr	r3, [r7, #4]
    a66c:	8b5b      	ldrh	r3, [r3, #26]
    a66e:	4619      	mov	r1, r3
    a670:	6838      	ldr	r0, [r7, #0]
    a672:	f7f8 fc61 	bl	2f38 <bb_setUInt16>
    if (p->command == DLMS_COMMAND_WRITE_REQUEST)
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	791b      	ldrb	r3, [r3, #4]
    a67a:	2b06      	cmp	r3, #6
    a67c:	d110      	bne.n	a6a0 <dlms_appendMultipleSNBlocks+0x100>
    {
        ++p->blockIndex;
    a67e:	687b      	ldr	r3, [r7, #4]
    a680:	8b5b      	ldrh	r3, [r3, #26]
    a682:	3301      	adds	r3, #1
    a684:	b29a      	uxth	r2, r3
    a686:	687b      	ldr	r3, [r7, #4]
    a688:	835a      	strh	r2, [r3, #26]
        hlp_setObjectCount(p->count, reply);
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	695b      	ldr	r3, [r3, #20]
    a68e:	6839      	ldr	r1, [r7, #0]
    a690:	4618      	mov	r0, r3
    a692:	f017 f923 	bl	218dc <hlp_setObjectCount>
        bb_setUInt8(reply, DLMS_DATA_TYPE_OCTET_STRING);
    a696:	2109      	movs	r1, #9
    a698:	6838      	ldr	r0, [r7, #0]
    a69a:	f7f8 fbbb 	bl	2e14 <bb_setUInt8>
    a69e:	e009      	b.n	a6b4 <dlms_appendMultipleSNBlocks+0x114>
    }
    else if (p->command == DLMS_COMMAND_READ_REQUEST)
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	791b      	ldrb	r3, [r3, #4]
    a6a4:	2b05      	cmp	r3, #5
    a6a6:	d105      	bne.n	a6b4 <dlms_appendMultipleSNBlocks+0x114>
    {
        ++p->blockIndex;
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	8b5b      	ldrh	r3, [r3, #26]
    a6ac:	3301      	adds	r3, #1
    a6ae:	b29a      	uxth	r2, r3
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	835a      	strh	r2, [r3, #26]
    }

    hlp_setObjectCount(maxSize, reply);
    a6b4:	6839      	ldr	r1, [r7, #0]
    a6b6:	6978      	ldr	r0, [r7, #20]
    a6b8:	f017 f910 	bl	218dc <hlp_setObjectCount>
    return maxSize;
    a6bc:	697b      	ldr	r3, [r7, #20]
}
    a6be:	4618      	mov	r0, r3
    a6c0:	3718      	adds	r7, #24
    a6c2:	46bd      	mov	sp, r7
    a6c4:	bd80      	pop	{r7, pc}
    a6c6:	bf00      	nop

0000a6c8 <dlms_getSNPdu>:

int dlms_getSNPdu(
    gxSNParameters* p,
    gxByteBuffer* reply)
{
    a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6ca:	b09b      	sub	sp, #108	; 0x6c
    a6cc:	af06      	add	r7, sp, #24
    a6ce:	6078      	str	r0, [r7, #4]
    a6d0:	6039      	str	r1, [r7, #0]
    int ret, cnt = 0;
    a6d2:	2300      	movs	r3, #0
    a6d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char cipherSize = 0;
    a6d6:	2300      	movs	r3, #0
    a6d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE && p->settings->cipher.security != DLMS_SECURITY_NONE;
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	791b      	ldrb	r3, [r3, #4]
    a6e0:	2b60      	cmp	r3, #96	; 0x60
    a6e2:	d00b      	beq.n	a6fc <dlms_getSNPdu+0x34>
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	791b      	ldrb	r3, [r3, #4]
    a6e8:	2b61      	cmp	r3, #97	; 0x61
    a6ea:	d007      	beq.n	a6fc <dlms_getSNPdu+0x34>
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d001      	beq.n	a6fc <dlms_getSNPdu+0x34>
    a6f8:	2301      	movs	r3, #1
    a6fa:	e000      	b.n	a6fe <dlms_getSNPdu+0x36>
    a6fc:	2300      	movs	r3, #0
    a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
#else
    unsigned char ciphering = 0;
#endif //DLMS_IGNORE_HIGH_GMAC
    gxByteBuffer *h;
    if (p->settings->server)
    a702:	687b      	ldr	r3, [r7, #4]
    a704:	681b      	ldr	r3, [r3, #0]
    a706:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a70a:	2b00      	cmp	r3, #0
    a70c:	d00a      	beq.n	a724 <dlms_getSNPdu+0x5c>
    {
        gxByteBuffer header;
        bb_attach(&header, pduAttributes, 0, sizeof(pduAttributes));
    a70e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    a712:	2314      	movs	r3, #20
    a714:	2200      	movs	r2, #0
    a716:	499f      	ldr	r1, [pc, #636]	; (a994 <dlms_getSNPdu+0x2cc>)
    a718:	f7f8 ffea 	bl	36f0 <bb_attach>
        h = &header;
    a71c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a720:	647b      	str	r3, [r7, #68]	; 0x44
    a722:	e001      	b.n	a728 <dlms_getSNPdu+0x60>
    }
    else
    {
        h = reply;
    a724:	683b      	ldr	r3, [r7, #0]
    a726:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (!ciphering && p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    a728:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    a72c:	2b00      	cmp	r3, #0
    a72e:	d10b      	bne.n	a748 <dlms_getSNPdu+0x80>
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	681b      	ldr	r3, [r3, #0]
    a734:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    a738:	2b00      	cmp	r3, #0
    a73a:	d105      	bne.n	a748 <dlms_getSNPdu+0x80>
    {
        dlms_addLLCBytes(p->settings, h);
    a73c:	687b      	ldr	r3, [r7, #4]
    a73e:	681b      	ldr	r3, [r3, #0]
    a740:	6c79      	ldr	r1, [r7, #68]	; 0x44
    a742:	4618      	mov	r0, r3
    a744:	f7ff ff0e 	bl	a564 <dlms_addLLCBytes>
    }
    if (ciphering)
    a748:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    a74c:	2b00      	cmp	r3, #0
    a74e:	d002      	beq.n	a756 <dlms_getSNPdu+0x8e>
    {
        cipherSize = CIPHERING_HEADER_SIZE;
    a750:	2316      	movs	r3, #22
    a752:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }
    if (p->data != NULL)
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	68db      	ldr	r3, [r3, #12]
    a75a:	2b00      	cmp	r3, #0
    a75c:	d008      	beq.n	a770 <dlms_getSNPdu+0xa8>
    {
        cnt = p->data->size - p->data->position;
    a75e:	687b      	ldr	r3, [r7, #4]
    a760:	68db      	ldr	r3, [r3, #12]
    a762:	88db      	ldrh	r3, [r3, #6]
    a764:	461a      	mov	r2, r3
    a766:	687b      	ldr	r3, [r7, #4]
    a768:	68db      	ldr	r3, [r3, #12]
    a76a:	891b      	ldrh	r3, [r3, #8]
    a76c:	1ad3      	subs	r3, r2, r3
    a76e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    // Add command.
    if (p->command == DLMS_COMMAND_INFORMATION_REPORT)
    a770:	687b      	ldr	r3, [r7, #4]
    a772:	791b      	ldrb	r3, [r3, #4]
    a774:	2b18      	cmp	r3, #24
    a776:	d15c      	bne.n	a832 <dlms_getSNPdu+0x16a>
    {
        bb_setUInt8(h, (unsigned char)p->command);
    a778:	687b      	ldr	r3, [r7, #4]
    a77a:	791b      	ldrb	r3, [r3, #4]
    a77c:	4619      	mov	r1, r3
    a77e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a780:	f7f8 fb48 	bl	2e14 <bb_setUInt8>
        // Add date time.
        if (p->time == NULL)
    a784:	687b      	ldr	r3, [r7, #4]
    a786:	691b      	ldr	r3, [r3, #16]
    a788:	2b00      	cmp	r3, #0
    a78a:	d104      	bne.n	a796 <dlms_getSNPdu+0xce>
        {
            bb_setUInt8(h, (unsigned char)DLMS_DATA_TYPE_NONE);
    a78c:	2100      	movs	r1, #0
    a78e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a790:	f7f8 fb40 	bl	2e14 <bb_setUInt8>
    a794:	e03d      	b.n	a812 <dlms_getSNPdu+0x14a>
        }
        else
        {
            // Data is send in octet string. Remove data type.
            int pos = reply->size;
    a796:	683b      	ldr	r3, [r7, #0]
    a798:	88db      	ldrh	r3, [r3, #6]
    a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
            dlmsVARIANT tmp;
            tmp.dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    a79c:	2030      	movs	r0, #48	; 0x30
    a79e:	f01f f951 	bl	29a44 <malloc>
    a7a2:	4603      	mov	r3, r0
    a7a4:	623b      	str	r3, [r7, #32]
            tmp.dateTime->value = *p->time;
    a7a6:	6a3b      	ldr	r3, [r7, #32]
    a7a8:	687a      	ldr	r2, [r7, #4]
    a7aa:	6912      	ldr	r2, [r2, #16]
    a7ac:	1d1c      	adds	r4, r3, #4
    a7ae:	4615      	mov	r5, r2
    a7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a7b8:	682b      	ldr	r3, [r5, #0]
    a7ba:	6023      	str	r3, [r4, #0]
            tmp.vt = DLMS_DATA_TYPE_DATETIME;
    a7bc:	2319      	movs	r3, #25
    a7be:	763b      	strb	r3, [r7, #24]
            if ((ret = dlms_setData(reply, DLMS_DATA_TYPE_OCTET_STRING, &tmp)) != 0)
    a7c0:	f107 0318 	add.w	r3, r7, #24
    a7c4:	461a      	mov	r2, r3
    a7c6:	2109      	movs	r1, #9
    a7c8:	6838      	ldr	r0, [r7, #0]
    a7ca:	f7fc fadd 	bl	6d88 <dlms_setData>
    a7ce:	63b8      	str	r0, [r7, #56]	; 0x38
    a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d006      	beq.n	a7e4 <dlms_getSNPdu+0x11c>
            {
                var_clear(&tmp);
    a7d6:	f107 0318 	add.w	r3, r7, #24
    a7da:	4618      	mov	r0, r3
    a7dc:	f01b fcb4 	bl	26148 <var_clear>
                return ret;
    a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a7e2:	e17a      	b.n	aada <dlms_getSNPdu+0x412>
            }
            var_clear(&tmp);
    a7e4:	f107 0318 	add.w	r3, r7, #24
    a7e8:	4618      	mov	r0, r3
    a7ea:	f01b fcad 	bl	26148 <var_clear>
            bb_move(reply, pos + 1, pos, reply->size - pos - 1);
    a7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a7f0:	b29b      	uxth	r3, r3
    a7f2:	3301      	adds	r3, #1
    a7f4:	b299      	uxth	r1, r3
    a7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a7f8:	b298      	uxth	r0, r3
    a7fa:	683b      	ldr	r3, [r7, #0]
    a7fc:	88da      	ldrh	r2, [r3, #6]
    a7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a800:	b29b      	uxth	r3, r3
    a802:	1ad3      	subs	r3, r2, r3
    a804:	b29b      	uxth	r3, r3
    a806:	3b01      	subs	r3, #1
    a808:	b29b      	uxth	r3, r3
    a80a:	4602      	mov	r2, r0
    a80c:	6838      	ldr	r0, [r7, #0]
    a80e:	f7f9 fb21 	bl	3e54 <bb_move>
        }
        hlp_setObjectCount(p->count, reply);
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	695b      	ldr	r3, [r3, #20]
    a816:	6839      	ldr	r1, [r7, #0]
    a818:	4618      	mov	r0, r3
    a81a:	f017 f85f 	bl	218dc <hlp_setObjectCount>
        bb_set2(reply, p->attributeDescriptor, 0, p->attributeDescriptor->size);
    a81e:	687b      	ldr	r3, [r7, #4]
    a820:	6899      	ldr	r1, [r3, #8]
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	689b      	ldr	r3, [r3, #8]
    a826:	88db      	ldrh	r3, [r3, #6]
    a828:	2200      	movs	r2, #0
    a82a:	6838      	ldr	r0, [r7, #0]
    a82c:	f7f8 fef8 	bl	3620 <bb_set2>
    a830:	e0ce      	b.n	a9d0 <dlms_getSNPdu+0x308>
    }
    else if (p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE)
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	791b      	ldrb	r3, [r3, #4]
    a836:	2b60      	cmp	r3, #96	; 0x60
    a838:	f000 80ca 	beq.w	a9d0 <dlms_getSNPdu+0x308>
    a83c:	687b      	ldr	r3, [r7, #4]
    a83e:	791b      	ldrb	r3, [r3, #4]
    a840:	2b61      	cmp	r3, #97	; 0x61
    a842:	f000 80c5 	beq.w	a9d0 <dlms_getSNPdu+0x308>
    {
        bb_setUInt8(h, (unsigned char)p->command);
    a846:	687b      	ldr	r3, [r7, #4]
    a848:	791b      	ldrb	r3, [r3, #4]
    a84a:	4619      	mov	r1, r3
    a84c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a84e:	f7f8 fae1 	bl	2e14 <bb_setUInt8>
        if (p->count != 0xFF)
    a852:	687b      	ldr	r3, [r7, #4]
    a854:	695b      	ldr	r3, [r3, #20]
    a856:	2bff      	cmp	r3, #255	; 0xff
    a858:	d005      	beq.n	a866 <dlms_getSNPdu+0x19e>
        {
            hlp_setObjectCount(p->count, h);
    a85a:	687b      	ldr	r3, [r7, #4]
    a85c:	695b      	ldr	r3, [r3, #20]
    a85e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    a860:	4618      	mov	r0, r3
    a862:	f017 f83b 	bl	218dc <hlp_setObjectCount>
        }
        if (!p->multipleBlocks)
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	7e1b      	ldrb	r3, [r3, #24]
    a86a:	2b00      	cmp	r3, #0
    a86c:	d177      	bne.n	a95e <dlms_getSNPdu+0x296>
        {
            if (p->requestType != 0xFF)
    a86e:	687b      	ldr	r3, [r7, #4]
    a870:	799b      	ldrb	r3, [r3, #6]
    a872:	2bff      	cmp	r3, #255	; 0xff
    a874:	d005      	beq.n	a882 <dlms_getSNPdu+0x1ba>
            {
                bb_setUInt8(h, p->requestType);
    a876:	687b      	ldr	r3, [r7, #4]
    a878:	799b      	ldrb	r3, [r3, #6]
    a87a:	4619      	mov	r1, r3
    a87c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a87e:	f7f8 fac9 	bl	2e14 <bb_setUInt8>
            }
            if (p->attributeDescriptor != NULL)
    a882:	687b      	ldr	r3, [r7, #4]
    a884:	689b      	ldr	r3, [r3, #8]
    a886:	2b00      	cmp	r3, #0
    a888:	d008      	beq.n	a89c <dlms_getSNPdu+0x1d4>
            {
                bb_set2(h, p->attributeDescriptor, 0, p->attributeDescriptor->size);
    a88a:	687b      	ldr	r3, [r7, #4]
    a88c:	6899      	ldr	r1, [r3, #8]
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	689b      	ldr	r3, [r3, #8]
    a892:	88db      	ldrh	r3, [r3, #6]
    a894:	2200      	movs	r2, #0
    a896:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a898:	f7f8 fec2 	bl	3620 <bb_set2>
            }
            p->multipleBlocks = h->size + cipherSize + cnt > p->settings->maxPduSize;
    a89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a89e:	88db      	ldrh	r3, [r3, #6]
    a8a0:	461a      	mov	r2, r3
    a8a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    a8a6:	441a      	add	r2, r3
    a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a8aa:	4413      	add	r3, r2
    a8ac:	687a      	ldr	r2, [r7, #4]
    a8ae:	6812      	ldr	r2, [r2, #0]
    a8b0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    a8b4:	4293      	cmp	r3, r2
    a8b6:	bfcc      	ite	gt
    a8b8:	2301      	movgt	r3, #1
    a8ba:	2300      	movle	r3, #0
    a8bc:	b2db      	uxtb	r3, r3
    a8be:	461a      	mov	r2, r3
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	761a      	strb	r2, [r3, #24]
            // If reply data is not fit to one PDU.
            if (p->multipleBlocks)
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	7e1b      	ldrb	r3, [r3, #24]
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	f000 8081 	beq.w	a9d0 <dlms_getSNPdu+0x308>
            {
                reply->size = 0;
    a8ce:	683b      	ldr	r3, [r7, #0]
    a8d0:	2200      	movs	r2, #0
    a8d2:	80da      	strh	r2, [r3, #6]
                if (!ciphering && p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    a8d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d10b      	bne.n	a8f4 <dlms_getSNPdu+0x22c>
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d105      	bne.n	a8f4 <dlms_getSNPdu+0x22c>
                {
                    dlms_addLLCBytes(p->settings, reply);
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	681b      	ldr	r3, [r3, #0]
    a8ec:	6839      	ldr	r1, [r7, #0]
    a8ee:	4618      	mov	r0, r3
    a8f0:	f7ff fe38 	bl	a564 <dlms_addLLCBytes>
                }
                if (p->command == DLMS_COMMAND_WRITE_REQUEST)
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	791b      	ldrb	r3, [r3, #4]
    a8f8:	2b06      	cmp	r3, #6
    a8fa:	d103      	bne.n	a904 <dlms_getSNPdu+0x23c>
                {
                    p->requestType = DLMS_VARIABLE_ACCESS_SPECIFICATION_WRITE_DATA_BLOCK_ACCESS;
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	2207      	movs	r2, #7
    a900:	719a      	strb	r2, [r3, #6]
    a902:	e012      	b.n	a92a <dlms_getSNPdu+0x262>
                }
                else if (p->command == DLMS_COMMAND_READ_REQUEST)
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	791b      	ldrb	r3, [r3, #4]
    a908:	2b05      	cmp	r3, #5
    a90a:	d103      	bne.n	a914 <dlms_getSNPdu+0x24c>
                {
                    p->requestType = DLMS_VARIABLE_ACCESS_SPECIFICATION_READ_DATA_BLOCK_ACCESS;
    a90c:	687b      	ldr	r3, [r7, #4]
    a90e:	2206      	movs	r2, #6
    a910:	719a      	strb	r2, [r3, #6]
    a912:	e00a      	b.n	a92a <dlms_getSNPdu+0x262>
                }
                else if (p->command == DLMS_COMMAND_READ_RESPONSE)
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	791b      	ldrb	r3, [r3, #4]
    a918:	2b0c      	cmp	r3, #12
    a91a:	d103      	bne.n	a924 <dlms_getSNPdu+0x25c>
                {
                    p->requestType = DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
    a91c:	687b      	ldr	r3, [r7, #4]
    a91e:	2202      	movs	r2, #2
    a920:	719a      	strb	r2, [r3, #6]
    a922:	e002      	b.n	a92a <dlms_getSNPdu+0x262>
                }
                else
                {
                    //Invalid command.
                    return DLMS_ERROR_CODE_INVALID_COMMAND;
    a924:	f44f 7380 	mov.w	r3, #256	; 0x100
    a928:	e0d7      	b.n	aada <dlms_getSNPdu+0x412>
                }
                bb_setUInt8(reply, (unsigned char)p->command);
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	791b      	ldrb	r3, [r3, #4]
    a92e:	4619      	mov	r1, r3
    a930:	6838      	ldr	r0, [r7, #0]
    a932:	f7f8 fa6f 	bl	2e14 <bb_setUInt8>
                // Set object count.
                bb_setUInt8(reply, 1);
    a936:	2101      	movs	r1, #1
    a938:	6838      	ldr	r0, [r7, #0]
    a93a:	f7f8 fa6b 	bl	2e14 <bb_setUInt8>
                if (p->requestType != 0xFF)
    a93e:	687b      	ldr	r3, [r7, #4]
    a940:	799b      	ldrb	r3, [r3, #6]
    a942:	2bff      	cmp	r3, #255	; 0xff
    a944:	d005      	beq.n	a952 <dlms_getSNPdu+0x28a>
                {
                    bb_setUInt8(reply, p->requestType);
    a946:	687b      	ldr	r3, [r7, #4]
    a948:	799b      	ldrb	r3, [r3, #6]
    a94a:	4619      	mov	r1, r3
    a94c:	6838      	ldr	r0, [r7, #0]
    a94e:	f7f8 fa61 	bl	2e14 <bb_setUInt8>
                }
                cnt = dlms_appendMultipleSNBlocks(p, h);
    a952:	6c79      	ldr	r1, [r7, #68]	; 0x44
    a954:	6878      	ldr	r0, [r7, #4]
    a956:	f7ff fe23 	bl	a5a0 <dlms_appendMultipleSNBlocks>
    a95a:	64f8      	str	r0, [r7, #76]	; 0x4c
    a95c:	e038      	b.n	a9d0 <dlms_getSNPdu+0x308>
            }
        }
        else
        {
            if (p->command == DLMS_COMMAND_WRITE_REQUEST)
    a95e:	687b      	ldr	r3, [r7, #4]
    a960:	791b      	ldrb	r3, [r3, #4]
    a962:	2b06      	cmp	r3, #6
    a964:	d103      	bne.n	a96e <dlms_getSNPdu+0x2a6>
            {
                p->requestType = DLMS_VARIABLE_ACCESS_SPECIFICATION_WRITE_DATA_BLOCK_ACCESS;
    a966:	687b      	ldr	r3, [r7, #4]
    a968:	2207      	movs	r2, #7
    a96a:	719a      	strb	r2, [r3, #6]
    a96c:	e014      	b.n	a998 <dlms_getSNPdu+0x2d0>
            }
            else if (p->command == DLMS_COMMAND_READ_REQUEST)
    a96e:	687b      	ldr	r3, [r7, #4]
    a970:	791b      	ldrb	r3, [r3, #4]
    a972:	2b05      	cmp	r3, #5
    a974:	d103      	bne.n	a97e <dlms_getSNPdu+0x2b6>
            {
                p->requestType = DLMS_VARIABLE_ACCESS_SPECIFICATION_READ_DATA_BLOCK_ACCESS;
    a976:	687b      	ldr	r3, [r7, #4]
    a978:	2206      	movs	r2, #6
    a97a:	719a      	strb	r2, [r3, #6]
    a97c:	e00c      	b.n	a998 <dlms_getSNPdu+0x2d0>
            }
            else if (p->command == DLMS_COMMAND_READ_RESPONSE)
    a97e:	687b      	ldr	r3, [r7, #4]
    a980:	791b      	ldrb	r3, [r3, #4]
    a982:	2b0c      	cmp	r3, #12
    a984:	d103      	bne.n	a98e <dlms_getSNPdu+0x2c6>
            {
                p->requestType = DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
    a986:	687b      	ldr	r3, [r7, #4]
    a988:	2202      	movs	r2, #2
    a98a:	719a      	strb	r2, [r3, #6]
    a98c:	e004      	b.n	a998 <dlms_getSNPdu+0x2d0>
            }
            else
            {
                //Invalid command.
                return DLMS_ERROR_CODE_INVALID_COMMAND;
    a98e:	f44f 7380 	mov.w	r3, #256	; 0x100
    a992:	e0a2      	b.n	aada <dlms_getSNPdu+0x412>
    a994:	10000654 	.word	0x10000654
            }
            if (p->requestType != 0xFF)
    a998:	687b      	ldr	r3, [r7, #4]
    a99a:	799b      	ldrb	r3, [r3, #6]
    a99c:	2bff      	cmp	r3, #255	; 0xff
    a99e:	d005      	beq.n	a9ac <dlms_getSNPdu+0x2e4>
            {
                bb_setUInt8(h, p->requestType);
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	799b      	ldrb	r3, [r3, #6]
    a9a4:	4619      	mov	r1, r3
    a9a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a9a8:	f7f8 fa34 	bl	2e14 <bb_setUInt8>
            }
            if (p->attributeDescriptor != NULL)
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	689b      	ldr	r3, [r3, #8]
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d008      	beq.n	a9c6 <dlms_getSNPdu+0x2fe>
            {
                bb_set2(h, p->attributeDescriptor, 0, p->attributeDescriptor->size);
    a9b4:	687b      	ldr	r3, [r7, #4]
    a9b6:	6899      	ldr	r1, [r3, #8]
    a9b8:	687b      	ldr	r3, [r7, #4]
    a9ba:	689b      	ldr	r3, [r3, #8]
    a9bc:	88db      	ldrh	r3, [r3, #6]
    a9be:	2200      	movs	r2, #0
    a9c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
    a9c2:	f7f8 fe2d 	bl	3620 <bb_set2>
            }
            cnt = dlms_appendMultipleSNBlocks(p, h);
    a9c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    a9c8:	6878      	ldr	r0, [r7, #4]
    a9ca:	f7ff fde9 	bl	a5a0 <dlms_appendMultipleSNBlocks>
    a9ce:	64f8      	str	r0, [r7, #76]	; 0x4c
        }
    }
    // Add data.
    if (p->settings->server)
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	681b      	ldr	r3, [r3, #0]
    a9d4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d008      	beq.n	a9ee <dlms_getSNPdu+0x326>
    {
        bb_insert(h->data, h->size, reply, 0);
    a9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a9de:	6818      	ldr	r0, [r3, #0]
    a9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a9e2:	88d9      	ldrh	r1, [r3, #6]
    a9e4:	2300      	movs	r3, #0
    a9e6:	683a      	ldr	r2, [r7, #0]
    a9e8:	f7f9 f9ee 	bl	3dc8 <bb_insert>
    a9ec:	e00d      	b.n	aa0a <dlms_getSNPdu+0x342>
    }
    else if (p->data != NULL)
    a9ee:	687b      	ldr	r3, [r7, #4]
    a9f0:	68db      	ldr	r3, [r3, #12]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d009      	beq.n	aa0a <dlms_getSNPdu+0x342>
    {
        bb_set2(reply, p->data, p->data->position, cnt);
    a9f6:	687b      	ldr	r3, [r7, #4]
    a9f8:	68d9      	ldr	r1, [r3, #12]
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	68db      	ldr	r3, [r3, #12]
    a9fe:	891a      	ldrh	r2, [r3, #8]
    aa00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aa02:	b29b      	uxth	r3, r3
    aa04:	6838      	ldr	r0, [r7, #0]
    aa06:	f7f8 fe0b 	bl	3620 <bb_set2>
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    // If Ciphering is used.
    if (ciphering && p->command != DLMS_COMMAND_AARQ
    aa0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d062      	beq.n	aad8 <dlms_getSNPdu+0x410>
    aa12:	687b      	ldr	r3, [r7, #4]
    aa14:	791b      	ldrb	r3, [r3, #4]
    aa16:	2b60      	cmp	r3, #96	; 0x60
    aa18:	d05e      	beq.n	aad8 <dlms_getSNPdu+0x410>
        && p->command != DLMS_COMMAND_AARE)
    aa1a:	687b      	ldr	r3, [r7, #4]
    aa1c:	791b      	ldrb	r3, [r3, #4]
    aa1e:	2b61      	cmp	r3, #97	; 0x61
    aa20:	d05a      	beq.n	aad8 <dlms_getSNPdu+0x410>
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
    aa22:	f107 030c 	add.w	r3, r7, #12
    aa26:	4618      	mov	r0, r3
    aa28:	f7f8 f95e 	bl	2ce8 <bb_init>
        ret = cip_encrypt(
            &p->settings->cipher,
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	681b      	ldr	r3, [r3, #0]
    if (ciphering && p->command != DLMS_COMMAND_AARQ
        && p->command != DLMS_COMMAND_AARE)
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
        ret = cip_encrypt(
    aa30:	f103 0488 	add.w	r4, r3, #136	; 0x88
            &p->settings->cipher,
            p->settings->cipher.security,
    aa34:	687b      	ldr	r3, [r7, #4]
    aa36:	681b      	ldr	r3, [r3, #0]
    if (ciphering && p->command != DLMS_COMMAND_AARQ
        && p->command != DLMS_COMMAND_AARE)
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
        ret = cip_encrypt(
    aa38:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
            &p->settings->cipher,
            p->settings->cipher.security,
            DLMS_COUNT_TYPE_PACKET,
            p->settings->cipher.invocationCounter + 1,
    aa3c:	687b      	ldr	r3, [r7, #4]
    aa3e:	681b      	ldr	r3, [r3, #0]
    aa40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    if (ciphering && p->command != DLMS_COMMAND_AARQ
        && p->command != DLMS_COMMAND_AARE)
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
        ret = cip_encrypt(
    aa44:	1c5e      	adds	r6, r3, #1
    aa46:	687b      	ldr	r3, [r7, #4]
    aa48:	6818      	ldr	r0, [r3, #0]
    aa4a:	687b      	ldr	r3, [r7, #4]
    aa4c:	7919      	ldrb	r1, [r3, #4]
    aa4e:	687b      	ldr	r3, [r7, #4]
    aa50:	795b      	ldrb	r3, [r3, #5]
    aa52:	461a      	mov	r2, r3
    aa54:	f7fc f874 	bl	6b40 <dlms_getGloMessage>
    aa58:	4603      	mov	r3, r0
    aa5a:	4618      	mov	r0, r3
            &p->settings->cipher,
            p->settings->cipher.security,
            DLMS_COUNT_TYPE_PACKET,
            p->settings->cipher.invocationCounter + 1,
            dlms_getGloMessage(p->settings, p->command, p->encryptedCommand),
            &p->settings->cipher.systemTitle,
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	681b      	ldr	r3, [r3, #0]
    if (ciphering && p->command != DLMS_COMMAND_AARQ
        && p->command != DLMS_COMMAND_AARE)
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
        ret = cip_encrypt(
    aa60:	3398      	adds	r3, #152	; 0x98
            p->settings->cipher.security,
            DLMS_COUNT_TYPE_PACKET,
            p->settings->cipher.invocationCounter + 1,
            dlms_getGloMessage(p->settings, p->command, p->encryptedCommand),
            &p->settings->cipher.systemTitle,
            &p->settings->cipher.blockCipherKey,
    aa62:	687a      	ldr	r2, [r7, #4]
    aa64:	6812      	ldr	r2, [r2, #0]
    if (ciphering && p->command != DLMS_COMMAND_AARQ
        && p->command != DLMS_COMMAND_AARE)
    {
        gxByteBuffer tmp;
        bb_init(&tmp);
        ret = cip_encrypt(
    aa66:	328c      	adds	r2, #140	; 0x8c
    aa68:	f107 010c 	add.w	r1, r7, #12
    aa6c:	9104      	str	r1, [sp, #16]
    aa6e:	6839      	ldr	r1, [r7, #0]
    aa70:	9103      	str	r1, [sp, #12]
    aa72:	9202      	str	r2, [sp, #8]
    aa74:	9301      	str	r3, [sp, #4]
    aa76:	9000      	str	r0, [sp, #0]
    aa78:	4633      	mov	r3, r6
    aa7a:	2203      	movs	r2, #3
    aa7c:	4629      	mov	r1, r5
    aa7e:	4620      	mov	r0, r4
    aa80:	f7fa fbe8 	bl	5254 <cip_encrypt>
    aa84:	63b8      	str	r0, [r7, #56]	; 0x38
            dlms_getGloMessage(p->settings, p->command, p->encryptedCommand),
            &p->settings->cipher.systemTitle,
            &p->settings->cipher.blockCipherKey,
            reply,
            &tmp);
        if (ret != 0)
    aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d006      	beq.n	aa9a <dlms_getSNPdu+0x3d2>
        {
            bb_clear(&tmp);
    aa8c:	f107 030c 	add.w	r3, r7, #12
    aa90:	4618      	mov	r0, r3
    aa92:	f7f8 fe67 	bl	3764 <bb_clear>
            return ret;
    aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aa98:	e01f      	b.n	aada <dlms_getSNPdu+0x412>
        }
        reply->position = reply->size = 0;
    aa9a:	683b      	ldr	r3, [r7, #0]
    aa9c:	2200      	movs	r2, #0
    aa9e:	80da      	strh	r2, [r3, #6]
    aaa0:	683b      	ldr	r3, [r7, #0]
    aaa2:	88da      	ldrh	r2, [r3, #6]
    aaa4:	683b      	ldr	r3, [r7, #0]
    aaa6:	811a      	strh	r2, [r3, #8]
        if (p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    aaa8:	687b      	ldr	r3, [r7, #4]
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    aab0:	2b00      	cmp	r3, #0
    aab2:	d105      	bne.n	aac0 <dlms_getSNPdu+0x3f8>
        {
            dlms_addLLCBytes(p->settings, reply);
    aab4:	687b      	ldr	r3, [r7, #4]
    aab6:	681b      	ldr	r3, [r3, #0]
    aab8:	6839      	ldr	r1, [r7, #0]
    aaba:	4618      	mov	r0, r3
    aabc:	f7ff fd52 	bl	a564 <dlms_addLLCBytes>
        }
        bb_set2(reply, &tmp, 0, tmp.size);
    aac0:	8a7b      	ldrh	r3, [r7, #18]
    aac2:	f107 010c 	add.w	r1, r7, #12
    aac6:	2200      	movs	r2, #0
    aac8:	6838      	ldr	r0, [r7, #0]
    aaca:	f7f8 fda9 	bl	3620 <bb_set2>
        bb_clear(&tmp);
    aace:	f107 030c 	add.w	r3, r7, #12
    aad2:	4618      	mov	r0, r3
    aad4:	f7f8 fe46 	bl	3764 <bb_clear>
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return 0;
    aad8:	2300      	movs	r3, #0
}
    aada:	4618      	mov	r0, r3
    aadc:	3754      	adds	r7, #84	; 0x54
    aade:	46bd      	mov	sp, r7
    aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aae2:	bf00      	nop

0000aae4 <dlms_multipleBlocks>:
*/
void dlms_multipleBlocks(
    gxLNParameters *p,
    gxByteBuffer *reply,
    unsigned char ciphering)
{
    aae4:	b480      	push	{r7}
    aae6:	b087      	sub	sp, #28
    aae8:	af00      	add	r7, sp, #0
    aaea:	60f8      	str	r0, [r7, #12]
    aaec:	60b9      	str	r1, [r7, #8]
    aaee:	4613      	mov	r3, r2
    aaf0:	71fb      	strb	r3, [r7, #7]
    // Check is all data fit to one message if data is given.
    int len = p->data->size - p->data->position;
    aaf2:	68fb      	ldr	r3, [r7, #12]
    aaf4:	68db      	ldr	r3, [r3, #12]
    aaf6:	88db      	ldrh	r3, [r3, #6]
    aaf8:	461a      	mov	r2, r3
    aafa:	68fb      	ldr	r3, [r7, #12]
    aafc:	68db      	ldr	r3, [r3, #12]
    aafe:	891b      	ldrh	r3, [r3, #8]
    ab00:	1ad3      	subs	r3, r2, r3
    ab02:	617b      	str	r3, [r7, #20]
    if (p->attributeDescriptor != NULL)
    ab04:	68fb      	ldr	r3, [r7, #12]
    ab06:	689b      	ldr	r3, [r3, #8]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d006      	beq.n	ab1a <dlms_multipleBlocks+0x36>
    {
        len += p->attributeDescriptor->size;
    ab0c:	68fb      	ldr	r3, [r7, #12]
    ab0e:	689b      	ldr	r3, [r3, #8]
    ab10:	88db      	ldrh	r3, [r3, #6]
    ab12:	461a      	mov	r2, r3
    ab14:	697b      	ldr	r3, [r7, #20]
    ab16:	4413      	add	r3, r2
    ab18:	617b      	str	r3, [r7, #20]
    }
    if (ciphering)
    ab1a:	79fb      	ldrb	r3, [r7, #7]
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d002      	beq.n	ab26 <dlms_multipleBlocks+0x42>
    {
        len += CIPHERING_HEADER_SIZE;
    ab20:	697b      	ldr	r3, [r7, #20]
    ab22:	3316      	adds	r3, #22
    ab24:	617b      	str	r3, [r7, #20]
    }
    if (!p->multipleBlocks)
    ab26:	68fb      	ldr	r3, [r7, #12]
    ab28:	7d5b      	ldrb	r3, [r3, #21]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	d110      	bne.n	ab50 <dlms_multipleBlocks+0x6c>
    {
        // Add command type and invoke and priority.
        p->multipleBlocks = 2 + reply->size + len > p->settings->maxPduSize;
    ab2e:	68bb      	ldr	r3, [r7, #8]
    ab30:	88db      	ldrh	r3, [r3, #6]
    ab32:	1c9a      	adds	r2, r3, #2
    ab34:	697b      	ldr	r3, [r7, #20]
    ab36:	4413      	add	r3, r2
    ab38:	68fa      	ldr	r2, [r7, #12]
    ab3a:	6812      	ldr	r2, [r2, #0]
    ab3c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    ab40:	4293      	cmp	r3, r2
    ab42:	bfcc      	ite	gt
    ab44:	2301      	movgt	r3, #1
    ab46:	2300      	movle	r3, #0
    ab48:	b2db      	uxtb	r3, r3
    ab4a:	461a      	mov	r2, r3
    ab4c:	68fb      	ldr	r3, [r7, #12]
    ab4e:	755a      	strb	r2, [r3, #21]
    }
    if (p->multipleBlocks)
    ab50:	68fb      	ldr	r3, [r7, #12]
    ab52:	7d5b      	ldrb	r3, [r3, #21]
    ab54:	2b00      	cmp	r3, #0
    ab56:	d01b      	beq.n	ab90 <dlms_multipleBlocks+0xac>
    {
        // Add command type and invoke and priority.
        p->lastBlock = p->settings->index == p->settings->count && !(8 + reply->size + len > p->settings->maxPduSize);
    ab58:	68fb      	ldr	r3, [r7, #12]
    ab5a:	681b      	ldr	r3, [r3, #0]
    ab5c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
    ab60:	68fb      	ldr	r3, [r7, #12]
    ab62:	681b      	ldr	r3, [r3, #0]
    ab64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    ab68:	429a      	cmp	r2, r3
    ab6a:	d10d      	bne.n	ab88 <dlms_multipleBlocks+0xa4>
    ab6c:	68bb      	ldr	r3, [r7, #8]
    ab6e:	88db      	ldrh	r3, [r3, #6]
    ab70:	f103 0208 	add.w	r2, r3, #8
    ab74:	697b      	ldr	r3, [r7, #20]
    ab76:	4413      	add	r3, r2
    ab78:	68fa      	ldr	r2, [r7, #12]
    ab7a:	6812      	ldr	r2, [r2, #0]
    ab7c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    ab80:	4293      	cmp	r3, r2
    ab82:	dc01      	bgt.n	ab88 <dlms_multipleBlocks+0xa4>
    ab84:	2301      	movs	r3, #1
    ab86:	e000      	b.n	ab8a <dlms_multipleBlocks+0xa6>
    ab88:	2300      	movs	r3, #0
    ab8a:	b2da      	uxtb	r2, r3
    ab8c:	68fb      	ldr	r3, [r7, #12]
    ab8e:	759a      	strb	r2, [r3, #22]
    }
    if (p->lastBlock)
    ab90:	68fb      	ldr	r3, [r7, #12]
    ab92:	7d9b      	ldrb	r3, [r3, #22]
    ab94:	2b00      	cmp	r3, #0
    ab96:	d01b      	beq.n	abd0 <dlms_multipleBlocks+0xec>
    {
        // Add command type and invoke and priority.
        p->lastBlock = p->settings->index == p->settings->count && !(8 + reply->size + len > p->settings->maxPduSize);
    ab98:	68fb      	ldr	r3, [r7, #12]
    ab9a:	681b      	ldr	r3, [r3, #0]
    ab9c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
    aba0:	68fb      	ldr	r3, [r7, #12]
    aba2:	681b      	ldr	r3, [r3, #0]
    aba4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    aba8:	429a      	cmp	r2, r3
    abaa:	d10d      	bne.n	abc8 <dlms_multipleBlocks+0xe4>
    abac:	68bb      	ldr	r3, [r7, #8]
    abae:	88db      	ldrh	r3, [r3, #6]
    abb0:	f103 0208 	add.w	r2, r3, #8
    abb4:	697b      	ldr	r3, [r7, #20]
    abb6:	4413      	add	r3, r2
    abb8:	68fa      	ldr	r2, [r7, #12]
    abba:	6812      	ldr	r2, [r2, #0]
    abbc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    abc0:	4293      	cmp	r3, r2
    abc2:	dc01      	bgt.n	abc8 <dlms_multipleBlocks+0xe4>
    abc4:	2301      	movs	r3, #1
    abc6:	e000      	b.n	abca <dlms_multipleBlocks+0xe6>
    abc8:	2300      	movs	r3, #0
    abca:	b2da      	uxtb	r2, r3
    abcc:	68fb      	ldr	r3, [r7, #12]
    abce:	759a      	strb	r2, [r3, #22]
    }
}
    abd0:	bf00      	nop
    abd2:	371c      	adds	r7, #28
    abd4:	46bd      	mov	sp, r7
    abd6:	bc80      	pop	{r7}
    abd8:	4770      	bx	lr
    abda:	bf00      	nop

0000abdc <dlms_getLNPdu>:

int dlms_getLNPdu(
    gxLNParameters *p,
    gxByteBuffer *reply)
{
    abdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    abde:	b09b      	sub	sp, #108	; 0x6c
    abe0:	af06      	add	r7, sp, #24
    abe2:	6078      	str	r0, [r7, #4]
    abe4:	6039      	str	r1, [r7, #0]
    int ret;
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = (p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE &&
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	791b      	ldrb	r3, [r3, #4]
        p->settings->cipher.security != DLMS_SECURITY_NONE) || p->encryptedCommand != DLMS_COMMAND_NONE;
    abea:	2b60      	cmp	r3, #96	; 0x60
    abec:	d009      	beq.n	ac02 <dlms_getLNPdu+0x26>
    gxLNParameters *p,
    gxByteBuffer *reply)
{
    int ret;
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = (p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE &&
    abee:	687b      	ldr	r3, [r7, #4]
    abf0:	791b      	ldrb	r3, [r3, #4]
    abf2:	2b61      	cmp	r3, #97	; 0x61
    abf4:	d005      	beq.n	ac02 <dlms_getLNPdu+0x26>
        p->settings->cipher.security != DLMS_SECURITY_NONE) || p->encryptedCommand != DLMS_COMMAND_NONE;
    abf6:	687b      	ldr	r3, [r7, #4]
    abf8:	681b      	ldr	r3, [r3, #0]
    abfa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    gxLNParameters *p,
    gxByteBuffer *reply)
{
    int ret;
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = (p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE &&
    abfe:	2b00      	cmp	r3, #0
    ac00:	d103      	bne.n	ac0a <dlms_getLNPdu+0x2e>
        p->settings->cipher.security != DLMS_SECURITY_NONE) || p->encryptedCommand != DLMS_COMMAND_NONE;
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	795b      	ldrb	r3, [r3, #5]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d001      	beq.n	ac0e <dlms_getLNPdu+0x32>
    ac0a:	2301      	movs	r3, #1
    ac0c:	e000      	b.n	ac10 <dlms_getLNPdu+0x34>
    ac0e:	2300      	movs	r3, #0
    gxLNParameters *p,
    gxByteBuffer *reply)
{
    int ret;
#ifndef DLMS_IGNORE_HIGH_GMAC
    unsigned char ciphering = (p->command != DLMS_COMMAND_AARQ && p->command != DLMS_COMMAND_AARE &&
    ac10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        p->settings->cipher.security != DLMS_SECURITY_NONE) || p->encryptedCommand != DLMS_COMMAND_NONE;
#else
    unsigned char ciphering = 0;
#endif //DLMS_IGNORE_HIGH_GMAC
    unsigned short len = 0;
    ac14:	2300      	movs	r3, #0
    ac16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    if (p->command == DLMS_COMMAND_AARQ)
    ac1a:	687b      	ldr	r3, [r7, #4]
    ac1c:	791b      	ldrb	r3, [r3, #4]
    ac1e:	2b60      	cmp	r3, #96	; 0x60
    ac20:	d11f      	bne.n	ac62 <dlms_getLNPdu+0x86>
    {
        if (!ciphering && p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    ac22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    ac26:	2b00      	cmp	r3, #0
    ac28:	d10b      	bne.n	ac42 <dlms_getLNPdu+0x66>
    ac2a:	687b      	ldr	r3, [r7, #4]
    ac2c:	681b      	ldr	r3, [r3, #0]
    ac2e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    ac32:	2b00      	cmp	r3, #0
    ac34:	d105      	bne.n	ac42 <dlms_getLNPdu+0x66>
        {
            dlms_addLLCBytes(p->settings, reply);
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	681b      	ldr	r3, [r3, #0]
    ac3a:	6839      	ldr	r1, [r7, #0]
    ac3c:	4618      	mov	r0, r3
    ac3e:	f7ff fc91 	bl	a564 <dlms_addLLCBytes>
        }
        if ((ret = bb_set2(reply, p->attributeDescriptor, 0, p->attributeDescriptor->size)) != 0)
    ac42:	687b      	ldr	r3, [r7, #4]
    ac44:	6899      	ldr	r1, [r3, #8]
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	689b      	ldr	r3, [r3, #8]
    ac4a:	88db      	ldrh	r3, [r3, #6]
    ac4c:	2200      	movs	r2, #0
    ac4e:	6838      	ldr	r0, [r7, #0]
    ac50:	f7f8 fce6 	bl	3620 <bb_set2>
    ac54:	63b8      	str	r0, [r7, #56]	; 0x38
    ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ac58:	2b00      	cmp	r3, #0
    ac5a:	f000 82e4 	beq.w	b226 <dlms_getLNPdu+0x64a>
        {
            return ret;
    ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ac60:	e2e2      	b.n	b228 <dlms_getLNPdu+0x64c>
    }
    else
    {
        gxByteBuffer header;
        gxByteBuffer *h;
        if (p->settings->server)
    ac62:	687b      	ldr	r3, [r7, #4]
    ac64:	681b      	ldr	r3, [r3, #0]
    ac66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d00a      	beq.n	ac84 <dlms_getLNPdu+0xa8>
        {
            bb_attach(&header, pduAttributes, 0, sizeof(pduAttributes));
    ac6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    ac72:	2314      	movs	r3, #20
    ac74:	2200      	movs	r2, #0
    ac76:	4989      	ldr	r1, [pc, #548]	; (ae9c <dlms_getLNPdu+0x2c0>)
    ac78:	f7f8 fd3a 	bl	36f0 <bb_attach>
            h = &header;
    ac7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    ac80:	64bb      	str	r3, [r7, #72]	; 0x48
    ac82:	e001      	b.n	ac88 <dlms_getLNPdu+0xac>
        }
        else
        {
            h = reply;
    ac84:	683b      	ldr	r3, [r7, #0]
    ac86:	64bb      	str	r3, [r7, #72]	; 0x48
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (!ciphering && p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    ac88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d10b      	bne.n	aca8 <dlms_getLNPdu+0xcc>
    ac90:	687b      	ldr	r3, [r7, #4]
    ac92:	681b      	ldr	r3, [r3, #0]
    ac94:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d105      	bne.n	aca8 <dlms_getLNPdu+0xcc>
#else
        if (p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
#endif // DLMS_IGNORE_HIGH_GMAC
        {
            dlms_addLLCBytes(p->settings, h);
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	681b      	ldr	r3, [r3, #0]
    aca0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    aca2:	4618      	mov	r0, r3
    aca4:	f7ff fc5e 	bl	a564 <dlms_addLLCBytes>
        }
        if ((p->settings->negotiatedConformance & DLMS_CONFORMANCE_GENERAL_BLOCK_TRANSFER) != 0)
    aca8:	687b      	ldr	r3, [r7, #4]
    acaa:	681b      	ldr	r3, [r3, #0]
    acac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    acae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    acb2:	2b00      	cmp	r3, #0
    acb4:	d02f      	beq.n	ad16 <dlms_getLNPdu+0x13a>
        {
            bb_setUInt8(h, DLMS_COMMAND_GENERAL_BLOCK_TRANSFER);
    acb6:	21e0      	movs	r1, #224	; 0xe0
    acb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    acba:	f7f8 f8ab 	bl	2e14 <bb_setUInt8>
            dlms_multipleBlocks(p, h, ciphering);
    acbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    acc2:	461a      	mov	r2, r3
    acc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    acc6:	6878      	ldr	r0, [r7, #4]
    acc8:	f7ff ff0c 	bl	aae4 <dlms_multipleBlocks>
            // Is last block
            if (!p->lastBlock)
    accc:	687b      	ldr	r3, [r7, #4]
    acce:	7d9b      	ldrb	r3, [r3, #22]
    acd0:	2b00      	cmp	r3, #0
    acd2:	d104      	bne.n	acde <dlms_getLNPdu+0x102>
            {
                bb_setUInt8(h, 0);
    acd4:	2100      	movs	r1, #0
    acd6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    acd8:	f7f8 f89c 	bl	2e14 <bb_setUInt8>
    acdc:	e003      	b.n	ace6 <dlms_getLNPdu+0x10a>
            }
            else
            {
                bb_setUInt8(h, 0x80);
    acde:	2180      	movs	r1, #128	; 0x80
    ace0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ace2:	f7f8 f897 	bl	2e14 <bb_setUInt8>
            }
            // Set block number sent.
            bb_setUInt8(h, 0);
    ace6:	2100      	movs	r1, #0
    ace8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    acea:	f7f8 f893 	bl	2e14 <bb_setUInt8>
            // Set block number acknowledged
            bb_setUInt8(h, (unsigned char)p->blockIndex);
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	699b      	ldr	r3, [r3, #24]
    acf2:	b2db      	uxtb	r3, r3
    acf4:	4619      	mov	r1, r3
    acf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    acf8:	f7f8 f88c 	bl	2e14 <bb_setUInt8>
            p->blockIndex = p->blockIndex + 1;
    acfc:	687b      	ldr	r3, [r7, #4]
    acfe:	699b      	ldr	r3, [r3, #24]
    ad00:	1c5a      	adds	r2, r3, #1
    ad02:	687b      	ldr	r3, [r7, #4]
    ad04:	619a      	str	r2, [r3, #24]
            // Add APU tag.
            bb_setUInt8(h, 0);
    ad06:	2100      	movs	r1, #0
    ad08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad0a:	f7f8 f883 	bl	2e14 <bb_setUInt8>
            // Add Addl fields
            bb_setUInt8(h, 0);
    ad0e:	2100      	movs	r1, #0
    ad10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad12:	f7f8 f87f 	bl	2e14 <bb_setUInt8>
        }
        // Add command.
        bb_setUInt8(h, (unsigned char)p->command);
    ad16:	687b      	ldr	r3, [r7, #4]
    ad18:	791b      	ldrb	r3, [r3, #4]
    ad1a:	4619      	mov	r1, r3
    ad1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad1e:	f7f8 f879 	bl	2e14 <bb_setUInt8>

        if (p->command == DLMS_COMMAND_EVENT_NOTIFICATION ||
    ad22:	687b      	ldr	r3, [r7, #4]
    ad24:	791b      	ldrb	r3, [r3, #4]
    ad26:	2bc2      	cmp	r3, #194	; 0xc2
    ad28:	d00b      	beq.n	ad42 <dlms_getLNPdu+0x166>
            p->command == DLMS_COMMAND_DATA_NOTIFICATION ||
    ad2a:	687b      	ldr	r3, [r7, #4]
    ad2c:	791b      	ldrb	r3, [r3, #4]
            bb_setUInt8(h, 0);
        }
        // Add command.
        bb_setUInt8(h, (unsigned char)p->command);

        if (p->command == DLMS_COMMAND_EVENT_NOTIFICATION ||
    ad2e:	2b0f      	cmp	r3, #15
    ad30:	d007      	beq.n	ad42 <dlms_getLNPdu+0x166>
            p->command == DLMS_COMMAND_DATA_NOTIFICATION ||
            p->command == DLMS_COMMAND_ACCESS_REQUEST ||
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	791b      	ldrb	r3, [r3, #4]
        }
        // Add command.
        bb_setUInt8(h, (unsigned char)p->command);

        if (p->command == DLMS_COMMAND_EVENT_NOTIFICATION ||
            p->command == DLMS_COMMAND_DATA_NOTIFICATION ||
    ad36:	2bd9      	cmp	r3, #217	; 0xd9
    ad38:	d003      	beq.n	ad42 <dlms_getLNPdu+0x166>
            p->command == DLMS_COMMAND_ACCESS_REQUEST ||
            p->command == DLMS_COMMAND_ACCESS_RESPONSE)
    ad3a:	687b      	ldr	r3, [r7, #4]
    ad3c:	791b      	ldrb	r3, [r3, #4]
        // Add command.
        bb_setUInt8(h, (unsigned char)p->command);

        if (p->command == DLMS_COMMAND_EVENT_NOTIFICATION ||
            p->command == DLMS_COMMAND_DATA_NOTIFICATION ||
            p->command == DLMS_COMMAND_ACCESS_REQUEST ||
    ad3e:	2bda      	cmp	r3, #218	; 0xda
    ad40:	d15c      	bne.n	adfc <dlms_getLNPdu+0x220>
            p->command == DLMS_COMMAND_ACCESS_RESPONSE)
        {
            // Add Long-Invoke-Id-And-Priority
            if (p->command != DLMS_COMMAND_EVENT_NOTIFICATION)
    ad42:	687b      	ldr	r3, [r7, #4]
    ad44:	791b      	ldrb	r3, [r3, #4]
    ad46:	2bc2      	cmp	r3, #194	; 0xc2
    ad48:	d014      	beq.n	ad74 <dlms_getLNPdu+0x198>
            {
                if (p->invokeId != 0)
    ad4a:	687b      	ldr	r3, [r7, #4]
    ad4c:	7f1b      	ldrb	r3, [r3, #28]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d006      	beq.n	ad60 <dlms_getLNPdu+0x184>
                {
                    bb_setUInt32(h, p->invokeId);
    ad52:	687b      	ldr	r3, [r7, #4]
    ad54:	7f1b      	ldrb	r3, [r3, #28]
    ad56:	4619      	mov	r1, r3
    ad58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad5a:	f7f8 f94f 	bl	2ffc <bb_setUInt32>
    ad5e:	e009      	b.n	ad74 <dlms_getLNPdu+0x198>
                }
                else
                {
                    bb_setUInt32(h, dlms_getLongInvokeIDPriority(p->settings));
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	681b      	ldr	r3, [r3, #0]
    ad64:	4618      	mov	r0, r3
    ad66:	f7fb ffe5 	bl	6d34 <dlms_getLongInvokeIDPriority>
    ad6a:	4603      	mov	r3, r0
    ad6c:	4619      	mov	r1, r3
    ad6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad70:	f7f8 f944 	bl	2ffc <bb_setUInt32>
                }
            }
            // Add date time.
            if (p->time == NULL)
    ad74:	687b      	ldr	r3, [r7, #4]
    ad76:	691b      	ldr	r3, [r3, #16]
    ad78:	2b00      	cmp	r3, #0
    ad7a:	d104      	bne.n	ad86 <dlms_getLNPdu+0x1aa>
            {
                bb_setUInt8(h, DLMS_DATA_TYPE_NONE);
    ad7c:	2100      	movs	r1, #0
    ad7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ad80:	f7f8 f848 	bl	2e14 <bb_setUInt8>
                {
                    bb_setUInt32(h, dlms_getLongInvokeIDPriority(p->settings));
                }
            }
            // Add date time.
            if (p->time == NULL)
    ad84:	e096      	b.n	aeb4 <dlms_getLNPdu+0x2d8>
                bb_setUInt8(h, DLMS_DATA_TYPE_NONE);
            }
            else
            {
                // Data is send in octet string. Remove data type.
                unsigned short pos = (unsigned short)h->size;
    ad86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ad88:	88db      	ldrh	r3, [r3, #6]
    ad8a:	86fb      	strh	r3, [r7, #54]	; 0x36
                dlmsVARIANT tmp;
                tmp.dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    ad8c:	2030      	movs	r0, #48	; 0x30
    ad8e:	f01e fe59 	bl	29a44 <malloc>
    ad92:	4603      	mov	r3, r0
    ad94:	623b      	str	r3, [r7, #32]
                tmp.dateTime->value = *p->time;
    ad96:	6a3b      	ldr	r3, [r7, #32]
    ad98:	687a      	ldr	r2, [r7, #4]
    ad9a:	6912      	ldr	r2, [r2, #16]
    ad9c:	1d1c      	adds	r4, r3, #4
    ad9e:	4615      	mov	r5, r2
    ada0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ada2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ada4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ada6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ada8:	682b      	ldr	r3, [r5, #0]
    adaa:	6023      	str	r3, [r4, #0]
                tmp.vt = DLMS_DATA_TYPE_DATETIME;
    adac:	2319      	movs	r3, #25
    adae:	763b      	strb	r3, [r7, #24]
                if ((ret = dlms_setData(h, DLMS_DATA_TYPE_OCTET_STRING, &tmp)) != 0)
    adb0:	f107 0318 	add.w	r3, r7, #24
    adb4:	461a      	mov	r2, r3
    adb6:	2109      	movs	r1, #9
    adb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    adba:	f7fb ffe5 	bl	6d88 <dlms_setData>
    adbe:	63b8      	str	r0, [r7, #56]	; 0x38
    adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    adc2:	2b00      	cmp	r3, #0
    adc4:	d006      	beq.n	add4 <dlms_getLNPdu+0x1f8>
                {
                    var_clear(&tmp);
    adc6:	f107 0318 	add.w	r3, r7, #24
    adca:	4618      	mov	r0, r3
    adcc:	f01b f9bc 	bl	26148 <var_clear>
                    return ret;
    add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    add2:	e229      	b.n	b228 <dlms_getLNPdu+0x64c>
                }
                var_clear(&tmp);
    add4:	f107 0318 	add.w	r3, r7, #24
    add8:	4618      	mov	r0, r3
    adda:	f01b f9b5 	bl	26148 <var_clear>
                bb_move(h, pos + 1, pos, reply->size - pos - 1);
    adde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    ade0:	3301      	adds	r3, #1
    ade2:	b299      	uxth	r1, r3
    ade4:	683b      	ldr	r3, [r7, #0]
    ade6:	88da      	ldrh	r2, [r3, #6]
    ade8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    adea:	1ad3      	subs	r3, r2, r3
    adec:	b29b      	uxth	r3, r3
    adee:	3b01      	subs	r3, #1
    adf0:	b29b      	uxth	r3, r3
    adf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
    adf4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    adf6:	f7f9 f82d 	bl	3e54 <bb_move>
                {
                    bb_setUInt32(h, dlms_getLongInvokeIDPriority(p->settings));
                }
            }
            // Add date time.
            if (p->time == NULL)
    adfa:	e05b      	b.n	aeb4 <dlms_getLNPdu+0x2d8>
                }
                var_clear(&tmp);
                bb_move(h, pos + 1, pos, reply->size - pos - 1);
            }
        }
        else if (p->command != DLMS_COMMAND_RELEASE_REQUEST)
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	791b      	ldrb	r3, [r3, #4]
    ae00:	2b62      	cmp	r3, #98	; 0x62
    ae02:	d057      	beq.n	aeb4 <dlms_getLNPdu+0x2d8>
        {
            // Get request size can be bigger than PDU size.
            if (p->command != DLMS_COMMAND_GET_REQUEST && p->data != NULL
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	791b      	ldrb	r3, [r3, #4]
    ae08:	2bc0      	cmp	r3, #192	; 0xc0
    ae0a:	d00f      	beq.n	ae2c <dlms_getLNPdu+0x250>
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	68db      	ldr	r3, [r3, #12]
    ae10:	2b00      	cmp	r3, #0
    ae12:	d00b      	beq.n	ae2c <dlms_getLNPdu+0x250>
                && p->data->size != 0)
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	68db      	ldr	r3, [r3, #12]
    ae18:	88db      	ldrh	r3, [r3, #6]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d006      	beq.n	ae2c <dlms_getLNPdu+0x250>
            {
                dlms_multipleBlocks(p, h, ciphering);
    ae1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    ae22:	461a      	mov	r2, r3
    ae24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    ae26:	6878      	ldr	r0, [r7, #4]
    ae28:	f7ff fe5c 	bl	aae4 <dlms_multipleBlocks>
            }
            // Change Request type if Set request and multiple blocks is
            // needed.
            if (p->command == DLMS_COMMAND_SET_REQUEST)
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	791b      	ldrb	r3, [r3, #4]
    ae30:	2bc1      	cmp	r3, #193	; 0xc1
    ae32:	d112      	bne.n	ae5a <dlms_getLNPdu+0x27e>
            {
                if (p->multipleBlocks)
    ae34:	687b      	ldr	r3, [r7, #4]
    ae36:	7d5b      	ldrb	r3, [r3, #21]
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d00e      	beq.n	ae5a <dlms_getLNPdu+0x27e>
                {
                    if (p->requestType == 1)
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	799b      	ldrb	r3, [r3, #6]
    ae40:	2b01      	cmp	r3, #1
    ae42:	d103      	bne.n	ae4c <dlms_getLNPdu+0x270>
                    {
                        p->requestType = 2;
    ae44:	687b      	ldr	r3, [r7, #4]
    ae46:	2202      	movs	r2, #2
    ae48:	719a      	strb	r2, [r3, #6]
    ae4a:	e006      	b.n	ae5a <dlms_getLNPdu+0x27e>
                    }
                    else if (p->requestType == 2)
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	799b      	ldrb	r3, [r3, #6]
    ae50:	2b02      	cmp	r3, #2
    ae52:	d102      	bne.n	ae5a <dlms_getLNPdu+0x27e>
                    {
                        p->requestType = 3;
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	2203      	movs	r2, #3
    ae58:	719a      	strb	r2, [r3, #6]
                    }
                }
            }
            // Change request type If get response and multiple blocks is
            // needed.
            if (p->command == DLMS_COMMAND_GET_RESPONSE)
    ae5a:	687b      	ldr	r3, [r7, #4]
    ae5c:	791b      	ldrb	r3, [r3, #4]
    ae5e:	2bc4      	cmp	r3, #196	; 0xc4
    ae60:	d10a      	bne.n	ae78 <dlms_getLNPdu+0x29c>
            {
                if (p->multipleBlocks)
    ae62:	687b      	ldr	r3, [r7, #4]
    ae64:	7d5b      	ldrb	r3, [r3, #21]
    ae66:	2b00      	cmp	r3, #0
    ae68:	d006      	beq.n	ae78 <dlms_getLNPdu+0x29c>
                {
                    if (p->requestType == 1)
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	799b      	ldrb	r3, [r3, #6]
    ae6e:	2b01      	cmp	r3, #1
    ae70:	d102      	bne.n	ae78 <dlms_getLNPdu+0x29c>
                    {
                        p->requestType = 2;
    ae72:	687b      	ldr	r3, [r7, #4]
    ae74:	2202      	movs	r2, #2
    ae76:	719a      	strb	r2, [r3, #6]
                    }
                }
            }
            bb_setUInt8(h, p->requestType);
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	799b      	ldrb	r3, [r3, #6]
    ae7c:	4619      	mov	r1, r3
    ae7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ae80:	f7f7 ffc8 	bl	2e14 <bb_setUInt8>
            // Add Invoke Id And Priority.
            if (p->invokeId != 0)
    ae84:	687b      	ldr	r3, [r7, #4]
    ae86:	7f1b      	ldrb	r3, [r3, #28]
    ae88:	2b00      	cmp	r3, #0
    ae8a:	d009      	beq.n	aea0 <dlms_getLNPdu+0x2c4>
            {
                bb_setUInt8(h, p->invokeId);
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	7f1b      	ldrb	r3, [r3, #28]
    ae90:	4619      	mov	r1, r3
    ae92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ae94:	f7f7 ffbe 	bl	2e14 <bb_setUInt8>
    ae98:	e00c      	b.n	aeb4 <dlms_getLNPdu+0x2d8>
    ae9a:	bf00      	nop
    ae9c:	10000654 	.word	0x10000654
            }
            else
            {
                bb_setUInt8(h, dlms_getInvokeIDPriority(p->settings));
    aea0:	687b      	ldr	r3, [r7, #4]
    aea2:	681b      	ldr	r3, [r3, #0]
    aea4:	4618      	mov	r0, r3
    aea6:	f7fb ff21 	bl	6cec <dlms_getInvokeIDPriority>
    aeaa:	4603      	mov	r3, r0
    aeac:	4619      	mov	r1, r3
    aeae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    aeb0:	f7f7 ffb0 	bl	2e14 <bb_setUInt8>
            }
        }
        // Add attribute descriptor.
        if (p->attributeDescriptor != NULL)
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	689b      	ldr	r3, [r3, #8]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d008      	beq.n	aece <dlms_getLNPdu+0x2f2>
        {
            bb_set2(reply, p->attributeDescriptor, 0, p->attributeDescriptor->size);
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	6899      	ldr	r1, [r3, #8]
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	689b      	ldr	r3, [r3, #8]
    aec4:	88db      	ldrh	r3, [r3, #6]
    aec6:	2200      	movs	r2, #0
    aec8:	6838      	ldr	r0, [r7, #0]
    aeca:	f7f8 fba9 	bl	3620 <bb_set2>
        }
        if (p->command != DLMS_COMMAND_EVENT_NOTIFICATION &&
    aece:	687b      	ldr	r3, [r7, #4]
    aed0:	791b      	ldrb	r3, [r3, #4]
    aed2:	2bc2      	cmp	r3, #194	; 0xc2
    aed4:	f000 80b6 	beq.w	b044 <dlms_getLNPdu+0x468>
            p->command != DLMS_COMMAND_DATA_NOTIFICATION &&
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	791b      	ldrb	r3, [r3, #4]
        // Add attribute descriptor.
        if (p->attributeDescriptor != NULL)
        {
            bb_set2(reply, p->attributeDescriptor, 0, p->attributeDescriptor->size);
        }
        if (p->command != DLMS_COMMAND_EVENT_NOTIFICATION &&
    aedc:	2b0f      	cmp	r3, #15
    aede:	f000 80b1 	beq.w	b044 <dlms_getLNPdu+0x468>
            p->command != DLMS_COMMAND_DATA_NOTIFICATION &&
            (p->settings->negotiatedConformance & DLMS_CONFORMANCE_GENERAL_BLOCK_TRANSFER) == 0)
    aee2:	687b      	ldr	r3, [r7, #4]
    aee4:	681b      	ldr	r3, [r3, #0]
    aee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    aee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        if (p->attributeDescriptor != NULL)
        {
            bb_set2(reply, p->attributeDescriptor, 0, p->attributeDescriptor->size);
        }
        if (p->command != DLMS_COMMAND_EVENT_NOTIFICATION &&
            p->command != DLMS_COMMAND_DATA_NOTIFICATION &&
    aeec:	2b00      	cmp	r3, #0
    aeee:	f040 80a9 	bne.w	b044 <dlms_getLNPdu+0x468>
            (p->settings->negotiatedConformance & DLMS_CONFORMANCE_GENERAL_BLOCK_TRANSFER) == 0)
        {
            int totalLength;
            // If multiple blocks.
            if (p->multipleBlocks)
    aef2:	687b      	ldr	r3, [r7, #4]
    aef4:	7d5b      	ldrb	r3, [r3, #21]
    aef6:	2b00      	cmp	r3, #0
    aef8:	f000 80a4 	beq.w	b044 <dlms_getLNPdu+0x468>
            {
                // Is last block.
                if (p->lastBlock)
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	7d9b      	ldrb	r3, [r3, #22]
    af00:	2b00      	cmp	r3, #0
    af02:	d00e      	beq.n	af22 <dlms_getLNPdu+0x346>
                {
                    bb_setUInt8(h, 1);
    af04:	2101      	movs	r1, #1
    af06:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    af08:	f7f7 ff84 	bl	2e14 <bb_setUInt8>
                    p->settings->count = 0;
    af0c:	687b      	ldr	r3, [r7, #4]
    af0e:	681b      	ldr	r3, [r3, #0]
    af10:	2200      	movs	r2, #0
    af12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                    p->settings->index = 0;
    af16:	687b      	ldr	r3, [r7, #4]
    af18:	681b      	ldr	r3, [r3, #0]
    af1a:	2200      	movs	r2, #0
    af1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    af20:	e003      	b.n	af2a <dlms_getLNPdu+0x34e>
                }
                else
                {
                    bb_setUInt8(h, 0);
    af22:	2100      	movs	r1, #0
    af24:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    af26:	f7f7 ff75 	bl	2e14 <bb_setUInt8>
                }
                // Block index.
                bb_setUInt32(h, p->blockIndex);
    af2a:	687b      	ldr	r3, [r7, #4]
    af2c:	699b      	ldr	r3, [r3, #24]
    af2e:	4619      	mov	r1, r3
    af30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    af32:	f7f8 f863 	bl	2ffc <bb_setUInt32>
                p->blockIndex = p->blockIndex + 1;
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	699b      	ldr	r3, [r3, #24]
    af3a:	1c5a      	adds	r2, r3, #1
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	619a      	str	r2, [r3, #24]
                // Add status if reply.
                if (p->status != 0xFF)
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	7d1b      	ldrb	r3, [r3, #20]
    af44:	2bff      	cmp	r3, #255	; 0xff
    af46:	d011      	beq.n	af6c <dlms_getLNPdu+0x390>
                {
                    if (p->status != 0 && p->command == DLMS_COMMAND_GET_RESPONSE)
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	7d1b      	ldrb	r3, [r3, #20]
    af4c:	2b00      	cmp	r3, #0
    af4e:	d007      	beq.n	af60 <dlms_getLNPdu+0x384>
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	791b      	ldrb	r3, [r3, #4]
    af54:	2bc4      	cmp	r3, #196	; 0xc4
    af56:	d103      	bne.n	af60 <dlms_getLNPdu+0x384>
                    {
                        bb_setUInt8(h, 1);
    af58:	2101      	movs	r1, #1
    af5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    af5c:	f7f7 ff5a 	bl	2e14 <bb_setUInt8>
                    }
                    bb_setUInt8(h, p->status);
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	7d1b      	ldrb	r3, [r3, #20]
    af64:	4619      	mov	r1, r3
    af66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    af68:	f7f7 ff54 	bl	2e14 <bb_setUInt8>
                }
                // Block size.
                if (p->data != NULL)
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	68db      	ldr	r3, [r3, #12]
    af70:	2b00      	cmp	r3, #0
    af72:	d009      	beq.n	af88 <dlms_getLNPdu+0x3ac>
                {
                    len = (unsigned short)(p->data->size - p->data->position);
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	68db      	ldr	r3, [r3, #12]
    af78:	88da      	ldrh	r2, [r3, #6]
    af7a:	687b      	ldr	r3, [r7, #4]
    af7c:	68db      	ldr	r3, [r3, #12]
    af7e:	891b      	ldrh	r3, [r3, #8]
    af80:	1ad3      	subs	r3, r2, r3
    af82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    af86:	e002      	b.n	af8e <dlms_getLNPdu+0x3b2>
                }
                else
                {
                    len = 0;
    af88:	2300      	movs	r3, #0
    af8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                }
                totalLength = len + h->size;
    af8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    af92:	6cba      	ldr	r2, [r7, #72]	; 0x48
    af94:	88d2      	ldrh	r2, [r2, #6]
    af96:	4413      	add	r3, r2
    af98:	647b      	str	r3, [r7, #68]	; 0x44
#ifndef DLMS_IGNORE_HIGH_GMAC
                if (ciphering)
    af9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    af9e:	2b00      	cmp	r3, #0
    afa0:	d002      	beq.n	afa8 <dlms_getLNPdu+0x3cc>
                {
                    totalLength += CIPHERING_HEADER_SIZE;
    afa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    afa4:	3316      	adds	r3, #22
    afa6:	647b      	str	r3, [r7, #68]	; 0x44
                }
#endif //DLMS_IGNORE_HIGH_GMAC
                if (totalLength > p->settings->maxPduSize)
    afa8:	687b      	ldr	r3, [r7, #4]
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    afb0:	461a      	mov	r2, r3
    afb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    afb4:	429a      	cmp	r2, r3
    afb6:	da1d      	bge.n	aff4 <dlms_getLNPdu+0x418>
                {
                    len = (unsigned short)(p->settings->maxPduSize - h->size);
    afb8:	687b      	ldr	r3, [r7, #4]
    afba:	681b      	ldr	r3, [r3, #0]
    afbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
    afc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    afc2:	88db      	ldrh	r3, [r3, #6]
    afc4:	1ad3      	subs	r3, r2, r3
    afc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
#ifndef DLMS_IGNORE_HIGH_GMAC
                    if (ciphering)
    afca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    afce:	2b00      	cmp	r3, #0
    afd0:	d004      	beq.n	afdc <dlms_getLNPdu+0x400>
                    {
                        len -= CIPHERING_HEADER_SIZE;
    afd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    afd6:	3b16      	subs	r3, #22
    afd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                    }
#endif //DLMS_IGNORE_HIGH_GMAC
                    len -= hlp_getObjectCountSizeInBytes(len);
    afdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    afe0:	4618      	mov	r0, r3
    afe2:	f016 fc19 	bl	21818 <hlp_getObjectCountSizeInBytes>
    afe6:	4603      	mov	r3, r0
    afe8:	b29b      	uxth	r3, r3
    afea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
    afee:	1ad3      	subs	r3, r2, r3
    aff0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                }
                hlp_setObjectCount(len, h);
    aff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    aff8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    affa:	4618      	mov	r0, r3
    affc:	f016 fc6e 	bl	218dc <hlp_setObjectCount>
                if (p->settings->server)
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	681b      	ldr	r3, [r3, #0]
    b004:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    b008:	2b00      	cmp	r3, #0
    b00a:	d00d      	beq.n	b028 <dlms_getLNPdu+0x44c>
                {
                    if ((ret = bb_insert(h->data, h->size, reply, 0)) != 0)
    b00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b00e:	6818      	ldr	r0, [r3, #0]
    b010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b012:	88d9      	ldrh	r1, [r3, #6]
    b014:	2300      	movs	r3, #0
    b016:	683a      	ldr	r2, [r7, #0]
    b018:	f7f8 fed6 	bl	3dc8 <bb_insert>
    b01c:	63b8      	str	r0, [r7, #56]	; 0x38
    b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b020:	2b00      	cmp	r3, #0
    b022:	d00f      	beq.n	b044 <dlms_getLNPdu+0x468>
                    {
                        //If this fails PDU buffer size must be bigger.
                        return ret;
    b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b026:	e0ff      	b.n	b228 <dlms_getLNPdu+0x64c>
                    }
                }
                else if (p->data != NULL)
    b028:	687b      	ldr	r3, [r7, #4]
    b02a:	68db      	ldr	r3, [r3, #12]
    b02c:	2b00      	cmp	r3, #0
    b02e:	d009      	beq.n	b044 <dlms_getLNPdu+0x468>
                {
                    bb_set2(reply, p->data, p->data->position, len);
    b030:	687b      	ldr	r3, [r7, #4]
    b032:	68d9      	ldr	r1, [r3, #12]
    b034:	687b      	ldr	r3, [r7, #4]
    b036:	68db      	ldr	r3, [r3, #12]
    b038:	891a      	ldrh	r2, [r3, #8]
    b03a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    b03e:	6838      	ldr	r0, [r7, #0]
    b040:	f7f8 faee 	bl	3620 <bb_set2>
                }
            }
        }
        // Add data that fits to one block.
        if (len == 0)
    b044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    b048:	2b00      	cmp	r3, #0
    b04a:	d16d      	bne.n	b128 <dlms_getLNPdu+0x54c>
        {
            // Add status if reply.
            if (p->status != 0xFF)
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	7d1b      	ldrb	r3, [r3, #20]
    b050:	2bff      	cmp	r3, #255	; 0xff
    b052:	d011      	beq.n	b078 <dlms_getLNPdu+0x49c>
            {
                if (p->status != 0
    b054:	687b      	ldr	r3, [r7, #4]
    b056:	7d1b      	ldrb	r3, [r3, #20]
    b058:	2b00      	cmp	r3, #0
    b05a:	d007      	beq.n	b06c <dlms_getLNPdu+0x490>
                    && p->command == DLMS_COMMAND_GET_RESPONSE)
    b05c:	687b      	ldr	r3, [r7, #4]
    b05e:	791b      	ldrb	r3, [r3, #4]
    b060:	2bc4      	cmp	r3, #196	; 0xc4
    b062:	d103      	bne.n	b06c <dlms_getLNPdu+0x490>
                {
                    bb_setUInt8(h, 1);
    b064:	2101      	movs	r1, #1
    b066:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    b068:	f7f7 fed4 	bl	2e14 <bb_setUInt8>
                }
                bb_setUInt8(h, p->status);
    b06c:	687b      	ldr	r3, [r7, #4]
    b06e:	7d1b      	ldrb	r3, [r3, #20]
    b070:	4619      	mov	r1, r3
    b072:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    b074:	f7f7 fece 	bl	2e14 <bb_setUInt8>
            }
            if (p->data != NULL && p->data->size != 0)
    b078:	687b      	ldr	r3, [r7, #4]
    b07a:	68db      	ldr	r3, [r3, #12]
    b07c:	2b00      	cmp	r3, #0
    b07e:	d045      	beq.n	b10c <dlms_getLNPdu+0x530>
    b080:	687b      	ldr	r3, [r7, #4]
    b082:	68db      	ldr	r3, [r3, #12]
    b084:	88db      	ldrh	r3, [r3, #6]
    b086:	2b00      	cmp	r3, #0
    b088:	d040      	beq.n	b10c <dlms_getLNPdu+0x530>
            {
                len = (unsigned short)(p->data->size - p->data->position);
    b08a:	687b      	ldr	r3, [r7, #4]
    b08c:	68db      	ldr	r3, [r3, #12]
    b08e:	88da      	ldrh	r2, [r3, #6]
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	68db      	ldr	r3, [r3, #12]
    b094:	891b      	ldrh	r3, [r3, #8]
    b096:	1ad3      	subs	r3, r2, r3
    b098:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                if (len + reply->size > p->settings->maxPduSize)
    b09c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    b0a0:	683a      	ldr	r2, [r7, #0]
    b0a2:	88d2      	ldrh	r2, [r2, #6]
    b0a4:	4413      	add	r3, r2
    b0a6:	687a      	ldr	r2, [r7, #4]
    b0a8:	6812      	ldr	r2, [r2, #0]
    b0aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
    b0ae:	4293      	cmp	r3, r2
    b0b0:	dd12      	ble.n	b0d8 <dlms_getLNPdu+0x4fc>
                {
                    len = (unsigned short)(p->settings->maxPduSize - h->size - p->data->size - p->data->position);
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
    b0ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b0bc:	88db      	ldrh	r3, [r3, #6]
    b0be:	1ad3      	subs	r3, r2, r3
    b0c0:	b29a      	uxth	r2, r3
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	68db      	ldr	r3, [r3, #12]
    b0c6:	88db      	ldrh	r3, [r3, #6]
    b0c8:	1ad3      	subs	r3, r2, r3
    b0ca:	b29a      	uxth	r2, r3
    b0cc:	687b      	ldr	r3, [r7, #4]
    b0ce:	68db      	ldr	r3, [r3, #12]
    b0d0:	891b      	ldrh	r3, [r3, #8]
    b0d2:	1ad3      	subs	r3, r2, r3
    b0d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                }
                if (p->settings->server)
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	681b      	ldr	r3, [r3, #0]
    b0dc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d008      	beq.n	b0f6 <dlms_getLNPdu+0x51a>
                {
                    bb_insert(h->data, h->size, reply, 0);
    b0e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b0e6:	6818      	ldr	r0, [r3, #0]
    b0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b0ea:	88d9      	ldrh	r1, [r3, #6]
    b0ec:	2300      	movs	r3, #0
    b0ee:	683a      	ldr	r2, [r7, #0]
    b0f0:	f7f8 fe6a 	bl	3dc8 <bb_insert>
                len = (unsigned short)(p->data->size - p->data->position);
                if (len + reply->size > p->settings->maxPduSize)
                {
                    len = (unsigned short)(p->settings->maxPduSize - h->size - p->data->size - p->data->position);
                }
                if (p->settings->server)
    b0f4:	e018      	b.n	b128 <dlms_getLNPdu+0x54c>
                {
                    bb_insert(h->data, h->size, reply, 0);
                }
                else
                {
                    bb_set2(reply, p->data, p->data->position, len);
    b0f6:	687b      	ldr	r3, [r7, #4]
    b0f8:	68d9      	ldr	r1, [r3, #12]
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	68db      	ldr	r3, [r3, #12]
    b0fe:	891a      	ldrh	r2, [r3, #8]
    b100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    b104:	6838      	ldr	r0, [r7, #0]
    b106:	f7f8 fa8b 	bl	3620 <bb_set2>
                len = (unsigned short)(p->data->size - p->data->position);
                if (len + reply->size > p->settings->maxPduSize)
                {
                    len = (unsigned short)(p->settings->maxPduSize - h->size - p->data->size - p->data->position);
                }
                if (p->settings->server)
    b10a:	e00d      	b.n	b128 <dlms_getLNPdu+0x54c>
                else
                {
                    bb_set2(reply, p->data, p->data->position, len);
                }
            }
            else if (p->settings->server)
    b10c:	687b      	ldr	r3, [r7, #4]
    b10e:	681b      	ldr	r3, [r3, #0]
    b110:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    b114:	2b00      	cmp	r3, #0
    b116:	d007      	beq.n	b128 <dlms_getLNPdu+0x54c>
            {
                bb_insert(h->data, h->size, reply, 0);
    b118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b11a:	6818      	ldr	r0, [r3, #0]
    b11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b11e:	88d9      	ldrh	r1, [r3, #6]
    b120:	2300      	movs	r3, #0
    b122:	683a      	ldr	r2, [r7, #0]
    b124:	f7f8 fe50 	bl	3dc8 <bb_insert>
            }
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (ciphering && p->command != DLMS_COMMAND_RELEASE_REQUEST)
    b128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    b12c:	2b00      	cmp	r3, #0
    b12e:	d07a      	beq.n	b226 <dlms_getLNPdu+0x64a>
    b130:	687b      	ldr	r3, [r7, #4]
    b132:	791b      	ldrb	r3, [r3, #4]
    b134:	2b62      	cmp	r3, #98	; 0x62
    b136:	d076      	beq.n	b226 <dlms_getLNPdu+0x64a>
        {
            gxByteBuffer tmp;
            gxByteBuffer* key;
            bb_init(&tmp);
    b138:	f107 030c 	add.w	r3, r7, #12
    b13c:	4618      	mov	r0, r3
    b13e:	f7f7 fdd3 	bl	2ce8 <bb_init>
            if (p->settings->cipher.dedicatedKey != NULL && (p->settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    b142:	687b      	ldr	r3, [r7, #4]
    b144:	681b      	ldr	r3, [r3, #0]
    b146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    b14a:	2b00      	cmp	r3, #0
    b14c:	d00d      	beq.n	b16a <dlms_getLNPdu+0x58e>
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	681b      	ldr	r3, [r3, #0]
    b152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    b156:	f003 0302 	and.w	r3, r3, #2
    b15a:	2b00      	cmp	r3, #0
    b15c:	d005      	beq.n	b16a <dlms_getLNPdu+0x58e>
            {
                key = p->settings->cipher.dedicatedKey;
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	681b      	ldr	r3, [r3, #0]
    b162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    b166:	643b      	str	r3, [r7, #64]	; 0x40
    b168:	e003      	b.n	b172 <dlms_getLNPdu+0x596>
            }
            else
            {
                key = &p->settings->cipher.blockCipherKey;
    b16a:	687b      	ldr	r3, [r7, #4]
    b16c:	681b      	ldr	r3, [r3, #0]
    b16e:	338c      	adds	r3, #140	; 0x8c
    b170:	643b      	str	r3, [r7, #64]	; 0x40
            }
            ret = cip_encrypt(
                &p->settings->cipher,
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	681b      	ldr	r3, [r3, #0]
            }
            else
            {
                key = &p->settings->cipher.blockCipherKey;
            }
            ret = cip_encrypt(
    b176:	f103 0488 	add.w	r4, r3, #136	; 0x88
                &p->settings->cipher,
                p->settings->cipher.security,
    b17a:	687b      	ldr	r3, [r7, #4]
    b17c:	681b      	ldr	r3, [r3, #0]
            }
            else
            {
                key = &p->settings->cipher.blockCipherKey;
            }
            ret = cip_encrypt(
    b17e:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
                &p->settings->cipher,
                p->settings->cipher.security,
                DLMS_COUNT_TYPE_PACKET,
                p->settings->cipher.invocationCounter,
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	681b      	ldr	r3, [r3, #0]
            }
            else
            {
                key = &p->settings->cipher.blockCipherKey;
            }
            ret = cip_encrypt(
    b186:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
    b18a:	687b      	ldr	r3, [r7, #4]
    b18c:	6818      	ldr	r0, [r3, #0]
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	7919      	ldrb	r1, [r3, #4]
    b192:	687b      	ldr	r3, [r7, #4]
    b194:	795b      	ldrb	r3, [r3, #5]
    b196:	461a      	mov	r2, r3
    b198:	f7fb fcd2 	bl	6b40 <dlms_getGloMessage>
    b19c:	4603      	mov	r3, r0
    b19e:	4619      	mov	r1, r3
                &p->settings->cipher,
                p->settings->cipher.security,
                DLMS_COUNT_TYPE_PACKET,
                p->settings->cipher.invocationCounter,
                dlms_getGloMessage(p->settings, p->command, p->encryptedCommand),
                &p->settings->cipher.systemTitle,
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	681b      	ldr	r3, [r3, #0]
            }
            else
            {
                key = &p->settings->cipher.blockCipherKey;
            }
            ret = cip_encrypt(
    b1a4:	3398      	adds	r3, #152	; 0x98
    b1a6:	f107 020c 	add.w	r2, r7, #12
    b1aa:	9204      	str	r2, [sp, #16]
    b1ac:	683a      	ldr	r2, [r7, #0]
    b1ae:	9203      	str	r2, [sp, #12]
    b1b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b1b2:	9202      	str	r2, [sp, #8]
    b1b4:	9301      	str	r3, [sp, #4]
    b1b6:	9100      	str	r1, [sp, #0]
    b1b8:	4633      	mov	r3, r6
    b1ba:	2203      	movs	r2, #3
    b1bc:	4629      	mov	r1, r5
    b1be:	4620      	mov	r0, r4
    b1c0:	f7fa f848 	bl	5254 <cip_encrypt>
    b1c4:	63b8      	str	r0, [r7, #56]	; 0x38
                dlms_getGloMessage(p->settings, p->command, p->encryptedCommand),
                &p->settings->cipher.systemTitle,
                key,
                reply,
                &tmp);
            ++p->settings->cipher.invocationCounter;
    b1c6:	687b      	ldr	r3, [r7, #4]
    b1c8:	681b      	ldr	r3, [r3, #0]
    b1ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    b1ce:	3201      	adds	r2, #1
    b1d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (ret != 0)
    b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d006      	beq.n	b1e8 <dlms_getLNPdu+0x60c>
            {
                bb_clear(&tmp);
    b1da:	f107 030c 	add.w	r3, r7, #12
    b1de:	4618      	mov	r0, r3
    b1e0:	f7f8 fac0 	bl	3764 <bb_clear>
                return ret;
    b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b1e6:	e01f      	b.n	b228 <dlms_getLNPdu+0x64c>
            }
            reply->position = reply->size = 0;
    b1e8:	683b      	ldr	r3, [r7, #0]
    b1ea:	2200      	movs	r2, #0
    b1ec:	80da      	strh	r2, [r3, #6]
    b1ee:	683b      	ldr	r3, [r7, #0]
    b1f0:	88da      	ldrh	r2, [r3, #6]
    b1f2:	683b      	ldr	r3, [r7, #0]
    b1f4:	811a      	strh	r2, [r3, #8]
            if (p->settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    b1f6:	687b      	ldr	r3, [r7, #4]
    b1f8:	681b      	ldr	r3, [r3, #0]
    b1fa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    b1fe:	2b00      	cmp	r3, #0
    b200:	d105      	bne.n	b20e <dlms_getLNPdu+0x632>
            {
                dlms_addLLCBytes(p->settings, reply);
    b202:	687b      	ldr	r3, [r7, #4]
    b204:	681b      	ldr	r3, [r3, #0]
    b206:	6839      	ldr	r1, [r7, #0]
    b208:	4618      	mov	r0, r3
    b20a:	f7ff f9ab 	bl	a564 <dlms_addLLCBytes>
            }
            bb_set2(reply, &tmp, 0, tmp.size);
    b20e:	8a7b      	ldrh	r3, [r7, #18]
    b210:	f107 010c 	add.w	r1, r7, #12
    b214:	2200      	movs	r2, #0
    b216:	6838      	ldr	r0, [r7, #0]
    b218:	f7f8 fa02 	bl	3620 <bb_set2>
            bb_clear(&tmp);
    b21c:	f107 030c 	add.w	r3, r7, #12
    b220:	4618      	mov	r0, r3
    b222:	f7f8 fa9f 	bl	3764 <bb_clear>
        }
#endif //DLMS_IGNORE_HIGH_GMAC1
    }
    return 0;
    b226:	2300      	movs	r3, #0
}
    b228:	4618      	mov	r0, r3
    b22a:	3754      	adds	r7, #84	; 0x54
    b22c:	46bd      	mov	sp, r7
    b22e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b230 <dlms_getData2>:
int dlms_getData2(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data,
    unsigned char first)
{
    b230:	b580      	push	{r7, lr}
    b232:	b08a      	sub	sp, #40	; 0x28
    b234:	af04      	add	r7, sp, #16
    b236:	60f8      	str	r0, [r7, #12]
    b238:	60b9      	str	r1, [r7, #8]
    b23a:	607a      	str	r2, [r7, #4]
    b23c:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char frame = 0;
    b23e:	2300      	movs	r3, #0
    b240:	74fb      	strb	r3, [r7, #19]
    // If DLMS frame is generated.
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC)
    b242:	68fb      	ldr	r3, [r7, #12]
    b244:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    b248:	2b00      	cmp	r3, #0
    b24a:	d116      	bne.n	b27a <dlms_getData2+0x4a>
    {
        if ((ret = dlms_getHdlcData(settings->server, settings, reply, data, &frame, data->preEstablished, first)) != 0)
    b24c:	68fb      	ldr	r3, [r7, #12]
    b24e:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b258:	78fa      	ldrb	r2, [r7, #3]
    b25a:	9202      	str	r2, [sp, #8]
    b25c:	9301      	str	r3, [sp, #4]
    b25e:	f107 0313 	add.w	r3, r7, #19
    b262:	9300      	str	r3, [sp, #0]
    b264:	687b      	ldr	r3, [r7, #4]
    b266:	68ba      	ldr	r2, [r7, #8]
    b268:	68f9      	ldr	r1, [r7, #12]
    b26a:	f7fd f9c7 	bl	85fc <dlms_getHdlcData>
    b26e:	6178      	str	r0, [r7, #20]
    b270:	697b      	ldr	r3, [r7, #20]
    b272:	2b00      	cmp	r3, #0
    b274:	d014      	beq.n	b2a0 <dlms_getData2+0x70>
        {
            return ret;
    b276:	697b      	ldr	r3, [r7, #20]
    b278:	e049      	b.n	b30e <dlms_getData2+0xde>
        }
    }
#ifndef DLMS_IGNORE_WRAPPER
    else if (settings->interfaceType == DLMS_INTERFACE_TYPE_WRAPPER)
    b27a:	68fb      	ldr	r3, [r7, #12]
    b27c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    b280:	2b01      	cmp	r3, #1
    b282:	d10a      	bne.n	b29a <dlms_getData2+0x6a>
    {
        if ((ret = dlms_getTcpData(settings, reply, data)) != 0)
    b284:	687a      	ldr	r2, [r7, #4]
    b286:	68b9      	ldr	r1, [r7, #8]
    b288:	68f8      	ldr	r0, [r7, #12]
    b28a:	f7fd fcc3 	bl	8c14 <dlms_getTcpData>
    b28e:	6178      	str	r0, [r7, #20]
    b290:	697b      	ldr	r3, [r7, #20]
    b292:	2b00      	cmp	r3, #0
    b294:	d004      	beq.n	b2a0 <dlms_getData2+0x70>
        {
            return ret;
    b296:	697b      	ldr	r3, [r7, #20]
    b298:	e039      	b.n	b30e <dlms_getData2+0xde>
    }
#endif //DLMS_IGNORE_WRAPPER
    else
    {
        // Invalid Interface type.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    b29a:	f44f 7381 	mov.w	r3, #258	; 0x102
    b29e:	e036      	b.n	b30e <dlms_getData2+0xde>
    }
    // If all data is not read yet.
    if (!data->complete)
    b2a0:	687b      	ldr	r3, [r7, #4]
    b2a2:	7c1b      	ldrb	r3, [r3, #16]
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	d101      	bne.n	b2ac <dlms_getData2+0x7c>
    {
        return 0;
    b2a8:	2300      	movs	r3, #0
    b2aa:	e030      	b.n	b30e <dlms_getData2+0xde>
    }
    dlms_getDataFromFrame(reply, data);
    b2ac:	6879      	ldr	r1, [r7, #4]
    b2ae:	68b8      	ldr	r0, [r7, #8]
    b2b0:	f7fd f972 	bl	8598 <dlms_getDataFromFrame>
    // If keepalive or get next frame request.
    if (frame != 0x13 && (frame & 0x1) != 0)
    b2b4:	7cfb      	ldrb	r3, [r7, #19]
    b2b6:	2b13      	cmp	r3, #19
    b2b8:	d022      	beq.n	b300 <dlms_getData2+0xd0>
    b2ba:	7cfb      	ldrb	r3, [r7, #19]
    b2bc:	f003 0301 	and.w	r3, r3, #1
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d01d      	beq.n	b300 <dlms_getData2+0xd0>
    {
        if (settings->interfaceType == DLMS_INTERFACE_TYPE_HDLC && data->data.size != 0)
    b2c4:	68fb      	ldr	r3, [r7, #12]
    b2c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	d10f      	bne.n	b2ee <dlms_getData2+0xbe>
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	895b      	ldrh	r3, [r3, #10]
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	d00b      	beq.n	b2ee <dlms_getData2+0xbe>
        {
            if (reply->position != reply->size)
    b2d6:	68bb      	ldr	r3, [r7, #8]
    b2d8:	891a      	ldrh	r2, [r3, #8]
    b2da:	68bb      	ldr	r3, [r7, #8]
    b2dc:	88db      	ldrh	r3, [r3, #6]
    b2de:	429a      	cmp	r2, r3
    b2e0:	d005      	beq.n	b2ee <dlms_getData2+0xbe>
            {
                reply->position += 3;
    b2e2:	68bb      	ldr	r3, [r7, #8]
    b2e4:	891b      	ldrh	r3, [r3, #8]
    b2e6:	3303      	adds	r3, #3
    b2e8:	b29a      	uxth	r2, r3
    b2ea:	68bb      	ldr	r3, [r7, #8]
    b2ec:	811a      	strh	r2, [r3, #8]
            }
        }
        if (data->command == DLMS_COMMAND_REJECTED)
    b2ee:	687b      	ldr	r3, [r7, #4]
    b2f0:	785b      	ldrb	r3, [r3, #1]
    b2f2:	2b97      	cmp	r3, #151	; 0x97
    b2f4:	d102      	bne.n	b2fc <dlms_getData2+0xcc>
        {
            return DLMS_ERROR_CODE_REJECTED;
    b2f6:	f06f 0301 	mvn.w	r3, #1
    b2fa:	e008      	b.n	b30e <dlms_getData2+0xde>
        }
        return DLMS_ERROR_CODE_OK;
    b2fc:	2300      	movs	r3, #0
    b2fe:	e006      	b.n	b30e <dlms_getData2+0xde>
    }
    return dlms_getPdu(settings, data, first);
    b300:	78fb      	ldrb	r3, [r7, #3]
    b302:	461a      	mov	r2, r3
    b304:	6879      	ldr	r1, [r7, #4]
    b306:	68f8      	ldr	r0, [r7, #12]
    b308:	f7fe fe30 	bl	9f6c <dlms_getPdu>
    b30c:	4603      	mov	r3, r0
}
    b30e:	4618      	mov	r0, r3
    b310:	3718      	adds	r7, #24
    b312:	46bd      	mov	sp, r7
    b314:	bd80      	pop	{r7, pc}
    b316:	bf00      	nop

0000b318 <dlms_generateChallenge>:

int dlms_generateChallenge(
    gxByteBuffer* challenge)
{
    b318:	b580      	push	{r7, lr}
    b31a:	b084      	sub	sp, #16
    b31c:	af00      	add	r7, sp, #0
    b31e:	6078      	str	r0, [r7, #4]
    // Random challenge is 8 to 64 bytes.
    // Texas Instruments accepts only 16 byte long challenge.
    // For this reason challenge size is 16 bytes at the moment.
    int pos, len = 16;//hlp_rand() % 58 + 8;
    b320:	2310      	movs	r3, #16
    b322:	60bb      	str	r3, [r7, #8]
    bb_clear(challenge);
    b324:	6878      	ldr	r0, [r7, #4]
    b326:	f7f8 fa1d 	bl	3764 <bb_clear>
    for (pos = 0; pos != len; ++pos)
    b32a:	2300      	movs	r3, #0
    b32c:	60fb      	str	r3, [r7, #12]
    b32e:	e009      	b.n	b344 <dlms_generateChallenge+0x2c>
    {
        bb_setUInt8(challenge, hlp_rand());
    b330:	f016 fdde 	bl	21ef0 <hlp_rand>
    b334:	4603      	mov	r3, r0
    b336:	4619      	mov	r1, r3
    b338:	6878      	ldr	r0, [r7, #4]
    b33a:	f7f7 fd6b 	bl	2e14 <bb_setUInt8>
    // Random challenge is 8 to 64 bytes.
    // Texas Instruments accepts only 16 byte long challenge.
    // For this reason challenge size is 16 bytes at the moment.
    int pos, len = 16;//hlp_rand() % 58 + 8;
    bb_clear(challenge);
    for (pos = 0; pos != len; ++pos)
    b33e:	68fb      	ldr	r3, [r7, #12]
    b340:	3301      	adds	r3, #1
    b342:	60fb      	str	r3, [r7, #12]
    b344:	68fa      	ldr	r2, [r7, #12]
    b346:	68bb      	ldr	r3, [r7, #8]
    b348:	429a      	cmp	r2, r3
    b34a:	d1f1      	bne.n	b330 <dlms_generateChallenge+0x18>
    {
        bb_setUInt8(challenge, hlp_rand());
    }
    return 0;
    b34c:	2300      	movs	r3, #0
}
    b34e:	4618      	mov	r0, r3
    b350:	3710      	adds	r7, #16
    b352:	46bd      	mov	sp, r7
    b354:	bd80      	pop	{r7, pc}
    b356:	bf00      	nop

0000b358 <dlms_getActionInfo>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int dlms_getActionInfo(
    DLMS_OBJECT_TYPE objectType,
    unsigned char *value,
    unsigned char *count)
{
    b358:	b480      	push	{r7}
    b35a:	b085      	sub	sp, #20
    b35c:	af00      	add	r7, sp, #0
    b35e:	4603      	mov	r3, r0
    b360:	60b9      	str	r1, [r7, #8]
    b362:	607a      	str	r2, [r7, #4]
    b364:	81fb      	strh	r3, [r7, #14]
    switch (objectType)
    b366:	89fb      	ldrh	r3, [r7, #14]
    b368:	3b01      	subs	r3, #1
    b36a:	2b67      	cmp	r3, #103	; 0x67
    b36c:	f200 8152 	bhi.w	b614 <dlms_getActionInfo+0x2bc>
    b370:	a201      	add	r2, pc, #4	; (adr r2, b378 <dlms_getActionInfo+0x20>)
    b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b376:	bf00      	nop
    b378:	0000b519 	.word	0x0000b519
    b37c:	0000b615 	.word	0x0000b615
    b380:	0000b5b3 	.word	0x0000b5b3
    b384:	0000b57b 	.word	0x0000b57b
    b388:	0000b56d 	.word	0x0000b56d
    b38c:	0000b5c1 	.word	0x0000b5c1
    b390:	0000b5a5 	.word	0x0000b5a5
    b394:	0000b55f 	.word	0x0000b55f
    b398:	0000b5dd 	.word	0x0000b5dd
    b39c:	0000b519 	.word	0x0000b519
    b3a0:	0000b5eb 	.word	0x0000b5eb
    b3a4:	0000b551 	.word	0x0000b551
    b3a8:	0000b615 	.word	0x0000b615
    b3ac:	0000b615 	.word	0x0000b615
    b3b0:	0000b543 	.word	0x0000b543
    b3b4:	0000b615 	.word	0x0000b615
    b3b8:	0000b5dd 	.word	0x0000b5dd
    b3bc:	0000b527 	.word	0x0000b527
    b3c0:	0000b519 	.word	0x0000b519
    b3c4:	0000b535 	.word	0x0000b535
    b3c8:	0000b519 	.word	0x0000b519
    b3cc:	0000b519 	.word	0x0000b519
    b3d0:	0000b519 	.word	0x0000b519
    b3d4:	0000b519 	.word	0x0000b519
    b3d8:	0000b597 	.word	0x0000b597
    b3dc:	0000b519 	.word	0x0000b519
    b3e0:	0000b519 	.word	0x0000b519
    b3e4:	0000b519 	.word	0x0000b519
    b3e8:	0000b519 	.word	0x0000b519
    b3ec:	0000b615 	.word	0x0000b615
    b3f0:	0000b615 	.word	0x0000b615
    b3f4:	0000b615 	.word	0x0000b615
    b3f8:	0000b615 	.word	0x0000b615
    b3fc:	0000b615 	.word	0x0000b615
    b400:	0000b615 	.word	0x0000b615
    b404:	0000b615 	.word	0x0000b615
    b408:	0000b615 	.word	0x0000b615
    b40c:	0000b615 	.word	0x0000b615
    b410:	0000b615 	.word	0x0000b615
    b414:	0000b607 	.word	0x0000b607
    b418:	0000b519 	.word	0x0000b519
    b41c:	0000b589 	.word	0x0000b589
    b420:	0000b519 	.word	0x0000b519
    b424:	0000b519 	.word	0x0000b519
    b428:	0000b519 	.word	0x0000b519
    b42c:	0000b519 	.word	0x0000b519
    b430:	0000b615 	.word	0x0000b615
    b434:	0000b615 	.word	0x0000b615
    b438:	0000b615 	.word	0x0000b615
    b43c:	0000b615 	.word	0x0000b615
    b440:	0000b615 	.word	0x0000b615
    b444:	0000b615 	.word	0x0000b615
    b448:	0000b615 	.word	0x0000b615
    b44c:	0000b615 	.word	0x0000b615
    b450:	0000b615 	.word	0x0000b615
    b454:	0000b615 	.word	0x0000b615
    b458:	0000b615 	.word	0x0000b615
    b45c:	0000b615 	.word	0x0000b615
    b460:	0000b615 	.word	0x0000b615
    b464:	0000b615 	.word	0x0000b615
    b468:	0000b5cf 	.word	0x0000b5cf
    b46c:	0000b615 	.word	0x0000b615
    b470:	0000b519 	.word	0x0000b519
    b474:	0000b615 	.word	0x0000b615
    b478:	0000b615 	.word	0x0000b615
    b47c:	0000b615 	.word	0x0000b615
    b480:	0000b615 	.word	0x0000b615
    b484:	0000b615 	.word	0x0000b615
    b488:	0000b615 	.word	0x0000b615
    b48c:	0000b5f9 	.word	0x0000b5f9
    b490:	0000b615 	.word	0x0000b615
    b494:	0000b615 	.word	0x0000b615
    b498:	0000b615 	.word	0x0000b615
    b49c:	0000b615 	.word	0x0000b615
    b4a0:	0000b615 	.word	0x0000b615
    b4a4:	0000b615 	.word	0x0000b615
    b4a8:	0000b615 	.word	0x0000b615
    b4ac:	0000b615 	.word	0x0000b615
    b4b0:	0000b615 	.word	0x0000b615
    b4b4:	0000b615 	.word	0x0000b615
    b4b8:	0000b615 	.word	0x0000b615
    b4bc:	0000b615 	.word	0x0000b615
    b4c0:	0000b615 	.word	0x0000b615
    b4c4:	0000b615 	.word	0x0000b615
    b4c8:	0000b615 	.word	0x0000b615
    b4cc:	0000b615 	.word	0x0000b615
    b4d0:	0000b615 	.word	0x0000b615
    b4d4:	0000b615 	.word	0x0000b615
    b4d8:	0000b615 	.word	0x0000b615
    b4dc:	0000b615 	.word	0x0000b615
    b4e0:	0000b615 	.word	0x0000b615
    b4e4:	0000b615 	.word	0x0000b615
    b4e8:	0000b615 	.word	0x0000b615
    b4ec:	0000b615 	.word	0x0000b615
    b4f0:	0000b615 	.word	0x0000b615
    b4f4:	0000b615 	.word	0x0000b615
    b4f8:	0000b615 	.word	0x0000b615
    b4fc:	0000b615 	.word	0x0000b615
    b500:	0000b615 	.word	0x0000b615
    b504:	0000b615 	.word	0x0000b615
    b508:	0000b519 	.word	0x0000b519
    b50c:	0000b519 	.word	0x0000b519
    b510:	0000b519 	.word	0x0000b519
    b514:	0000b519 	.word	0x0000b519
    case DLMS_OBJECT_TYPE_SCHEDULE:
    case DLMS_OBJECT_TYPE_SMTP_SETUP:
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
    case DLMS_OBJECT_TYPE_UTILITY_TABLES:
        *value = 00;
    b518:	68bb      	ldr	r3, [r7, #8]
    b51a:	2200      	movs	r2, #0
    b51c:	701a      	strb	r2, [r3, #0]
        *count = 0;
    b51e:	687b      	ldr	r3, [r7, #4]
    b520:	2200      	movs	r2, #0
    b522:	701a      	strb	r2, [r3, #0]
        break;
    b524:	e07e      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        *value = 0x40;
    b526:	68bb      	ldr	r3, [r7, #8]
    b528:	2240      	movs	r2, #64	; 0x40
    b52a:	701a      	strb	r2, [r3, #0]
        *count = 4;
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	2204      	movs	r2, #4
    b530:	701a      	strb	r2, [r3, #0]
        break;
    b532:	e077      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        *value = 0x50;
    b534:	68bb      	ldr	r3, [r7, #8]
    b536:	2250      	movs	r2, #80	; 0x50
    b538:	701a      	strb	r2, [r3, #0]
        *count = 1;
    b53a:	687b      	ldr	r3, [r7, #4]
    b53c:	2201      	movs	r2, #1
    b53e:	701a      	strb	r2, [r3, #0]
        break;
    b540:	e070      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        *value = 0x60;
    b542:	68bb      	ldr	r3, [r7, #8]
    b544:	2260      	movs	r2, #96	; 0x60
    b546:	701a      	strb	r2, [r3, #0]
        *count = 4;
    b548:	687b      	ldr	r3, [r7, #4]
    b54a:	2204      	movs	r2, #4
    b54c:	701a      	strb	r2, [r3, #0]
        break;
    b54e:	e069      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        *value = 0x20;
    b550:	68bb      	ldr	r3, [r7, #8]
    b552:	2220      	movs	r2, #32
    b554:	701a      	strb	r2, [r3, #0]
        *count = 8;
    b556:	687b      	ldr	r3, [r7, #4]
    b558:	2208      	movs	r2, #8
    b55a:	701a      	strb	r2, [r3, #0]
        break;
    b55c:	e062      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_CLOCK:
        *value = 0x60;
    b55e:	68bb      	ldr	r3, [r7, #8]
    b560:	2260      	movs	r2, #96	; 0x60
    b562:	701a      	strb	r2, [r3, #0]
        *count = 6;
    b564:	687b      	ldr	r3, [r7, #4]
    b566:	2206      	movs	r2, #6
    b568:	701a      	strb	r2, [r3, #0]
        break;
    b56a:	e05b      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        *value = 0x48;
    b56c:	68bb      	ldr	r3, [r7, #8]
    b56e:	2248      	movs	r2, #72	; 0x48
    b570:	701a      	strb	r2, [r3, #0]
        *count = 2;
    b572:	687b      	ldr	r3, [r7, #4]
    b574:	2202      	movs	r2, #2
    b576:	701a      	strb	r2, [r3, #0]
        break;
    b578:	e054      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
        *value = 0x38;
    b57a:	68bb      	ldr	r3, [r7, #8]
    b57c:	2238      	movs	r2, #56	; 0x38
    b57e:	701a      	strb	r2, [r3, #0]
        *count = 1;
    b580:	687b      	ldr	r3, [r7, #4]
    b582:	2201      	movs	r2, #1
    b584:	701a      	strb	r2, [r3, #0]
        break;
    b586:	e04d      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        *value = 0x60;
    b588:	68bb      	ldr	r3, [r7, #8]
    b58a:	2260      	movs	r2, #96	; 0x60
    b58c:	701a      	strb	r2, [r3, #0]
        *count = 3;
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	2203      	movs	r2, #3
    b592:	701a      	strb	r2, [r3, #0]
        break;
    b594:	e046      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        *value = 0x60;
    b596:	68bb      	ldr	r3, [r7, #8]
    b598:	2260      	movs	r2, #96	; 0x60
    b59a:	701a      	strb	r2, [r3, #0]
        *count = 8;
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	2208      	movs	r2, #8
    b5a0:	701a      	strb	r2, [r3, #0]
        break;
    b5a2:	e03f      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
        *value = 0x58;
    b5a4:	68bb      	ldr	r3, [r7, #8]
    b5a6:	2258      	movs	r2, #88	; 0x58
    b5a8:	701a      	strb	r2, [r3, #0]
        *count = 4;
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	2204      	movs	r2, #4
    b5ae:	701a      	strb	r2, [r3, #0]
        break;
    b5b0:	e038      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_REGISTER:
        *value = 0x28;
    b5b2:	68bb      	ldr	r3, [r7, #8]
    b5b4:	2228      	movs	r2, #40	; 0x28
    b5b6:	701a      	strb	r2, [r3, #0]
        *count = 1;
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	2201      	movs	r2, #1
    b5bc:	701a      	strb	r2, [r3, #0]
        break;
    b5be:	e031      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
        *value = 0x30;
    b5c0:	68bb      	ldr	r3, [r7, #8]
    b5c2:	2230      	movs	r2, #48	; 0x30
    b5c4:	701a      	strb	r2, [r3, #0]
        *count = 3;
    b5c6:	687b      	ldr	r3, [r7, #4]
    b5c8:	2203      	movs	r2, #3
    b5ca:	701a      	strb	r2, [r3, #0]
        break;
    b5cc:	e02a      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
        *value = 0x28;
    b5ce:	68bb      	ldr	r3, [r7, #8]
    b5d0:	2228      	movs	r2, #40	; 0x28
    b5d2:	701a      	strb	r2, [r3, #0]
        *count = 2;
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	2202      	movs	r2, #2
    b5d8:	701a      	strb	r2, [r3, #0]
        break;
    b5da:	e023      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
        *value = 0x20;
    b5dc:	68bb      	ldr	r3, [r7, #8]
    b5de:	2220      	movs	r2, #32
    b5e0:	701a      	strb	r2, [r3, #0]
        *count = 1;
    b5e2:	687b      	ldr	r3, [r7, #4]
    b5e4:	2201      	movs	r2, #1
    b5e6:	701a      	strb	r2, [r3, #0]
        break;
    b5e8:	e01c      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
        *value = 0x10;
    b5ea:	68bb      	ldr	r3, [r7, #8]
    b5ec:	2210      	movs	r2, #16
    b5ee:	701a      	strb	r2, [r3, #0]
        *count = 2;
    b5f0:	687b      	ldr	r3, [r7, #4]
    b5f2:	2202      	movs	r2, #2
    b5f4:	701a      	strb	r2, [r3, #0]
        break;
    b5f6:	e015      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
        *value = 0x20;
    b5f8:	68bb      	ldr	r3, [r7, #8]
    b5fa:	2220      	movs	r2, #32
    b5fc:	701a      	strb	r2, [r3, #0]
        *count = 2;
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	2202      	movs	r2, #2
    b602:	701a      	strb	r2, [r3, #0]
        break;
    b604:	e00e      	b.n	b624 <dlms_getActionInfo+0x2cc>
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        *value = 0x38;
    b606:	68bb      	ldr	r3, [r7, #8]
    b608:	2238      	movs	r2, #56	; 0x38
    b60a:	701a      	strb	r2, [r3, #0]
        *count = 1;
    b60c:	687b      	ldr	r3, [r7, #4]
    b60e:	2201      	movs	r2, #1
    b610:	701a      	strb	r2, [r3, #0]
        break;
    b612:	e007      	b.n	b624 <dlms_getActionInfo+0x2cc>
    default:
        *count = *value = 0;
    b614:	68bb      	ldr	r3, [r7, #8]
    b616:	2200      	movs	r2, #0
    b618:	701a      	strb	r2, [r3, #0]
    b61a:	68bb      	ldr	r3, [r7, #8]
    b61c:	781a      	ldrb	r2, [r3, #0]
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	701a      	strb	r2, [r3, #0]
        break;
    b622:	bf00      	nop
    }
    return DLMS_ERROR_CODE_OK;
    b624:	2300      	movs	r3, #0
}
    b626:	4618      	mov	r0, r3
    b628:	3714      	adds	r7, #20
    b62a:	46bd      	mov	sp, r7
    b62c:	bc80      	pop	{r7}
    b62e:	4770      	bx	lr

0000b630 <dlms_secure>:
    dlmsSettings* settings,
    long ic,
    gxByteBuffer* data,
    gxByteBuffer* secret,
    gxByteBuffer* reply)
{
    b630:	b580      	push	{r7, lr}
    b632:	b092      	sub	sp, #72	; 0x48
    b634:	af06      	add	r7, sp, #24
    b636:	60f8      	str	r0, [r7, #12]
    b638:	60b9      	str	r1, [r7, #8]
    b63a:	607a      	str	r2, [r7, #4]
    b63c:	603b      	str	r3, [r7, #0]
    int ret = 0;
    b63e:	2300      	movs	r3, #0
    b640:	62fb      	str	r3, [r7, #44]	; 0x2c
    gxByteBuffer challenge;
    bb_clear(reply);
    b642:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b644:	f7f8 f88e 	bl	3764 <bb_clear>
    if (settings->authentication == DLMS_AUTHENTICATION_HIGH)
    b648:	68fb      	ldr	r3, [r7, #12]
    b64a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b64e:	2b02      	cmp	r3, #2
    b650:	d178      	bne.n	b744 <dlms_secure+0x114>
    {
#ifndef DLMS_IGNORE_AES
        gxByteBuffer s;
        unsigned short len = (unsigned short)data->size;
    b652:	687b      	ldr	r3, [r7, #4]
    b654:	88db      	ldrh	r3, [r3, #6]
    b656:	857b      	strh	r3, [r7, #42]	; 0x2a
        bb_init(&s);
    b658:	f107 0310 	add.w	r3, r7, #16
    b65c:	4618      	mov	r0, r3
    b65e:	f7f7 fb43 	bl	2ce8 <bb_init>
        bb_attach(&challenge, pduAttributes, 0, sizeof(pduAttributes));
    b662:	f107 001c 	add.w	r0, r7, #28
    b666:	2314      	movs	r3, #20
    b668:	2200      	movs	r2, #0
    b66a:	497d      	ldr	r1, [pc, #500]	; (b860 <dlms_secure+0x230>)
    b66c:	f7f8 f840 	bl	36f0 <bb_attach>
        if (len % 16 != 0)
    b670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    b672:	f003 030f 	and.w	r3, r3, #15
    b676:	b29b      	uxth	r3, r3
    b678:	2b00      	cmp	r3, #0
    b67a:	d009      	beq.n	b690 <dlms_secure+0x60>
        {
            len += (16 - (data->size % 16));
    b67c:	687b      	ldr	r3, [r7, #4]
    b67e:	88db      	ldrh	r3, [r3, #6]
    b680:	f003 030f 	and.w	r3, r3, #15
    b684:	b29b      	uxth	r3, r3
    b686:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    b688:	1ad3      	subs	r3, r2, r3
    b68a:	b29b      	uxth	r3, r3
    b68c:	3310      	adds	r3, #16
    b68e:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        if (secret->size > data->size)
    b690:	683b      	ldr	r3, [r7, #0]
    b692:	88da      	ldrh	r2, [r3, #6]
    b694:	687b      	ldr	r3, [r7, #4]
    b696:	88db      	ldrh	r3, [r3, #6]
    b698:	429a      	cmp	r2, r3
    b69a:	d912      	bls.n	b6c2 <dlms_secure+0x92>
        {
            len = (unsigned short)secret->size;
    b69c:	683b      	ldr	r3, [r7, #0]
    b69e:	88db      	ldrh	r3, [r3, #6]
    b6a0:	857b      	strh	r3, [r7, #42]	; 0x2a
            if (len % 16 != 0)
    b6a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    b6a4:	f003 030f 	and.w	r3, r3, #15
    b6a8:	b29b      	uxth	r3, r3
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d009      	beq.n	b6c2 <dlms_secure+0x92>
            {
                len += (16 - (secret->size % 16));
    b6ae:	683b      	ldr	r3, [r7, #0]
    b6b0:	88db      	ldrh	r3, [r3, #6]
    b6b2:	f003 030f 	and.w	r3, r3, #15
    b6b6:	b29b      	uxth	r3, r3
    b6b8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    b6ba:	1ad3      	subs	r3, r2, r3
    b6bc:	b29b      	uxth	r3, r3
    b6be:	3310      	adds	r3, #16
    b6c0:	857b      	strh	r3, [r7, #42]	; 0x2a
            }
        }
        bb_set(&s, secret->data, secret->size);
    b6c2:	683b      	ldr	r3, [r7, #0]
    b6c4:	6819      	ldr	r1, [r3, #0]
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	88da      	ldrh	r2, [r3, #6]
    b6ca:	f107 0310 	add.w	r3, r7, #16
    b6ce:	4618      	mov	r0, r3
    b6d0:	f7f7 ff46 	bl	3560 <bb_set>
        bb_zero(&s, s.size, len - s.size);
    b6d4:	8af9      	ldrh	r1, [r7, #22]
    b6d6:	8afb      	ldrh	r3, [r7, #22]
    b6d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    b6da:	1ad3      	subs	r3, r2, r3
    b6dc:	b29a      	uxth	r2, r3
    b6de:	f107 0310 	add.w	r3, r7, #16
    b6e2:	4618      	mov	r0, r3
    b6e4:	f7f7 fb64 	bl	2db0 <bb_zero>
        bb_set(&challenge, data->data, data->size);
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	6819      	ldr	r1, [r3, #0]
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	88da      	ldrh	r2, [r3, #6]
    b6f0:	f107 031c 	add.w	r3, r7, #28
    b6f4:	4618      	mov	r0, r3
    b6f6:	f7f7 ff33 	bl	3560 <bb_set>
        bb_zero(&challenge, challenge.size, len - challenge.size);
    b6fa:	8c79      	ldrh	r1, [r7, #34]	; 0x22
    b6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    b6fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    b700:	1ad3      	subs	r3, r2, r3
    b702:	b29a      	uxth	r2, r3
    b704:	f107 031c 	add.w	r3, r7, #28
    b708:	4618      	mov	r0, r3
    b70a:	f7f7 fb51 	bl	2db0 <bb_zero>
        bb_capacity(reply, challenge.size);
    b70e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    b710:	4619      	mov	r1, r3
    b712:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b714:	f7f7 fafe 	bl	2d14 <bb_capacity>
        gxaes_ecb_encrypt(challenge.data, s.data, reply->data, s.size);
    b718:	69f8      	ldr	r0, [r7, #28]
    b71a:	6939      	ldr	r1, [r7, #16]
    b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b71e:	681a      	ldr	r2, [r3, #0]
    b720:	8afb      	ldrh	r3, [r7, #22]
    b722:	f000 ff45 	bl	c5b0 <gxaes_ecb_encrypt>
        reply->size = s.size;
    b726:	8afa      	ldrh	r2, [r7, #22]
    b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b72a:	80da      	strh	r2, [r3, #6]
        bb_clear(&challenge);
    b72c:	f107 031c 	add.w	r3, r7, #28
    b730:	4618      	mov	r0, r3
    b732:	f7f8 f817 	bl	3764 <bb_clear>
        bb_clear(&s);
    b736:	f107 0310 	add.w	r3, r7, #16
    b73a:	4618      	mov	r0, r3
    b73c:	f7f8 f812 	bl	3764 <bb_clear>
        return 0;
    b740:	2300      	movs	r3, #0
    b742:	e088      	b.n	b856 <dlms_secure+0x226>
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#endif //DLMS_IGNORE_AES
    }
    // Get server Challenge.
    // Get shared secret
    bb_init(&challenge);
    b744:	f107 031c 	add.w	r3, r7, #28
    b748:	4618      	mov	r0, r3
    b74a:	f7f7 facd 	bl	2ce8 <bb_init>
    if (settings->authentication != DLMS_AUTHENTICATION_HIGH_GMAC)
    b74e:	68fb      	ldr	r3, [r7, #12]
    b750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b754:	2b05      	cmp	r3, #5
    b756:	d011      	beq.n	b77c <dlms_secure+0x14c>
    {
        bb_set(&challenge, data->data, data->size);
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	6819      	ldr	r1, [r3, #0]
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	88da      	ldrh	r2, [r3, #6]
    b760:	f107 031c 	add.w	r3, r7, #28
    b764:	4618      	mov	r0, r3
    b766:	f7f7 fefb 	bl	3560 <bb_set>
        bb_set(&challenge, secret->data, secret->size);
    b76a:	683b      	ldr	r3, [r7, #0]
    b76c:	6819      	ldr	r1, [r3, #0]
    b76e:	683b      	ldr	r3, [r7, #0]
    b770:	88da      	ldrh	r2, [r3, #6]
    b772:	f107 031c 	add.w	r3, r7, #28
    b776:	4618      	mov	r0, r3
    b778:	f7f7 fef2 	bl	3560 <bb_set>
    }
    if (settings->authentication == DLMS_AUTHENTICATION_HIGH_MD5)
    b77c:	68fb      	ldr	r3, [r7, #12]
    b77e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b782:	2b03      	cmp	r3, #3
    b784:	d10d      	bne.n	b7a2 <dlms_secure+0x172>
    {
        //If MD5 is not used.
#ifdef DLMS_IGNORE_HIGH_MD5
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
        ret = gxmd5_encrypt(&challenge, reply);
    b786:	f107 031c 	add.w	r3, r7, #28
    b78a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    b78c:	4618      	mov	r0, r3
    b78e:	f00b fa29 	bl	16be4 <gxmd5_encrypt>
    b792:	62f8      	str	r0, [r7, #44]	; 0x2c
        bb_clear(&challenge);
    b794:	f107 031c 	add.w	r3, r7, #28
    b798:	4618      	mov	r0, r3
    b79a:	f7f7 ffe3 	bl	3764 <bb_clear>
        return ret;
    b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7a0:	e059      	b.n	b856 <dlms_secure+0x226>
#endif //DLMS_IGNORE_HIGH_MD5
    }
    else if (settings->authentication == DLMS_AUTHENTICATION_HIGH_SHA1)
    b7a2:	68fb      	ldr	r3, [r7, #12]
    b7a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b7a8:	2b04      	cmp	r3, #4
    b7aa:	d10d      	bne.n	b7c8 <dlms_secure+0x198>
    {
        //If SHA1 is not used.
#ifdef DLMS_IGNORE_HIGH_SHA1
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
        ret = gxsha1_encrypt(&challenge, reply);
    b7ac:	f107 031c 	add.w	r3, r7, #28
    b7b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    b7b2:	4618      	mov	r0, r3
    b7b4:	f015 fbe0 	bl	20f78 <gxsha1_encrypt>
    b7b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        bb_clear(&challenge);
    b7ba:	f107 031c 	add.w	r3, r7, #28
    b7be:	4618      	mov	r0, r3
    b7c0:	f7f7 ffd0 	bl	3764 <bb_clear>
        return ret;
    b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7c6:	e046      	b.n	b856 <dlms_secure+0x226>
#endif //DLMS_IGNORE_HIGH_SHA1
    }
    else if (settings->authentication == DLMS_AUTHENTICATION_HIGH_SHA256)
    b7c8:	68fb      	ldr	r3, [r7, #12]
    b7ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b7ce:	2b06      	cmp	r3, #6
    b7d0:	d10d      	bne.n	b7ee <dlms_secure+0x1be>
    {
        //If SHA256 is not used.
#ifdef DLMS_IGNORE_HIGH_SHA256
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
        ret = gxsha256_encrypt(&challenge, reply);
    b7d2:	f107 031c 	add.w	r3, r7, #28
    b7d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    b7d8:	4618      	mov	r0, r3
    b7da:	f015 fe91 	bl	21500 <gxsha256_encrypt>
    b7de:	62f8      	str	r0, [r7, #44]	; 0x2c
        bb_clear(&challenge);
    b7e0:	f107 031c 	add.w	r3, r7, #28
    b7e4:	4618      	mov	r0, r3
    b7e6:	f7f7 ffbd 	bl	3764 <bb_clear>
        return ret;
    b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7ec:	e033      	b.n	b856 <dlms_secure+0x226>
#endif //DLMS_IGNORE_HIGH_SHA256
    }
    else if (settings->authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
    b7ee:	68fb      	ldr	r3, [r7, #12]
    b7f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    b7f4:	2b05      	cmp	r3, #5
    b7f6:	d12d      	bne.n	b854 <dlms_secure+0x224>
        //If GMAC is not used.
#ifdef DLMS_IGNORE_HIGH_GMAC
        bb_clear(&challenge);
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
        ret = cip_encrypt(
    b7f8:	68fb      	ldr	r3, [r7, #12]
    b7fa:	f103 0088 	add.w	r0, r3, #136	; 0x88
    b7fe:	68b9      	ldr	r1, [r7, #8]
    b800:	68fb      	ldr	r3, [r7, #12]
    b802:	338c      	adds	r3, #140	; 0x8c
    b804:	f107 021c 	add.w	r2, r7, #28
    b808:	9204      	str	r2, [sp, #16]
    b80a:	687a      	ldr	r2, [r7, #4]
    b80c:	9203      	str	r2, [sp, #12]
    b80e:	9302      	str	r3, [sp, #8]
    b810:	683b      	ldr	r3, [r7, #0]
    b812:	9301      	str	r3, [sp, #4]
    b814:	2300      	movs	r3, #0
    b816:	9300      	str	r3, [sp, #0]
    b818:	460b      	mov	r3, r1
    b81a:	2201      	movs	r2, #1
    b81c:	2110      	movs	r1, #16
    b81e:	f7f9 fd19 	bl	5254 <cip_encrypt>
    b822:	62f8      	str	r0, [r7, #44]	; 0x2c
            0,
            secret,
            &settings->cipher.blockCipherKey,
            data,
            &challenge);
        if (ret == 0)
    b824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b826:	2b00      	cmp	r3, #0
    b828:	d10f      	bne.n	b84a <dlms_secure+0x21a>
        {
            bb_setUInt8(reply, DLMS_SECURITY_AUTHENTICATION);
    b82a:	2110      	movs	r1, #16
    b82c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b82e:	f7f7 faf1 	bl	2e14 <bb_setUInt8>
            bb_setUInt32(reply, ic);
    b832:	68bb      	ldr	r3, [r7, #8]
    b834:	4619      	mov	r1, r3
    b836:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b838:	f7f7 fbe0 	bl	2ffc <bb_setUInt32>
            bb_set2(reply, &challenge, 0, challenge.size);
    b83c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    b83e:	f107 011c 	add.w	r1, r7, #28
    b842:	2200      	movs	r2, #0
    b844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b846:	f7f7 feeb 	bl	3620 <bb_set2>
        }
        bb_clear(&challenge);
    b84a:	f107 031c 	add.w	r3, r7, #28
    b84e:	4618      	mov	r0, r3
    b850:	f7f7 ff88 	bl	3764 <bb_clear>
#endif //DLMS_IGNORE_HIGH_GMAC
    }
    return ret;
    b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    b856:	4618      	mov	r0, r3
    b858:	3730      	adds	r7, #48	; 0x30
    b85a:	46bd      	mov	sp, r7
    b85c:	bd80      	pop	{r7, pc}
    b85e:	bf00      	nop
    b860:	10000654 	.word	0x10000654

0000b864 <dlms_parseSnrmUaResponse>:

int dlms_parseSnrmUaResponse(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
    b864:	b580      	push	{r7, lr}
    b866:	b08a      	sub	sp, #40	; 0x28
    b868:	af00      	add	r7, sp, #0
    b86a:	6078      	str	r0, [r7, #4]
    b86c:	6039      	str	r1, [r7, #0]
    dlmsVARIANT value;
    unsigned char ch, id, len;
    int ret;
    //If default settings are used.
    if (data->size - data->position == 0)
    b86e:	683b      	ldr	r3, [r7, #0]
    b870:	88da      	ldrh	r2, [r3, #6]
    b872:	683b      	ldr	r3, [r7, #0]
    b874:	891b      	ldrh	r3, [r3, #8]
    b876:	429a      	cmp	r2, r3
    b878:	d111      	bne.n	b89e <dlms_parseSnrmUaResponse+0x3a>
    {
        settings->maxInfoRX = DEFAULT_MAX_INFO_RX;
    b87a:	687b      	ldr	r3, [r7, #4]
    b87c:	2280      	movs	r2, #128	; 0x80
    b87e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        settings->maxInfoTX = DEFAULT_MAX_INFO_TX;
    b882:	687b      	ldr	r3, [r7, #4]
    b884:	2280      	movs	r2, #128	; 0x80
    b886:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        settings->windowSizeRX = DEFAULT_MAX_WINDOW_SIZE_RX;
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	2201      	movs	r2, #1
    b88e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        settings->windowSizeTX = DEFAULT_MAX_WINDOW_SIZE_TX;
    b892:	687b      	ldr	r3, [r7, #4]
    b894:	2201      	movs	r2, #1
    b896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        return 0;
    b89a:	2300      	movs	r3, #0
    b89c:	e0be      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
    }
    // Skip FromatID
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    b89e:	f107 030f 	add.w	r3, r7, #15
    b8a2:	4619      	mov	r1, r3
    b8a4:	6838      	ldr	r0, [r7, #0]
    b8a6:	f7f7 ff81 	bl	37ac <bb_getUInt8>
    b8aa:	6278      	str	r0, [r7, #36]	; 0x24
    b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d001      	beq.n	b8b6 <dlms_parseSnrmUaResponse+0x52>
    {
        return ret;
    b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8b4:	e0b2      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
    }
    // Skip Group ID.
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    b8b6:	f107 030f 	add.w	r3, r7, #15
    b8ba:	4619      	mov	r1, r3
    b8bc:	6838      	ldr	r0, [r7, #0]
    b8be:	f7f7 ff75 	bl	37ac <bb_getUInt8>
    b8c2:	6278      	str	r0, [r7, #36]	; 0x24
    b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d001      	beq.n	b8ce <dlms_parseSnrmUaResponse+0x6a>
    {
        return ret;
    b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8cc:	e0a6      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
    }
    // Skip Group len
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    b8ce:	f107 030f 	add.w	r3, r7, #15
    b8d2:	4619      	mov	r1, r3
    b8d4:	6838      	ldr	r0, [r7, #0]
    b8d6:	f7f7 ff69 	bl	37ac <bb_getUInt8>
    b8da:	6278      	str	r0, [r7, #36]	; 0x24
    b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8de:	2b00      	cmp	r3, #0
    b8e0:	f000 8094 	beq.w	ba0c <dlms_parseSnrmUaResponse+0x1a8>
    {
        return ret;
    b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8e6:	e099      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
    }
    while (data->position < data->size)
    {
        if ((ret = bb_getUInt8(data, &id)) != 0)
    b8e8:	f107 030e 	add.w	r3, r7, #14
    b8ec:	4619      	mov	r1, r3
    b8ee:	6838      	ldr	r0, [r7, #0]
    b8f0:	f7f7 ff5c 	bl	37ac <bb_getUInt8>
    b8f4:	6278      	str	r0, [r7, #36]	; 0x24
    b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	d001      	beq.n	b900 <dlms_parseSnrmUaResponse+0x9c>
        {
            return ret;
    b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8fe:	e08d      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
        }
        if ((ret = bb_getUInt8(data, &len)) != 0)
    b900:	f107 030d 	add.w	r3, r7, #13
    b904:	4619      	mov	r1, r3
    b906:	6838      	ldr	r0, [r7, #0]
    b908:	f7f7 ff50 	bl	37ac <bb_getUInt8>
    b90c:	6278      	str	r0, [r7, #36]	; 0x24
    b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b910:	2b00      	cmp	r3, #0
    b912:	d001      	beq.n	b918 <dlms_parseSnrmUaResponse+0xb4>
        {
            return ret;
    b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b916:	e081      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
        }
        switch (len)
    b918:	7b7b      	ldrb	r3, [r7, #13]
    b91a:	2b02      	cmp	r3, #2
    b91c:	d013      	beq.n	b946 <dlms_parseSnrmUaResponse+0xe2>
    b91e:	2b04      	cmp	r3, #4
    b920:	d021      	beq.n	b966 <dlms_parseSnrmUaResponse+0x102>
    b922:	2b01      	cmp	r3, #1
    b924:	d12f      	bne.n	b986 <dlms_parseSnrmUaResponse+0x122>
        {
        case 1:
            ret = bb_getUInt8(data, &value.bVal);
    b926:	f107 0310 	add.w	r3, r7, #16
    b92a:	3308      	adds	r3, #8
    b92c:	4619      	mov	r1, r3
    b92e:	6838      	ldr	r0, [r7, #0]
    b930:	f7f7 ff3c 	bl	37ac <bb_getUInt8>
    b934:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
    b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b938:	2b00      	cmp	r3, #0
    b93a:	d001      	beq.n	b940 <dlms_parseSnrmUaResponse+0xdc>
            {
                return ret;
    b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b93e:	e06d      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
            }
            value.vt = DLMS_DATA_TYPE_UINT8;
    b940:	2311      	movs	r3, #17
    b942:	743b      	strb	r3, [r7, #16]
            break;
    b944:	e022      	b.n	b98c <dlms_parseSnrmUaResponse+0x128>
        case 2:
            ret = bb_getUInt16(data, &value.uiVal);
    b946:	f107 0310 	add.w	r3, r7, #16
    b94a:	3308      	adds	r3, #8
    b94c:	4619      	mov	r1, r3
    b94e:	6838      	ldr	r0, [r7, #0]
    b950:	f7f7 ff8e 	bl	3870 <bb_getUInt16>
    b954:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
    b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b958:	2b00      	cmp	r3, #0
    b95a:	d001      	beq.n	b960 <dlms_parseSnrmUaResponse+0xfc>
            {
                return ret;
    b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b95e:	e05d      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
            }
            value.vt = DLMS_DATA_TYPE_UINT16;
    b960:	2312      	movs	r3, #18
    b962:	743b      	strb	r3, [r7, #16]
            break;
    b964:	e012      	b.n	b98c <dlms_parseSnrmUaResponse+0x128>
        case 4:
            ret = bb_getUInt32(data, &value.ulVal);
    b966:	f107 0310 	add.w	r3, r7, #16
    b96a:	3308      	adds	r3, #8
    b96c:	4619      	mov	r1, r3
    b96e:	6838      	ldr	r0, [r7, #0]
    b970:	f7f7 ffae 	bl	38d0 <bb_getUInt32>
    b974:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
    b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b978:	2b00      	cmp	r3, #0
    b97a:	d001      	beq.n	b980 <dlms_parseSnrmUaResponse+0x11c>
            {
                return ret;
    b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b97e:	e04d      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
            }
            value.vt = DLMS_DATA_TYPE_UINT32;
    b980:	2306      	movs	r3, #6
    b982:	743b      	strb	r3, [r7, #16]
            break;
    b984:	e002      	b.n	b98c <dlms_parseSnrmUaResponse+0x128>
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    b986:	f44f 7381 	mov.w	r3, #258	; 0x102
    b98a:	e047      	b.n	ba1c <dlms_parseSnrmUaResponse+0x1b8>
        }
        // RX / TX are delivered from the partner's point of view =>
        // reversed to ours
        switch (id)
    b98c:	7bbb      	ldrb	r3, [r7, #14]
    b98e:	3b05      	subs	r3, #5
    b990:	2b03      	cmp	r3, #3
    b992:	d837      	bhi.n	ba04 <dlms_parseSnrmUaResponse+0x1a0>
    b994:	a201      	add	r2, pc, #4	; (adr r2, b99c <dlms_parseSnrmUaResponse+0x138>)
    b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b99a:	bf00      	nop
    b99c:	0000b9ad 	.word	0x0000b9ad
    b9a0:	0000b9c3 	.word	0x0000b9c3
    b9a4:	0000b9d9 	.word	0x0000b9d9
    b9a8:	0000b9ef 	.word	0x0000b9ef
        {
        case HDLC_INFO_MAX_INFO_TX:
            settings->maxInfoRX = (unsigned short)var_toInteger(&value);
    b9ac:	f107 0310 	add.w	r3, r7, #16
    b9b0:	4618      	mov	r0, r3
    b9b2:	f01b f88b 	bl	26acc <var_toInteger>
    b9b6:	4603      	mov	r3, r0
    b9b8:	b29a      	uxth	r2, r3
    b9ba:	687b      	ldr	r3, [r7, #4]
    b9bc:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
            break;
    b9c0:	e024      	b.n	ba0c <dlms_parseSnrmUaResponse+0x1a8>
        case HDLC_INFO_MAX_INFO_RX:
            settings->maxInfoTX = (unsigned short)var_toInteger(&value);
    b9c2:	f107 0310 	add.w	r3, r7, #16
    b9c6:	4618      	mov	r0, r3
    b9c8:	f01b f880 	bl	26acc <var_toInteger>
    b9cc:	4603      	mov	r3, r0
    b9ce:	b29a      	uxth	r2, r3
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
            break;
    b9d6:	e019      	b.n	ba0c <dlms_parseSnrmUaResponse+0x1a8>
        case HDLC_INFO_WINDOW_SIZE_TX:
            settings->windowSizeRX = (unsigned char)var_toInteger(&value);
    b9d8:	f107 0310 	add.w	r3, r7, #16
    b9dc:	4618      	mov	r0, r3
    b9de:	f01b f875 	bl	26acc <var_toInteger>
    b9e2:	4603      	mov	r3, r0
    b9e4:	b2da      	uxtb	r2, r3
    b9e6:	687b      	ldr	r3, [r7, #4]
    b9e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            break;
    b9ec:	e00e      	b.n	ba0c <dlms_parseSnrmUaResponse+0x1a8>
        case HDLC_INFO_WINDOW_SIZE_RX:
            settings->windowSizeTX = (unsigned char)var_toInteger(&value);
    b9ee:	f107 0310 	add.w	r3, r7, #16
    b9f2:	4618      	mov	r0, r3
    b9f4:	f01b f86a 	bl	26acc <var_toInteger>
    b9f8:	4603      	mov	r3, r0
    b9fa:	b2da      	uxtb	r2, r3
    b9fc:	687b      	ldr	r3, [r7, #4]
    b9fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            break;
    ba02:	e003      	b.n	ba0c <dlms_parseSnrmUaResponse+0x1a8>
        default:
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    ba04:	f44f 7381 	mov.w	r3, #258	; 0x102
    ba08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
    ba0a:	bf00      	nop
    // Skip Group len
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    {
        return ret;
    }
    while (data->position < data->size)
    ba0c:	683b      	ldr	r3, [r7, #0]
    ba0e:	891a      	ldrh	r2, [r3, #8]
    ba10:	683b      	ldr	r3, [r7, #0]
    ba12:	88db      	ldrh	r3, [r3, #6]
    ba14:	429a      	cmp	r2, r3
    ba16:	f4ff af67 	bcc.w	b8e8 <dlms_parseSnrmUaResponse+0x84>
        default:
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
            break;
        }
    }
    return ret;
    ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ba1c:	4618      	mov	r0, r3
    ba1e:	3728      	adds	r7, #40	; 0x28
    ba20:	46bd      	mov	sp, r7
    ba22:	bd80      	pop	{r7, pc}

0000ba24 <dlms_appendHdlcParameter>:

int dlms_appendHdlcParameter(gxByteBuffer* data, unsigned short value)
{
    ba24:	b580      	push	{r7, lr}
    ba26:	b082      	sub	sp, #8
    ba28:	af00      	add	r7, sp, #0
    ba2a:	6078      	str	r0, [r7, #4]
    ba2c:	460b      	mov	r3, r1
    ba2e:	807b      	strh	r3, [r7, #2]
    if (value < 0x100)
    ba30:	887b      	ldrh	r3, [r7, #2]
    ba32:	2bff      	cmp	r3, #255	; 0xff
    ba34:	d80a      	bhi.n	ba4c <dlms_appendHdlcParameter+0x28>
    {
        bb_setUInt8(data, 1);
    ba36:	2101      	movs	r1, #1
    ba38:	6878      	ldr	r0, [r7, #4]
    ba3a:	f7f7 f9eb 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, (unsigned char)value);
    ba3e:	887b      	ldrh	r3, [r7, #2]
    ba40:	b2db      	uxtb	r3, r3
    ba42:	4619      	mov	r1, r3
    ba44:	6878      	ldr	r0, [r7, #4]
    ba46:	f7f7 f9e5 	bl	2e14 <bb_setUInt8>
    ba4a:	e008      	b.n	ba5e <dlms_appendHdlcParameter+0x3a>
    }
    else
    {
        bb_setUInt8(data, 2);
    ba4c:	2102      	movs	r1, #2
    ba4e:	6878      	ldr	r0, [r7, #4]
    ba50:	f7f7 f9e0 	bl	2e14 <bb_setUInt8>
        bb_setUInt16(data, value);
    ba54:	887b      	ldrh	r3, [r7, #2]
    ba56:	4619      	mov	r1, r3
    ba58:	6878      	ldr	r0, [r7, #4]
    ba5a:	f7f7 fa6d 	bl	2f38 <bb_setUInt16>
    }
    return 0;
    ba5e:	2300      	movs	r3, #0
}
    ba60:	4618      	mov	r0, r3
    ba62:	3708      	adds	r7, #8
    ba64:	46bd      	mov	sp, r7
    ba66:	bd80      	pop	{r7, pc}

0000ba68 <svr_init>:
    unsigned short pduSize,
    unsigned char* frameBuffer,
    unsigned short frameBufferSize,
    unsigned char* pduBuffer,
    unsigned short pduBufferSize)
{
    ba68:	b580      	push	{r7, lr}
    ba6a:	b086      	sub	sp, #24
    ba6c:	af04      	add	r7, sp, #16
    ba6e:	6078      	str	r0, [r7, #4]
    ba70:	4608      	mov	r0, r1
    ba72:	4611      	mov	r1, r2
    ba74:	461a      	mov	r2, r3
    ba76:	4603      	mov	r3, r0
    ba78:	70fb      	strb	r3, [r7, #3]
    ba7a:	460b      	mov	r3, r1
    ba7c:	70bb      	strb	r3, [r7, #2]
    ba7e:	4613      	mov	r3, r2
    ba80:	803b      	strh	r3, [r7, #0]
    cl_init(&settings->base, useLogicalNameReferencing, 0, 0, DLMS_AUTHENTICATION_NONE, NULL, interfaceType);
    ba82:	6878      	ldr	r0, [r7, #4]
    ba84:	78f9      	ldrb	r1, [r7, #3]
    ba86:	78bb      	ldrb	r3, [r7, #2]
    ba88:	9302      	str	r3, [sp, #8]
    ba8a:	2300      	movs	r3, #0
    ba8c:	9301      	str	r3, [sp, #4]
    ba8e:	2300      	movs	r3, #0
    ba90:	9300      	str	r3, [sp, #0]
    ba92:	2300      	movs	r3, #0
    ba94:	2200      	movs	r2, #0
    ba96:	f000 f84f 	bl	bb38 <cl_init>
	//cl_init(&settings->base, useLogicalNameReferencing, 0, 0, DLMS_AUTHENTICATION_LOW, "devsys", interfaceType);
    settings->base.proposedConformance |= DLMS_CONFORMANCE_GENERAL_PROTECTION;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ba9e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
    baa2:	687b      	ldr	r3, [r7, #4]
    baa4:	665a      	str	r2, [r3, #100]	; 0x64
    bb_attach(&settings->receivedData, frameBuffer, 0, frameBufferSize);
    baa6:	687b      	ldr	r3, [r7, #4]
    baa8:	f503 7084 	add.w	r0, r3, #264	; 0x108
    baac:	8b3b      	ldrh	r3, [r7, #24]
    baae:	2200      	movs	r2, #0
    bab0:	6979      	ldr	r1, [r7, #20]
    bab2:	f7f7 fe1d 	bl	36f0 <bb_attach>
    reply_init(&settings->info);
    bab6:	687b      	ldr	r3, [r7, #4]
    bab8:	33c8      	adds	r3, #200	; 0xc8
    baba:	4618      	mov	r0, r3
    babc:	f016 fcde 	bl	2247c <reply_init>
    bb_attach(&settings->info.data, pduBuffer, 0, pduBufferSize);
    bac0:	687b      	ldr	r3, [r7, #4]
    bac2:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
    bac6:	8c3b      	ldrh	r3, [r7, #32]
    bac8:	2200      	movs	r2, #0
    baca:	69f9      	ldr	r1, [r7, #28]
    bacc:	f7f7 fe10 	bl	36f0 <bb_attach>
    settings->base.maxInfoRX = settings->base.maxInfoTX = frameSize;
    bad0:	687b      	ldr	r3, [r7, #4]
    bad2:	883a      	ldrh	r2, [r7, #0]
    bad4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
    bade:	687b      	ldr	r3, [r7, #4]
    bae0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    settings->base.maxServerPDUSize = pduSize;
    bae4:	687b      	ldr	r3, [r7, #4]
    bae6:	8a3a      	ldrh	r2, [r7, #16]
    bae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    settings->base.server = 1;
    baec:	687b      	ldr	r3, [r7, #4]
    baee:	2201      	movs	r2, #1
    baf0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    settings->initialized = 0;
    baf4:	687b      	ldr	r3, [r7, #4]
    baf6:	2200      	movs	r2, #0
    baf8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    trans_init(&settings->transaction);
    bafc:	687b      	ldr	r3, [r7, #4]
    bafe:	f503 738a 	add.w	r3, r3, #276	; 0x114
    bb02:	4618      	mov	r0, r3
    bb04:	f000 fa3a 	bl	bf7c <trans_init>
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    settings->wrapper = NULL;
    bb08:	687b      	ldr	r3, [r7, #4]
    bb0a:	2200      	movs	r2, #0
    bb0c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
#endif // DLMS_IGNORE_TCP_UDP_SETUP
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    settings->hdlc = NULL;
    bb10:	687b      	ldr	r3, [r7, #4]
    bb12:	2200      	movs	r2, #0
    bb14:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif //DLMS_IGNORE_IEC_HDLC_SETUP

    settings->dataReceived = 0;
    bb18:	687b      	ldr	r3, [r7, #4]
    bb1a:	2200      	movs	r2, #0
    bb1c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    settings->frameReceived = 0;
    bb20:	687b      	ldr	r3, [r7, #4]
    bb22:	2200      	movs	r2, #0
    bb24:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    resetFrameSequence(&settings->base);
    bb28:	687b      	ldr	r3, [r7, #4]
    bb2a:	4618      	mov	r0, r3
    bb2c:	f000 f8d2 	bl	bcd4 <resetFrameSequence>
}
    bb30:	bf00      	nop
    bb32:	3708      	adds	r7, #8
    bb34:	46bd      	mov	sp, r7
    bb36:	bd80      	pop	{r7, pc}

0000bb38 <cl_init>:
    int clientAddress,
    int serverAddress,
    DLMS_AUTHENTICATION authentication,
    const char* password,
    DLMS_INTERFACE_TYPE interfaceType)
{
    bb38:	b580      	push	{r7, lr}
    bb3a:	b084      	sub	sp, #16
    bb3c:	af00      	add	r7, sp, #0
    bb3e:	60f8      	str	r0, [r7, #12]
    bb40:	607a      	str	r2, [r7, #4]
    bb42:	603b      	str	r3, [r7, #0]
    bb44:	460b      	mov	r3, r1
    bb46:	72fb      	strb	r3, [r7, #11]
    settings->qualityOfService = 0;
    bb48:	68fb      	ldr	r3, [r7, #12]
    bb4a:	2200      	movs	r2, #0
    bb4c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    settings->protocolVersion = NULL;
    bb50:	68fb      	ldr	r3, [r7, #12]
    bb52:	2200      	movs	r2, #0
    bb54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    settings->preEstablishedSystemTitle = NULL;
    bb58:	68fb      	ldr	r3, [r7, #12]
    bb5a:	2200      	movs	r2, #0
    bb5c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    settings->blockIndex = 1;
    bb60:	68fb      	ldr	r3, [r7, #12]
    bb62:	2201      	movs	r2, #1
    bb64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    settings->clientAddress = (unsigned short)clientAddress;
    bb68:	687b      	ldr	r3, [r7, #4]
    bb6a:	b29a      	uxth	r2, r3
    bb6c:	68fb      	ldr	r3, [r7, #12]
    bb6e:	865a      	strh	r2, [r3, #50]	; 0x32
    settings->serverAddress = (unsigned short)serverAddress;
    bb70:	683b      	ldr	r3, [r7, #0]
    bb72:	b29a      	uxth	r2, r3
    bb74:	68fb      	ldr	r3, [r7, #12]
    bb76:	869a      	strh	r2, [r3, #52]	; 0x34
    settings->dlmsVersionNumber = 6;
    bb78:	68fb      	ldr	r3, [r7, #12]
    bb7a:	2206      	movs	r2, #6
    bb7c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    settings->useLogicalNameReferencing = useLogicalNameReferencing;
    bb80:	68fb      	ldr	r3, [r7, #12]
    bb82:	7afa      	ldrb	r2, [r7, #11]
    bb84:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    settings->interfaceType = interfaceType;
    bb88:	68fb      	ldr	r3, [r7, #12]
    bb8a:	f897 2020 	ldrb.w	r2, [r7, #32]
    bb8e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    settings->authentication = authentication;
    bb92:	68fb      	ldr	r3, [r7, #12]
    bb94:	7e3a      	ldrb	r2, [r7, #24]
    bb96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    bb_init(&settings->password);
    bb9a:	68fb      	ldr	r3, [r7, #12]
    bb9c:	333c      	adds	r3, #60	; 0x3c
    bb9e:	4618      	mov	r0, r3
    bba0:	f7f7 f8a2 	bl	2ce8 <bb_init>
    bb_addString(&settings->password, password);
    bba4:	68fb      	ldr	r3, [r7, #12]
    bba6:	333c      	adds	r3, #60	; 0x3c
    bba8:	69f9      	ldr	r1, [r7, #28]
    bbaa:	4618      	mov	r0, r3
    bbac:	f7f7 fd6e 	bl	368c <bb_addString>
    bb_init(&settings->sourceSystemTitle);
    bbb0:	68fb      	ldr	r3, [r7, #12]
    bbb2:	331c      	adds	r3, #28
    bbb4:	4618      	mov	r0, r3
    bbb6:	f7f7 f897 	bl	2ce8 <bb_init>
    bb_init(&settings->kek);
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	3348      	adds	r3, #72	; 0x48
    bbbe:	4618      	mov	r0, r3
    bbc0:	f7f7 f892 	bl	2ce8 <bb_init>
    settings->maxServerPDUSize = 1024;
    bbc4:	68fb      	ldr	r3, [r7, #12]
    bbc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bbca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    settings->maxPduSize = 0xFFFF;
    bbce:	68fb      	ldr	r3, [r7, #12]
    bbd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bbd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    settings->position = settings->index = settings->count = 0;
    bbd8:	68fb      	ldr	r3, [r7, #12]
    bbda:	2200      	movs	r2, #0
    bbdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    bbe0:	68fb      	ldr	r3, [r7, #12]
    bbe2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    bbe6:	68fb      	ldr	r3, [r7, #12]
    bbe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    bbec:	68fb      	ldr	r3, [r7, #12]
    bbee:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
    bbf2:	68fb      	ldr	r3, [r7, #12]
    bbf4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    settings->server = 0;
    bbf8:	68fb      	ldr	r3, [r7, #12]
    bbfa:	2200      	movs	r2, #0
    bbfc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    if (useLogicalNameReferencing)
    bc00:	7afb      	ldrb	r3, [r7, #11]
    bc02:	2b00      	cmp	r3, #0
    bc04:	d004      	beq.n	bc10 <cl_init+0xd8>
    {
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_BLOCK_TRANSFER_WITH_ACTION |
    bc06:	68fb      	ldr	r3, [r7, #12]
    bc08:	f641 621d 	movw	r2, #7709	; 0x1e1d
    bc0c:	665a      	str	r2, [r3, #100]	; 0x64
    bc0e:	e002      	b.n	bc16 <cl_init+0xde>
            DLMS_CONFORMANCE_ACTION | DLMS_CONFORMANCE_MULTIPLE_REFERENCES |
            DLMS_CONFORMANCE_GET);
    }
    else
    {
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    bc10:	68fb      	ldr	r3, [r7, #12]
    bc12:	4a28      	ldr	r2, [pc, #160]	; (bcb4 <cl_init+0x17c>)
    bc14:	665a      	str	r2, [r3, #100]	; 0x64
            DLMS_CONFORMANCE_READ | DLMS_CONFORMANCE_UN_CONFIRMED_WRITE |
            DLMS_CONFORMANCE_WRITE | DLMS_CONFORMANCE_PARAMETERIZED_ACCESS |
            DLMS_CONFORMANCE_MULTIPLE_REFERENCES);
    }
    settings->longInvokeID = 0;
    bc16:	68fb      	ldr	r3, [r7, #12]
    bc18:	2200      	movs	r2, #0
    bc1a:	62da      	str	r2, [r3, #44]	; 0x2c
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    bc1c:	68fb      	ldr	r3, [r7, #12]
    bc1e:	2280      	movs	r2, #128	; 0x80
    bc20:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    bc24:	68fb      	ldr	r3, [r7, #12]
    bc26:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
    bc2a:	68fb      	ldr	r3, [r7, #12]
    bc2c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    settings->windowSizeTX = settings->windowSizeRX = 1;
    bc30:	68fb      	ldr	r3, [r7, #12]
    bc32:	2201      	movs	r2, #1
    bc34:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    bc38:	68fb      	ldr	r3, [r7, #12]
    bc3a:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    bc3e:	68fb      	ldr	r3, [r7, #12]
    bc40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    bc44:	68fb      	ldr	r3, [r7, #12]
    bc46:	2200      	movs	r2, #0
    bc48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    oa_init(&settings->objects);
    bc4c:	68fb      	ldr	r3, [r7, #12]
    bc4e:	3374      	adds	r3, #116	; 0x74
    bc50:	4618      	mov	r0, r3
    bc52:	f016 f97f 	bl	21f54 <oa_init>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    bc56:	68fb      	ldr	r3, [r7, #12]
    bc58:	2200      	movs	r2, #0
    bc5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    settings->customChallenges = 0;
    bc5e:	68fb      	ldr	r3, [r7, #12]
    bc60:	2200      	movs	r2, #0
    bc62:	701a      	strb	r2, [r3, #0]
    settings->invokeID = 1;
    bc64:	68fb      	ldr	r3, [r7, #12]
    bc66:	2201      	movs	r2, #1
    bc68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    bb_init(&settings->ctoSChallenge);
    bc6c:	68fb      	ldr	r3, [r7, #12]
    bc6e:	3304      	adds	r3, #4
    bc70:	4618      	mov	r0, r3
    bc72:	f7f7 f839 	bl	2ce8 <bb_init>
    bb_init(&settings->stoCChallenge);
    bc76:	68fb      	ldr	r3, [r7, #12]
    bc78:	3310      	adds	r3, #16
    bc7a:	4618      	mov	r0, r3
    bc7c:	f7f7 f834 	bl	2ce8 <bb_init>
    settings->priority = DLMS_PRIORITY_HIGH;
    bc80:	68fb      	ldr	r3, [r7, #12]
    bc82:	2201      	movs	r2, #1
    bc84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    settings->serviceClass = DLMS_SERVICE_CLASS_UN_CONFIRMED;
    bc88:	68fb      	ldr	r3, [r7, #12]
    bc8a:	2200      	movs	r2, #0
    bc8c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifndef DLMS_IGNORE_HIGH_GMAC
    cip_init(&settings->cipher);
    bc90:	68fb      	ldr	r3, [r7, #12]
    bc92:	3388      	adds	r3, #136	; 0x88
    bc94:	4618      	mov	r0, r3
    bc96:	f7f8 f9db 	bl	4050 <cip_init>
#endif //DLMS_IGNORE_HIGH_GMAC
    settings->userId = -1;
    bc9a:	68fb      	ldr	r3, [r7, #12]
    bc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bca0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    resetFrameSequence(settings);
    bca4:	68f8      	ldr	r0, [r7, #12]
    bca6:	f000 f815 	bl	bcd4 <resetFrameSequence>
}
    bcaa:	bf00      	nop
    bcac:	3710      	adds	r7, #16
    bcae:	46bd      	mov	sp, r7
    bcb0:	bd80      	pop	{r7, pc}
    bcb2:	bf00      	nop
    bcb4:	001c0320 	.word	0x001c0320

0000bcb8 <resetBlockIndex>:
    cl_clear(&settings->base);
}

void resetBlockIndex(
    dlmsSettings* settings)
{
    bcb8:	b480      	push	{r7}
    bcba:	b083      	sub	sp, #12
    bcbc:	af00      	add	r7, sp, #0
    bcbe:	6078      	str	r0, [r7, #4]
    settings->blockIndex = 1;
    bcc0:	687b      	ldr	r3, [r7, #4]
    bcc2:	2201      	movs	r2, #1
    bcc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    bcc8:	bf00      	nop
    bcca:	370c      	adds	r7, #12
    bccc:	46bd      	mov	sp, r7
    bcce:	bc80      	pop	{r7}
    bcd0:	4770      	bx	lr
    bcd2:	bf00      	nop

0000bcd4 <resetFrameSequence>:

void resetFrameSequence(
    dlmsSettings* settings)
{
    bcd4:	b480      	push	{r7}
    bcd6:	b083      	sub	sp, #12
    bcd8:	af00      	add	r7, sp, #0
    bcda:	6078      	str	r0, [r7, #4]
    if (settings->server)
    bcdc:	687b      	ldr	r3, [r7, #4]
    bcde:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    bce2:	2b00      	cmp	r3, #0
    bce4:	d008      	beq.n	bcf8 <resetFrameSequence+0x24>
    {
        settings->senderFrame = SERVER_START_SENDER_FRAME_SEQUENCE;
    bce6:	221e      	movs	r2, #30
    bce8:	687b      	ldr	r3, [r7, #4]
    bcea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        settings->receiverFrame = SERVER_START_RECEIVER_FRAME_SEQUENCE;
    bcee:	22fe      	movs	r2, #254	; 0xfe
    bcf0:	687b      	ldr	r3, [r7, #4]
    bcf2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    else
    {
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
        settings->receiverFrame = CLIENT_START_RCEIVER_FRAME_SEQUENCE;
    }
}
    bcf6:	e007      	b.n	bd08 <resetFrameSequence+0x34>
        settings->senderFrame = SERVER_START_SENDER_FRAME_SEQUENCE;
        settings->receiverFrame = SERVER_START_RECEIVER_FRAME_SEQUENCE;
    }
    else
    {
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
    bcf8:	22fe      	movs	r2, #254	; 0xfe
    bcfa:	687b      	ldr	r3, [r7, #4]
    bcfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        settings->receiverFrame = CLIENT_START_RCEIVER_FRAME_SEQUENCE;
    bd00:	220e      	movs	r2, #14
    bd02:	687b      	ldr	r3, [r7, #4]
    bd04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    }
}
    bd08:	bf00      	nop
    bd0a:	370c      	adds	r7, #12
    bd0c:	46bd      	mov	sp, r7
    bd0e:	bc80      	pop	{r7}
    bd10:	4770      	bx	lr
    bd12:	bf00      	nop

0000bd14 <increaseReceiverSequence>:

unsigned char increaseReceiverSequence(
    unsigned char value)
{
    bd14:	b480      	push	{r7}
    bd16:	b083      	sub	sp, #12
    bd18:	af00      	add	r7, sp, #0
    bd1a:	4603      	mov	r3, r0
    bd1c:	71fb      	strb	r3, [r7, #7]
    return ((value + 0x20) | 0x10 | (value & 0xE));
    bd1e:	79fb      	ldrb	r3, [r7, #7]
    bd20:	3320      	adds	r3, #32
    bd22:	b2db      	uxtb	r3, r3
    bd24:	b25b      	sxtb	r3, r3
    bd26:	f043 0310 	orr.w	r3, r3, #16
    bd2a:	b25a      	sxtb	r2, r3
    bd2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd30:	f003 030e 	and.w	r3, r3, #14
    bd34:	b25b      	sxtb	r3, r3
    bd36:	4313      	orrs	r3, r2
    bd38:	b25b      	sxtb	r3, r3
    bd3a:	b2db      	uxtb	r3, r3
}
    bd3c:	4618      	mov	r0, r3
    bd3e:	370c      	adds	r7, #12
    bd40:	46bd      	mov	sp, r7
    bd42:	bc80      	pop	{r7}
    bd44:	4770      	bx	lr
    bd46:	bf00      	nop

0000bd48 <increaseSendSequence>:
// @param value
//            Frame value.
// Increased sender frame sequence.
unsigned char increaseSendSequence(
    unsigned char value)
{
    bd48:	b480      	push	{r7}
    bd4a:	b083      	sub	sp, #12
    bd4c:	af00      	add	r7, sp, #0
    bd4e:	4603      	mov	r3, r0
    bd50:	71fb      	strb	r3, [r7, #7]
    return (unsigned char)((value & 0xF0) | ((value + 0x2) & 0xE));
    bd52:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bd56:	f023 030f 	bic.w	r3, r3, #15
    bd5a:	b25a      	sxtb	r2, r3
    bd5c:	79fb      	ldrb	r3, [r7, #7]
    bd5e:	3302      	adds	r3, #2
    bd60:	b2db      	uxtb	r3, r3
    bd62:	b25b      	sxtb	r3, r3
    bd64:	f003 030e 	and.w	r3, r3, #14
    bd68:	b25b      	sxtb	r3, r3
    bd6a:	4313      	orrs	r3, r2
    bd6c:	b25b      	sxtb	r3, r3
    bd6e:	b2db      	uxtb	r3, r3
}
    bd70:	4618      	mov	r0, r3
    bd72:	370c      	adds	r7, #12
    bd74:	46bd      	mov	sp, r7
    bd76:	bc80      	pop	{r7}
    bd78:	4770      	bx	lr
    bd7a:	bf00      	nop

0000bd7c <checkFrame>:

unsigned char checkFrame(
    dlmsSettings* settings,
    unsigned char frame)
{
    bd7c:	b580      	push	{r7, lr}
    bd7e:	b084      	sub	sp, #16
    bd80:	af00      	add	r7, sp, #0
    bd82:	6078      	str	r0, [r7, #4]
    bd84:	460b      	mov	r3, r1
    bd86:	70fb      	strb	r3, [r7, #3]
    //If notify
    if (frame == 0x13)
    bd88:	78fb      	ldrb	r3, [r7, #3]
    bd8a:	2b13      	cmp	r3, #19
    bd8c:	d101      	bne.n	bd92 <checkFrame+0x16>
    {
        return 1;
    bd8e:	2301      	movs	r3, #1
    bd90:	e07f      	b.n	be92 <checkFrame+0x116>
    }
    // If U frame.
    if ((frame & 0x3) == 3)
    bd92:	78fb      	ldrb	r3, [r7, #3]
    bd94:	f003 0303 	and.w	r3, r3, #3
    bd98:	2b03      	cmp	r3, #3
    bd9a:	d10a      	bne.n	bdb2 <checkFrame+0x36>
    {
        if (frame == 0x73 || frame == 0x93)
    bd9c:	78fb      	ldrb	r3, [r7, #3]
    bd9e:	2b73      	cmp	r3, #115	; 0x73
    bda0:	d002      	beq.n	bda8 <checkFrame+0x2c>
    bda2:	78fb      	ldrb	r3, [r7, #3]
    bda4:	2b93      	cmp	r3, #147	; 0x93
    bda6:	d102      	bne.n	bdae <checkFrame+0x32>
        {
            resetFrameSequence(settings);
    bda8:	6878      	ldr	r0, [r7, #4]
    bdaa:	f7ff ff93 	bl	bcd4 <resetFrameSequence>
        }
        return 1;
    bdae:	2301      	movs	r3, #1
    bdb0:	e06f      	b.n	be92 <checkFrame+0x116>
    }
    // If S -frame
    if ((frame & 0x3) == 1)
    bdb2:	78fb      	ldrb	r3, [r7, #3]
    bdb4:	f003 0303 	and.w	r3, r3, #3
    bdb8:	2b01      	cmp	r3, #1
    bdba:	d11e      	bne.n	bdfa <checkFrame+0x7e>
    {
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
    bdbc:	687b      	ldr	r3, [r7, #4]
    bdbe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    bdc2:	4618      	mov	r0, r3
    bdc4:	f7ff ffa6 	bl	bd14 <increaseReceiverSequence>
    bdc8:	4603      	mov	r3, r0
    bdca:	73fb      	strb	r3, [r7, #15]
        if ((frame & 0xE0) != (ch & 0xE0))
    bdcc:	78fa      	ldrb	r2, [r7, #3]
    bdce:	7bfb      	ldrb	r3, [r7, #15]
    bdd0:	4053      	eors	r3, r2
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d001      	beq.n	bde0 <checkFrame+0x64>
        {
            return 0;
    bddc:	2300      	movs	r3, #0
    bdde:	e058      	b.n	be92 <checkFrame+0x116>
        }
        settings->receiverFrame = increaseReceiverSequence(settings->receiverFrame);
    bde0:	687b      	ldr	r3, [r7, #4]
    bde2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    bde6:	4618      	mov	r0, r3
    bde8:	f7ff ff94 	bl	bd14 <increaseReceiverSequence>
    bdec:	4603      	mov	r3, r0
    bdee:	461a      	mov	r2, r3
    bdf0:	687b      	ldr	r3, [r7, #4]
    bdf2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        return 1;
    bdf6:	2301      	movs	r3, #1
    bdf8:	e04b      	b.n	be92 <checkFrame+0x116>
    }
    //Handle I-frame.
    unsigned char expected;
    if ((settings->senderFrame & 0x1) == 0)
    bdfa:	687b      	ldr	r3, [r7, #4]
    bdfc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    be00:	f003 0301 	and.w	r3, r3, #1
    be04:	2b00      	cmp	r3, #0
    be06:	d115      	bne.n	be34 <checkFrame+0xb8>
    {
        expected = increaseReceiverSequence(increaseSendSequence(settings->receiverFrame));
    be08:	687b      	ldr	r3, [r7, #4]
    be0a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    be0e:	4618      	mov	r0, r3
    be10:	f7ff ff9a 	bl	bd48 <increaseSendSequence>
    be14:	4603      	mov	r3, r0
    be16:	4618      	mov	r0, r3
    be18:	f7ff ff7c 	bl	bd14 <increaseReceiverSequence>
    be1c:	4603      	mov	r3, r0
    be1e:	73bb      	strb	r3, [r7, #14]
        if (frame == expected)
    be20:	78fa      	ldrb	r2, [r7, #3]
    be22:	7bbb      	ldrb	r3, [r7, #14]
    be24:	429a      	cmp	r2, r3
    be26:	d117      	bne.n	be58 <checkFrame+0xdc>
        {
            settings->receiverFrame = frame;
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	78fa      	ldrb	r2, [r7, #3]
    be2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            return 1;
    be30:	2301      	movs	r3, #1
    be32:	e02e      	b.n	be92 <checkFrame+0x116>
        }
    }
    //If answer for RR.
    else
    {
        expected = increaseSendSequence(settings->receiverFrame);
    be34:	687b      	ldr	r3, [r7, #4]
    be36:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    be3a:	4618      	mov	r0, r3
    be3c:	f7ff ff84 	bl	bd48 <increaseSendSequence>
    be40:	4603      	mov	r3, r0
    be42:	73bb      	strb	r3, [r7, #14]
        if (frame == expected)
    be44:	78fa      	ldrb	r2, [r7, #3]
    be46:	7bbb      	ldrb	r3, [r7, #14]
    be48:	429a      	cmp	r2, r3
    be4a:	d105      	bne.n	be58 <checkFrame+0xdc>
        {
            settings->receiverFrame = frame;
    be4c:	687b      	ldr	r3, [r7, #4]
    be4e:	78fa      	ldrb	r2, [r7, #3]
    be50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            return 1;
    be54:	2301      	movs	r3, #1
    be56:	e01c      	b.n	be92 <checkFrame+0x116>
        }
    }
    //Pre-established connections needs this.
    if ((!settings->server && settings->receiverFrame == SERVER_START_RECEIVER_FRAME_SEQUENCE) ||
    be58:	687b      	ldr	r3, [r7, #4]
    be5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    be5e:	2b00      	cmp	r3, #0
    be60:	d105      	bne.n	be6e <checkFrame+0xf2>
    be62:	687b      	ldr	r3, [r7, #4]
    be64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    be68:	22fe      	movs	r2, #254	; 0xfe
    be6a:	4293      	cmp	r3, r2
    be6c:	d00a      	beq.n	be84 <checkFrame+0x108>
        (settings->server && settings->receiverFrame == CLIENT_START_RCEIVER_FRAME_SEQUENCE))
    be6e:	687b      	ldr	r3, [r7, #4]
    be70:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
            settings->receiverFrame = frame;
            return 1;
        }
    }
    //Pre-established connections needs this.
    if ((!settings->server && settings->receiverFrame == SERVER_START_RECEIVER_FRAME_SEQUENCE) ||
    be74:	2b00      	cmp	r3, #0
    be76:	d00b      	beq.n	be90 <checkFrame+0x114>
        (settings->server && settings->receiverFrame == CLIENT_START_RCEIVER_FRAME_SEQUENCE))
    be78:	687b      	ldr	r3, [r7, #4]
    be7a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    be7e:	220e      	movs	r2, #14
    be80:	4293      	cmp	r3, r2
    be82:	d105      	bne.n	be90 <checkFrame+0x114>
    {
        settings->receiverFrame = frame;
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	78fa      	ldrb	r2, [r7, #3]
    be88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        return 1;
    be8c:	2301      	movs	r3, #1
    be8e:	e000      	b.n	be92 <checkFrame+0x116>
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
    printf("Invalid frame %X. Expected %X.\r\n", frame, expected);
#endif
    return 0;
    be90:	2300      	movs	r3, #0
}
    be92:	4618      	mov	r0, r3
    be94:	3710      	adds	r7, #16
    be96:	46bd      	mov	sp, r7
    be98:	bd80      	pop	{r7, pc}
    be9a:	bf00      	nop

0000be9c <getNextSend>:

unsigned char getNextSend(
    dlmsSettings* settings, unsigned char first)
{
    be9c:	b580      	push	{r7, lr}
    be9e:	b082      	sub	sp, #8
    bea0:	af00      	add	r7, sp, #0
    bea2:	6078      	str	r0, [r7, #4]
    bea4:	460b      	mov	r3, r1
    bea6:	70fb      	strb	r3, [r7, #3]
    if (first)
    bea8:	78fb      	ldrb	r3, [r7, #3]
    beaa:	2b00      	cmp	r3, #0
    beac:	d00f      	beq.n	bece <getNextSend+0x32>
    {
        settings->senderFrame = increaseReceiverSequence(increaseSendSequence((unsigned char)settings->senderFrame));
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    beb4:	4618      	mov	r0, r3
    beb6:	f7ff ff47 	bl	bd48 <increaseSendSequence>
    beba:	4603      	mov	r3, r0
    bebc:	4618      	mov	r0, r3
    bebe:	f7ff ff29 	bl	bd14 <increaseReceiverSequence>
    bec2:	4603      	mov	r3, r0
    bec4:	461a      	mov	r2, r3
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    becc:	e00a      	b.n	bee4 <getNextSend+0x48>
    }
    else
    {
        settings->senderFrame = increaseSendSequence((unsigned char)settings->senderFrame);
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    bed4:	4618      	mov	r0, r3
    bed6:	f7ff ff37 	bl	bd48 <increaseSendSequence>
    beda:	4603      	mov	r3, r0
    bedc:	461a      	mov	r2, r3
    bede:	687b      	ldr	r3, [r7, #4]
    bee0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
    return (unsigned char)settings->senderFrame;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
}
    beea:	4618      	mov	r0, r3
    beec:	3708      	adds	r7, #8
    beee:	46bd      	mov	sp, r7
    bef0:	bd80      	pop	{r7, pc}
    bef2:	bf00      	nop

0000bef4 <getReceiverReady>:

unsigned char getReceiverReady(
    dlmsSettings* settings)
{
    bef4:	b580      	push	{r7, lr}
    bef6:	b082      	sub	sp, #8
    bef8:	af00      	add	r7, sp, #0
    befa:	6078      	str	r0, [r7, #4]
    settings->senderFrame = increaseReceiverSequence((unsigned char)(settings->senderFrame | 1));
    befc:	687b      	ldr	r3, [r7, #4]
    befe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    bf02:	f043 0301 	orr.w	r3, r3, #1
    bf06:	b2db      	uxtb	r3, r3
    bf08:	4618      	mov	r0, r3
    bf0a:	f7ff ff03 	bl	bd14 <increaseReceiverSequence>
    bf0e:	4603      	mov	r3, r0
    bf10:	461a      	mov	r2, r3
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    return (unsigned char)(settings->senderFrame & 0xF1);
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    bf1e:	f023 030e 	bic.w	r3, r3, #14
    bf22:	b2db      	uxtb	r3, r3
}
    bf24:	4618      	mov	r0, r3
    bf26:	3708      	adds	r7, #8
    bf28:	46bd      	mov	sp, r7
    bf2a:	bd80      	pop	{r7, pc}

0000bf2c <getKeepAlive>:

unsigned char getKeepAlive(
    dlmsSettings* settings)
{
    bf2c:	b480      	push	{r7}
    bf2e:	b083      	sub	sp, #12
    bf30:	af00      	add	r7, sp, #0
    bf32:	6078      	str	r0, [r7, #4]
    settings->senderFrame = (unsigned char)(settings->senderFrame | 1);
    bf34:	687b      	ldr	r3, [r7, #4]
    bf36:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    bf3a:	f043 0301 	orr.w	r3, r3, #1
    bf3e:	b2da      	uxtb	r2, r3
    bf40:	687b      	ldr	r3, [r7, #4]
    bf42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    return (unsigned char)(settings->senderFrame & 0xF1);
    bf46:	687b      	ldr	r3, [r7, #4]
    bf48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    bf4c:	f023 030e 	bic.w	r3, r3, #14
    bf50:	b2db      	uxtb	r3, r3
}
    bf52:	4618      	mov	r0, r3
    bf54:	370c      	adds	r7, #12
    bf56:	46bd      	mov	sp, r7
    bf58:	bc80      	pop	{r7}
    bf5a:	4770      	bx	lr

0000bf5c <isCiphered>:

#ifndef DLMS_IGNORE_HIGH_GMAC
unsigned char isCiphered(
    ciphering* cipher)
{
    bf5c:	b480      	push	{r7}
    bf5e:	b083      	sub	sp, #12
    bf60:	af00      	add	r7, sp, #0
    bf62:	6078      	str	r0, [r7, #4]
    return cipher->security != DLMS_SECURITY_NONE;
    bf64:	687b      	ldr	r3, [r7, #4]
    bf66:	781b      	ldrb	r3, [r3, #0]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	bf14      	ite	ne
    bf6c:	2301      	movne	r3, #1
    bf6e:	2300      	moveq	r3, #0
    bf70:	b2db      	uxtb	r3, r3
}
    bf72:	4618      	mov	r0, r3
    bf74:	370c      	adds	r7, #12
    bf76:	46bd      	mov	sp, r7
    bf78:	bc80      	pop	{r7}
    bf7a:	4770      	bx	lr

0000bf7c <trans_init>:
#endif //DLMS_IGNORE_HIGH_GMAC

void trans_init(gxLongTransaction* trans)
{
    bf7c:	b580      	push	{r7, lr}
    bf7e:	b082      	sub	sp, #8
    bf80:	af00      	add	r7, sp, #0
    bf82:	6078      	str	r0, [r7, #4]
    trans->command = DLMS_COMMAND_NONE;
    bf84:	687b      	ldr	r3, [r7, #4]
    bf86:	2200      	movs	r2, #0
    bf88:	701a      	strb	r2, [r3, #0]
    bb_init(&trans->data);
    bf8a:	687b      	ldr	r3, [r7, #4]
    bf8c:	330c      	adds	r3, #12
    bf8e:	4618      	mov	r0, r3
    bf90:	f7f6 feaa 	bl	2ce8 <bb_init>
    vec_init(&trans->targets);
    bf94:	687b      	ldr	r3, [r7, #4]
    bf96:	3304      	adds	r3, #4
    bf98:	4618      	mov	r0, r3
    bf9a:	f015 faf1 	bl	21580 <vec_init>
}
    bf9e:	bf00      	nop
    bfa0:	3708      	adds	r7, #8
    bfa2:	46bd      	mov	sp, r7
    bfa4:	bd80      	pop	{r7, pc}
    bfa6:	bf00      	nop

0000bfa8 <trans_clear>:

void trans_clear(gxLongTransaction* trans)
{
    bfa8:	b580      	push	{r7, lr}
    bfaa:	b082      	sub	sp, #8
    bfac:	af00      	add	r7, sp, #0
    bfae:	6078      	str	r0, [r7, #4]
    trans->command = DLMS_COMMAND_NONE;
    bfb0:	687b      	ldr	r3, [r7, #4]
    bfb2:	2200      	movs	r2, #0
    bfb4:	701a      	strb	r2, [r3, #0]
    bb_clear(&trans->data);
    bfb6:	687b      	ldr	r3, [r7, #4]
    bfb8:	330c      	adds	r3, #12
    bfba:	4618      	mov	r0, r3
    bfbc:	f7f7 fbd2 	bl	3764 <bb_clear>
    vec_clear(&trans->targets);
    bfc0:	687b      	ldr	r3, [r7, #4]
    bfc2:	3304      	adds	r3, #4
    bfc4:	4618      	mov	r0, r3
    bfc6:	f015 fb4d 	bl	21664 <vec_clear>
}
    bfca:	bf00      	nop
    bfcc:	3708      	adds	r7, #8
    bfce:	46bd      	mov	sp, r7
    bfd0:	bd80      	pop	{r7, pc}
    bfd2:	bf00      	nop

0000bfd4 <updateInvokeId>:

void updateInvokeId(
    dlmsServerSettings* settings,
    unsigned char value)
{
    bfd4:	b480      	push	{r7}
    bfd6:	b083      	sub	sp, #12
    bfd8:	af00      	add	r7, sp, #0
    bfda:	6078      	str	r0, [r7, #4]
    bfdc:	460b      	mov	r3, r1
    bfde:	70fb      	strb	r3, [r7, #3]
    if ((value & 0x80) != 0) {
    bfe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	da04      	bge.n	bff2 <updateInvokeId+0x1e>
        settings->base.priority = DLMS_PRIORITY_HIGH;
    bfe8:	687b      	ldr	r3, [r7, #4]
    bfea:	2201      	movs	r2, #1
    bfec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    bff0:	e003      	b.n	bffa <updateInvokeId+0x26>
    }
    else {
        settings->base.priority = DLMS_PRIORITY_NORMAL;
    bff2:	687b      	ldr	r3, [r7, #4]
    bff4:	2200      	movs	r2, #0
    bff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
    if ((value & 0x40) != 0) {
    bffa:	78fb      	ldrb	r3, [r7, #3]
    bffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c000:	2b00      	cmp	r3, #0
    c002:	d004      	beq.n	c00e <updateInvokeId+0x3a>
        settings->base.serviceClass = DLMS_SERVICE_CLASS_CONFIRMED;
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	2201      	movs	r2, #1
    c008:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    c00c:	e003      	b.n	c016 <updateInvokeId+0x42>
    }
    else {
        settings->base.serviceClass = DLMS_SERVICE_CLASS_UN_CONFIRMED;
    c00e:	687b      	ldr	r3, [r7, #4]
    c010:	2200      	movs	r2, #0
    c012:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    }
    settings->base.invokeID = (unsigned char)(value & 0xF);
    c016:	78fb      	ldrb	r3, [r7, #3]
    c018:	f003 030f 	and.w	r3, r3, #15
    c01c:	b2da      	uxtb	r2, r3
    c01e:	687b      	ldr	r3, [r7, #4]
    c020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
    c024:	bf00      	nop
    c026:	370c      	adds	r7, #12
    c028:	46bd      	mov	sp, r7
    c02a:	bc80      	pop	{r7}
    c02c:	4770      	bx	lr
    c02e:	bf00      	nop

0000c030 <getSBoxValue>:
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };
#endif

static unsigned char getSBoxValue(unsigned char num)
{
    c030:	b480      	push	{r7}
    c032:	b083      	sub	sp, #12
    c034:	af00      	add	r7, sp, #0
    c036:	4603      	mov	r3, r0
    c038:	71fb      	strb	r3, [r7, #7]
    return sbox[num];
    c03a:	79fb      	ldrb	r3, [r7, #7]
    c03c:	4a03      	ldr	r2, [pc, #12]	; (c04c <getSBoxValue+0x1c>)
    c03e:	5cd3      	ldrb	r3, [r2, r3]
}
    c040:	4618      	mov	r0, r3
    c042:	370c      	adds	r7, #12
    c044:	46bd      	mov	sp, r7
    c046:	bc80      	pop	{r7}
    c048:	4770      	bx	lr
    c04a:	bf00      	nop
    c04c:	0002ccf0 	.word	0x0002ccf0

0000c050 <KeyExpansion>:
    return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(void)
{
    c050:	b580      	push	{r7, lr}
    c052:	b084      	sub	sp, #16
    c054:	af00      	add	r7, sp, #0
    unsigned long i;
    // Used for the column/row operations
    unsigned char tempa[4];

    // The first round key is the key itself.
    for (i = 0; i < Nk; ++i)
    c056:	2300      	movs	r3, #0
    c058:	60fb      	str	r3, [r7, #12]
    c05a:	e030      	b.n	c0be <KeyExpansion+0x6e>
    {
        RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
    c05c:	68fb      	ldr	r3, [r7, #12]
    c05e:	009b      	lsls	r3, r3, #2
    c060:	4a66      	ldr	r2, [pc, #408]	; (c1fc <KeyExpansion+0x1ac>)
    c062:	6811      	ldr	r1, [r2, #0]
    c064:	68fa      	ldr	r2, [r7, #12]
    c066:	0092      	lsls	r2, r2, #2
    c068:	440a      	add	r2, r1
    c06a:	7811      	ldrb	r1, [r2, #0]
    c06c:	4a64      	ldr	r2, [pc, #400]	; (c200 <KeyExpansion+0x1b0>)
    c06e:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
    c070:	68fb      	ldr	r3, [r7, #12]
    c072:	009b      	lsls	r3, r3, #2
    c074:	3301      	adds	r3, #1
    c076:	4a61      	ldr	r2, [pc, #388]	; (c1fc <KeyExpansion+0x1ac>)
    c078:	6811      	ldr	r1, [r2, #0]
    c07a:	68fa      	ldr	r2, [r7, #12]
    c07c:	0092      	lsls	r2, r2, #2
    c07e:	3201      	adds	r2, #1
    c080:	440a      	add	r2, r1
    c082:	7811      	ldrb	r1, [r2, #0]
    c084:	4a5e      	ldr	r2, [pc, #376]	; (c200 <KeyExpansion+0x1b0>)
    c086:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    c088:	68fb      	ldr	r3, [r7, #12]
    c08a:	009b      	lsls	r3, r3, #2
    c08c:	3302      	adds	r3, #2
    c08e:	4a5b      	ldr	r2, [pc, #364]	; (c1fc <KeyExpansion+0x1ac>)
    c090:	6811      	ldr	r1, [r2, #0]
    c092:	68fa      	ldr	r2, [r7, #12]
    c094:	0092      	lsls	r2, r2, #2
    c096:	3202      	adds	r2, #2
    c098:	440a      	add	r2, r1
    c09a:	7811      	ldrb	r1, [r2, #0]
    c09c:	4a58      	ldr	r2, [pc, #352]	; (c200 <KeyExpansion+0x1b0>)
    c09e:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	009b      	lsls	r3, r3, #2
    c0a4:	3303      	adds	r3, #3
    c0a6:	4a55      	ldr	r2, [pc, #340]	; (c1fc <KeyExpansion+0x1ac>)
    c0a8:	6811      	ldr	r1, [r2, #0]
    c0aa:	68fa      	ldr	r2, [r7, #12]
    c0ac:	0092      	lsls	r2, r2, #2
    c0ae:	3203      	adds	r2, #3
    c0b0:	440a      	add	r2, r1
    c0b2:	7811      	ldrb	r1, [r2, #0]
    c0b4:	4a52      	ldr	r2, [pc, #328]	; (c200 <KeyExpansion+0x1b0>)
    c0b6:	54d1      	strb	r1, [r2, r3]
    unsigned long i;
    // Used for the column/row operations
    unsigned char tempa[4];

    // The first round key is the key itself.
    for (i = 0; i < Nk; ++i)
    c0b8:	68fb      	ldr	r3, [r7, #12]
    c0ba:	3301      	adds	r3, #1
    c0bc:	60fb      	str	r3, [r7, #12]
    c0be:	68fb      	ldr	r3, [r7, #12]
    c0c0:	2b03      	cmp	r3, #3
    c0c2:	d9cb      	bls.n	c05c <KeyExpansion+0xc>
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    }

    // All other round keys are found from the previous round keys.
    //i == Nk
    for (; i < Nb * (Nr + 1); ++i)
    c0c4:	e092      	b.n	c1ec <KeyExpansion+0x19c>
    {
        {
            tempa[0] = RoundKey[(i - 1) * 4 + 0];
    c0c6:	68fb      	ldr	r3, [r7, #12]
    c0c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c0cc:	3b01      	subs	r3, #1
    c0ce:	009b      	lsls	r3, r3, #2
    c0d0:	4a4b      	ldr	r2, [pc, #300]	; (c200 <KeyExpansion+0x1b0>)
    c0d2:	5cd3      	ldrb	r3, [r2, r3]
    c0d4:	713b      	strb	r3, [r7, #4]
            tempa[1] = RoundKey[(i - 1) * 4 + 1];
    c0d6:	68fb      	ldr	r3, [r7, #12]
    c0d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c0dc:	3b01      	subs	r3, #1
    c0de:	009b      	lsls	r3, r3, #2
    c0e0:	3301      	adds	r3, #1
    c0e2:	4a47      	ldr	r2, [pc, #284]	; (c200 <KeyExpansion+0x1b0>)
    c0e4:	5cd3      	ldrb	r3, [r2, r3]
    c0e6:	717b      	strb	r3, [r7, #5]
            tempa[2] = RoundKey[(i - 1) * 4 + 2];
    c0e8:	68fb      	ldr	r3, [r7, #12]
    c0ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c0ee:	3b01      	subs	r3, #1
    c0f0:	009b      	lsls	r3, r3, #2
    c0f2:	3302      	adds	r3, #2
    c0f4:	4a42      	ldr	r2, [pc, #264]	; (c200 <KeyExpansion+0x1b0>)
    c0f6:	5cd3      	ldrb	r3, [r2, r3]
    c0f8:	71bb      	strb	r3, [r7, #6]
            tempa[3] = RoundKey[(i - 1) * 4 + 3];
    c0fa:	68fb      	ldr	r3, [r7, #12]
    c0fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c100:	3b01      	subs	r3, #1
    c102:	009b      	lsls	r3, r3, #2
    c104:	3303      	adds	r3, #3
    c106:	4a3e      	ldr	r2, [pc, #248]	; (c200 <KeyExpansion+0x1b0>)
    c108:	5cd3      	ldrb	r3, [r2, r3]
    c10a:	71fb      	strb	r3, [r7, #7]
        }

        if (i % Nk == 0)
    c10c:	68fb      	ldr	r3, [r7, #12]
    c10e:	f003 0303 	and.w	r3, r3, #3
    c112:	2b00      	cmp	r3, #0
    c114:	d129      	bne.n	c16a <KeyExpansion+0x11a>
            // This function shifts the 4 bytes in a word to the left once.
            // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

            // Function RotWord()
            {
                k = tempa[0];
    c116:	793b      	ldrb	r3, [r7, #4]
    c118:	72fb      	strb	r3, [r7, #11]
                tempa[0] = tempa[1];
    c11a:	797b      	ldrb	r3, [r7, #5]
    c11c:	713b      	strb	r3, [r7, #4]
                tempa[1] = tempa[2];
    c11e:	79bb      	ldrb	r3, [r7, #6]
    c120:	717b      	strb	r3, [r7, #5]
                tempa[2] = tempa[3];
    c122:	79fb      	ldrb	r3, [r7, #7]
    c124:	71bb      	strb	r3, [r7, #6]
                tempa[3] = k;
    c126:	7afb      	ldrb	r3, [r7, #11]
    c128:	71fb      	strb	r3, [r7, #7]
            // SubWord() is a function that takes a four-byte input word and
            // applies the S-box to each of the four bytes to produce an output word.

            // Function Subword()
            {
                tempa[0] = getSBoxValue(tempa[0]);
    c12a:	793b      	ldrb	r3, [r7, #4]
    c12c:	4618      	mov	r0, r3
    c12e:	f7ff ff7f 	bl	c030 <getSBoxValue>
    c132:	4603      	mov	r3, r0
    c134:	713b      	strb	r3, [r7, #4]
                tempa[1] = getSBoxValue(tempa[1]);
    c136:	797b      	ldrb	r3, [r7, #5]
    c138:	4618      	mov	r0, r3
    c13a:	f7ff ff79 	bl	c030 <getSBoxValue>
    c13e:	4603      	mov	r3, r0
    c140:	717b      	strb	r3, [r7, #5]
                tempa[2] = getSBoxValue(tempa[2]);
    c142:	79bb      	ldrb	r3, [r7, #6]
    c144:	4618      	mov	r0, r3
    c146:	f7ff ff73 	bl	c030 <getSBoxValue>
    c14a:	4603      	mov	r3, r0
    c14c:	71bb      	strb	r3, [r7, #6]
                tempa[3] = getSBoxValue(tempa[3]);
    c14e:	79fb      	ldrb	r3, [r7, #7]
    c150:	4618      	mov	r0, r3
    c152:	f7ff ff6d 	bl	c030 <getSBoxValue>
    c156:	4603      	mov	r3, r0
    c158:	71fb      	strb	r3, [r7, #7]
            }

            tempa[0] = tempa[0] ^ Rcon[i / Nk];
    c15a:	793a      	ldrb	r2, [r7, #4]
    c15c:	68fb      	ldr	r3, [r7, #12]
    c15e:	089b      	lsrs	r3, r3, #2
    c160:	4928      	ldr	r1, [pc, #160]	; (c204 <KeyExpansion+0x1b4>)
    c162:	5ccb      	ldrb	r3, [r1, r3]
    c164:	4053      	eors	r3, r2
    c166:	b2db      	uxtb	r3, r3
    c168:	713b      	strb	r3, [r7, #4]
                tempa[2] = getSBoxValue(tempa[2]);
                tempa[3] = getSBoxValue(tempa[3]);
            }
        }
#endif
        RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
    c16a:	68fb      	ldr	r3, [r7, #12]
    c16c:	009a      	lsls	r2, r3, #2
    c16e:	68fb      	ldr	r3, [r7, #12]
    c170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c174:	3b04      	subs	r3, #4
    c176:	009b      	lsls	r3, r3, #2
    c178:	4921      	ldr	r1, [pc, #132]	; (c200 <KeyExpansion+0x1b0>)
    c17a:	5cc9      	ldrb	r1, [r1, r3]
    c17c:	793b      	ldrb	r3, [r7, #4]
    c17e:	404b      	eors	r3, r1
    c180:	b2d9      	uxtb	r1, r3
    c182:	4b1f      	ldr	r3, [pc, #124]	; (c200 <KeyExpansion+0x1b0>)
    c184:	5499      	strb	r1, [r3, r2]
        RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
    c186:	68fb      	ldr	r3, [r7, #12]
    c188:	009b      	lsls	r3, r3, #2
    c18a:	1c5a      	adds	r2, r3, #1
    c18c:	68fb      	ldr	r3, [r7, #12]
    c18e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c192:	3b04      	subs	r3, #4
    c194:	009b      	lsls	r3, r3, #2
    c196:	3301      	adds	r3, #1
    c198:	4919      	ldr	r1, [pc, #100]	; (c200 <KeyExpansion+0x1b0>)
    c19a:	5cc9      	ldrb	r1, [r1, r3]
    c19c:	797b      	ldrb	r3, [r7, #5]
    c19e:	404b      	eors	r3, r1
    c1a0:	b2d9      	uxtb	r1, r3
    c1a2:	4b17      	ldr	r3, [pc, #92]	; (c200 <KeyExpansion+0x1b0>)
    c1a4:	5499      	strb	r1, [r3, r2]
        RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
    c1a6:	68fb      	ldr	r3, [r7, #12]
    c1a8:	009b      	lsls	r3, r3, #2
    c1aa:	1c9a      	adds	r2, r3, #2
    c1ac:	68fb      	ldr	r3, [r7, #12]
    c1ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c1b2:	3b04      	subs	r3, #4
    c1b4:	009b      	lsls	r3, r3, #2
    c1b6:	3302      	adds	r3, #2
    c1b8:	4911      	ldr	r1, [pc, #68]	; (c200 <KeyExpansion+0x1b0>)
    c1ba:	5cc9      	ldrb	r1, [r1, r3]
    c1bc:	79bb      	ldrb	r3, [r7, #6]
    c1be:	404b      	eors	r3, r1
    c1c0:	b2d9      	uxtb	r1, r3
    c1c2:	4b0f      	ldr	r3, [pc, #60]	; (c200 <KeyExpansion+0x1b0>)
    c1c4:	5499      	strb	r1, [r3, r2]
        RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
    c1c6:	68fb      	ldr	r3, [r7, #12]
    c1c8:	009b      	lsls	r3, r3, #2
    c1ca:	1cda      	adds	r2, r3, #3
    c1cc:	68fb      	ldr	r3, [r7, #12]
    c1ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c1d2:	3b04      	subs	r3, #4
    c1d4:	009b      	lsls	r3, r3, #2
    c1d6:	3303      	adds	r3, #3
    c1d8:	4909      	ldr	r1, [pc, #36]	; (c200 <KeyExpansion+0x1b0>)
    c1da:	5cc9      	ldrb	r1, [r1, r3]
    c1dc:	79fb      	ldrb	r3, [r7, #7]
    c1de:	404b      	eors	r3, r1
    c1e0:	b2d9      	uxtb	r1, r3
    c1e2:	4b07      	ldr	r3, [pc, #28]	; (c200 <KeyExpansion+0x1b0>)
    c1e4:	5499      	strb	r1, [r3, r2]
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    }

    // All other round keys are found from the previous round keys.
    //i == Nk
    for (; i < Nb * (Nr + 1); ++i)
    c1e6:	68fb      	ldr	r3, [r7, #12]
    c1e8:	3301      	adds	r3, #1
    c1ea:	60fb      	str	r3, [r7, #12]
    c1ec:	68fb      	ldr	r3, [r7, #12]
    c1ee:	2b2b      	cmp	r3, #43	; 0x2b
    c1f0:	f67f af69 	bls.w	c0c6 <KeyExpansion+0x76>
        RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
        RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
        RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
        RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
    }
}
    c1f4:	bf00      	nop
    c1f6:	3710      	adds	r7, #16
    c1f8:	46bd      	mov	sp, r7
    c1fa:	bd80      	pop	{r7, pc}
    c1fc:	10000214 	.word	0x10000214
    c200:	10000164 	.word	0x10000164
    c204:	0002cdf0 	.word	0x0002cdf0

0000c208 <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(unsigned char round)
{
    c208:	b4b0      	push	{r4, r5, r7}
    c20a:	b085      	sub	sp, #20
    c20c:	af00      	add	r7, sp, #0
    c20e:	4603      	mov	r3, r0
    c210:	71fb      	strb	r3, [r7, #7]
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    c212:	2300      	movs	r3, #0
    c214:	73fb      	strb	r3, [r7, #15]
    c216:	e027      	b.n	c268 <AddRoundKey+0x60>
    {
        for (j = 0; j < 4; ++j)
    c218:	2300      	movs	r3, #0
    c21a:	73bb      	strb	r3, [r7, #14]
    c21c:	e01e      	b.n	c25c <AddRoundKey+0x54>
        {
            (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    c21e:	4b16      	ldr	r3, [pc, #88]	; (c278 <AddRoundKey+0x70>)
    c220:	6819      	ldr	r1, [r3, #0]
    c222:	7bfa      	ldrb	r2, [r7, #15]
    c224:	7bbb      	ldrb	r3, [r7, #14]
    c226:	4814      	ldr	r0, [pc, #80]	; (c278 <AddRoundKey+0x70>)
    c228:	6805      	ldr	r5, [r0, #0]
    c22a:	7bfc      	ldrb	r4, [r7, #15]
    c22c:	7bb8      	ldrb	r0, [r7, #14]
    c22e:	00a4      	lsls	r4, r4, #2
    c230:	442c      	add	r4, r5
    c232:	4420      	add	r0, r4
    c234:	7804      	ldrb	r4, [r0, #0]
    c236:	79f8      	ldrb	r0, [r7, #7]
    c238:	0085      	lsls	r5, r0, #2
    c23a:	7bf8      	ldrb	r0, [r7, #15]
    c23c:	4428      	add	r0, r5
    c23e:	0085      	lsls	r5, r0, #2
    c240:	7bb8      	ldrb	r0, [r7, #14]
    c242:	4428      	add	r0, r5
    c244:	4d0d      	ldr	r5, [pc, #52]	; (c27c <AddRoundKey+0x74>)
    c246:	5c28      	ldrb	r0, [r5, r0]
    c248:	4060      	eors	r0, r4
    c24a:	b2c0      	uxtb	r0, r0
    c24c:	0092      	lsls	r2, r2, #2
    c24e:	440a      	add	r2, r1
    c250:	4413      	add	r3, r2
    c252:	4602      	mov	r2, r0
    c254:	701a      	strb	r2, [r3, #0]
static void AddRoundKey(unsigned char round)
{
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
    c256:	7bbb      	ldrb	r3, [r7, #14]
    c258:	3301      	adds	r3, #1
    c25a:	73bb      	strb	r3, [r7, #14]
    c25c:	7bbb      	ldrb	r3, [r7, #14]
    c25e:	2b03      	cmp	r3, #3
    c260:	d9dd      	bls.n	c21e <AddRoundKey+0x16>
// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(unsigned char round)
{
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    c262:	7bfb      	ldrb	r3, [r7, #15]
    c264:	3301      	adds	r3, #1
    c266:	73fb      	strb	r3, [r7, #15]
    c268:	7bfb      	ldrb	r3, [r7, #15]
    c26a:	2b03      	cmp	r3, #3
    c26c:	d9d4      	bls.n	c218 <AddRoundKey+0x10>
        for (j = 0; j < 4; ++j)
        {
            (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
        }
    }
}
    c26e:	bf00      	nop
    c270:	3714      	adds	r7, #20
    c272:	46bd      	mov	sp, r7
    c274:	bcb0      	pop	{r4, r5, r7}
    c276:	4770      	bx	lr
    c278:	10000160 	.word	0x10000160
    c27c:	10000164 	.word	0x10000164

0000c280 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
    c280:	b5f0      	push	{r4, r5, r6, r7, lr}
    c282:	b083      	sub	sp, #12
    c284:	af00      	add	r7, sp, #0
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    c286:	2300      	movs	r3, #0
    c288:	71fb      	strb	r3, [r7, #7]
    c28a:	e020      	b.n	c2ce <SubBytes+0x4e>
    {
        for (j = 0; j < 4; ++j)
    c28c:	2300      	movs	r3, #0
    c28e:	71bb      	strb	r3, [r7, #6]
    c290:	e017      	b.n	c2c2 <SubBytes+0x42>
        {
            (*state)[j][i] = getSBoxValue((*state)[j][i]);
    c292:	4b12      	ldr	r3, [pc, #72]	; (c2dc <SubBytes+0x5c>)
    c294:	681d      	ldr	r5, [r3, #0]
    c296:	79be      	ldrb	r6, [r7, #6]
    c298:	79fc      	ldrb	r4, [r7, #7]
    c29a:	4b10      	ldr	r3, [pc, #64]	; (c2dc <SubBytes+0x5c>)
    c29c:	6819      	ldr	r1, [r3, #0]
    c29e:	79ba      	ldrb	r2, [r7, #6]
    c2a0:	79fb      	ldrb	r3, [r7, #7]
    c2a2:	0092      	lsls	r2, r2, #2
    c2a4:	440a      	add	r2, r1
    c2a6:	4413      	add	r3, r2
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	4618      	mov	r0, r3
    c2ac:	f7ff fec0 	bl	c030 <getSBoxValue>
    c2b0:	4603      	mov	r3, r0
    c2b2:	461a      	mov	r2, r3
    c2b4:	00b3      	lsls	r3, r6, #2
    c2b6:	442b      	add	r3, r5
    c2b8:	4423      	add	r3, r4
    c2ba:	701a      	strb	r2, [r3, #0]
static void SubBytes(void)
{
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
    c2bc:	79bb      	ldrb	r3, [r7, #6]
    c2be:	3301      	adds	r3, #1
    c2c0:	71bb      	strb	r3, [r7, #6]
    c2c2:	79bb      	ldrb	r3, [r7, #6]
    c2c4:	2b03      	cmp	r3, #3
    c2c6:	d9e4      	bls.n	c292 <SubBytes+0x12>
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
    unsigned char i, j;
    for (i = 0; i < 4; ++i)
    c2c8:	79fb      	ldrb	r3, [r7, #7]
    c2ca:	3301      	adds	r3, #1
    c2cc:	71fb      	strb	r3, [r7, #7]
    c2ce:	79fb      	ldrb	r3, [r7, #7]
    c2d0:	2b03      	cmp	r3, #3
    c2d2:	d9db      	bls.n	c28c <SubBytes+0xc>
        for (j = 0; j < 4; ++j)
        {
            (*state)[j][i] = getSBoxValue((*state)[j][i]);
        }
    }
}
    c2d4:	bf00      	nop
    c2d6:	370c      	adds	r7, #12
    c2d8:	46bd      	mov	sp, r7
    c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2dc:	10000160 	.word	0x10000160

0000c2e0 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(void)
{
    c2e0:	b480      	push	{r7}
    c2e2:	b083      	sub	sp, #12
    c2e4:	af00      	add	r7, sp, #0
    unsigned char temp;

    // Rotate first row 1 columns to left
    temp = (*state)[0][1];
    c2e6:	4b2a      	ldr	r3, [pc, #168]	; (c390 <ShiftRows+0xb0>)
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	785b      	ldrb	r3, [r3, #1]
    c2ec:	71fb      	strb	r3, [r7, #7]
    (*state)[0][1] = (*state)[1][1];
    c2ee:	4b28      	ldr	r3, [pc, #160]	; (c390 <ShiftRows+0xb0>)
    c2f0:	681b      	ldr	r3, [r3, #0]
    c2f2:	4a27      	ldr	r2, [pc, #156]	; (c390 <ShiftRows+0xb0>)
    c2f4:	6812      	ldr	r2, [r2, #0]
    c2f6:	7952      	ldrb	r2, [r2, #5]
    c2f8:	705a      	strb	r2, [r3, #1]
    (*state)[1][1] = (*state)[2][1];
    c2fa:	4b25      	ldr	r3, [pc, #148]	; (c390 <ShiftRows+0xb0>)
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	4a24      	ldr	r2, [pc, #144]	; (c390 <ShiftRows+0xb0>)
    c300:	6812      	ldr	r2, [r2, #0]
    c302:	7a52      	ldrb	r2, [r2, #9]
    c304:	715a      	strb	r2, [r3, #5]
    (*state)[2][1] = (*state)[3][1];
    c306:	4b22      	ldr	r3, [pc, #136]	; (c390 <ShiftRows+0xb0>)
    c308:	681b      	ldr	r3, [r3, #0]
    c30a:	4a21      	ldr	r2, [pc, #132]	; (c390 <ShiftRows+0xb0>)
    c30c:	6812      	ldr	r2, [r2, #0]
    c30e:	7b52      	ldrb	r2, [r2, #13]
    c310:	725a      	strb	r2, [r3, #9]
    (*state)[3][1] = temp;
    c312:	4b1f      	ldr	r3, [pc, #124]	; (c390 <ShiftRows+0xb0>)
    c314:	681b      	ldr	r3, [r3, #0]
    c316:	79fa      	ldrb	r2, [r7, #7]
    c318:	735a      	strb	r2, [r3, #13]

    // Rotate second row 2 columns to left
    temp = (*state)[0][2];
    c31a:	4b1d      	ldr	r3, [pc, #116]	; (c390 <ShiftRows+0xb0>)
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	789b      	ldrb	r3, [r3, #2]
    c320:	71fb      	strb	r3, [r7, #7]
    (*state)[0][2] = (*state)[2][2];
    c322:	4b1b      	ldr	r3, [pc, #108]	; (c390 <ShiftRows+0xb0>)
    c324:	681b      	ldr	r3, [r3, #0]
    c326:	4a1a      	ldr	r2, [pc, #104]	; (c390 <ShiftRows+0xb0>)
    c328:	6812      	ldr	r2, [r2, #0]
    c32a:	7a92      	ldrb	r2, [r2, #10]
    c32c:	709a      	strb	r2, [r3, #2]
    (*state)[2][2] = temp;
    c32e:	4b18      	ldr	r3, [pc, #96]	; (c390 <ShiftRows+0xb0>)
    c330:	681b      	ldr	r3, [r3, #0]
    c332:	79fa      	ldrb	r2, [r7, #7]
    c334:	729a      	strb	r2, [r3, #10]

    temp = (*state)[1][2];
    c336:	4b16      	ldr	r3, [pc, #88]	; (c390 <ShiftRows+0xb0>)
    c338:	681b      	ldr	r3, [r3, #0]
    c33a:	799b      	ldrb	r3, [r3, #6]
    c33c:	71fb      	strb	r3, [r7, #7]
    (*state)[1][2] = (*state)[3][2];
    c33e:	4b14      	ldr	r3, [pc, #80]	; (c390 <ShiftRows+0xb0>)
    c340:	681b      	ldr	r3, [r3, #0]
    c342:	4a13      	ldr	r2, [pc, #76]	; (c390 <ShiftRows+0xb0>)
    c344:	6812      	ldr	r2, [r2, #0]
    c346:	7b92      	ldrb	r2, [r2, #14]
    c348:	719a      	strb	r2, [r3, #6]
    (*state)[3][2] = temp;
    c34a:	4b11      	ldr	r3, [pc, #68]	; (c390 <ShiftRows+0xb0>)
    c34c:	681b      	ldr	r3, [r3, #0]
    c34e:	79fa      	ldrb	r2, [r7, #7]
    c350:	739a      	strb	r2, [r3, #14]

    // Rotate third row 3 columns to left
    temp = (*state)[0][3];
    c352:	4b0f      	ldr	r3, [pc, #60]	; (c390 <ShiftRows+0xb0>)
    c354:	681b      	ldr	r3, [r3, #0]
    c356:	78db      	ldrb	r3, [r3, #3]
    c358:	71fb      	strb	r3, [r7, #7]
    (*state)[0][3] = (*state)[3][3];
    c35a:	4b0d      	ldr	r3, [pc, #52]	; (c390 <ShiftRows+0xb0>)
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	4a0c      	ldr	r2, [pc, #48]	; (c390 <ShiftRows+0xb0>)
    c360:	6812      	ldr	r2, [r2, #0]
    c362:	7bd2      	ldrb	r2, [r2, #15]
    c364:	70da      	strb	r2, [r3, #3]
    (*state)[3][3] = (*state)[2][3];
    c366:	4b0a      	ldr	r3, [pc, #40]	; (c390 <ShiftRows+0xb0>)
    c368:	681b      	ldr	r3, [r3, #0]
    c36a:	4a09      	ldr	r2, [pc, #36]	; (c390 <ShiftRows+0xb0>)
    c36c:	6812      	ldr	r2, [r2, #0]
    c36e:	7ad2      	ldrb	r2, [r2, #11]
    c370:	73da      	strb	r2, [r3, #15]
    (*state)[2][3] = (*state)[1][3];
    c372:	4b07      	ldr	r3, [pc, #28]	; (c390 <ShiftRows+0xb0>)
    c374:	681b      	ldr	r3, [r3, #0]
    c376:	4a06      	ldr	r2, [pc, #24]	; (c390 <ShiftRows+0xb0>)
    c378:	6812      	ldr	r2, [r2, #0]
    c37a:	79d2      	ldrb	r2, [r2, #7]
    c37c:	72da      	strb	r2, [r3, #11]
    (*state)[1][3] = temp;
    c37e:	4b04      	ldr	r3, [pc, #16]	; (c390 <ShiftRows+0xb0>)
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	79fa      	ldrb	r2, [r7, #7]
    c384:	71da      	strb	r2, [r3, #7]
}
    c386:	bf00      	nop
    c388:	370c      	adds	r7, #12
    c38a:	46bd      	mov	sp, r7
    c38c:	bc80      	pop	{r7}
    c38e:	4770      	bx	lr
    c390:	10000160 	.word	0x10000160

0000c394 <xtime>:

static unsigned char xtime(unsigned char x)
{
    c394:	b480      	push	{r7}
    c396:	b083      	sub	sp, #12
    c398:	af00      	add	r7, sp, #0
    c39a:	4603      	mov	r3, r0
    c39c:	71fb      	strb	r3, [r7, #7]
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
    c39e:	79fb      	ldrb	r3, [r7, #7]
    c3a0:	005b      	lsls	r3, r3, #1
    c3a2:	b25a      	sxtb	r2, r3
    c3a4:	79fb      	ldrb	r3, [r7, #7]
    c3a6:	09db      	lsrs	r3, r3, #7
    c3a8:	b2db      	uxtb	r3, r3
    c3aa:	4619      	mov	r1, r3
    c3ac:	0049      	lsls	r1, r1, #1
    c3ae:	440b      	add	r3, r1
    c3b0:	4619      	mov	r1, r3
    c3b2:	00c8      	lsls	r0, r1, #3
    c3b4:	4619      	mov	r1, r3
    c3b6:	4603      	mov	r3, r0
    c3b8:	440b      	add	r3, r1
    c3ba:	b2db      	uxtb	r3, r3
    c3bc:	b25b      	sxtb	r3, r3
    c3be:	4053      	eors	r3, r2
    c3c0:	b25b      	sxtb	r3, r3
    c3c2:	b2db      	uxtb	r3, r3
}
    c3c4:	4618      	mov	r0, r3
    c3c6:	370c      	adds	r7, #12
    c3c8:	46bd      	mov	sp, r7
    c3ca:	bc80      	pop	{r7}
    c3cc:	4770      	bx	lr
    c3ce:	bf00      	nop

0000c3d0 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(void)
{
    c3d0:	b590      	push	{r4, r7, lr}
    c3d2:	b083      	sub	sp, #12
    c3d4:	af00      	add	r7, sp, #0
    unsigned char i;
    unsigned char Tmp, Tm, t;
    for (i = 0; i < 4; ++i)
    c3d6:	2300      	movs	r3, #0
    c3d8:	71fb      	strb	r3, [r7, #7]
    c3da:	e0b8      	b.n	c54e <MixColumns+0x17e>
    {
        t = (*state)[i][0];
    c3dc:	4b60      	ldr	r3, [pc, #384]	; (c560 <MixColumns+0x190>)
    c3de:	681b      	ldr	r3, [r3, #0]
    c3e0:	79fa      	ldrb	r2, [r7, #7]
    c3e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    c3e6:	71bb      	strb	r3, [r7, #6]
        Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
    c3e8:	4b5d      	ldr	r3, [pc, #372]	; (c560 <MixColumns+0x190>)
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	79fa      	ldrb	r2, [r7, #7]
    c3ee:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
    c3f2:	4b5b      	ldr	r3, [pc, #364]	; (c560 <MixColumns+0x190>)
    c3f4:	6819      	ldr	r1, [r3, #0]
    c3f6:	79fb      	ldrb	r3, [r7, #7]
    c3f8:	009b      	lsls	r3, r3, #2
    c3fa:	440b      	add	r3, r1
    c3fc:	785b      	ldrb	r3, [r3, #1]
    c3fe:	4053      	eors	r3, r2
    c400:	b2da      	uxtb	r2, r3
    c402:	4b57      	ldr	r3, [pc, #348]	; (c560 <MixColumns+0x190>)
    c404:	6819      	ldr	r1, [r3, #0]
    c406:	79fb      	ldrb	r3, [r7, #7]
    c408:	009b      	lsls	r3, r3, #2
    c40a:	440b      	add	r3, r1
    c40c:	789b      	ldrb	r3, [r3, #2]
    c40e:	4053      	eors	r3, r2
    c410:	b2da      	uxtb	r2, r3
    c412:	4b53      	ldr	r3, [pc, #332]	; (c560 <MixColumns+0x190>)
    c414:	6819      	ldr	r1, [r3, #0]
    c416:	79fb      	ldrb	r3, [r7, #7]
    c418:	009b      	lsls	r3, r3, #2
    c41a:	440b      	add	r3, r1
    c41c:	78db      	ldrb	r3, [r3, #3]
    c41e:	4053      	eors	r3, r2
    c420:	717b      	strb	r3, [r7, #5]
        Tm = (*state)[i][0] ^ (*state)[i][1]; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp;
    c422:	4b4f      	ldr	r3, [pc, #316]	; (c560 <MixColumns+0x190>)
    c424:	681b      	ldr	r3, [r3, #0]
    c426:	79fa      	ldrb	r2, [r7, #7]
    c428:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
    c42c:	4b4c      	ldr	r3, [pc, #304]	; (c560 <MixColumns+0x190>)
    c42e:	6819      	ldr	r1, [r3, #0]
    c430:	79fb      	ldrb	r3, [r7, #7]
    c432:	009b      	lsls	r3, r3, #2
    c434:	440b      	add	r3, r1
    c436:	785b      	ldrb	r3, [r3, #1]
    c438:	4053      	eors	r3, r2
    c43a:	713b      	strb	r3, [r7, #4]
    c43c:	793b      	ldrb	r3, [r7, #4]
    c43e:	4618      	mov	r0, r3
    c440:	f7ff ffa8 	bl	c394 <xtime>
    c444:	4603      	mov	r3, r0
    c446:	713b      	strb	r3, [r7, #4]
    c448:	4b45      	ldr	r3, [pc, #276]	; (c560 <MixColumns+0x190>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	79fa      	ldrb	r2, [r7, #7]
    c44e:	4944      	ldr	r1, [pc, #272]	; (c560 <MixColumns+0x190>)
    c450:	6809      	ldr	r1, [r1, #0]
    c452:	79f8      	ldrb	r0, [r7, #7]
    c454:	f811 0020 	ldrb.w	r0, [r1, r0, lsl #2]
    c458:	793c      	ldrb	r4, [r7, #4]
    c45a:	7979      	ldrb	r1, [r7, #5]
    c45c:	4061      	eors	r1, r4
    c45e:	b2c9      	uxtb	r1, r1
    c460:	4041      	eors	r1, r0
    c462:	b2c9      	uxtb	r1, r1
    c464:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
        Tm = (*state)[i][1] ^ (*state)[i][2]; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp;
    c468:	4b3d      	ldr	r3, [pc, #244]	; (c560 <MixColumns+0x190>)
    c46a:	681a      	ldr	r2, [r3, #0]
    c46c:	79fb      	ldrb	r3, [r7, #7]
    c46e:	009b      	lsls	r3, r3, #2
    c470:	4413      	add	r3, r2
    c472:	785a      	ldrb	r2, [r3, #1]
    c474:	4b3a      	ldr	r3, [pc, #232]	; (c560 <MixColumns+0x190>)
    c476:	6819      	ldr	r1, [r3, #0]
    c478:	79fb      	ldrb	r3, [r7, #7]
    c47a:	009b      	lsls	r3, r3, #2
    c47c:	440b      	add	r3, r1
    c47e:	789b      	ldrb	r3, [r3, #2]
    c480:	4053      	eors	r3, r2
    c482:	713b      	strb	r3, [r7, #4]
    c484:	793b      	ldrb	r3, [r7, #4]
    c486:	4618      	mov	r0, r3
    c488:	f7ff ff84 	bl	c394 <xtime>
    c48c:	4603      	mov	r3, r0
    c48e:	713b      	strb	r3, [r7, #4]
    c490:	4b33      	ldr	r3, [pc, #204]	; (c560 <MixColumns+0x190>)
    c492:	681a      	ldr	r2, [r3, #0]
    c494:	79f9      	ldrb	r1, [r7, #7]
    c496:	4b32      	ldr	r3, [pc, #200]	; (c560 <MixColumns+0x190>)
    c498:	6818      	ldr	r0, [r3, #0]
    c49a:	79fb      	ldrb	r3, [r7, #7]
    c49c:	009b      	lsls	r3, r3, #2
    c49e:	4403      	add	r3, r0
    c4a0:	7858      	ldrb	r0, [r3, #1]
    c4a2:	793c      	ldrb	r4, [r7, #4]
    c4a4:	797b      	ldrb	r3, [r7, #5]
    c4a6:	4063      	eors	r3, r4
    c4a8:	b2db      	uxtb	r3, r3
    c4aa:	4043      	eors	r3, r0
    c4ac:	b2d8      	uxtb	r0, r3
    c4ae:	008b      	lsls	r3, r1, #2
    c4b0:	4413      	add	r3, r2
    c4b2:	4602      	mov	r2, r0
    c4b4:	705a      	strb	r2, [r3, #1]
        Tm = (*state)[i][2] ^ (*state)[i][3]; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp;
    c4b6:	4b2a      	ldr	r3, [pc, #168]	; (c560 <MixColumns+0x190>)
    c4b8:	681a      	ldr	r2, [r3, #0]
    c4ba:	79fb      	ldrb	r3, [r7, #7]
    c4bc:	009b      	lsls	r3, r3, #2
    c4be:	4413      	add	r3, r2
    c4c0:	789a      	ldrb	r2, [r3, #2]
    c4c2:	4b27      	ldr	r3, [pc, #156]	; (c560 <MixColumns+0x190>)
    c4c4:	6819      	ldr	r1, [r3, #0]
    c4c6:	79fb      	ldrb	r3, [r7, #7]
    c4c8:	009b      	lsls	r3, r3, #2
    c4ca:	440b      	add	r3, r1
    c4cc:	78db      	ldrb	r3, [r3, #3]
    c4ce:	4053      	eors	r3, r2
    c4d0:	713b      	strb	r3, [r7, #4]
    c4d2:	793b      	ldrb	r3, [r7, #4]
    c4d4:	4618      	mov	r0, r3
    c4d6:	f7ff ff5d 	bl	c394 <xtime>
    c4da:	4603      	mov	r3, r0
    c4dc:	713b      	strb	r3, [r7, #4]
    c4de:	4b20      	ldr	r3, [pc, #128]	; (c560 <MixColumns+0x190>)
    c4e0:	681a      	ldr	r2, [r3, #0]
    c4e2:	79f9      	ldrb	r1, [r7, #7]
    c4e4:	4b1e      	ldr	r3, [pc, #120]	; (c560 <MixColumns+0x190>)
    c4e6:	6818      	ldr	r0, [r3, #0]
    c4e8:	79fb      	ldrb	r3, [r7, #7]
    c4ea:	009b      	lsls	r3, r3, #2
    c4ec:	4403      	add	r3, r0
    c4ee:	7898      	ldrb	r0, [r3, #2]
    c4f0:	793c      	ldrb	r4, [r7, #4]
    c4f2:	797b      	ldrb	r3, [r7, #5]
    c4f4:	4063      	eors	r3, r4
    c4f6:	b2db      	uxtb	r3, r3
    c4f8:	4043      	eors	r3, r0
    c4fa:	b2d8      	uxtb	r0, r3
    c4fc:	008b      	lsls	r3, r1, #2
    c4fe:	4413      	add	r3, r2
    c500:	4602      	mov	r2, r0
    c502:	709a      	strb	r2, [r3, #2]
        Tm = (*state)[i][3] ^ t;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp;
    c504:	4b16      	ldr	r3, [pc, #88]	; (c560 <MixColumns+0x190>)
    c506:	681a      	ldr	r2, [r3, #0]
    c508:	79fb      	ldrb	r3, [r7, #7]
    c50a:	009b      	lsls	r3, r3, #2
    c50c:	4413      	add	r3, r2
    c50e:	78da      	ldrb	r2, [r3, #3]
    c510:	79bb      	ldrb	r3, [r7, #6]
    c512:	4053      	eors	r3, r2
    c514:	713b      	strb	r3, [r7, #4]
    c516:	793b      	ldrb	r3, [r7, #4]
    c518:	4618      	mov	r0, r3
    c51a:	f7ff ff3b 	bl	c394 <xtime>
    c51e:	4603      	mov	r3, r0
    c520:	713b      	strb	r3, [r7, #4]
    c522:	4b0f      	ldr	r3, [pc, #60]	; (c560 <MixColumns+0x190>)
    c524:	681a      	ldr	r2, [r3, #0]
    c526:	79f9      	ldrb	r1, [r7, #7]
    c528:	4b0d      	ldr	r3, [pc, #52]	; (c560 <MixColumns+0x190>)
    c52a:	6818      	ldr	r0, [r3, #0]
    c52c:	79fb      	ldrb	r3, [r7, #7]
    c52e:	009b      	lsls	r3, r3, #2
    c530:	4403      	add	r3, r0
    c532:	78d8      	ldrb	r0, [r3, #3]
    c534:	793c      	ldrb	r4, [r7, #4]
    c536:	797b      	ldrb	r3, [r7, #5]
    c538:	4063      	eors	r3, r4
    c53a:	b2db      	uxtb	r3, r3
    c53c:	4043      	eors	r3, r0
    c53e:	b2d8      	uxtb	r0, r3
    c540:	008b      	lsls	r3, r1, #2
    c542:	4413      	add	r3, r2
    c544:	4602      	mov	r2, r0
    c546:	70da      	strb	r2, [r3, #3]
// MixColumns function mixes the columns of the state matrix
static void MixColumns(void)
{
    unsigned char i;
    unsigned char Tmp, Tm, t;
    for (i = 0; i < 4; ++i)
    c548:	79fb      	ldrb	r3, [r7, #7]
    c54a:	3301      	adds	r3, #1
    c54c:	71fb      	strb	r3, [r7, #7]
    c54e:	79fb      	ldrb	r3, [r7, #7]
    c550:	2b03      	cmp	r3, #3
    c552:	f67f af43 	bls.w	c3dc <MixColumns+0xc>
        Tm = (*state)[i][0] ^ (*state)[i][1]; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp;
        Tm = (*state)[i][1] ^ (*state)[i][2]; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp;
        Tm = (*state)[i][2] ^ (*state)[i][3]; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp;
        Tm = (*state)[i][3] ^ t;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp;
    }
}
    c556:	bf00      	nop
    c558:	370c      	adds	r7, #12
    c55a:	46bd      	mov	sp, r7
    c55c:	bd90      	pop	{r4, r7, pc}
    c55e:	bf00      	nop
    c560:	10000160 	.word	0x10000160

0000c564 <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
    c564:	b580      	push	{r7, lr}
    c566:	b082      	sub	sp, #8
    c568:	af00      	add	r7, sp, #0
    unsigned char round = 0;
    c56a:	2300      	movs	r3, #0
    c56c:	71fb      	strb	r3, [r7, #7]

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(0);
    c56e:	2000      	movs	r0, #0
    c570:	f7ff fe4a 	bl	c208 <AddRoundKey>

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr-1 rounds are executed in the loop below.
    for (round = 1; round < Nr; ++round)
    c574:	2301      	movs	r3, #1
    c576:	71fb      	strb	r3, [r7, #7]
    c578:	e00c      	b.n	c594 <Cipher+0x30>
    {
        SubBytes();
    c57a:	f7ff fe81 	bl	c280 <SubBytes>
        ShiftRows();
    c57e:	f7ff feaf 	bl	c2e0 <ShiftRows>
        MixColumns();
    c582:	f7ff ff25 	bl	c3d0 <MixColumns>
        AddRoundKey(round);
    c586:	79fb      	ldrb	r3, [r7, #7]
    c588:	4618      	mov	r0, r3
    c58a:	f7ff fe3d 	bl	c208 <AddRoundKey>
    AddRoundKey(0);

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr-1 rounds are executed in the loop below.
    for (round = 1; round < Nr; ++round)
    c58e:	79fb      	ldrb	r3, [r7, #7]
    c590:	3301      	adds	r3, #1
    c592:	71fb      	strb	r3, [r7, #7]
    c594:	79fb      	ldrb	r3, [r7, #7]
    c596:	2b09      	cmp	r3, #9
    c598:	d9ef      	bls.n	c57a <Cipher+0x16>
        AddRoundKey(round);
    }

    // The last round is given below.
    // The MixColumns function is not here in the last round.
    SubBytes();
    c59a:	f7ff fe71 	bl	c280 <SubBytes>
    ShiftRows();
    c59e:	f7ff fe9f 	bl	c2e0 <ShiftRows>
    AddRoundKey(Nr);
    c5a2:	200a      	movs	r0, #10
    c5a4:	f7ff fe30 	bl	c208 <AddRoundKey>
}
    c5a8:	bf00      	nop
    c5aa:	3708      	adds	r7, #8
    c5ac:	46bd      	mov	sp, r7
    c5ae:	bd80      	pop	{r7, pc}

0000c5b0 <gxaes_ecb_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void gxaes_ecb_encrypt(const unsigned char* input, const unsigned char* key, unsigned char* output, const unsigned long length)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	b084      	sub	sp, #16
    c5b4:	af00      	add	r7, sp, #0
    c5b6:	60f8      	str	r0, [r7, #12]
    c5b8:	60b9      	str	r1, [r7, #8]
    c5ba:	607a      	str	r2, [r7, #4]
    c5bc:	603b      	str	r3, [r7, #0]
    // Copy input to output, and work in-memory on output
    memcpy(output, input, length);
    c5be:	683a      	ldr	r2, [r7, #0]
    c5c0:	68f9      	ldr	r1, [r7, #12]
    c5c2:	6878      	ldr	r0, [r7, #4]
    c5c4:	f01d fa5d 	bl	29a82 <memcpy>
    state = (state_t*)output;
    c5c8:	4a06      	ldr	r2, [pc, #24]	; (c5e4 <gxaes_ecb_encrypt+0x34>)
    c5ca:	687b      	ldr	r3, [r7, #4]
    c5cc:	6013      	str	r3, [r2, #0]

    Key = key;
    c5ce:	4a06      	ldr	r2, [pc, #24]	; (c5e8 <gxaes_ecb_encrypt+0x38>)
    c5d0:	68bb      	ldr	r3, [r7, #8]
    c5d2:	6013      	str	r3, [r2, #0]
    KeyExpansion();
    c5d4:	f7ff fd3c 	bl	c050 <KeyExpansion>

    // The next function call encrypts the PlainText with the Key using AES algorithm.
    Cipher();
    c5d8:	f7ff ffc4 	bl	c564 <Cipher>
}
    c5dc:	bf00      	nop
    c5de:	3710      	adds	r7, #16
    c5e0:	46bd      	mov	sp, r7
    c5e2:	bd80      	pop	{r7, pc}
    c5e4:	10000160 	.word	0x10000160
    c5e8:	10000214 	.word	0x10000214

0000c5ec <arr_init>:
#include "../include/bytebuffer.h"
#include "../include/gxkey.h"

//Initialize gxArray.
void arr_init(gxArray* arr)
{
    c5ec:	b480      	push	{r7}
    c5ee:	b083      	sub	sp, #12
    c5f0:	af00      	add	r7, sp, #0
    c5f2:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	2200      	movs	r2, #0
    c5f8:	605a      	str	r2, [r3, #4]
    arr->data = NULL;
    c5fa:	687b      	ldr	r3, [r7, #4]
    c5fc:	2200      	movs	r2, #0
    c5fe:	601a      	str	r2, [r3, #0]
    arr->position = 0;
    c600:	687b      	ldr	r3, [r7, #4]
    c602:	2200      	movs	r2, #0
    c604:	60da      	str	r2, [r3, #12]
    arr->size = 0;
    c606:	687b      	ldr	r3, [r7, #4]
    c608:	2200      	movs	r2, #0
    c60a:	811a      	strh	r2, [r3, #8]
}
    c60c:	bf00      	nop
    c60e:	370c      	adds	r7, #12
    c610:	46bd      	mov	sp, r7
    c612:	bc80      	pop	{r7}
    c614:	4770      	bx	lr
    c616:	bf00      	nop

0000c618 <arr_capacity>:

//Allocate new size for the array in bytes.
int arr_capacity(gxArray* arr, int capacity)
{
    c618:	b580      	push	{r7, lr}
    c61a:	b082      	sub	sp, #8
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
    c620:	6039      	str	r1, [r7, #0]
    arr->capacity = capacity;
    c622:	687b      	ldr	r3, [r7, #4]
    c624:	683a      	ldr	r2, [r7, #0]
    c626:	605a      	str	r2, [r3, #4]
    if (arr->capacity != 0)
    c628:	687b      	ldr	r3, [r7, #4]
    c62a:	685b      	ldr	r3, [r3, #4]
    c62c:	2b00      	cmp	r3, #0
    c62e:	d021      	beq.n	c674 <arr_capacity+0x5c>
    {
        if (arr->data == NULL)
    c630:	687b      	ldr	r3, [r7, #4]
    c632:	681b      	ldr	r3, [r3, #0]
    c634:	2b00      	cmp	r3, #0
    c636:	d10a      	bne.n	c64e <arr_capacity+0x36>
        {
            arr->data = (void**)gxmalloc(arr->capacity * sizeof(void*));
    c638:	687b      	ldr	r3, [r7, #4]
    c63a:	685b      	ldr	r3, [r3, #4]
    c63c:	009b      	lsls	r3, r3, #2
    c63e:	4618      	mov	r0, r3
    c640:	f01d fa00 	bl	29a44 <malloc>
    c644:	4603      	mov	r3, r0
    c646:	461a      	mov	r2, r3
    c648:	687b      	ldr	r3, [r7, #4]
    c64a:	601a      	str	r2, [r3, #0]
    c64c:	e00b      	b.n	c666 <arr_capacity+0x4e>
        }
        else
        {
            arr->data = (void**)gxrealloc(arr->data, arr->capacity * sizeof(void*));
    c64e:	687b      	ldr	r3, [r7, #4]
    c650:	681a      	ldr	r2, [r3, #0]
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	685b      	ldr	r3, [r3, #4]
    c656:	009b      	lsls	r3, r3, #2
    c658:	4619      	mov	r1, r3
    c65a:	4610      	mov	r0, r2
    c65c:	f01d fda8 	bl	2a1b0 <realloc>
    c660:	4602      	mov	r2, r0
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	601a      	str	r2, [r3, #0]
        }
        if (arr->data == NULL)
    c666:	687b      	ldr	r3, [r7, #4]
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	2b00      	cmp	r3, #0
    c66c:	d102      	bne.n	c674 <arr_capacity+0x5c>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    c66e:	f44f 7382 	mov.w	r3, #260	; 0x104
    c672:	e000      	b.n	c676 <arr_capacity+0x5e>
        }
    }
    return 0;
    c674:	2300      	movs	r3, #0
}
    c676:	4618      	mov	r0, r3
    c678:	3708      	adds	r7, #8
    c67a:	46bd      	mov	sp, r7
    c67c:	bd80      	pop	{r7, pc}
    c67e:	bf00      	nop

0000c680 <arr_push>:

//Push new data to the gxArray.
int arr_push(gxArray * arr, void* item)
{
    c680:	b580      	push	{r7, lr}
    c682:	b082      	sub	sp, #8
    c684:	af00      	add	r7, sp, #0
    c686:	6078      	str	r0, [r7, #4]
    c688:	6039      	str	r1, [r7, #0]
    if (arr->size >= arr->capacity)
    c68a:	687b      	ldr	r3, [r7, #4]
    c68c:	891b      	ldrh	r3, [r3, #8]
    c68e:	461a      	mov	r2, r3
    c690:	687b      	ldr	r3, [r7, #4]
    c692:	685b      	ldr	r3, [r3, #4]
    c694:	429a      	cmp	r2, r3
    c696:	db27      	blt.n	c6e8 <arr_push+0x68>
    {
        arr->capacity += GXARRAY_CAPACITY;
    c698:	687b      	ldr	r3, [r7, #4]
    c69a:	685b      	ldr	r3, [r3, #4]
    c69c:	f103 020a 	add.w	r2, r3, #10
    c6a0:	687b      	ldr	r3, [r7, #4]
    c6a2:	605a      	str	r2, [r3, #4]
        if (arr->data == NULL)
    c6a4:	687b      	ldr	r3, [r7, #4]
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d10a      	bne.n	c6c2 <arr_push+0x42>
        {
            arr->data = (void**)gxmalloc(arr->capacity * sizeof(void*));
    c6ac:	687b      	ldr	r3, [r7, #4]
    c6ae:	685b      	ldr	r3, [r3, #4]
    c6b0:	009b      	lsls	r3, r3, #2
    c6b2:	4618      	mov	r0, r3
    c6b4:	f01d f9c6 	bl	29a44 <malloc>
    c6b8:	4603      	mov	r3, r0
    c6ba:	461a      	mov	r2, r3
    c6bc:	687b      	ldr	r3, [r7, #4]
    c6be:	601a      	str	r2, [r3, #0]
    c6c0:	e00b      	b.n	c6da <arr_push+0x5a>
        }
        else
        {
            arr->data = (void**)gxrealloc(arr->data, arr->capacity * sizeof(void*));
    c6c2:	687b      	ldr	r3, [r7, #4]
    c6c4:	681a      	ldr	r2, [r3, #0]
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	685b      	ldr	r3, [r3, #4]
    c6ca:	009b      	lsls	r3, r3, #2
    c6cc:	4619      	mov	r1, r3
    c6ce:	4610      	mov	r0, r2
    c6d0:	f01d fd6e 	bl	2a1b0 <realloc>
    c6d4:	4602      	mov	r2, r0
    c6d6:	687b      	ldr	r3, [r7, #4]
    c6d8:	601a      	str	r2, [r3, #0]
        }
        if (arr->data == NULL)
    c6da:	687b      	ldr	r3, [r7, #4]
    c6dc:	681b      	ldr	r3, [r3, #0]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d102      	bne.n	c6e8 <arr_push+0x68>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    c6e2:	f44f 7382 	mov.w	r3, #260	; 0x104
    c6e6:	e00e      	b.n	c706 <arr_push+0x86>
        }
    }
    arr->data[arr->size] = item;
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	681a      	ldr	r2, [r3, #0]
    c6ec:	687b      	ldr	r3, [r7, #4]
    c6ee:	891b      	ldrh	r3, [r3, #8]
    c6f0:	009b      	lsls	r3, r3, #2
    c6f2:	4413      	add	r3, r2
    c6f4:	683a      	ldr	r2, [r7, #0]
    c6f6:	601a      	str	r2, [r3, #0]
    ++arr->size;
    c6f8:	687b      	ldr	r3, [r7, #4]
    c6fa:	891b      	ldrh	r3, [r3, #8]
    c6fc:	3301      	adds	r3, #1
    c6fe:	b29a      	uxth	r2, r3
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	811a      	strh	r2, [r3, #8]
    return 0;
    c704:	2300      	movs	r3, #0
}
    c706:	4618      	mov	r0, r3
    c708:	3708      	adds	r7, #8
    c70a:	46bd      	mov	sp, r7
    c70c:	bd80      	pop	{r7, pc}
    c70e:	bf00      	nop

0000c710 <arr_clear>:

void arr_clear(
    gxArray* arr)
{
    c710:	b580      	push	{r7, lr}
    c712:	b084      	sub	sp, #16
    c714:	af00      	add	r7, sp, #0
    c716:	6078      	str	r0, [r7, #4]
    int pos;
    if (arr->size != 0)
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	891b      	ldrh	r3, [r3, #8]
    c71c:	2b00      	cmp	r3, #0
    c71e:	d014      	beq.n	c74a <arr_clear+0x3a>
    {
        for (pos = 0; pos != arr->size; ++pos)
    c720:	2300      	movs	r3, #0
    c722:	60fb      	str	r3, [r7, #12]
    c724:	e00b      	b.n	c73e <arr_clear+0x2e>
        {
            gxfree(arr->data[pos]);
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	681a      	ldr	r2, [r3, #0]
    c72a:	68fb      	ldr	r3, [r7, #12]
    c72c:	009b      	lsls	r3, r3, #2
    c72e:	4413      	add	r3, r2
    c730:	681b      	ldr	r3, [r3, #0]
    c732:	4618      	mov	r0, r3
    c734:	f01d f98e 	bl	29a54 <free>
    gxArray* arr)
{
    int pos;
    if (arr->size != 0)
    {
        for (pos = 0; pos != arr->size; ++pos)
    c738:	68fb      	ldr	r3, [r7, #12]
    c73a:	3301      	adds	r3, #1
    c73c:	60fb      	str	r3, [r7, #12]
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	891b      	ldrh	r3, [r3, #8]
    c742:	461a      	mov	r2, r3
    c744:	68fb      	ldr	r3, [r7, #12]
    c746:	429a      	cmp	r2, r3
    c748:	d1ed      	bne.n	c726 <arr_clear+0x16>
        {
            gxfree(arr->data[pos]);
        }
    }
    if (arr->capacity != 0)
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	685b      	ldr	r3, [r3, #4]
    c74e:	2b00      	cmp	r3, #0
    c750:	d007      	beq.n	c762 <arr_clear+0x52>
    {
        gxfree(arr->data);
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	681b      	ldr	r3, [r3, #0]
    c756:	4618      	mov	r0, r3
    c758:	f01d f97c 	bl	29a54 <free>
        arr->data = NULL;
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	2200      	movs	r2, #0
    c760:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
    c762:	687b      	ldr	r3, [r7, #4]
    c764:	2200      	movs	r2, #0
    c766:	605a      	str	r2, [r3, #4]
    arr->size = 0;
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	2200      	movs	r2, #0
    c76c:	811a      	strh	r2, [r3, #8]
    arr->position = 0;
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	2200      	movs	r2, #0
    c772:	60da      	str	r2, [r3, #12]
}
    c774:	bf00      	nop
    c776:	3710      	adds	r7, #16
    c778:	46bd      	mov	sp, r7
    c77a:	bd80      	pop	{r7, pc}

0000c77c <arr_empty>:

void arr_empty(
    gxArray* arr)
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b082      	sub	sp, #8
    c780:	af00      	add	r7, sp, #0
    c782:	6078      	str	r0, [r7, #4]
    if (arr->size != 0)
    c784:	687b      	ldr	r3, [r7, #4]
    c786:	891b      	ldrh	r3, [r3, #8]
    c788:	2b00      	cmp	r3, #0
    c78a:	d007      	beq.n	c79c <arr_empty+0x20>
    {
        gxfree(arr->data);
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	4618      	mov	r0, r3
    c792:	f01d f95f 	bl	29a54 <free>
        arr->data = NULL;
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	2200      	movs	r2, #0
    c79a:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	2200      	movs	r2, #0
    c7a0:	605a      	str	r2, [r3, #4]
    arr->size = 0;
    c7a2:	687b      	ldr	r3, [r7, #4]
    c7a4:	2200      	movs	r2, #0
    c7a6:	811a      	strh	r2, [r3, #8]
    arr->position = 0;
    c7a8:	687b      	ldr	r3, [r7, #4]
    c7aa:	2200      	movs	r2, #0
    c7ac:	60da      	str	r2, [r3, #12]
}
    c7ae:	bf00      	nop
    c7b0:	3708      	adds	r7, #8
    c7b2:	46bd      	mov	sp, r7
    c7b4:	bd80      	pop	{r7, pc}
    c7b6:	bf00      	nop

0000c7b8 <arr_get>:

int arr_get(gxArray* arr, void** value)
{
    c7b8:	b480      	push	{r7}
    c7ba:	b083      	sub	sp, #12
    c7bc:	af00      	add	r7, sp, #0
    c7be:	6078      	str	r0, [r7, #4]
    c7c0:	6039      	str	r1, [r7, #0]
    if (arr->position >= arr->size)
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	68db      	ldr	r3, [r3, #12]
    c7c6:	687a      	ldr	r2, [r7, #4]
    c7c8:	8912      	ldrh	r2, [r2, #8]
    c7ca:	4293      	cmp	r3, r2
    c7cc:	db02      	blt.n	c7d4 <arr_get+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    c7ce:	f44f 7382 	mov.w	r3, #260	; 0x104
    c7d2:	e00e      	b.n	c7f2 <arr_get+0x3a>
    }
    *value = arr->data[arr->position];
    c7d4:	687b      	ldr	r3, [r7, #4]
    c7d6:	681a      	ldr	r2, [r3, #0]
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	68db      	ldr	r3, [r3, #12]
    c7dc:	009b      	lsls	r3, r3, #2
    c7de:	4413      	add	r3, r2
    c7e0:	681a      	ldr	r2, [r3, #0]
    c7e2:	683b      	ldr	r3, [r7, #0]
    c7e4:	601a      	str	r2, [r3, #0]
    ++arr->position;
    c7e6:	687b      	ldr	r3, [r7, #4]
    c7e8:	68db      	ldr	r3, [r3, #12]
    c7ea:	1c5a      	adds	r2, r3, #1
    c7ec:	687b      	ldr	r3, [r7, #4]
    c7ee:	60da      	str	r2, [r3, #12]
    return 0;
    c7f0:	2300      	movs	r3, #0
}
    c7f2:	4618      	mov	r0, r3
    c7f4:	370c      	adds	r7, #12
    c7f6:	46bd      	mov	sp, r7
    c7f8:	bc80      	pop	{r7}
    c7fa:	4770      	bx	lr

0000c7fc <arr_getByIndex>:

int arr_getByIndex(gxArray* arr, int index, void** value)
{
    c7fc:	b480      	push	{r7}
    c7fe:	b085      	sub	sp, #20
    c800:	af00      	add	r7, sp, #0
    c802:	60f8      	str	r0, [r7, #12]
    c804:	60b9      	str	r1, [r7, #8]
    c806:	607a      	str	r2, [r7, #4]
    if (index >= arr->size)
    c808:	68fb      	ldr	r3, [r7, #12]
    c80a:	891b      	ldrh	r3, [r3, #8]
    c80c:	461a      	mov	r2, r3
    c80e:	68bb      	ldr	r3, [r7, #8]
    c810:	429a      	cmp	r2, r3
    c812:	dc02      	bgt.n	c81a <arr_getByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    c814:	f44f 7382 	mov.w	r3, #260	; 0x104
    c818:	e008      	b.n	c82c <arr_getByIndex+0x30>
    }
    *value = arr->data[index];
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	681a      	ldr	r2, [r3, #0]
    c81e:	68bb      	ldr	r3, [r7, #8]
    c820:	009b      	lsls	r3, r3, #2
    c822:	4413      	add	r3, r2
    c824:	681a      	ldr	r2, [r3, #0]
    c826:	687b      	ldr	r3, [r7, #4]
    c828:	601a      	str	r2, [r3, #0]
    return 0;
    c82a:	2300      	movs	r3, #0
}
    c82c:	4618      	mov	r0, r3
    c82e:	3714      	adds	r7, #20
    c830:	46bd      	mov	sp, r7
    c832:	bc80      	pop	{r7}
    c834:	4770      	bx	lr
    c836:	bf00      	nop

0000c838 <arr_clearKeyValuePair>:

void arr_clearKeyValuePair(gxArray* arr)
{
    c838:	b580      	push	{r7, lr}
    c83a:	b084      	sub	sp, #16
    c83c:	af00      	add	r7, sp, #0
    c83e:	6078      	str	r0, [r7, #4]
    gxKey* k;
    int pos;
    if (arr->size != 0)
    c840:	687b      	ldr	r3, [r7, #4]
    c842:	891b      	ldrh	r3, [r3, #8]
    c844:	2b00      	cmp	r3, #0
    c846:	d027      	beq.n	c898 <arr_clearKeyValuePair+0x60>
    {
        for (pos = 0; pos != arr->size; ++pos)
    c848:	2300      	movs	r3, #0
    c84a:	60fb      	str	r3, [r7, #12]
    c84c:	e016      	b.n	c87c <arr_clearKeyValuePair+0x44>
        {
            k = (gxKey*)arr->data[pos];
    c84e:	687b      	ldr	r3, [r7, #4]
    c850:	681a      	ldr	r2, [r3, #0]
    c852:	68fb      	ldr	r3, [r7, #12]
    c854:	009b      	lsls	r3, r3, #2
    c856:	4413      	add	r3, r2
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	60bb      	str	r3, [r7, #8]
            gxfree(k->key);
    c85c:	68bb      	ldr	r3, [r7, #8]
    c85e:	681b      	ldr	r3, [r3, #0]
    c860:	4618      	mov	r0, r3
    c862:	f01d f8f7 	bl	29a54 <free>
            gxfree(k->value);
    c866:	68bb      	ldr	r3, [r7, #8]
    c868:	685b      	ldr	r3, [r3, #4]
    c86a:	4618      	mov	r0, r3
    c86c:	f01d f8f2 	bl	29a54 <free>
            gxfree(k);
    c870:	68b8      	ldr	r0, [r7, #8]
    c872:	f01d f8ef 	bl	29a54 <free>
{
    gxKey* k;
    int pos;
    if (arr->size != 0)
    {
        for (pos = 0; pos != arr->size; ++pos)
    c876:	68fb      	ldr	r3, [r7, #12]
    c878:	3301      	adds	r3, #1
    c87a:	60fb      	str	r3, [r7, #12]
    c87c:	687b      	ldr	r3, [r7, #4]
    c87e:	891b      	ldrh	r3, [r3, #8]
    c880:	461a      	mov	r2, r3
    c882:	68fb      	ldr	r3, [r7, #12]
    c884:	429a      	cmp	r2, r3
    c886:	d1e2      	bne.n	c84e <arr_clearKeyValuePair+0x16>
            k = (gxKey*)arr->data[pos];
            gxfree(k->key);
            gxfree(k->value);
            gxfree(k);
        }
        gxfree(arr->data);
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	681b      	ldr	r3, [r3, #0]
    c88c:	4618      	mov	r0, r3
    c88e:	f01d f8e1 	bl	29a54 <free>
        arr->data = NULL;
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	2200      	movs	r2, #0
    c896:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
    c898:	687b      	ldr	r3, [r7, #4]
    c89a:	2200      	movs	r2, #0
    c89c:	605a      	str	r2, [r3, #4]
    arr->size = 0;
    c89e:	687b      	ldr	r3, [r7, #4]
    c8a0:	2200      	movs	r2, #0
    c8a2:	811a      	strh	r2, [r3, #8]
    arr->position = 0;
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	2200      	movs	r2, #0
    c8a8:	60da      	str	r2, [r3, #12]
}
    c8aa:	bf00      	nop
    c8ac:	3710      	adds	r7, #16
    c8ae:	46bd      	mov	sp, r7
    c8b0:	bd80      	pop	{r7, pc}
    c8b2:	bf00      	nop

0000c8b4 <arr_clearStrings>:

void arr_clearStrings(gxArray* arr)
{
    c8b4:	b580      	push	{r7, lr}
    c8b6:	b084      	sub	sp, #16
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	6078      	str	r0, [r7, #4]
    gxByteBuffer* it;
    int pos;
    if (arr->size != 0)
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	891b      	ldrh	r3, [r3, #8]
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	d022      	beq.n	c90a <arr_clearStrings+0x56>
    {
        for (pos = 0; pos != arr->size; ++pos)
    c8c4:	2300      	movs	r3, #0
    c8c6:	60fb      	str	r3, [r7, #12]
    c8c8:	e011      	b.n	c8ee <arr_clearStrings+0x3a>
        {
            it = (gxByteBuffer*)arr->data[pos];
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	681a      	ldr	r2, [r3, #0]
    c8ce:	68fb      	ldr	r3, [r7, #12]
    c8d0:	009b      	lsls	r3, r3, #2
    c8d2:	4413      	add	r3, r2
    c8d4:	681b      	ldr	r3, [r3, #0]
    c8d6:	60bb      	str	r3, [r7, #8]
            gxfree(it->data);
    c8d8:	68bb      	ldr	r3, [r7, #8]
    c8da:	681b      	ldr	r3, [r3, #0]
    c8dc:	4618      	mov	r0, r3
    c8de:	f01d f8b9 	bl	29a54 <free>
            gxfree(it);
    c8e2:	68b8      	ldr	r0, [r7, #8]
    c8e4:	f01d f8b6 	bl	29a54 <free>
{
    gxByteBuffer* it;
    int pos;
    if (arr->size != 0)
    {
        for (pos = 0; pos != arr->size; ++pos)
    c8e8:	68fb      	ldr	r3, [r7, #12]
    c8ea:	3301      	adds	r3, #1
    c8ec:	60fb      	str	r3, [r7, #12]
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	891b      	ldrh	r3, [r3, #8]
    c8f2:	461a      	mov	r2, r3
    c8f4:	68fb      	ldr	r3, [r7, #12]
    c8f6:	429a      	cmp	r2, r3
    c8f8:	d1e7      	bne.n	c8ca <arr_clearStrings+0x16>
        {
            it = (gxByteBuffer*)arr->data[pos];
            gxfree(it->data);
            gxfree(it);
        }
        gxfree(arr->data);
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	681b      	ldr	r3, [r3, #0]
    c8fe:	4618      	mov	r0, r3
    c900:	f01d f8a8 	bl	29a54 <free>
        arr->data = NULL;
    c904:	687b      	ldr	r3, [r7, #4]
    c906:	2200      	movs	r2, #0
    c908:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	2200      	movs	r2, #0
    c90e:	605a      	str	r2, [r3, #4]
    arr->size = 0;
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	2200      	movs	r2, #0
    c914:	811a      	strh	r2, [r3, #8]
    arr->position = 0;
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	2200      	movs	r2, #0
    c91a:	60da      	str	r2, [r3, #12]
}
    c91c:	bf00      	nop
    c91e:	3710      	adds	r7, #16
    c920:	46bd      	mov	sp, r7
    c922:	bd80      	pop	{r7, pc}

0000c924 <arr_removeByIndex>:

int arr_removeByIndex(gxArray* arr, int index, void** value)
{
    c924:	b480      	push	{r7}
    c926:	b087      	sub	sp, #28
    c928:	af00      	add	r7, sp, #0
    c92a:	60f8      	str	r0, [r7, #12]
    c92c:	60b9      	str	r1, [r7, #8]
    c92e:	607a      	str	r2, [r7, #4]
    int pos;
    if (index < 0 || index >= arr->size)
    c930:	68bb      	ldr	r3, [r7, #8]
    c932:	2b00      	cmp	r3, #0
    c934:	db05      	blt.n	c942 <arr_removeByIndex+0x1e>
    c936:	68fb      	ldr	r3, [r7, #12]
    c938:	891b      	ldrh	r3, [r3, #8]
    c93a:	461a      	mov	r2, r3
    c93c:	68bb      	ldr	r3, [r7, #8]
    c93e:	429a      	cmp	r2, r3
    c940:	dc02      	bgt.n	c948 <arr_removeByIndex+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    c942:	f44f 7382 	mov.w	r3, #260	; 0x104
    c946:	e027      	b.n	c998 <arr_removeByIndex+0x74>
    }
    *value = arr->data[index];
    c948:	68fb      	ldr	r3, [r7, #12]
    c94a:	681a      	ldr	r2, [r3, #0]
    c94c:	68bb      	ldr	r3, [r7, #8]
    c94e:	009b      	lsls	r3, r3, #2
    c950:	4413      	add	r3, r2
    c952:	681a      	ldr	r2, [r3, #0]
    c954:	687b      	ldr	r3, [r7, #4]
    c956:	601a      	str	r2, [r3, #0]
    for (pos = index; pos != arr->size; ++pos)
    c958:	68bb      	ldr	r3, [r7, #8]
    c95a:	617b      	str	r3, [r7, #20]
    c95c:	e00f      	b.n	c97e <arr_removeByIndex+0x5a>
    {
        arr->data[pos] = arr->data[pos + 1];
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	681a      	ldr	r2, [r3, #0]
    c962:	697b      	ldr	r3, [r7, #20]
    c964:	009b      	lsls	r3, r3, #2
    c966:	4413      	add	r3, r2
    c968:	68fa      	ldr	r2, [r7, #12]
    c96a:	6811      	ldr	r1, [r2, #0]
    c96c:	697a      	ldr	r2, [r7, #20]
    c96e:	3201      	adds	r2, #1
    c970:	0092      	lsls	r2, r2, #2
    c972:	440a      	add	r2, r1
    c974:	6812      	ldr	r2, [r2, #0]
    c976:	601a      	str	r2, [r3, #0]
    if (index < 0 || index >= arr->size)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = arr->data[index];
    for (pos = index; pos != arr->size; ++pos)
    c978:	697b      	ldr	r3, [r7, #20]
    c97a:	3301      	adds	r3, #1
    c97c:	617b      	str	r3, [r7, #20]
    c97e:	68fb      	ldr	r3, [r7, #12]
    c980:	891b      	ldrh	r3, [r3, #8]
    c982:	461a      	mov	r2, r3
    c984:	697b      	ldr	r3, [r7, #20]
    c986:	429a      	cmp	r2, r3
    c988:	d1e9      	bne.n	c95e <arr_removeByIndex+0x3a>
    {
        arr->data[pos] = arr->data[pos + 1];
    }
    --arr->size;
    c98a:	68fb      	ldr	r3, [r7, #12]
    c98c:	891b      	ldrh	r3, [r3, #8]
    c98e:	3b01      	subs	r3, #1
    c990:	b29a      	uxth	r2, r3
    c992:	68fb      	ldr	r3, [r7, #12]
    c994:	811a      	strh	r2, [r3, #8]
    return 0;
    c996:	2300      	movs	r3, #0
}
    c998:	4618      	mov	r0, r3
    c99a:	371c      	adds	r7, #28
    c99c:	46bd      	mov	sp, r7
    c99e:	bc80      	pop	{r7}
    c9a0:	4770      	bx	lr
    c9a2:	bf00      	nop

0000c9a4 <cosem_getByteBuffer>:
#include "../include/gxkey.h"
#include "../include/helpers.h"
#include "../include/serverevents.h"

int cosem_getByteBuffer(dlmsVARIANT* target)
{
    c9a4:	b580      	push	{r7, lr}
    c9a6:	b082      	sub	sp, #8
    c9a8:	af00      	add	r7, sp, #0
    c9aa:	6078      	str	r0, [r7, #4]
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
    c9ac:	687b      	ldr	r3, [r7, #4]
    c9ae:	2209      	movs	r2, #9
    c9b0:	701a      	strb	r2, [r3, #0]
    if (target->byteArr == NULL)
    c9b2:	687b      	ldr	r3, [r7, #4]
    c9b4:	689b      	ldr	r3, [r3, #8]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d112      	bne.n	c9e0 <cosem_getByteBuffer+0x3c>
    {
        target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    c9ba:	200c      	movs	r0, #12
    c9bc:	f01d f842 	bl	29a44 <malloc>
    c9c0:	4603      	mov	r3, r0
    c9c2:	461a      	mov	r2, r3
    c9c4:	687b      	ldr	r3, [r7, #4]
    c9c6:	609a      	str	r2, [r3, #8]
        if (target->byteArr == NULL)
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	689b      	ldr	r3, [r3, #8]
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d102      	bne.n	c9d6 <cosem_getByteBuffer+0x32>
        {
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    c9d0:	f44f 7382 	mov.w	r3, #260	; 0x104
    c9d4:	e005      	b.n	c9e2 <cosem_getByteBuffer+0x3e>
        }
        bb_init(target->byteArr);
    c9d6:	687b      	ldr	r3, [r7, #4]
    c9d8:	689b      	ldr	r3, [r3, #8]
    c9da:	4618      	mov	r0, r3
    c9dc:	f7f6 f984 	bl	2ce8 <bb_init>
    }
    return 0;
    c9e0:	2300      	movs	r3, #0
}
    c9e2:	4618      	mov	r0, r3
    c9e4:	3708      	adds	r7, #8
    c9e6:	46bd      	mov	sp, r7
    c9e8:	bd80      	pop	{r7, pc}
    c9ea:	bf00      	nop

0000c9ec <cosem_getData>:

#ifndef DLMS_IGNORE_DATA
int cosem_getData(gxValueEventArg *e)
{
    c9ec:	b580      	push	{r7, lr}
    c9ee:	b084      	sub	sp, #16
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK;
    c9f4:	2300      	movs	r3, #0
    c9f6:	60fb      	str	r3, [r7, #12]
    if (e->index == 2)
    c9f8:	687b      	ldr	r3, [r7, #4]
    c9fa:	7e1b      	ldrb	r3, [r3, #24]
    c9fc:	2b02      	cmp	r3, #2
    c9fe:	d109      	bne.n	ca14 <cosem_getData+0x28>
    {
        return var_copy(&e->value, &((gxData*)e->target)->value);
    ca00:	687a      	ldr	r2, [r7, #4]
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	695b      	ldr	r3, [r3, #20]
    ca06:	3310      	adds	r3, #16
    ca08:	4619      	mov	r1, r3
    ca0a:	4610      	mov	r0, r2
    ca0c:	f01b f9b2 	bl	27d74 <var_copy>
    ca10:	4603      	mov	r3, r0
    ca12:	e003      	b.n	ca1c <cosem_getData+0x30>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    ca14:	f44f 7381 	mov.w	r3, #258	; 0x102
    ca18:	60fb      	str	r3, [r7, #12]
    }
    return ret;
    ca1a:	68fb      	ldr	r3, [r7, #12]
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3710      	adds	r7, #16
    ca20:	46bd      	mov	sp, r7
    ca22:	bd80      	pop	{r7, pc}

0000ca24 <cosem_getRegister>:
#endif //DLMS_IGNORE_DATA
#ifndef DLMS_IGNORE_REGISTER
int cosem_getRegister(
    gxValueEventArg *e)
{
    ca24:	b580      	push	{r7, lr}
    ca26:	b084      	sub	sp, #16
    ca28:	af00      	add	r7, sp, #0
    ca2a:	6078      	str	r0, [r7, #4]
    if (e->index == 2)
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	7e1b      	ldrb	r3, [r3, #24]
    ca30:	2b02      	cmp	r3, #2
    ca32:	d109      	bne.n	ca48 <cosem_getRegister+0x24>
    {
        return var_copy(&e->value, &((gxRegister*)e->target)->value);
    ca34:	687a      	ldr	r2, [r7, #4]
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	695b      	ldr	r3, [r3, #20]
    ca3a:	3310      	adds	r3, #16
    ca3c:	4619      	mov	r1, r3
    ca3e:	4610      	mov	r0, r2
    ca40:	f01b f998 	bl	27d74 <var_copy>
    ca44:	4603      	mov	r3, r0
    ca46:	e053      	b.n	caf0 <cosem_getRegister+0xcc>
    }
    else if (e->index == 3)
    ca48:	687b      	ldr	r3, [r7, #4]
    ca4a:	7e1b      	ldrb	r3, [r3, #24]
    ca4c:	2b03      	cmp	r3, #3
    ca4e:	d14b      	bne.n	cae8 <cosem_getRegister+0xc4>
    {
        int ret;
        e->byteArray = 1;
    ca50:	687b      	ldr	r3, [r7, #4]
    ca52:	2201      	movs	r2, #1
    ca54:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	4618      	mov	r0, r3
    ca5c:	f7ff ffa2 	bl	c9a4 <cosem_getByteBuffer>
    ca60:	60f8      	str	r0, [r7, #12]
    ca62:	68fb      	ldr	r3, [r7, #12]
    ca64:	2b00      	cmp	r3, #0
    ca66:	d001      	beq.n	ca6c <cosem_getRegister+0x48>
        {
            return ret;
    ca68:	68fb      	ldr	r3, [r7, #12]
    ca6a:	e041      	b.n	caf0 <cosem_getRegister+0xcc>
        }
        gxByteBuffer *data = e->value.byteArr;
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	689b      	ldr	r3, [r3, #8]
    ca70:	60bb      	str	r3, [r7, #8]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    ca72:	2102      	movs	r1, #2
    ca74:	68b8      	ldr	r0, [r7, #8]
    ca76:	f7f6 f9cd 	bl	2e14 <bb_setUInt8>
    ca7a:	60f8      	str	r0, [r7, #12]
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d130      	bne.n	cae4 <cosem_getRegister+0xc0>
    ca82:	2102      	movs	r1, #2
    ca84:	68b8      	ldr	r0, [r7, #8]
    ca86:	f7f6 f9c5 	bl	2e14 <bb_setUInt8>
    ca8a:	60f8      	str	r0, [r7, #12]
    ca8c:	68fb      	ldr	r3, [r7, #12]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d128      	bne.n	cae4 <cosem_getRegister+0xc0>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    ca92:	210f      	movs	r1, #15
    ca94:	68b8      	ldr	r0, [r7, #8]
    ca96:	f7f6 f9bd 	bl	2e14 <bb_setUInt8>
    ca9a:	60f8      	str	r0, [r7, #12]
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d120      	bne.n	cae4 <cosem_getRegister+0xc0>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
    caa2:	687b      	ldr	r3, [r7, #4]
    caa4:	695b      	ldr	r3, [r3, #20]
    caa6:	f993 3020 	ldrsb.w	r3, [r3, #32]
    caaa:	b2db      	uxtb	r3, r3
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    caac:	4619      	mov	r1, r3
    caae:	68b8      	ldr	r0, [r7, #8]
    cab0:	f7f6 fd14 	bl	34dc <bb_setInt8>
    cab4:	60f8      	str	r0, [r7, #12]
    cab6:	68fb      	ldr	r3, [r7, #12]
    cab8:	2b00      	cmp	r3, #0
    caba:	d113      	bne.n	cae4 <cosem_getRegister+0xc0>
            (ret = bb_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
    cabc:	2116      	movs	r1, #22
    cabe:	68b8      	ldr	r0, [r7, #8]
    cac0:	f7f6 f9a8 	bl	2e14 <bb_setUInt8>
    cac4:	60f8      	str	r0, [r7, #12]
    cac6:	68fb      	ldr	r3, [r7, #12]
    cac8:	2b00      	cmp	r3, #0
    caca:	d10b      	bne.n	cae4 <cosem_getRegister+0xc0>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, ((gxRegister*)e->target)->unit)) != 0)
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	695b      	ldr	r3, [r3, #20]
    cad0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        gxByteBuffer *data = e->value.byteArr;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    cad4:	4619      	mov	r1, r3
    cad6:	68b8      	ldr	r0, [r7, #8]
    cad8:	f7f6 f99c 	bl	2e14 <bb_setUInt8>
    cadc:	60f8      	str	r0, [r7, #12]
    cade:	68fb      	ldr	r3, [r7, #12]
    cae0:	2b00      	cmp	r3, #0
    cae2:	d004      	beq.n	caee <cosem_getRegister+0xca>
            (ret = bb_setUInt8(data, ((gxRegister*)e->target)->unit)) != 0)
        {
            return ret;
    cae4:	68fb      	ldr	r3, [r7, #12]
    cae6:	e003      	b.n	caf0 <cosem_getRegister+0xcc>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    cae8:	f44f 7381 	mov.w	r3, #258	; 0x102
    caec:	e000      	b.n	caf0 <cosem_getRegister+0xcc>
    }
    return DLMS_ERROR_CODE_OK;
    caee:	2300      	movs	r3, #0
}
    caf0:	4618      	mov	r0, r3
    caf2:	3710      	adds	r7, #16
    caf4:	46bd      	mov	sp, r7
    caf6:	bd80      	pop	{r7, pc}

0000caf8 <cosem_getRegisterTable>:
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_REGISTER_TABLE
int cosem_getRegisterTable(
    gxValueEventArg *e)
{
    caf8:	b580      	push	{r7, lr}
    cafa:	b084      	sub	sp, #16
    cafc:	af00      	add	r7, sp, #0
    cafe:	6078      	str	r0, [r7, #4]
    int ret;
    if (e->index == 2)
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	7e1b      	ldrb	r3, [r3, #24]
    cb04:	2b02      	cmp	r3, #2
    cb06:	d102      	bne.n	cb0e <cosem_getRegisterTable+0x16>
    {
        ret = DLMS_ERROR_CODE_OK;
    cb08:	2300      	movs	r3, #0
    cb0a:	60fb      	str	r3, [r7, #12]
    cb0c:	e052      	b.n	cbb4 <cosem_getRegisterTable+0xbc>
        //TODO:  ret = var_copy(&e->value, &((gxRegisterTable*)e->target)->value);
    }
    else if (e->index == 4)
    cb0e:	687b      	ldr	r3, [r7, #4]
    cb10:	7e1b      	ldrb	r3, [r3, #24]
    cb12:	2b04      	cmp	r3, #4
    cb14:	d14b      	bne.n	cbae <cosem_getRegisterTable+0xb6>
    {
        e->byteArray = 1;
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	2201      	movs	r2, #1
    cb1a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	4618      	mov	r0, r3
    cb22:	f7ff ff3f 	bl	c9a4 <cosem_getByteBuffer>
    cb26:	60f8      	str	r0, [r7, #12]
    cb28:	68fb      	ldr	r3, [r7, #12]
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	d001      	beq.n	cb32 <cosem_getRegisterTable+0x3a>
        {
            return ret;
    cb2e:	68fb      	ldr	r3, [r7, #12]
    cb30:	e041      	b.n	cbb6 <cosem_getRegisterTable+0xbe>
        }
        gxByteBuffer *data = e->value.byteArr;
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	689b      	ldr	r3, [r3, #8]
    cb36:	60bb      	str	r3, [r7, #8]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    cb38:	2102      	movs	r1, #2
    cb3a:	68b8      	ldr	r0, [r7, #8]
    cb3c:	f7f6 f96a 	bl	2e14 <bb_setUInt8>
    cb40:	60f8      	str	r0, [r7, #12]
    cb42:	68fb      	ldr	r3, [r7, #12]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d130      	bne.n	cbaa <cosem_getRegisterTable+0xb2>
    cb48:	2102      	movs	r1, #2
    cb4a:	68b8      	ldr	r0, [r7, #8]
    cb4c:	f7f6 f962 	bl	2e14 <bb_setUInt8>
    cb50:	60f8      	str	r0, [r7, #12]
    cb52:	68fb      	ldr	r3, [r7, #12]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d128      	bne.n	cbaa <cosem_getRegisterTable+0xb2>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    cb58:	210f      	movs	r1, #15
    cb5a:	68b8      	ldr	r0, [r7, #8]
    cb5c:	f7f6 f95a 	bl	2e14 <bb_setUInt8>
    cb60:	60f8      	str	r0, [r7, #12]
    cb62:	68fb      	ldr	r3, [r7, #12]
    cb64:	2b00      	cmp	r3, #0
    cb66:	d120      	bne.n	cbaa <cosem_getRegisterTable+0xb2>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
    cb68:	687b      	ldr	r3, [r7, #4]
    cb6a:	695b      	ldr	r3, [r3, #20]
    cb6c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    cb70:	b2db      	uxtb	r3, r3
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    cb72:	4619      	mov	r1, r3
    cb74:	68b8      	ldr	r0, [r7, #8]
    cb76:	f7f6 fcb1 	bl	34dc <bb_setInt8>
    cb7a:	60f8      	str	r0, [r7, #12]
    cb7c:	68fb      	ldr	r3, [r7, #12]
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d113      	bne.n	cbaa <cosem_getRegisterTable+0xb2>
            (ret = bb_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
    cb82:	2116      	movs	r1, #22
    cb84:	68b8      	ldr	r0, [r7, #8]
    cb86:	f7f6 f945 	bl	2e14 <bb_setUInt8>
    cb8a:	60f8      	str	r0, [r7, #12]
    cb8c:	68fb      	ldr	r3, [r7, #12]
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d10b      	bne.n	cbaa <cosem_getRegisterTable+0xb2>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, ((gxRegisterTable*)e->target)->unit)) != 0)
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	695b      	ldr	r3, [r3, #20]
    cb96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
        gxByteBuffer *data = e->value.byteArr;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    cb9a:	4619      	mov	r1, r3
    cb9c:	68b8      	ldr	r0, [r7, #8]
    cb9e:	f7f6 f939 	bl	2e14 <bb_setUInt8>
    cba2:	60f8      	str	r0, [r7, #12]
    cba4:	68fb      	ldr	r3, [r7, #12]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d004      	beq.n	cbb4 <cosem_getRegisterTable+0xbc>
            (ret = bb_setUInt8(data, ((gxRegisterTable*)e->target)->unit)) != 0)
        {
            return ret;
    cbaa:	68fb      	ldr	r3, [r7, #12]
    cbac:	e003      	b.n	cbb6 <cosem_getRegisterTable+0xbe>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    cbae:	f44f 7381 	mov.w	r3, #258	; 0x102
    cbb2:	60fb      	str	r3, [r7, #12]
    }
    return ret;
    cbb4:	68fb      	ldr	r3, [r7, #12]
}
    cbb6:	4618      	mov	r0, r3
    cbb8:	3710      	adds	r7, #16
    cbba:	46bd      	mov	sp, r7
    cbbc:	bd80      	pop	{r7, pc}
    cbbe:	bf00      	nop

0000cbc0 <cosem_getClock>:
#endif //DLMS_IGNORE_REGISTER_TABLE
#ifndef DLMS_IGNORE_CLOCK
int cosem_getClock(
    gxValueEventArg *e)
{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b084      	sub	sp, #16
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
    int ret;
    if (e->index == 2)
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	7e1b      	ldrb	r3, [r3, #24]
    cbcc:	2b02      	cmp	r3, #2
    cbce:	d109      	bne.n	cbe4 <cosem_getClock+0x24>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &((gxClock*)e->target)->time);
    cbd0:	687a      	ldr	r2, [r7, #4]
    cbd2:	687b      	ldr	r3, [r7, #4]
    cbd4:	695b      	ldr	r3, [r3, #20]
    cbd6:	337c      	adds	r3, #124	; 0x7c
    cbd8:	4619      	mov	r1, r3
    cbda:	4610      	mov	r0, r2
    cbdc:	f01b fa86 	bl	280ec <var_setDateTimeAsOctetString>
    cbe0:	60f8      	str	r0, [r7, #12]
    cbe2:	e068      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 3)
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	7e1b      	ldrb	r3, [r3, #24]
    cbe8:	2b03      	cmp	r3, #3
    cbea:	d10a      	bne.n	cc02 <cosem_getClock+0x42>
    {
        ret = var_setInt16(&e->value, ((gxClock*)e->target)->timeZone);
    cbec:	687a      	ldr	r2, [r7, #4]
    cbee:	687b      	ldr	r3, [r7, #4]
    cbf0:	695b      	ldr	r3, [r3, #20]
    cbf2:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
    cbf6:	4619      	mov	r1, r3
    cbf8:	4610      	mov	r0, r2
    cbfa:	f019 f9df 	bl	25fbc <var_setInt16>
    cbfe:	60f8      	str	r0, [r7, #12]
    cc00:	e059      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 4)
    cc02:	687b      	ldr	r3, [r7, #4]
    cc04:	7e1b      	ldrb	r3, [r3, #24]
    cc06:	2b04      	cmp	r3, #4
    cc08:	d10a      	bne.n	cc20 <cosem_getClock+0x60>
    {
        ret = var_setUInt8(&e->value, ((gxClock*)e->target)->status);
    cc0a:	687a      	ldr	r2, [r7, #4]
    cc0c:	687b      	ldr	r3, [r7, #4]
    cc0e:	695b      	ldr	r3, [r3, #20]
    cc10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    cc14:	4619      	mov	r1, r3
    cc16:	4610      	mov	r0, r2
    cc18:	f019 f97e 	bl	25f18 <var_setUInt8>
    cc1c:	60f8      	str	r0, [r7, #12]
    cc1e:	e04a      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 5)
    cc20:	687b      	ldr	r3, [r7, #4]
    cc22:	7e1b      	ldrb	r3, [r3, #24]
    cc24:	2b05      	cmp	r3, #5
    cc26:	d109      	bne.n	cc3c <cosem_getClock+0x7c>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &((gxClock*)e->target)->begin);
    cc28:	687a      	ldr	r2, [r7, #4]
    cc2a:	687b      	ldr	r3, [r7, #4]
    cc2c:	695b      	ldr	r3, [r3, #20]
    cc2e:	3348      	adds	r3, #72	; 0x48
    cc30:	4619      	mov	r1, r3
    cc32:	4610      	mov	r0, r2
    cc34:	f01b fa5a 	bl	280ec <var_setDateTimeAsOctetString>
    cc38:	60f8      	str	r0, [r7, #12]
    cc3a:	e03c      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 6)
    cc3c:	687b      	ldr	r3, [r7, #4]
    cc3e:	7e1b      	ldrb	r3, [r3, #24]
    cc40:	2b06      	cmp	r3, #6
    cc42:	d109      	bne.n	cc58 <cosem_getClock+0x98>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &((gxClock*)e->target)->end);
    cc44:	687a      	ldr	r2, [r7, #4]
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	695b      	ldr	r3, [r3, #20]
    cc4a:	3314      	adds	r3, #20
    cc4c:	4619      	mov	r1, r3
    cc4e:	4610      	mov	r0, r2
    cc50:	f01b fa4c 	bl	280ec <var_setDateTimeAsOctetString>
    cc54:	60f8      	str	r0, [r7, #12]
    cc56:	e02e      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 7)
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	7e1b      	ldrb	r3, [r3, #24]
    cc5c:	2b07      	cmp	r3, #7
    cc5e:	d10b      	bne.n	cc78 <cosem_getClock+0xb8>
    {
        ret = var_setInt8(&e->value, ((gxClock*)e->target)->deviation);
    cc60:	687a      	ldr	r2, [r7, #4]
    cc62:	687b      	ldr	r3, [r7, #4]
    cc64:	695b      	ldr	r3, [r3, #20]
    cc66:	f993 3011 	ldrsb.w	r3, [r3, #17]
    cc6a:	b2db      	uxtb	r3, r3
    cc6c:	4619      	mov	r1, r3
    cc6e:	4610      	mov	r0, r2
    cc70:	f019 f98e 	bl	25f90 <var_setInt8>
    cc74:	60f8      	str	r0, [r7, #12]
    cc76:	e01e      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 8)
    cc78:	687b      	ldr	r3, [r7, #4]
    cc7a:	7e1b      	ldrb	r3, [r3, #24]
    cc7c:	2b08      	cmp	r3, #8
    cc7e:	d109      	bne.n	cc94 <cosem_getClock+0xd4>
    {
        ret = var_setBoolean(&e->value, ((gxClock*)e->target)->enabled);
    cc80:	687a      	ldr	r2, [r7, #4]
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	695b      	ldr	r3, [r3, #20]
    cc86:	7c9b      	ldrb	r3, [r3, #18]
    cc88:	4619      	mov	r1, r3
    cc8a:	4610      	mov	r0, r2
    cc8c:	f01b fa96 	bl	281bc <var_setBoolean>
    cc90:	60f8      	str	r0, [r7, #12]
    cc92:	e010      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else if (e->index == 9)
    cc94:	687b      	ldr	r3, [r7, #4]
    cc96:	7e1b      	ldrb	r3, [r3, #24]
    cc98:	2b09      	cmp	r3, #9
    cc9a:	d109      	bne.n	ccb0 <cosem_getClock+0xf0>
    {
        ret = var_setEnum(&e->value, ((gxClock*)e->target)->clockBase);
    cc9c:	687a      	ldr	r2, [r7, #4]
    cc9e:	687b      	ldr	r3, [r7, #4]
    cca0:	695b      	ldr	r3, [r3, #20]
    cca2:	7c1b      	ldrb	r3, [r3, #16]
    cca4:	4619      	mov	r1, r3
    cca6:	4610      	mov	r0, r2
    cca8:	f019 f922 	bl	25ef0 <var_setEnum>
    ccac:	60f8      	str	r0, [r7, #12]
    ccae:	e002      	b.n	ccb6 <cosem_getClock+0xf6>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    ccb0:	f44f 7381 	mov.w	r3, #258	; 0x102
    ccb4:	60fb      	str	r3, [r7, #12]
    }
    return ret;
    ccb6:	68fb      	ldr	r3, [r7, #12]
}
    ccb8:	4618      	mov	r0, r3
    ccba:	3710      	adds	r7, #16
    ccbc:	46bd      	mov	sp, r7
    ccbe:	bd80      	pop	{r7, pc}

0000ccc0 <cosem_getActionSchedule>:
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
int cosem_getActionSchedule(
    gxValueEventArg *e)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b08c      	sub	sp, #48	; 0x30
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK, pos;
    ccc8:	2300      	movs	r3, #0
    ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
    gxtime *tm;
    dlmsVARIANT tmp;
    if (e->index == 2)
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	7e1b      	ldrb	r3, [r3, #24]
    ccd0:	2b02      	cmp	r3, #2
    ccd2:	d152      	bne.n	cd7a <cosem_getActionSchedule+0xba>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	4618      	mov	r0, r3
    ccd8:	f7ff fe64 	bl	c9a4 <cosem_getByteBuffer>
    ccdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cce0:	2b00      	cmp	r3, #0
    cce2:	d001      	beq.n	cce8 <cosem_getActionSchedule+0x28>
        {
            return ret;
    cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cce6:	e0ee      	b.n	cec6 <cosem_getActionSchedule+0x206>
        }
        gxByteBuffer *data = e->value.byteArr;
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	689b      	ldr	r3, [r3, #8]
    ccec:	627b      	str	r3, [r7, #36]	; 0x24
        e->byteArray = 1;
    ccee:	687b      	ldr	r3, [r7, #4]
    ccf0:	2201      	movs	r2, #1
    ccf2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    ccf6:	2102      	movs	r1, #2
    ccf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ccfa:	f7f6 f88b 	bl	2e14 <bb_setUInt8>
    ccfe:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd02:	2b00      	cmp	r3, #0
    cd04:	d137      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
    cd06:	2102      	movs	r1, #2
    cd08:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cd0a:	f7f6 f883 	bl	2e14 <bb_setUInt8>
    cd0e:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd12:	2b00      	cmp	r3, #0
    cd14:	d12f      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    cd16:	2109      	movs	r1, #9
    cd18:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cd1a:	f7f6 f87b 	bl	2e14 <bb_setUInt8>
    cd1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd22:	2b00      	cmp	r3, #0
    cd24:	d127      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
            //Add LN.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    cd26:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cd28:	2006      	movs	r0, #6
    cd2a:	f014 fdd7 	bl	218dc <hlp_setObjectCount>
    cd2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd32:	2b00      	cmp	r3, #0
    cd34:	d11f      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
            (ret = bb_set(data, ((gxActionSchedule*)e->target)->executedScriptLogicalName, 6)) != 0 ||
    cd36:	687b      	ldr	r3, [r7, #4]
    cd38:	695b      	ldr	r3, [r3, #20]
    cd3a:	3310      	adds	r3, #16
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //Add LN.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(6, data)) != 0 ||
    cd3c:	2206      	movs	r2, #6
    cd3e:	4619      	mov	r1, r3
    cd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cd42:	f7f6 fc0d 	bl	3560 <bb_set>
    cd46:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd4a:	2b00      	cmp	r3, #0
    cd4c:	d113      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
            (ret = bb_set(data, ((gxActionSchedule*)e->target)->executedScriptLogicalName, 6)) != 0 ||
    cd4e:	2112      	movs	r1, #18
    cd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cd52:	f7f6 f85f 	bl	2e14 <bb_setUInt8>
    cd56:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	d10b      	bne.n	cd76 <cosem_getActionSchedule+0xb6>
            //Add executed script selector.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxActionSchedule*)e->target)->executedScriptSelector)) != 0)
    cd5e:	687b      	ldr	r3, [r7, #4]
    cd60:	695b      	ldr	r3, [r3, #20]
    cd62:	8adb      	ldrh	r3, [r3, #22]
            //Add LN.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(6, data)) != 0 ||
            (ret = bb_set(data, ((gxActionSchedule*)e->target)->executedScriptLogicalName, 6)) != 0 ||
            //Add executed script selector.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    cd64:	4619      	mov	r1, r3
    cd66:	6a78      	ldr	r0, [r7, #36]	; 0x24
    cd68:	f7f6 f8e6 	bl	2f38 <bb_setUInt16>
    cd6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd70:	2b00      	cmp	r3, #0
    cd72:	f000 80a7 	beq.w	cec4 <cosem_getActionSchedule+0x204>
            (ret = bb_setUInt16(data, ((gxActionSchedule*)e->target)->executedScriptSelector)) != 0)
        {
            return ret;
    cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd78:	e0a5      	b.n	cec6 <cosem_getActionSchedule+0x206>
        }
    }
    else if (e->index == 3)
    cd7a:	687b      	ldr	r3, [r7, #4]
    cd7c:	7e1b      	ldrb	r3, [r3, #24]
    cd7e:	2b03      	cmp	r3, #3
    cd80:	d109      	bne.n	cd96 <cosem_getActionSchedule+0xd6>
    {
        ret = var_setEnum(&e->value, ((gxActionSchedule*)e->target)->type);
    cd82:	687a      	ldr	r2, [r7, #4]
    cd84:	687b      	ldr	r3, [r7, #4]
    cd86:	695b      	ldr	r3, [r3, #20]
    cd88:	7e1b      	ldrb	r3, [r3, #24]
    cd8a:	4619      	mov	r1, r3
    cd8c:	4610      	mov	r0, r2
    cd8e:	f019 f8af 	bl	25ef0 <var_setEnum>
    cd92:	62f8      	str	r0, [r7, #44]	; 0x2c
    cd94:	e096      	b.n	cec4 <cosem_getActionSchedule+0x204>
    }
    else if (e->index == 4)
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	7e1b      	ldrb	r3, [r3, #24]
    cd9a:	2b04      	cmp	r3, #4
    cd9c:	f040 808f 	bne.w	cebe <cosem_getActionSchedule+0x1fe>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    cda0:	687b      	ldr	r3, [r7, #4]
    cda2:	4618      	mov	r0, r3
    cda4:	f7ff fdfe 	bl	c9a4 <cosem_getByteBuffer>
    cda8:	62f8      	str	r0, [r7, #44]	; 0x2c
    cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdac:	2b00      	cmp	r3, #0
    cdae:	d001      	beq.n	cdb4 <cosem_getActionSchedule+0xf4>
        {
            return ret;
    cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdb2:	e088      	b.n	cec6 <cosem_getActionSchedule+0x206>
        }
        gxByteBuffer *data = e->value.byteArr;
    cdb4:	687b      	ldr	r3, [r7, #4]
    cdb6:	689b      	ldr	r3, [r3, #8]
    cdb8:	623b      	str	r3, [r7, #32]
        e->byteArray = 1;
    cdba:	687b      	ldr	r3, [r7, #4]
    cdbc:	2201      	movs	r2, #1
    cdbe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    cdc2:	2101      	movs	r1, #1
    cdc4:	6a38      	ldr	r0, [r7, #32]
    cdc6:	f7f6 f825 	bl	2e14 <bb_setUInt8>
    cdca:	62f8      	str	r0, [r7, #44]	; 0x2c
    cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d113      	bne.n	cdfa <cosem_getActionSchedule+0x13a>
            (ret = hlp_setObjectCount(((gxActionSchedule*)e->target)->executionTime.size, data)) != 0 ||
    cdd2:	687b      	ldr	r3, [r7, #4]
    cdd4:	695b      	ldr	r3, [r3, #20]
    cdd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    cdd8:	6a39      	ldr	r1, [r7, #32]
    cdda:	4618      	mov	r0, r3
    cddc:	f014 fd7e 	bl	218dc <hlp_setObjectCount>
    cde0:	62f8      	str	r0, [r7, #44]	; 0x2c
    cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cde4:	2b00      	cmp	r3, #0
    cde6:	d108      	bne.n	cdfa <cosem_getActionSchedule+0x13a>
            (ret = hlp_setObjectCount(((gxActionSchedule*)e->target)->executionTime.size, data)) != 0 ||
    cde8:	f107 0308 	add.w	r3, r7, #8
    cdec:	4618      	mov	r0, r3
    cdee:	f019 f99b 	bl	26128 <var_init>
    cdf2:	62f8      	str	r0, [r7, #44]	; 0x2c
    cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d001      	beq.n	cdfe <cosem_getActionSchedule+0x13e>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
    cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdfc:	e063      	b.n	cec6 <cosem_getActionSchedule+0x206>
        }

        for (pos = 0; pos != ((gxActionSchedule*)e->target)->executionTime.size; ++pos)
    cdfe:	2300      	movs	r3, #0
    ce00:	62bb      	str	r3, [r7, #40]	; 0x28
    ce02:	e04a      	b.n	ce9a <cosem_getActionSchedule+0x1da>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    ce04:	2102      	movs	r1, #2
    ce06:	6a38      	ldr	r0, [r7, #32]
    ce08:	f7f6 f804 	bl	2e14 <bb_setUInt8>
    ce0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce10:	2b00      	cmp	r3, #0
    ce12:	d14d      	bne.n	ceb0 <cosem_getActionSchedule+0x1f0>
    ce14:	2102      	movs	r1, #2
    ce16:	6a38      	ldr	r0, [r7, #32]
    ce18:	f7f5 fffc 	bl	2e14 <bb_setUInt8>
    ce1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce20:	2b00      	cmp	r3, #0
    ce22:	d145      	bne.n	ceb0 <cosem_getActionSchedule+0x1f0>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&((gxActionSchedule*)e->target)->executionTime, pos, (void**)&tm)) != 0 ||
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	695b      	ldr	r3, [r3, #20]
    ce28:	331c      	adds	r3, #28
        }

        for (pos = 0; pos != ((gxActionSchedule*)e->target)->executionTime.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
    ce2a:	f107 021c 	add.w	r2, r7, #28
    ce2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ce30:	4618      	mov	r0, r3
    ce32:	f7ff fce3 	bl	c7fc <arr_getByIndex>
    ce36:	62f8      	str	r0, [r7, #44]	; 0x2c
    ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d138      	bne.n	ceb0 <cosem_getActionSchedule+0x1f0>
                (ret = arr_getByIndex(&((gxActionSchedule*)e->target)->executionTime, pos, (void**)&tm)) != 0 ||
                (ret = var_setDateTime(&tmp, tm)) != 0)
    ce3e:	69fa      	ldr	r2, [r7, #28]

        for (pos = 0; pos != ((gxActionSchedule*)e->target)->executionTime.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&((gxActionSchedule*)e->target)->executionTime, pos, (void**)&tm)) != 0 ||
    ce40:	f107 0308 	add.w	r3, r7, #8
    ce44:	4611      	mov	r1, r2
    ce46:	4618      	mov	r0, r3
    ce48:	f01b f8e4 	bl	28014 <var_setDateTime>
    ce4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce50:	2b00      	cmp	r3, #0
    ce52:	d12d      	bne.n	ceb0 <cosem_getActionSchedule+0x1f0>
                (ret = var_setDateTime(&tmp, tm)) != 0)
            {
                break;
            }
            tmp.vt = DLMS_DATA_TYPE_TIME;
    ce54:	231b      	movs	r3, #27
    ce56:	723b      	strb	r3, [r7, #8]
            ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data);
    ce58:	f107 0308 	add.w	r3, r7, #8
    ce5c:	6a3a      	ldr	r2, [r7, #32]
    ce5e:	2109      	movs	r1, #9
    ce60:	4618      	mov	r0, r3
    ce62:	f019 fc31 	bl	266c8 <var_getBytes2>
    ce66:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (ret != 0)
    ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d11d      	bne.n	ceaa <cosem_getActionSchedule+0x1ea>
            {
                break;
            }
            tmp.vt = DLMS_DATA_TYPE_DATE;
    ce6e:	231a      	movs	r3, #26
    ce70:	723b      	strb	r3, [r7, #8]
            ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data);
    ce72:	f107 0308 	add.w	r3, r7, #8
    ce76:	6a3a      	ldr	r2, [r7, #32]
    ce78:	2109      	movs	r1, #9
    ce7a:	4618      	mov	r0, r3
    ce7c:	f019 fc24 	bl	266c8 <var_getBytes2>
    ce80:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (ret != 0)
    ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce84:	2b00      	cmp	r3, #0
    ce86:	d112      	bne.n	ceae <cosem_getActionSchedule+0x1ee>
            {
                break;
            }
            ret = var_clear(&tmp);
    ce88:	f107 0308 	add.w	r3, r7, #8
    ce8c:	4618      	mov	r0, r3
    ce8e:	f019 f95b 	bl	26148 <var_clear>
    ce92:	62f8      	str	r0, [r7, #44]	; 0x2c
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }

        for (pos = 0; pos != ((gxActionSchedule*)e->target)->executionTime.size; ++pos)
    ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ce96:	3301      	adds	r3, #1
    ce98:	62bb      	str	r3, [r7, #40]	; 0x28
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	695b      	ldr	r3, [r3, #20]
    ce9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    cea0:	461a      	mov	r2, r3
    cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cea4:	429a      	cmp	r2, r3
    cea6:	d1ad      	bne.n	ce04 <cosem_getActionSchedule+0x144>
    cea8:	e002      	b.n	ceb0 <cosem_getActionSchedule+0x1f0>
            }
            tmp.vt = DLMS_DATA_TYPE_TIME;
            ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data);
            if (ret != 0)
            {
                break;
    ceaa:	bf00      	nop
    ceac:	e000      	b.n	ceb0 <cosem_getActionSchedule+0x1f0>
            }
            tmp.vt = DLMS_DATA_TYPE_DATE;
            ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data);
            if (ret != 0)
            {
                break;
    ceae:	bf00      	nop
            }
            ret = var_clear(&tmp);
        }
        ret = var_clear(&tmp);
    ceb0:	f107 0308 	add.w	r3, r7, #8
    ceb4:	4618      	mov	r0, r3
    ceb6:	f019 f947 	bl	26148 <var_clear>
    ceba:	62f8      	str	r0, [r7, #44]	; 0x2c
    cebc:	e002      	b.n	cec4 <cosem_getActionSchedule+0x204>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    cebe:	f44f 7381 	mov.w	r3, #258	; 0x102
    cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return ret;
    cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    cec6:	4618      	mov	r0, r3
    cec8:	3730      	adds	r7, #48	; 0x30
    ceca:	46bd      	mov	sp, r7
    cecc:	bd80      	pop	{r7, pc}
    cece:	bf00      	nop

0000ced0 <getActivityCalendarDayProfileTable>:
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int getActivityCalendarDayProfileTable(gxArray* list, gxByteBuffer* ba)
{
    ced0:	b580      	push	{r7, lr}
    ced2:	b08c      	sub	sp, #48	; 0x30
    ced4:	af00      	add	r7, sp, #0
    ced6:	6078      	str	r0, [r7, #4]
    ced8:	6039      	str	r1, [r7, #0]
    dlmsVARIANT tmp;
    gxDayProfile* dp;
    gxDayProfileAction *action;
    int ret, pos, pos2;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    ceda:	2101      	movs	r1, #1
    cedc:	6838      	ldr	r0, [r7, #0]
    cede:	f7f5 ff99 	bl	2e14 <bb_setUInt8>
    cee2:	62f8      	str	r0, [r7, #44]	; 0x2c
    cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cee6:	2b00      	cmp	r3, #0
    cee8:	d112      	bne.n	cf10 <getActivityCalendarDayProfileTable+0x40>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
    ceea:	687b      	ldr	r3, [r7, #4]
    ceec:	891b      	ldrh	r3, [r3, #8]
{
    dlmsVARIANT tmp;
    gxDayProfile* dp;
    gxDayProfileAction *action;
    int ret, pos, pos2;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    ceee:	6839      	ldr	r1, [r7, #0]
    cef0:	4618      	mov	r0, r3
    cef2:	f014 fcf3 	bl	218dc <hlp_setObjectCount>
    cef6:	62f8      	str	r0, [r7, #44]	; 0x2c
    cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cefa:	2b00      	cmp	r3, #0
    cefc:	d108      	bne.n	cf10 <getActivityCalendarDayProfileTable+0x40>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
    cefe:	f107 0310 	add.w	r3, r7, #16
    cf02:	4618      	mov	r0, r3
    cf04:	f019 f910 	bl	26128 <var_init>
    cf08:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d001      	beq.n	cf14 <getActivityCalendarDayProfileTable+0x44>
        (ret = var_init(&tmp)) != 0)
    {
        return ret;
    cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf12:	e0cd      	b.n	d0b0 <getActivityCalendarDayProfileTable+0x1e0>
    }
    for (pos = 0; pos != list->size; ++pos)
    cf14:	2300      	movs	r3, #0
    cf16:	62bb      	str	r3, [r7, #40]	; 0x28
    cf18:	e0bd      	b.n	d096 <getActivityCalendarDayProfileTable+0x1c6>
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    cf1a:	2102      	movs	r1, #2
    cf1c:	6838      	ldr	r0, [r7, #0]
    cf1e:	f7f5 ff79 	bl	2e14 <bb_setUInt8>
    cf22:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf26:	2b00      	cmp	r3, #0
    cf28:	d136      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
    cf2a:	2102      	movs	r1, #2
    cf2c:	6838      	ldr	r0, [r7, #0]
    cf2e:	f7f5 ff71 	bl	2e14 <bb_setUInt8>
    cf32:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf36:	2b00      	cmp	r3, #0
    cf38:	d12e      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
            (ret = bb_setUInt8(ba, 2)) != 0 ||
    cf3a:	f107 030c 	add.w	r3, r7, #12
    cf3e:	461a      	mov	r2, r3
    cf40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    cf42:	6878      	ldr	r0, [r7, #4]
    cf44:	f7ff fc5a 	bl	c7fc <arr_getByIndex>
    cf48:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d123      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
            (ret = arr_getByIndex(list, pos, (void**)&dp)) != 0 ||
    cf50:	2111      	movs	r1, #17
    cf52:	6838      	ldr	r0, [r7, #0]
    cf54:	f7f5 ff5e 	bl	2e14 <bb_setUInt8>
    cf58:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d11b      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, dp->dayId)) != 0 ||
    cf60:	68fb      	ldr	r3, [r7, #12]
    cf62:	781b      	ldrb	r3, [r3, #0]
    for (pos = 0; pos != list->size; ++pos)
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 2)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&dp)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    cf64:	4619      	mov	r1, r3
    cf66:	6838      	ldr	r0, [r7, #0]
    cf68:	f7f5 ff54 	bl	2e14 <bb_setUInt8>
    cf6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf70:	2b00      	cmp	r3, #0
    cf72:	d111      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
            (ret = bb_setUInt8(ba, dp->dayId)) != 0 ||
    cf74:	2101      	movs	r1, #1
    cf76:	6838      	ldr	r0, [r7, #0]
    cf78:	f7f5 ff4c 	bl	2e14 <bb_setUInt8>
    cf7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf80:	2b00      	cmp	r3, #0
    cf82:	d109      	bne.n	cf98 <getActivityCalendarDayProfileTable+0xc8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            //Add count
            (ret = hlp_setObjectCount(dp->daySchedules.size, ba)) != 0)
    cf84:	68fb      	ldr	r3, [r7, #12]
    cf86:	899b      	ldrh	r3, [r3, #12]
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 2)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&dp)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, dp->dayId)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    cf88:	6839      	ldr	r1, [r7, #0]
    cf8a:	4618      	mov	r0, r3
    cf8c:	f014 fca6 	bl	218dc <hlp_setObjectCount>
    cf90:	62f8      	str	r0, [r7, #44]	; 0x2c
    cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf94:	2b00      	cmp	r3, #0
    cf96:	d001      	beq.n	cf9c <getActivityCalendarDayProfileTable+0xcc>
            //Add count
            (ret = hlp_setObjectCount(dp->daySchedules.size, ba)) != 0)
        {
            return ret;
    cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf9a:	e089      	b.n	d0b0 <getActivityCalendarDayProfileTable+0x1e0>
        }

        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
    cf9c:	2300      	movs	r3, #0
    cf9e:	627b      	str	r3, [r7, #36]	; 0x24
    cfa0:	e070      	b.n	d084 <getActivityCalendarDayProfileTable+0x1b4>
        {
            if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    cfa2:	2102      	movs	r1, #2
    cfa4:	6838      	ldr	r0, [r7, #0]
    cfa6:	f7f5 ff35 	bl	2e14 <bb_setUInt8>
    cfaa:	62f8      	str	r0, [r7, #44]	; 0x2c
    cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfae:	2b00      	cmp	r3, #0
    cfb0:	d160      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
    cfb2:	2103      	movs	r1, #3
    cfb4:	6838      	ldr	r0, [r7, #0]
    cfb6:	f7f5 ff2d 	bl	2e14 <bb_setUInt8>
    cfba:	62f8      	str	r0, [r7, #44]	; 0x2c
    cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d158      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = bb_setUInt8(ba, 3)) != 0 ||
                (ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0 ||
    cfc2:	68fb      	ldr	r3, [r7, #12]
    cfc4:	3304      	adds	r3, #4
        }

        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
        {
            if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(ba, 3)) != 0 ||
    cfc6:	f107 0208 	add.w	r2, r7, #8
    cfca:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cfcc:	4618      	mov	r0, r3
    cfce:	f7ff fc15 	bl	c7fc <arr_getByIndex>
    cfd2:	62f8      	str	r0, [r7, #44]	; 0x2c
    cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d14c      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0 ||
                (ret = var_setTimeAsOctetString(&tmp, &action->startTime)) != 0 ||
    cfda:	68bb      	ldr	r3, [r7, #8]
    cfdc:	461a      	mov	r2, r3

        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
        {
            if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(ba, 3)) != 0 ||
                (ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0 ||
    cfde:	f107 0310 	add.w	r3, r7, #16
    cfe2:	4611      	mov	r1, r2
    cfe4:	4618      	mov	r0, r3
    cfe6:	f01b f8b5 	bl	28154 <var_setTimeAsOctetString>
    cfea:	62f8      	str	r0, [r7, #44]	; 0x2c
    cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfee:	2b00      	cmp	r3, #0
    cff0:	d140      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = var_setTimeAsOctetString(&tmp, &action->startTime)) != 0 ||
    cff2:	f107 0310 	add.w	r3, r7, #16
    cff6:	683a      	ldr	r2, [r7, #0]
    cff8:	2109      	movs	r1, #9
    cffa:	4618      	mov	r0, r3
    cffc:	f019 fb64 	bl	266c8 <var_getBytes2>
    d000:	62f8      	str	r0, [r7, #44]	; 0x2c
    d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d004:	2b00      	cmp	r3, #0
    d006:	d135      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
    d008:	f107 0310 	add.w	r3, r7, #16
    d00c:	4618      	mov	r0, r3
    d00e:	f019 f89b 	bl	26148 <var_clear>
    d012:	62f8      	str	r0, [r7, #44]	; 0x2c
    d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d016:	2b00      	cmp	r3, #0
    d018:	d12c      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = var_clear(&tmp)) != 0 ||
    d01a:	2109      	movs	r1, #9
    d01c:	6838      	ldr	r0, [r7, #0]
    d01e:	f7f5 fef9 	bl	2e14 <bb_setUInt8>
    d022:	62f8      	str	r0, [r7, #44]	; 0x2c
    d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d026:	2b00      	cmp	r3, #0
    d028:	d124      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d02a:	2106      	movs	r1, #6
    d02c:	6838      	ldr	r0, [r7, #0]
    d02e:	f7f5 fef1 	bl	2e14 <bb_setUInt8>
    d032:	62f8      	str	r0, [r7, #44]	; 0x2c
    d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d036:	2b00      	cmp	r3, #0
    d038:	d11c      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = bb_setUInt8(ba, 6)) != 0 ||
                (ret = bb_set(ba, action->scriptLogicalName, 6)) != 0 ||
    d03a:	68bb      	ldr	r3, [r7, #8]
    d03c:	3330      	adds	r3, #48	; 0x30
                (ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0 ||
                (ret = var_setTimeAsOctetString(&tmp, &action->startTime)) != 0 ||
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(ba, 6)) != 0 ||
    d03e:	2206      	movs	r2, #6
    d040:	4619      	mov	r1, r3
    d042:	6838      	ldr	r0, [r7, #0]
    d044:	f7f6 fa8c 	bl	3560 <bb_set>
    d048:	62f8      	str	r0, [r7, #44]	; 0x2c
    d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d04c:	2b00      	cmp	r3, #0
    d04e:	d111      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = bb_set(ba, action->scriptLogicalName, 6)) != 0 ||
    d050:	2112      	movs	r1, #18
    d052:	6838      	ldr	r0, [r7, #0]
    d054:	f7f5 fede 	bl	2e14 <bb_setUInt8>
    d058:	62f8      	str	r0, [r7, #44]	; 0x2c
    d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d05c:	2b00      	cmp	r3, #0
    d05e:	d109      	bne.n	d074 <getActivityCalendarDayProfileTable+0x1a4>
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, action->scriptSelector)) != 0)
    d060:	68bb      	ldr	r3, [r7, #8]
    d062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(ba, 6)) != 0 ||
                (ret = bb_set(ba, action->scriptLogicalName, 6)) != 0 ||
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
    d064:	4619      	mov	r1, r3
    d066:	6838      	ldr	r0, [r7, #0]
    d068:	f7f5 ff66 	bl	2f38 <bb_setUInt16>
    d06c:	62f8      	str	r0, [r7, #44]	; 0x2c
    d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d070:	2b00      	cmp	r3, #0
    d072:	d004      	beq.n	d07e <getActivityCalendarDayProfileTable+0x1ae>
                (ret = bb_setUInt16(ba, action->scriptSelector)) != 0)
                if (ret != 0)
    d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d076:	2b00      	cmp	r3, #0
    d078:	d001      	beq.n	d07e <getActivityCalendarDayProfileTable+0x1ae>
                {
                    return ret;
    d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d07c:	e018      	b.n	d0b0 <getActivityCalendarDayProfileTable+0x1e0>
            (ret = hlp_setObjectCount(dp->daySchedules.size, ba)) != 0)
        {
            return ret;
        }

        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
    d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d080:	3301      	adds	r3, #1
    d082:	627b      	str	r3, [r7, #36]	; 0x24
    d084:	68fb      	ldr	r3, [r7, #12]
    d086:	899b      	ldrh	r3, [r3, #12]
    d088:	461a      	mov	r2, r3
    d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d08c:	429a      	cmp	r2, r3
    d08e:	d188      	bne.n	cfa2 <getActivityCalendarDayProfileTable+0xd2>
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
        (ret = var_init(&tmp)) != 0)
    {
        return ret;
    }
    for (pos = 0; pos != list->size; ++pos)
    d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d092:	3301      	adds	r3, #1
    d094:	62bb      	str	r3, [r7, #40]	; 0x28
    d096:	687b      	ldr	r3, [r7, #4]
    d098:	891b      	ldrh	r3, [r3, #8]
    d09a:	461a      	mov	r2, r3
    d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d09e:	429a      	cmp	r2, r3
    d0a0:	f47f af3b 	bne.w	cf1a <getActivityCalendarDayProfileTable+0x4a>
                {
                    return ret;
                }
        }
    }
    var_clear(&tmp);
    d0a4:	f107 0310 	add.w	r3, r7, #16
    d0a8:	4618      	mov	r0, r3
    d0aa:	f019 f84d 	bl	26148 <var_clear>
    return ret;
    d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    d0b0:	4618      	mov	r0, r3
    d0b2:	3730      	adds	r7, #48	; 0x30
    d0b4:	46bd      	mov	sp, r7
    d0b6:	bd80      	pop	{r7, pc}

0000d0b8 <getActivityCalendarWeekProfileTable>:

int getActivityCalendarWeekProfileTable(gxArray* list, gxByteBuffer* ba)
{
    d0b8:	b590      	push	{r4, r7, lr}
    d0ba:	b087      	sub	sp, #28
    d0bc:	af00      	add	r7, sp, #0
    d0be:	6078      	str	r0, [r7, #4]
    d0c0:	6039      	str	r1, [r7, #0]
    int ret = 0, pos;
    d0c2:	2300      	movs	r3, #0
    d0c4:	617b      	str	r3, [r7, #20]
    gxWeekProfile* wp;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d0c6:	2101      	movs	r1, #1
    d0c8:	6838      	ldr	r0, [r7, #0]
    d0ca:	f7f5 fea3 	bl	2e14 <bb_setUInt8>
    d0ce:	6178      	str	r0, [r7, #20]
    d0d0:	697b      	ldr	r3, [r7, #20]
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d109      	bne.n	d0ea <getActivityCalendarWeekProfileTable+0x32>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0)
    d0d6:	687b      	ldr	r3, [r7, #4]
    d0d8:	891b      	ldrh	r3, [r3, #8]

int getActivityCalendarWeekProfileTable(gxArray* list, gxByteBuffer* ba)
{
    int ret = 0, pos;
    gxWeekProfile* wp;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d0da:	6839      	ldr	r1, [r7, #0]
    d0dc:	4618      	mov	r0, r3
    d0de:	f014 fbfd 	bl	218dc <hlp_setObjectCount>
    d0e2:	6178      	str	r0, [r7, #20]
    d0e4:	697b      	ldr	r3, [r7, #20]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d001      	beq.n	d0ee <getActivityCalendarWeekProfileTable+0x36>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0)
    {
        return ret;
    d0ea:	697b      	ldr	r3, [r7, #20]
    d0ec:	e0cf      	b.n	d28e <getActivityCalendarWeekProfileTable+0x1d6>
    }
    for (pos = 0; pos != list->size; ++pos)
    d0ee:	2300      	movs	r3, #0
    d0f0:	613b      	str	r3, [r7, #16]
    d0f2:	e0c4      	b.n	d27e <getActivityCalendarWeekProfileTable+0x1c6>
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d0f4:	2102      	movs	r1, #2
    d0f6:	6838      	ldr	r0, [r7, #0]
    d0f8:	f7f5 fe8c 	bl	2e14 <bb_setUInt8>
    d0fc:	6178      	str	r0, [r7, #20]
    d0fe:	697b      	ldr	r3, [r7, #20]
    d100:	2b00      	cmp	r3, #0
    d102:	f040 80c3 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
    d106:	2108      	movs	r1, #8
    d108:	6838      	ldr	r0, [r7, #0]
    d10a:	f7f5 fe83 	bl	2e14 <bb_setUInt8>
    d10e:	6178      	str	r0, [r7, #20]
    d110:	697b      	ldr	r3, [r7, #20]
    d112:	2b00      	cmp	r3, #0
    d114:	f040 80ba 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, 8)) != 0 ||
    d118:	f107 030c 	add.w	r3, r7, #12
    d11c:	461a      	mov	r2, r3
    d11e:	6939      	ldr	r1, [r7, #16]
    d120:	6878      	ldr	r0, [r7, #4]
    d122:	f7ff fb6b 	bl	c7fc <arr_getByIndex>
    d126:	6178      	str	r0, [r7, #20]
    d128:	697b      	ldr	r3, [r7, #20]
    d12a:	2b00      	cmp	r3, #0
    d12c:	f040 80ae 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
    d130:	2109      	movs	r1, #9
    d132:	6838      	ldr	r0, [r7, #0]
    d134:	f7f5 fe6e 	bl	2e14 <bb_setUInt8>
    d138:	6178      	str	r0, [r7, #20]
    d13a:	697b      	ldr	r3, [r7, #20]
    d13c:	2b00      	cmp	r3, #0
    d13e:	f040 80a5 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)wp->name.size)) != 0 ||
    d142:	68fb      	ldr	r3, [r7, #12]
    d144:	88db      	ldrh	r3, [r3, #6]
    d146:	b2db      	uxtb	r3, r3
    for (pos = 0; pos != list->size; ++pos)
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 8)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d148:	4619      	mov	r1, r3
    d14a:	6838      	ldr	r0, [r7, #0]
    d14c:	f7f5 fe62 	bl	2e14 <bb_setUInt8>
    d150:	6178      	str	r0, [r7, #20]
    d152:	697b      	ldr	r3, [r7, #20]
    d154:	2b00      	cmp	r3, #0
    d156:	f040 8099 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, (unsigned char)wp->name.size)) != 0 ||
            (ret = bb_set2(ba, &wp->name, 0, bb_size(&wp->name))) != 0 ||
    d15a:	68fb      	ldr	r3, [r7, #12]
    d15c:	461c      	mov	r4, r3
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	4618      	mov	r0, r3
    d162:	f7f5 fdb1 	bl	2cc8 <bb_size>
    d166:	4603      	mov	r3, r0
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 8)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)wp->name.size)) != 0 ||
    d168:	2200      	movs	r2, #0
    d16a:	4621      	mov	r1, r4
    d16c:	6838      	ldr	r0, [r7, #0]
    d16e:	f7f6 fa57 	bl	3620 <bb_set2>
    d172:	6178      	str	r0, [r7, #20]
    d174:	697b      	ldr	r3, [r7, #20]
    d176:	2b00      	cmp	r3, #0
    d178:	f040 8088 	bne.w	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_set2(ba, &wp->name, 0, bb_size(&wp->name))) != 0 ||
    d17c:	2111      	movs	r1, #17
    d17e:	6838      	ldr	r0, [r7, #0]
    d180:	f7f5 fe48 	bl	2e14 <bb_setUInt8>
    d184:	6178      	str	r0, [r7, #20]
    d186:	697b      	ldr	r3, [r7, #20]
    d188:	2b00      	cmp	r3, #0
    d18a:	d17f      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->monday)) != 0 ||
    d18c:	68fb      	ldr	r3, [r7, #12]
    d18e:	7b1b      	ldrb	r3, [r3, #12]
            (ret = bb_setUInt8(ba, 8)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)wp->name.size)) != 0 ||
            (ret = bb_set2(ba, &wp->name, 0, bb_size(&wp->name))) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d190:	4619      	mov	r1, r3
    d192:	6838      	ldr	r0, [r7, #0]
    d194:	f7f5 fe3e 	bl	2e14 <bb_setUInt8>
    d198:	6178      	str	r0, [r7, #20]
    d19a:	697b      	ldr	r3, [r7, #20]
    d19c:	2b00      	cmp	r3, #0
    d19e:	d175      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->monday)) != 0 ||
    d1a0:	2111      	movs	r1, #17
    d1a2:	6838      	ldr	r0, [r7, #0]
    d1a4:	f7f5 fe36 	bl	2e14 <bb_setUInt8>
    d1a8:	6178      	str	r0, [r7, #20]
    d1aa:	697b      	ldr	r3, [r7, #20]
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d16d      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->tuesday)) != 0 ||
    d1b0:	68fb      	ldr	r3, [r7, #12]
    d1b2:	7b5b      	ldrb	r3, [r3, #13]
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)wp->name.size)) != 0 ||
            (ret = bb_set2(ba, &wp->name, 0, bb_size(&wp->name))) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->monday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d1b4:	4619      	mov	r1, r3
    d1b6:	6838      	ldr	r0, [r7, #0]
    d1b8:	f7f5 fe2c 	bl	2e14 <bb_setUInt8>
    d1bc:	6178      	str	r0, [r7, #20]
    d1be:	697b      	ldr	r3, [r7, #20]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d163      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->tuesday)) != 0 ||
    d1c4:	2111      	movs	r1, #17
    d1c6:	6838      	ldr	r0, [r7, #0]
    d1c8:	f7f5 fe24 	bl	2e14 <bb_setUInt8>
    d1cc:	6178      	str	r0, [r7, #20]
    d1ce:	697b      	ldr	r3, [r7, #20]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d15b      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->wednesday)) != 0 ||
    d1d4:	68fb      	ldr	r3, [r7, #12]
    d1d6:	7b9b      	ldrb	r3, [r3, #14]
            (ret = bb_set2(ba, &wp->name, 0, bb_size(&wp->name))) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->monday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->tuesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d1d8:	4619      	mov	r1, r3
    d1da:	6838      	ldr	r0, [r7, #0]
    d1dc:	f7f5 fe1a 	bl	2e14 <bb_setUInt8>
    d1e0:	6178      	str	r0, [r7, #20]
    d1e2:	697b      	ldr	r3, [r7, #20]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d151      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->wednesday)) != 0 ||
    d1e8:	2111      	movs	r1, #17
    d1ea:	6838      	ldr	r0, [r7, #0]
    d1ec:	f7f5 fe12 	bl	2e14 <bb_setUInt8>
    d1f0:	6178      	str	r0, [r7, #20]
    d1f2:	697b      	ldr	r3, [r7, #20]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d149      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->thursday)) != 0 ||
    d1f8:	68fb      	ldr	r3, [r7, #12]
    d1fa:	7bdb      	ldrb	r3, [r3, #15]
            (ret = bb_setUInt8(ba, wp->monday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->tuesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->wednesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d1fc:	4619      	mov	r1, r3
    d1fe:	6838      	ldr	r0, [r7, #0]
    d200:	f7f5 fe08 	bl	2e14 <bb_setUInt8>
    d204:	6178      	str	r0, [r7, #20]
    d206:	697b      	ldr	r3, [r7, #20]
    d208:	2b00      	cmp	r3, #0
    d20a:	d13f      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->thursday)) != 0 ||
    d20c:	2111      	movs	r1, #17
    d20e:	6838      	ldr	r0, [r7, #0]
    d210:	f7f5 fe00 	bl	2e14 <bb_setUInt8>
    d214:	6178      	str	r0, [r7, #20]
    d216:	697b      	ldr	r3, [r7, #20]
    d218:	2b00      	cmp	r3, #0
    d21a:	d137      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->friday)) != 0 ||
    d21c:	68fb      	ldr	r3, [r7, #12]
    d21e:	7c1b      	ldrb	r3, [r3, #16]
            (ret = bb_setUInt8(ba, wp->tuesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->wednesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->thursday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d220:	4619      	mov	r1, r3
    d222:	6838      	ldr	r0, [r7, #0]
    d224:	f7f5 fdf6 	bl	2e14 <bb_setUInt8>
    d228:	6178      	str	r0, [r7, #20]
    d22a:	697b      	ldr	r3, [r7, #20]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d12d      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->friday)) != 0 ||
    d230:	2111      	movs	r1, #17
    d232:	6838      	ldr	r0, [r7, #0]
    d234:	f7f5 fdee 	bl	2e14 <bb_setUInt8>
    d238:	6178      	str	r0, [r7, #20]
    d23a:	697b      	ldr	r3, [r7, #20]
    d23c:	2b00      	cmp	r3, #0
    d23e:	d125      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->saturday)) != 0 ||
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	7c5b      	ldrb	r3, [r3, #17]
            (ret = bb_setUInt8(ba, wp->wednesday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->thursday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->friday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d244:	4619      	mov	r1, r3
    d246:	6838      	ldr	r0, [r7, #0]
    d248:	f7f5 fde4 	bl	2e14 <bb_setUInt8>
    d24c:	6178      	str	r0, [r7, #20]
    d24e:	697b      	ldr	r3, [r7, #20]
    d250:	2b00      	cmp	r3, #0
    d252:	d11b      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, wp->saturday)) != 0 ||
    d254:	2111      	movs	r1, #17
    d256:	6838      	ldr	r0, [r7, #0]
    d258:	f7f5 fddc 	bl	2e14 <bb_setUInt8>
    d25c:	6178      	str	r0, [r7, #20]
    d25e:	697b      	ldr	r3, [r7, #20]
    d260:	2b00      	cmp	r3, #0
    d262:	d113      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->sunday)) != 0)
    d264:	68fb      	ldr	r3, [r7, #12]
    d266:	7c9b      	ldrb	r3, [r3, #18]
            (ret = bb_setUInt8(ba, wp->thursday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->friday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(ba, wp->saturday)) != 0 ||
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d268:	4619      	mov	r1, r3
    d26a:	6838      	ldr	r0, [r7, #0]
    d26c:	f7f5 fdd2 	bl	2e14 <bb_setUInt8>
    d270:	6178      	str	r0, [r7, #20]
    d272:	697b      	ldr	r3, [r7, #20]
    d274:	2b00      	cmp	r3, #0
    d276:	d109      	bne.n	d28c <getActivityCalendarWeekProfileTable+0x1d4>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0)
    {
        return ret;
    }
    for (pos = 0; pos != list->size; ++pos)
    d278:	693b      	ldr	r3, [r7, #16]
    d27a:	3301      	adds	r3, #1
    d27c:	613b      	str	r3, [r7, #16]
    d27e:	687b      	ldr	r3, [r7, #4]
    d280:	891b      	ldrh	r3, [r3, #8]
    d282:	461a      	mov	r2, r3
    d284:	693b      	ldr	r3, [r7, #16]
    d286:	429a      	cmp	r2, r3
    d288:	f47f af34 	bne.w	d0f4 <getActivityCalendarWeekProfileTable+0x3c>
            (ret = bb_setUInt8(ba, wp->sunday)) != 0)
        {
            break;
        }
    }
    return ret;
    d28c:	697b      	ldr	r3, [r7, #20]
}
    d28e:	4618      	mov	r0, r3
    d290:	371c      	adds	r7, #28
    d292:	46bd      	mov	sp, r7
    d294:	bd90      	pop	{r4, r7, pc}
    d296:	bf00      	nop

0000d298 <getActivityCalendarSeasonProfile>:

int getActivityCalendarSeasonProfile(gxArray* list, gxByteBuffer* ba)
{
    d298:	b590      	push	{r4, r7, lr}
    d29a:	b08b      	sub	sp, #44	; 0x2c
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
    d2a0:	6039      	str	r1, [r7, #0]
    int pos, ret = 0;
    d2a2:	2300      	movs	r3, #0
    d2a4:	623b      	str	r3, [r7, #32]
    gxSeasonProfile *sp;
    dlmsVARIANT tmp;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d2a6:	2101      	movs	r1, #1
    d2a8:	6838      	ldr	r0, [r7, #0]
    d2aa:	f7f5 fdb3 	bl	2e14 <bb_setUInt8>
    d2ae:	6238      	str	r0, [r7, #32]
    d2b0:	6a3b      	ldr	r3, [r7, #32]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	d112      	bne.n	d2dc <getActivityCalendarSeasonProfile+0x44>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
    d2b6:	687b      	ldr	r3, [r7, #4]
    d2b8:	891b      	ldrh	r3, [r3, #8]
int getActivityCalendarSeasonProfile(gxArray* list, gxByteBuffer* ba)
{
    int pos, ret = 0;
    gxSeasonProfile *sp;
    dlmsVARIANT tmp;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d2ba:	6839      	ldr	r1, [r7, #0]
    d2bc:	4618      	mov	r0, r3
    d2be:	f014 fb0d 	bl	218dc <hlp_setObjectCount>
    d2c2:	6238      	str	r0, [r7, #32]
    d2c4:	6a3b      	ldr	r3, [r7, #32]
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	d108      	bne.n	d2dc <getActivityCalendarSeasonProfile+0x44>
        //Add count
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
    d2ca:	f107 0308 	add.w	r3, r7, #8
    d2ce:	4618      	mov	r0, r3
    d2d0:	f018 ff2a 	bl	26128 <var_init>
    d2d4:	6238      	str	r0, [r7, #32]
    d2d6:	6a3b      	ldr	r3, [r7, #32]
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d001      	beq.n	d2e0 <getActivityCalendarSeasonProfile+0x48>
        (ret = var_init(&tmp)) != 0)
    {
        return ret;
    d2dc:	6a3b      	ldr	r3, [r7, #32]
    d2de:	e09f      	b.n	d420 <getActivityCalendarSeasonProfile+0x188>
    }
    for (pos = 0; pos != list->size; ++pos)
    d2e0:	2300      	movs	r3, #0
    d2e2:	627b      	str	r3, [r7, #36]	; 0x24
    d2e4:	e08f      	b.n	d406 <getActivityCalendarSeasonProfile+0x16e>
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d2e6:	2102      	movs	r1, #2
    d2e8:	6838      	ldr	r0, [r7, #0]
    d2ea:	f7f5 fd93 	bl	2e14 <bb_setUInt8>
    d2ee:	6238      	str	r0, [r7, #32]
    d2f0:	6a3b      	ldr	r3, [r7, #32]
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	f040 808e 	bne.w	d414 <getActivityCalendarSeasonProfile+0x17c>
    d2f8:	2103      	movs	r1, #3
    d2fa:	6838      	ldr	r0, [r7, #0]
    d2fc:	f7f5 fd8a 	bl	2e14 <bb_setUInt8>
    d300:	6238      	str	r0, [r7, #32]
    d302:	6a3b      	ldr	r3, [r7, #32]
    d304:	2b00      	cmp	r3, #0
    d306:	f040 8085 	bne.w	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = bb_setUInt8(ba, 3)) != 0 ||
    d30a:	f107 031c 	add.w	r3, r7, #28
    d30e:	461a      	mov	r2, r3
    d310:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d312:	6878      	ldr	r0, [r7, #4]
    d314:	f7ff fa72 	bl	c7fc <arr_getByIndex>
    d318:	6238      	str	r0, [r7, #32]
    d31a:	6a3b      	ldr	r3, [r7, #32]
    d31c:	2b00      	cmp	r3, #0
    d31e:	d179      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
    d320:	2109      	movs	r1, #9
    d322:	6838      	ldr	r0, [r7, #0]
    d324:	f7f5 fd76 	bl	2e14 <bb_setUInt8>
    d328:	6238      	str	r0, [r7, #32]
    d32a:	6a3b      	ldr	r3, [r7, #32]
    d32c:	2b00      	cmp	r3, #0
    d32e:	d171      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            //Add name.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->name))) != 0 ||
    d330:	69fb      	ldr	r3, [r7, #28]
    d332:	4618      	mov	r0, r3
    d334:	f7f5 fcc8 	bl	2cc8 <bb_size>
    d338:	4603      	mov	r3, r0
    d33a:	b2db      	uxtb	r3, r3
    {
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 3)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
            //Add name.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d33c:	4619      	mov	r1, r3
    d33e:	6838      	ldr	r0, [r7, #0]
    d340:	f7f5 fd68 	bl	2e14 <bb_setUInt8>
    d344:	6238      	str	r0, [r7, #32]
    d346:	6a3b      	ldr	r3, [r7, #32]
    d348:	2b00      	cmp	r3, #0
    d34a:	d163      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->name))) != 0 ||
            (ret = bb_set2(ba, &sp->name, 0, bb_size(&sp->name))) != 0 ||
    d34c:	69fb      	ldr	r3, [r7, #28]
    d34e:	461c      	mov	r4, r3
    d350:	69fb      	ldr	r3, [r7, #28]
    d352:	4618      	mov	r0, r3
    d354:	f7f5 fcb8 	bl	2cc8 <bb_size>
    d358:	4603      	mov	r3, r0
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(ba, 3)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
            //Add name.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->name))) != 0 ||
    d35a:	2200      	movs	r2, #0
    d35c:	4621      	mov	r1, r4
    d35e:	6838      	ldr	r0, [r7, #0]
    d360:	f7f6 f95e 	bl	3620 <bb_set2>
    d364:	6238      	str	r0, [r7, #32]
    d366:	6a3b      	ldr	r3, [r7, #32]
    d368:	2b00      	cmp	r3, #0
    d36a:	d153      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = bb_set2(ba, &sp->name, 0, bb_size(&sp->name))) != 0 ||
            //Add start time.
            (ret = var_setDateTime(&tmp, &sp->start)) != 0 ||
    d36c:	69fb      	ldr	r3, [r7, #28]
    d36e:	f103 020c 	add.w	r2, r3, #12
            (ret = bb_setUInt8(ba, 3)) != 0 ||
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
            //Add name.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->name))) != 0 ||
            (ret = bb_set2(ba, &sp->name, 0, bb_size(&sp->name))) != 0 ||
    d372:	f107 0308 	add.w	r3, r7, #8
    d376:	4611      	mov	r1, r2
    d378:	4618      	mov	r0, r3
    d37a:	f01a fe4b 	bl	28014 <var_setDateTime>
    d37e:	6238      	str	r0, [r7, #32]
    d380:	6a3b      	ldr	r3, [r7, #32]
    d382:	2b00      	cmp	r3, #0
    d384:	d146      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            //Add start time.
            (ret = var_setDateTime(&tmp, &sp->start)) != 0 ||
    d386:	f107 0308 	add.w	r3, r7, #8
    d38a:	683a      	ldr	r2, [r7, #0]
    d38c:	2109      	movs	r1, #9
    d38e:	4618      	mov	r0, r3
    d390:	f019 f99a 	bl	266c8 <var_getBytes2>
    d394:	6238      	str	r0, [r7, #32]
    d396:	6a3b      	ldr	r3, [r7, #32]
    d398:	2b00      	cmp	r3, #0
    d39a:	d13b      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
    d39c:	f107 0308 	add.w	r3, r7, #8
    d3a0:	4618      	mov	r0, r3
    d3a2:	f018 fed1 	bl	26148 <var_clear>
    d3a6:	6238      	str	r0, [r7, #32]
    d3a8:	6a3b      	ldr	r3, [r7, #32]
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d132      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = var_clear(&tmp)) != 0 ||
    d3ae:	2109      	movs	r1, #9
    d3b0:	6838      	ldr	r0, [r7, #0]
    d3b2:	f7f5 fd2f 	bl	2e14 <bb_setUInt8>
    d3b6:	6238      	str	r0, [r7, #32]
    d3b8:	6a3b      	ldr	r3, [r7, #32]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d12a      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            //Add week day.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->weekName))) != 0 ||
    d3be:	69fb      	ldr	r3, [r7, #28]
    d3c0:	333c      	adds	r3, #60	; 0x3c
    d3c2:	4618      	mov	r0, r3
    d3c4:	f7f5 fc80 	bl	2cc8 <bb_size>
    d3c8:	4603      	mov	r3, r0
    d3ca:	b2db      	uxtb	r3, r3
            //Add start time.
            (ret = var_setDateTime(&tmp, &sp->start)) != 0 ||
            (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
            (ret = var_clear(&tmp)) != 0 ||
            //Add week day.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d3cc:	4619      	mov	r1, r3
    d3ce:	6838      	ldr	r0, [r7, #0]
    d3d0:	f7f5 fd20 	bl	2e14 <bb_setUInt8>
    d3d4:	6238      	str	r0, [r7, #32]
    d3d6:	6a3b      	ldr	r3, [r7, #32]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d11b      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->weekName))) != 0 ||
            (ret = bb_set2(ba, &sp->weekName, 0, bb_size(&sp->weekName))) != 0)
    d3dc:	69fb      	ldr	r3, [r7, #28]
    d3de:	f103 043c 	add.w	r4, r3, #60	; 0x3c
    d3e2:	69fb      	ldr	r3, [r7, #28]
    d3e4:	333c      	adds	r3, #60	; 0x3c
    d3e6:	4618      	mov	r0, r3
    d3e8:	f7f5 fc6e 	bl	2cc8 <bb_size>
    d3ec:	4603      	mov	r3, r0
            (ret = var_setDateTime(&tmp, &sp->start)) != 0 ||
            (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, ba)) != 0 ||
            (ret = var_clear(&tmp)) != 0 ||
            //Add week day.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(ba, (unsigned char)bb_size(&sp->weekName))) != 0 ||
    d3ee:	2200      	movs	r2, #0
    d3f0:	4621      	mov	r1, r4
    d3f2:	6838      	ldr	r0, [r7, #0]
    d3f4:	f7f6 f914 	bl	3620 <bb_set2>
    d3f8:	6238      	str	r0, [r7, #32]
    d3fa:	6a3b      	ldr	r3, [r7, #32]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d109      	bne.n	d414 <getActivityCalendarSeasonProfile+0x17c>
        (ret = hlp_setObjectCount(list->size, ba)) != 0 ||
        (ret = var_init(&tmp)) != 0)
    {
        return ret;
    }
    for (pos = 0; pos != list->size; ++pos)
    d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d402:	3301      	adds	r3, #1
    d404:	627b      	str	r3, [r7, #36]	; 0x24
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	891b      	ldrh	r3, [r3, #8]
    d40a:	461a      	mov	r2, r3
    d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d40e:	429a      	cmp	r2, r3
    d410:	f47f af69 	bne.w	d2e6 <getActivityCalendarSeasonProfile+0x4e>
            (ret = bb_set2(ba, &sp->weekName, 0, bb_size(&sp->weekName))) != 0)
        {
            break;
        }
    }
    var_clear(&tmp);
    d414:	f107 0308 	add.w	r3, r7, #8
    d418:	4618      	mov	r0, r3
    d41a:	f018 fe95 	bl	26148 <var_clear>
    return ret;
    d41e:	6a3b      	ldr	r3, [r7, #32]
}
    d420:	4618      	mov	r0, r3
    d422:	372c      	adds	r7, #44	; 0x2c
    d424:	46bd      	mov	sp, r7
    d426:	bd90      	pop	{r4, r7, pc}

0000d428 <getActivityCalendarName>:

int getActivityCalendarName(gxByteBuffer* name, gxByteBuffer* ba)
{
    d428:	b580      	push	{r7, lr}
    d42a:	b084      	sub	sp, #16
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
    d430:	6039      	str	r1, [r7, #0]
    int ret;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d432:	2109      	movs	r1, #9
    d434:	6838      	ldr	r0, [r7, #0]
    d436:	f7f5 fced 	bl	2e14 <bb_setUInt8>
    d43a:	60f8      	str	r0, [r7, #12]
    d43c:	68fb      	ldr	r3, [r7, #12]
    d43e:	2b00      	cmp	r3, #0
    d440:	d115      	bne.n	d46e <getActivityCalendarName+0x46>
        (ret = hlp_setObjectCount(name->size, ba)) != 0 ||
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	88db      	ldrh	r3, [r3, #6]
}

int getActivityCalendarName(gxByteBuffer* name, gxByteBuffer* ba)
{
    int ret;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d446:	6839      	ldr	r1, [r7, #0]
    d448:	4618      	mov	r0, r3
    d44a:	f014 fa47 	bl	218dc <hlp_setObjectCount>
    d44e:	60f8      	str	r0, [r7, #12]
    d450:	68fb      	ldr	r3, [r7, #12]
    d452:	2b00      	cmp	r3, #0
    d454:	d10b      	bne.n	d46e <getActivityCalendarName+0x46>
        (ret = hlp_setObjectCount(name->size, ba)) != 0 ||
        (ret = bb_set(ba, name->data, name->size)) != 0)
    d456:	687b      	ldr	r3, [r7, #4]
    d458:	6819      	ldr	r1, [r3, #0]
    d45a:	687b      	ldr	r3, [r7, #4]
    d45c:	88db      	ldrh	r3, [r3, #6]

int getActivityCalendarName(gxByteBuffer* name, gxByteBuffer* ba)
{
    int ret;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
        (ret = hlp_setObjectCount(name->size, ba)) != 0 ||
    d45e:	461a      	mov	r2, r3
    d460:	6838      	ldr	r0, [r7, #0]
    d462:	f7f6 f87d 	bl	3560 <bb_set>
    d466:	60f8      	str	r0, [r7, #12]
    d468:	68fb      	ldr	r3, [r7, #12]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d001      	beq.n	d472 <getActivityCalendarName+0x4a>
        (ret = bb_set(ba, name->data, name->size)) != 0)
    {
        return ret;
    d46e:	68fb      	ldr	r3, [r7, #12]
    d470:	e000      	b.n	d474 <getActivityCalendarName+0x4c>
    }
    return ret;
    d472:	68fb      	ldr	r3, [r7, #12]
}
    d474:	4618      	mov	r0, r3
    d476:	3710      	adds	r7, #16
    d478:	46bd      	mov	sp, r7
    d47a:	bd80      	pop	{r7, pc}

0000d47c <cosem_getActivityCalendar>:

int cosem_getActivityCalendar(
    gxValueEventArg *e)
{
    d47c:	b580      	push	{r7, lr}
    d47e:	b086      	sub	sp, #24
    d480:	af00      	add	r7, sp, #0
    d482:	6078      	str	r0, [r7, #4]
    int ret;
    if (e->index != 10)
    d484:	687b      	ldr	r3, [r7, #4]
    d486:	7e1b      	ldrb	r3, [r3, #24]
    d488:	2b0a      	cmp	r3, #10
    d48a:	d009      	beq.n	d4a0 <cosem_getActivityCalendar+0x24>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    d48c:	687b      	ldr	r3, [r7, #4]
    d48e:	4618      	mov	r0, r3
    d490:	f7ff fa88 	bl	c9a4 <cosem_getByteBuffer>
    d494:	6178      	str	r0, [r7, #20]
    d496:	697b      	ldr	r3, [r7, #20]
    d498:	2b00      	cmp	r3, #0
    d49a:	d001      	beq.n	d4a0 <cosem_getActivityCalendar+0x24>
        {
            return ret;
    d49c:	697b      	ldr	r3, [r7, #20]
    d49e:	e096      	b.n	d5ce <cosem_getActivityCalendar+0x152>
        }
    }
    gxByteBuffer *data = e->value.byteArr;
    d4a0:	687b      	ldr	r3, [r7, #4]
    d4a2:	689b      	ldr	r3, [r3, #8]
    d4a4:	613b      	str	r3, [r7, #16]
    gxActivityCalendar* object = (gxActivityCalendar*)e->target;
    d4a6:	687b      	ldr	r3, [r7, #4]
    d4a8:	695b      	ldr	r3, [r3, #20]
    d4aa:	60fb      	str	r3, [r7, #12]
    if (e->index == 2)
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	7e1b      	ldrb	r3, [r3, #24]
    d4b0:	2b02      	cmp	r3, #2
    d4b2:	d10b      	bne.n	d4cc <cosem_getActivityCalendar+0x50>
    {
        e->byteArray = 1;
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	2201      	movs	r2, #1
    d4b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarName(&object->calendarNameActive, data);
    d4bc:	68fb      	ldr	r3, [r7, #12]
    d4be:	3310      	adds	r3, #16
    d4c0:	6939      	ldr	r1, [r7, #16]
    d4c2:	4618      	mov	r0, r3
    d4c4:	f7ff ffb0 	bl	d428 <getActivityCalendarName>
    d4c8:	6178      	str	r0, [r7, #20]
    d4ca:	e07f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 3)
    d4cc:	687b      	ldr	r3, [r7, #4]
    d4ce:	7e1b      	ldrb	r3, [r3, #24]
    d4d0:	2b03      	cmp	r3, #3
    d4d2:	d10b      	bne.n	d4ec <cosem_getActivityCalendar+0x70>
    {
        e->byteArray = 1;
    d4d4:	687b      	ldr	r3, [r7, #4]
    d4d6:	2201      	movs	r2, #1
    d4d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarSeasonProfile(&object->seasonProfileActive, data);
    d4dc:	68fb      	ldr	r3, [r7, #12]
    d4de:	3328      	adds	r3, #40	; 0x28
    d4e0:	6939      	ldr	r1, [r7, #16]
    d4e2:	4618      	mov	r0, r3
    d4e4:	f7ff fed8 	bl	d298 <getActivityCalendarSeasonProfile>
    d4e8:	6178      	str	r0, [r7, #20]
    d4ea:	e06f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 4)
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	7e1b      	ldrb	r3, [r3, #24]
    d4f0:	2b04      	cmp	r3, #4
    d4f2:	d10b      	bne.n	d50c <cosem_getActivityCalendar+0x90>
    {
        e->byteArray = 1;
    d4f4:	687b      	ldr	r3, [r7, #4]
    d4f6:	2201      	movs	r2, #1
    d4f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTableActive, data);
    d4fc:	68fb      	ldr	r3, [r7, #12]
    d4fe:	3338      	adds	r3, #56	; 0x38
    d500:	6939      	ldr	r1, [r7, #16]
    d502:	4618      	mov	r0, r3
    d504:	f7ff fdd8 	bl	d0b8 <getActivityCalendarWeekProfileTable>
    d508:	6178      	str	r0, [r7, #20]
    d50a:	e05f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 5)
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	7e1b      	ldrb	r3, [r3, #24]
    d510:	2b05      	cmp	r3, #5
    d512:	d10b      	bne.n	d52c <cosem_getActivityCalendar+0xb0>
    {
        e->byteArray = 1;
    d514:	687b      	ldr	r3, [r7, #4]
    d516:	2201      	movs	r2, #1
    d518:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTableActive, data);
    d51c:	68fb      	ldr	r3, [r7, #12]
    d51e:	3348      	adds	r3, #72	; 0x48
    d520:	6939      	ldr	r1, [r7, #16]
    d522:	4618      	mov	r0, r3
    d524:	f7ff fcd4 	bl	ced0 <getActivityCalendarDayProfileTable>
    d528:	6178      	str	r0, [r7, #20]
    d52a:	e04f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 6)
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	7e1b      	ldrb	r3, [r3, #24]
    d530:	2b06      	cmp	r3, #6
    d532:	d10b      	bne.n	d54c <cosem_getActivityCalendar+0xd0>
    {
        e->byteArray = 1;
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	2201      	movs	r2, #1
    d538:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarName(&object->calendarNamePassive, data);
    d53c:	68fb      	ldr	r3, [r7, #12]
    d53e:	331c      	adds	r3, #28
    d540:	6939      	ldr	r1, [r7, #16]
    d542:	4618      	mov	r0, r3
    d544:	f7ff ff70 	bl	d428 <getActivityCalendarName>
    d548:	6178      	str	r0, [r7, #20]
    d54a:	e03f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 7)
    d54c:	687b      	ldr	r3, [r7, #4]
    d54e:	7e1b      	ldrb	r3, [r3, #24]
    d550:	2b07      	cmp	r3, #7
    d552:	d10b      	bne.n	d56c <cosem_getActivityCalendar+0xf0>
    {
        e->byteArray = 1;
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	2201      	movs	r2, #1
    d558:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
    d55c:	68fb      	ldr	r3, [r7, #12]
    d55e:	3358      	adds	r3, #88	; 0x58
    d560:	6939      	ldr	r1, [r7, #16]
    d562:	4618      	mov	r0, r3
    d564:	f7ff fe98 	bl	d298 <getActivityCalendarSeasonProfile>
    d568:	6178      	str	r0, [r7, #20]
    d56a:	e02f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 8)
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	7e1b      	ldrb	r3, [r3, #24]
    d570:	2b08      	cmp	r3, #8
    d572:	d10b      	bne.n	d58c <cosem_getActivityCalendar+0x110>
    {
        e->byteArray = 1;
    d574:	687b      	ldr	r3, [r7, #4]
    d576:	2201      	movs	r2, #1
    d578:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
    d57c:	68fb      	ldr	r3, [r7, #12]
    d57e:	3378      	adds	r3, #120	; 0x78
    d580:	6939      	ldr	r1, [r7, #16]
    d582:	4618      	mov	r0, r3
    d584:	f7ff fd98 	bl	d0b8 <getActivityCalendarWeekProfileTable>
    d588:	6178      	str	r0, [r7, #20]
    d58a:	e01f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 9)
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	7e1b      	ldrb	r3, [r3, #24]
    d590:	2b09      	cmp	r3, #9
    d592:	d10b      	bne.n	d5ac <cosem_getActivityCalendar+0x130>
    {
        e->byteArray = 1;
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	2201      	movs	r2, #1
    d598:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
    d59c:	68fb      	ldr	r3, [r7, #12]
    d59e:	3368      	adds	r3, #104	; 0x68
    d5a0:	6939      	ldr	r1, [r7, #16]
    d5a2:	4618      	mov	r0, r3
    d5a4:	f7ff fc94 	bl	ced0 <getActivityCalendarDayProfileTable>
    d5a8:	6178      	str	r0, [r7, #20]
    d5aa:	e00f      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else if (e->index == 10)
    d5ac:	687b      	ldr	r3, [r7, #4]
    d5ae:	7e1b      	ldrb	r3, [r3, #24]
    d5b0:	2b0a      	cmp	r3, #10
    d5b2:	d108      	bne.n	d5c6 <cosem_getActivityCalendar+0x14a>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &object->time);
    d5b4:	687a      	ldr	r2, [r7, #4]
    d5b6:	68fb      	ldr	r3, [r7, #12]
    d5b8:	3388      	adds	r3, #136	; 0x88
    d5ba:	4619      	mov	r1, r3
    d5bc:	4610      	mov	r0, r2
    d5be:	f01a fd95 	bl	280ec <var_setDateTimeAsOctetString>
    d5c2:	6178      	str	r0, [r7, #20]
    d5c4:	e002      	b.n	d5cc <cosem_getActivityCalendar+0x150>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    d5c6:	f44f 7381 	mov.w	r3, #258	; 0x102
    d5ca:	617b      	str	r3, [r7, #20]
    }
    return ret;
    d5cc:	697b      	ldr	r3, [r7, #20]
}
    d5ce:	4618      	mov	r0, r3
    d5d0:	3718      	adds	r7, #24
    d5d2:	46bd      	mov	sp, r7
    d5d4:	bd80      	pop	{r7, pc}
    d5d6:	bf00      	nop

0000d5d8 <getLNAccessRights>:
#ifndef DLMS_IGNORE_SERVER
int getLNAccessRights(
    dlmsSettings* settings,
    gxObject *object,
    gxByteBuffer* data)
{
    d5d8:	b580      	push	{r7, lr}
    d5da:	b088      	sub	sp, #32
    d5dc:	af00      	add	r7, sp, #0
    d5de:	60f8      	str	r0, [r7, #12]
    d5e0:	60b9      	str	r1, [r7, #8]
    d5e2:	607a      	str	r2, [r7, #4]
    unsigned char pos, cnt;
    int ret;
    unsigned char ch;
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d5e4:	2102      	movs	r1, #2
    d5e6:	6878      	ldr	r0, [r7, #4]
    d5e8:	f7f5 fc14 	bl	2e14 <bb_setUInt8>
    d5ec:	61b8      	str	r0, [r7, #24]
    d5ee:	69bb      	ldr	r3, [r7, #24]
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	d10f      	bne.n	d614 <getLNAccessRights+0x3c>
    d5f4:	2102      	movs	r1, #2
    d5f6:	6878      	ldr	r0, [r7, #4]
    d5f8:	f7f5 fc0c 	bl	2e14 <bb_setUInt8>
    d5fc:	61b8      	str	r0, [r7, #24]
    d5fe:	69bb      	ldr	r3, [r7, #24]
    d600:	2b00      	cmp	r3, #0
    d602:	d107      	bne.n	d614 <getLNAccessRights+0x3c>
        (ret = bb_setUInt8(data, 2)) != 0 ||
    d604:	2101      	movs	r1, #1
    d606:	6878      	ldr	r0, [r7, #4]
    d608:	f7f5 fc04 	bl	2e14 <bb_setUInt8>
    d60c:	61b8      	str	r0, [r7, #24]
    d60e:	69bb      	ldr	r3, [r7, #24]
    d610:	2b00      	cmp	r3, #0
    d612:	d001      	beq.n	d618 <getLNAccessRights+0x40>
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
    {
        return ret;
    d614:	69bb      	ldr	r3, [r7, #24]
    d616:	e0ba      	b.n	d78e <getLNAccessRights+0x1b6>
    }
    cnt = obj_attributeCount(object);
    d618:	68b8      	ldr	r0, [r7, #8]
    d61a:	f00a fa3b 	bl	17a94 <obj_attributeCount>
    d61e:	4603      	mov	r3, r0
    d620:	75fb      	strb	r3, [r7, #23]
    hlp_setObjectCount(cnt, data);
    d622:	7dfb      	ldrb	r3, [r7, #23]
    d624:	6879      	ldr	r1, [r7, #4]
    d626:	4618      	mov	r0, r3
    d628:	f014 f958 	bl	218dc <hlp_setObjectCount>
    for (pos = 1; pos != cnt + 1; ++pos)
    d62c:	2301      	movs	r3, #1
    d62e:	77fb      	strb	r3, [r7, #31]
    d630:	e046      	b.n	d6c0 <getLNAccessRights+0xe8>
    {
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
    d632:	7ffb      	ldrb	r3, [r7, #31]
    d634:	461a      	mov	r2, r3
    d636:	68b9      	ldr	r1, [r7, #8]
    d638:	68f8      	ldr	r0, [r7, #12]
    d63a:	f01b fe7b 	bl	29334 <svr_getAttributeAccess>
    d63e:	4603      	mov	r3, r0
    d640:	75bb      	strb	r3, [r7, #22]
        //attribute_access_item
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d642:	2102      	movs	r1, #2
    d644:	6878      	ldr	r0, [r7, #4]
    d646:	f7f5 fbe5 	bl	2e14 <bb_setUInt8>
    d64a:	61b8      	str	r0, [r7, #24]
    d64c:	69bb      	ldr	r3, [r7, #24]
    d64e:	2b00      	cmp	r3, #0
    d650:	d131      	bne.n	d6b6 <getLNAccessRights+0xde>
    d652:	2103      	movs	r1, #3
    d654:	6878      	ldr	r0, [r7, #4]
    d656:	f7f5 fbdd 	bl	2e14 <bb_setUInt8>
    d65a:	61b8      	str	r0, [r7, #24]
    d65c:	69bb      	ldr	r3, [r7, #24]
    d65e:	2b00      	cmp	r3, #0
    d660:	d129      	bne.n	d6b6 <getLNAccessRights+0xde>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    d662:	210f      	movs	r1, #15
    d664:	6878      	ldr	r0, [r7, #4]
    d666:	f7f5 fbd5 	bl	2e14 <bb_setUInt8>
    d66a:	61b8      	str	r0, [r7, #24]
    d66c:	69bb      	ldr	r3, [r7, #24]
    d66e:	2b00      	cmp	r3, #0
    d670:	d121      	bne.n	d6b6 <getLNAccessRights+0xde>
            //Add index.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    d672:	7ffb      	ldrb	r3, [r7, #31]
    d674:	4619      	mov	r1, r3
    d676:	6878      	ldr	r0, [r7, #4]
    d678:	f7f5 fbcc 	bl	2e14 <bb_setUInt8>
    d67c:	61b8      	str	r0, [r7, #24]
    d67e:	69bb      	ldr	r3, [r7, #24]
    d680:	2b00      	cmp	r3, #0
    d682:	d118      	bne.n	d6b6 <getLNAccessRights+0xde>
            (ret = bb_setUInt8(data, pos)) != 0 ||
    d684:	2116      	movs	r1, #22
    d686:	6878      	ldr	r0, [r7, #4]
    d688:	f7f5 fbc4 	bl	2e14 <bb_setUInt8>
    d68c:	61b8      	str	r0, [r7, #24]
    d68e:	69bb      	ldr	r3, [r7, #24]
    d690:	2b00      	cmp	r3, #0
    d692:	d110      	bne.n	d6b6 <getLNAccessRights+0xde>
            //Add value.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    d694:	7dbb      	ldrb	r3, [r7, #22]
    d696:	4619      	mov	r1, r3
    d698:	6878      	ldr	r0, [r7, #4]
    d69a:	f7f5 fbbb 	bl	2e14 <bb_setUInt8>
    d69e:	61b8      	str	r0, [r7, #24]
    d6a0:	69bb      	ldr	r3, [r7, #24]
    d6a2:	2b00      	cmp	r3, #0
    d6a4:	d107      	bne.n	d6b6 <getLNAccessRights+0xde>
            (ret = bb_setUInt8(data, ch)) != 0 ||
    d6a6:	2100      	movs	r1, #0
    d6a8:	6878      	ldr	r0, [r7, #4]
    d6aa:	f7f5 fbb3 	bl	2e14 <bb_setUInt8>
    d6ae:	61b8      	str	r0, [r7, #24]
    d6b0:	69bb      	ldr	r3, [r7, #24]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d001      	beq.n	d6ba <getLNAccessRights+0xe2>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE)) != 0)
        {
            return ret;
    d6b6:	69bb      	ldr	r3, [r7, #24]
    d6b8:	e069      	b.n	d78e <getLNAccessRights+0x1b6>
    {
        return ret;
    }
    cnt = obj_attributeCount(object);
    hlp_setObjectCount(cnt, data);
    for (pos = 1; pos != cnt + 1; ++pos)
    d6ba:	7ffb      	ldrb	r3, [r7, #31]
    d6bc:	3301      	adds	r3, #1
    d6be:	77fb      	strb	r3, [r7, #31]
    d6c0:	7ffa      	ldrb	r2, [r7, #31]
    d6c2:	7dfb      	ldrb	r3, [r7, #23]
    d6c4:	3301      	adds	r3, #1
    d6c6:	429a      	cmp	r2, r3
    d6c8:	d1b3      	bne.n	d632 <getLNAccessRights+0x5a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE)) != 0)
        {
            return ret;
        }
    }
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
    d6ca:	2101      	movs	r1, #1
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	f7f5 fba1 	bl	2e14 <bb_setUInt8>
    d6d2:	61b8      	str	r0, [r7, #24]
    d6d4:	69bb      	ldr	r3, [r7, #24]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d001      	beq.n	d6de <getLNAccessRights+0x106>
    {
        return ret;
    d6da:	69bb      	ldr	r3, [r7, #24]
    d6dc:	e057      	b.n	d78e <getLNAccessRights+0x1b6>
    if ((ret = hlp_setObjectCount(0, data)) != 0)
    {
        return ret;
    }
#else
    cnt = obj_methodCount(object);
    d6de:	68b8      	ldr	r0, [r7, #8]
    d6e0:	f00a fb4c 	bl	17d7c <obj_methodCount>
    d6e4:	4603      	mov	r3, r0
    d6e6:	75fb      	strb	r3, [r7, #23]
    if ((ret = hlp_setObjectCount(cnt, data)) != 0)
    d6e8:	7dfb      	ldrb	r3, [r7, #23]
    d6ea:	6879      	ldr	r1, [r7, #4]
    d6ec:	4618      	mov	r0, r3
    d6ee:	f014 f8f5 	bl	218dc <hlp_setObjectCount>
    d6f2:	61b8      	str	r0, [r7, #24]
    d6f4:	69bb      	ldr	r3, [r7, #24]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d001      	beq.n	d6fe <getLNAccessRights+0x126>
    {
        return ret;
    d6fa:	69bb      	ldr	r3, [r7, #24]
    d6fc:	e047      	b.n	d78e <getLNAccessRights+0x1b6>
    }
    for (pos = 1; pos != cnt + 1; ++pos)
    d6fe:	2301      	movs	r3, #1
    d700:	77fb      	strb	r3, [r7, #31]
    d702:	e03e      	b.n	d782 <getLNAccessRights+0x1aa>
    {
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
    d704:	7ffb      	ldrb	r3, [r7, #31]
    d706:	461a      	mov	r2, r3
    d708:	68b9      	ldr	r1, [r7, #8]
    d70a:	68f8      	ldr	r0, [r7, #12]
    d70c:	f01b fe38 	bl	29380 <svr_getMethodAccess>
    d710:	4603      	mov	r3, r0
    d712:	75bb      	strb	r3, [r7, #22]
        //attribute_access_item
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d714:	2102      	movs	r1, #2
    d716:	6878      	ldr	r0, [r7, #4]
    d718:	f7f5 fb7c 	bl	2e14 <bb_setUInt8>
    d71c:	61b8      	str	r0, [r7, #24]
    d71e:	69bb      	ldr	r3, [r7, #24]
    d720:	2b00      	cmp	r3, #0
    d722:	d129      	bne.n	d778 <getLNAccessRights+0x1a0>
    d724:	2102      	movs	r1, #2
    d726:	6878      	ldr	r0, [r7, #4]
    d728:	f7f5 fb74 	bl	2e14 <bb_setUInt8>
    d72c:	61b8      	str	r0, [r7, #24]
    d72e:	69bb      	ldr	r3, [r7, #24]
    d730:	2b00      	cmp	r3, #0
    d732:	d121      	bne.n	d778 <getLNAccessRights+0x1a0>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    d734:	210f      	movs	r1, #15
    d736:	6878      	ldr	r0, [r7, #4]
    d738:	f7f5 fb6c 	bl	2e14 <bb_setUInt8>
    d73c:	61b8      	str	r0, [r7, #24]
    d73e:	69bb      	ldr	r3, [r7, #24]
    d740:	2b00      	cmp	r3, #0
    d742:	d119      	bne.n	d778 <getLNAccessRights+0x1a0>
            //Add index.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    d744:	7ffb      	ldrb	r3, [r7, #31]
    d746:	4619      	mov	r1, r3
    d748:	6878      	ldr	r0, [r7, #4]
    d74a:	f7f5 fb63 	bl	2e14 <bb_setUInt8>
    d74e:	61b8      	str	r0, [r7, #24]
    d750:	69bb      	ldr	r3, [r7, #24]
    d752:	2b00      	cmp	r3, #0
    d754:	d110      	bne.n	d778 <getLNAccessRights+0x1a0>
            (ret = bb_setUInt8(data, pos)) != 0 ||
    d756:	2116      	movs	r1, #22
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	f7f5 fb5b 	bl	2e14 <bb_setUInt8>
    d75e:	61b8      	str	r0, [r7, #24]
    d760:	69bb      	ldr	r3, [r7, #24]
    d762:	2b00      	cmp	r3, #0
    d764:	d108      	bne.n	d778 <getLNAccessRights+0x1a0>
            //Add value.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    d766:	7dbb      	ldrb	r3, [r7, #22]
    d768:	4619      	mov	r1, r3
    d76a:	6878      	ldr	r0, [r7, #4]
    d76c:	f7f5 fb52 	bl	2e14 <bb_setUInt8>
    d770:	61b8      	str	r0, [r7, #24]
    d772:	69bb      	ldr	r3, [r7, #24]
    d774:	2b00      	cmp	r3, #0
    d776:	d001      	beq.n	d77c <getLNAccessRights+0x1a4>
            (ret = bb_setUInt8(data, ch)) != 0)
        {
            return ret;
    d778:	69bb      	ldr	r3, [r7, #24]
    d77a:	e008      	b.n	d78e <getLNAccessRights+0x1b6>
    cnt = obj_methodCount(object);
    if ((ret = hlp_setObjectCount(cnt, data)) != 0)
    {
        return ret;
    }
    for (pos = 1; pos != cnt + 1; ++pos)
    d77c:	7ffb      	ldrb	r3, [r7, #31]
    d77e:	3301      	adds	r3, #1
    d780:	77fb      	strb	r3, [r7, #31]
    d782:	7ffa      	ldrb	r2, [r7, #31]
    d784:	7dfb      	ldrb	r3, [r7, #23]
    d786:	3301      	adds	r3, #1
    d788:	429a      	cmp	r2, r3
    d78a:	d1bb      	bne.n	d704 <getLNAccessRights+0x12c>
        {
            return ret;
        }
    }
#endif //INDIAN_STANDARD
    return 0;
    d78c:	2300      	movs	r3, #0
}
    d78e:	4618      	mov	r0, r3
    d790:	3720      	adds	r7, #32
    d792:	46bd      	mov	sp, r7
    d794:	bd80      	pop	{r7, pc}
    d796:	bf00      	nop

0000d798 <dlms_isPduFull>:
#endif //DLMS_IGNORE_SERVER

unsigned char dlms_isPduFull(
    dlmsSettings* settings,
    gxByteBuffer* data)
{
    d798:	b590      	push	{r4, r7, lr}
    d79a:	b085      	sub	sp, #20
    d79c:	af00      	add	r7, sp, #0
    d79e:	6078      	str	r0, [r7, #4]
    d7a0:	6039      	str	r1, [r7, #0]
    unsigned char ret;
    if (bb_isAttached(data))
    d7a2:	6838      	ldr	r0, [r7, #0]
    d7a4:	f7f5 fa72 	bl	2c8c <bb_isAttached>
    d7a8:	4603      	mov	r3, r0
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	d022      	beq.n	d7f4 <dlms_isPduFull+0x5c>
    {
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (settings->cipher.security != DLMS_SECURITY_NONE)
    d7ae:	687b      	ldr	r3, [r7, #4]
    d7b0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d00e      	beq.n	d7d6 <dlms_isPduFull+0x3e>
        {
            ret = data->size > (unsigned short)(bb_getCapacity(data) - PDU_MAX_HEADER_SIZE - CIPHERING_HEADER_SIZE);
    d7b8:	683b      	ldr	r3, [r7, #0]
    d7ba:	88dc      	ldrh	r4, [r3, #6]
    d7bc:	6838      	ldr	r0, [r7, #0]
    d7be:	f7f5 fa75 	bl	2cac <bb_getCapacity>
    d7c2:	4603      	mov	r3, r0
    d7c4:	3b2a      	subs	r3, #42	; 0x2a
    d7c6:	b29b      	uxth	r3, r3
    d7c8:	429c      	cmp	r4, r3
    d7ca:	bf8c      	ite	hi
    d7cc:	2301      	movhi	r3, #1
    d7ce:	2300      	movls	r3, #0
    d7d0:	b2db      	uxtb	r3, r3
    d7d2:	73fb      	strb	r3, [r7, #15]
    d7d4:	e010      	b.n	d7f8 <dlms_isPduFull+0x60>
        }
        else
#endif //DLMS_IGNORE_HIGH_GMAC
        {
            ret = data->size > (unsigned short)(bb_getCapacity(data) - PDU_MAX_HEADER_SIZE);
    d7d6:	683b      	ldr	r3, [r7, #0]
    d7d8:	88dc      	ldrh	r4, [r3, #6]
    d7da:	6838      	ldr	r0, [r7, #0]
    d7dc:	f7f5 fa66 	bl	2cac <bb_getCapacity>
    d7e0:	4603      	mov	r3, r0
    d7e2:	3b14      	subs	r3, #20
    d7e4:	b29b      	uxth	r3, r3
    d7e6:	429c      	cmp	r4, r3
    d7e8:	bf8c      	ite	hi
    d7ea:	2301      	movhi	r3, #1
    d7ec:	2300      	movls	r3, #0
    d7ee:	b2db      	uxtb	r3, r3
    d7f0:	73fb      	strb	r3, [r7, #15]
    d7f2:	e001      	b.n	d7f8 <dlms_isPduFull+0x60>
        }
    }
    else
    {
        ret = 0;
    d7f4:	2300      	movs	r3, #0
    d7f6:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
    d7f8:	7bfb      	ldrb	r3, [r7, #15]
}
    d7fa:	4618      	mov	r0, r3
    d7fc:	3714      	adds	r7, #20
    d7fe:	46bd      	mov	sp, r7
    d800:	bd90      	pop	{r4, r7, pc}
    d802:	bf00      	nop

0000d804 <getLNObjects>:
// Returns LN Association View.
int getLNObjects(
    dlmsSettings* settings,
    gxValueEventArg *e,
    gxByteBuffer* data)
{
    d804:	b580      	push	{r7, lr}
    d806:	b08a      	sub	sp, #40	; 0x28
    d808:	af00      	add	r7, sp, #0
    d80a:	60f8      	str	r0, [r7, #12]
    d80c:	60b9      	str	r1, [r7, #8]
    d80e:	607a      	str	r2, [r7, #4]
    unsigned short pduSize;
    gxAssociationLogicalName *object = (gxAssociationLogicalName*)e->target;
    d810:	68bb      	ldr	r3, [r7, #8]
    d812:	695b      	ldr	r3, [r3, #20]
    d814:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned short pos;
    gxObject *it;
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    d816:	68fb      	ldr	r3, [r7, #12]
    d818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    d81c:	4619      	mov	r1, r3
    d81e:	6878      	ldr	r0, [r7, #4]
    d820:	f7f5 fa78 	bl	2d14 <bb_capacity>
    d824:	6238      	str	r0, [r7, #32]
    d826:	6a3b      	ldr	r3, [r7, #32]
    d828:	2b00      	cmp	r3, #0
    d82a:	d001      	beq.n	d830 <getLNObjects+0x2c>
    {
        return ret;
    d82c:	6a3b      	ldr	r3, [r7, #32]
    d82e:	e0c5      	b.n	d9bc <getLNObjects+0x1b8>
    }
    //Add count only for first time.
    if (!e->transaction)
    d830:	68bb      	ldr	r3, [r7, #8]
    d832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    d836:	2b00      	cmp	r3, #0
    d838:	d118      	bne.n	d86c <getLNObjects+0x68>
    {
        settings->count = object->objectList.size;
    d83a:	69bb      	ldr	r3, [r7, #24]
    d83c:	8b5a      	ldrh	r2, [r3, #26]
    d83e:	68fb      	ldr	r3, [r7, #12]
    d840:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d844:	2101      	movs	r1, #1
    d846:	6878      	ldr	r0, [r7, #4]
    d848:	f7f5 fae4 	bl	2e14 <bb_setUInt8>
    d84c:	6238      	str	r0, [r7, #32]
    d84e:	6a3b      	ldr	r3, [r7, #32]
    d850:	2b00      	cmp	r3, #0
    d852:	d109      	bne.n	d868 <getLNObjects+0x64>
            //Add count
            (ret = hlp_setObjectCount(object->objectList.size, data)) != 0)
    d854:	69bb      	ldr	r3, [r7, #24]
    d856:	8b5b      	ldrh	r3, [r3, #26]
    }
    //Add count only for first time.
    if (!e->transaction)
    {
        settings->count = object->objectList.size;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d858:	6879      	ldr	r1, [r7, #4]
    d85a:	4618      	mov	r0, r3
    d85c:	f014 f83e 	bl	218dc <hlp_setObjectCount>
    d860:	6238      	str	r0, [r7, #32]
    d862:	6a3b      	ldr	r3, [r7, #32]
    d864:	2b00      	cmp	r3, #0
    d866:	d001      	beq.n	d86c <getLNObjects+0x68>
            //Add count
            (ret = hlp_setObjectCount(object->objectList.size, data)) != 0)
        {
            return ret;
    d868:	6a3b      	ldr	r3, [r7, #32]
    d86a:	e0a7      	b.n	d9bc <getLNObjects+0x1b8>
        }
    }
    for (pos = 0; pos != object->objectList.size; ++pos)
    d86c:	2300      	movs	r3, #0
    d86e:	83fb      	strh	r3, [r7, #30]
    d870:	e092      	b.n	d998 <getLNObjects+0x194>
    {
        if (!(pos + 1 <= settings->index))
    d872:	8bfb      	ldrh	r3, [r7, #30]
    d874:	3301      	adds	r3, #1
    d876:	68fa      	ldr	r2, [r7, #12]
    d878:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
    d87c:	4293      	cmp	r3, r2
    d87e:	f340 8088 	ble.w	d992 <getLNObjects+0x18e>
        {
            ret = oa_getByIndex(&object->objectList, pos, &it);
    d882:	69bb      	ldr	r3, [r7, #24]
    d884:	3314      	adds	r3, #20
    d886:	f107 0214 	add.w	r2, r7, #20
    d88a:	8bf9      	ldrh	r1, [r7, #30]
    d88c:	4618      	mov	r0, r3
    d88e:	f014 fcd7 	bl	22240 <oa_getByIndex>
    d892:	6238      	str	r0, [r7, #32]
            if (ret != 0)
    d894:	6a3b      	ldr	r3, [r7, #32]
    d896:	2b00      	cmp	r3, #0
    d898:	d001      	beq.n	d89e <getLNObjects+0x9a>
            {
                return ret;
    d89a:	6a3b      	ldr	r3, [r7, #32]
    d89c:	e08e      	b.n	d9bc <getLNObjects+0x1b8>
            }
            pduSize = (unsigned short)data->size;
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	88db      	ldrh	r3, [r3, #6]
    d8a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    d8a4:	2102      	movs	r1, #2
    d8a6:	6878      	ldr	r0, [r7, #4]
    d8a8:	f7f5 fab4 	bl	2e14 <bb_setUInt8>
    d8ac:	6238      	str	r0, [r7, #32]
    d8ae:	6a3b      	ldr	r3, [r7, #32]
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d179      	bne.n	d9a8 <getLNObjects+0x1a4>
    d8b4:	2104      	movs	r1, #4
    d8b6:	6878      	ldr	r0, [r7, #4]
    d8b8:	f7f5 faac 	bl	2e14 <bb_setUInt8>
    d8bc:	6238      	str	r0, [r7, #32]
    d8be:	6a3b      	ldr	r3, [r7, #32]
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	d171      	bne.n	d9a8 <getLNObjects+0x1a4>
                //Count
                (ret = bb_setUInt8(data, 4)) != 0 ||
    d8c4:	2112      	movs	r1, #18
    d8c6:	6878      	ldr	r0, [r7, #4]
    d8c8:	f7f5 faa4 	bl	2e14 <bb_setUInt8>
    d8cc:	6238      	str	r0, [r7, #32]
    d8ce:	6a3b      	ldr	r3, [r7, #32]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d169      	bne.n	d9a8 <getLNObjects+0x1a4>
                //ClassID
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->objectType)) != 0 ||
    d8d4:	697b      	ldr	r3, [r7, #20]
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	b29b      	uxth	r3, r3
            pduSize = (unsigned short)data->size;
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                //Count
                (ret = bb_setUInt8(data, 4)) != 0 ||
                //ClassID
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    d8da:	4619      	mov	r1, r3
    d8dc:	6878      	ldr	r0, [r7, #4]
    d8de:	f7f5 fb2b 	bl	2f38 <bb_setUInt16>
    d8e2:	6238      	str	r0, [r7, #32]
    d8e4:	6a3b      	ldr	r3, [r7, #32]
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	d15e      	bne.n	d9a8 <getLNObjects+0x1a4>
                (ret = bb_setUInt16(data, it->objectType)) != 0 ||
    d8ea:	2111      	movs	r1, #17
    d8ec:	6878      	ldr	r0, [r7, #4]
    d8ee:	f7f5 fa91 	bl	2e14 <bb_setUInt8>
    d8f2:	6238      	str	r0, [r7, #32]
    d8f4:	6a3b      	ldr	r3, [r7, #32]
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d156      	bne.n	d9a8 <getLNObjects+0x1a4>
                //Version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->version)) != 0 ||
    d8fa:	697b      	ldr	r3, [r7, #20]
    d8fc:	785b      	ldrb	r3, [r3, #1]
                (ret = bb_setUInt8(data, 4)) != 0 ||
                //ClassID
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->objectType)) != 0 ||
                //Version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    d8fe:	4619      	mov	r1, r3
    d900:	6878      	ldr	r0, [r7, #4]
    d902:	f7f5 fa87 	bl	2e14 <bb_setUInt8>
    d906:	6238      	str	r0, [r7, #32]
    d908:	6a3b      	ldr	r3, [r7, #32]
    d90a:	2b00      	cmp	r3, #0
    d90c:	d14c      	bne.n	d9a8 <getLNObjects+0x1a4>
                (ret = bb_setUInt8(data, (unsigned char)it->version)) != 0 ||
    d90e:	2109      	movs	r1, #9
    d910:	6878      	ldr	r0, [r7, #4]
    d912:	f7f5 fa7f 	bl	2e14 <bb_setUInt8>
    d916:	6238      	str	r0, [r7, #32]
    d918:	6a3b      	ldr	r3, [r7, #32]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d144      	bne.n	d9a8 <getLNObjects+0x1a4>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d91e:	2106      	movs	r1, #6
    d920:	6878      	ldr	r0, [r7, #4]
    d922:	f7f5 fa77 	bl	2e14 <bb_setUInt8>
    d926:	6238      	str	r0, [r7, #32]
    d928:	6a3b      	ldr	r3, [r7, #32]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d13c      	bne.n	d9a8 <getLNObjects+0x1a4>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, it->logicalName, 6)) != 0)
    d92e:	697b      	ldr	r3, [r7, #20]
    d930:	3306      	adds	r3, #6
                //Version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->version)) != 0 ||
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
    d932:	2206      	movs	r2, #6
    d934:	4619      	mov	r1, r3
    d936:	6878      	ldr	r0, [r7, #4]
    d938:	f7f5 fe12 	bl	3560 <bb_set>
    d93c:	6238      	str	r0, [r7, #32]
    d93e:	6a3b      	ldr	r3, [r7, #32]
    d940:	2b00      	cmp	r3, #0
    d942:	d131      	bne.n	d9a8 <getLNObjects+0x1a4>
                (ret = bb_set(data, it->logicalName, 6)) != 0)
            {
                break;
            }
            //Access rights.
            ret = getLNAccessRights(settings, it, data);
    d944:	697b      	ldr	r3, [r7, #20]
    d946:	687a      	ldr	r2, [r7, #4]
    d948:	4619      	mov	r1, r3
    d94a:	68f8      	ldr	r0, [r7, #12]
    d94c:	f7ff fe44 	bl	d5d8 <getLNAccessRights>
    d950:	6238      	str	r0, [r7, #32]
            if (ret != 0)
    d952:	6a3b      	ldr	r3, [r7, #32]
    d954:	2b00      	cmp	r3, #0
    d956:	d126      	bne.n	d9a6 <getLNObjects+0x1a2>
            {
                break;
            }
            if (settings->server)
    d958:	68fb      	ldr	r3, [r7, #12]
    d95a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    d95e:	2b00      	cmp	r3, #0
    d960:	d00f      	beq.n	d982 <getLNObjects+0x17e>
            {
                //If PDU is full.
                if (!e->skipMaxPduSize && dlms_isPduFull(settings, data))
    d962:	68bb      	ldr	r3, [r7, #8]
    d964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    d968:	2b00      	cmp	r3, #0
    d96a:	d10a      	bne.n	d982 <getLNObjects+0x17e>
    d96c:	6879      	ldr	r1, [r7, #4]
    d96e:	68f8      	ldr	r0, [r7, #12]
    d970:	f7ff ff12 	bl	d798 <dlms_isPduFull>
    d974:	4603      	mov	r3, r0
    d976:	2b00      	cmp	r3, #0
    d978:	d003      	beq.n	d982 <getLNObjects+0x17e>
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
    d97a:	f44f 7382 	mov.w	r3, #260	; 0x104
    d97e:	623b      	str	r3, [r7, #32]
                    break;
    d980:	e012      	b.n	d9a8 <getLNObjects+0x1a4>
                }
            }
            ++settings->index;
    d982:	68fb      	ldr	r3, [r7, #12]
    d984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    d988:	3301      	adds	r3, #1
    d98a:	b29a      	uxth	r2, r3
    d98c:	68fb      	ldr	r3, [r7, #12]
    d98e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            (ret = hlp_setObjectCount(object->objectList.size, data)) != 0)
        {
            return ret;
        }
    }
    for (pos = 0; pos != object->objectList.size; ++pos)
    d992:	8bfb      	ldrh	r3, [r7, #30]
    d994:	3301      	adds	r3, #1
    d996:	83fb      	strh	r3, [r7, #30]
    d998:	69bb      	ldr	r3, [r7, #24]
    d99a:	8b5b      	ldrh	r3, [r3, #26]
    d99c:	8bfa      	ldrh	r2, [r7, #30]
    d99e:	429a      	cmp	r2, r3
    d9a0:	f47f af67 	bne.w	d872 <getLNObjects+0x6e>
    d9a4:	e000      	b.n	d9a8 <getLNObjects+0x1a4>
            }
            //Access rights.
            ret = getLNAccessRights(settings, it, data);
            if (ret != 0)
            {
                break;
    d9a6:	bf00      	nop
                }
            }
            ++settings->index;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    d9a8:	6a3b      	ldr	r3, [r7, #32]
    d9aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    d9ae:	d104      	bne.n	d9ba <getLNObjects+0x1b6>
    {
        data->size = pduSize;
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d9b4:	80da      	strh	r2, [r3, #6]
        ret = 0;
    d9b6:	2300      	movs	r3, #0
    d9b8:	623b      	str	r3, [r7, #32]
    }
    return ret;
    d9ba:	6a3b      	ldr	r3, [r7, #32]
}
    d9bc:	4618      	mov	r0, r3
    d9be:	3728      	adds	r7, #40	; 0x28
    d9c0:	46bd      	mov	sp, r7
    d9c2:	bd80      	pop	{r7, pc}

0000d9c4 <getUserList>:
*/
int getUserList(
    dlmsSettings* settings,
    gxValueEventArg *e,
    gxByteBuffer *data)
{
    d9c4:	b580      	push	{r7, lr}
    d9c6:	b08a      	sub	sp, #40	; 0x28
    d9c8:	af00      	add	r7, sp, #0
    d9ca:	60f8      	str	r0, [r7, #12]
    d9cc:	60b9      	str	r1, [r7, #8]
    d9ce:	607a      	str	r2, [r7, #4]
    unsigned char len, pos = 0;
    d9d0:	2300      	movs	r3, #0
    d9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int ret;
    gxKey2* it;
    gxAssociationLogicalName* target = (gxAssociationLogicalName*)e->target;
    d9d6:	68bb      	ldr	r3, [r7, #8]
    d9d8:	695b      	ldr	r3, [r3, #20]
    d9da:	61fb      	str	r3, [r7, #28]
    // Add count only for first time.
    if (settings->index == 0)
    d9dc:	68fb      	ldr	r3, [r7, #12]
    d9de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    d9e2:	2b00      	cmp	r3, #0
    d9e4:	d11a      	bne.n	da1c <getUserList+0x58>
    {
        settings->count = target->userList.size;
    d9e6:	69fb      	ldr	r3, [r7, #28]
    d9e8:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
    d9ec:	68fb      	ldr	r3, [r7, #12]
    d9ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    d9f2:	2101      	movs	r1, #1
    d9f4:	6878      	ldr	r0, [r7, #4]
    d9f6:	f7f5 fa0d 	bl	2e14 <bb_setUInt8>
    d9fa:	6238      	str	r0, [r7, #32]
    d9fc:	6a3b      	ldr	r3, [r7, #32]
    d9fe:	2b00      	cmp	r3, #0
    da00:	d10a      	bne.n	da18 <getUserList+0x54>
            (ret = hlp_setObjectCount(target->userList.size, data)) != 0)
    da02:	69fb      	ldr	r3, [r7, #28]
    da04:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    gxAssociationLogicalName* target = (gxAssociationLogicalName*)e->target;
    // Add count only for first time.
    if (settings->index == 0)
    {
        settings->count = target->userList.size;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    da08:	6879      	ldr	r1, [r7, #4]
    da0a:	4618      	mov	r0, r3
    da0c:	f013 ff66 	bl	218dc <hlp_setObjectCount>
    da10:	6238      	str	r0, [r7, #32]
    da12:	6a3b      	ldr	r3, [r7, #32]
    da14:	2b00      	cmp	r3, #0
    da16:	d001      	beq.n	da1c <getUserList+0x58>
            (ret = hlp_setObjectCount(target->userList.size, data)) != 0)
        {
            return ret;
    da18:	6a3b      	ldr	r3, [r7, #32]
    da1a:	e078      	b.n	db0e <getUserList+0x14a>
        }
    }
    for (pos = 0; pos != target->userList.size; ++pos)
    da1c:	2300      	movs	r3, #0
    da1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    da22:	e06b      	b.n	dafc <getUserList+0x138>
    {
        if (!(pos + 1 <= settings->index))
    da24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da28:	3301      	adds	r3, #1
    da2a:	68fa      	ldr	r2, [r7, #12]
    da2c:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
    da30:	4293      	cmp	r3, r2
    da32:	dd5e      	ble.n	daf2 <getUserList+0x12e>
        {
            if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0 ||
    da34:	69fb      	ldr	r3, [r7, #28]
    da36:	3368      	adds	r3, #104	; 0x68
    da38:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    da3c:	f107 0214 	add.w	r2, r7, #20
    da40:	4618      	mov	r0, r3
    da42:	f7fe fedb 	bl	c7fc <arr_getByIndex>
    da46:	6238      	str	r0, [r7, #32]
    da48:	6a3b      	ldr	r3, [r7, #32]
    da4a:	2b00      	cmp	r3, #0
    da4c:	d121      	bne.n	da92 <getUserList+0xce>
    da4e:	2102      	movs	r1, #2
    da50:	6878      	ldr	r0, [r7, #4]
    da52:	f7f5 f9df 	bl	2e14 <bb_setUInt8>
    da56:	6238      	str	r0, [r7, #32]
    da58:	6a3b      	ldr	r3, [r7, #32]
    da5a:	2b00      	cmp	r3, #0
    da5c:	d119      	bne.n	da92 <getUserList+0xce>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    da5e:	2102      	movs	r1, #2
    da60:	6878      	ldr	r0, [r7, #4]
    da62:	f7f5 f9d7 	bl	2e14 <bb_setUInt8>
    da66:	6238      	str	r0, [r7, #32]
    da68:	6a3b      	ldr	r3, [r7, #32]
    da6a:	2b00      	cmp	r3, #0
    da6c:	d111      	bne.n	da92 <getUserList+0xce>
                // Count
                (ret = bb_setUInt8(data, 2)) != 0 ||
    da6e:	2111      	movs	r1, #17
    da70:	6878      	ldr	r0, [r7, #4]
    da72:	f7f5 f9cf 	bl	2e14 <bb_setUInt8>
    da76:	6238      	str	r0, [r7, #32]
    da78:	6a3b      	ldr	r3, [r7, #32]
    da7a:	2b00      	cmp	r3, #0
    da7c:	d109      	bne.n	da92 <getUserList+0xce>
                // Id
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->key)) != 0)
    da7e:	697b      	ldr	r3, [r7, #20]
    da80:	781b      	ldrb	r3, [r3, #0]
            if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                // Count
                (ret = bb_setUInt8(data, 2)) != 0 ||
                // Id
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    da82:	4619      	mov	r1, r3
    da84:	6878      	ldr	r0, [r7, #4]
    da86:	f7f5 f9c5 	bl	2e14 <bb_setUInt8>
    da8a:	6238      	str	r0, [r7, #32]
    da8c:	6a3b      	ldr	r3, [r7, #32]
    da8e:	2b00      	cmp	r3, #0
    da90:	d001      	beq.n	da96 <getUserList+0xd2>
                (ret = bb_setUInt8(data, it->key)) != 0)
            {
                return ret;
    da92:	6a3b      	ldr	r3, [r7, #32]
    da94:	e03b      	b.n	db0e <getUserList+0x14a>
            }
            ++settings->index;
    da96:	68fb      	ldr	r3, [r7, #12]
    da98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    da9c:	3301      	adds	r3, #1
    da9e:	b29a      	uxth	r2, r3
    daa0:	68fb      	ldr	r3, [r7, #12]
    daa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            // Name
            len = (unsigned char)strlen((char*)it->value);
    daa6:	697b      	ldr	r3, [r7, #20]
    daa8:	685b      	ldr	r3, [r3, #4]
    daaa:	4618      	mov	r0, r3
    daac:	f7f2 fb38 	bl	120 <strlen>
    dab0:	4603      	mov	r3, r0
    dab2:	76fb      	strb	r3, [r7, #27]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
    dab4:	210a      	movs	r1, #10
    dab6:	6878      	ldr	r0, [r7, #4]
    dab8:	f7f5 f9ac 	bl	2e14 <bb_setUInt8>
    dabc:	6238      	str	r0, [r7, #32]
    dabe:	6a3b      	ldr	r3, [r7, #32]
    dac0:	2b00      	cmp	r3, #0
    dac2:	d114      	bne.n	daee <getUserList+0x12a>
                (ret = hlp_setObjectCount(len, data)) != 0 ||
    dac4:	7efb      	ldrb	r3, [r7, #27]
                return ret;
            }
            ++settings->index;
            // Name
            len = (unsigned char)strlen((char*)it->value);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
    dac6:	6879      	ldr	r1, [r7, #4]
    dac8:	4618      	mov	r0, r3
    daca:	f013 ff07 	bl	218dc <hlp_setObjectCount>
    dace:	6238      	str	r0, [r7, #32]
    dad0:	6a3b      	ldr	r3, [r7, #32]
    dad2:	2b00      	cmp	r3, #0
    dad4:	d10b      	bne.n	daee <getUserList+0x12a>
                (ret = hlp_setObjectCount(len, data)) != 0 ||
                (ret = bb_set(data, it->value, len)) != 0)
    dad6:	697b      	ldr	r3, [r7, #20]
    dad8:	685b      	ldr	r3, [r3, #4]
    dada:	7efa      	ldrb	r2, [r7, #27]
    dadc:	b292      	uxth	r2, r2
            }
            ++settings->index;
            // Name
            len = (unsigned char)strlen((char*)it->value);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
                (ret = hlp_setObjectCount(len, data)) != 0 ||
    dade:	4619      	mov	r1, r3
    dae0:	6878      	ldr	r0, [r7, #4]
    dae2:	f7f5 fd3d 	bl	3560 <bb_set>
    dae6:	6238      	str	r0, [r7, #32]
    dae8:	6a3b      	ldr	r3, [r7, #32]
    daea:	2b00      	cmp	r3, #0
    daec:	d001      	beq.n	daf2 <getUserList+0x12e>
                (ret = bb_set(data, it->value, len)) != 0)
            {
                return ret;
    daee:	6a3b      	ldr	r3, [r7, #32]
    daf0:	e00d      	b.n	db0e <getUserList+0x14a>
            (ret = hlp_setObjectCount(target->userList.size, data)) != 0)
        {
            return ret;
        }
    }
    for (pos = 0; pos != target->userList.size; ++pos)
    daf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    daf6:	3301      	adds	r3, #1
    daf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    dafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db00:	b29a      	uxth	r2, r3
    db02:	69fb      	ldr	r3, [r7, #28]
    db04:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
    db08:	429a      	cmp	r2, r3
    db0a:	d18b      	bne.n	da24 <getUserList+0x60>
            {
                return ret;
            }
        }
    }
    return 0;
    db0c:	2300      	movs	r3, #0
}
    db0e:	4618      	mov	r0, r3
    db10:	3728      	adds	r7, #40	; 0x28
    db12:	46bd      	mov	sp, r7
    db14:	bd80      	pop	{r7, pc}
    db16:	bf00      	nop

0000db18 <cosem_getAssociationLogicalName>:

int cosem_getAssociationLogicalName(
    dlmsSettings* settings,
    gxValueEventArg *e)
{
    db18:	b580      	push	{r7, lr}
    db1a:	b090      	sub	sp, #64	; 0x40
    db1c:	af00      	add	r7, sp, #0
    db1e:	6078      	str	r0, [r7, #4]
    db20:	6039      	str	r1, [r7, #0]
    int ret = 0;
    db22:	2300      	movs	r3, #0
    db24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (e->index == 2)
    db26:	683b      	ldr	r3, [r7, #0]
    db28:	7e1b      	ldrb	r3, [r3, #24]
    db2a:	2b02      	cmp	r3, #2
    db2c:	d117      	bne.n	db5e <cosem_getAssociationLogicalName+0x46>
    {
#ifndef DLMS_IGNORE_SERVER
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    db2e:	683b      	ldr	r3, [r7, #0]
    db30:	4618      	mov	r0, r3
    db32:	f7fe ff37 	bl	c9a4 <cosem_getByteBuffer>
    db36:	63f8      	str	r0, [r7, #60]	; 0x3c
    db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db3a:	2b00      	cmp	r3, #0
    db3c:	d001      	beq.n	db42 <cosem_getAssociationLogicalName+0x2a>
        {
            return ret;
    db3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db40:	e311      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    db42:	683b      	ldr	r3, [r7, #0]
    db44:	689b      	ldr	r3, [r3, #8]
    db46:	63bb      	str	r3, [r7, #56]	; 0x38
        e->byteArray = 1;
    db48:	683b      	ldr	r3, [r7, #0]
    db4a:	2201      	movs	r2, #1
    db4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getLNObjects(settings, e, data);
    db50:	6bba      	ldr	r2, [r7, #56]	; 0x38
    db52:	6839      	ldr	r1, [r7, #0]
    db54:	6878      	ldr	r0, [r7, #4]
    db56:	f7ff fe55 	bl	d804 <getLNObjects>
    db5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    db5c:	e302      	b.n	e164 <cosem_getAssociationLogicalName+0x64c>
#endif //DLMS_IGNORE_SERVER
    }
    else if (e->index == 3)
    db5e:	683b      	ldr	r3, [r7, #0]
    db60:	7e1b      	ldrb	r3, [r3, #24]
    db62:	2b03      	cmp	r3, #3
    db64:	d14a      	bne.n	dbfc <cosem_getAssociationLogicalName+0xe4>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    db66:	683b      	ldr	r3, [r7, #0]
    db68:	4618      	mov	r0, r3
    db6a:	f7fe ff1b 	bl	c9a4 <cosem_getByteBuffer>
    db6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    db70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db72:	2b00      	cmp	r3, #0
    db74:	d001      	beq.n	db7a <cosem_getAssociationLogicalName+0x62>
        {
            return ret;
    db76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db78:	e2f5      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    db7a:	683b      	ldr	r3, [r7, #0]
    db7c:	689b      	ldr	r3, [r3, #8]
    db7e:	637b      	str	r3, [r7, #52]	; 0x34
        e->byteArray = 1;
    db80:	683b      	ldr	r3, [r7, #0]
    db82:	2201      	movs	r2, #1
    db84:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    db88:	2102      	movs	r1, #2
    db8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    db8c:	f7f5 f942 	bl	2e14 <bb_setUInt8>
    db90:	63f8      	str	r0, [r7, #60]	; 0x3c
    db92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db94:	2b00      	cmp	r3, #0
    db96:	d12f      	bne.n	dbf8 <cosem_getAssociationLogicalName+0xe0>
    db98:	2102      	movs	r1, #2
    db9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    db9c:	f7f5 f93a 	bl	2e14 <bb_setUInt8>
    dba0:	63f8      	str	r0, [r7, #60]	; 0x3c
    dba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dba4:	2b00      	cmp	r3, #0
    dba6:	d127      	bne.n	dbf8 <cosem_getAssociationLogicalName+0xe0>
            //Add count
            (ret = bb_setUInt8(data, 2)) != 0 ||
    dba8:	210f      	movs	r1, #15
    dbaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbac:	f7f5 f932 	bl	2e14 <bb_setUInt8>
    dbb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    dbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d11f      	bne.n	dbf8 <cosem_getAssociationLogicalName+0xe0>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->clientSAP)) != 0 ||
    dbb8:	683b      	ldr	r3, [r7, #0]
    dbba:	695b      	ldr	r3, [r3, #20]
    dbbc:	f893 3020 	ldrb.w	r3, [r3, #32]
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            //Add count
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    dbc0:	4619      	mov	r1, r3
    dbc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbc4:	f7f5 f926 	bl	2e14 <bb_setUInt8>
    dbc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    dbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbcc:	2b00      	cmp	r3, #0
    dbce:	d113      	bne.n	dbf8 <cosem_getAssociationLogicalName+0xe0>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->clientSAP)) != 0 ||
    dbd0:	2112      	movs	r1, #18
    dbd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbd4:	f7f5 f91e 	bl	2e14 <bb_setUInt8>
    dbd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    dbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbdc:	2b00      	cmp	r3, #0
    dbde:	d10b      	bne.n	dbf8 <cosem_getAssociationLogicalName+0xe0>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->serverSAP)) != 0)
    dbe0:	683b      	ldr	r3, [r7, #0]
    dbe2:	695b      	ldr	r3, [r3, #20]
    dbe4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            //Add count
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->clientSAP)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    dbe6:	4619      	mov	r1, r3
    dbe8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbea:	f7f5 f9a5 	bl	2f38 <bb_setUInt16>
    dbee:	63f8      	str	r0, [r7, #60]	; 0x3c
    dbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	f000 82b6 	beq.w	e164 <cosem_getAssociationLogicalName+0x64c>
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->serverSAP)) != 0)
        {
            return ret;
    dbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbfa:	e2b4      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
    }
    else if (e->index == 4)
    dbfc:	683b      	ldr	r3, [r7, #0]
    dbfe:	7e1b      	ldrb	r3, [r3, #24]
    dc00:	2b04      	cmp	r3, #4
    dc02:	d16b      	bne.n	dcdc <cosem_getAssociationLogicalName+0x1c4>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    dc04:	683b      	ldr	r3, [r7, #0]
    dc06:	4618      	mov	r0, r3
    dc08:	f7fe fecc 	bl	c9a4 <cosem_getByteBuffer>
    dc0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc10:	2b00      	cmp	r3, #0
    dc12:	d001      	beq.n	dc18 <cosem_getAssociationLogicalName+0x100>
        {
            return ret;
    dc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc16:	e2a6      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    dc18:	683b      	ldr	r3, [r7, #0]
    dc1a:	689b      	ldr	r3, [r3, #8]
    dc1c:	633b      	str	r3, [r7, #48]	; 0x30
        e->byteArray = 1;
    dc1e:	683b      	ldr	r3, [r7, #0]
    dc20:	2201      	movs	r2, #1
    dc22:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    dc26:	2109      	movs	r1, #9
    dc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc2a:	f7f5 f8f3 	bl	2e14 <bb_setUInt8>
    dc2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc32:	2b00      	cmp	r3, #0
    dc34:	d150      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
    dc36:	2107      	movs	r1, #7
    dc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc3a:	f7f5 f8eb 	bl	2e14 <bb_setUInt8>
    dc3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc42:	2b00      	cmp	r3, #0
    dc44:	d148      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            //Add count
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
    dc46:	2160      	movs	r1, #96	; 0x60
    dc48:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc4a:	f7f5 f8e3 	bl	2e14 <bb_setUInt8>
    dc4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc52:	2b00      	cmp	r3, #0
    dc54:	d140      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
    dc56:	2185      	movs	r1, #133	; 0x85
    dc58:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc5a:	f7f5 f8db 	bl	2e14 <bb_setUInt8>
    dc5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc62:	2b00      	cmp	r3, #0
    dc64:	d138      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
    dc66:	2174      	movs	r1, #116	; 0x74
    dc68:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc6a:	f7f5 f8d3 	bl	2e14 <bb_setUInt8>
    dc6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc72:	2b00      	cmp	r3, #0
    dc74:	d130      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.identifiedOrganization)) != 0 ||
    dc76:	683b      	ldr	r3, [r7, #0]
    dc78:	695b      	ldr	r3, [r3, #20]
    dc7a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            //Add count
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
    dc7e:	4619      	mov	r1, r3
    dc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc82:	f7f5 f8c7 	bl	2e14 <bb_setUInt8>
    dc86:	63f8      	str	r0, [r7, #60]	; 0x3c
    dc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d124      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            //Add data.
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.dlmsUA)) != 0 ||
    dc8e:	683b      	ldr	r3, [r7, #0]
    dc90:	695b      	ldr	r3, [r3, #20]
    dc92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.identifiedOrganization)) != 0 ||
    dc96:	4619      	mov	r1, r3
    dc98:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dc9a:	f7f5 f8bb 	bl	2e14 <bb_setUInt8>
    dc9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dca2:	2b00      	cmp	r3, #0
    dca4:	d118      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.dlmsUA)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.applicationContext)) != 0 ||
    dca6:	683b      	ldr	r3, [r7, #0]
    dca8:	695b      	ldr	r3, [r3, #20]
    dcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.dlmsUA)) != 0 ||
    dcae:	4619      	mov	r1, r3
    dcb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dcb2:	f7f5 f8af 	bl	2e14 <bb_setUInt8>
    dcb6:	63f8      	str	r0, [r7, #60]	; 0x3c
    dcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d10c      	bne.n	dcd8 <cosem_getAssociationLogicalName+0x1c0>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.applicationContext)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.contextId)) != 0)
    dcbe:	683b      	ldr	r3, [r7, #0]
    dcc0:	695b      	ldr	r3, [r3, #20]
    dcc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.dlmsUA)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.applicationContext)) != 0 ||
    dcc6:	4619      	mov	r1, r3
    dcc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dcca:	f7f5 f8a3 	bl	2e14 <bb_setUInt8>
    dcce:	63f8      	str	r0, [r7, #60]	; 0x3c
    dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	f000 8246 	beq.w	e164 <cosem_getAssociationLogicalName+0x64c>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->applicationContextName.contextId)) != 0)
        {
            return ret;
    dcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dcda:	e244      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
    }
    else if (e->index == 5)
    dcdc:	683b      	ldr	r3, [r7, #0]
    dcde:	7e1b      	ldrb	r3, [r3, #24]
    dce0:	2b05      	cmp	r3, #5
    dce2:	f040 80d6 	bne.w	de92 <cosem_getAssociationLogicalName+0x37a>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    dce6:	683b      	ldr	r3, [r7, #0]
    dce8:	4618      	mov	r0, r3
    dcea:	f7fe fe5b 	bl	c9a4 <cosem_getByteBuffer>
    dcee:	63f8      	str	r0, [r7, #60]	; 0x3c
    dcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dcf2:	2b00      	cmp	r3, #0
    dcf4:	d001      	beq.n	dcfa <cosem_getAssociationLogicalName+0x1e2>
        {
            return ret;
    dcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dcf8:	e235      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    dcfa:	683b      	ldr	r3, [r7, #0]
    dcfc:	689b      	ldr	r3, [r3, #8]
    dcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        gxByteBuffer tmp;
        e->byteArray = 1;
    dd00:	683b      	ldr	r3, [r7, #0]
    dd02:	2201      	movs	r2, #1
    dd04:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        //Add count
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    dd08:	2102      	movs	r1, #2
    dd0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dd0c:	f7f5 f882 	bl	2e14 <bb_setUInt8>
    dd10:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd14:	2b00      	cmp	r3, #0
    dd16:	f040 80ba 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
    dd1a:	2106      	movs	r1, #6
    dd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dd1e:	f7f5 f879 	bl	2e14 <bb_setUInt8>
    dd22:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd26:	2b00      	cmp	r3, #0
    dd28:	f040 80b1 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    dd2c:	f107 0308 	add.w	r3, r7, #8
    dd30:	4618      	mov	r0, r3
    dd32:	f7f4 ffd9 	bl	2ce8 <bb_init>
    dd36:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	f040 80a7 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
            //Add data.
            (ret = bb_init(&tmp)) != 0 ||
            (ret = bb_setUInt32(&tmp, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.conformance)) != 0 ||
    dd40:	683b      	ldr	r3, [r7, #0]
    dd42:	695b      	ldr	r3, [r3, #20]
    dd44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        e->byteArray = 1;
        //Add count
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
            //Add data.
            (ret = bb_init(&tmp)) != 0 ||
    dd46:	f107 0308 	add.w	r3, r7, #8
    dd4a:	4611      	mov	r1, r2
    dd4c:	4618      	mov	r0, r3
    dd4e:	f7f5 f955 	bl	2ffc <bb_setUInt32>
    dd52:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd56:	2b00      	cmp	r3, #0
    dd58:	f040 8099 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt32(&tmp, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.conformance)) != 0 ||
    dd5c:	2104      	movs	r1, #4
    dd5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dd60:	f7f5 f858 	bl	2e14 <bb_setUInt8>
    dd64:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd68:	2b00      	cmp	r3, #0
    dd6a:	f040 8090 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
    dd6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    dd70:	2018      	movs	r0, #24
    dd72:	f013 fdb3 	bl	218dc <hlp_setObjectCount>
    dd76:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd7a:	2b00      	cmp	r3, #0
    dd7c:	f040 8087 	bne.w	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = hlp_setObjectCount(3 * 8, data)) != 0 ||
            (ret = bb_set(data, tmp.data + 1, 3)) != 0 ||
    dd80:	68bb      	ldr	r3, [r7, #8]
    dd82:	3301      	adds	r3, #1
            (ret = bb_setUInt8(data, 6)) != 0 ||
            //Add data.
            (ret = bb_init(&tmp)) != 0 ||
            (ret = bb_setUInt32(&tmp, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.conformance)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(3 * 8, data)) != 0 ||
    dd84:	2203      	movs	r2, #3
    dd86:	4619      	mov	r1, r3
    dd88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dd8a:	f7f5 fbe9 	bl	3560 <bb_set>
    dd8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    dd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd92:	2b00      	cmp	r3, #0
    dd94:	d17b      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_set(data, tmp.data + 1, 3)) != 0 ||
    dd96:	f107 0308 	add.w	r3, r7, #8
    dd9a:	4618      	mov	r0, r3
    dd9c:	f7f5 fce2 	bl	3764 <bb_clear>
    dda0:	63f8      	str	r0, [r7, #60]	; 0x3c
    dda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dda4:	2b00      	cmp	r3, #0
    dda6:	d172      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_clear(&tmp)) != 0 ||
    dda8:	2112      	movs	r1, #18
    ddaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ddac:	f7f5 f832 	bl	2e14 <bb_setUInt8>
    ddb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d16a      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
    ddb8:	683b      	ldr	r3, [r7, #0]
    ddba:	695b      	ldr	r3, [r3, #20]
    ddbc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
            (ret = bb_setUInt32(&tmp, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.conformance)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(3 * 8, data)) != 0 ||
            (ret = bb_set(data, tmp.data + 1, 3)) != 0 ||
            (ret = bb_clear(&tmp)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    ddbe:	4619      	mov	r1, r3
    ddc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ddc2:	f7f5 f8b9 	bl	2f38 <bb_setUInt16>
    ddc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    ddc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d15f      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
    ddce:	2112      	movs	r1, #18
    ddd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ddd2:	f7f5 f81f 	bl	2e14 <bb_setUInt8>
    ddd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddda:	2b00      	cmp	r3, #0
    dddc:	d157      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxSendPpuSize)) != 0 ||
    ddde:	683b      	ldr	r3, [r7, #0]
    dde0:	695b      	ldr	r3, [r3, #20]
    dde2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
            (ret = hlp_setObjectCount(3 * 8, data)) != 0 ||
            (ret = bb_set(data, tmp.data + 1, 3)) != 0 ||
            (ret = bb_clear(&tmp)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    dde4:	4619      	mov	r1, r3
    dde6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dde8:	f7f5 f8a6 	bl	2f38 <bb_setUInt16>
    ddec:	63f8      	str	r0, [r7, #60]	; 0x3c
    ddee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddf0:	2b00      	cmp	r3, #0
    ddf2:	d14c      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxSendPpuSize)) != 0 ||
    ddf4:	2111      	movs	r1, #17
    ddf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ddf8:	f7f5 f80c 	bl	2e14 <bb_setUInt8>
    ddfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    ddfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de00:	2b00      	cmp	r3, #0
    de02:	d144      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
    de04:	683b      	ldr	r3, [r7, #0]
    de06:	695b      	ldr	r3, [r3, #20]
    de08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
            (ret = bb_clear(&tmp)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxSendPpuSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    de0c:	4619      	mov	r1, r3
    de0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de10:	f7f5 f800 	bl	2e14 <bb_setUInt8>
    de14:	63f8      	str	r0, [r7, #60]	; 0x3c
    de16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de18:	2b00      	cmp	r3, #0
    de1a:	d138      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
    de1c:	210f      	movs	r1, #15
    de1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de20:	f7f4 fff8 	bl	2e14 <bb_setUInt8>
    de24:	63f8      	str	r0, [r7, #60]	; 0x3c
    de26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de28:	2b00      	cmp	r3, #0
    de2a:	d130      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.qualityOfService)) != 0 ||
    de2c:	683b      	ldr	r3, [r7, #0]
    de2e:	695b      	ldr	r3, [r3, #20]
    de30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxSendPpuSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    de34:	4619      	mov	r1, r3
    de36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de38:	f7f4 ffec 	bl	2e14 <bb_setUInt8>
    de3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    de3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de40:	2b00      	cmp	r3, #0
    de42:	d124      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.qualityOfService)) != 0 ||
    de44:	2109      	movs	r1, #9
    de46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de48:	f7f4 ffe4 	bl	2e14 <bb_setUInt8>
    de4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    de4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de50:	2b00      	cmp	r3, #0
    de52:	d11c      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo.size, data)) != 0 ||
    de54:	683b      	ldr	r3, [r7, #0]
    de56:	695b      	ldr	r3, [r3, #20]
    de58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
            (ret = bb_setUInt16(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.maxSendPpuSize)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.qualityOfService)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    de5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    de5e:	4618      	mov	r0, r3
    de60:	f013 fd3c 	bl	218dc <hlp_setObjectCount>
    de64:	63f8      	str	r0, [r7, #60]	; 0x3c
    de66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de68:	2b00      	cmp	r3, #0
    de6a:	d110      	bne.n	de8e <cosem_getAssociationLogicalName+0x376>
            (ret = hlp_setObjectCount(((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo.size, data)) != 0 ||
            (ret = bb_set2(data, &((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo, 0, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo.size)) != 0)
    de6c:	683b      	ldr	r3, [r7, #0]
    de6e:	695b      	ldr	r3, [r3, #20]
    de70:	f103 0140 	add.w	r1, r3, #64	; 0x40
    de74:	683b      	ldr	r3, [r7, #0]
    de76:	695b      	ldr	r3, [r3, #20]
    de78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.qualityOfService)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo.size, data)) != 0 ||
    de7c:	2200      	movs	r2, #0
    de7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de80:	f7f5 fbce 	bl	3620 <bb_set2>
    de84:	63f8      	str	r0, [r7, #60]	; 0x3c
    de86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de88:	2b00      	cmp	r3, #0
    de8a:	f000 816b 	beq.w	e164 <cosem_getAssociationLogicalName+0x64c>
            (ret = bb_set2(data, &((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo, 0, ((gxAssociationLogicalName*)e->target)->xDLMSContextInfo.cypheringInfo.size)) != 0)
        {
            return ret;
    de8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de90:	e169      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
    }
    else if (e->index == 6)
    de92:	683b      	ldr	r3, [r7, #0]
    de94:	7e1b      	ldrb	r3, [r3, #24]
    de96:	2b06      	cmp	r3, #6
    de98:	d16b      	bne.n	df72 <cosem_getAssociationLogicalName+0x45a>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    de9a:	683b      	ldr	r3, [r7, #0]
    de9c:	4618      	mov	r0, r3
    de9e:	f7fe fd81 	bl	c9a4 <cosem_getByteBuffer>
    dea2:	63f8      	str	r0, [r7, #60]	; 0x3c
    dea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dea6:	2b00      	cmp	r3, #0
    dea8:	d001      	beq.n	deae <cosem_getAssociationLogicalName+0x396>
        {
            return ret;
    deaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    deac:	e15b      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    deae:	683b      	ldr	r3, [r7, #0]
    deb0:	689b      	ldr	r3, [r3, #8]
    deb2:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
    deb4:	683b      	ldr	r3, [r7, #0]
    deb6:	2201      	movs	r2, #1
    deb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    debc:	2109      	movs	r1, #9
    debe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dec0:	f7f4 ffa8 	bl	2e14 <bb_setUInt8>
    dec4:	63f8      	str	r0, [r7, #60]	; 0x3c
    dec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dec8:	2b00      	cmp	r3, #0
    deca:	d150      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
    decc:	2107      	movs	r1, #7
    dece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ded0:	f7f4 ffa0 	bl	2e14 <bb_setUInt8>
    ded4:	63f8      	str	r0, [r7, #60]	; 0x3c
    ded6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ded8:	2b00      	cmp	r3, #0
    deda:	d148      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            //Add count
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
    dedc:	2160      	movs	r1, #96	; 0x60
    dede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dee0:	f7f4 ff98 	bl	2e14 <bb_setUInt8>
    dee4:	63f8      	str	r0, [r7, #60]	; 0x3c
    dee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dee8:	2b00      	cmp	r3, #0
    deea:	d140      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            //Add data.
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
    deec:	2185      	movs	r1, #133	; 0x85
    deee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    def0:	f7f4 ff90 	bl	2e14 <bb_setUInt8>
    def4:	63f8      	str	r0, [r7, #60]	; 0x3c
    def6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    def8:	2b00      	cmp	r3, #0
    defa:	d138      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
    defc:	2174      	movs	r1, #116	; 0x74
    defe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df00:	f7f4 ff88 	bl	2e14 <bb_setUInt8>
    df04:	63f8      	str	r0, [r7, #60]	; 0x3c
    df06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df08:	2b00      	cmp	r3, #0
    df0a:	d130      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.identifiedOrganization)) != 0 ||
    df0c:	683b      	ldr	r3, [r7, #0]
    df0e:	695b      	ldr	r3, [r3, #20]
    df10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            //Add count
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
    df14:	4619      	mov	r1, r3
    df16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df18:	f7f4 ff7c 	bl	2e14 <bb_setUInt8>
    df1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    df1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df20:	2b00      	cmp	r3, #0
    df22:	d124      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.dlmsUA)) != 0 ||
    df24:	683b      	ldr	r3, [r7, #0]
    df26:	695b      	ldr	r3, [r3, #20]
    df28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
            //Add data.
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.identifiedOrganization)) != 0 ||
    df2c:	4619      	mov	r1, r3
    df2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df30:	f7f4 ff70 	bl	2e14 <bb_setUInt8>
    df34:	63f8      	str	r0, [r7, #60]	; 0x3c
    df36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df38:	2b00      	cmp	r3, #0
    df3a:	d118      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.dlmsUA)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.authenticationMechanismName)) != 0 ||
    df3c:	683b      	ldr	r3, [r7, #0]
    df3e:	695b      	ldr	r3, [r3, #20]
    df40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
            //Add data.
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.dlmsUA)) != 0 ||
    df44:	4619      	mov	r1, r3
    df46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df48:	f7f4 ff64 	bl	2e14 <bb_setUInt8>
    df4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df50:	2b00      	cmp	r3, #0
    df52:	d10c      	bne.n	df6e <cosem_getAssociationLogicalName+0x456>
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.authenticationMechanismName)) != 0 ||
            (ret = bb_setUInt8(data, (unsigned char)((gxAssociationLogicalName*)e->target)->authenticationMechanismName.mechanismId)) != 0)
    df54:	683b      	ldr	r3, [r7, #0]
    df56:	695b      	ldr	r3, [r3, #20]
    df58:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.identifiedOrganization)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.dlmsUA)) != 0 ||
            (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->authenticationMechanismName.authenticationMechanismName)) != 0 ||
    df5c:	4619      	mov	r1, r3
    df5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    df60:	f7f4 ff58 	bl	2e14 <bb_setUInt8>
    df64:	63f8      	str	r0, [r7, #60]	; 0x3c
    df66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df68:	2b00      	cmp	r3, #0
    df6a:	f000 80fb 	beq.w	e164 <cosem_getAssociationLogicalName+0x64c>
            (ret = bb_setUInt8(data, (unsigned char)((gxAssociationLogicalName*)e->target)->authenticationMechanismName.mechanismId)) != 0)
        {
            return ret;
    df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    df70:	e0f9      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
    }
    else if (e->index == 7)
    df72:	683b      	ldr	r3, [r7, #0]
    df74:	7e1b      	ldrb	r3, [r3, #24]
    df76:	2b07      	cmp	r3, #7
    df78:	d109      	bne.n	df8e <cosem_getAssociationLogicalName+0x476>
    {
        ret = var_addOctetString(&e->value, &((gxAssociationLogicalName*)e->target)->secret);
    df7a:	683a      	ldr	r2, [r7, #0]
    df7c:	683b      	ldr	r3, [r7, #0]
    df7e:	695b      	ldr	r3, [r3, #20]
    df80:	3354      	adds	r3, #84	; 0x54
    df82:	4619      	mov	r1, r3
    df84:	4610      	mov	r0, r2
    df86:	f018 f8b3 	bl	260f0 <var_addOctetString>
    df8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    df8c:	e0ea      	b.n	e164 <cosem_getAssociationLogicalName+0x64c>
    }
    else if (e->index == 8)
    df8e:	683b      	ldr	r3, [r7, #0]
    df90:	7e1b      	ldrb	r3, [r3, #24]
    df92:	2b08      	cmp	r3, #8
    df94:	d109      	bne.n	dfaa <cosem_getAssociationLogicalName+0x492>
    {
        ret = var_setEnum(&e->value, ((gxAssociationLogicalName*)e->target)->associationStatus);
    df96:	683a      	ldr	r2, [r7, #0]
    df98:	683b      	ldr	r3, [r7, #0]
    df9a:	695b      	ldr	r3, [r3, #20]
    df9c:	7c1b      	ldrb	r3, [r3, #16]
    df9e:	4619      	mov	r1, r3
    dfa0:	4610      	mov	r0, r2
    dfa2:	f017 ffa5 	bl	25ef0 <var_setEnum>
    dfa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    dfa8:	e0dc      	b.n	e164 <cosem_getAssociationLogicalName+0x64c>
    }
    else if (e->index == 9)
    dfaa:	683b      	ldr	r3, [r7, #0]
    dfac:	7e1b      	ldrb	r3, [r3, #24]
    dfae:	2b09      	cmp	r3, #9
    dfb0:	d12f      	bne.n	e012 <cosem_getAssociationLogicalName+0x4fa>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    dfb2:	683b      	ldr	r3, [r7, #0]
    dfb4:	4618      	mov	r0, r3
    dfb6:	f7fe fcf5 	bl	c9a4 <cosem_getByteBuffer>
    dfba:	63f8      	str	r0, [r7, #60]	; 0x3c
    dfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d001      	beq.n	dfc6 <cosem_getAssociationLogicalName+0x4ae>
        {
            return ret;
    dfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfc4:	e0cf      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    dfc6:	683b      	ldr	r3, [r7, #0]
    dfc8:	689b      	ldr	r3, [r3, #8]
    dfca:	627b      	str	r3, [r7, #36]	; 0x24
        e->byteArray = 1;
    dfcc:	683b      	ldr	r3, [r7, #0]
    dfce:	2201      	movs	r2, #1
    dfd0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    dfd4:	2109      	movs	r1, #9
    dfd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    dfd8:	f7f4 ff1c 	bl	2e14 <bb_setUInt8>
    dfdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    dfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dfe0:	2b00      	cmp	r3, #0
    dfe2:	d114      	bne.n	e00e <cosem_getAssociationLogicalName+0x4f6>
    dfe4:	2106      	movs	r1, #6
    dfe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    dfe8:	f7f4 ff14 	bl	2e14 <bb_setUInt8>
    dfec:	63f8      	str	r0, [r7, #60]	; 0x3c
    dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dff0:	2b00      	cmp	r3, #0
    dff2:	d10c      	bne.n	e00e <cosem_getAssociationLogicalName+0x4f6>
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxAssociationLogicalName*)e->target)->securitySetupReference, 6)) != 0)
    dff4:	683b      	ldr	r3, [r7, #0]
    dff6:	695b      	ldr	r3, [r3, #20]
    dff8:	3360      	adds	r3, #96	; 0x60
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
    dffa:	2206      	movs	r2, #6
    dffc:	4619      	mov	r1, r3
    dffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e000:	f7f5 faae 	bl	3560 <bb_set>
    e004:	63f8      	str	r0, [r7, #60]	; 0x3c
    e006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e008:	2b00      	cmp	r3, #0
    e00a:	f000 80ab 	beq.w	e164 <cosem_getAssociationLogicalName+0x64c>
            (ret = bb_set(data, ((gxAssociationLogicalName*)e->target)->securitySetupReference, 6)) != 0)
        {
            return ret;
    e00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e010:	e0a9      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
    }
    else if (e->index == 10)
    e012:	683b      	ldr	r3, [r7, #0]
    e014:	7e1b      	ldrb	r3, [r3, #24]
    e016:	2b0a      	cmp	r3, #10
    e018:	d117      	bne.n	e04a <cosem_getAssociationLogicalName+0x532>
    {
        e->byteArray = 1;
    e01a:	683b      	ldr	r3, [r7, #0]
    e01c:	2201      	movs	r2, #1
    e01e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e022:	683b      	ldr	r3, [r7, #0]
    e024:	4618      	mov	r0, r3
    e026:	f7fe fcbd 	bl	c9a4 <cosem_getByteBuffer>
    e02a:	63f8      	str	r0, [r7, #60]	; 0x3c
    e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e02e:	2b00      	cmp	r3, #0
    e030:	d001      	beq.n	e036 <cosem_getAssociationLogicalName+0x51e>
        {
            return ret;
    e032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e034:	e097      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    e036:	683b      	ldr	r3, [r7, #0]
    e038:	689b      	ldr	r3, [r3, #8]
    e03a:	623b      	str	r3, [r7, #32]
        ret = getUserList(settings, e, data);
    e03c:	6a3a      	ldr	r2, [r7, #32]
    e03e:	6839      	ldr	r1, [r7, #0]
    e040:	6878      	ldr	r0, [r7, #4]
    e042:	f7ff fcbf 	bl	d9c4 <getUserList>
    e046:	63f8      	str	r0, [r7, #60]	; 0x3c
    e048:	e08c      	b.n	e164 <cosem_getAssociationLogicalName+0x64c>
    }
    else if (e->index == 11)
    e04a:	683b      	ldr	r3, [r7, #0]
    e04c:	7e1b      	ldrb	r3, [r3, #24]
    e04e:	2b0b      	cmp	r3, #11
    e050:	f040 8085 	bne.w	e15e <cosem_getAssociationLogicalName+0x646>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e054:	683b      	ldr	r3, [r7, #0]
    e056:	4618      	mov	r0, r3
    e058:	f7fe fca4 	bl	c9a4 <cosem_getByteBuffer>
    e05c:	63f8      	str	r0, [r7, #60]	; 0x3c
    e05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e060:	2b00      	cmp	r3, #0
    e062:	d001      	beq.n	e068 <cosem_getAssociationLogicalName+0x550>
        {
            return ret;
    e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e066:	e07e      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        gxByteBuffer *data = e->value.byteArr;
    e068:	683b      	ldr	r3, [r7, #0]
    e06a:	689b      	ldr	r3, [r3, #8]
    e06c:	61fb      	str	r3, [r7, #28]
        e->byteArray = 1;
    e06e:	683b      	ldr	r3, [r7, #0]
    e070:	2201      	movs	r2, #1
    e072:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e076:	2102      	movs	r1, #2
    e078:	69f8      	ldr	r0, [r7, #28]
    e07a:	f7f4 fecb 	bl	2e14 <bb_setUInt8>
    e07e:	63f8      	str	r0, [r7, #60]	; 0x3c
    e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e082:	2b00      	cmp	r3, #0
    e084:	d107      	bne.n	e096 <cosem_getAssociationLogicalName+0x57e>
    e086:	2102      	movs	r1, #2
    e088:	69f8      	ldr	r0, [r7, #28]
    e08a:	f7f4 fec3 	bl	2e14 <bb_setUInt8>
    e08e:	63f8      	str	r0, [r7, #60]	; 0x3c
    e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e092:	2b00      	cmp	r3, #0
    e094:	d001      	beq.n	e09a <cosem_getAssociationLogicalName+0x582>
            // Add structure size.
            (ret = bb_setUInt8(data, 2)) != 0)
        {
            return ret;
    e096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e098:	e065      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
        }
        if (((gxAssociationLogicalName*)e->target)->currentUser.value == NULL)
    e09a:	683b      	ldr	r3, [r7, #0]
    e09c:	695b      	ldr	r3, [r3, #20]
    e09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	d121      	bne.n	e0e8 <cosem_getAssociationLogicalName+0x5d0>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e0a4:	2111      	movs	r1, #17
    e0a6:	69f8      	ldr	r0, [r7, #28]
    e0a8:	f7f4 feb4 	bl	2e14 <bb_setUInt8>
    e0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    e0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0b0:	2b00      	cmp	r3, #0
    e0b2:	d117      	bne.n	e0e4 <cosem_getAssociationLogicalName+0x5cc>
    e0b4:	2100      	movs	r1, #0
    e0b6:	69f8      	ldr	r0, [r7, #28]
    e0b8:	f7f4 feac 	bl	2e14 <bb_setUInt8>
    e0bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    e0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d10f      	bne.n	e0e4 <cosem_getAssociationLogicalName+0x5cc>
                (ret = bb_setUInt8(data, 0)) != 0 ||
    e0c4:	210a      	movs	r1, #10
    e0c6:	69f8      	ldr	r0, [r7, #28]
    e0c8:	f7f4 fea4 	bl	2e14 <bb_setUInt8>
    e0cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    e0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	d107      	bne.n	e0e4 <cosem_getAssociationLogicalName+0x5cc>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
    e0d4:	2100      	movs	r1, #0
    e0d6:	69f8      	ldr	r0, [r7, #28]
    e0d8:	f7f4 fe9c 	bl	2e14 <bb_setUInt8>
    e0dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    e0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d03f      	beq.n	e164 <cosem_getAssociationLogicalName+0x64c>
                (ret = bb_setUInt8(data, 0)) != 0)
            {
                return ret;
    e0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0e6:	e03e      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
            }
        }
        else
        {
            char* str = (char*)((gxAssociationLogicalName*)e->target)->currentUser.value;
    e0e8:	683b      	ldr	r3, [r7, #0]
    e0ea:	695b      	ldr	r3, [r3, #20]
    e0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e0ee:	61bb      	str	r3, [r7, #24]
            unsigned char len = (unsigned char)strlen(str);
    e0f0:	69b8      	ldr	r0, [r7, #24]
    e0f2:	f7f2 f815 	bl	120 <strlen>
    e0f6:	4603      	mov	r3, r0
    e0f8:	75fb      	strb	r3, [r7, #23]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e0fa:	2111      	movs	r1, #17
    e0fc:	69f8      	ldr	r0, [r7, #28]
    e0fe:	f7f4 fe89 	bl	2e14 <bb_setUInt8>
    e102:	63f8      	str	r0, [r7, #60]	; 0x3c
    e104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e106:	2b00      	cmp	r3, #0
    e108:	d127      	bne.n	e15a <cosem_getAssociationLogicalName+0x642>
                (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->currentUser.key)) != 0 ||
    e10a:	683b      	ldr	r3, [r7, #0]
    e10c:	695b      	ldr	r3, [r3, #20]
    e10e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
        }
        else
        {
            char* str = (char*)((gxAssociationLogicalName*)e->target)->currentUser.value;
            unsigned char len = (unsigned char)strlen(str);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e112:	4619      	mov	r1, r3
    e114:	69f8      	ldr	r0, [r7, #28]
    e116:	f7f4 fe7d 	bl	2e14 <bb_setUInt8>
    e11a:	63f8      	str	r0, [r7, #60]	; 0x3c
    e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e11e:	2b00      	cmp	r3, #0
    e120:	d11b      	bne.n	e15a <cosem_getAssociationLogicalName+0x642>
                (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->currentUser.key)) != 0 ||
    e122:	210a      	movs	r1, #10
    e124:	69f8      	ldr	r0, [r7, #28]
    e126:	f7f4 fe75 	bl	2e14 <bb_setUInt8>
    e12a:	63f8      	str	r0, [r7, #60]	; 0x3c
    e12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e12e:	2b00      	cmp	r3, #0
    e130:	d113      	bne.n	e15a <cosem_getAssociationLogicalName+0x642>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
                (ret = hlp_setObjectCount(len, data)) != 0 ||
    e132:	7dfb      	ldrb	r3, [r7, #23]
        {
            char* str = (char*)((gxAssociationLogicalName*)e->target)->currentUser.value;
            unsigned char len = (unsigned char)strlen(str);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->currentUser.key)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
    e134:	69f9      	ldr	r1, [r7, #28]
    e136:	4618      	mov	r0, r3
    e138:	f013 fbd0 	bl	218dc <hlp_setObjectCount>
    e13c:	63f8      	str	r0, [r7, #60]	; 0x3c
    e13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e140:	2b00      	cmp	r3, #0
    e142:	d10a      	bne.n	e15a <cosem_getAssociationLogicalName+0x642>
                (ret = hlp_setObjectCount(len, data)) != 0 ||
                (ret = bb_set(data, (unsigned char*)str, len)) != 0)
    e144:	7dfb      	ldrb	r3, [r7, #23]
    e146:	b29b      	uxth	r3, r3
            char* str = (char*)((gxAssociationLogicalName*)e->target)->currentUser.value;
            unsigned char len = (unsigned char)strlen(str);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, ((gxAssociationLogicalName*)e->target)->currentUser.key)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
                (ret = hlp_setObjectCount(len, data)) != 0 ||
    e148:	461a      	mov	r2, r3
    e14a:	69b9      	ldr	r1, [r7, #24]
    e14c:	69f8      	ldr	r0, [r7, #28]
    e14e:	f7f5 fa07 	bl	3560 <bb_set>
    e152:	63f8      	str	r0, [r7, #60]	; 0x3c
    e154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e156:	2b00      	cmp	r3, #0
    e158:	d004      	beq.n	e164 <cosem_getAssociationLogicalName+0x64c>
                (ret = bb_set(data, (unsigned char*)str, len)) != 0)
            {
                return ret;
    e15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e15c:	e003      	b.n	e166 <cosem_getAssociationLogicalName+0x64e>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    e15e:	f44f 7381 	mov.w	r3, #258	; 0x102
    e162:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    return ret;
    e164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    e166:	4618      	mov	r0, r3
    e168:	3740      	adds	r7, #64	; 0x40
    e16a:	46bd      	mov	sp, r7
    e16c:	bd80      	pop	{r7, pc}
    e16e:	bf00      	nop

0000e170 <getSNObjects>:
// Returns SN Association View.
int getSNObjects(
    dlmsSettings* settings,
    gxValueEventArg *e,
    gxByteBuffer* ba)
{
    e170:	b580      	push	{r7, lr}
    e172:	b088      	sub	sp, #32
    e174:	af00      	add	r7, sp, #0
    e176:	60f8      	str	r0, [r7, #12]
    e178:	60b9      	str	r1, [r7, #8]
    e17a:	607a      	str	r2, [r7, #4]
    unsigned short pduSize;
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
    e17c:	68bb      	ldr	r3, [r7, #8]
    e17e:	695b      	ldr	r3, [r3, #20]
    e180:	3310      	adds	r3, #16
    e182:	617b      	str	r3, [r7, #20]
    unsigned short pos;
    int ret = DLMS_ERROR_CODE_OK;
    e184:	2300      	movs	r3, #0
    e186:	61bb      	str	r3, [r7, #24]
    gxObject* it;
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
    e188:	68fb      	ldr	r3, [r7, #12]
    e18a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
    e18e:	4619      	mov	r1, r3
    e190:	6878      	ldr	r0, [r7, #4]
    e192:	f7f4 fdbf 	bl	2d14 <bb_capacity>
    e196:	61b8      	str	r0, [r7, #24]
    e198:	69bb      	ldr	r3, [r7, #24]
    e19a:	2b00      	cmp	r3, #0
    e19c:	d001      	beq.n	e1a2 <getSNObjects+0x32>
    {
        return ret;
    e19e:	69bb      	ldr	r3, [r7, #24]
    e1a0:	e0c1      	b.n	e326 <getSNObjects+0x1b6>
    }
    //Add count only for first time.
    if (!e->transaction)
    e1a2:	68bb      	ldr	r3, [r7, #8]
    e1a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	d114      	bne.n	e1d6 <getSNObjects+0x66>
    {
        settings->count = list->size;
    e1ac:	697b      	ldr	r3, [r7, #20]
    e1ae:	88da      	ldrh	r2, [r3, #6]
    e1b0:	68fb      	ldr	r3, [r7, #12]
    e1b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY);
    e1b6:	2101      	movs	r1, #1
    e1b8:	6878      	ldr	r0, [r7, #4]
    e1ba:	f7f4 fe2b 	bl	2e14 <bb_setUInt8>
        //Add count
        if ((ret = hlp_setObjectCount(list->size, ba)) != 0)
    e1be:	697b      	ldr	r3, [r7, #20]
    e1c0:	88db      	ldrh	r3, [r3, #6]
    e1c2:	6879      	ldr	r1, [r7, #4]
    e1c4:	4618      	mov	r0, r3
    e1c6:	f013 fb89 	bl	218dc <hlp_setObjectCount>
    e1ca:	61b8      	str	r0, [r7, #24]
    e1cc:	69bb      	ldr	r3, [r7, #24]
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d001      	beq.n	e1d6 <getSNObjects+0x66>
        {
            return ret;
    e1d2:	69bb      	ldr	r3, [r7, #24]
    e1d4:	e0a7      	b.n	e326 <getSNObjects+0x1b6>
        }
    }
    for (pos = 0; pos != list->size; ++pos)
    e1d6:	2300      	movs	r3, #0
    e1d8:	83bb      	strh	r3, [r7, #28]
    e1da:	e094      	b.n	e306 <getSNObjects+0x196>
    {
        if (!(pos + 1 <= settings->index))
    e1dc:	8bbb      	ldrh	r3, [r7, #28]
    e1de:	3301      	adds	r3, #1
    e1e0:	68fa      	ldr	r2, [r7, #12]
    e1e2:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
    e1e6:	4293      	cmp	r3, r2
    e1e8:	f340 808a 	ble.w	e300 <getSNObjects+0x190>
        {
            pduSize = (unsigned short)ba->size;
    e1ec:	687b      	ldr	r3, [r7, #4]
    e1ee:	88db      	ldrh	r3, [r3, #6]
    e1f0:	83fb      	strh	r3, [r7, #30]
            if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
    e1f2:	f107 0210 	add.w	r2, r7, #16
    e1f6:	8bbb      	ldrh	r3, [r7, #28]
    e1f8:	4619      	mov	r1, r3
    e1fa:	6978      	ldr	r0, [r7, #20]
    e1fc:	f014 f820 	bl	22240 <oa_getByIndex>
    e200:	61b8      	str	r0, [r7, #24]
    e202:	69bb      	ldr	r3, [r7, #24]
    e204:	2b00      	cmp	r3, #0
    e206:	f040 8084 	bne.w	e312 <getSNObjects+0x1a2>
    e20a:	2102      	movs	r1, #2
    e20c:	6878      	ldr	r0, [r7, #4]
    e20e:	f7f4 fe01 	bl	2e14 <bb_setUInt8>
    e212:	61b8      	str	r0, [r7, #24]
    e214:	69bb      	ldr	r3, [r7, #24]
    e216:	2b00      	cmp	r3, #0
    e218:	d17b      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e21a:	2104      	movs	r1, #4
    e21c:	6878      	ldr	r0, [r7, #4]
    e21e:	f7f4 fdf9 	bl	2e14 <bb_setUInt8>
    e222:	61b8      	str	r0, [r7, #24]
    e224:	69bb      	ldr	r3, [r7, #24]
    e226:	2b00      	cmp	r3, #0
    e228:	d173      	bne.n	e312 <getSNObjects+0x1a2>
                //Count
                (ret = bb_setUInt8(ba, 4)) != 0 ||
    e22a:	2110      	movs	r1, #16
    e22c:	6878      	ldr	r0, [r7, #4]
    e22e:	f7f4 fdf1 	bl	2e14 <bb_setUInt8>
    e232:	61b8      	str	r0, [r7, #24]
    e234:	69bb      	ldr	r3, [r7, #24]
    e236:	2b00      	cmp	r3, #0
    e238:	d16b      	bne.n	e312 <getSNObjects+0x1a2>
                //Base address.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT16)) != 0 ||
                (ret = bb_setInt16(ba, it->shortName)) != 0 ||
    e23a:	693b      	ldr	r3, [r7, #16]
    e23c:	889b      	ldrh	r3, [r3, #4]
    e23e:	b21b      	sxth	r3, r3
            if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                //Count
                (ret = bb_setUInt8(ba, 4)) != 0 ||
                //Base address.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT16)) != 0 ||
    e240:	4619      	mov	r1, r3
    e242:	6878      	ldr	r0, [r7, #4]
    e244:	f7f5 f95a 	bl	34fc <bb_setInt16>
    e248:	61b8      	str	r0, [r7, #24]
    e24a:	69bb      	ldr	r3, [r7, #24]
    e24c:	2b00      	cmp	r3, #0
    e24e:	d160      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_setInt16(ba, it->shortName)) != 0 ||
    e250:	2112      	movs	r1, #18
    e252:	6878      	ldr	r0, [r7, #4]
    e254:	f7f4 fdde 	bl	2e14 <bb_setUInt8>
    e258:	61b8      	str	r0, [r7, #24]
    e25a:	69bb      	ldr	r3, [r7, #24]
    e25c:	2b00      	cmp	r3, #0
    e25e:	d158      	bne.n	e312 <getSNObjects+0x1a2>
                //ClassID.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, it->objectType)) != 0 ||
    e260:	693b      	ldr	r3, [r7, #16]
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	b29b      	uxth	r3, r3
                (ret = bb_setUInt8(ba, 4)) != 0 ||
                //Base address.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT16)) != 0 ||
                (ret = bb_setInt16(ba, it->shortName)) != 0 ||
                //ClassID.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
    e266:	4619      	mov	r1, r3
    e268:	6878      	ldr	r0, [r7, #4]
    e26a:	f7f4 fe65 	bl	2f38 <bb_setUInt16>
    e26e:	61b8      	str	r0, [r7, #24]
    e270:	69bb      	ldr	r3, [r7, #24]
    e272:	2b00      	cmp	r3, #0
    e274:	d14d      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_setUInt16(ba, it->objectType)) != 0 ||
    e276:	2111      	movs	r1, #17
    e278:	6878      	ldr	r0, [r7, #4]
    e27a:	f7f4 fdcb 	bl	2e14 <bb_setUInt8>
    e27e:	61b8      	str	r0, [r7, #24]
    e280:	69bb      	ldr	r3, [r7, #24]
    e282:	2b00      	cmp	r3, #0
    e284:	d145      	bne.n	e312 <getSNObjects+0x1a2>
                //Version.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(ba, (unsigned char)it->version)) != 0 ||
    e286:	693b      	ldr	r3, [r7, #16]
    e288:	785b      	ldrb	r3, [r3, #1]
                (ret = bb_setInt16(ba, it->shortName)) != 0 ||
                //ClassID.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, it->objectType)) != 0 ||
                //Version.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e28a:	4619      	mov	r1, r3
    e28c:	6878      	ldr	r0, [r7, #4]
    e28e:	f7f4 fdc1 	bl	2e14 <bb_setUInt8>
    e292:	61b8      	str	r0, [r7, #24]
    e294:	69bb      	ldr	r3, [r7, #24]
    e296:	2b00      	cmp	r3, #0
    e298:	d13b      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_setUInt8(ba, (unsigned char)it->version)) != 0 ||
    e29a:	2109      	movs	r1, #9
    e29c:	6878      	ldr	r0, [r7, #4]
    e29e:	f7f4 fdb9 	bl	2e14 <bb_setUInt8>
    e2a2:	61b8      	str	r0, [r7, #24]
    e2a4:	69bb      	ldr	r3, [r7, #24]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d133      	bne.n	e312 <getSNObjects+0x1a2>
                //LN.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e2aa:	2106      	movs	r1, #6
    e2ac:	6878      	ldr	r0, [r7, #4]
    e2ae:	f7f4 fdb1 	bl	2e14 <bb_setUInt8>
    e2b2:	61b8      	str	r0, [r7, #24]
    e2b4:	69bb      	ldr	r3, [r7, #24]
    e2b6:	2b00      	cmp	r3, #0
    e2b8:	d12b      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_setUInt8(ba, 6)) != 0 ||
                (ret = bb_set(ba, it->logicalName, 6)) != 0)
    e2ba:	693b      	ldr	r3, [r7, #16]
    e2bc:	3306      	adds	r3, #6
                //Version.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(ba, (unsigned char)it->version)) != 0 ||
                //LN.
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(ba, 6)) != 0 ||
    e2be:	2206      	movs	r2, #6
    e2c0:	4619      	mov	r1, r3
    e2c2:	6878      	ldr	r0, [r7, #4]
    e2c4:	f7f5 f94c 	bl	3560 <bb_set>
    e2c8:	61b8      	str	r0, [r7, #24]
    e2ca:	69bb      	ldr	r3, [r7, #24]
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d120      	bne.n	e312 <getSNObjects+0x1a2>
                (ret = bb_set(ba, it->logicalName, 6)) != 0)
            {
                break;
            }
            if (settings->server)
    e2d0:	68fb      	ldr	r3, [r7, #12]
    e2d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d00a      	beq.n	e2f0 <getSNObjects+0x180>
            {
                //If PDU is full.
                if (dlms_isPduFull(settings, ba))
    e2da:	6879      	ldr	r1, [r7, #4]
    e2dc:	68f8      	ldr	r0, [r7, #12]
    e2de:	f7ff fa5b 	bl	d798 <dlms_isPduFull>
    e2e2:	4603      	mov	r3, r0
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d003      	beq.n	e2f0 <getSNObjects+0x180>
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
    e2e8:	f44f 7382 	mov.w	r3, #260	; 0x104
    e2ec:	61bb      	str	r3, [r7, #24]
                    break;
    e2ee:	e010      	b.n	e312 <getSNObjects+0x1a2>
                }
            }
            ++settings->index;
    e2f0:	68fb      	ldr	r3, [r7, #12]
    e2f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    e2f6:	3301      	adds	r3, #1
    e2f8:	b29a      	uxth	r2, r3
    e2fa:	68fb      	ldr	r3, [r7, #12]
    e2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        if ((ret = hlp_setObjectCount(list->size, ba)) != 0)
        {
            return ret;
        }
    }
    for (pos = 0; pos != list->size; ++pos)
    e300:	8bbb      	ldrh	r3, [r7, #28]
    e302:	3301      	adds	r3, #1
    e304:	83bb      	strh	r3, [r7, #28]
    e306:	697b      	ldr	r3, [r7, #20]
    e308:	88db      	ldrh	r3, [r3, #6]
    e30a:	8bba      	ldrh	r2, [r7, #28]
    e30c:	429a      	cmp	r2, r3
    e30e:	f47f af65 	bne.w	e1dc <getSNObjects+0x6c>
                }
            }
            ++settings->index;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    e312:	69bb      	ldr	r3, [r7, #24]
    e314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    e318:	d104      	bne.n	e324 <getSNObjects+0x1b4>
    {
        ba->size = pduSize;
    e31a:	687b      	ldr	r3, [r7, #4]
    e31c:	8bfa      	ldrh	r2, [r7, #30]
    e31e:	80da      	strh	r2, [r3, #6]
        ret = 0;
    e320:	2300      	movs	r3, #0
    e322:	61bb      	str	r3, [r7, #24]
    }
    return ret;
    e324:	69bb      	ldr	r3, [r7, #24]
}
    e326:	4618      	mov	r0, r3
    e328:	3720      	adds	r7, #32
    e32a:	46bd      	mov	sp, r7
    e32c:	bd80      	pop	{r7, pc}
    e32e:	bf00      	nop

0000e330 <getSNAccessRights>:
#ifndef DLMS_IGNORE_SERVER
int getSNAccessRights(
    dlmsSettings* settings,
    gxObject* object,
    gxByteBuffer* ba)
{
    e330:	b580      	push	{r7, lr}
    e332:	b086      	sub	sp, #24
    e334:	af00      	add	r7, sp, #0
    e336:	60f8      	str	r0, [r7, #12]
    e338:	60b9      	str	r1, [r7, #8]
    e33a:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char ch, pos, cnt;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e33c:	2102      	movs	r1, #2
    e33e:	6878      	ldr	r0, [r7, #4]
    e340:	f7f4 fd68 	bl	2e14 <bb_setUInt8>
    e344:	6178      	str	r0, [r7, #20]
    e346:	697b      	ldr	r3, [r7, #20]
    e348:	2b00      	cmp	r3, #0
    e34a:	d121      	bne.n	e390 <getSNAccessRights+0x60>
    e34c:	2103      	movs	r1, #3
    e34e:	6878      	ldr	r0, [r7, #4]
    e350:	f7f4 fd60 	bl	2e14 <bb_setUInt8>
    e354:	6178      	str	r0, [r7, #20]
    e356:	697b      	ldr	r3, [r7, #20]
    e358:	2b00      	cmp	r3, #0
    e35a:	d119      	bne.n	e390 <getSNAccessRights+0x60>
        (ret = bb_setUInt8(ba, 3)) != 0 ||
    e35c:	2112      	movs	r1, #18
    e35e:	6878      	ldr	r0, [r7, #4]
    e360:	f7f4 fd58 	bl	2e14 <bb_setUInt8>
    e364:	6178      	str	r0, [r7, #20]
    e366:	697b      	ldr	r3, [r7, #20]
    e368:	2b00      	cmp	r3, #0
    e36a:	d111      	bne.n	e390 <getSNAccessRights+0x60>
        //Add SN.
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
        (ret = bb_setUInt16(ba, object->shortName)) != 0 ||
    e36c:	68bb      	ldr	r3, [r7, #8]
    e36e:	889b      	ldrh	r3, [r3, #4]
    int ret;
    unsigned char ch, pos, cnt;
    if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
        (ret = bb_setUInt8(ba, 3)) != 0 ||
        //Add SN.
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
    e370:	4619      	mov	r1, r3
    e372:	6878      	ldr	r0, [r7, #4]
    e374:	f7f4 fde0 	bl	2f38 <bb_setUInt16>
    e378:	6178      	str	r0, [r7, #20]
    e37a:	697b      	ldr	r3, [r7, #20]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d107      	bne.n	e390 <getSNAccessRights+0x60>
        (ret = bb_setUInt16(ba, object->shortName)) != 0 ||
    e380:	2101      	movs	r1, #1
    e382:	6878      	ldr	r0, [r7, #4]
    e384:	f7f4 fd46 	bl	2e14 <bb_setUInt8>
    e388:	6178      	str	r0, [r7, #20]
    e38a:	697b      	ldr	r3, [r7, #20]
    e38c:	2b00      	cmp	r3, #0
    e38e:	d001      	beq.n	e394 <getSNAccessRights+0x64>
        //Add attribute access modes.
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0)
    {
        return ret;
    e390:	697b      	ldr	r3, [r7, #20]
    e392:	e0ae      	b.n	e4f2 <getSNAccessRights+0x1c2>
    }
    cnt = obj_attributeCount(object);
    e394:	68b8      	ldr	r0, [r7, #8]
    e396:	f009 fb7d 	bl	17a94 <obj_attributeCount>
    e39a:	4603      	mov	r3, r0
    e39c:	74bb      	strb	r3, [r7, #18]
    hlp_setObjectCount(cnt, ba);
    e39e:	7cbb      	ldrb	r3, [r7, #18]
    e3a0:	6879      	ldr	r1, [r7, #4]
    e3a2:	4618      	mov	r0, r3
    e3a4:	f013 fa9a 	bl	218dc <hlp_setObjectCount>
    for (pos = 1; pos != cnt + 1; ++pos)
    e3a8:	2301      	movs	r3, #1
    e3aa:	74fb      	strb	r3, [r7, #19]
    e3ac:	e046      	b.n	e43c <getSNAccessRights+0x10c>
    {
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
    e3ae:	7cfb      	ldrb	r3, [r7, #19]
    e3b0:	461a      	mov	r2, r3
    e3b2:	68b9      	ldr	r1, [r7, #8]
    e3b4:	68f8      	ldr	r0, [r7, #12]
    e3b6:	f01a ffbd 	bl	29334 <svr_getAttributeAccess>
    e3ba:	4603      	mov	r3, r0
    e3bc:	747b      	strb	r3, [r7, #17]
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e3be:	2102      	movs	r1, #2
    e3c0:	6878      	ldr	r0, [r7, #4]
    e3c2:	f7f4 fd27 	bl	2e14 <bb_setUInt8>
    e3c6:	6178      	str	r0, [r7, #20]
    e3c8:	697b      	ldr	r3, [r7, #20]
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d131      	bne.n	e432 <getSNAccessRights+0x102>
    e3ce:	2103      	movs	r1, #3
    e3d0:	6878      	ldr	r0, [r7, #4]
    e3d2:	f7f4 fd1f 	bl	2e14 <bb_setUInt8>
    e3d6:	6178      	str	r0, [r7, #20]
    e3d8:	697b      	ldr	r3, [r7, #20]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d129      	bne.n	e432 <getSNAccessRights+0x102>
            (ret = bb_setUInt8(ba, 3)) != 0 ||
    e3de:	210f      	movs	r1, #15
    e3e0:	6878      	ldr	r0, [r7, #4]
    e3e2:	f7f4 fd17 	bl	2e14 <bb_setUInt8>
    e3e6:	6178      	str	r0, [r7, #20]
    e3e8:	697b      	ldr	r3, [r7, #20]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d121      	bne.n	e432 <getSNAccessRights+0x102>
            //Add index.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
    e3ee:	7cfb      	ldrb	r3, [r7, #19]
    e3f0:	4619      	mov	r1, r3
    e3f2:	6878      	ldr	r0, [r7, #4]
    e3f4:	f7f5 f872 	bl	34dc <bb_setInt8>
    e3f8:	6178      	str	r0, [r7, #20]
    e3fa:	697b      	ldr	r3, [r7, #20]
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d118      	bne.n	e432 <getSNAccessRights+0x102>
            (ret = bb_setInt8(ba, pos)) != 0 ||
    e400:	2116      	movs	r1, #22
    e402:	6878      	ldr	r0, [r7, #4]
    e404:	f7f4 fd06 	bl	2e14 <bb_setUInt8>
    e408:	6178      	str	r0, [r7, #20]
    e40a:	697b      	ldr	r3, [r7, #20]
    e40c:	2b00      	cmp	r3, #0
    e40e:	d110      	bne.n	e432 <getSNAccessRights+0x102>
            //Add access.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ENUM)) != 0 ||
    e410:	7c7b      	ldrb	r3, [r7, #17]
    e412:	4619      	mov	r1, r3
    e414:	6878      	ldr	r0, [r7, #4]
    e416:	f7f5 f861 	bl	34dc <bb_setInt8>
    e41a:	6178      	str	r0, [r7, #20]
    e41c:	697b      	ldr	r3, [r7, #20]
    e41e:	2b00      	cmp	r3, #0
    e420:	d107      	bne.n	e432 <getSNAccessRights+0x102>
            (ret = bb_setInt8(ba, ch)) != 0 ||
    e422:	2100      	movs	r1, #0
    e424:	6878      	ldr	r0, [r7, #4]
    e426:	f7f4 fcf5 	bl	2e14 <bb_setUInt8>
    e42a:	6178      	str	r0, [r7, #20]
    e42c:	697b      	ldr	r3, [r7, #20]
    e42e:	2b00      	cmp	r3, #0
    e430:	d001      	beq.n	e436 <getSNAccessRights+0x106>
            //Add None.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_NONE)) != 0)
        {
            return ret;
    e432:	697b      	ldr	r3, [r7, #20]
    e434:	e05d      	b.n	e4f2 <getSNAccessRights+0x1c2>
    {
        return ret;
    }
    cnt = obj_attributeCount(object);
    hlp_setObjectCount(cnt, ba);
    for (pos = 1; pos != cnt + 1; ++pos)
    e436:	7cfb      	ldrb	r3, [r7, #19]
    e438:	3301      	adds	r3, #1
    e43a:	74fb      	strb	r3, [r7, #19]
    e43c:	7cfa      	ldrb	r2, [r7, #19]
    e43e:	7cbb      	ldrb	r3, [r7, #18]
    e440:	3301      	adds	r3, #1
    e442:	429a      	cmp	r2, r3
    e444:	d1b3      	bne.n	e3ae <getSNAccessRights+0x7e>
        {
            return ret;
        }
    }
    //Add mthod access modes.
    cnt = obj_methodCount(object);
    e446:	68b8      	ldr	r0, [r7, #8]
    e448:	f009 fc98 	bl	17d7c <obj_methodCount>
    e44c:	4603      	mov	r3, r0
    e44e:	74bb      	strb	r3, [r7, #18]
    bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY);
    e450:	2101      	movs	r1, #1
    e452:	6878      	ldr	r0, [r7, #4]
    e454:	f7f4 fcde 	bl	2e14 <bb_setUInt8>
    hlp_setObjectCount(cnt, ba);
    e458:	7cbb      	ldrb	r3, [r7, #18]
    e45a:	6879      	ldr	r1, [r7, #4]
    e45c:	4618      	mov	r0, r3
    e45e:	f013 fa3d 	bl	218dc <hlp_setObjectCount>
    for (pos = 1; pos != cnt + 1; ++pos)
    e462:	2301      	movs	r3, #1
    e464:	74fb      	strb	r3, [r7, #19]
    e466:	e03e      	b.n	e4e6 <getSNAccessRights+0x1b6>
    {
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
    e468:	7cfb      	ldrb	r3, [r7, #19]
    e46a:	461a      	mov	r2, r3
    e46c:	68b9      	ldr	r1, [r7, #8]
    e46e:	68f8      	ldr	r0, [r7, #12]
    e470:	f01a ff86 	bl	29380 <svr_getMethodAccess>
    e474:	4603      	mov	r3, r0
    e476:	747b      	strb	r3, [r7, #17]
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e478:	2102      	movs	r1, #2
    e47a:	6878      	ldr	r0, [r7, #4]
    e47c:	f7f4 fcca 	bl	2e14 <bb_setUInt8>
    e480:	6178      	str	r0, [r7, #20]
    e482:	697b      	ldr	r3, [r7, #20]
    e484:	2b00      	cmp	r3, #0
    e486:	d129      	bne.n	e4dc <getSNAccessRights+0x1ac>
    e488:	2103      	movs	r1, #3
    e48a:	6878      	ldr	r0, [r7, #4]
    e48c:	f7f4 fcc2 	bl	2e14 <bb_setUInt8>
    e490:	6178      	str	r0, [r7, #20]
    e492:	697b      	ldr	r3, [r7, #20]
    e494:	2b00      	cmp	r3, #0
    e496:	d121      	bne.n	e4dc <getSNAccessRights+0x1ac>
            (ret = bb_setUInt8(ba, 3)) != 0 ||
    e498:	210f      	movs	r1, #15
    e49a:	6878      	ldr	r0, [r7, #4]
    e49c:	f7f4 fcba 	bl	2e14 <bb_setUInt8>
    e4a0:	6178      	str	r0, [r7, #20]
    e4a2:	697b      	ldr	r3, [r7, #20]
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d119      	bne.n	e4dc <getSNAccessRights+0x1ac>
            //Add index.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
    e4a8:	7cfb      	ldrb	r3, [r7, #19]
    e4aa:	4619      	mov	r1, r3
    e4ac:	6878      	ldr	r0, [r7, #4]
    e4ae:	f7f5 f815 	bl	34dc <bb_setInt8>
    e4b2:	6178      	str	r0, [r7, #20]
    e4b4:	697b      	ldr	r3, [r7, #20]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d110      	bne.n	e4dc <getSNAccessRights+0x1ac>
            (ret = bb_setInt8(ba, pos)) != 0 ||
    e4ba:	2116      	movs	r1, #22
    e4bc:	6878      	ldr	r0, [r7, #4]
    e4be:	f7f4 fca9 	bl	2e14 <bb_setUInt8>
    e4c2:	6178      	str	r0, [r7, #20]
    e4c4:	697b      	ldr	r3, [r7, #20]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d108      	bne.n	e4dc <getSNAccessRights+0x1ac>
            //Add access.
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ENUM)) != 0 ||
    e4ca:	7c7b      	ldrb	r3, [r7, #17]
    e4cc:	4619      	mov	r1, r3
    e4ce:	6878      	ldr	r0, [r7, #4]
    e4d0:	f7f5 f804 	bl	34dc <bb_setInt8>
    e4d4:	6178      	str	r0, [r7, #20]
    e4d6:	697b      	ldr	r3, [r7, #20]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d001      	beq.n	e4e0 <getSNAccessRights+0x1b0>
            (ret = bb_setInt8(ba, ch)) != 0)
        {
            return ret;
    e4dc:	697b      	ldr	r3, [r7, #20]
    e4de:	e008      	b.n	e4f2 <getSNAccessRights+0x1c2>
    }
    //Add mthod access modes.
    cnt = obj_methodCount(object);
    bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY);
    hlp_setObjectCount(cnt, ba);
    for (pos = 1; pos != cnt + 1; ++pos)
    e4e0:	7cfb      	ldrb	r3, [r7, #19]
    e4e2:	3301      	adds	r3, #1
    e4e4:	74fb      	strb	r3, [r7, #19]
    e4e6:	7cfa      	ldrb	r2, [r7, #19]
    e4e8:	7cbb      	ldrb	r3, [r7, #18]
    e4ea:	3301      	adds	r3, #1
    e4ec:	429a      	cmp	r2, r3
    e4ee:	d1bb      	bne.n	e468 <getSNAccessRights+0x138>
            (ret = bb_setInt8(ba, ch)) != 0)
        {
            return ret;
        }
    }
    return DLMS_ERROR_CODE_OK;
    e4f0:	2300      	movs	r3, #0
}
    e4f2:	4618      	mov	r0, r3
    e4f4:	3718      	adds	r7, #24
    e4f6:	46bd      	mov	sp, r7
    e4f8:	bd80      	pop	{r7, pc}
    e4fa:	bf00      	nop

0000e4fc <cosem_getAssociationShortName>:

int cosem_getAssociationShortName(
    dlmsSettings* settings,
    gxValueEventArg *e)
{
    e4fc:	b580      	push	{r7, lr}
    e4fe:	b086      	sub	sp, #24
    e500:	af00      	add	r7, sp, #0
    e502:	6078      	str	r0, [r7, #4]
    e504:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK;
    e506:	2300      	movs	r3, #0
    e508:	617b      	str	r3, [r7, #20]
    unsigned short pos;
    gxObject* it;
    if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e50a:	683b      	ldr	r3, [r7, #0]
    e50c:	4618      	mov	r0, r3
    e50e:	f7fe fa49 	bl	c9a4 <cosem_getByteBuffer>
    e512:	6178      	str	r0, [r7, #20]
    e514:	697b      	ldr	r3, [r7, #20]
    e516:	2b00      	cmp	r3, #0
    e518:	d001      	beq.n	e51e <cosem_getAssociationShortName+0x22>
    {
        return ret;
    e51a:	697b      	ldr	r3, [r7, #20]
    e51c:	e086      	b.n	e62c <cosem_getAssociationShortName+0x130>
    }
    gxByteBuffer *data = e->value.byteArr;
    e51e:	683b      	ldr	r3, [r7, #0]
    e520:	689b      	ldr	r3, [r3, #8]
    e522:	60fb      	str	r3, [r7, #12]
    if (e->index == 2)
    e524:	683b      	ldr	r3, [r7, #0]
    e526:	7e1b      	ldrb	r3, [r3, #24]
    e528:	2b02      	cmp	r3, #2
    e52a:	d106      	bne.n	e53a <cosem_getAssociationShortName+0x3e>
    {
        ret = getSNObjects(settings, e, data);
    e52c:	68fa      	ldr	r2, [r7, #12]
    e52e:	6839      	ldr	r1, [r7, #0]
    e530:	6878      	ldr	r0, [r7, #4]
    e532:	f7ff fe1d 	bl	e170 <getSNObjects>
    e536:	6178      	str	r0, [r7, #20]
    e538:	e073      	b.n	e622 <cosem_getAssociationShortName+0x126>
    }
    else if (e->index == 3)
    e53a:	683b      	ldr	r3, [r7, #0]
    e53c:	7e1b      	ldrb	r3, [r3, #24]
    e53e:	2b03      	cmp	r3, #3
    e540:	d138      	bne.n	e5b4 <cosem_getAssociationShortName+0xb8>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e542:	2101      	movs	r1, #1
    e544:	68f8      	ldr	r0, [r7, #12]
    e546:	f7f4 fc65 	bl	2e14 <bb_setUInt8>
    e54a:	6178      	str	r0, [r7, #20]
    e54c:	697b      	ldr	r3, [r7, #20]
    e54e:	2b00      	cmp	r3, #0
    e550:	d10a      	bne.n	e568 <cosem_getAssociationShortName+0x6c>
            (ret = hlp_setObjectCount(((gxAssociationShortName*)e->target)->objectList.size, data)) != 0)
    e552:	683b      	ldr	r3, [r7, #0]
    e554:	695b      	ldr	r3, [r3, #20]
    e556:	8adb      	ldrh	r3, [r3, #22]
    {
        ret = getSNObjects(settings, e, data);
    }
    else if (e->index == 3)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e558:	68f9      	ldr	r1, [r7, #12]
    e55a:	4618      	mov	r0, r3
    e55c:	f013 f9be 	bl	218dc <hlp_setObjectCount>
    e560:	6178      	str	r0, [r7, #20]
    e562:	697b      	ldr	r3, [r7, #20]
    e564:	2b00      	cmp	r3, #0
    e566:	d001      	beq.n	e56c <cosem_getAssociationShortName+0x70>
            (ret = hlp_setObjectCount(((gxAssociationShortName*)e->target)->objectList.size, data)) != 0)
        {
            return ret;
    e568:	697b      	ldr	r3, [r7, #20]
    e56a:	e05f      	b.n	e62c <cosem_getAssociationShortName+0x130>
        }
        for (pos = 0; pos != ((gxAssociationShortName*)e->target)->objectList.size; ++pos)
    e56c:	2300      	movs	r3, #0
    e56e:	827b      	strh	r3, [r7, #18]
    e570:	e019      	b.n	e5a6 <cosem_getAssociationShortName+0xaa>
        {
            ret = oa_getByIndex(&((gxAssociationShortName*)e->target)->objectList, pos, &it);
    e572:	683b      	ldr	r3, [r7, #0]
    e574:	695b      	ldr	r3, [r3, #20]
    e576:	3310      	adds	r3, #16
    e578:	f107 0208 	add.w	r2, r7, #8
    e57c:	8a79      	ldrh	r1, [r7, #18]
    e57e:	4618      	mov	r0, r3
    e580:	f013 fe5e 	bl	22240 <oa_getByIndex>
    e584:	6178      	str	r0, [r7, #20]
            if (ret != 0)
    e586:	697b      	ldr	r3, [r7, #20]
    e588:	2b00      	cmp	r3, #0
    e58a:	d147      	bne.n	e61c <cosem_getAssociationShortName+0x120>
            {
                break;
            }
            ret = getSNAccessRights(settings, it, data);
    e58c:	68bb      	ldr	r3, [r7, #8]
    e58e:	68fa      	ldr	r2, [r7, #12]
    e590:	4619      	mov	r1, r3
    e592:	6878      	ldr	r0, [r7, #4]
    e594:	f7ff fecc 	bl	e330 <getSNAccessRights>
    e598:	6178      	str	r0, [r7, #20]
            if (ret != 0)
    e59a:	697b      	ldr	r3, [r7, #20]
    e59c:	2b00      	cmp	r3, #0
    e59e:	d13f      	bne.n	e620 <cosem_getAssociationShortName+0x124>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxAssociationShortName*)e->target)->objectList.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != ((gxAssociationShortName*)e->target)->objectList.size; ++pos)
    e5a0:	8a7b      	ldrh	r3, [r7, #18]
    e5a2:	3301      	adds	r3, #1
    e5a4:	827b      	strh	r3, [r7, #18]
    e5a6:	683b      	ldr	r3, [r7, #0]
    e5a8:	695b      	ldr	r3, [r3, #20]
    e5aa:	8adb      	ldrh	r3, [r3, #22]
    e5ac:	8a7a      	ldrh	r2, [r7, #18]
    e5ae:	429a      	cmp	r2, r3
    e5b0:	d1df      	bne.n	e572 <cosem_getAssociationShortName+0x76>
    e5b2:	e036      	b.n	e622 <cosem_getAssociationShortName+0x126>
            {
                break;
            }
        }
    }
    else if (e->index == 4)
    e5b4:	683b      	ldr	r3, [r7, #0]
    e5b6:	7e1b      	ldrb	r3, [r3, #24]
    e5b8:	2b04      	cmp	r3, #4
    e5ba:	d12b      	bne.n	e614 <cosem_getAssociationShortName+0x118>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e5bc:	683b      	ldr	r3, [r7, #0]
    e5be:	4618      	mov	r0, r3
    e5c0:	f7fe f9f0 	bl	c9a4 <cosem_getByteBuffer>
    e5c4:	6178      	str	r0, [r7, #20]
    e5c6:	697b      	ldr	r3, [r7, #20]
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d001      	beq.n	e5d0 <cosem_getAssociationShortName+0xd4>
        {
            return ret;
    e5cc:	697b      	ldr	r3, [r7, #20]
    e5ce:	e02d      	b.n	e62c <cosem_getAssociationShortName+0x130>
        }
        e->byteArray = 1;
    e5d0:	683b      	ldr	r3, [r7, #0]
    e5d2:	2201      	movs	r2, #1
    e5d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e5d8:	2109      	movs	r1, #9
    e5da:	68f8      	ldr	r0, [r7, #12]
    e5dc:	f7f4 fc1a 	bl	2e14 <bb_setUInt8>
    e5e0:	6178      	str	r0, [r7, #20]
    e5e2:	697b      	ldr	r3, [r7, #20]
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	d113      	bne.n	e610 <cosem_getAssociationShortName+0x114>
    e5e8:	2106      	movs	r1, #6
    e5ea:	68f8      	ldr	r0, [r7, #12]
    e5ec:	f7f4 fc12 	bl	2e14 <bb_setUInt8>
    e5f0:	6178      	str	r0, [r7, #20]
    e5f2:	697b      	ldr	r3, [r7, #20]
    e5f4:	2b00      	cmp	r3, #0
    e5f6:	d10b      	bne.n	e610 <cosem_getAssociationShortName+0x114>
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxAssociationShortName*)e->target)->securitySetupReference, 6)) != 0)
    e5f8:	683b      	ldr	r3, [r7, #0]
    e5fa:	695b      	ldr	r3, [r3, #20]
    e5fc:	331c      	adds	r3, #28
        {
            return ret;
        }
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
    e5fe:	2206      	movs	r2, #6
    e600:	4619      	mov	r1, r3
    e602:	68f8      	ldr	r0, [r7, #12]
    e604:	f7f4 ffac 	bl	3560 <bb_set>
    e608:	6178      	str	r0, [r7, #20]
    e60a:	697b      	ldr	r3, [r7, #20]
    e60c:	2b00      	cmp	r3, #0
    e60e:	d008      	beq.n	e622 <cosem_getAssociationShortName+0x126>
            (ret = bb_set(data, ((gxAssociationShortName*)e->target)->securitySetupReference, 6)) != 0)
        {
            return ret;
    e610:	697b      	ldr	r3, [r7, #20]
    e612:	e00b      	b.n	e62c <cosem_getAssociationShortName+0x130>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    e614:	f44f 7381 	mov.w	r3, #258	; 0x102
    e618:	617b      	str	r3, [r7, #20]
    e61a:	e002      	b.n	e622 <cosem_getAssociationShortName+0x126>
        for (pos = 0; pos != ((gxAssociationShortName*)e->target)->objectList.size; ++pos)
        {
            ret = oa_getByIndex(&((gxAssociationShortName*)e->target)->objectList, pos, &it);
            if (ret != 0)
            {
                break;
    e61c:	bf00      	nop
    e61e:	e000      	b.n	e622 <cosem_getAssociationShortName+0x126>
            }
            ret = getSNAccessRights(settings, it, data);
            if (ret != 0)
            {
                break;
    e620:	bf00      	nop
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    e->byteArray = 1;
    e622:	683b      	ldr	r3, [r7, #0]
    e624:	2201      	movs	r2, #1
    e626:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return ret;
    e62a:	697b      	ldr	r3, [r7, #20]
}
    e62c:	4618      	mov	r0, r3
    e62e:	3718      	adds	r7, #24
    e630:	46bd      	mov	sp, r7
    e632:	bd80      	pop	{r7, pc}

0000e634 <cosem_getAutoAnswer>:
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME

#ifndef DLMS_IGNORE_AUTO_ANSWER
int cosem_getAutoAnswer(
    gxValueEventArg *e)
{
    e634:	b580      	push	{r7, lr}
    e636:	b08e      	sub	sp, #56	; 0x38
    e638:	af00      	add	r7, sp, #0
    e63a:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
    e63c:	2300      	movs	r3, #0
    e63e:	637b      	str	r3, [r7, #52]	; 0x34
    dlmsVARIANT tmp;
    gxKey* kv;
    gxAutoAnswer* object = (gxAutoAnswer*)e->target;
    e640:	687b      	ldr	r3, [r7, #4]
    e642:	695b      	ldr	r3, [r3, #20]
    e644:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (e->index == 2)
    e646:	687b      	ldr	r3, [r7, #4]
    e648:	7e1b      	ldrb	r3, [r3, #24]
    e64a:	2b02      	cmp	r3, #2
    e64c:	d108      	bne.n	e660 <cosem_getAutoAnswer+0x2c>
    {
        return var_setEnum(&e->value, object->mode);
    e64e:	687a      	ldr	r2, [r7, #4]
    e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e652:	7c9b      	ldrb	r3, [r3, #18]
    e654:	4619      	mov	r1, r3
    e656:	4610      	mov	r0, r2
    e658:	f017 fc4a 	bl	25ef0 <var_setEnum>
    e65c:	4603      	mov	r3, r0
    e65e:	e113      	b.n	e888 <cosem_getAutoAnswer+0x254>
    }
    else if (e->index == 3)
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	7e1b      	ldrb	r3, [r3, #24]
    e664:	2b03      	cmp	r3, #3
    e666:	f040 80a4 	bne.w	e7b2 <cosem_getAutoAnswer+0x17e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e66a:	687b      	ldr	r3, [r7, #4]
    e66c:	4618      	mov	r0, r3
    e66e:	f7fe f999 	bl	c9a4 <cosem_getByteBuffer>
    e672:	6378      	str	r0, [r7, #52]	; 0x34
    e674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e676:	2b00      	cmp	r3, #0
    e678:	d001      	beq.n	e67e <cosem_getAutoAnswer+0x4a>
        {
            return ret;
    e67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e67c:	e104      	b.n	e888 <cosem_getAutoAnswer+0x254>
        }
        gxByteBuffer *data = e->value.byteArr;
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	689b      	ldr	r3, [r3, #8]
    e682:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	2201      	movs	r2, #1
    e688:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e68c:	2101      	movs	r1, #1
    e68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e690:	f7f4 fbc0 	bl	2e14 <bb_setUInt8>
    e694:	6378      	str	r0, [r7, #52]	; 0x34
    e696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e698:	2b00      	cmp	r3, #0
    e69a:	d112      	bne.n	e6c2 <cosem_getAutoAnswer+0x8e>
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0 ||
    e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e69e:	8b9b      	ldrh	r3, [r3, #28]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e6a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e6a2:	4618      	mov	r0, r3
    e6a4:	f013 f91a 	bl	218dc <hlp_setObjectCount>
    e6a8:	6378      	str	r0, [r7, #52]	; 0x34
    e6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d108      	bne.n	e6c2 <cosem_getAutoAnswer+0x8e>
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0 ||
    e6b0:	f107 0310 	add.w	r3, r7, #16
    e6b4:	4618      	mov	r0, r3
    e6b6:	f017 fd37 	bl	26128 <var_init>
    e6ba:	6378      	str	r0, [r7, #52]	; 0x34
    e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6be:	2b00      	cmp	r3, #0
    e6c0:	d001      	beq.n	e6c6 <cosem_getAutoAnswer+0x92>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
    e6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6c4:	e0e0      	b.n	e888 <cosem_getAutoAnswer+0x254>
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
    e6c6:	2300      	movs	r3, #0
    e6c8:	633b      	str	r3, [r7, #48]	; 0x30
    e6ca:	e066      	b.n	e79a <cosem_getAutoAnswer+0x166>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e6cc:	2102      	movs	r1, #2
    e6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e6d0:	f7f4 fba0 	bl	2e14 <bb_setUInt8>
    e6d4:	6378      	str	r0, [r7, #52]	; 0x34
    e6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6d8:	2b00      	cmp	r3, #0
    e6da:	d113      	bne.n	e704 <cosem_getAutoAnswer+0xd0>
    e6dc:	2102      	movs	r1, #2
    e6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e6e0:	f7f4 fb98 	bl	2e14 <bb_setUInt8>
    e6e4:	6378      	str	r0, [r7, #52]	; 0x34
    e6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	d10b      	bne.n	e704 <cosem_getAutoAnswer+0xd0>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0)
    e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6ee:	3314      	adds	r3, #20
            return ret;
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
    e6f0:	f107 020c 	add.w	r2, r7, #12
    e6f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e6f6:	4618      	mov	r0, r3
    e6f8:	f7fe f880 	bl	c7fc <arr_getByIndex>
    e6fc:	6378      	str	r0, [r7, #52]	; 0x34
    e6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e700:	2b00      	cmp	r3, #0
    e702:	d006      	beq.n	e712 <cosem_getAutoAnswer+0xde>
                (ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0)
            {
                var_clear(&tmp);
    e704:	f107 0310 	add.w	r3, r7, #16
    e708:	4618      	mov	r0, r3
    e70a:	f017 fd1d 	bl	26148 <var_clear>
                return ret;
    e70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e710:	e0ba      	b.n	e888 <cosem_getAutoAnswer+0x254>
            }
            //start_time
            if ((ret = var_setDateTime(&tmp, (gxtime*)kv->key)) != 0 ||
    e712:	68fb      	ldr	r3, [r7, #12]
    e714:	681a      	ldr	r2, [r3, #0]
    e716:	f107 0310 	add.w	r3, r7, #16
    e71a:	4611      	mov	r1, r2
    e71c:	4618      	mov	r0, r3
    e71e:	f019 fc79 	bl	28014 <var_setDateTime>
    e722:	6378      	str	r0, [r7, #52]	; 0x34
    e724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e726:	2b00      	cmp	r3, #0
    e728:	d10a      	bne.n	e740 <cosem_getAutoAnswer+0x10c>
    e72a:	f107 0310 	add.w	r3, r7, #16
    e72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e730:	2109      	movs	r1, #9
    e732:	4618      	mov	r0, r3
    e734:	f017 ffc8 	bl	266c8 <var_getBytes2>
    e738:	6378      	str	r0, [r7, #52]	; 0x34
    e73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e73c:	2b00      	cmp	r3, #0
    e73e:	d006      	beq.n	e74e <cosem_getAutoAnswer+0x11a>
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
            {
                var_clear(&tmp);
    e740:	f107 0310 	add.w	r3, r7, #16
    e744:	4618      	mov	r0, r3
    e746:	f017 fcff 	bl	26148 <var_clear>
                return ret;
    e74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e74c:	e09c      	b.n	e888 <cosem_getAutoAnswer+0x254>
            }
            var_clear(&tmp);
    e74e:	f107 0310 	add.w	r3, r7, #16
    e752:	4618      	mov	r0, r3
    e754:	f017 fcf8 	bl	26148 <var_clear>
            //end_time
            if ((ret = var_setDateTime(&tmp, (gxtime*)kv->value)) != 0 ||
    e758:	68fb      	ldr	r3, [r7, #12]
    e75a:	685a      	ldr	r2, [r3, #4]
    e75c:	f107 0310 	add.w	r3, r7, #16
    e760:	4611      	mov	r1, r2
    e762:	4618      	mov	r0, r3
    e764:	f019 fc56 	bl	28014 <var_setDateTime>
    e768:	6378      	str	r0, [r7, #52]	; 0x34
    e76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e76c:	2b00      	cmp	r3, #0
    e76e:	d10a      	bne.n	e786 <cosem_getAutoAnswer+0x152>
    e770:	f107 0310 	add.w	r3, r7, #16
    e774:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e776:	2109      	movs	r1, #9
    e778:	4618      	mov	r0, r3
    e77a:	f017 ffa5 	bl	266c8 <var_getBytes2>
    e77e:	6378      	str	r0, [r7, #52]	; 0x34
    e780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e782:	2b00      	cmp	r3, #0
    e784:	d006      	beq.n	e794 <cosem_getAutoAnswer+0x160>
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
            {
                var_clear(&tmp);
    e786:	f107 0310 	add.w	r3, r7, #16
    e78a:	4618      	mov	r0, r3
    e78c:	f017 fcdc 	bl	26148 <var_clear>
                return ret;
    e790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e792:	e079      	b.n	e888 <cosem_getAutoAnswer+0x254>
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0 ||
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
    e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e796:	3301      	adds	r3, #1
    e798:	633b      	str	r3, [r7, #48]	; 0x30
    e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e79c:	8b9b      	ldrh	r3, [r3, #28]
    e79e:	461a      	mov	r2, r3
    e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e7a2:	429a      	cmp	r2, r3
    e7a4:	d192      	bne.n	e6cc <cosem_getAutoAnswer+0x98>
            {
                var_clear(&tmp);
                return ret;
            }
        }
        var_clear(&tmp);
    e7a6:	f107 0310 	add.w	r3, r7, #16
    e7aa:	4618      	mov	r0, r3
    e7ac:	f017 fccc 	bl	26148 <var_clear>
    e7b0:	e069      	b.n	e886 <cosem_getAutoAnswer+0x252>
    }
    else if (e->index == 4)
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	7e1b      	ldrb	r3, [r3, #24]
    e7b6:	2b04      	cmp	r3, #4
    e7b8:	d109      	bne.n	e7ce <cosem_getAutoAnswer+0x19a>
    {
        ret = var_setEnum(&e->value, object->status);
    e7ba:	687a      	ldr	r2, [r7, #4]
    e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    e7c2:	4619      	mov	r1, r3
    e7c4:	4610      	mov	r0, r2
    e7c6:	f017 fb93 	bl	25ef0 <var_setEnum>
    e7ca:	6378      	str	r0, [r7, #52]	; 0x34
    e7cc:	e05b      	b.n	e886 <cosem_getAutoAnswer+0x252>
    }
    else if (e->index == 5)
    e7ce:	687b      	ldr	r3, [r7, #4]
    e7d0:	7e1b      	ldrb	r3, [r3, #24]
    e7d2:	2b05      	cmp	r3, #5
    e7d4:	d109      	bne.n	e7ea <cosem_getAutoAnswer+0x1b6>
    {
        ret = var_setUInt8(&e->value, object->numberOfCalls);
    e7d6:	687a      	ldr	r2, [r7, #4]
    e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    e7de:	4619      	mov	r1, r3
    e7e0:	4610      	mov	r0, r2
    e7e2:	f017 fb99 	bl	25f18 <var_setUInt8>
    e7e6:	6378      	str	r0, [r7, #52]	; 0x34
    e7e8:	e04d      	b.n	e886 <cosem_getAutoAnswer+0x252>
    }
    else if (e->index == 6)
    e7ea:	687b      	ldr	r3, [r7, #4]
    e7ec:	7e1b      	ldrb	r3, [r3, #24]
    e7ee:	2b06      	cmp	r3, #6
    e7f0:	d146      	bne.n	e880 <cosem_getAutoAnswer+0x24c>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	4618      	mov	r0, r3
    e7f6:	f7fe f8d5 	bl	c9a4 <cosem_getByteBuffer>
    e7fa:	6378      	str	r0, [r7, #52]	; 0x34
    e7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7fe:	2b00      	cmp	r3, #0
    e800:	d001      	beq.n	e806 <cosem_getAutoAnswer+0x1d2>
        {
            return ret;
    e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e804:	e040      	b.n	e888 <cosem_getAutoAnswer+0x254>
        }
        gxByteBuffer *data = e->value.byteArr;
    e806:	687b      	ldr	r3, [r7, #4]
    e808:	689b      	ldr	r3, [r3, #8]
    e80a:	627b      	str	r3, [r7, #36]	; 0x24
        e->byteArray = 1;
    e80c:	687b      	ldr	r3, [r7, #4]
    e80e:	2201      	movs	r2, #1
    e810:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e814:	2102      	movs	r1, #2
    e816:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e818:	f7f4 fafc 	bl	2e14 <bb_setUInt8>
    e81c:	6378      	str	r0, [r7, #52]	; 0x34
    e81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e820:	2b00      	cmp	r3, #0
    e822:	d12b      	bne.n	e87c <cosem_getAutoAnswer+0x248>
    e824:	2102      	movs	r1, #2
    e826:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e828:	f7f4 faf4 	bl	2e14 <bb_setUInt8>
    e82c:	6378      	str	r0, [r7, #52]	; 0x34
    e82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e830:	2b00      	cmp	r3, #0
    e832:	d123      	bne.n	e87c <cosem_getAutoAnswer+0x248>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    e834:	2111      	movs	r1, #17
    e836:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e838:	f7f4 faec 	bl	2e14 <bb_setUInt8>
    e83c:	6378      	str	r0, [r7, #52]	; 0x34
    e83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e840:	2b00      	cmp	r3, #0
    e842:	d11b      	bne.n	e87c <cosem_getAutoAnswer+0x248>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
    e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e846:	7c1b      	ldrb	r3, [r3, #16]
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e848:	4619      	mov	r1, r3
    e84a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e84c:	f7f4 fae2 	bl	2e14 <bb_setUInt8>
    e850:	6378      	str	r0, [r7, #52]	; 0x34
    e852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e854:	2b00      	cmp	r3, #0
    e856:	d111      	bne.n	e87c <cosem_getAutoAnswer+0x248>
            (ret = bb_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
    e858:	2111      	movs	r1, #17
    e85a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e85c:	f7f4 fada 	bl	2e14 <bb_setUInt8>
    e860:	6378      	str	r0, [r7, #52]	; 0x34
    e862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e864:	2b00      	cmp	r3, #0
    e866:	d109      	bne.n	e87c <cosem_getAutoAnswer+0x248>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
    e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e86a:	7c5b      	ldrb	r3, [r3, #17]
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e86c:	4619      	mov	r1, r3
    e86e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e870:	f7f4 fad0 	bl	2e14 <bb_setUInt8>
    e874:	6378      	str	r0, [r7, #52]	; 0x34
    e876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e878:	2b00      	cmp	r3, #0
    e87a:	d004      	beq.n	e886 <cosem_getAutoAnswer+0x252>
            (ret = bb_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
        {
            return ret;
    e87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e87e:	e003      	b.n	e888 <cosem_getAutoAnswer+0x254>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    e880:	f44f 7381 	mov.w	r3, #258	; 0x102
    e884:	e000      	b.n	e888 <cosem_getAutoAnswer+0x254>
    }
    return ret;
    e886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    e888:	4618      	mov	r0, r3
    e88a:	3738      	adds	r7, #56	; 0x38
    e88c:	46bd      	mov	sp, r7
    e88e:	bd80      	pop	{r7, pc}

0000e890 <cosem_getAutoConnect>:
#endif //DLMS_IGNORE_AUTO_ANSWER
#ifndef DLMS_IGNORE_AUTO_CONNECT
int cosem_getAutoConnect(
    gxValueEventArg *e)
{
    e890:	b580      	push	{r7, lr}
    e892:	b08e      	sub	sp, #56	; 0x38
    e894:	af00      	add	r7, sp, #0
    e896:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
    e898:	2300      	movs	r3, #0
    e89a:	633b      	str	r3, [r7, #48]	; 0x30
    gxByteBuffer *ba;
    gxKey *k;
    dlmsVARIANT tmp;
    gxAutoConnect* object = (gxAutoConnect*)e->target;
    e89c:	687b      	ldr	r3, [r7, #4]
    e89e:	695b      	ldr	r3, [r3, #20]
    e8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (e->index == 2)
    e8a2:	687b      	ldr	r3, [r7, #4]
    e8a4:	7e1b      	ldrb	r3, [r3, #24]
    e8a6:	2b02      	cmp	r3, #2
    e8a8:	d108      	bne.n	e8bc <cosem_getAutoConnect+0x2c>
    {
        ret = var_setEnum(&e->value, object->mode);
    e8aa:	687a      	ldr	r2, [r7, #4]
    e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8ae:	7c1b      	ldrb	r3, [r3, #16]
    e8b0:	4619      	mov	r1, r3
    e8b2:	4610      	mov	r0, r2
    e8b4:	f017 fb1c 	bl	25ef0 <var_setEnum>
    e8b8:	6338      	str	r0, [r7, #48]	; 0x30
    e8ba:	e11e      	b.n	eafa <cosem_getAutoConnect+0x26a>
    }
    else if (e->index == 3)
    e8bc:	687b      	ldr	r3, [r7, #4]
    e8be:	7e1b      	ldrb	r3, [r3, #24]
    e8c0:	2b03      	cmp	r3, #3
    e8c2:	d109      	bne.n	e8d8 <cosem_getAutoConnect+0x48>
    {
        ret = var_setUInt8(&e->value, object->repetitions);
    e8c4:	687a      	ldr	r2, [r7, #4]
    e8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    e8cc:	4619      	mov	r1, r3
    e8ce:	4610      	mov	r0, r2
    e8d0:	f017 fb22 	bl	25f18 <var_setUInt8>
    e8d4:	6338      	str	r0, [r7, #48]	; 0x30
    e8d6:	e110      	b.n	eafa <cosem_getAutoConnect+0x26a>
    }
    else if (e->index == 4)
    e8d8:	687b      	ldr	r3, [r7, #4]
    e8da:	7e1b      	ldrb	r3, [r3, #24]
    e8dc:	2b04      	cmp	r3, #4
    e8de:	d108      	bne.n	e8f2 <cosem_getAutoConnect+0x62>
    {
        ret = var_setUInt16(&e->value, object->repetitionDelay);
    e8e0:	687a      	ldr	r2, [r7, #4]
    e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    e8e6:	4619      	mov	r1, r3
    e8e8:	4610      	mov	r0, r2
    e8ea:	f017 fb29 	bl	25f40 <var_setUInt16>
    e8ee:	6338      	str	r0, [r7, #48]	; 0x30
    e8f0:	e103      	b.n	eafa <cosem_getAutoConnect+0x26a>
    }
    else if (e->index == 5)
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	7e1b      	ldrb	r3, [r3, #24]
    e8f6:	2b05      	cmp	r3, #5
    e8f8:	f040 809c 	bne.w	ea34 <cosem_getAutoConnect+0x1a4>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    e8fc:	687b      	ldr	r3, [r7, #4]
    e8fe:	4618      	mov	r0, r3
    e900:	f7fe f850 	bl	c9a4 <cosem_getByteBuffer>
    e904:	6338      	str	r0, [r7, #48]	; 0x30
    e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e908:	2b00      	cmp	r3, #0
    e90a:	d001      	beq.n	e910 <cosem_getAutoConnect+0x80>
        {
            return ret;
    e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e90e:	e0f5      	b.n	eafc <cosem_getAutoConnect+0x26c>
        }
        gxByteBuffer *data = e->value.byteArr;
    e910:	687b      	ldr	r3, [r7, #4]
    e912:	689b      	ldr	r3, [r3, #8]
    e914:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
    e916:	687b      	ldr	r3, [r7, #4]
    e918:	2201      	movs	r2, #1
    e91a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e91e:	2101      	movs	r1, #1
    e920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e922:	f7f4 fa77 	bl	2e14 <bb_setUInt8>
    e926:	6338      	str	r0, [r7, #48]	; 0x30
    e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e92a:	2b00      	cmp	r3, #0
    e92c:	d112      	bne.n	e954 <cosem_getAutoConnect+0xc4>
            //Add count
            (ret = hlp_setObjectCount(object->callingWindow.size, data)) != 0 ||
    e92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e930:	8b9b      	ldrh	r3, [r3, #28]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e934:	4618      	mov	r0, r3
    e936:	f012 ffd1 	bl	218dc <hlp_setObjectCount>
    e93a:	6338      	str	r0, [r7, #48]	; 0x30
    e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e93e:	2b00      	cmp	r3, #0
    e940:	d108      	bne.n	e954 <cosem_getAutoConnect+0xc4>
            //Add count
            (ret = hlp_setObjectCount(object->callingWindow.size, data)) != 0 ||
    e942:	f107 0308 	add.w	r3, r7, #8
    e946:	4618      	mov	r0, r3
    e948:	f017 fbee 	bl	26128 <var_init>
    e94c:	6338      	str	r0, [r7, #48]	; 0x30
    e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e950:	2b00      	cmp	r3, #0
    e952:	d001      	beq.n	e958 <cosem_getAutoConnect+0xc8>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
    e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e956:	e0d1      	b.n	eafc <cosem_getAutoConnect+0x26c>
        }
        for (pos = 0; pos != object->callingWindow.size; ++pos)
    e958:	2300      	movs	r3, #0
    e95a:	637b      	str	r3, [r7, #52]	; 0x34
    e95c:	e05e      	b.n	ea1c <cosem_getAutoConnect+0x18c>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e95e:	2102      	movs	r1, #2
    e960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e962:	f7f4 fa57 	bl	2e14 <bb_setUInt8>
    e966:	6338      	str	r0, [r7, #48]	; 0x30
    e968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e96a:	2b00      	cmp	r3, #0
    e96c:	d15c      	bne.n	ea28 <cosem_getAutoConnect+0x198>
    e96e:	2102      	movs	r1, #2
    e970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e972:	f7f4 fa4f 	bl	2e14 <bb_setUInt8>
    e976:	6338      	str	r0, [r7, #48]	; 0x30
    e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e97a:	2b00      	cmp	r3, #0
    e97c:	d154      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
    e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e980:	3314      	adds	r3, #20
            return ret;
        }
        for (pos = 0; pos != object->callingWindow.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
    e982:	f107 021c 	add.w	r2, r7, #28
    e986:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e988:	4618      	mov	r0, r3
    e98a:	f7fd ff37 	bl	c7fc <arr_getByIndex>
    e98e:	6338      	str	r0, [r7, #48]	; 0x30
    e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e992:	2b00      	cmp	r3, #0
    e994:	d148      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
                (ret = var_setDateTime(&tmp, (gxtime*)k->key)) != 0 ||
    e996:	69fb      	ldr	r3, [r7, #28]
    e998:	681a      	ldr	r2, [r3, #0]
        }
        for (pos = 0; pos != object->callingWindow.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
    e99a:	f107 0308 	add.w	r3, r7, #8
    e99e:	4611      	mov	r1, r2
    e9a0:	4618      	mov	r0, r3
    e9a2:	f019 fb37 	bl	28014 <var_setDateTime>
    e9a6:	6338      	str	r0, [r7, #48]	; 0x30
    e9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d13c      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = var_setDateTime(&tmp, (gxtime*)k->key)) != 0 ||
    e9ae:	f107 0308 	add.w	r3, r7, #8
    e9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e9b4:	2109      	movs	r1, #9
    e9b6:	4618      	mov	r0, r3
    e9b8:	f017 fe86 	bl	266c8 <var_getBytes2>
    e9bc:	6338      	str	r0, [r7, #48]	; 0x30
    e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9c0:	2b00      	cmp	r3, #0
    e9c2:	d131      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
    e9c4:	f107 0308 	add.w	r3, r7, #8
    e9c8:	4618      	mov	r0, r3
    e9ca:	f017 fbbd 	bl	26148 <var_clear>
    e9ce:	6338      	str	r0, [r7, #48]	; 0x30
    e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d128      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = var_clear(&tmp)) != 0 ||
                (ret = var_setDateTime(&tmp, (gxtime*)k->value)) != 0 ||
    e9d6:	69fb      	ldr	r3, [r7, #28]
    e9d8:	685a      	ldr	r2, [r3, #4]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
                (ret = var_setDateTime(&tmp, (gxtime*)k->key)) != 0 ||
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
    e9da:	f107 0308 	add.w	r3, r7, #8
    e9de:	4611      	mov	r1, r2
    e9e0:	4618      	mov	r0, r3
    e9e2:	f019 fb17 	bl	28014 <var_setDateTime>
    e9e6:	6338      	str	r0, [r7, #48]	; 0x30
    e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9ea:	2b00      	cmp	r3, #0
    e9ec:	d11c      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = var_setDateTime(&tmp, (gxtime*)k->value)) != 0 ||
    e9ee:	f107 0308 	add.w	r3, r7, #8
    e9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e9f4:	2109      	movs	r1, #9
    e9f6:	4618      	mov	r0, r3
    e9f8:	f017 fe66 	bl	266c8 <var_getBytes2>
    e9fc:	6338      	str	r0, [r7, #48]	; 0x30
    e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea00:	2b00      	cmp	r3, #0
    ea02:	d111      	bne.n	ea28 <cosem_getAutoConnect+0x198>
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
    ea04:	f107 0308 	add.w	r3, r7, #8
    ea08:	4618      	mov	r0, r3
    ea0a:	f017 fb9d 	bl	26148 <var_clear>
    ea0e:	6338      	str	r0, [r7, #48]	; 0x30
    ea10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea12:	2b00      	cmp	r3, #0
    ea14:	d108      	bne.n	ea28 <cosem_getAutoConnect+0x198>
            (ret = hlp_setObjectCount(object->callingWindow.size, data)) != 0 ||
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->callingWindow.size; ++pos)
    ea16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea18:	3301      	adds	r3, #1
    ea1a:	637b      	str	r3, [r7, #52]	; 0x34
    ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea1e:	8b9b      	ldrh	r3, [r3, #28]
    ea20:	461a      	mov	r2, r3
    ea22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea24:	429a      	cmp	r2, r3
    ea26:	d19a      	bne.n	e95e <cosem_getAutoConnect+0xce>
                (ret = var_clear(&tmp)) != 0)
            {
                break;
            }
        }
        var_clear(&tmp);
    ea28:	f107 0308 	add.w	r3, r7, #8
    ea2c:	4618      	mov	r0, r3
    ea2e:	f017 fb8b 	bl	26148 <var_clear>
    ea32:	e062      	b.n	eafa <cosem_getAutoConnect+0x26a>
    }
    else if (e->index == 6)
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	7e1b      	ldrb	r3, [r3, #24]
    ea38:	2b06      	cmp	r3, #6
    ea3a:	d15b      	bne.n	eaf4 <cosem_getAutoConnect+0x264>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ea3c:	687b      	ldr	r3, [r7, #4]
    ea3e:	4618      	mov	r0, r3
    ea40:	f7fd ffb0 	bl	c9a4 <cosem_getByteBuffer>
    ea44:	6338      	str	r0, [r7, #48]	; 0x30
    ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d001      	beq.n	ea50 <cosem_getAutoConnect+0x1c0>
        {
            return ret;
    ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea4e:	e055      	b.n	eafc <cosem_getAutoConnect+0x26c>
        }
        gxByteBuffer *data = e->value.byteArr;
    ea50:	687b      	ldr	r3, [r7, #4]
    ea52:	689b      	ldr	r3, [r3, #8]
    ea54:	627b      	str	r3, [r7, #36]	; 0x24
        e->byteArray = 1;
    ea56:	687b      	ldr	r3, [r7, #4]
    ea58:	2201      	movs	r2, #1
    ea5a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    ea5e:	2101      	movs	r1, #1
    ea60:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ea62:	f7f4 f9d7 	bl	2e14 <bb_setUInt8>
    ea66:	6338      	str	r0, [r7, #48]	; 0x30
    ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	d109      	bne.n	ea82 <cosem_getAutoConnect+0x1f2>
            //Add count
            (ret = hlp_setObjectCount(object->destinations.size, data)) != 0)
    ea6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    ea72:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ea74:	4618      	mov	r0, r3
    ea76:	f012 ff31 	bl	218dc <hlp_setObjectCount>
    ea7a:	6338      	str	r0, [r7, #48]	; 0x30
    ea7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d001      	beq.n	ea86 <cosem_getAutoConnect+0x1f6>
            //Add count
            (ret = hlp_setObjectCount(object->destinations.size, data)) != 0)
        {
            return ret;
    ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea84:	e03a      	b.n	eafc <cosem_getAutoConnect+0x26c>
        }
        for (pos = 0; pos != object->destinations.size; ++pos)
    ea86:	2300      	movs	r3, #0
    ea88:	637b      	str	r3, [r7, #52]	; 0x34
    ea8a:	e02c      	b.n	eae6 <cosem_getAutoConnect+0x256>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    ea8c:	2109      	movs	r1, #9
    ea8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ea90:	f7f4 f9c0 	bl	2e14 <bb_setUInt8>
    ea94:	6338      	str	r0, [r7, #48]	; 0x30
    ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ea98:	2b00      	cmp	r3, #0
    ea9a:	d12e      	bne.n	eafa <cosem_getAutoConnect+0x26a>
                (ret = arr_getByIndex(&object->destinations, pos, (void**)&ba)) != 0 ||
    ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea9e:	3324      	adds	r3, #36	; 0x24
        {
            return ret;
        }
        for (pos = 0; pos != object->destinations.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    eaa0:	f107 0220 	add.w	r2, r7, #32
    eaa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    eaa6:	4618      	mov	r0, r3
    eaa8:	f7fd fea8 	bl	c7fc <arr_getByIndex>
    eaac:	6338      	str	r0, [r7, #48]	; 0x30
    eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eab0:	2b00      	cmp	r3, #0
    eab2:	d122      	bne.n	eafa <cosem_getAutoConnect+0x26a>
                (ret = arr_getByIndex(&object->destinations, pos, (void**)&ba)) != 0 ||
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    eab4:	6a3b      	ldr	r3, [r7, #32]
    eab6:	88db      	ldrh	r3, [r3, #6]
            return ret;
        }
        for (pos = 0; pos != object->destinations.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = arr_getByIndex(&object->destinations, pos, (void**)&ba)) != 0 ||
    eab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    eaba:	4618      	mov	r0, r3
    eabc:	f012 ff0e 	bl	218dc <hlp_setObjectCount>
    eac0:	6338      	str	r0, [r7, #48]	; 0x30
    eac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eac4:	2b00      	cmp	r3, #0
    eac6:	d118      	bne.n	eafa <cosem_getAutoConnect+0x26a>
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
                (ret = bb_set(data, ba->data, ba->size)) != 0)
    eac8:	6a3b      	ldr	r3, [r7, #32]
    eaca:	6819      	ldr	r1, [r3, #0]
    eacc:	6a3b      	ldr	r3, [r7, #32]
    eace:	88db      	ldrh	r3, [r3, #6]
        }
        for (pos = 0; pos != object->destinations.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = arr_getByIndex(&object->destinations, pos, (void**)&ba)) != 0 ||
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    ead0:	461a      	mov	r2, r3
    ead2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ead4:	f7f4 fd44 	bl	3560 <bb_set>
    ead8:	6338      	str	r0, [r7, #48]	; 0x30
    eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eadc:	2b00      	cmp	r3, #0
    eade:	d10c      	bne.n	eafa <cosem_getAutoConnect+0x26a>
            //Add count
            (ret = hlp_setObjectCount(object->destinations.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->destinations.size; ++pos)
    eae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eae2:	3301      	adds	r3, #1
    eae4:	637b      	str	r3, [r7, #52]	; 0x34
    eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    eaea:	461a      	mov	r2, r3
    eaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eaee:	429a      	cmp	r2, r3
    eaf0:	d1cc      	bne.n	ea8c <cosem_getAutoConnect+0x1fc>
    eaf2:	e002      	b.n	eafa <cosem_getAutoConnect+0x26a>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    eaf4:	f44f 7381 	mov.w	r3, #258	; 0x102
    eaf8:	633b      	str	r3, [r7, #48]	; 0x30
    }
    return ret;
    eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    eafc:	4618      	mov	r0, r3
    eafe:	3738      	adds	r7, #56	; 0x38
    eb00:	46bd      	mov	sp, r7
    eb02:	bd80      	pop	{r7, pc}

0000eb04 <cosem_getDemandRegister>:
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
int cosem_getDemandRegister(
    gxValueEventArg *e)
{
    eb04:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb06:	b087      	sub	sp, #28
    eb08:	af00      	add	r7, sp, #0
    eb0a:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK;
    eb0c:	2300      	movs	r3, #0
    eb0e:	617b      	str	r3, [r7, #20]
    gxDemandRegister* object = (gxDemandRegister*)e->target;
    eb10:	687b      	ldr	r3, [r7, #4]
    eb12:	695b      	ldr	r3, [r3, #20]
    eb14:	613b      	str	r3, [r7, #16]
    if (e->index == 2)
    eb16:	687b      	ldr	r3, [r7, #4]
    eb18:	7e1b      	ldrb	r3, [r3, #24]
    eb1a:	2b02      	cmp	r3, #2
    eb1c:	d120      	bne.n	eb60 <cosem_getDemandRegister+0x5c>
    {
        ret = var_setUInt32(&e->value, (long)(var_toDouble(&object->currentAvarageValue) / hlp_getScaler(object->scaler)));
    eb1e:	687c      	ldr	r4, [r7, #4]
    eb20:	693b      	ldr	r3, [r7, #16]
    eb22:	3310      	adds	r3, #16
    eb24:	4618      	mov	r0, r3
    eb26:	f019 fb99 	bl	2825c <var_toDouble>
    eb2a:	4605      	mov	r5, r0
    eb2c:	460e      	mov	r6, r1
    eb2e:	693b      	ldr	r3, [r7, #16]
    eb30:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    eb34:	4618      	mov	r0, r3
    eb36:	f013 f855 	bl	21be4 <hlp_getScaler>
    eb3a:	4602      	mov	r2, r0
    eb3c:	460b      	mov	r3, r1
    eb3e:	4628      	mov	r0, r5
    eb40:	4631      	mov	r1, r6
    eb42:	f7f1 fdd7 	bl	6f4 <__aeabi_ddiv>
    eb46:	4602      	mov	r2, r0
    eb48:	460b      	mov	r3, r1
    eb4a:	4610      	mov	r0, r2
    eb4c:	4619      	mov	r1, r3
    eb4e:	f7f1 feb9 	bl	8c4 <__aeabi_d2iz>
    eb52:	4603      	mov	r3, r0
    eb54:	4619      	mov	r1, r3
    eb56:	4620      	mov	r0, r4
    eb58:	f017 fa06 	bl	25f68 <var_setUInt32>
    eb5c:	6178      	str	r0, [r7, #20]
    eb5e:	e0b8      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 3)
    eb60:	687b      	ldr	r3, [r7, #4]
    eb62:	7e1b      	ldrb	r3, [r3, #24]
    eb64:	2b03      	cmp	r3, #3
    eb66:	d120      	bne.n	ebaa <cosem_getDemandRegister+0xa6>
    {
        ret = var_setUInt32(&e->value, (long)(var_toDouble(&object->lastAvarageValue) / hlp_getScaler(object->scaler)));
    eb68:	687c      	ldr	r4, [r7, #4]
    eb6a:	693b      	ldr	r3, [r7, #16]
    eb6c:	3320      	adds	r3, #32
    eb6e:	4618      	mov	r0, r3
    eb70:	f019 fb74 	bl	2825c <var_toDouble>
    eb74:	4605      	mov	r5, r0
    eb76:	460e      	mov	r6, r1
    eb78:	693b      	ldr	r3, [r7, #16]
    eb7a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    eb7e:	4618      	mov	r0, r3
    eb80:	f013 f830 	bl	21be4 <hlp_getScaler>
    eb84:	4602      	mov	r2, r0
    eb86:	460b      	mov	r3, r1
    eb88:	4628      	mov	r0, r5
    eb8a:	4631      	mov	r1, r6
    eb8c:	f7f1 fdb2 	bl	6f4 <__aeabi_ddiv>
    eb90:	4602      	mov	r2, r0
    eb92:	460b      	mov	r3, r1
    eb94:	4610      	mov	r0, r2
    eb96:	4619      	mov	r1, r3
    eb98:	f7f1 fe94 	bl	8c4 <__aeabi_d2iz>
    eb9c:	4603      	mov	r3, r0
    eb9e:	4619      	mov	r1, r3
    eba0:	4620      	mov	r0, r4
    eba2:	f017 f9e1 	bl	25f68 <var_setUInt32>
    eba6:	6178      	str	r0, [r7, #20]
    eba8:	e093      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 4)
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	7e1b      	ldrb	r3, [r3, #24]
    ebae:	2b04      	cmp	r3, #4
    ebb0:	d149      	bne.n	ec46 <cosem_getDemandRegister+0x142>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	4618      	mov	r0, r3
    ebb6:	f7fd fef5 	bl	c9a4 <cosem_getByteBuffer>
    ebba:	6178      	str	r0, [r7, #20]
    ebbc:	697b      	ldr	r3, [r7, #20]
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	d001      	beq.n	ebc6 <cosem_getDemandRegister+0xc2>
        {
            return ret;
    ebc2:	697b      	ldr	r3, [r7, #20]
    ebc4:	e086      	b.n	ecd4 <cosem_getDemandRegister+0x1d0>
        }
        gxByteBuffer *data = e->value.byteArr;
    ebc6:	687b      	ldr	r3, [r7, #4]
    ebc8:	689b      	ldr	r3, [r3, #8]
    ebca:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
    ebcc:	687b      	ldr	r3, [r7, #4]
    ebce:	2201      	movs	r2, #1
    ebd0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    ebd4:	2102      	movs	r1, #2
    ebd6:	68f8      	ldr	r0, [r7, #12]
    ebd8:	f7f4 f91c 	bl	2e14 <bb_setUInt8>
    ebdc:	6178      	str	r0, [r7, #20]
    ebde:	697b      	ldr	r3, [r7, #20]
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d12e      	bne.n	ec42 <cosem_getDemandRegister+0x13e>
    ebe4:	2102      	movs	r1, #2
    ebe6:	68f8      	ldr	r0, [r7, #12]
    ebe8:	f7f4 f914 	bl	2e14 <bb_setUInt8>
    ebec:	6178      	str	r0, [r7, #20]
    ebee:	697b      	ldr	r3, [r7, #20]
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d126      	bne.n	ec42 <cosem_getDemandRegister+0x13e>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    ebf4:	210f      	movs	r1, #15
    ebf6:	68f8      	ldr	r0, [r7, #12]
    ebf8:	f7f4 f90c 	bl	2e14 <bb_setUInt8>
    ebfc:	6178      	str	r0, [r7, #20]
    ebfe:	697b      	ldr	r3, [r7, #20]
    ec00:	2b00      	cmp	r3, #0
    ec02:	d11e      	bne.n	ec42 <cosem_getDemandRegister+0x13e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, object->scaler)) != 0 ||
    ec04:	693b      	ldr	r3, [r7, #16]
    ec06:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
    ec0a:	b2db      	uxtb	r3, r3
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    ec0c:	4619      	mov	r1, r3
    ec0e:	68f8      	ldr	r0, [r7, #12]
    ec10:	f7f4 fc64 	bl	34dc <bb_setInt8>
    ec14:	6178      	str	r0, [r7, #20]
    ec16:	697b      	ldr	r3, [r7, #20]
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d112      	bne.n	ec42 <cosem_getDemandRegister+0x13e>
            (ret = bb_setInt8(data, object->scaler)) != 0 ||
    ec1c:	2116      	movs	r1, #22
    ec1e:	68f8      	ldr	r0, [r7, #12]
    ec20:	f7f4 f8f8 	bl	2e14 <bb_setUInt8>
    ec24:	6178      	str	r0, [r7, #20]
    ec26:	697b      	ldr	r3, [r7, #20]
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d10a      	bne.n	ec42 <cosem_getDemandRegister+0x13e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->unit)) != 0)
    ec2c:	693b      	ldr	r3, [r7, #16]
    ec2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, object->scaler)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    ec32:	4619      	mov	r1, r3
    ec34:	68f8      	ldr	r0, [r7, #12]
    ec36:	f7f4 f8ed 	bl	2e14 <bb_setUInt8>
    ec3a:	6178      	str	r0, [r7, #20]
    ec3c:	697b      	ldr	r3, [r7, #20]
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d047      	beq.n	ecd2 <cosem_getDemandRegister+0x1ce>
            (ret = bb_setUInt8(data, object->unit)) != 0)
        {
            return ret;
    ec42:	697b      	ldr	r3, [r7, #20]
    ec44:	e046      	b.n	ecd4 <cosem_getDemandRegister+0x1d0>
        }
    }
    else if (e->index == 5)
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	7e1b      	ldrb	r3, [r3, #24]
    ec4a:	2b05      	cmp	r3, #5
    ec4c:	d108      	bne.n	ec60 <cosem_getDemandRegister+0x15c>
    {
        ret = var_copy(&e->value, &object->status);
    ec4e:	687a      	ldr	r2, [r7, #4]
    ec50:	693b      	ldr	r3, [r7, #16]
    ec52:	3338      	adds	r3, #56	; 0x38
    ec54:	4619      	mov	r1, r3
    ec56:	4610      	mov	r0, r2
    ec58:	f019 f88c 	bl	27d74 <var_copy>
    ec5c:	6178      	str	r0, [r7, #20]
    ec5e:	e038      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 6)
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	7e1b      	ldrb	r3, [r3, #24]
    ec64:	2b06      	cmp	r3, #6
    ec66:	d108      	bne.n	ec7a <cosem_getDemandRegister+0x176>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &object->captureTime);
    ec68:	687a      	ldr	r2, [r7, #4]
    ec6a:	693b      	ldr	r3, [r7, #16]
    ec6c:	3348      	adds	r3, #72	; 0x48
    ec6e:	4619      	mov	r1, r3
    ec70:	4610      	mov	r0, r2
    ec72:	f019 fa3b 	bl	280ec <var_setDateTimeAsOctetString>
    ec76:	6178      	str	r0, [r7, #20]
    ec78:	e02b      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 7)
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	7e1b      	ldrb	r3, [r3, #24]
    ec7e:	2b07      	cmp	r3, #7
    ec80:	d108      	bne.n	ec94 <cosem_getDemandRegister+0x190>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &object->startTimeCurrent);
    ec82:	687a      	ldr	r2, [r7, #4]
    ec84:	693b      	ldr	r3, [r7, #16]
    ec86:	3378      	adds	r3, #120	; 0x78
    ec88:	4619      	mov	r1, r3
    ec8a:	4610      	mov	r0, r2
    ec8c:	f019 fa2e 	bl	280ec <var_setDateTimeAsOctetString>
    ec90:	6178      	str	r0, [r7, #20]
    ec92:	e01e      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 8)
    ec94:	687b      	ldr	r3, [r7, #4]
    ec96:	7e1b      	ldrb	r3, [r3, #24]
    ec98:	2b08      	cmp	r3, #8
    ec9a:	d109      	bne.n	ecb0 <cosem_getDemandRegister+0x1ac>
    {
        ret = var_setUInt32(&e->value, object->period);
    ec9c:	687a      	ldr	r2, [r7, #4]
    ec9e:	693b      	ldr	r3, [r7, #16]
    eca0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    eca4:	4619      	mov	r1, r3
    eca6:	4610      	mov	r0, r2
    eca8:	f017 f95e 	bl	25f68 <var_setUInt32>
    ecac:	6178      	str	r0, [r7, #20]
    ecae:	e010      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else if (e->index == 9)
    ecb0:	687b      	ldr	r3, [r7, #4]
    ecb2:	7e1b      	ldrb	r3, [r3, #24]
    ecb4:	2b09      	cmp	r3, #9
    ecb6:	d109      	bne.n	eccc <cosem_getDemandRegister+0x1c8>
    {
        ret = var_setUInt16(&e->value, object->numberOfPeriods);
    ecb8:	687a      	ldr	r2, [r7, #4]
    ecba:	693b      	ldr	r3, [r7, #16]
    ecbc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
    ecc0:	4619      	mov	r1, r3
    ecc2:	4610      	mov	r0, r2
    ecc4:	f017 f93c 	bl	25f40 <var_setUInt16>
    ecc8:	6178      	str	r0, [r7, #20]
    ecca:	e002      	b.n	ecd2 <cosem_getDemandRegister+0x1ce>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    eccc:	f44f 7381 	mov.w	r3, #258	; 0x102
    ecd0:	617b      	str	r3, [r7, #20]
    }
    return ret;
    ecd2:	697b      	ldr	r3, [r7, #20]
}
    ecd4:	4618      	mov	r0, r3
    ecd6:	371c      	adds	r7, #28
    ecd8:	46bd      	mov	sp, r7
    ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ecdc <cosem_getMacAddressSetup>:
#endif //DLMS_IGNORE_DEMAND_REGISTER
#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
int cosem_getMacAddressSetup(
    gxValueEventArg *e)
{
    ecdc:	b580      	push	{r7, lr}
    ecde:	b084      	sub	sp, #16
    ece0:	af00      	add	r7, sp, #0
    ece2:	6078      	str	r0, [r7, #4]
    int ret = 0;
    ece4:	2300      	movs	r3, #0
    ece6:	60fb      	str	r3, [r7, #12]
    gxMacAddressSetup* object = (gxMacAddressSetup*)e->target;
    ece8:	687b      	ldr	r3, [r7, #4]
    ecea:	695b      	ldr	r3, [r3, #20]
    ecec:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
    ecee:	687b      	ldr	r3, [r7, #4]
    ecf0:	7e1b      	ldrb	r3, [r3, #24]
    ecf2:	2b02      	cmp	r3, #2
    ecf4:	d108      	bne.n	ed08 <cosem_getMacAddressSetup+0x2c>
    {
        ret = var_addOctetString(&e->value, &object->macAddress);
    ecf6:	687a      	ldr	r2, [r7, #4]
    ecf8:	68bb      	ldr	r3, [r7, #8]
    ecfa:	3310      	adds	r3, #16
    ecfc:	4619      	mov	r1, r3
    ecfe:	4610      	mov	r0, r2
    ed00:	f017 f9f6 	bl	260f0 <var_addOctetString>
    ed04:	60f8      	str	r0, [r7, #12]
    ed06:	e002      	b.n	ed0e <cosem_getMacAddressSetup+0x32>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    ed08:	f44f 7381 	mov.w	r3, #258	; 0x102
    ed0c:	60fb      	str	r3, [r7, #12]
    }
    return ret;
    ed0e:	68fb      	ldr	r3, [r7, #12]
}
    ed10:	4618      	mov	r0, r3
    ed12:	3710      	adds	r7, #16
    ed14:	46bd      	mov	sp, r7
    ed16:	bd80      	pop	{r7, pc}

0000ed18 <cosem_getExtendedRegister>:
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
int cosem_getExtendedRegister(
    gxValueEventArg *e)
{
    ed18:	b580      	push	{r7, lr}
    ed1a:	b08a      	sub	sp, #40	; 0x28
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK;
    ed20:	2300      	movs	r3, #0
    ed22:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT tmp;
    gxExtendedRegister* object = (gxExtendedRegister*)e->target;
    ed24:	687b      	ldr	r3, [r7, #4]
    ed26:	695b      	ldr	r3, [r3, #20]
    ed28:	623b      	str	r3, [r7, #32]
    if (e->index == 2)
    ed2a:	687b      	ldr	r3, [r7, #4]
    ed2c:	7e1b      	ldrb	r3, [r3, #24]
    ed2e:	2b02      	cmp	r3, #2
    ed30:	d108      	bne.n	ed44 <cosem_getExtendedRegister+0x2c>
    {
        ret = var_copy(&e->value, &object->base.value);
    ed32:	687a      	ldr	r2, [r7, #4]
    ed34:	6a3b      	ldr	r3, [r7, #32]
    ed36:	3310      	adds	r3, #16
    ed38:	4619      	mov	r1, r3
    ed3a:	4610      	mov	r0, r2
    ed3c:	f019 f81a 	bl	27d74 <var_copy>
    ed40:	6278      	str	r0, [r7, #36]	; 0x24
    ed42:	e092      	b.n	ee6a <cosem_getExtendedRegister+0x152>
    }
    else if (e->index == 3)
    ed44:	687b      	ldr	r3, [r7, #4]
    ed46:	7e1b      	ldrb	r3, [r3, #24]
    ed48:	2b03      	cmp	r3, #3
    ed4a:	d149      	bne.n	ede0 <cosem_getExtendedRegister+0xc8>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ed4c:	687b      	ldr	r3, [r7, #4]
    ed4e:	4618      	mov	r0, r3
    ed50:	f7fd fe28 	bl	c9a4 <cosem_getByteBuffer>
    ed54:	6278      	str	r0, [r7, #36]	; 0x24
    ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed58:	2b00      	cmp	r3, #0
    ed5a:	d001      	beq.n	ed60 <cosem_getExtendedRegister+0x48>
        {
            return ret;
    ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed5e:	e085      	b.n	ee6c <cosem_getExtendedRegister+0x154>
        }
        gxByteBuffer *data = e->value.byteArr;
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	689b      	ldr	r3, [r3, #8]
    ed64:	61fb      	str	r3, [r7, #28]
        e->byteArray = 1;
    ed66:	687b      	ldr	r3, [r7, #4]
    ed68:	2201      	movs	r2, #1
    ed6a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    ed6e:	2102      	movs	r1, #2
    ed70:	69f8      	ldr	r0, [r7, #28]
    ed72:	f7f4 f84f 	bl	2e14 <bb_setUInt8>
    ed76:	6278      	str	r0, [r7, #36]	; 0x24
    ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed7a:	2b00      	cmp	r3, #0
    ed7c:	d12e      	bne.n	eddc <cosem_getExtendedRegister+0xc4>
    ed7e:	2102      	movs	r1, #2
    ed80:	69f8      	ldr	r0, [r7, #28]
    ed82:	f7f4 f847 	bl	2e14 <bb_setUInt8>
    ed86:	6278      	str	r0, [r7, #36]	; 0x24
    ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d126      	bne.n	eddc <cosem_getExtendedRegister+0xc4>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    ed8e:	210f      	movs	r1, #15
    ed90:	69f8      	ldr	r0, [r7, #28]
    ed92:	f7f4 f83f 	bl	2e14 <bb_setUInt8>
    ed96:	6278      	str	r0, [r7, #36]	; 0x24
    ed98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d11e      	bne.n	eddc <cosem_getExtendedRegister+0xc4>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, object->base.scaler)) != 0 ||
    ed9e:	6a3b      	ldr	r3, [r7, #32]
    eda0:	f993 3020 	ldrsb.w	r3, [r3, #32]
    eda4:	b2db      	uxtb	r3, r3
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    eda6:	4619      	mov	r1, r3
    eda8:	69f8      	ldr	r0, [r7, #28]
    edaa:	f7f4 fb97 	bl	34dc <bb_setInt8>
    edae:	6278      	str	r0, [r7, #36]	; 0x24
    edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    edb2:	2b00      	cmp	r3, #0
    edb4:	d112      	bne.n	eddc <cosem_getExtendedRegister+0xc4>
            (ret = bb_setInt8(data, object->base.scaler)) != 0 ||
    edb6:	2116      	movs	r1, #22
    edb8:	69f8      	ldr	r0, [r7, #28]
    edba:	f7f4 f82b 	bl	2e14 <bb_setUInt8>
    edbe:	6278      	str	r0, [r7, #36]	; 0x24
    edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    edc2:	2b00      	cmp	r3, #0
    edc4:	d10a      	bne.n	eddc <cosem_getExtendedRegister+0xc4>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->base.unit)) != 0)
    edc6:	6a3b      	ldr	r3, [r7, #32]
    edc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setInt8(data, object->base.scaler)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    edcc:	4619      	mov	r1, r3
    edce:	69f8      	ldr	r0, [r7, #28]
    edd0:	f7f4 f820 	bl	2e14 <bb_setUInt8>
    edd4:	6278      	str	r0, [r7, #36]	; 0x24
    edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    edd8:	2b00      	cmp	r3, #0
    edda:	d046      	beq.n	ee6a <cosem_getExtendedRegister+0x152>
            (ret = bb_setUInt8(data, object->base.unit)) != 0)
        {
            return ret;
    eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    edde:	e045      	b.n	ee6c <cosem_getExtendedRegister+0x154>
        }
    }
    else if (e->index == 4)
    ede0:	687b      	ldr	r3, [r7, #4]
    ede2:	7e1b      	ldrb	r3, [r3, #24]
    ede4:	2b04      	cmp	r3, #4
    ede6:	d108      	bne.n	edfa <cosem_getExtendedRegister+0xe2>
    {
        ret = var_copy(&e->value, &object->status);
    ede8:	687a      	ldr	r2, [r7, #4]
    edea:	6a3b      	ldr	r3, [r7, #32]
    edec:	3358      	adds	r3, #88	; 0x58
    edee:	4619      	mov	r1, r3
    edf0:	4610      	mov	r0, r2
    edf2:	f018 ffbf 	bl	27d74 <var_copy>
    edf6:	6278      	str	r0, [r7, #36]	; 0x24
    edf8:	e037      	b.n	ee6a <cosem_getExtendedRegister+0x152>
    }
    else if (e->index == 5)
    edfa:	687b      	ldr	r3, [r7, #4]
    edfc:	7e1b      	ldrb	r3, [r3, #24]
    edfe:	2b05      	cmp	r3, #5
    ee00:	d130      	bne.n	ee64 <cosem_getExtendedRegister+0x14c>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ee02:	687b      	ldr	r3, [r7, #4]
    ee04:	4618      	mov	r0, r3
    ee06:	f7fd fdcd 	bl	c9a4 <cosem_getByteBuffer>
    ee0a:	6278      	str	r0, [r7, #36]	; 0x24
    ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d001      	beq.n	ee16 <cosem_getExtendedRegister+0xfe>
        {
            return ret;
    ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee14:	e02a      	b.n	ee6c <cosem_getExtendedRegister+0x154>
        }
        gxByteBuffer *data = e->value.byteArr;
    ee16:	687b      	ldr	r3, [r7, #4]
    ee18:	689b      	ldr	r3, [r3, #8]
    ee1a:	61bb      	str	r3, [r7, #24]
        var_init(&tmp);
    ee1c:	f107 0308 	add.w	r3, r7, #8
    ee20:	4618      	mov	r0, r3
    ee22:	f017 f981 	bl	26128 <var_init>
        ret = var_setDateTime(&tmp, &object->captureTime);
    ee26:	6a3b      	ldr	r3, [r7, #32]
    ee28:	f103 0228 	add.w	r2, r3, #40	; 0x28
    ee2c:	f107 0308 	add.w	r3, r7, #8
    ee30:	4611      	mov	r1, r2
    ee32:	4618      	mov	r0, r3
    ee34:	f019 f8ee 	bl	28014 <var_setDateTime>
    ee38:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret == 0)
    ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee3c:	2b00      	cmp	r3, #0
    ee3e:	d10b      	bne.n	ee58 <cosem_getExtendedRegister+0x140>
        {
            e->byteArray = 1;
    ee40:	687b      	ldr	r3, [r7, #4]
    ee42:	2201      	movs	r2, #1
    ee44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data);
    ee48:	f107 0308 	add.w	r3, r7, #8
    ee4c:	69ba      	ldr	r2, [r7, #24]
    ee4e:	2109      	movs	r1, #9
    ee50:	4618      	mov	r0, r3
    ee52:	f017 fc39 	bl	266c8 <var_getBytes2>
    ee56:	6278      	str	r0, [r7, #36]	; 0x24
        }
        var_clear(&tmp);
    ee58:	f107 0308 	add.w	r3, r7, #8
    ee5c:	4618      	mov	r0, r3
    ee5e:	f017 f973 	bl	26148 <var_clear>
    ee62:	e002      	b.n	ee6a <cosem_getExtendedRegister+0x152>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    ee64:	f44f 7381 	mov.w	r3, #258	; 0x102
    ee68:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
    ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ee6c:	4618      	mov	r0, r3
    ee6e:	3728      	adds	r7, #40	; 0x28
    ee70:	46bd      	mov	sp, r7
    ee72:	bd80      	pop	{r7, pc}

0000ee74 <cosem_getQualityOfService>:
#endif //DLMS_IGNORE_EXTENDED_REGISTER

#ifndef DLMS_IGNORE_GPRS_SETUP
int cosem_getQualityOfService(gxQualityOfService* service, gxByteBuffer* ba)
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b084      	sub	sp, #16
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
    ee7c:	6039      	str	r1, [r7, #0]
    int ret;
    if ((ret = bb_setUInt8(ba, 5)) != 0 ||
    ee7e:	2105      	movs	r1, #5
    ee80:	6838      	ldr	r0, [r7, #0]
    ee82:	f7f3 ffc7 	bl	2e14 <bb_setUInt8>
    ee86:	60f8      	str	r0, [r7, #12]
    ee88:	68fb      	ldr	r3, [r7, #12]
    ee8a:	2b00      	cmp	r3, #0
    ee8c:	d159      	bne.n	ef42 <cosem_getQualityOfService+0xce>
    ee8e:	2111      	movs	r1, #17
    ee90:	6838      	ldr	r0, [r7, #0]
    ee92:	f7f3 ffbf 	bl	2e14 <bb_setUInt8>
    ee96:	60f8      	str	r0, [r7, #12]
    ee98:	68fb      	ldr	r3, [r7, #12]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d151      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        //Precedence
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->precedence)) != 0 ||
    ee9e:	687b      	ldr	r3, [r7, #4]
    eea0:	781b      	ldrb	r3, [r3, #0]
int cosem_getQualityOfService(gxQualityOfService* service, gxByteBuffer* ba)
{
    int ret;
    if ((ret = bb_setUInt8(ba, 5)) != 0 ||
        //Precedence
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    eea2:	4619      	mov	r1, r3
    eea4:	6838      	ldr	r0, [r7, #0]
    eea6:	f7f3 ffb5 	bl	2e14 <bb_setUInt8>
    eeaa:	60f8      	str	r0, [r7, #12]
    eeac:	68fb      	ldr	r3, [r7, #12]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d147      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        (ret = bb_setUInt8(ba, service->precedence)) != 0 ||
    eeb2:	2111      	movs	r1, #17
    eeb4:	6838      	ldr	r0, [r7, #0]
    eeb6:	f7f3 ffad 	bl	2e14 <bb_setUInt8>
    eeba:	60f8      	str	r0, [r7, #12]
    eebc:	68fb      	ldr	r3, [r7, #12]
    eebe:	2b00      	cmp	r3, #0
    eec0:	d13f      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        //Delay
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->delay)) != 0 ||
    eec2:	687b      	ldr	r3, [r7, #4]
    eec4:	785b      	ldrb	r3, [r3, #1]
    if ((ret = bb_setUInt8(ba, 5)) != 0 ||
        //Precedence
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->precedence)) != 0 ||
        //Delay
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    eec6:	4619      	mov	r1, r3
    eec8:	6838      	ldr	r0, [r7, #0]
    eeca:	f7f3 ffa3 	bl	2e14 <bb_setUInt8>
    eece:	60f8      	str	r0, [r7, #12]
    eed0:	68fb      	ldr	r3, [r7, #12]
    eed2:	2b00      	cmp	r3, #0
    eed4:	d135      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        (ret = bb_setUInt8(ba, service->delay)) != 0 ||
    eed6:	2111      	movs	r1, #17
    eed8:	6838      	ldr	r0, [r7, #0]
    eeda:	f7f3 ff9b 	bl	2e14 <bb_setUInt8>
    eede:	60f8      	str	r0, [r7, #12]
    eee0:	68fb      	ldr	r3, [r7, #12]
    eee2:	2b00      	cmp	r3, #0
    eee4:	d12d      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        //Reliability
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->reliability)) != 0 ||
    eee6:	687b      	ldr	r3, [r7, #4]
    eee8:	789b      	ldrb	r3, [r3, #2]
        (ret = bb_setUInt8(ba, service->precedence)) != 0 ||
        //Delay
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->delay)) != 0 ||
        //Reliability
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    eeea:	4619      	mov	r1, r3
    eeec:	6838      	ldr	r0, [r7, #0]
    eeee:	f7f3 ff91 	bl	2e14 <bb_setUInt8>
    eef2:	60f8      	str	r0, [r7, #12]
    eef4:	68fb      	ldr	r3, [r7, #12]
    eef6:	2b00      	cmp	r3, #0
    eef8:	d123      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        (ret = bb_setUInt8(ba, service->reliability)) != 0 ||
    eefa:	2111      	movs	r1, #17
    eefc:	6838      	ldr	r0, [r7, #0]
    eefe:	f7f3 ff89 	bl	2e14 <bb_setUInt8>
    ef02:	60f8      	str	r0, [r7, #12]
    ef04:	68fb      	ldr	r3, [r7, #12]
    ef06:	2b00      	cmp	r3, #0
    ef08:	d11b      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        //PeakThroughput
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->peakThroughput)) != 0 ||
    ef0a:	687b      	ldr	r3, [r7, #4]
    ef0c:	78db      	ldrb	r3, [r3, #3]
        (ret = bb_setUInt8(ba, service->delay)) != 0 ||
        //Reliability
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->reliability)) != 0 ||
        //PeakThroughput
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    ef0e:	4619      	mov	r1, r3
    ef10:	6838      	ldr	r0, [r7, #0]
    ef12:	f7f3 ff7f 	bl	2e14 <bb_setUInt8>
    ef16:	60f8      	str	r0, [r7, #12]
    ef18:	68fb      	ldr	r3, [r7, #12]
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	d111      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        (ret = bb_setUInt8(ba, service->peakThroughput)) != 0 ||
    ef1e:	2111      	movs	r1, #17
    ef20:	6838      	ldr	r0, [r7, #0]
    ef22:	f7f3 ff77 	bl	2e14 <bb_setUInt8>
    ef26:	60f8      	str	r0, [r7, #12]
    ef28:	68fb      	ldr	r3, [r7, #12]
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d109      	bne.n	ef42 <cosem_getQualityOfService+0xce>
        //MeanThroughput
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->meanThroughput)) != 0)
    ef2e:	687b      	ldr	r3, [r7, #4]
    ef30:	791b      	ldrb	r3, [r3, #4]
        (ret = bb_setUInt8(ba, service->reliability)) != 0 ||
        //PeakThroughput
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
        (ret = bb_setUInt8(ba, service->peakThroughput)) != 0 ||
        //MeanThroughput
        (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT8)) != 0 ||
    ef32:	4619      	mov	r1, r3
    ef34:	6838      	ldr	r0, [r7, #0]
    ef36:	f7f3 ff6d 	bl	2e14 <bb_setUInt8>
    ef3a:	60f8      	str	r0, [r7, #12]
    ef3c:	68fb      	ldr	r3, [r7, #12]
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d001      	beq.n	ef46 <cosem_getQualityOfService+0xd2>
        (ret = bb_setUInt8(ba, service->meanThroughput)) != 0)
    {
        return ret;
    ef42:	68fb      	ldr	r3, [r7, #12]
    ef44:	e000      	b.n	ef48 <cosem_getQualityOfService+0xd4>
    }
    return 0;
    ef46:	2300      	movs	r3, #0
}
    ef48:	4618      	mov	r0, r3
    ef4a:	3710      	adds	r7, #16
    ef4c:	46bd      	mov	sp, r7
    ef4e:	bd80      	pop	{r7, pc}

0000ef50 <cosem_getGprsSetup>:

int cosem_getGprsSetup(
    gxValueEventArg *e)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b086      	sub	sp, #24
    ef54:	af00      	add	r7, sp, #0
    ef56:	6078      	str	r0, [r7, #4]
    int ret;
    gxGPRSSetup* object = (gxGPRSSetup*)e->target;
    ef58:	687b      	ldr	r3, [r7, #4]
    ef5a:	695b      	ldr	r3, [r3, #20]
    ef5c:	613b      	str	r3, [r7, #16]
    if (e->index == 2)
    ef5e:	687b      	ldr	r3, [r7, #4]
    ef60:	7e1b      	ldrb	r3, [r3, #24]
    ef62:	2b02      	cmp	r3, #2
    ef64:	d112      	bne.n	ef8c <cosem_getGprsSetup+0x3c>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    ef66:	687b      	ldr	r3, [r7, #4]
    ef68:	4618      	mov	r0, r3
    ef6a:	f7fd fd1b 	bl	c9a4 <cosem_getByteBuffer>
    ef6e:	6178      	str	r0, [r7, #20]
    ef70:	697b      	ldr	r3, [r7, #20]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d001      	beq.n	ef7a <cosem_getGprsSetup+0x2a>
        {
            return ret;
    ef76:	697b      	ldr	r3, [r7, #20]
    ef78:	e064      	b.n	f044 <cosem_getGprsSetup+0xf4>
        }
        ret = var_addOctetString(&e->value, &object->apn);
    ef7a:	687a      	ldr	r2, [r7, #4]
    ef7c:	693b      	ldr	r3, [r7, #16]
    ef7e:	3310      	adds	r3, #16
    ef80:	4619      	mov	r1, r3
    ef82:	4610      	mov	r0, r2
    ef84:	f017 f8b4 	bl	260f0 <var_addOctetString>
    ef88:	6178      	str	r0, [r7, #20]
    ef8a:	e05a      	b.n	f042 <cosem_getGprsSetup+0xf2>
    }
    else if (e->index == 3)
    ef8c:	687b      	ldr	r3, [r7, #4]
    ef8e:	7e1b      	ldrb	r3, [r3, #24]
    ef90:	2b03      	cmp	r3, #3
    ef92:	d108      	bne.n	efa6 <cosem_getGprsSetup+0x56>
    {
        ret = var_setUInt16(&e->value, object->pinCode);
    ef94:	687a      	ldr	r2, [r7, #4]
    ef96:	693b      	ldr	r3, [r7, #16]
    ef98:	8b9b      	ldrh	r3, [r3, #28]
    ef9a:	4619      	mov	r1, r3
    ef9c:	4610      	mov	r0, r2
    ef9e:	f016 ffcf 	bl	25f40 <var_setUInt16>
    efa2:	6178      	str	r0, [r7, #20]
    efa4:	e04d      	b.n	f042 <cosem_getGprsSetup+0xf2>
    }
    else if (e->index == 4)
    efa6:	687b      	ldr	r3, [r7, #4]
    efa8:	7e1b      	ldrb	r3, [r3, #24]
    efaa:	2b04      	cmp	r3, #4
    efac:	d146      	bne.n	f03c <cosem_getGprsSetup+0xec>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	4618      	mov	r0, r3
    efb2:	f7fd fcf7 	bl	c9a4 <cosem_getByteBuffer>
    efb6:	6178      	str	r0, [r7, #20]
    efb8:	697b      	ldr	r3, [r7, #20]
    efba:	2b00      	cmp	r3, #0
    efbc:	d001      	beq.n	efc2 <cosem_getGprsSetup+0x72>
        {
            return ret;
    efbe:	697b      	ldr	r3, [r7, #20]
    efc0:	e040      	b.n	f044 <cosem_getGprsSetup+0xf4>
        }
        gxByteBuffer *data = e->value.byteArr;
    efc2:	687b      	ldr	r3, [r7, #4]
    efc4:	689b      	ldr	r3, [r3, #8]
    efc6:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
    efc8:	687b      	ldr	r3, [r7, #4]
    efca:	2201      	movs	r2, #1
    efcc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    efd0:	2102      	movs	r1, #2
    efd2:	68f8      	ldr	r0, [r7, #12]
    efd4:	f7f3 ff1e 	bl	2e14 <bb_setUInt8>
    efd8:	6178      	str	r0, [r7, #20]
    efda:	697b      	ldr	r3, [r7, #20]
    efdc:	2b00      	cmp	r3, #0
    efde:	d12b      	bne.n	f038 <cosem_getGprsSetup+0xe8>
    efe0:	2102      	movs	r1, #2
    efe2:	68f8      	ldr	r0, [r7, #12]
    efe4:	f7f3 ff16 	bl	2e14 <bb_setUInt8>
    efe8:	6178      	str	r0, [r7, #20]
    efea:	697b      	ldr	r3, [r7, #20]
    efec:	2b00      	cmp	r3, #0
    efee:	d123      	bne.n	f038 <cosem_getGprsSetup+0xe8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    eff0:	2102      	movs	r1, #2
    eff2:	68f8      	ldr	r0, [r7, #12]
    eff4:	f7f3 ff0e 	bl	2e14 <bb_setUInt8>
    eff8:	6178      	str	r0, [r7, #20]
    effa:	697b      	ldr	r3, [r7, #20]
    effc:	2b00      	cmp	r3, #0
    effe:	d11b      	bne.n	f038 <cosem_getGprsSetup+0xe8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
    f000:	693b      	ldr	r3, [r7, #16]
    f002:	331e      	adds	r3, #30
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f004:	68f9      	ldr	r1, [r7, #12]
    f006:	4618      	mov	r0, r3
    f008:	f7ff ff34 	bl	ee74 <cosem_getQualityOfService>
    f00c:	6178      	str	r0, [r7, #20]
    f00e:	697b      	ldr	r3, [r7, #20]
    f010:	2b00      	cmp	r3, #0
    f012:	d111      	bne.n	f038 <cosem_getGprsSetup+0xe8>
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
    f014:	2102      	movs	r1, #2
    f016:	68f8      	ldr	r0, [r7, #12]
    f018:	f7f3 fefc 	bl	2e14 <bb_setUInt8>
    f01c:	6178      	str	r0, [r7, #20]
    f01e:	697b      	ldr	r3, [r7, #20]
    f020:	2b00      	cmp	r3, #0
    f022:	d109      	bne.n	f038 <cosem_getGprsSetup+0xe8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
    f024:	693b      	ldr	r3, [r7, #16]
    f026:	3323      	adds	r3, #35	; 0x23
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f028:	68f9      	ldr	r1, [r7, #12]
    f02a:	4618      	mov	r0, r3
    f02c:	f7ff ff22 	bl	ee74 <cosem_getQualityOfService>
    f030:	6178      	str	r0, [r7, #20]
    f032:	697b      	ldr	r3, [r7, #20]
    f034:	2b00      	cmp	r3, #0
    f036:	d004      	beq.n	f042 <cosem_getGprsSetup+0xf2>
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
        {
            return ret;
    f038:	697b      	ldr	r3, [r7, #20]
    f03a:	e003      	b.n	f044 <cosem_getGprsSetup+0xf4>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    f03c:	f44f 7381 	mov.w	r3, #258	; 0x102
    f040:	617b      	str	r3, [r7, #20]
    }
    return ret;
    f042:	697b      	ldr	r3, [r7, #20]
}
    f044:	4618      	mov	r0, r3
    f046:	3718      	adds	r7, #24
    f048:	46bd      	mov	sp, r7
    f04a:	bd80      	pop	{r7, pc}

0000f04c <cosem_getSecuritySetup>:
#endif //DLMS_IGNORE_GPRS_SETUP
#ifndef DLMS_IGNORE_SECURITY_SETUP
int cosem_getSecuritySetup(
    gxValueEventArg *e)
{
    f04c:	b580      	push	{r7, lr}
    f04e:	b088      	sub	sp, #32
    f050:	af00      	add	r7, sp, #0
    f052:	6078      	str	r0, [r7, #4]
    int ret;
    gxSecuritySetup* object = (gxSecuritySetup*)e->target;
    f054:	687b      	ldr	r3, [r7, #4]
    f056:	695b      	ldr	r3, [r3, #20]
    f058:	617b      	str	r3, [r7, #20]
    if (e->index == 2)
    f05a:	687b      	ldr	r3, [r7, #4]
    f05c:	7e1b      	ldrb	r3, [r3, #24]
    f05e:	2b02      	cmp	r3, #2
    f060:	d108      	bne.n	f074 <cosem_getSecuritySetup+0x28>
    {
        ret = var_setEnum(&e->value, object->securityPolicy);
    f062:	687a      	ldr	r2, [r7, #4]
    f064:	697b      	ldr	r3, [r7, #20]
    f066:	7c1b      	ldrb	r3, [r3, #16]
    f068:	4619      	mov	r1, r3
    f06a:	4610      	mov	r0, r2
    f06c:	f016 ff40 	bl	25ef0 <var_setEnum>
    f070:	61f8      	str	r0, [r7, #28]
    f072:	e13e      	b.n	f2f2 <cosem_getSecuritySetup+0x2a6>
    }
    else if (e->index == 3)
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	7e1b      	ldrb	r3, [r3, #24]
    f078:	2b03      	cmp	r3, #3
    f07a:	d108      	bne.n	f08e <cosem_getSecuritySetup+0x42>
    {
        ret = var_setEnum(&e->value, object->securitySuite);
    f07c:	687a      	ldr	r2, [r7, #4]
    f07e:	697b      	ldr	r3, [r7, #20]
    f080:	7c5b      	ldrb	r3, [r3, #17]
    f082:	4619      	mov	r1, r3
    f084:	4610      	mov	r0, r2
    f086:	f016 ff33 	bl	25ef0 <var_setEnum>
    f08a:	61f8      	str	r0, [r7, #28]
    f08c:	e131      	b.n	f2f2 <cosem_getSecuritySetup+0x2a6>
    }
    else if (e->index == 4)
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	7e1b      	ldrb	r3, [r3, #24]
    f092:	2b04      	cmp	r3, #4
    f094:	d108      	bne.n	f0a8 <cosem_getSecuritySetup+0x5c>
    {
        ret = var_addOctetString(&e->value, &object->clientSystemTitle);
    f096:	687a      	ldr	r2, [r7, #4]
    f098:	697b      	ldr	r3, [r7, #20]
    f09a:	3320      	adds	r3, #32
    f09c:	4619      	mov	r1, r3
    f09e:	4610      	mov	r0, r2
    f0a0:	f017 f826 	bl	260f0 <var_addOctetString>
    f0a4:	61f8      	str	r0, [r7, #28]
    f0a6:	e124      	b.n	f2f2 <cosem_getSecuritySetup+0x2a6>
    }
    else if (e->index == 5)
    f0a8:	687b      	ldr	r3, [r7, #4]
    f0aa:	7e1b      	ldrb	r3, [r3, #24]
    f0ac:	2b05      	cmp	r3, #5
    f0ae:	d108      	bne.n	f0c2 <cosem_getSecuritySetup+0x76>
    {
        ret = var_addOctetString(&e->value, &object->serverSystemTitle);
    f0b0:	687a      	ldr	r2, [r7, #4]
    f0b2:	697b      	ldr	r3, [r7, #20]
    f0b4:	3314      	adds	r3, #20
    f0b6:	4619      	mov	r1, r3
    f0b8:	4610      	mov	r0, r2
    f0ba:	f017 f819 	bl	260f0 <var_addOctetString>
    f0be:	61f8      	str	r0, [r7, #28]
    f0c0:	e117      	b.n	f2f2 <cosem_getSecuritySetup+0x2a6>
    }
    else if (e->index == 6)
    f0c2:	687b      	ldr	r3, [r7, #4]
    f0c4:	7e1b      	ldrb	r3, [r3, #24]
    f0c6:	2b06      	cmp	r3, #6
    f0c8:	f040 8110 	bne.w	f2ec <cosem_getSecuritySetup+0x2a0>
    {
        gxCertificateInfo* it;
        int pos, len;
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    f0cc:	687b      	ldr	r3, [r7, #4]
    f0ce:	4618      	mov	r0, r3
    f0d0:	f7fd fc68 	bl	c9a4 <cosem_getByteBuffer>
    f0d4:	61f8      	str	r0, [r7, #28]
    f0d6:	69fb      	ldr	r3, [r7, #28]
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d001      	beq.n	f0e0 <cosem_getSecuritySetup+0x94>
        {
            return ret;
    f0dc:	69fb      	ldr	r3, [r7, #28]
    f0de:	e109      	b.n	f2f4 <cosem_getSecuritySetup+0x2a8>
        }
        gxByteBuffer *data = e->value.byteArr;
    f0e0:	687b      	ldr	r3, [r7, #4]
    f0e2:	689b      	ldr	r3, [r3, #8]
    f0e4:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
    f0e6:	687b      	ldr	r3, [r7, #4]
    f0e8:	2201      	movs	r2, #1
    f0ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f0ee:	2101      	movs	r1, #1
    f0f0:	6938      	ldr	r0, [r7, #16]
    f0f2:	f7f3 fe8f 	bl	2e14 <bb_setUInt8>
    f0f6:	61f8      	str	r0, [r7, #28]
    f0f8:	69fb      	ldr	r3, [r7, #28]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d109      	bne.n	f112 <cosem_getSecuritySetup+0xc6>
            (ret = hlp_setObjectCount(object->certificates.size, data)) != 0)
    f0fe:	697b      	ldr	r3, [r7, #20]
    f100:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f102:	6939      	ldr	r1, [r7, #16]
    f104:	4618      	mov	r0, r3
    f106:	f012 fbe9 	bl	218dc <hlp_setObjectCount>
    f10a:	61f8      	str	r0, [r7, #28]
    f10c:	69fb      	ldr	r3, [r7, #28]
    f10e:	2b00      	cmp	r3, #0
    f110:	d001      	beq.n	f116 <cosem_getSecuritySetup+0xca>
            (ret = hlp_setObjectCount(object->certificates.size, data)) != 0)
        {
            return ret;
    f112:	69fb      	ldr	r3, [r7, #28]
    f114:	e0ee      	b.n	f2f4 <cosem_getSecuritySetup+0x2a8>
        }
        for (pos = 0; pos != object->certificates.size; ++pos)
    f116:	2300      	movs	r3, #0
    f118:	61bb      	str	r3, [r7, #24]
    f11a:	e0df      	b.n	f2dc <cosem_getSecuritySetup+0x290>
        {
            if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
    f11c:	697b      	ldr	r3, [r7, #20]
    f11e:	332c      	adds	r3, #44	; 0x2c
    f120:	f107 0208 	add.w	r2, r7, #8
    f124:	69b9      	ldr	r1, [r7, #24]
    f126:	4618      	mov	r0, r3
    f128:	f7fd fb68 	bl	c7fc <arr_getByIndex>
    f12c:	61f8      	str	r0, [r7, #28]
    f12e:	69fb      	ldr	r3, [r7, #28]
    f130:	2b00      	cmp	r3, #0
    f132:	f040 80de 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
    f136:	2102      	movs	r1, #2
    f138:	6938      	ldr	r0, [r7, #16]
    f13a:	f7f3 fe6b 	bl	2e14 <bb_setUInt8>
    f13e:	61f8      	str	r0, [r7, #28]
    f140:	69fb      	ldr	r3, [r7, #28]
    f142:	2b00      	cmp	r3, #0
    f144:	f040 80d5 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f148:	6939      	ldr	r1, [r7, #16]
    f14a:	2006      	movs	r0, #6
    f14c:	f012 fbc6 	bl	218dc <hlp_setObjectCount>
    f150:	61f8      	str	r0, [r7, #28]
    f152:	69fb      	ldr	r3, [r7, #28]
    f154:	2b00      	cmp	r3, #0
    f156:	f040 80cc 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = hlp_setObjectCount(6, data)) != 0 ||
    f15a:	2116      	movs	r1, #22
    f15c:	6938      	ldr	r0, [r7, #16]
    f15e:	f7f3 fe59 	bl	2e14 <bb_setUInt8>
    f162:	61f8      	str	r0, [r7, #28]
    f164:	69fb      	ldr	r3, [r7, #28]
    f166:	2b00      	cmp	r3, #0
    f168:	f040 80c3 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
                (ret = bb_setUInt8(data, it->entity)) != 0 ||
    f16c:	68bb      	ldr	r3, [r7, #8]
    f16e:	781b      	ldrb	r3, [r3, #0]
        for (pos = 0; pos != object->certificates.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    f170:	4619      	mov	r1, r3
    f172:	6938      	ldr	r0, [r7, #16]
    f174:	f7f3 fe4e 	bl	2e14 <bb_setUInt8>
    f178:	61f8      	str	r0, [r7, #28]
    f17a:	69fb      	ldr	r3, [r7, #28]
    f17c:	2b00      	cmp	r3, #0
    f17e:	f040 80b8 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, it->entity)) != 0 ||
    f182:	2116      	movs	r1, #22
    f184:	6938      	ldr	r0, [r7, #16]
    f186:	f7f3 fe45 	bl	2e14 <bb_setUInt8>
    f18a:	61f8      	str	r0, [r7, #28]
    f18c:	69fb      	ldr	r3, [r7, #28]
    f18e:	2b00      	cmp	r3, #0
    f190:	f040 80af 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
                (ret = bb_setUInt8(data, it->type)) != 0)
    f194:	68bb      	ldr	r3, [r7, #8]
    f196:	785b      	ldrb	r3, [r3, #1]
            if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
                (ret = bb_setUInt8(data, it->entity)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
    f198:	4619      	mov	r1, r3
    f19a:	6938      	ldr	r0, [r7, #16]
    f19c:	f7f3 fe3a 	bl	2e14 <bb_setUInt8>
    f1a0:	61f8      	str	r0, [r7, #28]
    f1a2:	69fb      	ldr	r3, [r7, #28]
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	f040 80a4 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, it->type)) != 0)
            {
                break;
            }
            len = (int)strlen(it->serialNumber);
    f1aa:	68bb      	ldr	r3, [r7, #8]
    f1ac:	685b      	ldr	r3, [r3, #4]
    f1ae:	4618      	mov	r0, r3
    f1b0:	f7f0 ffb6 	bl	120 <strlen>
    f1b4:	4603      	mov	r3, r0
    f1b6:	60fb      	str	r3, [r7, #12]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f1b8:	2109      	movs	r1, #9
    f1ba:	6938      	ldr	r0, [r7, #16]
    f1bc:	f7f3 fe2a 	bl	2e14 <bb_setUInt8>
    f1c0:	61f8      	str	r0, [r7, #28]
    f1c2:	69fb      	ldr	r3, [r7, #28]
    f1c4:	2b00      	cmp	r3, #0
    f1c6:	f040 8094 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
    f1ca:	68fb      	ldr	r3, [r7, #12]
    f1cc:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, it->type)) != 0)
            {
                break;
            }
            len = (int)strlen(it->serialNumber);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f1ce:	4619      	mov	r1, r3
    f1d0:	6938      	ldr	r0, [r7, #16]
    f1d2:	f7f3 fe1f 	bl	2e14 <bb_setUInt8>
    f1d6:	61f8      	str	r0, [r7, #28]
    f1d8:	69fb      	ldr	r3, [r7, #28]
    f1da:	2b00      	cmp	r3, #0
    f1dc:	f040 8089 	bne.w	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
                (ret = bb_set(data, (unsigned char*)it->serialNumber, len)) != 0)
    f1e0:	68bb      	ldr	r3, [r7, #8]
    f1e2:	685b      	ldr	r3, [r3, #4]
    f1e4:	68fa      	ldr	r2, [r7, #12]
    f1e6:	b292      	uxth	r2, r2
            {
                break;
            }
            len = (int)strlen(it->serialNumber);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, len)) != 0 ||
    f1e8:	4619      	mov	r1, r3
    f1ea:	6938      	ldr	r0, [r7, #16]
    f1ec:	f7f4 f9b8 	bl	3560 <bb_set>
    f1f0:	61f8      	str	r0, [r7, #28]
    f1f2:	69fb      	ldr	r3, [r7, #28]
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d17c      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_set(data, (unsigned char*)it->serialNumber, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->issuer);
    f1f8:	68bb      	ldr	r3, [r7, #8]
    f1fa:	689b      	ldr	r3, [r3, #8]
    f1fc:	4618      	mov	r0, r3
    f1fe:	f7f0 ff8f 	bl	120 <strlen>
    f202:	4603      	mov	r3, r0
    f204:	60fb      	str	r3, [r7, #12]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f206:	2109      	movs	r1, #9
    f208:	6938      	ldr	r0, [r7, #16]
    f20a:	f7f3 fe03 	bl	2e14 <bb_setUInt8>
    f20e:	61f8      	str	r0, [r7, #28]
    f210:	69fb      	ldr	r3, [r7, #28]
    f212:	2b00      	cmp	r3, #0
    f214:	d16d      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
    f216:	68fb      	ldr	r3, [r7, #12]
    f218:	b2db      	uxtb	r3, r3
                (ret = bb_set(data, (unsigned char*)it->serialNumber, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->issuer);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f21a:	4619      	mov	r1, r3
    f21c:	6938      	ldr	r0, [r7, #16]
    f21e:	f7f3 fdf9 	bl	2e14 <bb_setUInt8>
    f222:	61f8      	str	r0, [r7, #28]
    f224:	69fb      	ldr	r3, [r7, #28]
    f226:	2b00      	cmp	r3, #0
    f228:	d163      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
                (ret = bb_set(data, (unsigned char*)it->issuer, len)) != 0)
    f22a:	68bb      	ldr	r3, [r7, #8]
    f22c:	689b      	ldr	r3, [r3, #8]
    f22e:	68fa      	ldr	r2, [r7, #12]
    f230:	b292      	uxth	r2, r2
            {
                break;
            }
            len = (int)strlen(it->issuer);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, len)) != 0 ||
    f232:	4619      	mov	r1, r3
    f234:	6938      	ldr	r0, [r7, #16]
    f236:	f7f4 f993 	bl	3560 <bb_set>
    f23a:	61f8      	str	r0, [r7, #28]
    f23c:	69fb      	ldr	r3, [r7, #28]
    f23e:	2b00      	cmp	r3, #0
    f240:	d157      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_set(data, (unsigned char*)it->issuer, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->subject);
    f242:	68bb      	ldr	r3, [r7, #8]
    f244:	68db      	ldr	r3, [r3, #12]
    f246:	4618      	mov	r0, r3
    f248:	f7f0 ff6a 	bl	120 <strlen>
    f24c:	4603      	mov	r3, r0
    f24e:	60fb      	str	r3, [r7, #12]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f250:	2109      	movs	r1, #9
    f252:	6938      	ldr	r0, [r7, #16]
    f254:	f7f3 fdde 	bl	2e14 <bb_setUInt8>
    f258:	61f8      	str	r0, [r7, #28]
    f25a:	69fb      	ldr	r3, [r7, #28]
    f25c:	2b00      	cmp	r3, #0
    f25e:	d148      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
    f260:	68fb      	ldr	r3, [r7, #12]
    f262:	b2db      	uxtb	r3, r3
                (ret = bb_set(data, (unsigned char*)it->issuer, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->subject);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f264:	4619      	mov	r1, r3
    f266:	6938      	ldr	r0, [r7, #16]
    f268:	f7f3 fdd4 	bl	2e14 <bb_setUInt8>
    f26c:	61f8      	str	r0, [r7, #28]
    f26e:	69fb      	ldr	r3, [r7, #28]
    f270:	2b00      	cmp	r3, #0
    f272:	d13e      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
                (ret = bb_set(data, (unsigned char*)it->subject, len)) != 0)
    f274:	68bb      	ldr	r3, [r7, #8]
    f276:	68db      	ldr	r3, [r3, #12]
    f278:	68fa      	ldr	r2, [r7, #12]
    f27a:	b292      	uxth	r2, r2
            {
                break;
            }
            len = (int)strlen(it->subject);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, len)) != 0 ||
    f27c:	4619      	mov	r1, r3
    f27e:	6938      	ldr	r0, [r7, #16]
    f280:	f7f4 f96e 	bl	3560 <bb_set>
    f284:	61f8      	str	r0, [r7, #28]
    f286:	69fb      	ldr	r3, [r7, #28]
    f288:	2b00      	cmp	r3, #0
    f28a:	d132      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_set(data, (unsigned char*)it->subject, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->subjectAltName);
    f28c:	68bb      	ldr	r3, [r7, #8]
    f28e:	691b      	ldr	r3, [r3, #16]
    f290:	4618      	mov	r0, r3
    f292:	f7f0 ff45 	bl	120 <strlen>
    f296:	4603      	mov	r3, r0
    f298:	60fb      	str	r3, [r7, #12]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f29a:	2109      	movs	r1, #9
    f29c:	6938      	ldr	r0, [r7, #16]
    f29e:	f7f3 fdb9 	bl	2e14 <bb_setUInt8>
    f2a2:	61f8      	str	r0, [r7, #28]
    f2a4:	69fb      	ldr	r3, [r7, #28]
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d123      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
    f2aa:	68fb      	ldr	r3, [r7, #12]
    f2ac:	b2db      	uxtb	r3, r3
                (ret = bb_set(data, (unsigned char*)it->subject, len)) != 0)
            {
                break;
            }
            len = (int)strlen(it->subjectAltName);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f2ae:	4619      	mov	r1, r3
    f2b0:	6938      	ldr	r0, [r7, #16]
    f2b2:	f7f3 fdaf 	bl	2e14 <bb_setUInt8>
    f2b6:	61f8      	str	r0, [r7, #28]
    f2b8:	69fb      	ldr	r3, [r7, #28]
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	d119      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
                (ret = bb_setUInt8(data, len)) != 0 ||
                (ret = bb_set(data, (unsigned char*)it->subjectAltName, len)) != 0)
    f2be:	68bb      	ldr	r3, [r7, #8]
    f2c0:	691b      	ldr	r3, [r3, #16]
    f2c2:	68fa      	ldr	r2, [r7, #12]
    f2c4:	b292      	uxth	r2, r2
            {
                break;
            }
            len = (int)strlen(it->subjectAltName);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, len)) != 0 ||
    f2c6:	4619      	mov	r1, r3
    f2c8:	6938      	ldr	r0, [r7, #16]
    f2ca:	f7f4 f949 	bl	3560 <bb_set>
    f2ce:	61f8      	str	r0, [r7, #28]
    f2d0:	69fb      	ldr	r3, [r7, #28]
    f2d2:	2b00      	cmp	r3, #0
    f2d4:	d10d      	bne.n	f2f2 <cosem_getSecuritySetup+0x2a6>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->certificates.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->certificates.size; ++pos)
    f2d6:	69bb      	ldr	r3, [r7, #24]
    f2d8:	3301      	adds	r3, #1
    f2da:	61bb      	str	r3, [r7, #24]
    f2dc:	697b      	ldr	r3, [r7, #20]
    f2de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f2e0:	461a      	mov	r2, r3
    f2e2:	69bb      	ldr	r3, [r7, #24]
    f2e4:	429a      	cmp	r2, r3
    f2e6:	f47f af19 	bne.w	f11c <cosem_getSecuritySetup+0xd0>
    f2ea:	e002      	b.n	f2f2 <cosem_getSecuritySetup+0x2a6>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    f2ec:	f44f 7381 	mov.w	r3, #258	; 0x102
    f2f0:	61fb      	str	r3, [r7, #28]
    }
    return ret;
    f2f2:	69fb      	ldr	r3, [r7, #28]
}
    f2f4:	4618      	mov	r0, r3
    f2f6:	3720      	adds	r7, #32
    f2f8:	46bd      	mov	sp, r7
    f2fa:	bd80      	pop	{r7, pc}

0000f2fc <cosem_getIecHdlcSetup>:

#endif //DLMS_IGNORE_SECURITY_SETUP
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
int cosem_getIecHdlcSetup(
    gxValueEventArg *e)
{
    f2fc:	b580      	push	{r7, lr}
    f2fe:	b084      	sub	sp, #16
    f300:	af00      	add	r7, sp, #0
    f302:	6078      	str	r0, [r7, #4]
    int ret;
    gxIecHdlcSetup* object = (gxIecHdlcSetup*)e->target;
    f304:	687b      	ldr	r3, [r7, #4]
    f306:	695b      	ldr	r3, [r3, #20]
    f308:	60bb      	str	r3, [r7, #8]
    switch (e->index)
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	7e1b      	ldrb	r3, [r3, #24]
    f30e:	3b02      	subs	r3, #2
    f310:	2b07      	cmp	r3, #7
    f312:	d85b      	bhi.n	f3cc <cosem_getIecHdlcSetup+0xd0>
    f314:	a201      	add	r2, pc, #4	; (adr r2, f31c <cosem_getIecHdlcSetup+0x20>)
    f316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f31a:	bf00      	nop
    f31c:	0000f33d 	.word	0x0000f33d
    f320:	0000f34f 	.word	0x0000f34f
    f324:	0000f361 	.word	0x0000f361
    f328:	0000f373 	.word	0x0000f373
    f32c:	0000f385 	.word	0x0000f385
    f330:	0000f397 	.word	0x0000f397
    f334:	0000f3a9 	.word	0x0000f3a9
    f338:	0000f3bb 	.word	0x0000f3bb
    {
    case 2:
        ret = var_setEnum(&e->value, object->communicationSpeed);
    f33c:	687a      	ldr	r2, [r7, #4]
    f33e:	68bb      	ldr	r3, [r7, #8]
    f340:	7d9b      	ldrb	r3, [r3, #22]
    f342:	4619      	mov	r1, r3
    f344:	4610      	mov	r0, r2
    f346:	f016 fdd3 	bl	25ef0 <var_setEnum>
    f34a:	60f8      	str	r0, [r7, #12]
        break;
    f34c:	e042      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 3:
        ret = var_setUInt8(&e->value, object->windowSizeTransmit);
    f34e:	687a      	ldr	r2, [r7, #4]
    f350:	68bb      	ldr	r3, [r7, #8]
    f352:	7ddb      	ldrb	r3, [r3, #23]
    f354:	4619      	mov	r1, r3
    f356:	4610      	mov	r0, r2
    f358:	f016 fdde 	bl	25f18 <var_setUInt8>
    f35c:	60f8      	str	r0, [r7, #12]
        break;
    f35e:	e039      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 4:
        ret = var_setUInt8(&e->value, object->windowSizeReceive);
    f360:	687a      	ldr	r2, [r7, #4]
    f362:	68bb      	ldr	r3, [r7, #8]
    f364:	7e1b      	ldrb	r3, [r3, #24]
    f366:	4619      	mov	r1, r3
    f368:	4610      	mov	r0, r2
    f36a:	f016 fdd5 	bl	25f18 <var_setUInt8>
    f36e:	60f8      	str	r0, [r7, #12]
        break;
    f370:	e030      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 5:
        ret = var_setUInt16(&e->value, object->maximumInfoLengthTransmit);
    f372:	687a      	ldr	r2, [r7, #4]
    f374:	68bb      	ldr	r3, [r7, #8]
    f376:	8a9b      	ldrh	r3, [r3, #20]
    f378:	4619      	mov	r1, r3
    f37a:	4610      	mov	r0, r2
    f37c:	f016 fde0 	bl	25f40 <var_setUInt16>
    f380:	60f8      	str	r0, [r7, #12]
        break;
    f382:	e027      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 6:
        ret = var_setUInt16(&e->value, object->maximumInfoLengthReceive);
    f384:	687a      	ldr	r2, [r7, #4]
    f386:	68bb      	ldr	r3, [r7, #8]
    f388:	8b9b      	ldrh	r3, [r3, #28]
    f38a:	4619      	mov	r1, r3
    f38c:	4610      	mov	r0, r2
    f38e:	f016 fdd7 	bl	25f40 <var_setUInt16>
    f392:	60f8      	str	r0, [r7, #12]
        break;
    f394:	e01e      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 7:
        ret = var_setUInt16(&e->value, object->interCharachterTimeout);
    f396:	687a      	ldr	r2, [r7, #4]
    f398:	68bb      	ldr	r3, [r7, #8]
    f39a:	8b5b      	ldrh	r3, [r3, #26]
    f39c:	4619      	mov	r1, r3
    f39e:	4610      	mov	r0, r2
    f3a0:	f016 fdce 	bl	25f40 <var_setUInt16>
    f3a4:	60f8      	str	r0, [r7, #12]
        break;
    f3a6:	e015      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 8:
        ret = var_setUInt16(&e->value, object->inactivityTimeout);
    f3a8:	687a      	ldr	r2, [r7, #4]
    f3aa:	68bb      	ldr	r3, [r7, #8]
    f3ac:	8a1b      	ldrh	r3, [r3, #16]
    f3ae:	4619      	mov	r1, r3
    f3b0:	4610      	mov	r0, r2
    f3b2:	f016 fdc5 	bl	25f40 <var_setUInt16>
    f3b6:	60f8      	str	r0, [r7, #12]
        break;
    f3b8:	e00c      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    case 9:
        ret = var_setUInt16(&e->value, object->deviceAddress);
    f3ba:	687a      	ldr	r2, [r7, #4]
    f3bc:	68bb      	ldr	r3, [r7, #8]
    f3be:	8a5b      	ldrh	r3, [r3, #18]
    f3c0:	4619      	mov	r1, r3
    f3c2:	4610      	mov	r0, r2
    f3c4:	f016 fdbc 	bl	25f40 <var_setUInt16>
    f3c8:	60f8      	str	r0, [r7, #12]
        break;
    f3ca:	e003      	b.n	f3d4 <cosem_getIecHdlcSetup+0xd8>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    f3cc:	f44f 7381 	mov.w	r3, #258	; 0x102
    f3d0:	60fb      	str	r3, [r7, #12]
        break;
    f3d2:	bf00      	nop
    }
    return ret;
    f3d4:	68fb      	ldr	r3, [r7, #12]
}
    f3d6:	4618      	mov	r0, r3
    f3d8:	3710      	adds	r7, #16
    f3da:	46bd      	mov	sp, r7
    f3dc:	bd80      	pop	{r7, pc}
    f3de:	bf00      	nop

0000f3e0 <cosem_getIecLocalPortSetup>:
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
int cosem_getIecLocalPortSetup(
    gxValueEventArg *e)
{
    f3e0:	b580      	push	{r7, lr}
    f3e2:	b084      	sub	sp, #16
    f3e4:	af00      	add	r7, sp, #0
    f3e6:	6078      	str	r0, [r7, #4]
    int ret;
    gxLocalPortSetup* object = (gxLocalPortSetup*)e->target;
    f3e8:	687b      	ldr	r3, [r7, #4]
    f3ea:	695b      	ldr	r3, [r3, #20]
    f3ec:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
    f3ee:	687b      	ldr	r3, [r7, #4]
    f3f0:	7e1b      	ldrb	r3, [r3, #24]
    f3f2:	2b02      	cmp	r3, #2
    f3f4:	d109      	bne.n	f40a <cosem_getIecLocalPortSetup+0x2a>
    {
        ret = var_setEnum(&e->value, object->defaultMode);
    f3f6:	687a      	ldr	r2, [r7, #4]
    f3f8:	68bb      	ldr	r3, [r7, #8]
    f3fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    f3fe:	4619      	mov	r1, r3
    f400:	4610      	mov	r0, r2
    f402:	f016 fd75 	bl	25ef0 <var_setEnum>
    f406:	60f8      	str	r0, [r7, #12]
    f408:	e060      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 3)
    f40a:	687b      	ldr	r3, [r7, #4]
    f40c:	7e1b      	ldrb	r3, [r3, #24]
    f40e:	2b03      	cmp	r3, #3
    f410:	d109      	bne.n	f426 <cosem_getIecLocalPortSetup+0x46>
    {
        ret = var_setEnum(&e->value, object->defaultBaudrate);
    f412:	687a      	ldr	r2, [r7, #4]
    f414:	68bb      	ldr	r3, [r7, #8]
    f416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    f41a:	4619      	mov	r1, r3
    f41c:	4610      	mov	r0, r2
    f41e:	f016 fd67 	bl	25ef0 <var_setEnum>
    f422:	60f8      	str	r0, [r7, #12]
    f424:	e052      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 4)
    f426:	687b      	ldr	r3, [r7, #4]
    f428:	7e1b      	ldrb	r3, [r3, #24]
    f42a:	2b04      	cmp	r3, #4
    f42c:	d109      	bne.n	f442 <cosem_getIecLocalPortSetup+0x62>
    {
        ret = var_setEnum(&e->value, object->proposedBaudrate);
    f42e:	687a      	ldr	r2, [r7, #4]
    f430:	68bb      	ldr	r3, [r7, #8]
    f432:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    f436:	4619      	mov	r1, r3
    f438:	4610      	mov	r0, r2
    f43a:	f016 fd59 	bl	25ef0 <var_setEnum>
    f43e:	60f8      	str	r0, [r7, #12]
    f440:	e044      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 5)
    f442:	687b      	ldr	r3, [r7, #4]
    f444:	7e1b      	ldrb	r3, [r3, #24]
    f446:	2b05      	cmp	r3, #5
    f448:	d109      	bne.n	f45e <cosem_getIecLocalPortSetup+0x7e>
    {
        ret = var_setEnum(&e->value, object->responseTime);
    f44a:	687a      	ldr	r2, [r7, #4]
    f44c:	68bb      	ldr	r3, [r7, #8]
    f44e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    f452:	4619      	mov	r1, r3
    f454:	4610      	mov	r0, r2
    f456:	f016 fd4b 	bl	25ef0 <var_setEnum>
    f45a:	60f8      	str	r0, [r7, #12]
    f45c:	e036      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 6)
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	7e1b      	ldrb	r3, [r3, #24]
    f462:	2b06      	cmp	r3, #6
    f464:	d108      	bne.n	f478 <cosem_getIecLocalPortSetup+0x98>
    {
        ret = var_addOctetString(&e->value, &object->deviceAddress);
    f466:	687a      	ldr	r2, [r7, #4]
    f468:	68bb      	ldr	r3, [r7, #8]
    f46a:	3338      	adds	r3, #56	; 0x38
    f46c:	4619      	mov	r1, r3
    f46e:	4610      	mov	r0, r2
    f470:	f016 fe3e 	bl	260f0 <var_addOctetString>
    f474:	60f8      	str	r0, [r7, #12]
    f476:	e029      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 7)
    f478:	687b      	ldr	r3, [r7, #4]
    f47a:	7e1b      	ldrb	r3, [r3, #24]
    f47c:	2b07      	cmp	r3, #7
    f47e:	d108      	bne.n	f492 <cosem_getIecLocalPortSetup+0xb2>
    {
        ret = var_addOctetString(&e->value, &object->password1);
    f480:	687a      	ldr	r2, [r7, #4]
    f482:	68bb      	ldr	r3, [r7, #8]
    f484:	3310      	adds	r3, #16
    f486:	4619      	mov	r1, r3
    f488:	4610      	mov	r0, r2
    f48a:	f016 fe31 	bl	260f0 <var_addOctetString>
    f48e:	60f8      	str	r0, [r7, #12]
    f490:	e01c      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 8)
    f492:	687b      	ldr	r3, [r7, #4]
    f494:	7e1b      	ldrb	r3, [r3, #24]
    f496:	2b08      	cmp	r3, #8
    f498:	d108      	bne.n	f4ac <cosem_getIecLocalPortSetup+0xcc>
    {
        ret = var_addOctetString(&e->value, &object->password2);
    f49a:	687a      	ldr	r2, [r7, #4]
    f49c:	68bb      	ldr	r3, [r7, #8]
    f49e:	331c      	adds	r3, #28
    f4a0:	4619      	mov	r1, r3
    f4a2:	4610      	mov	r0, r2
    f4a4:	f016 fe24 	bl	260f0 <var_addOctetString>
    f4a8:	60f8      	str	r0, [r7, #12]
    f4aa:	e00f      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else if (e->index == 9)
    f4ac:	687b      	ldr	r3, [r7, #4]
    f4ae:	7e1b      	ldrb	r3, [r3, #24]
    f4b0:	2b09      	cmp	r3, #9
    f4b2:	d108      	bne.n	f4c6 <cosem_getIecLocalPortSetup+0xe6>
    {
        ret = var_addOctetString(&e->value, &object->password5);
    f4b4:	687a      	ldr	r2, [r7, #4]
    f4b6:	68bb      	ldr	r3, [r7, #8]
    f4b8:	3328      	adds	r3, #40	; 0x28
    f4ba:	4619      	mov	r1, r3
    f4bc:	4610      	mov	r0, r2
    f4be:	f016 fe17 	bl	260f0 <var_addOctetString>
    f4c2:	60f8      	str	r0, [r7, #12]
    f4c4:	e002      	b.n	f4cc <cosem_getIecLocalPortSetup+0xec>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    f4c6:	f44f 7381 	mov.w	r3, #258	; 0x102
    f4ca:	e000      	b.n	f4ce <cosem_getIecLocalPortSetup+0xee>
    }
    return ret;
    f4cc:	68fb      	ldr	r3, [r7, #12]
}
    f4ce:	4618      	mov	r0, r3
    f4d0:	3710      	adds	r7, #16
    f4d2:	46bd      	mov	sp, r7
    f4d4:	bd80      	pop	{r7, pc}
    f4d6:	bf00      	nop

0000f4d8 <cosem_getIP4Setup>:
#endif // DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
int cosem_getIP4Setup(
    gxValueEventArg *e)
{
    f4d8:	b590      	push	{r4, r7, lr}
    f4da:	b08b      	sub	sp, #44	; 0x2c
    f4dc:	af00      	add	r7, sp, #0
    f4de:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
    f4e0:	2300      	movs	r3, #0
    f4e2:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT *tmp;
    gxip4SetupIpOption* it;
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    f4e4:	687b      	ldr	r3, [r7, #4]
    f4e6:	695b      	ldr	r3, [r3, #20]
    f4e8:	61fb      	str	r3, [r7, #28]
    if (e->index == 2)
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	7e1b      	ldrb	r3, [r3, #24]
    f4ee:	2b02      	cmp	r3, #2
    f4f0:	d108      	bne.n	f504 <cosem_getIP4Setup+0x2c>
    {
        ret = var_addOctetString(&e->value, &object->dataLinkLayerReference);
    f4f2:	687a      	ldr	r2, [r7, #4]
    f4f4:	69fb      	ldr	r3, [r7, #28]
    f4f6:	3310      	adds	r3, #16
    f4f8:	4619      	mov	r1, r3
    f4fa:	4610      	mov	r0, r2
    f4fc:	f016 fdf8 	bl	260f0 <var_addOctetString>
    f500:	6278      	str	r0, [r7, #36]	; 0x24
    f502:	e145      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 3)
    f504:	687b      	ldr	r3, [r7, #4]
    f506:	7e1b      	ldrb	r3, [r3, #24]
    f508:	2b03      	cmp	r3, #3
    f50a:	d108      	bne.n	f51e <cosem_getIP4Setup+0x46>
    {
        ret = var_setUInt32(&e->value, object->ipAddress);
    f50c:	687a      	ldr	r2, [r7, #4]
    f50e:	69fb      	ldr	r3, [r7, #28]
    f510:	69db      	ldr	r3, [r3, #28]
    f512:	4619      	mov	r1, r3
    f514:	4610      	mov	r0, r2
    f516:	f016 fd27 	bl	25f68 <var_setUInt32>
    f51a:	6278      	str	r0, [r7, #36]	; 0x24
    f51c:	e138      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 4)
    f51e:	687b      	ldr	r3, [r7, #4]
    f520:	7e1b      	ldrb	r3, [r3, #24]
    f522:	2b04      	cmp	r3, #4
    f524:	d148      	bne.n	f5b8 <cosem_getIP4Setup+0xe0>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	4618      	mov	r0, r3
    f52a:	f7fd fa3b 	bl	c9a4 <cosem_getByteBuffer>
    f52e:	6278      	str	r0, [r7, #36]	; 0x24
    f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f532:	2b00      	cmp	r3, #0
    f534:	d001      	beq.n	f53a <cosem_getIP4Setup+0x62>
        {
            return ret;
    f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f538:	e12b      	b.n	f792 <cosem_getIP4Setup+0x2ba>
        }
        gxByteBuffer *data = e->value.byteArr;
    f53a:	687b      	ldr	r3, [r7, #4]
    f53c:	689b      	ldr	r3, [r3, #8]
    f53e:	61bb      	str	r3, [r7, #24]
        e->byteArray = 1;
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	2201      	movs	r2, #1
    f544:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f548:	2101      	movs	r1, #1
    f54a:	69b8      	ldr	r0, [r7, #24]
    f54c:	f7f3 fc62 	bl	2e14 <bb_setUInt8>
    f550:	6278      	str	r0, [r7, #36]	; 0x24
    f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f554:	2b00      	cmp	r3, #0
    f556:	d109      	bne.n	f56c <cosem_getIP4Setup+0x94>
            (ret = hlp_setObjectCount(object->multicastIPAddress.size, data)) != 0)
    f558:	69fb      	ldr	r3, [r7, #28]
    f55a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f55c:	69b9      	ldr	r1, [r7, #24]
    f55e:	4618      	mov	r0, r3
    f560:	f012 f9bc 	bl	218dc <hlp_setObjectCount>
    f564:	6278      	str	r0, [r7, #36]	; 0x24
    f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f568:	2b00      	cmp	r3, #0
    f56a:	d001      	beq.n	f570 <cosem_getIP4Setup+0x98>
            (ret = hlp_setObjectCount(object->multicastIPAddress.size, data)) != 0)
        {
            return ret;
    f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f56e:	e110      	b.n	f792 <cosem_getIP4Setup+0x2ba>
        }
        for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
    f570:	2300      	movs	r3, #0
    f572:	623b      	str	r3, [r7, #32]
    f574:	e019      	b.n	f5aa <cosem_getIP4Setup+0xd2>
        {
            if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    f576:	69fb      	ldr	r3, [r7, #28]
    f578:	3320      	adds	r3, #32
    f57a:	f107 0210 	add.w	r2, r7, #16
    f57e:	6a39      	ldr	r1, [r7, #32]
    f580:	4618      	mov	r0, r3
    f582:	f017 fc73 	bl	26e6c <va_getByIndex>
    f586:	6278      	str	r0, [r7, #36]	; 0x24
    f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f58a:	2b00      	cmp	r3, #0
    f58c:	f040 8100 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                (ret = var_getBytes(tmp, data)) != 0)
    f590:	693b      	ldr	r3, [r7, #16]
        {
            return ret;
        }
        for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
        {
            if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    f592:	69b9      	ldr	r1, [r7, #24]
    f594:	4618      	mov	r0, r3
    f596:	f017 f831 	bl	265fc <var_getBytes>
    f59a:	6278      	str	r0, [r7, #36]	; 0x24
    f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f59e:	2b00      	cmp	r3, #0
    f5a0:	f040 80f6 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->multicastIPAddress.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
    f5a4:	6a3b      	ldr	r3, [r7, #32]
    f5a6:	3301      	adds	r3, #1
    f5a8:	623b      	str	r3, [r7, #32]
    f5aa:	69fb      	ldr	r3, [r7, #28]
    f5ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    f5ae:	461a      	mov	r2, r3
    f5b0:	6a3b      	ldr	r3, [r7, #32]
    f5b2:	429a      	cmp	r2, r3
    f5b4:	d1df      	bne.n	f576 <cosem_getIP4Setup+0x9e>
    f5b6:	e0eb      	b.n	f790 <cosem_getIP4Setup+0x2b8>
            {
                break;
            }
        }
    }
    else if (e->index == 5)
    f5b8:	687b      	ldr	r3, [r7, #4]
    f5ba:	7e1b      	ldrb	r3, [r3, #24]
    f5bc:	2b05      	cmp	r3, #5
    f5be:	f040 80a2 	bne.w	f706 <cosem_getIP4Setup+0x22e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    f5c2:	687b      	ldr	r3, [r7, #4]
    f5c4:	4618      	mov	r0, r3
    f5c6:	f7fd f9ed 	bl	c9a4 <cosem_getByteBuffer>
    f5ca:	6278      	str	r0, [r7, #36]	; 0x24
    f5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	d001      	beq.n	f5d6 <cosem_getIP4Setup+0xfe>
        {
            return ret;
    f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5d4:	e0dd      	b.n	f792 <cosem_getIP4Setup+0x2ba>
        }
        gxByteBuffer *data = e->value.byteArr;
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	689b      	ldr	r3, [r3, #8]
    f5da:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
    f5dc:	687b      	ldr	r3, [r7, #4]
    f5de:	2201      	movs	r2, #1
    f5e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f5e4:	2101      	movs	r1, #1
    f5e6:	6978      	ldr	r0, [r7, #20]
    f5e8:	f7f3 fc14 	bl	2e14 <bb_setUInt8>
    f5ec:	6278      	str	r0, [r7, #36]	; 0x24
    f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d109      	bne.n	f608 <cosem_getIP4Setup+0x130>
            (ret = hlp_setObjectCount(object->ipOptions.size, data)) != 0)
    f5f4:	69fb      	ldr	r3, [r7, #28]
    f5f6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f5f8:	6979      	ldr	r1, [r7, #20]
    f5fa:	4618      	mov	r0, r3
    f5fc:	f012 f96e 	bl	218dc <hlp_setObjectCount>
    f600:	6278      	str	r0, [r7, #36]	; 0x24
    f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f604:	2b00      	cmp	r3, #0
    f606:	d001      	beq.n	f60c <cosem_getIP4Setup+0x134>
            (ret = hlp_setObjectCount(object->ipOptions.size, data)) != 0)
        {
            return ret;
    f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f60a:	e0c2      	b.n	f792 <cosem_getIP4Setup+0x2ba>
        }
        for (pos = 0; pos != object->ipOptions.size; ++pos)
    f60c:	2300      	movs	r3, #0
    f60e:	623b      	str	r3, [r7, #32]
    f610:	e072      	b.n	f6f8 <cosem_getIP4Setup+0x220>
        {
            if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    f612:	69fb      	ldr	r3, [r7, #28]
    f614:	332c      	adds	r3, #44	; 0x2c
    f616:	f107 020c 	add.w	r2, r7, #12
    f61a:	6a39      	ldr	r1, [r7, #32]
    f61c:	4618      	mov	r0, r3
    f61e:	f7fd f8ed 	bl	c7fc <arr_getByIndex>
    f622:	6278      	str	r0, [r7, #36]	; 0x24
    f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f626:	2b00      	cmp	r3, #0
    f628:	f040 80b2 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
    f62c:	2102      	movs	r1, #2
    f62e:	6978      	ldr	r0, [r7, #20]
    f630:	f7f3 fbf0 	bl	2e14 <bb_setUInt8>
    f634:	6278      	str	r0, [r7, #36]	; 0x24
    f636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f638:	2b00      	cmp	r3, #0
    f63a:	f040 80a9 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f63e:	2103      	movs	r1, #3
    f640:	6978      	ldr	r0, [r7, #20]
    f642:	f7f3 fbe7 	bl	2e14 <bb_setUInt8>
    f646:	6278      	str	r0, [r7, #36]	; 0x24
    f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f64a:	2b00      	cmp	r3, #0
    f64c:	f040 80a0 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                (ret = bb_setUInt8(data, 3)) != 0 ||
    f650:	2111      	movs	r1, #17
    f652:	6978      	ldr	r0, [r7, #20]
    f654:	f7f3 fbde 	bl	2e14 <bb_setUInt8>
    f658:	6278      	str	r0, [r7, #36]	; 0x24
    f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f65c:	2b00      	cmp	r3, #0
    f65e:	f040 8097 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                //Type
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->type)) != 0 ||
    f662:	68fb      	ldr	r3, [r7, #12]
    f664:	781b      	ldrb	r3, [r3, #0]
        {
            if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Type
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    f666:	4619      	mov	r1, r3
    f668:	6978      	ldr	r0, [r7, #20]
    f66a:	f7f3 fbd3 	bl	2e14 <bb_setUInt8>
    f66e:	6278      	str	r0, [r7, #36]	; 0x24
    f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f672:	2b00      	cmp	r3, #0
    f674:	f040 808c 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                (ret = bb_setUInt8(data, it->type)) != 0 ||
    f678:	2111      	movs	r1, #17
    f67a:	6978      	ldr	r0, [r7, #20]
    f67c:	f7f3 fbca 	bl	2e14 <bb_setUInt8>
    f680:	6278      	str	r0, [r7, #36]	; 0x24
    f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f684:	2b00      	cmp	r3, #0
    f686:	f040 8083 	bne.w	f790 <cosem_getIP4Setup+0x2b8>
                //Len
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    f68a:	68fb      	ldr	r3, [r7, #12]
    f68c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    f690:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Type
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->type)) != 0 ||
                //Len
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    f692:	4619      	mov	r1, r3
    f694:	6978      	ldr	r0, [r7, #20]
    f696:	f7f3 fbbd 	bl	2e14 <bb_setUInt8>
    f69a:	6278      	str	r0, [r7, #36]	; 0x24
    f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f69e:	2b00      	cmp	r3, #0
    f6a0:	d176      	bne.n	f790 <cosem_getIP4Setup+0x2b8>
                (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    f6a2:	2109      	movs	r1, #9
    f6a4:	6978      	ldr	r0, [r7, #20]
    f6a6:	f7f3 fbb5 	bl	2e14 <bb_setUInt8>
    f6aa:	6278      	str	r0, [r7, #36]	; 0x24
    f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6ae:	2b00      	cmp	r3, #0
    f6b0:	d16e      	bne.n	f790 <cosem_getIP4Setup+0x2b8>
                //Data
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    f6b2:	68fb      	ldr	r3, [r7, #12]
    f6b4:	3304      	adds	r3, #4
    f6b6:	4618      	mov	r0, r3
    f6b8:	f7f3 fb06 	bl	2cc8 <bb_size>
    f6bc:	4603      	mov	r3, r0
    f6be:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, it->type)) != 0 ||
                //Len
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
                //Data
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f6c0:	4619      	mov	r1, r3
    f6c2:	6978      	ldr	r0, [r7, #20]
    f6c4:	f7f3 fba6 	bl	2e14 <bb_setUInt8>
    f6c8:	6278      	str	r0, [r7, #36]	; 0x24
    f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	d15f      	bne.n	f790 <cosem_getIP4Setup+0x2b8>
                (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
                (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    f6d0:	68fb      	ldr	r3, [r7, #12]
    f6d2:	1d1c      	adds	r4, r3, #4
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	3304      	adds	r3, #4
    f6d8:	4618      	mov	r0, r3
    f6da:	f7f3 faf5 	bl	2cc8 <bb_size>
    f6de:	4603      	mov	r3, r0
                //Len
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
                //Data
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    f6e0:	2200      	movs	r2, #0
    f6e2:	4621      	mov	r1, r4
    f6e4:	6978      	ldr	r0, [r7, #20]
    f6e6:	f7f3 ff9b 	bl	3620 <bb_set2>
    f6ea:	6278      	str	r0, [r7, #36]	; 0x24
    f6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	d14e      	bne.n	f790 <cosem_getIP4Setup+0x2b8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->ipOptions.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->ipOptions.size; ++pos)
    f6f2:	6a3b      	ldr	r3, [r7, #32]
    f6f4:	3301      	adds	r3, #1
    f6f6:	623b      	str	r3, [r7, #32]
    f6f8:	69fb      	ldr	r3, [r7, #28]
    f6fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f6fc:	461a      	mov	r2, r3
    f6fe:	6a3b      	ldr	r3, [r7, #32]
    f700:	429a      	cmp	r2, r3
    f702:	d186      	bne.n	f612 <cosem_getIP4Setup+0x13a>
    f704:	e044      	b.n	f790 <cosem_getIP4Setup+0x2b8>
            {
                break;
            }
        }
    }
    else if (e->index == 6)
    f706:	687b      	ldr	r3, [r7, #4]
    f708:	7e1b      	ldrb	r3, [r3, #24]
    f70a:	2b06      	cmp	r3, #6
    f70c:	d108      	bne.n	f720 <cosem_getIP4Setup+0x248>
    {
        ret = var_setUInt32(&e->value, object->subnetMask);
    f70e:	687a      	ldr	r2, [r7, #4]
    f710:	69fb      	ldr	r3, [r7, #28]
    f712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f714:	4619      	mov	r1, r3
    f716:	4610      	mov	r0, r2
    f718:	f016 fc26 	bl	25f68 <var_setUInt32>
    f71c:	6278      	str	r0, [r7, #36]	; 0x24
    f71e:	e037      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 7)
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	7e1b      	ldrb	r3, [r3, #24]
    f724:	2b07      	cmp	r3, #7
    f726:	d108      	bne.n	f73a <cosem_getIP4Setup+0x262>
    {
        ret = var_setUInt32(&e->value, object->gatewayIPAddress);
    f728:	687a      	ldr	r2, [r7, #4]
    f72a:	69fb      	ldr	r3, [r7, #28]
    f72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f72e:	4619      	mov	r1, r3
    f730:	4610      	mov	r0, r2
    f732:	f016 fc19 	bl	25f68 <var_setUInt32>
    f736:	6278      	str	r0, [r7, #36]	; 0x24
    f738:	e02a      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 8)
    f73a:	687b      	ldr	r3, [r7, #4]
    f73c:	7e1b      	ldrb	r3, [r3, #24]
    f73e:	2b08      	cmp	r3, #8
    f740:	d109      	bne.n	f756 <cosem_getIP4Setup+0x27e>
    {
        ret = var_setBoolean(&e->value, object->useDHCP);
    f742:	687a      	ldr	r2, [r7, #4]
    f744:	69fb      	ldr	r3, [r7, #28]
    f746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    f74a:	4619      	mov	r1, r3
    f74c:	4610      	mov	r0, r2
    f74e:	f018 fd35 	bl	281bc <var_setBoolean>
    f752:	6278      	str	r0, [r7, #36]	; 0x24
    f754:	e01c      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 9)
    f756:	687b      	ldr	r3, [r7, #4]
    f758:	7e1b      	ldrb	r3, [r3, #24]
    f75a:	2b09      	cmp	r3, #9
    f75c:	d108      	bne.n	f770 <cosem_getIP4Setup+0x298>
    {
        ret = var_setUInt32(&e->value, object->primaryDNSAddress);
    f75e:	687a      	ldr	r2, [r7, #4]
    f760:	69fb      	ldr	r3, [r7, #28]
    f762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f764:	4619      	mov	r1, r3
    f766:	4610      	mov	r0, r2
    f768:	f016 fbfe 	bl	25f68 <var_setUInt32>
    f76c:	6278      	str	r0, [r7, #36]	; 0x24
    f76e:	e00f      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else if (e->index == 10)
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	7e1b      	ldrb	r3, [r3, #24]
    f774:	2b0a      	cmp	r3, #10
    f776:	d108      	bne.n	f78a <cosem_getIP4Setup+0x2b2>
    {
        ret = var_setUInt32(&e->value, object->secondaryDNSAddress);
    f778:	687a      	ldr	r2, [r7, #4]
    f77a:	69fb      	ldr	r3, [r7, #28]
    f77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f77e:	4619      	mov	r1, r3
    f780:	4610      	mov	r0, r2
    f782:	f016 fbf1 	bl	25f68 <var_setUInt32>
    f786:	6278      	str	r0, [r7, #36]	; 0x24
    f788:	e002      	b.n	f790 <cosem_getIP4Setup+0x2b8>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    f78a:	f44f 7381 	mov.w	r3, #258	; 0x102
    f78e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
    f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    f792:	4618      	mov	r0, r3
    f794:	372c      	adds	r7, #44	; 0x2c
    f796:	46bd      	mov	sp, r7
    f798:	bd90      	pop	{r4, r7, pc}
    f79a:	bf00      	nop

0000f79c <cosem_getMbusSlavePortSetup>:
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
int cosem_getMbusSlavePortSetup(
    gxValueEventArg *e)
{
    f79c:	b580      	push	{r7, lr}
    f79e:	b084      	sub	sp, #16
    f7a0:	af00      	add	r7, sp, #0
    f7a2:	6078      	str	r0, [r7, #4]
    int ret;
    gxMbusSlavePortSetup* object = (gxMbusSlavePortSetup*)e->target;
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	695b      	ldr	r3, [r3, #20]
    f7a8:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
    f7aa:	687b      	ldr	r3, [r7, #4]
    f7ac:	7e1b      	ldrb	r3, [r3, #24]
    f7ae:	2b02      	cmp	r3, #2
    f7b0:	d108      	bne.n	f7c4 <cosem_getMbusSlavePortSetup+0x28>
    {
        ret = var_setEnum(&e->value, object->defaultBaud);
    f7b2:	687a      	ldr	r2, [r7, #4]
    f7b4:	68bb      	ldr	r3, [r7, #8]
    f7b6:	7c1b      	ldrb	r3, [r3, #16]
    f7b8:	4619      	mov	r1, r3
    f7ba:	4610      	mov	r0, r2
    f7bc:	f016 fb98 	bl	25ef0 <var_setEnum>
    f7c0:	60f8      	str	r0, [r7, #12]
    f7c2:	e029      	b.n	f818 <cosem_getMbusSlavePortSetup+0x7c>
    }
    else if (e->index == 3)
    f7c4:	687b      	ldr	r3, [r7, #4]
    f7c6:	7e1b      	ldrb	r3, [r3, #24]
    f7c8:	2b03      	cmp	r3, #3
    f7ca:	d108      	bne.n	f7de <cosem_getMbusSlavePortSetup+0x42>
    {
        ret = var_setEnum(&e->value, object->availableBaud);
    f7cc:	687a      	ldr	r2, [r7, #4]
    f7ce:	68bb      	ldr	r3, [r7, #8]
    f7d0:	7c5b      	ldrb	r3, [r3, #17]
    f7d2:	4619      	mov	r1, r3
    f7d4:	4610      	mov	r0, r2
    f7d6:	f016 fb8b 	bl	25ef0 <var_setEnum>
    f7da:	60f8      	str	r0, [r7, #12]
    f7dc:	e01c      	b.n	f818 <cosem_getMbusSlavePortSetup+0x7c>
    }
    else if (e->index == 4)
    f7de:	687b      	ldr	r3, [r7, #4]
    f7e0:	7e1b      	ldrb	r3, [r3, #24]
    f7e2:	2b04      	cmp	r3, #4
    f7e4:	d108      	bne.n	f7f8 <cosem_getMbusSlavePortSetup+0x5c>
    {
        ret = var_setEnum(&e->value, object->addressState);
    f7e6:	687a      	ldr	r2, [r7, #4]
    f7e8:	68bb      	ldr	r3, [r7, #8]
    f7ea:	7c9b      	ldrb	r3, [r3, #18]
    f7ec:	4619      	mov	r1, r3
    f7ee:	4610      	mov	r0, r2
    f7f0:	f016 fb7e 	bl	25ef0 <var_setEnum>
    f7f4:	60f8      	str	r0, [r7, #12]
    f7f6:	e00f      	b.n	f818 <cosem_getMbusSlavePortSetup+0x7c>
    }
    else if (e->index == 5)
    f7f8:	687b      	ldr	r3, [r7, #4]
    f7fa:	7e1b      	ldrb	r3, [r3, #24]
    f7fc:	2b05      	cmp	r3, #5
    f7fe:	d108      	bne.n	f812 <cosem_getMbusSlavePortSetup+0x76>
    {
        ret = var_setUInt8(&e->value, object->busAddress);
    f800:	687a      	ldr	r2, [r7, #4]
    f802:	68bb      	ldr	r3, [r7, #8]
    f804:	7cdb      	ldrb	r3, [r3, #19]
    f806:	4619      	mov	r1, r3
    f808:	4610      	mov	r0, r2
    f80a:	f016 fb85 	bl	25f18 <var_setUInt8>
    f80e:	60f8      	str	r0, [r7, #12]
    f810:	e002      	b.n	f818 <cosem_getMbusSlavePortSetup+0x7c>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    f812:	f44f 7381 	mov.w	r3, #258	; 0x102
    f816:	e000      	b.n	f81a <cosem_getMbusSlavePortSetup+0x7e>
    }
    return ret;
    f818:	68fb      	ldr	r3, [r7, #12]
}
    f81a:	4618      	mov	r0, r3
    f81c:	3710      	adds	r7, #16
    f81e:	46bd      	mov	sp, r7
    f820:	bd80      	pop	{r7, pc}
    f822:	bf00      	nop

0000f824 <cosem_getImageTransfer>:
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
int cosem_getImageTransfer(
    gxValueEventArg *e)
{
    f824:	b5b0      	push	{r4, r5, r7, lr}
    f826:	b088      	sub	sp, #32
    f828:	af00      	add	r7, sp, #0
    f82a:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
    f82c:	2300      	movs	r3, #0
    f82e:	61fb      	str	r3, [r7, #28]
    gxImageActivateInfo *ai;
    gxImageTransfer* object = (gxImageTransfer*)e->target;
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	695b      	ldr	r3, [r3, #20]
    f834:	617b      	str	r3, [r7, #20]
    if (e->index == 2)
    f836:	687b      	ldr	r3, [r7, #4]
    f838:	7e1b      	ldrb	r3, [r3, #24]
    f83a:	2b02      	cmp	r3, #2
    f83c:	d108      	bne.n	f850 <cosem_getImageTransfer+0x2c>
    {
        ret = var_setUInt32(&e->value, object->imageBlockSize);
    f83e:	687a      	ldr	r2, [r7, #4]
    f840:	697b      	ldr	r3, [r7, #20]
    f842:	691b      	ldr	r3, [r3, #16]
    f844:	4619      	mov	r1, r3
    f846:	4610      	mov	r0, r2
    f848:	f016 fb8e 	bl	25f68 <var_setUInt32>
    f84c:	61f8      	str	r0, [r7, #28]
    f84e:	e131      	b.n	fab4 <cosem_getImageTransfer+0x290>
    }
    else if (e->index == 3)
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	7e1b      	ldrb	r3, [r3, #24]
    f854:	2b03      	cmp	r3, #3
    f856:	d148      	bne.n	f8ea <cosem_getImageTransfer+0xc6>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    f858:	687b      	ldr	r3, [r7, #4]
    f85a:	4618      	mov	r0, r3
    f85c:	f7fd f8a2 	bl	c9a4 <cosem_getByteBuffer>
    f860:	61f8      	str	r0, [r7, #28]
    f862:	69fb      	ldr	r3, [r7, #28]
    f864:	2b00      	cmp	r3, #0
    f866:	d001      	beq.n	f86c <cosem_getImageTransfer+0x48>
        {
            return ret;
    f868:	69fb      	ldr	r3, [r7, #28]
    f86a:	e124      	b.n	fab6 <cosem_getImageTransfer+0x292>
        }
        e->value.byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    f86c:	200c      	movs	r0, #12
    f86e:	f01a f8e9 	bl	29a44 <malloc>
    f872:	4603      	mov	r3, r0
    f874:	461a      	mov	r2, r3
    f876:	687b      	ldr	r3, [r7, #4]
    f878:	609a      	str	r2, [r3, #8]
        bb_init(e->value.byteArr);
    f87a:	687b      	ldr	r3, [r7, #4]
    f87c:	689b      	ldr	r3, [r3, #8]
    f87e:	4618      	mov	r0, r3
    f880:	f7f3 fa32 	bl	2ce8 <bb_init>
        e->byteArray = 1;
    f884:	687b      	ldr	r3, [r7, #4]
    f886:	2201      	movs	r2, #1
    f888:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
    f88c:	687b      	ldr	r3, [r7, #4]
    f88e:	689b      	ldr	r3, [r3, #8]
    f890:	2104      	movs	r1, #4
    f892:	4618      	mov	r0, r3
    f894:	f7f3 fabe 	bl	2e14 <bb_setUInt8>
    f898:	61f8      	str	r0, [r7, #28]
    f89a:	69fb      	ldr	r3, [r7, #28]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d10c      	bne.n	f8ba <cosem_getImageTransfer+0x96>
            (ret = hlp_setObjectCount(object->imageTransferredBlocksStatus.size, e->value.byteArr)) != 0)
    f8a0:	697b      	ldr	r3, [r7, #20]
    f8a2:	8b5b      	ldrh	r3, [r3, #26]
    f8a4:	461a      	mov	r2, r3
    f8a6:	687b      	ldr	r3, [r7, #4]
    f8a8:	689b      	ldr	r3, [r3, #8]
            return ret;
        }
        e->value.byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
        bb_init(e->value.byteArr);
        e->byteArray = 1;
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
    f8aa:	4619      	mov	r1, r3
    f8ac:	4610      	mov	r0, r2
    f8ae:	f012 f815 	bl	218dc <hlp_setObjectCount>
    f8b2:	61f8      	str	r0, [r7, #28]
    f8b4:	69fb      	ldr	r3, [r7, #28]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	d001      	beq.n	f8be <cosem_getImageTransfer+0x9a>
            (ret = hlp_setObjectCount(object->imageTransferredBlocksStatus.size, e->value.byteArr)) != 0)
        {
            return ret;
    f8ba:	69fb      	ldr	r3, [r7, #28]
    f8bc:	e0fb      	b.n	fab6 <cosem_getImageTransfer+0x292>
        }
        if (object->imageTransferredBlocksStatus.size != 0)
    f8be:	697b      	ldr	r3, [r7, #20]
    f8c0:	8b5b      	ldrh	r3, [r3, #26]
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	f000 80f6 	beq.w	fab4 <cosem_getImageTransfer+0x290>
        {
            ret = bb_set(e->value.byteArr, object->imageTransferredBlocksStatus.data,
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	689c      	ldr	r4, [r3, #8]
    f8cc:	697b      	ldr	r3, [r7, #20]
    f8ce:	695d      	ldr	r5, [r3, #20]
    f8d0:	697b      	ldr	r3, [r7, #20]
    f8d2:	8b5b      	ldrh	r3, [r3, #26]
    f8d4:	4618      	mov	r0, r3
    f8d6:	f7f2 ff2f 	bl	2738 <ba_getByteCount>
    f8da:	4603      	mov	r3, r0
    f8dc:	461a      	mov	r2, r3
    f8de:	4629      	mov	r1, r5
    f8e0:	4620      	mov	r0, r4
    f8e2:	f7f3 fe3d 	bl	3560 <bb_set>
    f8e6:	61f8      	str	r0, [r7, #28]
    f8e8:	e0e4      	b.n	fab4 <cosem_getImageTransfer+0x290>
                ba_getByteCount(object->imageTransferredBlocksStatus.size));
        }
    }
    else if (e->index == 4)
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	7e1b      	ldrb	r3, [r3, #24]
    f8ee:	2b04      	cmp	r3, #4
    f8f0:	d108      	bne.n	f904 <cosem_getImageTransfer+0xe0>
    {
        ret = var_setUInt32(&e->value, object->imageFirstNotTransferredBlockNumber);
    f8f2:	687a      	ldr	r2, [r7, #4]
    f8f4:	697b      	ldr	r3, [r7, #20]
    f8f6:	6a1b      	ldr	r3, [r3, #32]
    f8f8:	4619      	mov	r1, r3
    f8fa:	4610      	mov	r0, r2
    f8fc:	f016 fb34 	bl	25f68 <var_setUInt32>
    f900:	61f8      	str	r0, [r7, #28]
    f902:	e0d7      	b.n	fab4 <cosem_getImageTransfer+0x290>
    }
    else if (e->index == 5)
    f904:	687b      	ldr	r3, [r7, #4]
    f906:	7e1b      	ldrb	r3, [r3, #24]
    f908:	2b05      	cmp	r3, #5
    f90a:	d109      	bne.n	f920 <cosem_getImageTransfer+0xfc>
    {
        ret = var_setBoolean(&e->value, object->imageTransferEnabled);
    f90c:	687a      	ldr	r2, [r7, #4]
    f90e:	697b      	ldr	r3, [r7, #20]
    f910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    f914:	4619      	mov	r1, r3
    f916:	4610      	mov	r0, r2
    f918:	f018 fc50 	bl	281bc <var_setBoolean>
    f91c:	61f8      	str	r0, [r7, #28]
    f91e:	e0c9      	b.n	fab4 <cosem_getImageTransfer+0x290>
    }
    else if (e->index == 6)
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	7e1b      	ldrb	r3, [r3, #24]
    f924:	2b06      	cmp	r3, #6
    f926:	d109      	bne.n	f93c <cosem_getImageTransfer+0x118>
    {
        ret = var_setEnum(&e->value, object->imageTransferStatus);
    f928:	687a      	ldr	r2, [r7, #4]
    f92a:	697b      	ldr	r3, [r7, #20]
    f92c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    f930:	4619      	mov	r1, r3
    f932:	4610      	mov	r0, r2
    f934:	f016 fadc 	bl	25ef0 <var_setEnum>
    f938:	61f8      	str	r0, [r7, #28]
    f93a:	e0bb      	b.n	fab4 <cosem_getImageTransfer+0x290>
    }
    else if (e->index == 7)
    f93c:	687b      	ldr	r3, [r7, #4]
    f93e:	7e1b      	ldrb	r3, [r3, #24]
    f940:	2b07      	cmp	r3, #7
    f942:	f040 80b4 	bne.w	faae <cosem_getImageTransfer+0x28a>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	4618      	mov	r0, r3
    f94a:	f7fd f82b 	bl	c9a4 <cosem_getByteBuffer>
    f94e:	61f8      	str	r0, [r7, #28]
    f950:	69fb      	ldr	r3, [r7, #28]
    f952:	2b00      	cmp	r3, #0
    f954:	d001      	beq.n	f95a <cosem_getImageTransfer+0x136>
        {
            return ret;
    f956:	69fb      	ldr	r3, [r7, #28]
    f958:	e0ad      	b.n	fab6 <cosem_getImageTransfer+0x292>
        }
        gxByteBuffer *data = e->value.byteArr;
    f95a:	687b      	ldr	r3, [r7, #4]
    f95c:	689b      	ldr	r3, [r3, #8]
    f95e:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
    f960:	687b      	ldr	r3, [r7, #4]
    f962:	2201      	movs	r2, #1
    f964:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        //ImageActivateInfo is returned only after verification is succeeded.
        if (object->imageTransferStatus != DLMS_IMAGE_TRANSFER_STATUS_VERIFICATION_SUCCESSFUL)
    f968:	697b      	ldr	r3, [r7, #20]
    f96a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    f96e:	2b03      	cmp	r3, #3
    f970:	d012      	beq.n	f998 <cosem_getImageTransfer+0x174>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f972:	2101      	movs	r1, #1
    f974:	6938      	ldr	r0, [r7, #16]
    f976:	f7f3 fa4d 	bl	2e14 <bb_setUInt8>
    f97a:	61f8      	str	r0, [r7, #28]
    f97c:	69fb      	ldr	r3, [r7, #28]
    f97e:	2b00      	cmp	r3, #0
    f980:	d108      	bne.n	f994 <cosem_getImageTransfer+0x170>
    f982:	2100      	movs	r1, #0
    f984:	6938      	ldr	r0, [r7, #16]
    f986:	f7f3 fa45 	bl	2e14 <bb_setUInt8>
    f98a:	61f8      	str	r0, [r7, #28]
    f98c:	69fb      	ldr	r3, [r7, #28]
    f98e:	2b00      	cmp	r3, #0
    f990:	f000 8090 	beq.w	fab4 <cosem_getImageTransfer+0x290>
                (ret = bb_setUInt8(data, 0)) != 0)
            {
                return ret;
    f994:	69fb      	ldr	r3, [r7, #28]
    f996:	e08e      	b.n	fab6 <cosem_getImageTransfer+0x292>
            }
        }
        else
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f998:	2101      	movs	r1, #1
    f99a:	6938      	ldr	r0, [r7, #16]
    f99c:	f7f3 fa3a 	bl	2e14 <bb_setUInt8>
    f9a0:	61f8      	str	r0, [r7, #28]
    f9a2:	69fb      	ldr	r3, [r7, #28]
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	d109      	bne.n	f9bc <cosem_getImageTransfer+0x198>
                (ret = hlp_setObjectCount(object->imageActivateInfo.size, data)) != 0)
    f9a8:	697b      	ldr	r3, [r7, #20]
    f9aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
                return ret;
            }
        }
        else
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f9ac:	6939      	ldr	r1, [r7, #16]
    f9ae:	4618      	mov	r0, r3
    f9b0:	f011 ff94 	bl	218dc <hlp_setObjectCount>
    f9b4:	61f8      	str	r0, [r7, #28]
    f9b6:	69fb      	ldr	r3, [r7, #28]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d001      	beq.n	f9c0 <cosem_getImageTransfer+0x19c>
                (ret = hlp_setObjectCount(object->imageActivateInfo.size, data)) != 0)
            {
                return ret;
    f9bc:	69fb      	ldr	r3, [r7, #28]
    f9be:	e07a      	b.n	fab6 <cosem_getImageTransfer+0x292>
            }
            for (pos = 0; pos != object->imageActivateInfo.size; ++pos)
    f9c0:	2300      	movs	r3, #0
    f9c2:	61bb      	str	r3, [r7, #24]
    f9c4:	e06c      	b.n	faa0 <cosem_getImageTransfer+0x27c>
            {
                if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
    f9c6:	697b      	ldr	r3, [r7, #20]
    f9c8:	3328      	adds	r3, #40	; 0x28
    f9ca:	f107 020c 	add.w	r2, r7, #12
    f9ce:	69b9      	ldr	r1, [r7, #24]
    f9d0:	4618      	mov	r0, r3
    f9d2:	f7fc ff13 	bl	c7fc <arr_getByIndex>
    f9d6:	61f8      	str	r0, [r7, #28]
    f9d8:	69fb      	ldr	r3, [r7, #28]
    f9da:	2b00      	cmp	r3, #0
    f9dc:	d16a      	bne.n	fab4 <cosem_getImageTransfer+0x290>
    f9de:	2102      	movs	r1, #2
    f9e0:	6938      	ldr	r0, [r7, #16]
    f9e2:	f7f3 fa17 	bl	2e14 <bb_setUInt8>
    f9e6:	61f8      	str	r0, [r7, #28]
    f9e8:	69fb      	ldr	r3, [r7, #28]
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	d162      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f9ee:	2103      	movs	r1, #3
    f9f0:	6938      	ldr	r0, [r7, #16]
    f9f2:	f7f3 fa0f 	bl	2e14 <bb_setUInt8>
    f9f6:	61f8      	str	r0, [r7, #28]
    f9f8:	69fb      	ldr	r3, [r7, #28]
    f9fa:	2b00      	cmp	r3, #0
    f9fc:	d15a      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    f9fe:	2106      	movs	r1, #6
    fa00:	6938      	ldr	r0, [r7, #16]
    fa02:	f7f3 fa07 	bl	2e14 <bb_setUInt8>
    fa06:	61f8      	str	r0, [r7, #28]
    fa08:	69fb      	ldr	r3, [r7, #28]
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	d152      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    //Size
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
                    (ret = bb_setUInt32(data, ai->size)) != 0 ||
    fa0e:	68fb      	ldr	r3, [r7, #12]
    fa10:	681b      	ldr	r3, [r3, #0]
            {
                if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                    (ret = bb_setUInt8(data, 3)) != 0 ||
                    //Size
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
    fa12:	4619      	mov	r1, r3
    fa14:	6938      	ldr	r0, [r7, #16]
    fa16:	f7f3 faf1 	bl	2ffc <bb_setUInt32>
    fa1a:	61f8      	str	r0, [r7, #28]
    fa1c:	69fb      	ldr	r3, [r7, #28]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	d148      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = bb_setUInt32(data, ai->size)) != 0 ||
    fa22:	2109      	movs	r1, #9
    fa24:	6938      	ldr	r0, [r7, #16]
    fa26:	f7f3 f9f5 	bl	2e14 <bb_setUInt8>
    fa2a:	61f8      	str	r0, [r7, #28]
    fa2c:	69fb      	ldr	r3, [r7, #28]
    fa2e:	2b00      	cmp	r3, #0
    fa30:	d140      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    //Add identification.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
    fa32:	68fb      	ldr	r3, [r7, #12]
    fa34:	895b      	ldrh	r3, [r3, #10]
                    (ret = bb_setUInt8(data, 3)) != 0 ||
                    //Size
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
                    (ret = bb_setUInt32(data, ai->size)) != 0 ||
                    //Add identification.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    fa36:	6939      	ldr	r1, [r7, #16]
    fa38:	4618      	mov	r0, r3
    fa3a:	f011 ff4f 	bl	218dc <hlp_setObjectCount>
    fa3e:	61f8      	str	r0, [r7, #28]
    fa40:	69fb      	ldr	r3, [r7, #28]
    fa42:	2b00      	cmp	r3, #0
    fa44:	d136      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
                    (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
    fa46:	68fb      	ldr	r3, [r7, #12]
    fa48:	6859      	ldr	r1, [r3, #4]
    fa4a:	68fb      	ldr	r3, [r7, #12]
    fa4c:	895b      	ldrh	r3, [r3, #10]
                    //Size
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
                    (ret = bb_setUInt32(data, ai->size)) != 0 ||
                    //Add identification.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
    fa4e:	461a      	mov	r2, r3
    fa50:	6938      	ldr	r0, [r7, #16]
    fa52:	f7f3 fd85 	bl	3560 <bb_set>
    fa56:	61f8      	str	r0, [r7, #28]
    fa58:	69fb      	ldr	r3, [r7, #28]
    fa5a:	2b00      	cmp	r3, #0
    fa5c:	d12a      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
    fa5e:	2109      	movs	r1, #9
    fa60:	6938      	ldr	r0, [r7, #16]
    fa62:	f7f3 f9d7 	bl	2e14 <bb_setUInt8>
    fa66:	61f8      	str	r0, [r7, #28]
    fa68:	69fb      	ldr	r3, [r7, #28]
    fa6a:	2b00      	cmp	r3, #0
    fa6c:	d122      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    //Add signature.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
    fa6e:	68fb      	ldr	r3, [r7, #12]
    fa70:	8adb      	ldrh	r3, [r3, #22]
                    //Add identification.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
                    (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
                    //Add signature.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    fa72:	6939      	ldr	r1, [r7, #16]
    fa74:	4618      	mov	r0, r3
    fa76:	f011 ff31 	bl	218dc <hlp_setObjectCount>
    fa7a:	61f8      	str	r0, [r7, #28]
    fa7c:	69fb      	ldr	r3, [r7, #28]
    fa7e:	2b00      	cmp	r3, #0
    fa80:	d118      	bne.n	fab4 <cosem_getImageTransfer+0x290>
                    (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
                    (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
    fa82:	68fb      	ldr	r3, [r7, #12]
    fa84:	6919      	ldr	r1, [r3, #16]
    fa86:	68fb      	ldr	r3, [r7, #12]
    fa88:	8adb      	ldrh	r3, [r3, #22]
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
                    (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
                    //Add signature.
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
    fa8a:	461a      	mov	r2, r3
    fa8c:	6938      	ldr	r0, [r7, #16]
    fa8e:	f7f3 fd67 	bl	3560 <bb_set>
    fa92:	61f8      	str	r0, [r7, #28]
    fa94:	69fb      	ldr	r3, [r7, #28]
    fa96:	2b00      	cmp	r3, #0
    fa98:	d10c      	bne.n	fab4 <cosem_getImageTransfer+0x290>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                (ret = hlp_setObjectCount(object->imageActivateInfo.size, data)) != 0)
            {
                return ret;
            }
            for (pos = 0; pos != object->imageActivateInfo.size; ++pos)
    fa9a:	69bb      	ldr	r3, [r7, #24]
    fa9c:	3301      	adds	r3, #1
    fa9e:	61bb      	str	r3, [r7, #24]
    faa0:	697b      	ldr	r3, [r7, #20]
    faa2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    faa4:	461a      	mov	r2, r3
    faa6:	69bb      	ldr	r3, [r7, #24]
    faa8:	429a      	cmp	r2, r3
    faaa:	d18c      	bne.n	f9c6 <cosem_getImageTransfer+0x1a2>
    faac:	e002      	b.n	fab4 <cosem_getImageTransfer+0x290>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    faae:	f44f 7381 	mov.w	r3, #258	; 0x102
    fab2:	61fb      	str	r3, [r7, #28]
    }
    return ret;
    fab4:	69fb      	ldr	r3, [r7, #28]
}
    fab6:	4618      	mov	r0, r3
    fab8:	3720      	adds	r7, #32
    faba:	46bd      	mov	sp, r7
    fabc:	bdb0      	pop	{r4, r5, r7, pc}
    fabe:	bf00      	nop

0000fac0 <getColumns>:
int getColumns(
    dlmsSettings* settings,
    gxArray *list,
    gxByteBuffer *ba,
    gxValueEventArg *e)
{
    fac0:	b580      	push	{r7, lr}
    fac2:	b088      	sub	sp, #32
    fac4:	af00      	add	r7, sp, #0
    fac6:	60f8      	str	r0, [r7, #12]
    fac8:	60b9      	str	r1, [r7, #8]
    faca:	607a      	str	r2, [r7, #4]
    facc:	603b      	str	r3, [r7, #0]
    unsigned short pduSize;
    int pos, ret;
    gxKey *it;
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
    face:	68bb      	ldr	r3, [r7, #8]
    fad0:	891b      	ldrh	r3, [r3, #8]
    fad2:	461a      	mov	r2, r3
    fad4:	00d2      	lsls	r2, r2, #3
    fad6:	441a      	add	r2, r3
    fad8:	0052      	lsls	r2, r2, #1
    fada:	4413      	add	r3, r2
    fadc:	b29b      	uxth	r3, r3
    fade:	3302      	adds	r3, #2
    fae0:	b29b      	uxth	r3, r3
    fae2:	4619      	mov	r1, r3
    fae4:	6878      	ldr	r0, [r7, #4]
    fae6:	f7f3 f915 	bl	2d14 <bb_capacity>
    faea:	6178      	str	r0, [r7, #20]
    faec:	697b      	ldr	r3, [r7, #20]
    faee:	2b00      	cmp	r3, #0
    faf0:	d001      	beq.n	faf6 <getColumns+0x36>
    {
        return ret;
    faf2:	697b      	ldr	r3, [r7, #20]
    faf4:	e0cb      	b.n	fc8e <getColumns+0x1ce>
    }
    //Add count only for first time.
    if (!e->transaction)
    faf6:	683b      	ldr	r3, [r7, #0]
    faf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
    fafc:	2b00      	cmp	r3, #0
    fafe:	d118      	bne.n	fb32 <getColumns+0x72>
    {
        settings->count = list->size;
    fb00:	68bb      	ldr	r3, [r7, #8]
    fb02:	891a      	ldrh	r2, [r3, #8]
    fb04:	68fb      	ldr	r3, [r7, #12]
    fb06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    fb0a:	2101      	movs	r1, #1
    fb0c:	6878      	ldr	r0, [r7, #4]
    fb0e:	f7f3 f981 	bl	2e14 <bb_setUInt8>
    fb12:	6178      	str	r0, [r7, #20]
    fb14:	697b      	ldr	r3, [r7, #20]
    fb16:	2b00      	cmp	r3, #0
    fb18:	d109      	bne.n	fb2e <getColumns+0x6e>
            (ret = hlp_setObjectCount(list->size, ba)) != 0)
    fb1a:	68bb      	ldr	r3, [r7, #8]
    fb1c:	891b      	ldrh	r3, [r3, #8]
    }
    //Add count only for first time.
    if (!e->transaction)
    {
        settings->count = list->size;
        if ((ret = bb_setUInt8(ba, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    fb1e:	6879      	ldr	r1, [r7, #4]
    fb20:	4618      	mov	r0, r3
    fb22:	f011 fedb 	bl	218dc <hlp_setObjectCount>
    fb26:	6178      	str	r0, [r7, #20]
    fb28:	697b      	ldr	r3, [r7, #20]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d001      	beq.n	fb32 <getColumns+0x72>
            (ret = hlp_setObjectCount(list->size, ba)) != 0)
        {
            return ret;
    fb2e:	697b      	ldr	r3, [r7, #20]
    fb30:	e0ad      	b.n	fc8e <getColumns+0x1ce>
        }
    }
    for (pos = 0; pos != list->size; ++pos)
    fb32:	2300      	movs	r3, #0
    fb34:	61bb      	str	r3, [r7, #24]
    fb36:	e099      	b.n	fc6c <getColumns+0x1ac>
    {
        if (!(pos + 1 <= settings->index))
    fb38:	69bb      	ldr	r3, [r7, #24]
    fb3a:	3301      	adds	r3, #1
    fb3c:	68fa      	ldr	r2, [r7, #12]
    fb3e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
    fb42:	4293      	cmp	r3, r2
    fb44:	f340 808f 	ble.w	fc66 <getColumns+0x1a6>
        {
            pduSize = (unsigned short)ba->size;
    fb48:	687b      	ldr	r3, [r7, #4]
    fb4a:	88db      	ldrh	r3, [r3, #6]
    fb4c:	83fb      	strh	r3, [r7, #30]
            if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0 ||
    fb4e:	f107 0310 	add.w	r3, r7, #16
    fb52:	461a      	mov	r2, r3
    fb54:	69b9      	ldr	r1, [r7, #24]
    fb56:	68b8      	ldr	r0, [r7, #8]
    fb58:	f7fc fe50 	bl	c7fc <arr_getByIndex>
    fb5c:	6178      	str	r0, [r7, #20]
    fb5e:	697b      	ldr	r3, [r7, #20]
    fb60:	2b00      	cmp	r3, #0
    fb62:	f040 808a 	bne.w	fc7a <getColumns+0x1ba>
    fb66:	2102      	movs	r1, #2
    fb68:	6878      	ldr	r0, [r7, #4]
    fb6a:	f7f3 f953 	bl	2e14 <bb_setUInt8>
    fb6e:	6178      	str	r0, [r7, #20]
    fb70:	697b      	ldr	r3, [r7, #20]
    fb72:	2b00      	cmp	r3, #0
    fb74:	f040 8081 	bne.w	fc7a <getColumns+0x1ba>
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    fb78:	2104      	movs	r1, #4
    fb7a:	6878      	ldr	r0, [r7, #4]
    fb7c:	f7f3 f94a 	bl	2e14 <bb_setUInt8>
    fb80:	6178      	str	r0, [r7, #20]
    fb82:	697b      	ldr	r3, [r7, #20]
    fb84:	2b00      	cmp	r3, #0
    fb86:	d178      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_setUInt8(ba, 4)) != 0 ||
    fb88:	2112      	movs	r1, #18
    fb8a:	6878      	ldr	r0, [r7, #4]
    fb8c:	f7f3 f942 	bl	2e14 <bb_setUInt8>
    fb90:	6178      	str	r0, [r7, #20]
    fb92:	697b      	ldr	r3, [r7, #20]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d170      	bne.n	fc7a <getColumns+0x1ba>
                //ClassID
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
    fb98:	693b      	ldr	r3, [r7, #16]
    fb9a:	681b      	ldr	r3, [r3, #0]
    fb9c:	781b      	ldrb	r3, [r3, #0]
    fb9e:	b29b      	uxth	r3, r3
            pduSize = (unsigned short)ba->size;
            if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(ba, 4)) != 0 ||
                //ClassID
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
    fba0:	4619      	mov	r1, r3
    fba2:	6878      	ldr	r0, [r7, #4]
    fba4:	f7f3 f9c8 	bl	2f38 <bb_setUInt16>
    fba8:	6178      	str	r0, [r7, #20]
    fbaa:	697b      	ldr	r3, [r7, #20]
    fbac:	2b00      	cmp	r3, #0
    fbae:	d164      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
    fbb0:	2109      	movs	r1, #9
    fbb2:	6878      	ldr	r0, [r7, #4]
    fbb4:	f7f3 f92e 	bl	2e14 <bb_setUInt8>
    fbb8:	6178      	str	r0, [r7, #20]
    fbba:	697b      	ldr	r3, [r7, #20]
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d15c      	bne.n	fc7a <getColumns+0x1ba>
                //LN
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    fbc0:	2106      	movs	r1, #6
    fbc2:	6878      	ldr	r0, [r7, #4]
    fbc4:	f7f3 f926 	bl	2e14 <bb_setUInt8>
    fbc8:	6178      	str	r0, [r7, #20]
    fbca:	697b      	ldr	r3, [r7, #20]
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d154      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_setUInt8(ba, 6)) != 0 ||
                (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    fbd0:	693b      	ldr	r3, [r7, #16]
    fbd2:	681b      	ldr	r3, [r3, #0]
    fbd4:	3306      	adds	r3, #6
                //ClassID
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
                //LN
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(ba, 6)) != 0 ||
    fbd6:	2206      	movs	r2, #6
    fbd8:	4619      	mov	r1, r3
    fbda:	6878      	ldr	r0, [r7, #4]
    fbdc:	f7f3 fcc0 	bl	3560 <bb_set>
    fbe0:	6178      	str	r0, [r7, #20]
    fbe2:	697b      	ldr	r3, [r7, #20]
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d148      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    fbe8:	210f      	movs	r1, #15
    fbea:	6878      	ldr	r0, [r7, #4]
    fbec:	f7f3 f912 	bl	2e14 <bb_setUInt8>
    fbf0:	6178      	str	r0, [r7, #20]
    fbf2:	697b      	ldr	r3, [r7, #20]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d140      	bne.n	fc7a <getColumns+0x1ba>
                //Attribute Index
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setInt8(ba, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
    fbf8:	693b      	ldr	r3, [r7, #16]
    fbfa:	685b      	ldr	r3, [r3, #4]
    fbfc:	781b      	ldrb	r3, [r3, #0]
                //LN
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(ba, 6)) != 0 ||
                (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                //Attribute Index
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
    fbfe:	4619      	mov	r1, r3
    fc00:	6878      	ldr	r0, [r7, #4]
    fc02:	f7f3 fc6b 	bl	34dc <bb_setInt8>
    fc06:	6178      	str	r0, [r7, #20]
    fc08:	697b      	ldr	r3, [r7, #20]
    fc0a:	2b00      	cmp	r3, #0
    fc0c:	d135      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_setInt8(ba, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
    fc0e:	2112      	movs	r1, #18
    fc10:	6878      	ldr	r0, [r7, #4]
    fc12:	f7f3 f8ff 	bl	2e14 <bb_setUInt8>
    fc16:	6178      	str	r0, [r7, #20]
    fc18:	697b      	ldr	r3, [r7, #20]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d12d      	bne.n	fc7a <getColumns+0x1ba>
                //Data Index
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(ba, ((gxCaptureObject*)it->value)->dataIndex)) != 0)
    fc1e:	693b      	ldr	r3, [r7, #16]
    fc20:	685b      	ldr	r3, [r3, #4]
    fc22:	785b      	ldrb	r3, [r3, #1]
    fc24:	b29b      	uxth	r3, r3
                (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                //Attribute Index
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setInt8(ba, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
                //Data Index
                (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
    fc26:	4619      	mov	r1, r3
    fc28:	6878      	ldr	r0, [r7, #4]
    fc2a:	f7f3 f985 	bl	2f38 <bb_setUInt16>
    fc2e:	6178      	str	r0, [r7, #20]
    fc30:	697b      	ldr	r3, [r7, #20]
    fc32:	2b00      	cmp	r3, #0
    fc34:	d121      	bne.n	fc7a <getColumns+0x1ba>
                (ret = bb_setUInt16(ba, ((gxCaptureObject*)it->value)->dataIndex)) != 0)
            {
                break;
            }
            if (settings->server)
    fc36:	68fb      	ldr	r3, [r7, #12]
    fc38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	d00a      	beq.n	fc56 <getColumns+0x196>
            {
                //If PDU is full.
                if (dlms_isPduFull(settings, ba))
    fc40:	6879      	ldr	r1, [r7, #4]
    fc42:	68f8      	ldr	r0, [r7, #12]
    fc44:	f7fd fda8 	bl	d798 <dlms_isPduFull>
    fc48:	4603      	mov	r3, r0
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d003      	beq.n	fc56 <getColumns+0x196>
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
    fc4e:	f44f 7382 	mov.w	r3, #260	; 0x104
    fc52:	617b      	str	r3, [r7, #20]
                    break;
    fc54:	e011      	b.n	fc7a <getColumns+0x1ba>
                }
            }
            ++settings->index;
    fc56:	68fb      	ldr	r3, [r7, #12]
    fc58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    fc5c:	3301      	adds	r3, #1
    fc5e:	b29a      	uxth	r2, r3
    fc60:	68fb      	ldr	r3, [r7, #12]
    fc62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            (ret = hlp_setObjectCount(list->size, ba)) != 0)
        {
            return ret;
        }
    }
    for (pos = 0; pos != list->size; ++pos)
    fc66:	69bb      	ldr	r3, [r7, #24]
    fc68:	3301      	adds	r3, #1
    fc6a:	61bb      	str	r3, [r7, #24]
    fc6c:	68bb      	ldr	r3, [r7, #8]
    fc6e:	891b      	ldrh	r3, [r3, #8]
    fc70:	461a      	mov	r2, r3
    fc72:	69bb      	ldr	r3, [r7, #24]
    fc74:	429a      	cmp	r2, r3
    fc76:	f47f af5f 	bne.w	fb38 <getColumns+0x78>
                }
            }
            ++settings->index;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    fc7a:	697b      	ldr	r3, [r7, #20]
    fc7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    fc80:	d104      	bne.n	fc8c <getColumns+0x1cc>
    {
        ba->size = pduSize;
    fc82:	687b      	ldr	r3, [r7, #4]
    fc84:	8bfa      	ldrh	r2, [r7, #30]
    fc86:	80da      	strh	r2, [r3, #6]
        ret = 0;
    fc88:	2300      	movs	r3, #0
    fc8a:	617b      	str	r3, [r7, #20]
    }
    return ret;
    fc8c:	697b      	ldr	r3, [r7, #20]
}
    fc8e:	4618      	mov	r0, r3
    fc90:	3720      	adds	r7, #32
    fc92:	46bd      	mov	sp, r7
    fc94:	bd80      	pop	{r7, pc}
    fc96:	bf00      	nop

0000fc98 <getSelectedColumns>:
     */
int getSelectedColumns(
    gxArray* captureObjects,
    variantArray *cols,
    gxArray *columns)
{
    fc98:	b580      	push	{r7, lr}
    fc9a:	b08e      	sub	sp, #56	; 0x38
    fc9c:	af00      	add	r7, sp, #0
    fc9e:	60f8      	str	r0, [r7, #12]
    fca0:	60b9      	str	r1, [r7, #8]
    fca2:	607a      	str	r2, [r7, #4]
    dlmsVARIANT *it, *it2;
    unsigned char *ln;
    DLMS_OBJECT_TYPE ot;
    int ret, pos, pos2, dataIndex;
    unsigned char attributeIndex;
    for (pos = 0; pos != cols->size; ++pos)
    fca4:	2300      	movs	r3, #0
    fca6:	637b      	str	r3, [r7, #52]	; 0x34
    fca8:	e09b      	b.n	fde2 <getSelectedColumns+0x14a>
    {
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    fcaa:	f107 0314 	add.w	r3, r7, #20
    fcae:	461a      	mov	r2, r3
    fcb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    fcb2:	68b8      	ldr	r0, [r7, #8]
    fcb4:	f017 f8da 	bl	26e6c <va_getByIndex>
    fcb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	f040 809d 	bne.w	fdfc <getSelectedColumns+0x164>
            //Get object type.
            (ret = va_getByIndex(it->Arr, 0, &it2)) != 0)
    fcc2:	697b      	ldr	r3, [r7, #20]
    fcc4:	689b      	ldr	r3, [r3, #8]
    DLMS_OBJECT_TYPE ot;
    int ret, pos, pos2, dataIndex;
    unsigned char attributeIndex;
    for (pos = 0; pos != cols->size; ++pos)
    {
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    fcc6:	f107 0210 	add.w	r2, r7, #16
    fcca:	2100      	movs	r1, #0
    fccc:	4618      	mov	r0, r3
    fcce:	f017 f8cd 	bl	26e6c <va_getByIndex>
    fcd2:	62f8      	str	r0, [r7, #44]	; 0x2c
    fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	f040 8090 	bne.w	fdfc <getSelectedColumns+0x164>
            //Get object type.
            (ret = va_getByIndex(it->Arr, 0, &it2)) != 0)
        {
            break;
        }
        ot = (DLMS_OBJECT_TYPE)var_toInteger(it2);
    fcdc:	693b      	ldr	r3, [r7, #16]
    fcde:	4618      	mov	r0, r3
    fce0:	f016 fef4 	bl	26acc <var_toInteger>
    fce4:	4603      	mov	r3, r0
    fce6:	857b      	strh	r3, [r7, #42]	; 0x2a
        //Get logical name.
        if ((ret = va_getByIndex(it->Arr, 1, &it2)) != 0)
    fce8:	697b      	ldr	r3, [r7, #20]
    fcea:	689b      	ldr	r3, [r3, #8]
    fcec:	f107 0210 	add.w	r2, r7, #16
    fcf0:	2101      	movs	r1, #1
    fcf2:	4618      	mov	r0, r3
    fcf4:	f017 f8ba 	bl	26e6c <va_getByIndex>
    fcf8:	62f8      	str	r0, [r7, #44]	; 0x2c
    fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fcfc:	2b00      	cmp	r3, #0
    fcfe:	d178      	bne.n	fdf2 <getSelectedColumns+0x15a>
        {
            break;
        }
        ln = it2->byteArr->data;
    fd00:	693b      	ldr	r3, [r7, #16]
    fd02:	689b      	ldr	r3, [r3, #8]
    fd04:	681b      	ldr	r3, [r3, #0]
    fd06:	627b      	str	r3, [r7, #36]	; 0x24
        //Get attribute index.
        if ((ret = va_getByIndex(it->Arr, 2, &it2)) != 0)
    fd08:	697b      	ldr	r3, [r7, #20]
    fd0a:	689b      	ldr	r3, [r3, #8]
    fd0c:	f107 0210 	add.w	r2, r7, #16
    fd10:	2102      	movs	r1, #2
    fd12:	4618      	mov	r0, r3
    fd14:	f017 f8aa 	bl	26e6c <va_getByIndex>
    fd18:	62f8      	str	r0, [r7, #44]	; 0x2c
    fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d16a      	bne.n	fdf6 <getSelectedColumns+0x15e>
        {
            break;
        }
        attributeIndex = (char)var_toInteger(it2);
    fd20:	693b      	ldr	r3, [r7, #16]
    fd22:	4618      	mov	r0, r3
    fd24:	f016 fed2 	bl	26acc <var_toInteger>
    fd28:	4603      	mov	r3, r0
    fd2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        //Get data index.
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    fd2e:	697b      	ldr	r3, [r7, #20]
    fd30:	689b      	ldr	r3, [r3, #8]
    fd32:	f107 0210 	add.w	r2, r7, #16
    fd36:	2103      	movs	r1, #3
    fd38:	4618      	mov	r0, r3
    fd3a:	f017 f897 	bl	26e6c <va_getByIndex>
    fd3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd42:	2b00      	cmp	r3, #0
    fd44:	d159      	bne.n	fdfa <getSelectedColumns+0x162>
        {
            break;
        }
        dataIndex = var_toInteger(it2);
    fd46:	693b      	ldr	r3, [r7, #16]
    fd48:	4618      	mov	r0, r3
    fd4a:	f016 febf 	bl	26acc <var_toInteger>
    fd4e:	61f8      	str	r0, [r7, #28]
        // Find columns and update only them.
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    fd50:	2300      	movs	r3, #0
    fd52:	633b      	str	r3, [r7, #48]	; 0x30
    fd54:	e03a      	b.n	fdcc <getSelectedColumns+0x134>
        {
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
    fd56:	f107 0318 	add.w	r3, r7, #24
    fd5a:	461a      	mov	r2, r3
    fd5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    fd5e:	68f8      	ldr	r0, [r7, #12]
    fd60:	f7fc fd4c 	bl	c7fc <arr_getByIndex>
    fd64:	62f8      	str	r0, [r7, #44]	; 0x2c
    fd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d001      	beq.n	fd70 <getSelectedColumns+0xd8>
            {
                return ret;
    fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd6e:	e046      	b.n	fdfe <getSelectedColumns+0x166>
            }
            if (((gxObject*)c->key)->objectType == ot &&
    fd70:	69bb      	ldr	r3, [r7, #24]
    fd72:	681b      	ldr	r3, [r3, #0]
    fd74:	781b      	ldrb	r3, [r3, #0]
    fd76:	b29b      	uxth	r3, r3
    fd78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    fd7a:	429a      	cmp	r2, r3
    fd7c:	d123      	bne.n	fdc6 <getSelectedColumns+0x12e>
                ((gxCaptureObject*)c->value)->attributeIndex == attributeIndex &&
    fd7e:	69bb      	ldr	r3, [r7, #24]
    fd80:	685b      	ldr	r3, [r3, #4]
    fd82:	781b      	ldrb	r3, [r3, #0]
        {
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
            {
                return ret;
            }
            if (((gxObject*)c->key)->objectType == ot &&
    fd84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    fd88:	429a      	cmp	r2, r3
    fd8a:	d11c      	bne.n	fdc6 <getSelectedColumns+0x12e>
                ((gxCaptureObject*)c->value)->attributeIndex == attributeIndex &&
                ((gxCaptureObject*)c->value)->dataIndex == dataIndex &&
    fd8c:	69bb      	ldr	r3, [r7, #24]
    fd8e:	685b      	ldr	r3, [r3, #4]
    fd90:	785b      	ldrb	r3, [r3, #1]
    fd92:	461a      	mov	r2, r3
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
            {
                return ret;
            }
            if (((gxObject*)c->key)->objectType == ot &&
                ((gxCaptureObject*)c->value)->attributeIndex == attributeIndex &&
    fd94:	69fb      	ldr	r3, [r7, #28]
    fd96:	429a      	cmp	r2, r3
    fd98:	d115      	bne.n	fdc6 <getSelectedColumns+0x12e>
                ((gxCaptureObject*)c->value)->dataIndex == dataIndex &&
                memcmp(((gxObject*)c->key)->logicalName, ln, 6) == 0)
    fd9a:	69bb      	ldr	r3, [r7, #24]
    fd9c:	681b      	ldr	r3, [r3, #0]
    fd9e:	3306      	adds	r3, #6
    fda0:	2206      	movs	r2, #6
    fda2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    fda4:	4618      	mov	r0, r3
    fda6:	f019 fe5d 	bl	29a64 <memcmp>
    fdaa:	4603      	mov	r3, r0
            {
                return ret;
            }
            if (((gxObject*)c->key)->objectType == ot &&
                ((gxCaptureObject*)c->value)->attributeIndex == attributeIndex &&
                ((gxCaptureObject*)c->value)->dataIndex == dataIndex &&
    fdac:	2b00      	cmp	r3, #0
    fdae:	d10a      	bne.n	fdc6 <getSelectedColumns+0x12e>
                memcmp(((gxObject*)c->key)->logicalName, ln, 6) == 0)
            {
                if ((ret = arr_push(columns, c)) != 0)
    fdb0:	69bb      	ldr	r3, [r7, #24]
    fdb2:	4619      	mov	r1, r3
    fdb4:	6878      	ldr	r0, [r7, #4]
    fdb6:	f7fc fc63 	bl	c680 <arr_push>
    fdba:	62f8      	str	r0, [r7, #44]	; 0x2c
    fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	d00b      	beq.n	fdda <getSelectedColumns+0x142>
                {
                    return ret;
    fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdc4:	e01b      	b.n	fdfe <getSelectedColumns+0x166>
        {
            break;
        }
        dataIndex = var_toInteger(it2);
        // Find columns and update only them.
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fdc8:	3301      	adds	r3, #1
    fdca:	633b      	str	r3, [r7, #48]	; 0x30
    fdcc:	68fb      	ldr	r3, [r7, #12]
    fdce:	891b      	ldrh	r3, [r3, #8]
    fdd0:	461a      	mov	r2, r3
    fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fdd4:	429a      	cmp	r2, r3
    fdd6:	d1be      	bne.n	fd56 <getSelectedColumns+0xbe>
    fdd8:	e000      	b.n	fddc <getSelectedColumns+0x144>
            {
                if ((ret = arr_push(columns, c)) != 0)
                {
                    return ret;
                }
                break;
    fdda:	bf00      	nop
    dlmsVARIANT *it, *it2;
    unsigned char *ln;
    DLMS_OBJECT_TYPE ot;
    int ret, pos, pos2, dataIndex;
    unsigned char attributeIndex;
    for (pos = 0; pos != cols->size; ++pos)
    fddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fdde:	3301      	adds	r3, #1
    fde0:	637b      	str	r3, [r7, #52]	; 0x34
    fde2:	68bb      	ldr	r3, [r7, #8]
    fde4:	88db      	ldrh	r3, [r3, #6]
    fde6:	461a      	mov	r2, r3
    fde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fdea:	429a      	cmp	r2, r3
    fdec:	f47f af5d 	bne.w	fcaa <getSelectedColumns+0x12>
    fdf0:	e004      	b.n	fdfc <getSelectedColumns+0x164>
        }
        ot = (DLMS_OBJECT_TYPE)var_toInteger(it2);
        //Get logical name.
        if ((ret = va_getByIndex(it->Arr, 1, &it2)) != 0)
        {
            break;
    fdf2:	bf00      	nop
    fdf4:	e002      	b.n	fdfc <getSelectedColumns+0x164>
        }
        ln = it2->byteArr->data;
        //Get attribute index.
        if ((ret = va_getByIndex(it->Arr, 2, &it2)) != 0)
        {
            break;
    fdf6:	bf00      	nop
    fdf8:	e000      	b.n	fdfc <getSelectedColumns+0x164>
        }
        attributeIndex = (char)var_toInteger(it2);
        //Get data index.
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
        {
            break;
    fdfa:	bf00      	nop
                }
                break;
            }
        }
    }
    return 0;
    fdfc:	2300      	movs	r3, #0
}
    fdfe:	4618      	mov	r0, r3
    fe00:	3738      	adds	r7, #56	; 0x38
    fe02:	46bd      	mov	sp, r7
    fe04:	bd80      	pop	{r7, pc}
    fe06:	bf00      	nop

0000fe08 <cosem_getColumns>:
int cosem_getColumns(
    gxArray* captureObjects,
    unsigned char selector,
    dlmsVARIANT * parameters,
    gxArray *columns)
{
    fe08:	b580      	push	{r7, lr}
    fe0a:	b08c      	sub	sp, #48	; 0x30
    fe0c:	af00      	add	r7, sp, #0
    fe0e:	60f8      	str	r0, [r7, #12]
    fe10:	607a      	str	r2, [r7, #4]
    fe12:	603b      	str	r3, [r7, #0]
    fe14:	460b      	mov	r3, r1
    fe16:	72fb      	strb	r3, [r7, #11]
    unsigned long pos, start = 0, count = 0;
    fe18:	2300      	movs	r3, #0
    fe1a:	62bb      	str	r3, [r7, #40]	; 0x28
    fe1c:	2300      	movs	r3, #0
    fe1e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned short addAllColumns = 1;
    fe20:	2301      	movs	r3, #1
    fe22:	847b      	strh	r3, [r7, #34]	; 0x22
    int ret = 0;
    fe24:	2300      	movs	r3, #0
    fe26:	61fb      	str	r3, [r7, #28]
    gxKey *k;
    dlmsVARIANT *it;
    arr_empty(columns);
    fe28:	6838      	ldr	r0, [r7, #0]
    fe2a:	f7fc fca7 	bl	c77c <arr_empty>
    if (parameters->vt == DLMS_DATA_TYPE_STRUCTURE)
    fe2e:	687b      	ldr	r3, [r7, #4]
    fe30:	781b      	ldrb	r3, [r3, #0]
    fe32:	2b02      	cmp	r3, #2
    fe34:	f040 80b5 	bne.w	ffa2 <cosem_getColumns+0x19a>
    {
        if (selector == 1) //Read by range
    fe38:	7afb      	ldrb	r3, [r7, #11]
    fe3a:	2b01      	cmp	r3, #1
    fe3c:	d11c      	bne.n	fe78 <cosem_getColumns+0x70>
        {
            if (parameters->Arr->size > 3)
    fe3e:	687b      	ldr	r3, [r7, #4]
    fe40:	689b      	ldr	r3, [r3, #8]
    fe42:	88db      	ldrh	r3, [r3, #6]
    fe44:	2b03      	cmp	r3, #3
    fe46:	f240 8085 	bls.w	ff54 <cosem_getColumns+0x14c>
            {
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) == 0)
    fe4a:	687b      	ldr	r3, [r7, #4]
    fe4c:	689b      	ldr	r3, [r3, #8]
    fe4e:	f107 0214 	add.w	r2, r7, #20
    fe52:	2103      	movs	r1, #3
    fe54:	4618      	mov	r0, r3
    fe56:	f017 f809 	bl	26e6c <va_getByIndex>
    fe5a:	61f8      	str	r0, [r7, #28]
    fe5c:	69fb      	ldr	r3, [r7, #28]
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d107      	bne.n	fe72 <cosem_getColumns+0x6a>
                {
                    ret = getSelectedColumns(captureObjects, it->Arr, columns);
    fe62:	697b      	ldr	r3, [r7, #20]
    fe64:	689b      	ldr	r3, [r3, #8]
    fe66:	683a      	ldr	r2, [r7, #0]
    fe68:	4619      	mov	r1, r3
    fe6a:	68f8      	ldr	r0, [r7, #12]
    fe6c:	f7ff ff14 	bl	fc98 <getSelectedColumns>
    fe70:	61f8      	str	r0, [r7, #28]
                }
                addAllColumns = 0;
    fe72:	2300      	movs	r3, #0
    fe74:	847b      	strh	r3, [r7, #34]	; 0x22
    fe76:	e06d      	b.n	ff54 <cosem_getColumns+0x14c>
            }
        }
        else if (selector == 2) //Read by entry.
    fe78:	7afb      	ldrb	r3, [r7, #11]
    fe7a:	2b02      	cmp	r3, #2
    fe7c:	d16a      	bne.n	ff54 <cosem_getColumns+0x14c>
        {
            if (parameters->Arr->size > 2)
    fe7e:	687b      	ldr	r3, [r7, #4]
    fe80:	689b      	ldr	r3, [r3, #8]
    fe82:	88db      	ldrh	r3, [r3, #6]
    fe84:	2b02      	cmp	r3, #2
    fe86:	d913      	bls.n	feb0 <cosem_getColumns+0xa8>
            {
                if ((ret = va_getByIndex(parameters->Arr, 2, &it)) != 0)
    fe88:	687b      	ldr	r3, [r7, #4]
    fe8a:	689b      	ldr	r3, [r3, #8]
    fe8c:	f107 0214 	add.w	r2, r7, #20
    fe90:	2102      	movs	r1, #2
    fe92:	4618      	mov	r0, r3
    fe94:	f016 ffea 	bl	26e6c <va_getByIndex>
    fe98:	61f8      	str	r0, [r7, #28]
    fe9a:	69fb      	ldr	r3, [r7, #28]
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	d001      	beq.n	fea4 <cosem_getColumns+0x9c>
                {
                    return ret;
    fea0:	69fb      	ldr	r3, [r7, #28]
    fea2:	e07f      	b.n	ffa4 <cosem_getColumns+0x19c>
                }
                start = var_toInteger(it);
    fea4:	697b      	ldr	r3, [r7, #20]
    fea6:	4618      	mov	r0, r3
    fea8:	f016 fe10 	bl	26acc <var_toInteger>
    feac:	4603      	mov	r3, r0
    feae:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (parameters->Arr->size > 3)
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	689b      	ldr	r3, [r3, #8]
    feb4:	88db      	ldrh	r3, [r3, #6]
    feb6:	2b03      	cmp	r3, #3
    feb8:	d914      	bls.n	fee4 <cosem_getColumns+0xdc>
            {
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) != 0)
    feba:	687b      	ldr	r3, [r7, #4]
    febc:	689b      	ldr	r3, [r3, #8]
    febe:	f107 0214 	add.w	r2, r7, #20
    fec2:	2103      	movs	r1, #3
    fec4:	4618      	mov	r0, r3
    fec6:	f016 ffd1 	bl	26e6c <va_getByIndex>
    feca:	61f8      	str	r0, [r7, #28]
    fecc:	69fb      	ldr	r3, [r7, #28]
    fece:	2b00      	cmp	r3, #0
    fed0:	d001      	beq.n	fed6 <cosem_getColumns+0xce>
                {
                    return ret;
    fed2:	69fb      	ldr	r3, [r7, #28]
    fed4:	e066      	b.n	ffa4 <cosem_getColumns+0x19c>
                }
                count = var_toInteger(it);
    fed6:	697b      	ldr	r3, [r7, #20]
    fed8:	4618      	mov	r0, r3
    feda:	f016 fdf7 	bl	26acc <var_toInteger>
    fede:	4603      	mov	r3, r0
    fee0:	627b      	str	r3, [r7, #36]	; 0x24
    fee2:	e005      	b.n	fef0 <cosem_getColumns+0xe8>
            }
            else if (start != 1)
    fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fee6:	2b01      	cmp	r3, #1
    fee8:	d002      	beq.n	fef0 <cosem_getColumns+0xe8>
            {
                count = captureObjects->size;
    feea:	68fb      	ldr	r3, [r7, #12]
    feec:	891b      	ldrh	r3, [r3, #8]
    feee:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (start != 1 || count != 0)
    fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fef2:	2b01      	cmp	r3, #1
    fef4:	d102      	bne.n	fefc <cosem_getColumns+0xf4>
    fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fef8:	2b00      	cmp	r3, #0
    fefa:	d02b      	beq.n	ff54 <cosem_getColumns+0x14c>
            {
                addAllColumns = 0;
    fefc:	2300      	movs	r3, #0
    fefe:	847b      	strh	r3, [r7, #34]	; 0x22
                if (count == 0)
    ff00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff02:	2b00      	cmp	r3, #0
    ff04:	d105      	bne.n	ff12 <cosem_getColumns+0x10a>
                {
                    count = captureObjects->size - start;
    ff06:	68fb      	ldr	r3, [r7, #12]
    ff08:	891b      	ldrh	r3, [r3, #8]
    ff0a:	461a      	mov	r2, r3
    ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff0e:	1ad3      	subs	r3, r2, r3
    ff10:	627b      	str	r3, [r7, #36]	; 0x24
                }
                for (pos = start - 1; pos != count; ++pos)
    ff12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ff14:	3b01      	subs	r3, #1
    ff16:	62fb      	str	r3, [r7, #44]	; 0x2c
    ff18:	e018      	b.n	ff4c <cosem_getColumns+0x144>
                {
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    ff1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff1c:	f107 0218 	add.w	r2, r7, #24
    ff20:	4619      	mov	r1, r3
    ff22:	68f8      	ldr	r0, [r7, #12]
    ff24:	f7fc fc6a 	bl	c7fc <arr_getByIndex>
    ff28:	61f8      	str	r0, [r7, #28]
    ff2a:	69fb      	ldr	r3, [r7, #28]
    ff2c:	2b00      	cmp	r3, #0
    ff2e:	d108      	bne.n	ff42 <cosem_getColumns+0x13a>
                        (ret = arr_push(columns, k)) != 0)
    ff30:	69bb      	ldr	r3, [r7, #24]
                {
                    count = captureObjects->size - start;
                }
                for (pos = start - 1; pos != count; ++pos)
                {
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    ff32:	4619      	mov	r1, r3
    ff34:	6838      	ldr	r0, [r7, #0]
    ff36:	f7fc fba3 	bl	c680 <arr_push>
    ff3a:	61f8      	str	r0, [r7, #28]
    ff3c:	69fb      	ldr	r3, [r7, #28]
    ff3e:	2b00      	cmp	r3, #0
    ff40:	d001      	beq.n	ff46 <cosem_getColumns+0x13e>
                        (ret = arr_push(columns, k)) != 0)
                    {
                        return ret;
    ff42:	69fb      	ldr	r3, [r7, #28]
    ff44:	e02e      	b.n	ffa4 <cosem_getColumns+0x19c>
                addAllColumns = 0;
                if (count == 0)
                {
                    count = captureObjects->size - start;
                }
                for (pos = start - 1; pos != count; ++pos)
    ff46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff48:	3301      	adds	r3, #1
    ff4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ff4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff50:	429a      	cmp	r2, r3
    ff52:	d1e2      	bne.n	ff1a <cosem_getColumns+0x112>
                    }
                }
            }
        }
        //Add all objects.
        if (addAllColumns)
    ff54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    ff56:	2b00      	cmp	r3, #0
    ff58:	d023      	beq.n	ffa2 <cosem_getColumns+0x19a>
        {
            for (pos = 0; pos != captureObjects->size; ++pos)
    ff5a:	2300      	movs	r3, #0
    ff5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ff5e:	e018      	b.n	ff92 <cosem_getColumns+0x18a>
            {
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0)
    ff60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff62:	f107 0218 	add.w	r2, r7, #24
    ff66:	4619      	mov	r1, r3
    ff68:	68f8      	ldr	r0, [r7, #12]
    ff6a:	f7fc fc47 	bl	c7fc <arr_getByIndex>
    ff6e:	61f8      	str	r0, [r7, #28]
    ff70:	69fb      	ldr	r3, [r7, #28]
    ff72:	2b00      	cmp	r3, #0
    ff74:	d114      	bne.n	ffa0 <cosem_getColumns+0x198>
                {
                    break;
                }
                if ((ret = arr_push(columns, k)) != 0)
    ff76:	69bb      	ldr	r3, [r7, #24]
    ff78:	4619      	mov	r1, r3
    ff7a:	6838      	ldr	r0, [r7, #0]
    ff7c:	f7fc fb80 	bl	c680 <arr_push>
    ff80:	61f8      	str	r0, [r7, #28]
    ff82:	69fb      	ldr	r3, [r7, #28]
    ff84:	2b00      	cmp	r3, #0
    ff86:	d001      	beq.n	ff8c <cosem_getColumns+0x184>
                {
                    return ret;
    ff88:	69fb      	ldr	r3, [r7, #28]
    ff8a:	e00b      	b.n	ffa4 <cosem_getColumns+0x19c>
            }
        }
        //Add all objects.
        if (addAllColumns)
        {
            for (pos = 0; pos != captureObjects->size; ++pos)
    ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff8e:	3301      	adds	r3, #1
    ff90:	62fb      	str	r3, [r7, #44]	; 0x2c
    ff92:	68fb      	ldr	r3, [r7, #12]
    ff94:	891b      	ldrh	r3, [r3, #8]
    ff96:	461a      	mov	r2, r3
    ff98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ff9a:	429a      	cmp	r2, r3
    ff9c:	d1e0      	bne.n	ff60 <cosem_getColumns+0x158>
    ff9e:	e000      	b.n	ffa2 <cosem_getColumns+0x19a>
            {
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0)
                {
                    break;
    ffa0:	bf00      	nop
                    return ret;
                }
            }
        }
    }
    return ret;
    ffa2:	69fb      	ldr	r3, [r7, #28]
}
    ffa4:	4618      	mov	r0, r3
    ffa6:	3730      	adds	r7, #48	; 0x30
    ffa8:	46bd      	mov	sp, r7
    ffaa:	bd80      	pop	{r7, pc}

0000ffac <cosem_getRow>:
    gxArray* table,
    int index,
    gxArray *captureObjects,
    gxArray* columns,
    gxByteBuffer* data)
{
    ffac:	b580      	push	{r7, lr}
    ffae:	b08a      	sub	sp, #40	; 0x28
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	60f8      	str	r0, [r7, #12]
    ffb4:	60b9      	str	r1, [r7, #8]
    ffb6:	607a      	str	r2, [r7, #4]
    ffb8:	603b      	str	r3, [r7, #0]
    int ret, pos;
    dlmsVARIANT *col;
    variantArray *row;
    if ((ret = arr_getByIndex(table, index, (void**)&row)) != 0)
    ffba:	f107 0314 	add.w	r3, r7, #20
    ffbe:	461a      	mov	r2, r3
    ffc0:	68b9      	ldr	r1, [r7, #8]
    ffc2:	68f8      	ldr	r0, [r7, #12]
    ffc4:	f7fc fc1a 	bl	c7fc <arr_getByIndex>
    ffc8:	61f8      	str	r0, [r7, #28]
    ffca:	69fb      	ldr	r3, [r7, #28]
    ffcc:	2b00      	cmp	r3, #0
    ffce:	d001      	beq.n	ffd4 <cosem_getRow+0x28>
    {
        return ret;
    ffd0:	69fb      	ldr	r3, [r7, #28]
    ffd2:	e074      	b.n	100be <cosem_getRow+0x112>
    }
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0)
    ffd4:	2102      	movs	r1, #2
    ffd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ffd8:	f7f2 ff1c 	bl	2e14 <bb_setUInt8>
    ffdc:	61f8      	str	r0, [r7, #28]
    ffde:	69fb      	ldr	r3, [r7, #28]
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d001      	beq.n	ffe8 <cosem_getRow+0x3c>
    {
        return ret;
    ffe4:	69fb      	ldr	r3, [r7, #28]
    ffe6:	e06a      	b.n	100be <cosem_getRow+0x112>
    }
    if (columns->size != 0)
    ffe8:	683b      	ldr	r3, [r7, #0]
    ffea:	891b      	ldrh	r3, [r3, #8]
    ffec:	2b00      	cmp	r3, #0
    ffee:	d00b      	beq.n	10008 <cosem_getRow+0x5c>
    {
        if ((ret = hlp_setObjectCount(columns->size, data)) != 0)
    fff0:	683b      	ldr	r3, [r7, #0]
    fff2:	891b      	ldrh	r3, [r3, #8]
    fff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    fff6:	4618      	mov	r0, r3
    fff8:	f011 fc70 	bl	218dc <hlp_setObjectCount>
    fffc:	61f8      	str	r0, [r7, #28]
    fffe:	69fb      	ldr	r3, [r7, #28]
   10000:	2b00      	cmp	r3, #0
   10002:	d00d      	beq.n	10020 <cosem_getRow+0x74>
        {
            return ret;
   10004:	69fb      	ldr	r3, [r7, #28]
   10006:	e05a      	b.n	100be <cosem_getRow+0x112>
        }
    }
    else
    {
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   10008:	687b      	ldr	r3, [r7, #4]
   1000a:	891b      	ldrh	r3, [r3, #8]
   1000c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1000e:	4618      	mov	r0, r3
   10010:	f011 fc64 	bl	218dc <hlp_setObjectCount>
   10014:	61f8      	str	r0, [r7, #28]
   10016:	69fb      	ldr	r3, [r7, #28]
   10018:	2b00      	cmp	r3, #0
   1001a:	d001      	beq.n	10020 <cosem_getRow+0x74>
        {
            return ret;
   1001c:	69fb      	ldr	r3, [r7, #28]
   1001e:	e04e      	b.n	100be <cosem_getRow+0x112>
        }
    }
    int colPos = 0;
   10020:	2300      	movs	r3, #0
   10022:	623b      	str	r3, [r7, #32]
    for (pos = 0; pos != row->size; ++pos)
   10024:	2300      	movs	r3, #0
   10026:	627b      	str	r3, [r7, #36]	; 0x24
   10028:	e042      	b.n	100b0 <cosem_getRow+0x104>
    {
        if (columns->size != 0)
   1002a:	683b      	ldr	r3, [r7, #0]
   1002c:	891b      	ldrh	r3, [r3, #8]
   1002e:	2b00      	cmp	r3, #0
   10030:	d010      	beq.n	10054 <cosem_getRow+0xa8>
        {
            if (captureObjects->data[pos] != columns->data[colPos])
   10032:	687b      	ldr	r3, [r7, #4]
   10034:	681a      	ldr	r2, [r3, #0]
   10036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10038:	009b      	lsls	r3, r3, #2
   1003a:	4413      	add	r3, r2
   1003c:	681a      	ldr	r2, [r3, #0]
   1003e:	683b      	ldr	r3, [r7, #0]
   10040:	6819      	ldr	r1, [r3, #0]
   10042:	6a3b      	ldr	r3, [r7, #32]
   10044:	009b      	lsls	r3, r3, #2
   10046:	440b      	add	r3, r1
   10048:	681b      	ldr	r3, [r3, #0]
   1004a:	429a      	cmp	r2, r3
   1004c:	d12c      	bne.n	100a8 <cosem_getRow+0xfc>
            {
                continue;
            }
            ++colPos;
   1004e:	6a3b      	ldr	r3, [r7, #32]
   10050:	3301      	adds	r3, #1
   10052:	623b      	str	r3, [r7, #32]
        }
        if ((ret = va_getByIndex(row, pos, &col)) != 0)
   10054:	697b      	ldr	r3, [r7, #20]
   10056:	f107 0218 	add.w	r2, r7, #24
   1005a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1005c:	4618      	mov	r0, r3
   1005e:	f016 ff05 	bl	26e6c <va_getByIndex>
   10062:	61f8      	str	r0, [r7, #28]
   10064:	69fb      	ldr	r3, [r7, #28]
   10066:	2b00      	cmp	r3, #0
   10068:	d001      	beq.n	1006e <cosem_getRow+0xc2>
        {
            return ret;
   1006a:	69fb      	ldr	r3, [r7, #28]
   1006c:	e027      	b.n	100be <cosem_getRow+0x112>
        }
        if (col->vt == DLMS_DATA_TYPE_DATETIME)
   1006e:	69bb      	ldr	r3, [r7, #24]
   10070:	781b      	ldrb	r3, [r3, #0]
   10072:	2b19      	cmp	r3, #25
   10074:	d10b      	bne.n	1008e <cosem_getRow+0xe2>
        {
            if ((ret = var_getBytes2(col, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
   10076:	69bb      	ldr	r3, [r7, #24]
   10078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1007a:	2109      	movs	r1, #9
   1007c:	4618      	mov	r0, r3
   1007e:	f016 fb23 	bl	266c8 <var_getBytes2>
   10082:	61f8      	str	r0, [r7, #28]
   10084:	69fb      	ldr	r3, [r7, #28]
   10086:	2b00      	cmp	r3, #0
   10088:	d00f      	beq.n	100aa <cosem_getRow+0xfe>
            {
                return ret;
   1008a:	69fb      	ldr	r3, [r7, #28]
   1008c:	e017      	b.n	100be <cosem_getRow+0x112>
            }
        }
        else
        {
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   1008e:	69bb      	ldr	r3, [r7, #24]
   10090:	781b      	ldrb	r3, [r3, #0]
   10092:	69ba      	ldr	r2, [r7, #24]
   10094:	4619      	mov	r1, r3
   10096:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10098:	f7f6 fe76 	bl	6d88 <dlms_setData>
   1009c:	61f8      	str	r0, [r7, #28]
   1009e:	69fb      	ldr	r3, [r7, #28]
   100a0:	2b00      	cmp	r3, #0
   100a2:	d002      	beq.n	100aa <cosem_getRow+0xfe>
            {
                return ret;
   100a4:	69fb      	ldr	r3, [r7, #28]
   100a6:	e00a      	b.n	100be <cosem_getRow+0x112>
    {
        if (columns->size != 0)
        {
            if (captureObjects->data[pos] != columns->data[colPos])
            {
                continue;
   100a8:	bf00      	nop
        {
            return ret;
        }
    }
    int colPos = 0;
    for (pos = 0; pos != row->size; ++pos)
   100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100ac:	3301      	adds	r3, #1
   100ae:	627b      	str	r3, [r7, #36]	; 0x24
   100b0:	697b      	ldr	r3, [r7, #20]
   100b2:	88db      	ldrh	r3, [r3, #6]
   100b4:	461a      	mov	r2, r3
   100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100b8:	429a      	cmp	r2, r3
   100ba:	d1b6      	bne.n	1002a <cosem_getRow+0x7e>
            {
                return ret;
            }
        }
    }
    return 0;
   100bc:	2300      	movs	r3, #0
}
   100be:	4618      	mov	r0, r3
   100c0:	3728      	adds	r7, #40	; 0x28
   100c2:	46bd      	mov	sp, r7
   100c4:	bd80      	pop	{r7, pc}
   100c6:	bf00      	nop

000100c8 <profileGeneric_getData>:
    dlmsSettings* settings,
    gxValueEventArg *e,
    gxArray *table,
    gxArray *captureObjects,
    gxByteBuffer* data)
{
   100c8:	b580      	push	{r7, lr}
   100ca:	b08e      	sub	sp, #56	; 0x38
   100cc:	af02      	add	r7, sp, #8
   100ce:	60f8      	str	r0, [r7, #12]
   100d0:	60b9      	str	r1, [r7, #8]
   100d2:	607a      	str	r2, [r7, #4]
   100d4:	603b      	str	r3, [r7, #0]
    gxArray columns;
    unsigned short pduSize;
    int ret = 0, pos;
   100d6:	2300      	movs	r3, #0
   100d8:	62bb      	str	r3, [r7, #40]	; 0x28
    //Add count only for first time.
    if (!e->transaction)
   100da:	68bb      	ldr	r3, [r7, #8]
   100dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
   100e0:	2b00      	cmp	r3, #0
   100e2:	d137      	bne.n	10154 <profileGeneric_getData+0x8c>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
   100e4:	2101      	movs	r1, #1
   100e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   100e8:	f7f2 fe94 	bl	2e14 <bb_setUInt8>
   100ec:	62b8      	str	r0, [r7, #40]	; 0x28
   100ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   100f0:	2b00      	cmp	r3, #0
   100f2:	d001      	beq.n	100f8 <profileGeneric_getData+0x30>
        {
            return ret;
   100f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   100f6:	e098      	b.n	1022a <profileGeneric_getData+0x162>
        }
        if (e->transactionEndIndex != 0)
   100f8:	68bb      	ldr	r3, [r7, #8]
   100fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   100fe:	2b00      	cmp	r3, #0
   10100:	d017      	beq.n	10132 <profileGeneric_getData+0x6a>
        {
            settings->count = e->transactionEndIndex - e->transactionStartIndex;
   10102:	68bb      	ldr	r3, [r7, #8]
   10104:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   10108:	68bb      	ldr	r3, [r7, #8]
   1010a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   1010e:	1ad3      	subs	r3, r2, r3
   10110:	b29a      	uxth	r2, r3
   10112:	68fb      	ldr	r3, [r7, #12]
   10114:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
            if ((ret = hlp_setObjectCount(settings->count, data)) != 0)
   10118:	68fb      	ldr	r3, [r7, #12]
   1011a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   1011e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   10120:	4618      	mov	r0, r3
   10122:	f011 fbdb 	bl	218dc <hlp_setObjectCount>
   10126:	62b8      	str	r0, [r7, #40]	; 0x28
   10128:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1012a:	2b00      	cmp	r3, #0
   1012c:	d012      	beq.n	10154 <profileGeneric_getData+0x8c>
            {
                return ret;
   1012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10130:	e07b      	b.n	1022a <profileGeneric_getData+0x162>
            }
        }
        else
        {
            settings->count = table->size;
   10132:	687b      	ldr	r3, [r7, #4]
   10134:	891a      	ldrh	r2, [r3, #8]
   10136:	68fb      	ldr	r3, [r7, #12]
   10138:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
            if ((ret = hlp_setObjectCount(table->size, data)) != 0)
   1013c:	687b      	ldr	r3, [r7, #4]
   1013e:	891b      	ldrh	r3, [r3, #8]
   10140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   10142:	4618      	mov	r0, r3
   10144:	f011 fbca 	bl	218dc <hlp_setObjectCount>
   10148:	62b8      	str	r0, [r7, #40]	; 0x28
   1014a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1014c:	2b00      	cmp	r3, #0
   1014e:	d001      	beq.n	10154 <profileGeneric_getData+0x8c>
            {
                return ret;
   10150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10152:	e06a      	b.n	1022a <profileGeneric_getData+0x162>
            }
        }
    }
    arr_init(&columns);
   10154:	f107 0314 	add.w	r3, r7, #20
   10158:	4618      	mov	r0, r3
   1015a:	f7fc fa47 	bl	c5ec <arr_init>
    if (e->selector == 2)
   1015e:	68bb      	ldr	r3, [r7, #8]
   10160:	7e9b      	ldrb	r3, [r3, #26]
   10162:	2b02      	cmp	r3, #2
   10164:	d10f      	bne.n	10186 <profileGeneric_getData+0xbe>
    {
        if ((ret = cosem_getColumns(captureObjects, e->selector, &e->parameters, &columns)) != 0)
   10166:	68bb      	ldr	r3, [r7, #8]
   10168:	7e99      	ldrb	r1, [r3, #26]
   1016a:	68bb      	ldr	r3, [r7, #8]
   1016c:	f103 0220 	add.w	r2, r3, #32
   10170:	f107 0314 	add.w	r3, r7, #20
   10174:	6838      	ldr	r0, [r7, #0]
   10176:	f7ff fe47 	bl	fe08 <cosem_getColumns>
   1017a:	62b8      	str	r0, [r7, #40]	; 0x28
   1017c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1017e:	2b00      	cmp	r3, #0
   10180:	d001      	beq.n	10186 <profileGeneric_getData+0xbe>
        {
            return ret;
   10182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10184:	e051      	b.n	1022a <profileGeneric_getData+0x162>
        }
    }
    for (pos = 0; pos != table->size; ++pos)
   10186:	2300      	movs	r3, #0
   10188:	627b      	str	r3, [r7, #36]	; 0x24
   1018a:	e028      	b.n	101de <profileGeneric_getData+0x116>
    {
        pduSize = (unsigned short)data->size;
   1018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1018e:	88db      	ldrh	r3, [r3, #6]
   10190:	85fb      	strh	r3, [r7, #46]	; 0x2e
        if ((ret = cosem_getRow(table, pos, captureObjects, &columns, data)) != 0)
   10192:	f107 0214 	add.w	r2, r7, #20
   10196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10198:	9300      	str	r3, [sp, #0]
   1019a:	4613      	mov	r3, r2
   1019c:	683a      	ldr	r2, [r7, #0]
   1019e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   101a0:	6878      	ldr	r0, [r7, #4]
   101a2:	f7ff ff03 	bl	ffac <cosem_getRow>
   101a6:	62b8      	str	r0, [r7, #40]	; 0x28
   101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   101aa:	2b00      	cmp	r3, #0
   101ac:	d11e      	bne.n	101ec <profileGeneric_getData+0x124>
        {
            break;
        }
        //If PDU is full.
        if (data->size > (unsigned short)(settings->maxPduSize - PDU_MAX_HEADER_SIZE))
   101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   101b0:	88da      	ldrh	r2, [r3, #6]
   101b2:	68fb      	ldr	r3, [r7, #12]
   101b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   101b8:	3b14      	subs	r3, #20
   101ba:	b29b      	uxth	r3, r3
   101bc:	429a      	cmp	r2, r3
   101be:	d903      	bls.n	101c8 <profileGeneric_getData+0x100>
        {
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   101c0:	f44f 7382 	mov.w	r3, #260	; 0x104
   101c4:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
   101c6:	e012      	b.n	101ee <profileGeneric_getData+0x126>
        }
        ++settings->index;
   101c8:	68fb      	ldr	r3, [r7, #12]
   101ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   101ce:	3301      	adds	r3, #1
   101d0:	b29a      	uxth	r2, r3
   101d2:	68fb      	ldr	r3, [r7, #12]
   101d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        if ((ret = cosem_getColumns(captureObjects, e->selector, &e->parameters, &columns)) != 0)
        {
            return ret;
        }
    }
    for (pos = 0; pos != table->size; ++pos)
   101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101da:	3301      	adds	r3, #1
   101dc:	627b      	str	r3, [r7, #36]	; 0x24
   101de:	687b      	ldr	r3, [r7, #4]
   101e0:	891b      	ldrh	r3, [r3, #8]
   101e2:	461a      	mov	r2, r3
   101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101e6:	429a      	cmp	r2, r3
   101e8:	d1d0      	bne.n	1018c <profileGeneric_getData+0xc4>
   101ea:	e000      	b.n	101ee <profileGeneric_getData+0x126>
    {
        pduSize = (unsigned short)data->size;
        if ((ret = cosem_getRow(table, pos, captureObjects, &columns, data)) != 0)
        {
            break;
   101ec:	bf00      	nop
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
            break;
        }
        ++settings->index;
    }
    arr_empty(&columns);
   101ee:	f107 0314 	add.w	r3, r7, #20
   101f2:	4618      	mov	r0, r3
   101f4:	f7fc fac2 	bl	c77c <arr_empty>
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   101fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   101fe:	d104      	bne.n	1020a <profileGeneric_getData+0x142>
    {
        data->size = pduSize;
   10200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10202:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   10204:	80da      	strh	r2, [r3, #6]
        ret = 0;
   10206:	2300      	movs	r3, #0
   10208:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (e->transactionEndIndex != 0)
   1020a:	68bb      	ldr	r3, [r7, #8]
   1020c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   10210:	2b00      	cmp	r3, #0
   10212:	d009      	beq.n	10228 <profileGeneric_getData+0x160>
    {
        e->transactionStartIndex += (unsigned short)pos;
   10214:	68bb      	ldr	r3, [r7, #8]
   10216:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   1021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1021c:	b29b      	uxth	r3, r3
   1021e:	4413      	add	r3, r2
   10220:	b29a      	uxth	r2, r3
   10222:	68bb      	ldr	r3, [r7, #8]
   10224:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }
    return ret;
   10228:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   1022a:	4618      	mov	r0, r3
   1022c:	3730      	adds	r7, #48	; 0x30
   1022e:	46bd      	mov	sp, r7
   10230:	bd80      	pop	{r7, pc}
   10232:	bf00      	nop

00010234 <getProfileGenericData>:
int getProfileGenericData(
    dlmsSettings* settings,
    gxProfileGeneric* object,
    gxValueEventArg *e,
    gxByteBuffer* reply)
{
   10234:	b5b0      	push	{r4, r5, r7, lr}
   10236:	b0b4      	sub	sp, #208	; 0xd0
   10238:	af02      	add	r7, sp, #8
   1023a:	60f8      	str	r0, [r7, #12]
   1023c:	60b9      	str	r1, [r7, #8]
   1023e:	607a      	str	r2, [r7, #4]
   10240:	603b      	str	r3, [r7, #0]
    variantArray *row;
    dlmsVARIANT *it;
    gxByteBuffer bb;
    gxArray captureObjects;
    //If all data is read.
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   10242:	687b      	ldr	r3, [r7, #4]
   10244:	7e9b      	ldrb	r3, [r3, #26]
   10246:	2b00      	cmp	r3, #0
   10248:	d009      	beq.n	1025e <getProfileGenericData+0x2a>
   1024a:	687b      	ldr	r3, [r7, #4]
   1024c:	f893 3020 	ldrb.w	r3, [r3, #32]
   10250:	2b00      	cmp	r3, #0
   10252:	d004      	beq.n	1025e <getProfileGenericData+0x2a>
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   1025a:	2b00      	cmp	r3, #0
   1025c:	d00e      	beq.n	1027c <getProfileGenericData+0x48>
    {
        return profileGeneric_getData(settings, e, &object->buffer, &object->captureObjects, reply);
   1025e:	68bb      	ldr	r3, [r7, #8]
   10260:	f103 0210 	add.w	r2, r3, #16
   10264:	68bb      	ldr	r3, [r7, #8]
   10266:	f103 0120 	add.w	r1, r3, #32
   1026a:	683b      	ldr	r3, [r7, #0]
   1026c:	9300      	str	r3, [sp, #0]
   1026e:	460b      	mov	r3, r1
   10270:	6879      	ldr	r1, [r7, #4]
   10272:	68f8      	ldr	r0, [r7, #12]
   10274:	f7ff ff28 	bl	100c8 <profileGeneric_getData>
   10278:	4603      	mov	r3, r0
   1027a:	e27e      	b.n	1077a <getProfileGenericData+0x546>
    }
    arr_init(&captureObjects);
   1027c:	f107 0384 	add.w	r3, r7, #132	; 0x84
   10280:	4618      	mov	r0, r3
   10282:	f7fc f9b3 	bl	c5ec <arr_init>
    if ((ret = cosem_getColumns(&object->captureObjects, e->selector, &e->parameters, &captureObjects)) == 0)
   10286:	68bb      	ldr	r3, [r7, #8]
   10288:	f103 0020 	add.w	r0, r3, #32
   1028c:	687b      	ldr	r3, [r7, #4]
   1028e:	7e99      	ldrb	r1, [r3, #26]
   10290:	687b      	ldr	r3, [r7, #4]
   10292:	f103 0220 	add.w	r2, r3, #32
   10296:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1029a:	f7ff fdb5 	bl	fe08 <cosem_getColumns>
   1029e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   102a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   102a6:	2b00      	cmp	r3, #0
   102a8:	f040 825b 	bne.w	10762 <getProfileGenericData+0x52e>
    {
        //Do not clear items.
        arr_init(&items);
   102ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   102b0:	4618      	mov	r0, r3
   102b2:	f7fc f99b 	bl	c5ec <arr_init>
        if (e->selector == 1) //Read by range
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	7e9b      	ldrb	r3, [r3, #26]
   102ba:	2b01      	cmp	r3, #1
   102bc:	f040 8193 	bne.w	105e6 <getProfileGenericData+0x3b2>
        {
            unsigned short cnt = 0;
   102c0:	2300      	movs	r3, #0
   102c2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
            gxtime start, end;
            dlmsVARIANT value;
            var_init(&value);
   102c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
   102ca:	4618      	mov	r0, r3
   102cc:	f015 ff2c 	bl	26128 <var_init>
            if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   102d0:	687b      	ldr	r3, [r7, #4]
   102d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102d4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   102d8:	2101      	movs	r1, #1
   102da:	4618      	mov	r0, r3
   102dc:	f016 fdc6 	bl	26e6c <va_getByIndex>
   102e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   102e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   102e8:	2b00      	cmp	r3, #0
   102ea:	f040 823a 	bne.w	10762 <getProfileGenericData+0x52e>
            {
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   102ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   102f2:	781b      	ldrb	r3, [r3, #0]
   102f4:	2b06      	cmp	r3, #6
   102f6:	d10a      	bne.n	1030e <getProfileGenericData+0xda>
                {
                    time_init4(&start, (time_t)it->ulVal);
   102f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   102fc:	689b      	ldr	r3, [r3, #8]
   102fe:	461a      	mov	r2, r3
   10300:	f107 0310 	add.w	r3, r7, #16
   10304:	4611      	mov	r1, r2
   10306:	4618      	mov	r0, r3
   10308:	f7f6 f87c 	bl	6404 <time_init4>
   1030c:	e02c      	b.n	10368 <getProfileGenericData+0x134>
                }
                else
                {
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   1030e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   10312:	689b      	ldr	r3, [r3, #8]
   10314:	f107 0270 	add.w	r2, r7, #112	; 0x70
   10318:	2119      	movs	r1, #25
   1031a:	4618      	mov	r0, r3
   1031c:	f7f9 fa9a 	bl	9854 <dlms_changeType>
   10320:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10328:	2b00      	cmp	r3, #0
   1032a:	d00c      	beq.n	10346 <getProfileGenericData+0x112>
                    {
                        arr_empty(&items);
   1032c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   10330:	4618      	mov	r0, r3
   10332:	f7fc fa23 	bl	c77c <arr_empty>
                        var_clear(&value);
   10336:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1033a:	4618      	mov	r0, r3
   1033c:	f015 ff04 	bl	26148 <var_clear>
                        return ret;
   10340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10344:	e219      	b.n	1077a <getProfileGenericData+0x546>
                    }
                    start = *value.dateTime;
   10346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   10348:	f107 0410 	add.w	r4, r7, #16
   1034c:	461d      	mov	r5, r3
   1034e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10356:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1035a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    var_clear(&value);
   1035e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10362:	4618      	mov	r0, r3
   10364:	f015 fef0 	bl	26148 <var_clear>
                }
                if ((ret = va_getByIndex(e->parameters.Arr, 2, &it)) != 0)
   10368:	687b      	ldr	r3, [r7, #4]
   1036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1036c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   10370:	2102      	movs	r1, #2
   10372:	4618      	mov	r0, r3
   10374:	f016 fd7a 	bl	26e6c <va_getByIndex>
   10378:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   1037c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10380:	2b00      	cmp	r3, #0
   10382:	d002      	beq.n	1038a <getProfileGenericData+0x156>
                {
                    return ret;
   10384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10388:	e1f7      	b.n	1077a <getProfileGenericData+0x546>
                }
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   1038a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1038e:	781b      	ldrb	r3, [r3, #0]
   10390:	2b06      	cmp	r3, #6
   10392:	d10a      	bne.n	103aa <getProfileGenericData+0x176>
                {
                    time_init4(&end, (time_t)it->ulVal);
   10394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   10398:	689b      	ldr	r3, [r3, #8]
   1039a:	461a      	mov	r2, r3
   1039c:	f107 0340 	add.w	r3, r7, #64	; 0x40
   103a0:	4611      	mov	r1, r2
   103a2:	4618      	mov	r0, r3
   103a4:	f7f6 f82e 	bl	6404 <time_init4>
   103a8:	e0aa      	b.n	10500 <getProfileGenericData+0x2cc>
                }
                else
                {
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   103aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   103ae:	689b      	ldr	r3, [r3, #8]
   103b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   103b4:	2119      	movs	r1, #25
   103b6:	4618      	mov	r0, r3
   103b8:	f7f9 fa4c 	bl	9854 <dlms_changeType>
   103bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   103c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   103c4:	2b00      	cmp	r3, #0
   103c6:	d00c      	beq.n	103e2 <getProfileGenericData+0x1ae>
                    {
                        arr_empty(&items);
   103c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   103cc:	4618      	mov	r0, r3
   103ce:	f7fc f9d5 	bl	c77c <arr_empty>
                        var_clear(&value);
   103d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   103d6:	4618      	mov	r0, r3
   103d8:	f015 feb6 	bl	26148 <var_clear>
                        return ret;
   103dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   103e0:	e1cb      	b.n	1077a <getProfileGenericData+0x546>
                    }
                    end = *value.dateTime;
   103e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   103e4:	f107 0440 	add.w	r4, r7, #64	; 0x40
   103e8:	461d      	mov	r5, r3
   103ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   103ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   103ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   103f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   103f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   103f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    var_clear(&value);
   103fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
   103fe:	4618      	mov	r0, r3
   10400:	f015 fea2 	bl	26148 <var_clear>
                }
                for (; settings->position < object->buffer.size; ++settings->position)
   10404:	e07c      	b.n	10500 <getProfileGenericData+0x2cc>
                {
                    if ((ret = arr_getByIndex(&object->buffer, settings->position, (void**)&row)) != 0 ||
   10406:	68bb      	ldr	r3, [r7, #8]
   10408:	f103 0010 	add.w	r0, r3, #16
   1040c:	68fb      	ldr	r3, [r7, #12]
   1040e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   10412:	4619      	mov	r1, r3
   10414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   10418:	461a      	mov	r2, r3
   1041a:	f7fc f9ef 	bl	c7fc <arr_getByIndex>
   1041e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10426:	2b00      	cmp	r3, #0
   10428:	d172      	bne.n	10510 <getProfileGenericData+0x2dc>
                        (ret = va_getByIndex(row, 0, &it)) != 0)
   1042a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                    end = *value.dateTime;
                    var_clear(&value);
                }
                for (; settings->position < object->buffer.size; ++settings->position)
                {
                    if ((ret = arr_getByIndex(&object->buffer, settings->position, (void**)&row)) != 0 ||
   1042e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   10432:	2100      	movs	r1, #0
   10434:	4618      	mov	r0, r3
   10436:	f016 fd19 	bl	26e6c <va_getByIndex>
   1043a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   1043e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10442:	2b00      	cmp	r3, #0
   10444:	d164      	bne.n	10510 <getProfileGenericData+0x2dc>
                        (ret = va_getByIndex(row, 0, &it)) != 0)
                    {
                        break;
                    }
                    if (time_compare(&start, it->dateTime) != -1 && time_compare(it->dateTime, &end) != -1)
   10446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1044a:	689a      	ldr	r2, [r3, #8]
   1044c:	f107 0310 	add.w	r3, r7, #16
   10450:	4611      	mov	r1, r2
   10452:	4618      	mov	r0, r3
   10454:	f7f6 facc 	bl	69f0 <time_compare>
   10458:	4603      	mov	r3, r0
   1045a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1045e:	d047      	beq.n	104f0 <getProfileGenericData+0x2bc>
   10460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   10464:	689b      	ldr	r3, [r3, #8]
   10466:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1046a:	4611      	mov	r1, r2
   1046c:	4618      	mov	r0, r3
   1046e:	f7f6 fabf 	bl	69f0 <time_compare>
   10472:	4603      	mov	r3, r0
   10474:	f1b3 3fff 	cmp.w	r3, #4294967295
   10478:	d03a      	beq.n	104f0 <getProfileGenericData+0x2bc>
                    {
                        ++cnt;
   1047a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
   1047e:	3301      	adds	r3, #1
   10480:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
                        //If Size of PDU is full.
                        if (reply->size < settings->maxPduSize)
   10484:	683b      	ldr	r3, [r7, #0]
   10486:	88da      	ldrh	r2, [r3, #6]
   10488:	68fb      	ldr	r3, [r7, #12]
   1048a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   1048e:	429a      	cmp	r2, r3
   10490:	d220      	bcs.n	104d4 <getProfileGenericData+0x2a0>
                        {
                            ++settings->index;
   10492:	68fb      	ldr	r3, [r7, #12]
   10494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   10498:	3301      	adds	r3, #1
   1049a:	b29a      	uxth	r2, r3
   1049c:	68fb      	ldr	r3, [r7, #12]
   1049e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
                            if ((ret = cosem_getRow(&object->buffer, settings->position, &captureObjects, &object->captureObjects, reply)) != 0)
   104a2:	68bb      	ldr	r3, [r7, #8]
   104a4:	f103 0010 	add.w	r0, r3, #16
   104a8:	68fb      	ldr	r3, [r7, #12]
   104aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   104ae:	461c      	mov	r4, r3
   104b0:	68bb      	ldr	r3, [r7, #8]
   104b2:	f103 0120 	add.w	r1, r3, #32
   104b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
   104ba:	683b      	ldr	r3, [r7, #0]
   104bc:	9300      	str	r3, [sp, #0]
   104be:	460b      	mov	r3, r1
   104c0:	4621      	mov	r1, r4
   104c2:	f7ff fd73 	bl	ffac <cosem_getRow>
   104c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   104ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   104ce:	2b00      	cmp	r3, #0
   104d0:	d00e      	beq.n	104f0 <getProfileGenericData+0x2bc>
                            {
                                break;
   104d2:	e01d      	b.n	10510 <getProfileGenericData+0x2dc>
                            }
                        }
                        else if (settings->count != 0)
   104d4:	68fb      	ldr	r3, [r7, #12]
   104d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   104da:	2b00      	cmp	r3, #0
   104dc:	d008      	beq.n	104f0 <getProfileGenericData+0x2bc>
                        {
                            ++settings->position;
   104de:	68fb      	ldr	r3, [r7, #12]
   104e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   104e4:	3301      	adds	r3, #1
   104e6:	b29a      	uxth	r2, r3
   104e8:	68fb      	ldr	r3, [r7, #12]
   104ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
                            //We must loop items throught if count is unknown.
                            break;
   104ee:	e00f      	b.n	10510 <getProfileGenericData+0x2dc>
                        return ret;
                    }
                    end = *value.dateTime;
                    var_clear(&value);
                }
                for (; settings->position < object->buffer.size; ++settings->position)
   104f0:	68fb      	ldr	r3, [r7, #12]
   104f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   104f6:	3301      	adds	r3, #1
   104f8:	b29a      	uxth	r2, r3
   104fa:	68fb      	ldr	r3, [r7, #12]
   104fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   10500:	68fb      	ldr	r3, [r7, #12]
   10502:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   10506:	68bb      	ldr	r3, [r7, #8]
   10508:	8b1b      	ldrh	r3, [r3, #24]
   1050a:	429a      	cmp	r2, r3
   1050c:	f4ff af7b 	bcc.w	10406 <getProfileGenericData+0x1d2>
                            break;
                        }
                    }
                }
                //Update count if items are read first time.
                if (ret == 0 && settings->count == 0)
   10510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10514:	2b00      	cmp	r3, #0
   10516:	f040 8124 	bne.w	10762 <getProfileGenericData+0x52e>
   1051a:	68fb      	ldr	r3, [r7, #12]
   1051c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   10520:	2b00      	cmp	r3, #0
   10522:	f040 811e 	bne.w	10762 <getProfileGenericData+0x52e>
                {
                    settings->count = cnt;
   10526:	68fb      	ldr	r3, [r7, #12]
   10528:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
   1052c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                    if ((ret = bb_init(&bb)) != 0 ||
   10530:	f107 0394 	add.w	r3, r7, #148	; 0x94
   10534:	4618      	mov	r0, r3
   10536:	f7f2 fbd7 	bl	2ce8 <bb_init>
   1053a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   1053e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10542:	2b00      	cmp	r3, #0
   10544:	d128      	bne.n	10598 <getProfileGenericData+0x364>
   10546:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1054a:	2101      	movs	r1, #1
   1054c:	4618      	mov	r0, r3
   1054e:	f7f2 fc61 	bl	2e14 <bb_setUInt8>
   10552:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1055a:	2b00      	cmp	r3, #0
   1055c:	d11c      	bne.n	10598 <getProfileGenericData+0x364>
                        (ret = bb_setUInt8(&bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                        (ret = hlp_setObjectCount(cnt, &bb)) != 0 ||
   1055e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
                //Update count if items are read first time.
                if (ret == 0 && settings->count == 0)
                {
                    settings->count = cnt;
                    if ((ret = bb_init(&bb)) != 0 ||
                        (ret = bb_setUInt8(&bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   10562:	f107 0294 	add.w	r2, r7, #148	; 0x94
   10566:	4611      	mov	r1, r2
   10568:	4618      	mov	r0, r3
   1056a:	f011 f9b7 	bl	218dc <hlp_setObjectCount>
   1056e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10576:	2b00      	cmp	r3, #0
   10578:	d10e      	bne.n	10598 <getProfileGenericData+0x364>
                        (ret = hlp_setObjectCount(cnt, &bb)) != 0 ||
                        (ret = bb_set(&bb, reply->data, reply->size)) != 0)
   1057a:	683b      	ldr	r3, [r7, #0]
   1057c:	6819      	ldr	r1, [r3, #0]
   1057e:	683b      	ldr	r3, [r7, #0]
   10580:	88da      	ldrh	r2, [r3, #6]
                if (ret == 0 && settings->count == 0)
                {
                    settings->count = cnt;
                    if ((ret = bb_init(&bb)) != 0 ||
                        (ret = bb_setUInt8(&bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                        (ret = hlp_setObjectCount(cnt, &bb)) != 0 ||
   10582:	f107 0394 	add.w	r3, r7, #148	; 0x94
   10586:	4618      	mov	r0, r3
   10588:	f7f2 ffea 	bl	3560 <bb_set>
   1058c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10594:	2b00      	cmp	r3, #0
   10596:	d002      	beq.n	1059e <getProfileGenericData+0x36a>
                        (ret = bb_set(&bb, reply->data, reply->size)) != 0)
                    {
                        return ret;
   10598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1059c:	e0ed      	b.n	1077a <getProfileGenericData+0x546>
                    }
                    reply->position = reply->size = 0;
   1059e:	683b      	ldr	r3, [r7, #0]
   105a0:	2200      	movs	r2, #0
   105a2:	80da      	strh	r2, [r3, #6]
   105a4:	683b      	ldr	r3, [r7, #0]
   105a6:	88da      	ldrh	r2, [r3, #6]
   105a8:	683b      	ldr	r3, [r7, #0]
   105aa:	811a      	strh	r2, [r3, #8]
                    if ((ret = bb_set(reply, bb.data, bb.size)) != 0 ||
   105ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   105b0:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
   105b4:	4619      	mov	r1, r3
   105b6:	6838      	ldr	r0, [r7, #0]
   105b8:	f7f2 ffd2 	bl	3560 <bb_set>
   105bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   105c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   105c4:	2b00      	cmp	r3, #0
   105c6:	d10b      	bne.n	105e0 <getProfileGenericData+0x3ac>
   105c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
   105cc:	4618      	mov	r0, r3
   105ce:	f7f3 f8c9 	bl	3764 <bb_clear>
   105d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   105d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   105da:	2b00      	cmp	r3, #0
   105dc:	f000 80c1 	beq.w	10762 <getProfileGenericData+0x52e>
                        (ret = bb_clear(&bb)) != 0)
                    {
                        return ret;
   105e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   105e4:	e0c9      	b.n	1077a <getProfileGenericData+0x546>
                    }
                }
            }
        }
        else if (e->selector == 2) //Read by entry.
   105e6:	687b      	ldr	r3, [r7, #4]
   105e8:	7e9b      	ldrb	r3, [r3, #26]
   105ea:	2b02      	cmp	r3, #2
   105ec:	f040 80b5 	bne.w	1075a <getProfileGenericData+0x526>
        {
            int start, count;
            if ((ret = va_getByIndex(e->parameters.Arr, 0, &it)) == 0)
   105f0:	687b      	ldr	r3, [r7, #4]
   105f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105f4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   105f8:	2100      	movs	r1, #0
   105fa:	4618      	mov	r0, r3
   105fc:	f016 fc36 	bl	26e6c <va_getByIndex>
   10600:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10608:	2b00      	cmp	r3, #0
   1060a:	f040 80aa 	bne.w	10762 <getProfileGenericData+0x52e>
            {
                start = var_toInteger(it);
   1060e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   10612:	4618      	mov	r0, r3
   10614:	f016 fa5a 	bl	26acc <var_toInteger>
   10618:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                if (start == 0)
   1061c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   10620:	2b00      	cmp	r3, #0
   10622:	d102      	bne.n	1062a <getProfileGenericData+0x3f6>
                {
                    start = 1;
   10624:	2301      	movs	r3, #1
   10626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                }
                if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   1062a:	687b      	ldr	r3, [r7, #4]
   1062c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1062e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   10632:	2101      	movs	r1, #1
   10634:	4618      	mov	r0, r3
   10636:	f016 fc19 	bl	26e6c <va_getByIndex>
   1063a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   1063e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10642:	2b00      	cmp	r3, #0
   10644:	f040 808d 	bne.w	10762 <getProfileGenericData+0x52e>
                {
                    count = var_toInteger(it);
   10648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1064c:	4618      	mov	r0, r3
   1064e:	f016 fa3d 	bl	26acc <var_toInteger>
   10652:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                    if (count == 0)
   10656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1065a:	2b00      	cmp	r3, #0
   1065c:	d103      	bne.n	10666 <getProfileGenericData+0x432>
                    {
                        count = object->buffer.size;
   1065e:	68bb      	ldr	r3, [r7, #8]
   10660:	8b1b      	ldrh	r3, [r3, #24]
   10662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    }
                    if (start + count > object->buffer.size + 1)
   10666:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   1066a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1066e:	441a      	add	r2, r3
   10670:	68bb      	ldr	r3, [r7, #8]
   10672:	8b1b      	ldrh	r3, [r3, #24]
   10674:	3301      	adds	r3, #1
   10676:	429a      	cmp	r2, r3
   10678:	dd03      	ble.n	10682 <getProfileGenericData+0x44e>
                    {
                        count = object->buffer.size;
   1067a:	68bb      	ldr	r3, [r7, #8]
   1067c:	8b1b      	ldrh	r3, [r3, #24]
   1067e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    }
                    if (settings->count == 0)
   10682:	68fb      	ldr	r3, [r7, #12]
   10684:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   10688:	2b00      	cmp	r3, #0
   1068a:	d15d      	bne.n	10748 <getProfileGenericData+0x514>
                    {
                        settings->count = (unsigned short)count;
   1068c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   10690:	b29a      	uxth	r2, r3
   10692:	68fb      	ldr	r3, [r7, #12]
   10694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   10698:	2101      	movs	r1, #1
   1069a:	6838      	ldr	r0, [r7, #0]
   1069c:	f7f2 fbba 	bl	2e14 <bb_setUInt8>
   106a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   106a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   106a8:	2b00      	cmp	r3, #0
   106aa:	d10c      	bne.n	106c6 <getProfileGenericData+0x492>
                            (ret = hlp_setObjectCount(settings->count, reply)) != 0)
   106ac:	68fb      	ldr	r3, [r7, #12]
   106ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
                        count = object->buffer.size;
                    }
                    if (settings->count == 0)
                    {
                        settings->count = (unsigned short)count;
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   106b2:	6839      	ldr	r1, [r7, #0]
   106b4:	4618      	mov	r0, r3
   106b6:	f011 f911 	bl	218dc <hlp_setObjectCount>
   106ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   106be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   106c2:	2b00      	cmp	r3, #0
   106c4:	d040      	beq.n	10748 <getProfileGenericData+0x514>
                            (ret = hlp_setObjectCount(settings->count, reply)) != 0)
                        {
                            return ret;
   106c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   106ca:	e056      	b.n	1077a <getProfileGenericData+0x546>
                        }
                    }
                    for (; settings->position < count; ++settings->position)
                    {
                        if ((ret = arr_getByIndex(&object->buffer, settings->position + start - 1, (void**)&row)) != 0 ||
   106cc:	68bb      	ldr	r3, [r7, #8]
   106ce:	f103 0010 	add.w	r0, r3, #16
   106d2:	68fb      	ldr	r3, [r7, #12]
   106d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   106d8:	461a      	mov	r2, r3
   106da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   106de:	4413      	add	r3, r2
   106e0:	3b01      	subs	r3, #1
   106e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
   106e6:	4619      	mov	r1, r3
   106e8:	f7fc f888 	bl	c7fc <arr_getByIndex>
   106ec:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   106f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   106f4:	2b00      	cmp	r3, #0
   106f6:	d134      	bne.n	10762 <getProfileGenericData+0x52e>
                            (ret = cosem_getRow(&object->buffer, settings->position, &captureObjects, &object->captureObjects, reply)) != 0)
   106f8:	68bb      	ldr	r3, [r7, #8]
   106fa:	f103 0010 	add.w	r0, r3, #16
   106fe:	68fb      	ldr	r3, [r7, #12]
   10700:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   10704:	461c      	mov	r4, r3
   10706:	68bb      	ldr	r3, [r7, #8]
   10708:	f103 0120 	add.w	r1, r3, #32
                            return ret;
                        }
                    }
                    for (; settings->position < count; ++settings->position)
                    {
                        if ((ret = arr_getByIndex(&object->buffer, settings->position + start - 1, (void**)&row)) != 0 ||
   1070c:	f107 0284 	add.w	r2, r7, #132	; 0x84
   10710:	683b      	ldr	r3, [r7, #0]
   10712:	9300      	str	r3, [sp, #0]
   10714:	460b      	mov	r3, r1
   10716:	4621      	mov	r1, r4
   10718:	f7ff fc48 	bl	ffac <cosem_getRow>
   1071c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   10720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   10724:	2b00      	cmp	r3, #0
   10726:	d11c      	bne.n	10762 <getProfileGenericData+0x52e>
                            (ret = cosem_getRow(&object->buffer, settings->position, &captureObjects, &object->captureObjects, reply)) != 0)
                        {
                            break;
                        }
                        ++settings->index;
   10728:	68fb      	ldr	r3, [r7, #12]
   1072a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   1072e:	3301      	adds	r3, #1
   10730:	b29a      	uxth	r2, r3
   10732:	68fb      	ldr	r3, [r7, #12]
   10734:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
                            (ret = hlp_setObjectCount(settings->count, reply)) != 0)
                        {
                            return ret;
                        }
                    }
                    for (; settings->position < count; ++settings->position)
   10738:	68fb      	ldr	r3, [r7, #12]
   1073a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   1073e:	3301      	adds	r3, #1
   10740:	b29a      	uxth	r2, r3
   10742:	68fb      	ldr	r3, [r7, #12]
   10744:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   10748:	68fb      	ldr	r3, [r7, #12]
   1074a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   1074e:	461a      	mov	r2, r3
   10750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   10754:	429a      	cmp	r2, r3
   10756:	dbb9      	blt.n	106cc <getProfileGenericData+0x498>
   10758:	e003      	b.n	10762 <getProfileGenericData+0x52e>
                }
            }
        }
        else
        {
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1075a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1075e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        }
    }
    arr_empty(&captureObjects);
   10762:	f107 0384 	add.w	r3, r7, #132	; 0x84
   10766:	4618      	mov	r0, r3
   10768:	f7fc f808 	bl	c77c <arr_empty>
    arr_empty(&items);
   1076c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   10770:	4618      	mov	r0, r3
   10772:	f7fc f803 	bl	c77c <arr_empty>
    return ret;
   10776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
}
   1077a:	4618      	mov	r0, r3
   1077c:	37c8      	adds	r7, #200	; 0xc8
   1077e:	46bd      	mov	sp, r7
   10780:	bdb0      	pop	{r4, r5, r7, pc}
   10782:	bf00      	nop

00010784 <cosem_getProfileGeneric>:

int cosem_getProfileGeneric(
    dlmsSettings* settings,
    gxValueEventArg *e)
{
   10784:	b580      	push	{r7, lr}
   10786:	b08a      	sub	sp, #40	; 0x28
   10788:	af00      	add	r7, sp, #0
   1078a:	6078      	str	r0, [r7, #4]
   1078c:	6039      	str	r1, [r7, #0]
    unsigned char empty[6] = { 0 };
   1078e:	f107 030c 	add.w	r3, r7, #12
   10792:	2200      	movs	r2, #0
   10794:	601a      	str	r2, [r3, #0]
   10796:	809a      	strh	r2, [r3, #4]
    int ret = 0;
   10798:	2300      	movs	r3, #0
   1079a:	627b      	str	r3, [r7, #36]	; 0x24
    gxProfileGeneric* object = (gxProfileGeneric*)e->target;
   1079c:	683b      	ldr	r3, [r7, #0]
   1079e:	695b      	ldr	r3, [r3, #20]
   107a0:	623b      	str	r3, [r7, #32]
    if (e->index == 2)
   107a2:	683b      	ldr	r3, [r7, #0]
   107a4:	7e1b      	ldrb	r3, [r3, #24]
   107a6:	2b02      	cmp	r3, #2
   107a8:	d118      	bne.n	107dc <cosem_getProfileGeneric+0x58>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   107aa:	683b      	ldr	r3, [r7, #0]
   107ac:	4618      	mov	r0, r3
   107ae:	f7fc f8f9 	bl	c9a4 <cosem_getByteBuffer>
   107b2:	6278      	str	r0, [r7, #36]	; 0x24
   107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107b6:	2b00      	cmp	r3, #0
   107b8:	d001      	beq.n	107be <cosem_getProfileGeneric+0x3a>
        {
            return ret;
   107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107bc:	e137      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
        }
        gxByteBuffer *data = e->value.byteArr;
   107be:	683b      	ldr	r3, [r7, #0]
   107c0:	689b      	ldr	r3, [r3, #8]
   107c2:	61fb      	str	r3, [r7, #28]
        e->byteArray = 1;
   107c4:	683b      	ldr	r3, [r7, #0]
   107c6:	2201      	movs	r2, #1
   107c8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getProfileGenericData(settings, object, e, data);
   107cc:	69fb      	ldr	r3, [r7, #28]
   107ce:	683a      	ldr	r2, [r7, #0]
   107d0:	6a39      	ldr	r1, [r7, #32]
   107d2:	6878      	ldr	r0, [r7, #4]
   107d4:	f7ff fd2e 	bl	10234 <getProfileGenericData>
   107d8:	6278      	str	r0, [r7, #36]	; 0x24
   107da:	e127      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else if (e->index == 3)
   107dc:	683b      	ldr	r3, [r7, #0]
   107de:	7e1b      	ldrb	r3, [r3, #24]
   107e0:	2b03      	cmp	r3, #3
   107e2:	d11a      	bne.n	1081a <cosem_getProfileGeneric+0x96>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   107e4:	683b      	ldr	r3, [r7, #0]
   107e6:	4618      	mov	r0, r3
   107e8:	f7fc f8dc 	bl	c9a4 <cosem_getByteBuffer>
   107ec:	6278      	str	r0, [r7, #36]	; 0x24
   107ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107f0:	2b00      	cmp	r3, #0
   107f2:	d001      	beq.n	107f8 <cosem_getProfileGeneric+0x74>
        {
            return ret;
   107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107f6:	e11a      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
        }
        gxByteBuffer *data = e->value.byteArr;
   107f8:	683b      	ldr	r3, [r7, #0]
   107fa:	689b      	ldr	r3, [r3, #8]
   107fc:	61bb      	str	r3, [r7, #24]
        e->byteArray = 1;
   107fe:	683b      	ldr	r3, [r7, #0]
   10800:	2201      	movs	r2, #1
   10802:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getColumns(settings, &object->captureObjects, data, e);
   10806:	6a3b      	ldr	r3, [r7, #32]
   10808:	f103 0120 	add.w	r1, r3, #32
   1080c:	683b      	ldr	r3, [r7, #0]
   1080e:	69ba      	ldr	r2, [r7, #24]
   10810:	6878      	ldr	r0, [r7, #4]
   10812:	f7ff f955 	bl	fac0 <getColumns>
   10816:	6278      	str	r0, [r7, #36]	; 0x24
   10818:	e108      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else if (e->index == 4)
   1081a:	683b      	ldr	r3, [r7, #0]
   1081c:	7e1b      	ldrb	r3, [r3, #24]
   1081e:	2b04      	cmp	r3, #4
   10820:	d108      	bne.n	10834 <cosem_getProfileGeneric+0xb0>
    {
        ret = var_setUInt32(&e->value, object->capturePeriod);
   10822:	683a      	ldr	r2, [r7, #0]
   10824:	6a3b      	ldr	r3, [r7, #32]
   10826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10828:	4619      	mov	r1, r3
   1082a:	4610      	mov	r0, r2
   1082c:	f015 fb9c 	bl	25f68 <var_setUInt32>
   10830:	6278      	str	r0, [r7, #36]	; 0x24
   10832:	e0fb      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else if (e->index == 5)
   10834:	683b      	ldr	r3, [r7, #0]
   10836:	7e1b      	ldrb	r3, [r3, #24]
   10838:	2b05      	cmp	r3, #5
   1083a:	d109      	bne.n	10850 <cosem_getProfileGeneric+0xcc>
    {
        ret = var_setEnum(&e->value, object->sortMethod);
   1083c:	683a      	ldr	r2, [r7, #0]
   1083e:	6a3b      	ldr	r3, [r7, #32]
   10840:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   10844:	4619      	mov	r1, r3
   10846:	4610      	mov	r0, r2
   10848:	f015 fb52 	bl	25ef0 <var_setEnum>
   1084c:	6278      	str	r0, [r7, #36]	; 0x24
   1084e:	e0ed      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else  if (e->index == 6)
   10850:	683b      	ldr	r3, [r7, #0]
   10852:	7e1b      	ldrb	r3, [r3, #24]
   10854:	2b06      	cmp	r3, #6
   10856:	f040 80cc 	bne.w	109f2 <cosem_getProfileGeneric+0x26e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1085a:	683b      	ldr	r3, [r7, #0]
   1085c:	4618      	mov	r0, r3
   1085e:	f7fc f8a1 	bl	c9a4 <cosem_getByteBuffer>
   10862:	6278      	str	r0, [r7, #36]	; 0x24
   10864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10866:	2b00      	cmp	r3, #0
   10868:	d001      	beq.n	1086e <cosem_getProfileGeneric+0xea>
        {
            return ret;
   1086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1086c:	e0df      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
        }
        gxByteBuffer *data = e->value.byteArr;
   1086e:	683b      	ldr	r3, [r7, #0]
   10870:	689b      	ldr	r3, [r3, #8]
   10872:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
   10874:	683b      	ldr	r3, [r7, #0]
   10876:	2201      	movs	r2, #1
   10878:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1087c:	2102      	movs	r1, #2
   1087e:	6978      	ldr	r0, [r7, #20]
   10880:	f7f2 fac8 	bl	2e14 <bb_setUInt8>
   10884:	6278      	str	r0, [r7, #36]	; 0x24
   10886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10888:	2b00      	cmp	r3, #0
   1088a:	d107      	bne.n	1089c <cosem_getProfileGeneric+0x118>
   1088c:	2104      	movs	r1, #4
   1088e:	6978      	ldr	r0, [r7, #20]
   10890:	f7f2 fac0 	bl	2e14 <bb_setUInt8>
   10894:	6278      	str	r0, [r7, #36]	; 0x24
   10896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10898:	2b00      	cmp	r3, #0
   1089a:	d001      	beq.n	108a0 <cosem_getProfileGeneric+0x11c>
            (ret = bb_setUInt8(data, 4)) != 0)
        {
            return ret;
   1089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1089e:	e0c6      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
        }
        if (object->sortObject == NULL)
   108a0:	6a3b      	ldr	r3, [r7, #32]
   108a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   108a4:	2b00      	cmp	r3, #0
   108a6:	d14c      	bne.n	10942 <cosem_getProfileGeneric+0x1be>
        {
            //ClassID
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   108a8:	2112      	movs	r1, #18
   108aa:	6978      	ldr	r0, [r7, #20]
   108ac:	f7f2 fab2 	bl	2e14 <bb_setUInt8>
   108b0:	6278      	str	r0, [r7, #36]	; 0x24
   108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108b4:	2b00      	cmp	r3, #0
   108b6:	d142      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
   108b8:	2100      	movs	r1, #0
   108ba:	6978      	ldr	r0, [r7, #20]
   108bc:	f7f2 fb3c 	bl	2f38 <bb_setUInt16>
   108c0:	6278      	str	r0, [r7, #36]	; 0x24
   108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108c4:	2b00      	cmp	r3, #0
   108c6:	d13a      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   108c8:	2109      	movs	r1, #9
   108ca:	6978      	ldr	r0, [r7, #20]
   108cc:	f7f2 faa2 	bl	2e14 <bb_setUInt8>
   108d0:	6278      	str	r0, [r7, #36]	; 0x24
   108d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108d4:	2b00      	cmp	r3, #0
   108d6:	d132      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   108d8:	2106      	movs	r1, #6
   108da:	6978      	ldr	r0, [r7, #20]
   108dc:	f7f2 fa9a 	bl	2e14 <bb_setUInt8>
   108e0:	6278      	str	r0, [r7, #36]	; 0x24
   108e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108e4:	2b00      	cmp	r3, #0
   108e6:	d12a      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   108e8:	f107 030c 	add.w	r3, r7, #12
   108ec:	2206      	movs	r2, #6
   108ee:	4619      	mov	r1, r3
   108f0:	6978      	ldr	r0, [r7, #20]
   108f2:	f7f2 fe35 	bl	3560 <bb_set>
   108f6:	6278      	str	r0, [r7, #36]	; 0x24
   108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108fa:	2b00      	cmp	r3, #0
   108fc:	d11f      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                (ret = bb_set(data, empty, 6)) != 0 ||
   108fe:	210f      	movs	r1, #15
   10900:	6978      	ldr	r0, [r7, #20]
   10902:	f7f2 fa87 	bl	2e14 <bb_setUInt8>
   10906:	6278      	str	r0, [r7, #36]	; 0x24
   10908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1090a:	2b00      	cmp	r3, #0
   1090c:	d117      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                //Selected Attribute Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   1090e:	2100      	movs	r1, #0
   10910:	6978      	ldr	r0, [r7, #20]
   10912:	f7f2 fa7f 	bl	2e14 <bb_setUInt8>
   10916:	6278      	str	r0, [r7, #36]	; 0x24
   10918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1091a:	2b00      	cmp	r3, #0
   1091c:	d10f      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   1091e:	2112      	movs	r1, #18
   10920:	6978      	ldr	r0, [r7, #20]
   10922:	f7f2 fa77 	bl	2e14 <bb_setUInt8>
   10926:	6278      	str	r0, [r7, #36]	; 0x24
   10928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1092a:	2b00      	cmp	r3, #0
   1092c:	d107      	bne.n	1093e <cosem_getProfileGeneric+0x1ba>
                //Selected Data Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1092e:	2100      	movs	r1, #0
   10930:	6978      	ldr	r0, [r7, #20]
   10932:	f7f2 fb01 	bl	2f38 <bb_setUInt16>
   10936:	6278      	str	r0, [r7, #36]	; 0x24
   10938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1093a:	2b00      	cmp	r3, #0
   1093c:	d076      	beq.n	10a2c <cosem_getProfileGeneric+0x2a8>
                (ret = bb_setUInt16(data, 0)) != 0)
            {
                return ret;
   1093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10940:	e075      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
            }
        }
        else
        {
            //ClassID
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   10942:	2112      	movs	r1, #18
   10944:	6978      	ldr	r0, [r7, #20]
   10946:	f7f2 fa65 	bl	2e14 <bb_setUInt8>
   1094a:	6278      	str	r0, [r7, #36]	; 0x24
   1094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1094e:	2b00      	cmp	r3, #0
   10950:	d14d      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   10952:	6a3b      	ldr	r3, [r7, #32]
   10954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10956:	781b      	ldrb	r3, [r3, #0]
   10958:	b29b      	uxth	r3, r3
            }
        }
        else
        {
            //ClassID
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1095a:	4619      	mov	r1, r3
   1095c:	6978      	ldr	r0, [r7, #20]
   1095e:	f7f2 faeb 	bl	2f38 <bb_setUInt16>
   10962:	6278      	str	r0, [r7, #36]	; 0x24
   10964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10966:	2b00      	cmp	r3, #0
   10968:	d141      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   1096a:	2109      	movs	r1, #9
   1096c:	6978      	ldr	r0, [r7, #20]
   1096e:	f7f2 fa51 	bl	2e14 <bb_setUInt8>
   10972:	6278      	str	r0, [r7, #36]	; 0x24
   10974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10976:	2b00      	cmp	r3, #0
   10978:	d139      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1097a:	2106      	movs	r1, #6
   1097c:	6978      	ldr	r0, [r7, #20]
   1097e:	f7f2 fa49 	bl	2e14 <bb_setUInt8>
   10982:	6278      	str	r0, [r7, #36]	; 0x24
   10984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10986:	2b00      	cmp	r3, #0
   10988:	d131      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   1098a:	6a3b      	ldr	r3, [r7, #32]
   1098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1098e:	3306      	adds	r3, #6
            //ClassID
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   10990:	2206      	movs	r2, #6
   10992:	4619      	mov	r1, r3
   10994:	6978      	ldr	r0, [r7, #20]
   10996:	f7f2 fde3 	bl	3560 <bb_set>
   1099a:	6278      	str	r0, [r7, #36]	; 0x24
   1099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1099e:	2b00      	cmp	r3, #0
   109a0:	d125      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   109a2:	210f      	movs	r1, #15
   109a4:	6978      	ldr	r0, [r7, #20]
   109a6:	f7f2 fa35 	bl	2e14 <bb_setUInt8>
   109aa:	6278      	str	r0, [r7, #36]	; 0x24
   109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109ae:	2b00      	cmp	r3, #0
   109b0:	d11d      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                //Selected Attribute Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   109b2:	6a3b      	ldr	r3, [r7, #32]
   109b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
                //Selected Attribute Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   109b8:	4619      	mov	r1, r3
   109ba:	6978      	ldr	r0, [r7, #20]
   109bc:	f7f2 fa2a 	bl	2e14 <bb_setUInt8>
   109c0:	6278      	str	r0, [r7, #36]	; 0x24
   109c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109c4:	2b00      	cmp	r3, #0
   109c6:	d112      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   109c8:	2112      	movs	r1, #18
   109ca:	6978      	ldr	r0, [r7, #20]
   109cc:	f7f2 fa22 	bl	2e14 <bb_setUInt8>
   109d0:	6278      	str	r0, [r7, #36]	; 0x24
   109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109d4:	2b00      	cmp	r3, #0
   109d6:	d10a      	bne.n	109ee <cosem_getProfileGeneric+0x26a>
                //Selected Data Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   109d8:	6a3b      	ldr	r3, [r7, #32]
   109da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
                //Selected Attribute Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
                //Selected Data Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   109de:	4619      	mov	r1, r3
   109e0:	6978      	ldr	r0, [r7, #20]
   109e2:	f7f2 faa9 	bl	2f38 <bb_setUInt16>
   109e6:	6278      	str	r0, [r7, #36]	; 0x24
   109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109ea:	2b00      	cmp	r3, #0
   109ec:	d01e      	beq.n	10a2c <cosem_getProfileGeneric+0x2a8>
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
            {
                return ret;
   109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109f0:	e01d      	b.n	10a2e <cosem_getProfileGeneric+0x2aa>
            }
        }
    }
    else if (e->index == 7)
   109f2:	683b      	ldr	r3, [r7, #0]
   109f4:	7e1b      	ldrb	r3, [r3, #24]
   109f6:	2b07      	cmp	r3, #7
   109f8:	d108      	bne.n	10a0c <cosem_getProfileGeneric+0x288>
    {
        ret = var_setUInt32(&e->value, object->entriesInUse);
   109fa:	683a      	ldr	r2, [r7, #0]
   109fc:	6a3b      	ldr	r3, [r7, #32]
   109fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10a00:	4619      	mov	r1, r3
   10a02:	4610      	mov	r0, r2
   10a04:	f015 fab0 	bl	25f68 <var_setUInt32>
   10a08:	6278      	str	r0, [r7, #36]	; 0x24
   10a0a:	e00f      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else if (e->index == 8)
   10a0c:	683b      	ldr	r3, [r7, #0]
   10a0e:	7e1b      	ldrb	r3, [r3, #24]
   10a10:	2b08      	cmp	r3, #8
   10a12:	d108      	bne.n	10a26 <cosem_getProfileGeneric+0x2a2>
    {
        ret = var_setUInt32(&e->value, object->profileEntries);
   10a14:	683a      	ldr	r2, [r7, #0]
   10a16:	6a3b      	ldr	r3, [r7, #32]
   10a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10a1a:	4619      	mov	r1, r3
   10a1c:	4610      	mov	r0, r2
   10a1e:	f015 faa3 	bl	25f68 <var_setUInt32>
   10a22:	6278      	str	r0, [r7, #36]	; 0x24
   10a24:	e002      	b.n	10a2c <cosem_getProfileGeneric+0x2a8>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   10a26:	f44f 7381 	mov.w	r3, #258	; 0x102
   10a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   10a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10a2e:	4618      	mov	r0, r3
   10a30:	3728      	adds	r7, #40	; 0x28
   10a32:	46bd      	mov	sp, r7
   10a34:	bd80      	pop	{r7, pc}
   10a36:	bf00      	nop

00010a38 <cosem_getDisconnectControl>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_DISCONNECT_CONTROL
int cosem_getDisconnectControl(
    gxValueEventArg *e)
{
   10a38:	b580      	push	{r7, lr}
   10a3a:	b084      	sub	sp, #16
   10a3c:	af00      	add	r7, sp, #0
   10a3e:	6078      	str	r0, [r7, #4]
    int ret = 0;
   10a40:	2300      	movs	r3, #0
   10a42:	60fb      	str	r3, [r7, #12]
    gxDisconnectControl* object = (gxDisconnectControl*)e->target;
   10a44:	687b      	ldr	r3, [r7, #4]
   10a46:	695b      	ldr	r3, [r3, #20]
   10a48:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
   10a4a:	687b      	ldr	r3, [r7, #4]
   10a4c:	7e1b      	ldrb	r3, [r3, #24]
   10a4e:	2b02      	cmp	r3, #2
   10a50:	d108      	bne.n	10a64 <cosem_getDisconnectControl+0x2c>
    {
        ret = var_setBoolean(&e->value, object->outputState);
   10a52:	687a      	ldr	r2, [r7, #4]
   10a54:	68bb      	ldr	r3, [r7, #8]
   10a56:	7c1b      	ldrb	r3, [r3, #16]
   10a58:	4619      	mov	r1, r3
   10a5a:	4610      	mov	r0, r2
   10a5c:	f017 fbae 	bl	281bc <var_setBoolean>
   10a60:	60f8      	str	r0, [r7, #12]
   10a62:	e01c      	b.n	10a9e <cosem_getDisconnectControl+0x66>
    }
    else if (e->index == 3)
   10a64:	687b      	ldr	r3, [r7, #4]
   10a66:	7e1b      	ldrb	r3, [r3, #24]
   10a68:	2b03      	cmp	r3, #3
   10a6a:	d108      	bne.n	10a7e <cosem_getDisconnectControl+0x46>
    {
        ret = var_setEnum(&e->value, object->controlState);
   10a6c:	687a      	ldr	r2, [r7, #4]
   10a6e:	68bb      	ldr	r3, [r7, #8]
   10a70:	7c5b      	ldrb	r3, [r3, #17]
   10a72:	4619      	mov	r1, r3
   10a74:	4610      	mov	r0, r2
   10a76:	f015 fa3b 	bl	25ef0 <var_setEnum>
   10a7a:	60f8      	str	r0, [r7, #12]
   10a7c:	e00f      	b.n	10a9e <cosem_getDisconnectControl+0x66>
    }
    else if (e->index == 4)
   10a7e:	687b      	ldr	r3, [r7, #4]
   10a80:	7e1b      	ldrb	r3, [r3, #24]
   10a82:	2b04      	cmp	r3, #4
   10a84:	d108      	bne.n	10a98 <cosem_getDisconnectControl+0x60>
    {
        ret = var_setEnum(&e->value, object->controlMode);
   10a86:	687a      	ldr	r2, [r7, #4]
   10a88:	68bb      	ldr	r3, [r7, #8]
   10a8a:	7c9b      	ldrb	r3, [r3, #18]
   10a8c:	4619      	mov	r1, r3
   10a8e:	4610      	mov	r0, r2
   10a90:	f015 fa2e 	bl	25ef0 <var_setEnum>
   10a94:	60f8      	str	r0, [r7, #12]
   10a96:	e002      	b.n	10a9e <cosem_getDisconnectControl+0x66>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   10a98:	f44f 7381 	mov.w	r3, #258	; 0x102
   10a9c:	e000      	b.n	10aa0 <cosem_getDisconnectControl+0x68>
    }
    return ret;
   10a9e:	68fb      	ldr	r3, [r7, #12]
}
   10aa0:	4618      	mov	r0, r3
   10aa2:	3710      	adds	r7, #16
   10aa4:	46bd      	mov	sp, r7
   10aa6:	bd80      	pop	{r7, pc}

00010aa8 <cosem_getLimiter>:
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
int cosem_getLimiter(
    gxValueEventArg *e)
{
   10aa8:	b580      	push	{r7, lr}
   10aaa:	b090      	sub	sp, #64	; 0x40
   10aac:	af00      	add	r7, sp, #0
   10aae:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   10ab0:	2300      	movs	r3, #0
   10ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    unsigned char empty[6] = { 0 };
   10ab4:	f107 0320 	add.w	r3, r7, #32
   10ab8:	2200      	movs	r2, #0
   10aba:	601a      	str	r2, [r3, #0]
   10abc:	809a      	strh	r2, [r3, #4]
    dlmsVARIANT tmp;
    dlmsVARIANT *it;
    if (e->index == 2)
   10abe:	687b      	ldr	r3, [r7, #4]
   10ac0:	7e1b      	ldrb	r3, [r3, #24]
   10ac2:	2b02      	cmp	r3, #2
   10ac4:	f040 80a6 	bne.w	10c14 <cosem_getLimiter+0x16c>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   10ac8:	687b      	ldr	r3, [r7, #4]
   10aca:	4618      	mov	r0, r3
   10acc:	f7fb ff6a 	bl	c9a4 <cosem_getByteBuffer>
   10ad0:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d001      	beq.n	10adc <cosem_getLimiter+0x34>
        {
            return ret;
   10ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ada:	e271      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        gxByteBuffer *data = e->value.byteArr;
   10adc:	687b      	ldr	r3, [r7, #4]
   10ade:	689b      	ldr	r3, [r3, #8]
   10ae0:	637b      	str	r3, [r7, #52]	; 0x34
        e->byteArray = 1;
   10ae2:	687b      	ldr	r3, [r7, #4]
   10ae4:	2201      	movs	r2, #1
   10ae6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   10aea:	2102      	movs	r1, #2
   10aec:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10aee:	f7f2 f991 	bl	2e14 <bb_setUInt8>
   10af2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10af6:	2b00      	cmp	r3, #0
   10af8:	d10f      	bne.n	10b1a <cosem_getLimiter+0x72>
   10afa:	2103      	movs	r1, #3
   10afc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10afe:	f7f2 f989 	bl	2e14 <bb_setUInt8>
   10b02:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b06:	2b00      	cmp	r3, #0
   10b08:	d107      	bne.n	10b1a <cosem_getLimiter+0x72>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   10b0a:	2112      	movs	r1, #18
   10b0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b0e:	f7f2 f981 	bl	2e14 <bb_setUInt8>
   10b12:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b16:	2b00      	cmp	r3, #0
   10b18:	d001      	beq.n	10b1e <cosem_getLimiter+0x76>
            //objectType
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0)
        {
            return ret;
   10b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b1c:	e250      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        if (((gxLimiter*)e->target)->monitoredValue == NULL)
   10b1e:	687b      	ldr	r3, [r7, #4]
   10b20:	695b      	ldr	r3, [r3, #20]
   10b22:	691b      	ldr	r3, [r3, #16]
   10b24:	2b00      	cmp	r3, #0
   10b26:	d135      	bne.n	10b94 <cosem_getLimiter+0xec>
        {
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
   10b28:	2100      	movs	r1, #0
   10b2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b2c:	f7f2 fa04 	bl	2f38 <bb_setUInt16>
   10b30:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b34:	2b00      	cmp	r3, #0
   10b36:	d12b      	bne.n	10b90 <cosem_getLimiter+0xe8>
   10b38:	2109      	movs	r1, #9
   10b3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b3c:	f7f2 f96a 	bl	2e14 <bb_setUInt8>
   10b40:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b44:	2b00      	cmp	r3, #0
   10b46:	d123      	bne.n	10b90 <cosem_getLimiter+0xe8>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10b48:	2106      	movs	r1, #6
   10b4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b4c:	f7f2 f962 	bl	2e14 <bb_setUInt8>
   10b50:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b54:	2b00      	cmp	r3, #0
   10b56:	d11b      	bne.n	10b90 <cosem_getLimiter+0xe8>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   10b58:	f107 0320 	add.w	r3, r7, #32
   10b5c:	2206      	movs	r2, #6
   10b5e:	4619      	mov	r1, r3
   10b60:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b62:	f7f2 fcfd 	bl	3560 <bb_set>
   10b66:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d110      	bne.n	10b90 <cosem_getLimiter+0xe8>
                (ret = bb_set(data, empty, 6)) != 0 ||
   10b6e:	210f      	movs	r1, #15
   10b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b72:	f7f2 f94f 	bl	2e14 <bb_setUInt8>
   10b76:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b7a:	2b00      	cmp	r3, #0
   10b7c:	d108      	bne.n	10b90 <cosem_getLimiter+0xe8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   10b7e:	2100      	movs	r1, #0
   10b80:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10b82:	f7f2 f947 	bl	2e14 <bb_setUInt8>
   10b86:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b8a:	2b00      	cmp	r3, #0
   10b8c:	f000 8217 	beq.w	10fbe <cosem_getLimiter+0x516>
                (ret = bb_setUInt8(data, 0)) != 0)
            {
                return ret;
   10b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b92:	e215      	b.n	10fc0 <cosem_getLimiter+0x518>
            }
        }
        else
        {
            if ((ret = bb_setUInt16(data, ((gxLimiter*)e->target)->monitoredValue->objectType)) != 0 ||
   10b94:	687b      	ldr	r3, [r7, #4]
   10b96:	695b      	ldr	r3, [r3, #20]
   10b98:	691b      	ldr	r3, [r3, #16]
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	b29b      	uxth	r3, r3
   10b9e:	4619      	mov	r1, r3
   10ba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10ba2:	f7f2 f9c9 	bl	2f38 <bb_setUInt16>
   10ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10baa:	2b00      	cmp	r3, #0
   10bac:	d130      	bne.n	10c10 <cosem_getLimiter+0x168>
   10bae:	2109      	movs	r1, #9
   10bb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10bb2:	f7f2 f92f 	bl	2e14 <bb_setUInt8>
   10bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bba:	2b00      	cmp	r3, #0
   10bbc:	d128      	bne.n	10c10 <cosem_getLimiter+0x168>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10bbe:	2106      	movs	r1, #6
   10bc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10bc2:	f7f2 f927 	bl	2e14 <bb_setUInt8>
   10bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d120      	bne.n	10c10 <cosem_getLimiter+0x168>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, ((gxLimiter*)e->target)->monitoredValue->logicalName, 6)) != 0 ||
   10bce:	687b      	ldr	r3, [r7, #4]
   10bd0:	695b      	ldr	r3, [r3, #20]
   10bd2:	691b      	ldr	r3, [r3, #16]
   10bd4:	3306      	adds	r3, #6
        else
        {
            if ((ret = bb_setUInt16(data, ((gxLimiter*)e->target)->monitoredValue->objectType)) != 0 ||
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   10bd6:	2206      	movs	r2, #6
   10bd8:	4619      	mov	r1, r3
   10bda:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10bdc:	f7f2 fcc0 	bl	3560 <bb_set>
   10be0:	63f8      	str	r0, [r7, #60]	; 0x3c
   10be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10be4:	2b00      	cmp	r3, #0
   10be6:	d113      	bne.n	10c10 <cosem_getLimiter+0x168>
                (ret = bb_set(data, ((gxLimiter*)e->target)->monitoredValue->logicalName, 6)) != 0 ||
   10be8:	210f      	movs	r1, #15
   10bea:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10bec:	f7f2 f912 	bl	2e14 <bb_setUInt8>
   10bf0:	63f8      	str	r0, [r7, #60]	; 0x3c
   10bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bf4:	2b00      	cmp	r3, #0
   10bf6:	d10b      	bne.n	10c10 <cosem_getLimiter+0x168>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, ((gxLimiter*)e->target)->selectedAttributeIndex)) != 0)
   10bf8:	687b      	ldr	r3, [r7, #4]
   10bfa:	695b      	ldr	r3, [r3, #20]
   10bfc:	7d1b      	ldrb	r3, [r3, #20]
            if ((ret = bb_setUInt16(data, ((gxLimiter*)e->target)->monitoredValue->objectType)) != 0 ||
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, ((gxLimiter*)e->target)->monitoredValue->logicalName, 6)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   10bfe:	4619      	mov	r1, r3
   10c00:	6b78      	ldr	r0, [r7, #52]	; 0x34
   10c02:	f7f2 f907 	bl	2e14 <bb_setUInt8>
   10c06:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	f000 81d7 	beq.w	10fbe <cosem_getLimiter+0x516>
                (ret = bb_setUInt8(data, ((gxLimiter*)e->target)->selectedAttributeIndex)) != 0)
            {
                return ret;
   10c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c12:	e1d5      	b.n	10fc0 <cosem_getLimiter+0x518>
            }
        }
    }
    else if (e->index == 3)
   10c14:	687b      	ldr	r3, [r7, #4]
   10c16:	7e1b      	ldrb	r3, [r3, #24]
   10c18:	2b03      	cmp	r3, #3
   10c1a:	d109      	bne.n	10c30 <cosem_getLimiter+0x188>
    {
        ret = var_copy(&e->value, &((gxLimiter*)e->target)->thresholdActive);
   10c1c:	687a      	ldr	r2, [r7, #4]
   10c1e:	687b      	ldr	r3, [r7, #4]
   10c20:	695b      	ldr	r3, [r3, #20]
   10c22:	3318      	adds	r3, #24
   10c24:	4619      	mov	r1, r3
   10c26:	4610      	mov	r0, r2
   10c28:	f017 f8a4 	bl	27d74 <var_copy>
   10c2c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c2e:	e1c6      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 4)
   10c30:	687b      	ldr	r3, [r7, #4]
   10c32:	7e1b      	ldrb	r3, [r3, #24]
   10c34:	2b04      	cmp	r3, #4
   10c36:	d109      	bne.n	10c4c <cosem_getLimiter+0x1a4>
    {
        ret = var_copy(&e->value, &((gxLimiter*)e->target)->thresholdNormal);
   10c38:	687a      	ldr	r2, [r7, #4]
   10c3a:	687b      	ldr	r3, [r7, #4]
   10c3c:	695b      	ldr	r3, [r3, #20]
   10c3e:	3328      	adds	r3, #40	; 0x28
   10c40:	4619      	mov	r1, r3
   10c42:	4610      	mov	r0, r2
   10c44:	f017 f896 	bl	27d74 <var_copy>
   10c48:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c4a:	e1b8      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 5)
   10c4c:	687b      	ldr	r3, [r7, #4]
   10c4e:	7e1b      	ldrb	r3, [r3, #24]
   10c50:	2b05      	cmp	r3, #5
   10c52:	d109      	bne.n	10c68 <cosem_getLimiter+0x1c0>
    {
        ret = var_copy(&e->value, &((gxLimiter*)e->target)->thresholdEmergency);
   10c54:	687a      	ldr	r2, [r7, #4]
   10c56:	687b      	ldr	r3, [r7, #4]
   10c58:	695b      	ldr	r3, [r3, #20]
   10c5a:	3338      	adds	r3, #56	; 0x38
   10c5c:	4619      	mov	r1, r3
   10c5e:	4610      	mov	r0, r2
   10c60:	f017 f888 	bl	27d74 <var_copy>
   10c64:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c66:	e1aa      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 6)
   10c68:	687b      	ldr	r3, [r7, #4]
   10c6a:	7e1b      	ldrb	r3, [r3, #24]
   10c6c:	2b06      	cmp	r3, #6
   10c6e:	d109      	bne.n	10c84 <cosem_getLimiter+0x1dc>
    {
        ret = var_setUInt32(&e->value, ((gxLimiter*)e->target)->minOverThresholdDuration);
   10c70:	687a      	ldr	r2, [r7, #4]
   10c72:	687b      	ldr	r3, [r7, #4]
   10c74:	695b      	ldr	r3, [r3, #20]
   10c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10c78:	4619      	mov	r1, r3
   10c7a:	4610      	mov	r0, r2
   10c7c:	f015 f974 	bl	25f68 <var_setUInt32>
   10c80:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c82:	e19c      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 7)
   10c84:	687b      	ldr	r3, [r7, #4]
   10c86:	7e1b      	ldrb	r3, [r3, #24]
   10c88:	2b07      	cmp	r3, #7
   10c8a:	d109      	bne.n	10ca0 <cosem_getLimiter+0x1f8>
    {
        ret = var_setUInt32(&e->value, ((gxLimiter*)e->target)->minUnderThresholdDuration);
   10c8c:	687a      	ldr	r2, [r7, #4]
   10c8e:	687b      	ldr	r3, [r7, #4]
   10c90:	695b      	ldr	r3, [r3, #20]
   10c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10c94:	4619      	mov	r1, r3
   10c96:	4610      	mov	r0, r2
   10c98:	f015 f966 	bl	25f68 <var_setUInt32>
   10c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10c9e:	e18e      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 8)
   10ca0:	687b      	ldr	r3, [r7, #4]
   10ca2:	7e1b      	ldrb	r3, [r3, #24]
   10ca4:	2b08      	cmp	r3, #8
   10ca6:	d176      	bne.n	10d96 <cosem_getLimiter+0x2ee>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   10ca8:	687b      	ldr	r3, [r7, #4]
   10caa:	4618      	mov	r0, r3
   10cac:	f7fb fe7a 	bl	c9a4 <cosem_getByteBuffer>
   10cb0:	63f8      	str	r0, [r7, #60]	; 0x3c
   10cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cb4:	2b00      	cmp	r3, #0
   10cb6:	d001      	beq.n	10cbc <cosem_getLimiter+0x214>
        {
            return ret;
   10cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cba:	e181      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        gxByteBuffer *data = e->value.byteArr;
   10cbc:	687b      	ldr	r3, [r7, #4]
   10cbe:	689b      	ldr	r3, [r3, #8]
   10cc0:	633b      	str	r3, [r7, #48]	; 0x30
        e->byteArray = 1;
   10cc2:	687b      	ldr	r3, [r7, #4]
   10cc4:	2201      	movs	r2, #1
   10cc6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   10cca:	2102      	movs	r1, #2
   10ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10cce:	f7f2 f8a1 	bl	2e14 <bb_setUInt8>
   10cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	d15b      	bne.n	10d92 <cosem_getLimiter+0x2ea>
   10cda:	2103      	movs	r1, #3
   10cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10cde:	f7f2 f899 	bl	2e14 <bb_setUInt8>
   10ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ce6:	2b00      	cmp	r3, #0
   10ce8:	d153      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   10cea:	2112      	movs	r1, #18
   10cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10cee:	f7f2 f891 	bl	2e14 <bb_setUInt8>
   10cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d14b      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            //Id
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->emergencyProfile.id)) != 0 ||
   10cfa:	687b      	ldr	r3, [r7, #4]
   10cfc:	695b      	ldr	r3, [r3, #20]
   10cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 3)) != 0 ||
            //Id
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   10d02:	4619      	mov	r1, r3
   10d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10d06:	f7f2 f917 	bl	2f38 <bb_setUInt16>
   10d0a:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d0e:	2b00      	cmp	r3, #0
   10d10:	d13f      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->emergencyProfile.id)) != 0 ||
   10d12:	f107 0310 	add.w	r3, r7, #16
   10d16:	4618      	mov	r0, r3
   10d18:	f015 fa06 	bl	26128 <var_init>
   10d1c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d20:	2b00      	cmp	r3, #0
   10d22:	d136      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            //Date
            (ret = var_init(&tmp)) != 0 ||
            (ret = var_setDateTime(&tmp, &((gxLimiter*)e->target)->emergencyProfile.activationTime)) != 0 ||
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	695b      	ldr	r3, [r3, #20]
   10d28:	f103 0254 	add.w	r2, r3, #84	; 0x54
            (ret = bb_setUInt8(data, 3)) != 0 ||
            //Id
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->emergencyProfile.id)) != 0 ||
            //Date
            (ret = var_init(&tmp)) != 0 ||
   10d2c:	f107 0310 	add.w	r3, r7, #16
   10d30:	4611      	mov	r1, r2
   10d32:	4618      	mov	r0, r3
   10d34:	f017 f96e 	bl	28014 <var_setDateTime>
   10d38:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d128      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            (ret = var_setDateTime(&tmp, &((gxLimiter*)e->target)->emergencyProfile.activationTime)) != 0 ||
   10d40:	f107 0310 	add.w	r3, r7, #16
   10d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10d46:	2109      	movs	r1, #9
   10d48:	4618      	mov	r0, r3
   10d4a:	f015 fcbd 	bl	266c8 <var_getBytes2>
   10d4e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d52:	2b00      	cmp	r3, #0
   10d54:	d11d      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
   10d56:	f107 0310 	add.w	r3, r7, #16
   10d5a:	4618      	mov	r0, r3
   10d5c:	f015 f9f4 	bl	26148 <var_clear>
   10d60:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d64:	2b00      	cmp	r3, #0
   10d66:	d114      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            (ret = var_clear(&tmp)) != 0 ||
   10d68:	2106      	movs	r1, #6
   10d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10d6c:	f7f2 f852 	bl	2e14 <bb_setUInt8>
   10d70:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d74:	2b00      	cmp	r3, #0
   10d76:	d10c      	bne.n	10d92 <cosem_getLimiter+0x2ea>
            //Duration
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
            (ret = bb_setUInt32(data, ((gxLimiter*)e->target)->emergencyProfile.duration)) != 0)
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	695b      	ldr	r3, [r3, #20]
   10d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
            (ret = var_init(&tmp)) != 0 ||
            (ret = var_setDateTime(&tmp, &((gxLimiter*)e->target)->emergencyProfile.activationTime)) != 0 ||
            (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
            (ret = var_clear(&tmp)) != 0 ||
            //Duration
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   10d80:	4619      	mov	r1, r3
   10d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
   10d84:	f7f2 f93a 	bl	2ffc <bb_setUInt32>
   10d88:	63f8      	str	r0, [r7, #60]	; 0x3c
   10d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	f000 8116 	beq.w	10fbe <cosem_getLimiter+0x516>
            (ret = bb_setUInt32(data, ((gxLimiter*)e->target)->emergencyProfile.duration)) != 0)
        {
            return ret;
   10d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d94:	e114      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
    }
    else if (e->index == 9)
   10d96:	687b      	ldr	r3, [r7, #4]
   10d98:	7e1b      	ldrb	r3, [r3, #24]
   10d9a:	2b09      	cmp	r3, #9
   10d9c:	d154      	bne.n	10e48 <cosem_getLimiter+0x3a0>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   10d9e:	687b      	ldr	r3, [r7, #4]
   10da0:	4618      	mov	r0, r3
   10da2:	f7fb fdff 	bl	c9a4 <cosem_getByteBuffer>
   10da6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10daa:	2b00      	cmp	r3, #0
   10dac:	d001      	beq.n	10db2 <cosem_getLimiter+0x30a>
        {
            return ret;
   10dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10db0:	e106      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        gxByteBuffer *data = e->value.byteArr;
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	689b      	ldr	r3, [r3, #8]
   10db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        e->byteArray = 1;
   10db8:	687b      	ldr	r3, [r7, #4]
   10dba:	2201      	movs	r2, #1
   10dbc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_clear(data)) != 0 ||
   10dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10dc2:	f7f2 fccf 	bl	3764 <bb_clear>
   10dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d113      	bne.n	10df6 <cosem_getLimiter+0x34e>
   10dce:	2101      	movs	r1, #1
   10dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10dd2:	f7f2 f81f 	bl	2e14 <bb_setUInt8>
   10dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
   10dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10dda:	2b00      	cmp	r3, #0
   10ddc:	d10b      	bne.n	10df6 <cosem_getLimiter+0x34e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxLimiter*)e->target)->emergencyProfileGroupIDs.size, data)) != 0)
   10dde:	687b      	ldr	r3, [r7, #4]
   10de0:	695b      	ldr	r3, [r3, #20]
   10de2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_clear(data)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   10de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10de8:	4618      	mov	r0, r3
   10dea:	f010 fd77 	bl	218dc <hlp_setObjectCount>
   10dee:	63f8      	str	r0, [r7, #60]	; 0x3c
   10df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10df2:	2b00      	cmp	r3, #0
   10df4:	d001      	beq.n	10dfa <cosem_getLimiter+0x352>
            (ret = hlp_setObjectCount(((gxLimiter*)e->target)->emergencyProfileGroupIDs.size, data)) != 0)
        {
            return ret;
   10df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10df8:	e0e2      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        for (pos = 0; pos != ((gxLimiter*)e->target)->emergencyProfileGroupIDs.size; ++pos)
   10dfa:	2300      	movs	r3, #0
   10dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   10dfe:	e01a      	b.n	10e36 <cosem_getLimiter+0x38e>
        {
            if ((ret = va_getByIndex(&((gxLimiter*)e->target)->emergencyProfileGroupIDs, pos, &it)) != 0 ||
   10e00:	687b      	ldr	r3, [r7, #4]
   10e02:	695b      	ldr	r3, [r3, #20]
   10e04:	3388      	adds	r3, #136	; 0x88
   10e06:	f107 020c 	add.w	r2, r7, #12
   10e0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   10e0c:	4618      	mov	r0, r3
   10e0e:	f016 f82d 	bl	26e6c <va_getByIndex>
   10e12:	63f8      	str	r0, [r7, #60]	; 0x3c
   10e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e16:	2b00      	cmp	r3, #0
   10e18:	f040 80d1 	bne.w	10fbe <cosem_getLimiter+0x516>
                (ret = var_getBytes(it, data)) != 0)
   10e1c:	68fb      	ldr	r3, [r7, #12]
        {
            return ret;
        }
        for (pos = 0; pos != ((gxLimiter*)e->target)->emergencyProfileGroupIDs.size; ++pos)
        {
            if ((ret = va_getByIndex(&((gxLimiter*)e->target)->emergencyProfileGroupIDs, pos, &it)) != 0 ||
   10e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10e20:	4618      	mov	r0, r3
   10e22:	f015 fbeb 	bl	265fc <var_getBytes>
   10e26:	63f8      	str	r0, [r7, #60]	; 0x3c
   10e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e2a:	2b00      	cmp	r3, #0
   10e2c:	f040 80c7 	bne.w	10fbe <cosem_getLimiter+0x516>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxLimiter*)e->target)->emergencyProfileGroupIDs.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != ((gxLimiter*)e->target)->emergencyProfileGroupIDs.size; ++pos)
   10e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10e32:	3301      	adds	r3, #1
   10e34:	63bb      	str	r3, [r7, #56]	; 0x38
   10e36:	687b      	ldr	r3, [r7, #4]
   10e38:	695b      	ldr	r3, [r3, #20]
   10e3a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
   10e3e:	461a      	mov	r2, r3
   10e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10e42:	429a      	cmp	r2, r3
   10e44:	d1dc      	bne.n	10e00 <cosem_getLimiter+0x358>
   10e46:	e0ba      	b.n	10fbe <cosem_getLimiter+0x516>
            {
                break;
            }
        }
    }
    else if (e->index == 10)
   10e48:	687b      	ldr	r3, [r7, #4]
   10e4a:	7e1b      	ldrb	r3, [r3, #24]
   10e4c:	2b0a      	cmp	r3, #10
   10e4e:	d10a      	bne.n	10e66 <cosem_getLimiter+0x3be>
    {
        ret = var_setBoolean(&e->value, ((gxLimiter*)e->target)->emergencyProfileActive);
   10e50:	687a      	ldr	r2, [r7, #4]
   10e52:	687b      	ldr	r3, [r7, #4]
   10e54:	695b      	ldr	r3, [r3, #20]
   10e56:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   10e5a:	4619      	mov	r1, r3
   10e5c:	4610      	mov	r0, r2
   10e5e:	f017 f9ad 	bl	281bc <var_setBoolean>
   10e62:	63f8      	str	r0, [r7, #60]	; 0x3c
   10e64:	e0ab      	b.n	10fbe <cosem_getLimiter+0x516>
    }
    else if (e->index == 11)
   10e66:	687b      	ldr	r3, [r7, #4]
   10e68:	7e1b      	ldrb	r3, [r3, #24]
   10e6a:	2b0b      	cmp	r3, #11
   10e6c:	f040 80a4 	bne.w	10fb8 <cosem_getLimiter+0x510>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	4618      	mov	r0, r3
   10e74:	f7fb fd96 	bl	c9a4 <cosem_getByteBuffer>
   10e78:	63f8      	str	r0, [r7, #60]	; 0x3c
   10e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e7c:	2b00      	cmp	r3, #0
   10e7e:	d001      	beq.n	10e84 <cosem_getLimiter+0x3dc>
        {
            return ret;
   10e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e82:	e09d      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
        gxByteBuffer *data = e->value.byteArr;
   10e84:	687b      	ldr	r3, [r7, #4]
   10e86:	689b      	ldr	r3, [r3, #8]
   10e88:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
   10e8a:	687b      	ldr	r3, [r7, #4]
   10e8c:	2201      	movs	r2, #1
   10e8e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   10e92:	2102      	movs	r1, #2
   10e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10e96:	f7f1 ffbd 	bl	2e14 <bb_setUInt8>
   10e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
   10e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e9e:	2b00      	cmp	r3, #0
   10ea0:	f040 8088 	bne.w	10fb4 <cosem_getLimiter+0x50c>
   10ea4:	2102      	movs	r1, #2
   10ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10ea8:	f7f1 ffb4 	bl	2e14 <bb_setUInt8>
   10eac:	63f8      	str	r0, [r7, #60]	; 0x3c
   10eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10eb0:	2b00      	cmp	r3, #0
   10eb2:	d17f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   10eb4:	2102      	movs	r1, #2
   10eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10eb8:	f7f1 ffac 	bl	2e14 <bb_setUInt8>
   10ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ec0:	2b00      	cmp	r3, #0
   10ec2:	d177      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //Action over threshold
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   10ec4:	2102      	movs	r1, #2
   10ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10ec8:	f7f1 ffa4 	bl	2e14 <bb_setUInt8>
   10ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ed0:	2b00      	cmp	r3, #0
   10ed2:	d16f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   10ed4:	2109      	movs	r1, #9
   10ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10ed8:	f7f1 ff9c 	bl	2e14 <bb_setUInt8>
   10edc:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ee0:	2b00      	cmp	r3, #0
   10ee2:	d167      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10ee4:	2106      	movs	r1, #6
   10ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10ee8:	f7f1 ff94 	bl	2e14 <bb_setUInt8>
   10eec:	63f8      	str	r0, [r7, #60]	; 0x3c
   10eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d15f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionOverThreshold.logicalName, 6)) != 0 ||
   10ef4:	687b      	ldr	r3, [r7, #4]
   10ef6:	695b      	ldr	r3, [r3, #20]
   10ef8:	3396      	adds	r3, #150	; 0x96
            //Action over threshold
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
   10efa:	2206      	movs	r2, #6
   10efc:	4619      	mov	r1, r3
   10efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f00:	f7f2 fb2e 	bl	3560 <bb_set>
   10f04:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d153      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionOverThreshold.logicalName, 6)) != 0 ||
   10f0c:	2112      	movs	r1, #18
   10f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f10:	f7f1 ff80 	bl	2e14 <bb_setUInt8>
   10f14:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f18:	2b00      	cmp	r3, #0
   10f1a:	d14b      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //Script selector
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->actionOverThreshold.scriptSelector)) != 0 ||
   10f1c:	687b      	ldr	r3, [r7, #4]
   10f1e:	695b      	ldr	r3, [r3, #20]
   10f20:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionOverThreshold.logicalName, 6)) != 0 ||
            //Script selector
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   10f24:	4619      	mov	r1, r3
   10f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f28:	f7f2 f806 	bl	2f38 <bb_setUInt16>
   10f2c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f30:	2b00      	cmp	r3, #0
   10f32:	d13f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->actionOverThreshold.scriptSelector)) != 0 ||
   10f34:	2102      	movs	r1, #2
   10f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f38:	f7f1 ff6c 	bl	2e14 <bb_setUInt8>
   10f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f40:	2b00      	cmp	r3, #0
   10f42:	d137      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //Action under threshold
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   10f44:	2102      	movs	r1, #2
   10f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f48:	f7f1 ff64 	bl	2e14 <bb_setUInt8>
   10f4c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f50:	2b00      	cmp	r3, #0
   10f52:	d12f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   10f54:	2109      	movs	r1, #9
   10f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f58:	f7f1 ff5c 	bl	2e14 <bb_setUInt8>
   10f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f60:	2b00      	cmp	r3, #0
   10f62:	d127      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10f64:	2106      	movs	r1, #6
   10f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f68:	f7f1 ff54 	bl	2e14 <bb_setUInt8>
   10f6c:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f70:	2b00      	cmp	r3, #0
   10f72:	d11f      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionUnderThreshold.logicalName, 6)) != 0 ||
   10f74:	687b      	ldr	r3, [r7, #4]
   10f76:	695b      	ldr	r3, [r3, #20]
   10f78:	339e      	adds	r3, #158	; 0x9e
            //Action under threshold
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
   10f7a:	2206      	movs	r2, #6
   10f7c:	4619      	mov	r1, r3
   10f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f80:	f7f2 faee 	bl	3560 <bb_set>
   10f84:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f88:	2b00      	cmp	r3, #0
   10f8a:	d113      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionUnderThreshold.logicalName, 6)) != 0 ||
   10f8c:	2112      	movs	r1, #18
   10f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f90:	f7f1 ff40 	bl	2e14 <bb_setUInt8>
   10f94:	63f8      	str	r0, [r7, #60]	; 0x3c
   10f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f98:	2b00      	cmp	r3, #0
   10f9a:	d10b      	bne.n	10fb4 <cosem_getLimiter+0x50c>
            //Script selector
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->actionUnderThreshold.scriptSelector)) != 0)
   10f9c:	687b      	ldr	r3, [r7, #4]
   10f9e:	695b      	ldr	r3, [r3, #20]
   10fa0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, ((gxLimiter*)e->target)->actionUnderThreshold.logicalName, 6)) != 0 ||
            //Script selector
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   10fa4:	4619      	mov	r1, r3
   10fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10fa8:	f7f1 ffc6 	bl	2f38 <bb_setUInt16>
   10fac:	63f8      	str	r0, [r7, #60]	; 0x3c
   10fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10fb0:	2b00      	cmp	r3, #0
   10fb2:	d004      	beq.n	10fbe <cosem_getLimiter+0x516>
            (ret = bb_setUInt16(data, ((gxLimiter*)e->target)->actionUnderThreshold.scriptSelector)) != 0)
        {
            return ret;
   10fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10fb6:	e003      	b.n	10fc0 <cosem_getLimiter+0x518>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   10fb8:	f44f 7381 	mov.w	r3, #258	; 0x102
   10fbc:	e000      	b.n	10fc0 <cosem_getLimiter+0x518>
    }
    return ret;
   10fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   10fc0:	4618      	mov	r0, r3
   10fc2:	3740      	adds	r7, #64	; 0x40
   10fc4:	46bd      	mov	sp, r7
   10fc6:	bd80      	pop	{r7, pc}

00010fc8 <cosem_getmMbusClient>:
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
int cosem_getmMbusClient(
    gxValueEventArg *e)
{
   10fc8:	b590      	push	{r4, r7, lr}
   10fca:	b087      	sub	sp, #28
   10fcc:	af00      	add	r7, sp, #0
   10fce:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   10fd0:	2300      	movs	r3, #0
   10fd2:	617b      	str	r3, [r7, #20]
    gxKey *it;
    if (e->index == 2)
   10fd4:	687b      	ldr	r3, [r7, #4]
   10fd6:	7e1b      	ldrb	r3, [r3, #24]
   10fd8:	2b02      	cmp	r3, #2
   10fda:	d109      	bne.n	10ff0 <cosem_getmMbusClient+0x28>
    {
        ret = var_addOctetString(&e->value, &((gxMBusClient*)e->target)->mBusPortReference);
   10fdc:	687a      	ldr	r2, [r7, #4]
   10fde:	687b      	ldr	r3, [r7, #4]
   10fe0:	695b      	ldr	r3, [r3, #20]
   10fe2:	3318      	adds	r3, #24
   10fe4:	4619      	mov	r1, r3
   10fe6:	4610      	mov	r0, r2
   10fe8:	f015 f882 	bl	260f0 <var_addOctetString>
   10fec:	6178      	str	r0, [r7, #20]
   10fee:	e12c      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 3)
   10ff0:	687b      	ldr	r3, [r7, #4]
   10ff2:	7e1b      	ldrb	r3, [r3, #24]
   10ff4:	2b03      	cmp	r3, #3
   10ff6:	f040 80a2 	bne.w	1113e <cosem_getmMbusClient+0x176>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   10ffa:	687b      	ldr	r3, [r7, #4]
   10ffc:	4618      	mov	r0, r3
   10ffe:	f7fb fcd1 	bl	c9a4 <cosem_getByteBuffer>
   11002:	6178      	str	r0, [r7, #20]
   11004:	697b      	ldr	r3, [r7, #20]
   11006:	2b00      	cmp	r3, #0
   11008:	d001      	beq.n	1100e <cosem_getmMbusClient+0x46>
        {
            return ret;
   1100a:	697b      	ldr	r3, [r7, #20]
   1100c:	e11e      	b.n	1124c <cosem_getmMbusClient+0x284>
        }
        gxByteBuffer *data = e->value.byteArr;
   1100e:	687b      	ldr	r3, [r7, #4]
   11010:	689b      	ldr	r3, [r3, #8]
   11012:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
   11014:	687b      	ldr	r3, [r7, #4]
   11016:	2201      	movs	r2, #1
   11018:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1101c:	2101      	movs	r1, #1
   1101e:	68f8      	ldr	r0, [r7, #12]
   11020:	f7f1 fef8 	bl	2e14 <bb_setUInt8>
   11024:	6178      	str	r0, [r7, #20]
   11026:	697b      	ldr	r3, [r7, #20]
   11028:	2b00      	cmp	r3, #0
   1102a:	d10a      	bne.n	11042 <cosem_getmMbusClient+0x7a>
            (ret = hlp_setObjectCount(((gxMBusClient*)e->target)->captureDefinition.size, data)) != 0)
   1102c:	687b      	ldr	r3, [r7, #4]
   1102e:	695b      	ldr	r3, [r3, #20]
   11030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11032:	68f9      	ldr	r1, [r7, #12]
   11034:	4618      	mov	r0, r3
   11036:	f010 fc51 	bl	218dc <hlp_setObjectCount>
   1103a:	6178      	str	r0, [r7, #20]
   1103c:	697b      	ldr	r3, [r7, #20]
   1103e:	2b00      	cmp	r3, #0
   11040:	d001      	beq.n	11046 <cosem_getmMbusClient+0x7e>
            (ret = hlp_setObjectCount(((gxMBusClient*)e->target)->captureDefinition.size, data)) != 0)
        {
            return ret;
   11042:	697b      	ldr	r3, [r7, #20]
   11044:	e102      	b.n	1124c <cosem_getmMbusClient+0x284>
        }
        for (pos = 0; pos != ((gxMBusClient*)e->target)->captureDefinition.size; ++pos)
   11046:	2300      	movs	r3, #0
   11048:	613b      	str	r3, [r7, #16]
   1104a:	e070      	b.n	1112e <cosem_getmMbusClient+0x166>
        {
            if ((ret = arr_getByIndex(&((gxMBusClient*)e->target)->captureDefinition, pos, (void**)&it)) != 0 ||
   1104c:	687b      	ldr	r3, [r7, #4]
   1104e:	695b      	ldr	r3, [r3, #20]
   11050:	3324      	adds	r3, #36	; 0x24
   11052:	f107 0208 	add.w	r2, r7, #8
   11056:	6939      	ldr	r1, [r7, #16]
   11058:	4618      	mov	r0, r3
   1105a:	f7fb fbcf 	bl	c7fc <arr_getByIndex>
   1105e:	6178      	str	r0, [r7, #20]
   11060:	697b      	ldr	r3, [r7, #20]
   11062:	2b00      	cmp	r3, #0
   11064:	f040 80f1 	bne.w	1124a <cosem_getmMbusClient+0x282>
   11068:	2102      	movs	r1, #2
   1106a:	68f8      	ldr	r0, [r7, #12]
   1106c:	f7f1 fed2 	bl	2e14 <bb_setUInt8>
   11070:	6178      	str	r0, [r7, #20]
   11072:	697b      	ldr	r3, [r7, #20]
   11074:	2b00      	cmp	r3, #0
   11076:	f040 80e8 	bne.w	1124a <cosem_getmMbusClient+0x282>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1107a:	2102      	movs	r1, #2
   1107c:	68f8      	ldr	r0, [r7, #12]
   1107e:	f7f1 fec9 	bl	2e14 <bb_setUInt8>
   11082:	6178      	str	r0, [r7, #20]
   11084:	697b      	ldr	r3, [r7, #20]
   11086:	2b00      	cmp	r3, #0
   11088:	f040 80df 	bne.w	1124a <cosem_getmMbusClient+0x282>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   1108c:	2109      	movs	r1, #9
   1108e:	68f8      	ldr	r0, [r7, #12]
   11090:	f7f1 fec0 	bl	2e14 <bb_setUInt8>
   11094:	6178      	str	r0, [r7, #20]
   11096:	697b      	ldr	r3, [r7, #20]
   11098:	2b00      	cmp	r3, #0
   1109a:	f040 80d6 	bne.w	1124a <cosem_getmMbusClient+0x282>
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
   1109e:	68bb      	ldr	r3, [r7, #8]
   110a0:	681b      	ldr	r3, [r3, #0]
   110a2:	88db      	ldrh	r3, [r3, #6]
        {
            if ((ret = arr_getByIndex(&((gxMBusClient*)e->target)->captureDefinition, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   110a4:	68f9      	ldr	r1, [r7, #12]
   110a6:	4618      	mov	r0, r3
   110a8:	f010 fc18 	bl	218dc <hlp_setObjectCount>
   110ac:	6178      	str	r0, [r7, #20]
   110ae:	697b      	ldr	r3, [r7, #20]
   110b0:	2b00      	cmp	r3, #0
   110b2:	f040 80ca 	bne.w	1124a <cosem_getmMbusClient+0x282>
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
   110b6:	68bb      	ldr	r3, [r7, #8]
   110b8:	681c      	ldr	r4, [r3, #0]
   110ba:	68bb      	ldr	r3, [r7, #8]
   110bc:	681b      	ldr	r3, [r3, #0]
   110be:	4618      	mov	r0, r3
   110c0:	f7f1 fe02 	bl	2cc8 <bb_size>
   110c4:	4603      	mov	r3, r0
            if ((ret = arr_getByIndex(&((gxMBusClient*)e->target)->captureDefinition, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
   110c6:	2200      	movs	r2, #0
   110c8:	4621      	mov	r1, r4
   110ca:	68f8      	ldr	r0, [r7, #12]
   110cc:	f7f2 faa8 	bl	3620 <bb_set2>
   110d0:	6178      	str	r0, [r7, #20]
   110d2:	697b      	ldr	r3, [r7, #20]
   110d4:	2b00      	cmp	r3, #0
   110d6:	f040 80b8 	bne.w	1124a <cosem_getmMbusClient+0x282>
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
   110da:	2109      	movs	r1, #9
   110dc:	68f8      	ldr	r0, [r7, #12]
   110de:	f7f1 fe99 	bl	2e14 <bb_setUInt8>
   110e2:	6178      	str	r0, [r7, #20]
   110e4:	697b      	ldr	r3, [r7, #20]
   110e6:	2b00      	cmp	r3, #0
   110e8:	f040 80af 	bne.w	1124a <cosem_getmMbusClient+0x282>
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
   110ec:	68bb      	ldr	r3, [r7, #8]
   110ee:	685b      	ldr	r3, [r3, #4]
   110f0:	88db      	ldrh	r3, [r3, #6]
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   110f2:	68f9      	ldr	r1, [r7, #12]
   110f4:	4618      	mov	r0, r3
   110f6:	f010 fbf1 	bl	218dc <hlp_setObjectCount>
   110fa:	6178      	str	r0, [r7, #20]
   110fc:	697b      	ldr	r3, [r7, #20]
   110fe:	2b00      	cmp	r3, #0
   11100:	f040 80a3 	bne.w	1124a <cosem_getmMbusClient+0x282>
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
   11104:	68bb      	ldr	r3, [r7, #8]
   11106:	685c      	ldr	r4, [r3, #4]
   11108:	68bb      	ldr	r3, [r7, #8]
   1110a:	685b      	ldr	r3, [r3, #4]
   1110c:	4618      	mov	r0, r3
   1110e:	f7f1 fddb 	bl	2cc8 <bb_size>
   11112:	4603      	mov	r3, r0
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                //
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
   11114:	2200      	movs	r2, #0
   11116:	4621      	mov	r1, r4
   11118:	68f8      	ldr	r0, [r7, #12]
   1111a:	f7f2 fa81 	bl	3620 <bb_set2>
   1111e:	6178      	str	r0, [r7, #20]
   11120:	697b      	ldr	r3, [r7, #20]
   11122:	2b00      	cmp	r3, #0
   11124:	f040 8091 	bne.w	1124a <cosem_getmMbusClient+0x282>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxMBusClient*)e->target)->captureDefinition.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != ((gxMBusClient*)e->target)->captureDefinition.size; ++pos)
   11128:	693b      	ldr	r3, [r7, #16]
   1112a:	3301      	adds	r3, #1
   1112c:	613b      	str	r3, [r7, #16]
   1112e:	687b      	ldr	r3, [r7, #4]
   11130:	695b      	ldr	r3, [r3, #20]
   11132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   11134:	461a      	mov	r2, r3
   11136:	693b      	ldr	r3, [r7, #16]
   11138:	429a      	cmp	r2, r3
   1113a:	d187      	bne.n	1104c <cosem_getmMbusClient+0x84>
   1113c:	e085      	b.n	1124a <cosem_getmMbusClient+0x282>
            {
                break;
            }
        }
    }
    else if (e->index == 4)
   1113e:	687b      	ldr	r3, [r7, #4]
   11140:	7e1b      	ldrb	r3, [r3, #24]
   11142:	2b04      	cmp	r3, #4
   11144:	d109      	bne.n	1115a <cosem_getmMbusClient+0x192>
    {
        ret = var_setUInt32(&e->value, ((gxMBusClient*)e->target)->capturePeriod);
   11146:	687a      	ldr	r2, [r7, #4]
   11148:	687b      	ldr	r3, [r7, #4]
   1114a:	695b      	ldr	r3, [r3, #20]
   1114c:	691b      	ldr	r3, [r3, #16]
   1114e:	4619      	mov	r1, r3
   11150:	4610      	mov	r0, r2
   11152:	f014 ff09 	bl	25f68 <var_setUInt32>
   11156:	6178      	str	r0, [r7, #20]
   11158:	e077      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 5)
   1115a:	687b      	ldr	r3, [r7, #4]
   1115c:	7e1b      	ldrb	r3, [r3, #24]
   1115e:	2b05      	cmp	r3, #5
   11160:	d109      	bne.n	11176 <cosem_getmMbusClient+0x1ae>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->primaryAddress);
   11162:	687a      	ldr	r2, [r7, #4]
   11164:	687b      	ldr	r3, [r7, #4]
   11166:	695b      	ldr	r3, [r3, #20]
   11168:	7d1b      	ldrb	r3, [r3, #20]
   1116a:	4619      	mov	r1, r3
   1116c:	4610      	mov	r0, r2
   1116e:	f014 fed3 	bl	25f18 <var_setUInt8>
   11172:	6178      	str	r0, [r7, #20]
   11174:	e069      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 6)
   11176:	687b      	ldr	r3, [r7, #4]
   11178:	7e1b      	ldrb	r3, [r3, #24]
   1117a:	2b06      	cmp	r3, #6
   1117c:	d109      	bne.n	11192 <cosem_getmMbusClient+0x1ca>
    {
        ret = var_setUInt32(&e->value, ((gxMBusClient*)e->target)->identificationNumber);
   1117e:	687a      	ldr	r2, [r7, #4]
   11180:	687b      	ldr	r3, [r7, #4]
   11182:	695b      	ldr	r3, [r3, #20]
   11184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11186:	4619      	mov	r1, r3
   11188:	4610      	mov	r0, r2
   1118a:	f014 feed 	bl	25f68 <var_setUInt32>
   1118e:	6178      	str	r0, [r7, #20]
   11190:	e05b      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 7)
   11192:	687b      	ldr	r3, [r7, #4]
   11194:	7e1b      	ldrb	r3, [r3, #24]
   11196:	2b07      	cmp	r3, #7
   11198:	d109      	bne.n	111ae <cosem_getmMbusClient+0x1e6>
    {
        ret = var_setUInt16(&e->value, ((gxMBusClient*)e->target)->manufacturerID);
   1119a:	687a      	ldr	r2, [r7, #4]
   1119c:	687b      	ldr	r3, [r7, #4]
   1119e:	695b      	ldr	r3, [r3, #20]
   111a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   111a2:	4619      	mov	r1, r3
   111a4:	4610      	mov	r0, r2
   111a6:	f014 fecb 	bl	25f40 <var_setUInt16>
   111aa:	6178      	str	r0, [r7, #20]
   111ac:	e04d      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 8)
   111ae:	687b      	ldr	r3, [r7, #4]
   111b0:	7e1b      	ldrb	r3, [r3, #24]
   111b2:	2b08      	cmp	r3, #8
   111b4:	d10a      	bne.n	111cc <cosem_getmMbusClient+0x204>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->dataHeaderVersion);
   111b6:	687a      	ldr	r2, [r7, #4]
   111b8:	687b      	ldr	r3, [r7, #4]
   111ba:	695b      	ldr	r3, [r3, #20]
   111bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   111c0:	4619      	mov	r1, r3
   111c2:	4610      	mov	r0, r2
   111c4:	f014 fea8 	bl	25f18 <var_setUInt8>
   111c8:	6178      	str	r0, [r7, #20]
   111ca:	e03e      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 9)
   111cc:	687b      	ldr	r3, [r7, #4]
   111ce:	7e1b      	ldrb	r3, [r3, #24]
   111d0:	2b09      	cmp	r3, #9
   111d2:	d10a      	bne.n	111ea <cosem_getmMbusClient+0x222>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->deviceType);
   111d4:	687a      	ldr	r2, [r7, #4]
   111d6:	687b      	ldr	r3, [r7, #4]
   111d8:	695b      	ldr	r3, [r3, #20]
   111da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   111de:	4619      	mov	r1, r3
   111e0:	4610      	mov	r0, r2
   111e2:	f014 fe99 	bl	25f18 <var_setUInt8>
   111e6:	6178      	str	r0, [r7, #20]
   111e8:	e02f      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 10)
   111ea:	687b      	ldr	r3, [r7, #4]
   111ec:	7e1b      	ldrb	r3, [r3, #24]
   111ee:	2b0a      	cmp	r3, #10
   111f0:	d10a      	bne.n	11208 <cosem_getmMbusClient+0x240>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->accessNumber);
   111f2:	687a      	ldr	r2, [r7, #4]
   111f4:	687b      	ldr	r3, [r7, #4]
   111f6:	695b      	ldr	r3, [r3, #20]
   111f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   111fc:	4619      	mov	r1, r3
   111fe:	4610      	mov	r0, r2
   11200:	f014 fe8a 	bl	25f18 <var_setUInt8>
   11204:	6178      	str	r0, [r7, #20]
   11206:	e020      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 11)
   11208:	687b      	ldr	r3, [r7, #4]
   1120a:	7e1b      	ldrb	r3, [r3, #24]
   1120c:	2b0b      	cmp	r3, #11
   1120e:	d10a      	bne.n	11226 <cosem_getmMbusClient+0x25e>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->status);
   11210:	687a      	ldr	r2, [r7, #4]
   11212:	687b      	ldr	r3, [r7, #4]
   11214:	695b      	ldr	r3, [r3, #20]
   11216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1121a:	4619      	mov	r1, r3
   1121c:	4610      	mov	r0, r2
   1121e:	f014 fe7b 	bl	25f18 <var_setUInt8>
   11222:	6178      	str	r0, [r7, #20]
   11224:	e011      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else if (e->index == 12)
   11226:	687b      	ldr	r3, [r7, #4]
   11228:	7e1b      	ldrb	r3, [r3, #24]
   1122a:	2b0c      	cmp	r3, #12
   1122c:	d10a      	bne.n	11244 <cosem_getmMbusClient+0x27c>
    {
        ret = var_setUInt8(&e->value, ((gxMBusClient*)e->target)->alarm);
   1122e:	687a      	ldr	r2, [r7, #4]
   11230:	687b      	ldr	r3, [r7, #4]
   11232:	695b      	ldr	r3, [r3, #20]
   11234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   11238:	4619      	mov	r1, r3
   1123a:	4610      	mov	r0, r2
   1123c:	f014 fe6c 	bl	25f18 <var_setUInt8>
   11240:	6178      	str	r0, [r7, #20]
   11242:	e002      	b.n	1124a <cosem_getmMbusClient+0x282>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   11244:	f44f 7381 	mov.w	r3, #258	; 0x102
   11248:	e000      	b.n	1124c <cosem_getmMbusClient+0x284>
    }
    return ret;
   1124a:	697b      	ldr	r3, [r7, #20]
}
   1124c:	4618      	mov	r0, r3
   1124e:	371c      	adds	r7, #28
   11250:	46bd      	mov	sp, r7
   11252:	bd90      	pop	{r4, r7, pc}

00011254 <cosem_getModemConfiguration>:
#endif //DLMS_IGNORE_MBUS_CLIENT
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int cosem_getModemConfiguration(
    gxValueEventArg *e)
{
   11254:	b580      	push	{r7, lr}
   11256:	b088      	sub	sp, #32
   11258:	af00      	add	r7, sp, #0
   1125a:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   1125c:	2300      	movs	r3, #0
   1125e:	61fb      	str	r3, [r7, #28]
    gxModemInitialisation *mi;
    gxByteBuffer *ba;
    if (e->index == 2)
   11260:	687b      	ldr	r3, [r7, #4]
   11262:	7e1b      	ldrb	r3, [r3, #24]
   11264:	2b02      	cmp	r3, #2
   11266:	d10a      	bne.n	1127e <cosem_getModemConfiguration+0x2a>
    {
        ret = var_setEnum(&e->value, ((gxModemConfiguration*)e->target)->communicationSpeed);
   11268:	687a      	ldr	r2, [r7, #4]
   1126a:	687b      	ldr	r3, [r7, #4]
   1126c:	695b      	ldr	r3, [r3, #20]
   1126e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   11272:	4619      	mov	r1, r3
   11274:	4610      	mov	r0, r2
   11276:	f014 fe3b 	bl	25ef0 <var_setEnum>
   1127a:	61f8      	str	r0, [r7, #28]
   1127c:	e112      	b.n	114a4 <cosem_getModemConfiguration+0x250>
    }
    else if (e->index == 3)
   1127e:	687b      	ldr	r3, [r7, #4]
   11280:	7e1b      	ldrb	r3, [r3, #24]
   11282:	2b03      	cmp	r3, #3
   11284:	f040 80a8 	bne.w	113d8 <cosem_getModemConfiguration+0x184>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11288:	687b      	ldr	r3, [r7, #4]
   1128a:	4618      	mov	r0, r3
   1128c:	f7fb fb8a 	bl	c9a4 <cosem_getByteBuffer>
   11290:	61f8      	str	r0, [r7, #28]
   11292:	69fb      	ldr	r3, [r7, #28]
   11294:	2b00      	cmp	r3, #0
   11296:	d001      	beq.n	1129c <cosem_getModemConfiguration+0x48>
        {
            return ret;
   11298:	69fb      	ldr	r3, [r7, #28]
   1129a:	e104      	b.n	114a6 <cosem_getModemConfiguration+0x252>
        }
        gxByteBuffer *data = e->value.byteArr;
   1129c:	687b      	ldr	r3, [r7, #4]
   1129e:	689b      	ldr	r3, [r3, #8]
   112a0:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
   112a2:	687b      	ldr	r3, [r7, #4]
   112a4:	2201      	movs	r2, #1
   112a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   112aa:	2101      	movs	r1, #1
   112ac:	6978      	ldr	r0, [r7, #20]
   112ae:	f7f1 fdb1 	bl	2e14 <bb_setUInt8>
   112b2:	61f8      	str	r0, [r7, #28]
   112b4:	69fb      	ldr	r3, [r7, #28]
   112b6:	2b00      	cmp	r3, #0
   112b8:	d10a      	bne.n	112d0 <cosem_getModemConfiguration+0x7c>
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->initialisationStrings.size, data)) != 0)
   112ba:	687b      	ldr	r3, [r7, #4]
   112bc:	695b      	ldr	r3, [r3, #20]
   112be:	8b1b      	ldrh	r3, [r3, #24]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   112c0:	6979      	ldr	r1, [r7, #20]
   112c2:	4618      	mov	r0, r3
   112c4:	f010 fb0a 	bl	218dc <hlp_setObjectCount>
   112c8:	61f8      	str	r0, [r7, #28]
   112ca:	69fb      	ldr	r3, [r7, #28]
   112cc:	2b00      	cmp	r3, #0
   112ce:	d001      	beq.n	112d4 <cosem_getModemConfiguration+0x80>
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->initialisationStrings.size, data)) != 0)
        {
            return ret;
   112d0:	69fb      	ldr	r3, [r7, #28]
   112d2:	e0e8      	b.n	114a6 <cosem_getModemConfiguration+0x252>
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->initialisationStrings.size; ++pos)
   112d4:	2300      	movs	r3, #0
   112d6:	61bb      	str	r3, [r7, #24]
   112d8:	e076      	b.n	113c8 <cosem_getModemConfiguration+0x174>
        {
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->initialisationStrings, pos, (void**)&mi)) != 0 ||
   112da:	687b      	ldr	r3, [r7, #4]
   112dc:	695b      	ldr	r3, [r3, #20]
   112de:	3310      	adds	r3, #16
   112e0:	f107 020c 	add.w	r2, r7, #12
   112e4:	69b9      	ldr	r1, [r7, #24]
   112e6:	4618      	mov	r0, r3
   112e8:	f7fb fa88 	bl	c7fc <arr_getByIndex>
   112ec:	61f8      	str	r0, [r7, #28]
   112ee:	69fb      	ldr	r3, [r7, #28]
   112f0:	2b00      	cmp	r3, #0
   112f2:	f040 80d7 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
   112f6:	2102      	movs	r1, #2
   112f8:	6978      	ldr	r0, [r7, #20]
   112fa:	f7f1 fd8b 	bl	2e14 <bb_setUInt8>
   112fe:	61f8      	str	r0, [r7, #28]
   11300:	69fb      	ldr	r3, [r7, #28]
   11302:	2b00      	cmp	r3, #0
   11304:	f040 80ce 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11308:	2103      	movs	r1, #3
   1130a:	6978      	ldr	r0, [r7, #20]
   1130c:	f7f1 fd82 	bl	2e14 <bb_setUInt8>
   11310:	61f8      	str	r0, [r7, #28]
   11312:	69fb      	ldr	r3, [r7, #28]
   11314:	2b00      	cmp	r3, #0
   11316:	f040 80c5 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = bb_setUInt8(data, 3)) != 0 ||
   1131a:	2109      	movs	r1, #9
   1131c:	6978      	ldr	r0, [r7, #20]
   1131e:	f7f1 fd79 	bl	2e14 <bb_setUInt8>
   11322:	61f8      	str	r0, [r7, #28]
   11324:	69fb      	ldr	r3, [r7, #28]
   11326:	2b00      	cmp	r3, #0
   11328:	f040 80bc 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                //Add request.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
   1132c:	68fb      	ldr	r3, [r7, #12]
   1132e:	88db      	ldrh	r3, [r3, #6]
        {
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->initialisationStrings, pos, (void**)&mi)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add request.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11330:	6979      	ldr	r1, [r7, #20]
   11332:	4618      	mov	r0, r3
   11334:	f010 fad2 	bl	218dc <hlp_setObjectCount>
   11338:	61f8      	str	r0, [r7, #28]
   1133a:	69fb      	ldr	r3, [r7, #28]
   1133c:	2b00      	cmp	r3, #0
   1133e:	f040 80b1 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
                (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
   11342:	68fb      	ldr	r3, [r7, #12]
   11344:	6819      	ldr	r1, [r3, #0]
   11346:	68fb      	ldr	r3, [r7, #12]
   11348:	88db      	ldrh	r3, [r3, #6]
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->initialisationStrings, pos, (void**)&mi)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add request.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
   1134a:	461a      	mov	r2, r3
   1134c:	6978      	ldr	r0, [r7, #20]
   1134e:	f7f2 f907 	bl	3560 <bb_set>
   11352:	61f8      	str	r0, [r7, #28]
   11354:	69fb      	ldr	r3, [r7, #28]
   11356:	2b00      	cmp	r3, #0
   11358:	f040 80a4 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
   1135c:	2109      	movs	r1, #9
   1135e:	6978      	ldr	r0, [r7, #20]
   11360:	f7f1 fd58 	bl	2e14 <bb_setUInt8>
   11364:	61f8      	str	r0, [r7, #28]
   11366:	69fb      	ldr	r3, [r7, #28]
   11368:	2b00      	cmp	r3, #0
   1136a:	f040 809b 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                //Add response.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
   1136e:	68fb      	ldr	r3, [r7, #12]
   11370:	8a5b      	ldrh	r3, [r3, #18]
                //Add request.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
                (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
                //Add response.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11372:	6979      	ldr	r1, [r7, #20]
   11374:	4618      	mov	r0, r3
   11376:	f010 fab1 	bl	218dc <hlp_setObjectCount>
   1137a:	61f8      	str	r0, [r7, #28]
   1137c:	69fb      	ldr	r3, [r7, #28]
   1137e:	2b00      	cmp	r3, #0
   11380:	f040 8090 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
                (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
   11384:	68fb      	ldr	r3, [r7, #12]
   11386:	68d9      	ldr	r1, [r3, #12]
   11388:	68fb      	ldr	r3, [r7, #12]
   1138a:	8a5b      	ldrh	r3, [r3, #18]
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
                (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
                //Add response.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
   1138c:	461a      	mov	r2, r3
   1138e:	6978      	ldr	r0, [r7, #20]
   11390:	f7f2 f8e6 	bl	3560 <bb_set>
   11394:	61f8      	str	r0, [r7, #28]
   11396:	69fb      	ldr	r3, [r7, #28]
   11398:	2b00      	cmp	r3, #0
   1139a:	f040 8083 	bne.w	114a4 <cosem_getModemConfiguration+0x250>
                (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
   1139e:	2112      	movs	r1, #18
   113a0:	6978      	ldr	r0, [r7, #20]
   113a2:	f7f1 fd37 	bl	2e14 <bb_setUInt8>
   113a6:	61f8      	str	r0, [r7, #28]
   113a8:	69fb      	ldr	r3, [r7, #28]
   113aa:	2b00      	cmp	r3, #0
   113ac:	d17a      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
                //Add delay.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, mi->delay)) != 0)
   113ae:	68fb      	ldr	r3, [r7, #12]
   113b0:	8b1b      	ldrh	r3, [r3, #24]
                //Add response.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
                (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
                //Add delay.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   113b2:	4619      	mov	r1, r3
   113b4:	6978      	ldr	r0, [r7, #20]
   113b6:	f7f1 fdbf 	bl	2f38 <bb_setUInt16>
   113ba:	61f8      	str	r0, [r7, #28]
   113bc:	69fb      	ldr	r3, [r7, #28]
   113be:	2b00      	cmp	r3, #0
   113c0:	d170      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->initialisationStrings.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->initialisationStrings.size; ++pos)
   113c2:	69bb      	ldr	r3, [r7, #24]
   113c4:	3301      	adds	r3, #1
   113c6:	61bb      	str	r3, [r7, #24]
   113c8:	687b      	ldr	r3, [r7, #4]
   113ca:	695b      	ldr	r3, [r3, #20]
   113cc:	8b1b      	ldrh	r3, [r3, #24]
   113ce:	461a      	mov	r2, r3
   113d0:	69bb      	ldr	r3, [r7, #24]
   113d2:	429a      	cmp	r2, r3
   113d4:	d181      	bne.n	112da <cosem_getModemConfiguration+0x86>
   113d6:	e065      	b.n	114a4 <cosem_getModemConfiguration+0x250>
            {
                break;
            }
        }
    }
    else if (e->index == 4)
   113d8:	687b      	ldr	r3, [r7, #4]
   113da:	7e1b      	ldrb	r3, [r3, #24]
   113dc:	2b04      	cmp	r3, #4
   113de:	d15e      	bne.n	1149e <cosem_getModemConfiguration+0x24a>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   113e0:	687b      	ldr	r3, [r7, #4]
   113e2:	4618      	mov	r0, r3
   113e4:	f7fb fade 	bl	c9a4 <cosem_getByteBuffer>
   113e8:	61f8      	str	r0, [r7, #28]
   113ea:	69fb      	ldr	r3, [r7, #28]
   113ec:	2b00      	cmp	r3, #0
   113ee:	d001      	beq.n	113f4 <cosem_getModemConfiguration+0x1a0>
        {
            return ret;
   113f0:	69fb      	ldr	r3, [r7, #28]
   113f2:	e058      	b.n	114a6 <cosem_getModemConfiguration+0x252>
        }
        gxByteBuffer *data = e->value.byteArr;
   113f4:	687b      	ldr	r3, [r7, #4]
   113f6:	689b      	ldr	r3, [r3, #8]
   113f8:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   113fa:	687b      	ldr	r3, [r7, #4]
   113fc:	2201      	movs	r2, #1
   113fe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11402:	2101      	movs	r1, #1
   11404:	6938      	ldr	r0, [r7, #16]
   11406:	f7f1 fd05 	bl	2e14 <bb_setUInt8>
   1140a:	61f8      	str	r0, [r7, #28]
   1140c:	69fb      	ldr	r3, [r7, #28]
   1140e:	2b00      	cmp	r3, #0
   11410:	d10a      	bne.n	11428 <cosem_getModemConfiguration+0x1d4>
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->modemProfile.size, data)) != 0)
   11412:	687b      	ldr	r3, [r7, #4]
   11414:	695b      	ldr	r3, [r3, #20]
   11416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11418:	6939      	ldr	r1, [r7, #16]
   1141a:	4618      	mov	r0, r3
   1141c:	f010 fa5e 	bl	218dc <hlp_setObjectCount>
   11420:	61f8      	str	r0, [r7, #28]
   11422:	69fb      	ldr	r3, [r7, #28]
   11424:	2b00      	cmp	r3, #0
   11426:	d001      	beq.n	1142c <cosem_getModemConfiguration+0x1d8>
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->modemProfile.size, data)) != 0)
        {
            return ret;
   11428:	69fb      	ldr	r3, [r7, #28]
   1142a:	e03c      	b.n	114a6 <cosem_getModemConfiguration+0x252>
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->modemProfile.size; ++pos)
   1142c:	2300      	movs	r3, #0
   1142e:	61bb      	str	r3, [r7, #24]
   11430:	e02d      	b.n	1148e <cosem_getModemConfiguration+0x23a>
        {
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->modemProfile, pos, (void**)&ba)) != 0 ||
   11432:	687b      	ldr	r3, [r7, #4]
   11434:	695b      	ldr	r3, [r3, #20]
   11436:	3320      	adds	r3, #32
   11438:	f107 0208 	add.w	r2, r7, #8
   1143c:	69b9      	ldr	r1, [r7, #24]
   1143e:	4618      	mov	r0, r3
   11440:	f7fb f9dc 	bl	c7fc <arr_getByIndex>
   11444:	61f8      	str	r0, [r7, #28]
   11446:	69fb      	ldr	r3, [r7, #28]
   11448:	2b00      	cmp	r3, #0
   1144a:	d12b      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
   1144c:	2109      	movs	r1, #9
   1144e:	6938      	ldr	r0, [r7, #16]
   11450:	f7f1 fce0 	bl	2e14 <bb_setUInt8>
   11454:	61f8      	str	r0, [r7, #28]
   11456:	69fb      	ldr	r3, [r7, #28]
   11458:	2b00      	cmp	r3, #0
   1145a:	d123      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
   1145c:	68bb      	ldr	r3, [r7, #8]
   1145e:	88db      	ldrh	r3, [r3, #6]
            return ret;
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->modemProfile.size; ++pos)
        {
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->modemProfile, pos, (void**)&ba)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11460:	6939      	ldr	r1, [r7, #16]
   11462:	4618      	mov	r0, r3
   11464:	f010 fa3a 	bl	218dc <hlp_setObjectCount>
   11468:	61f8      	str	r0, [r7, #28]
   1146a:	69fb      	ldr	r3, [r7, #28]
   1146c:	2b00      	cmp	r3, #0
   1146e:	d119      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
                (ret = bb_set(data, ba->data, ba->size)) != 0)
   11470:	68bb      	ldr	r3, [r7, #8]
   11472:	6819      	ldr	r1, [r3, #0]
   11474:	68bb      	ldr	r3, [r7, #8]
   11476:	88db      	ldrh	r3, [r3, #6]
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->modemProfile.size; ++pos)
        {
            if ((ret = arr_getByIndex(&((gxModemConfiguration*)e->target)->modemProfile, pos, (void**)&ba)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
   11478:	461a      	mov	r2, r3
   1147a:	6938      	ldr	r0, [r7, #16]
   1147c:	f7f2 f870 	bl	3560 <bb_set>
   11480:	61f8      	str	r0, [r7, #28]
   11482:	69fb      	ldr	r3, [r7, #28]
   11484:	2b00      	cmp	r3, #0
   11486:	d10d      	bne.n	114a4 <cosem_getModemConfiguration+0x250>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(((gxModemConfiguration*)e->target)->modemProfile.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != ((gxModemConfiguration*)e->target)->modemProfile.size; ++pos)
   11488:	69bb      	ldr	r3, [r7, #24]
   1148a:	3301      	adds	r3, #1
   1148c:	61bb      	str	r3, [r7, #24]
   1148e:	687b      	ldr	r3, [r7, #4]
   11490:	695b      	ldr	r3, [r3, #20]
   11492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   11494:	461a      	mov	r2, r3
   11496:	69bb      	ldr	r3, [r7, #24]
   11498:	429a      	cmp	r2, r3
   1149a:	d1ca      	bne.n	11432 <cosem_getModemConfiguration+0x1de>
   1149c:	e002      	b.n	114a4 <cosem_getModemConfiguration+0x250>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1149e:	f44f 7381 	mov.w	r3, #258	; 0x102
   114a2:	61fb      	str	r3, [r7, #28]
    }
    return ret;
   114a4:	69fb      	ldr	r3, [r7, #28]
}
   114a6:	4618      	mov	r0, r3
   114a8:	3720      	adds	r7, #32
   114aa:	46bd      	mov	sp, r7
   114ac:	bd80      	pop	{r7, pc}
   114ae:	bf00      	nop

000114b0 <cosem_getPppSetup>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
int cosem_getPppSetup(
    gxValueEventArg *e)
{
   114b0:	b590      	push	{r4, r7, lr}
   114b2:	b08b      	sub	sp, #44	; 0x2c
   114b4:	af00      	add	r7, sp, #0
   114b6:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   114b8:	2300      	movs	r3, #0
   114ba:	627b      	str	r3, [r7, #36]	; 0x24
    gxpppSetupLcpOption* lcpItem;
    gxpppSetupIPCPOption* ipcpItem;
    gxPppSetup* object = (gxPppSetup*)e->target;
   114bc:	687b      	ldr	r3, [r7, #4]
   114be:	695b      	ldr	r3, [r3, #20]
   114c0:	61fb      	str	r3, [r7, #28]
    if (e->index == 2)
   114c2:	687b      	ldr	r3, [r7, #4]
   114c4:	7e1b      	ldrb	r3, [r3, #24]
   114c6:	2b02      	cmp	r3, #2
   114c8:	d108      	bne.n	114dc <cosem_getPppSetup+0x2c>
    {
        ret = var_addOctetString(&e->value, &object->PHYReference);
   114ca:	687a      	ldr	r2, [r7, #4]
   114cc:	69fb      	ldr	r3, [r7, #28]
   114ce:	3320      	adds	r3, #32
   114d0:	4619      	mov	r1, r3
   114d2:	4610      	mov	r0, r2
   114d4:	f014 fe0c 	bl	260f0 <var_addOctetString>
   114d8:	6278      	str	r0, [r7, #36]	; 0x24
   114da:	e186      	b.n	117ea <cosem_getPppSetup+0x33a>
    }
    else if (e->index == 3)
   114dc:	687b      	ldr	r3, [r7, #4]
   114de:	7e1b      	ldrb	r3, [r3, #24]
   114e0:	2b03      	cmp	r3, #3
   114e2:	f040 8085 	bne.w	115f0 <cosem_getPppSetup+0x140>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   114e6:	687b      	ldr	r3, [r7, #4]
   114e8:	4618      	mov	r0, r3
   114ea:	f7fb fa5b 	bl	c9a4 <cosem_getByteBuffer>
   114ee:	6278      	str	r0, [r7, #36]	; 0x24
   114f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   114f2:	2b00      	cmp	r3, #0
   114f4:	d001      	beq.n	114fa <cosem_getPppSetup+0x4a>
        {
            return ret;
   114f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   114f8:	e178      	b.n	117ec <cosem_getPppSetup+0x33c>
        }
        gxByteBuffer *data = e->value.byteArr;
   114fa:	687b      	ldr	r3, [r7, #4]
   114fc:	689b      	ldr	r3, [r3, #8]
   114fe:	61bb      	str	r3, [r7, #24]
        e->byteArray = 1;
   11500:	687b      	ldr	r3, [r7, #4]
   11502:	2201      	movs	r2, #1
   11504:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11508:	2101      	movs	r1, #1
   1150a:	69b8      	ldr	r0, [r7, #24]
   1150c:	f7f1 fc82 	bl	2e14 <bb_setUInt8>
   11510:	6278      	str	r0, [r7, #36]	; 0x24
   11512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11514:	2b00      	cmp	r3, #0
   11516:	d109      	bne.n	1152c <cosem_getPppSetup+0x7c>
            (ret = hlp_setObjectCount(object->lcpOptions.size, data)) != 0)
   11518:	69fb      	ldr	r3, [r7, #28]
   1151a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1151c:	69b9      	ldr	r1, [r7, #24]
   1151e:	4618      	mov	r0, r3
   11520:	f010 f9dc 	bl	218dc <hlp_setObjectCount>
   11524:	6278      	str	r0, [r7, #36]	; 0x24
   11526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11528:	2b00      	cmp	r3, #0
   1152a:	d001      	beq.n	11530 <cosem_getPppSetup+0x80>
            (ret = hlp_setObjectCount(object->lcpOptions.size, data)) != 0)
        {
            return ret;
   1152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1152e:	e15d      	b.n	117ec <cosem_getPppSetup+0x33c>
        }

        for (pos = 0; pos != object->lcpOptions.size; ++pos)
   11530:	2300      	movs	r3, #0
   11532:	623b      	str	r3, [r7, #32]
   11534:	e055      	b.n	115e2 <cosem_getPppSetup+0x132>
        {
            if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
   11536:	69fb      	ldr	r3, [r7, #28]
   11538:	332c      	adds	r3, #44	; 0x2c
   1153a:	f107 020c 	add.w	r2, r7, #12
   1153e:	6a39      	ldr	r1, [r7, #32]
   11540:	4618      	mov	r0, r3
   11542:	f7fb f95b 	bl	c7fc <arr_getByIndex>
   11546:	6278      	str	r0, [r7, #36]	; 0x24
   11548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1154a:	2b00      	cmp	r3, #0
   1154c:	f040 814d 	bne.w	117ea <cosem_getPppSetup+0x33a>
   11550:	2102      	movs	r1, #2
   11552:	69b8      	ldr	r0, [r7, #24]
   11554:	f7f1 fc5e 	bl	2e14 <bb_setUInt8>
   11558:	6278      	str	r0, [r7, #36]	; 0x24
   1155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1155c:	2b00      	cmp	r3, #0
   1155e:	f040 8144 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11562:	2103      	movs	r1, #3
   11564:	69b8      	ldr	r0, [r7, #24]
   11566:	f7f1 fc55 	bl	2e14 <bb_setUInt8>
   1156a:	6278      	str	r0, [r7, #36]	; 0x24
   1156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1156e:	2b00      	cmp	r3, #0
   11570:	f040 813b 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, 3)) != 0 ||
   11574:	2111      	movs	r1, #17
   11576:	69b8      	ldr	r0, [r7, #24]
   11578:	f7f1 fc4c 	bl	2e14 <bb_setUInt8>
   1157c:	6278      	str	r0, [r7, #36]	; 0x24
   1157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11580:	2b00      	cmp	r3, #0
   11582:	f040 8132 	bne.w	117ea <cosem_getPppSetup+0x33a>
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
   11586:	68fb      	ldr	r3, [r7, #12]
   11588:	781b      	ldrb	r3, [r3, #0]
        {
            if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   1158a:	4619      	mov	r1, r3
   1158c:	69b8      	ldr	r0, [r7, #24]
   1158e:	f7f1 fc41 	bl	2e14 <bb_setUInt8>
   11592:	6278      	str	r0, [r7, #36]	; 0x24
   11594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11596:	2b00      	cmp	r3, #0
   11598:	f040 8127 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
   1159c:	2111      	movs	r1, #17
   1159e:	69b8      	ldr	r0, [r7, #24]
   115a0:	f7f1 fc38 	bl	2e14 <bb_setUInt8>
   115a4:	6278      	str	r0, [r7, #36]	; 0x24
   115a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115a8:	2b00      	cmp	r3, #0
   115aa:	f040 811e 	bne.w	117ea <cosem_getPppSetup+0x33a>
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
   115ae:	68fb      	ldr	r3, [r7, #12]
   115b0:	699b      	ldr	r3, [r3, #24]
   115b2:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   115b4:	4619      	mov	r1, r3
   115b6:	69b8      	ldr	r0, [r7, #24]
   115b8:	f7f1 fc2c 	bl	2e14 <bb_setUInt8>
   115bc:	6278      	str	r0, [r7, #36]	; 0x24
   115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115c0:	2b00      	cmp	r3, #0
   115c2:	f040 8112 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
                (ret = var_getBytes(&lcpItem->data, data)) != 0)
   115c6:	68fb      	ldr	r3, [r7, #12]
   115c8:	3308      	adds	r3, #8
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
   115ca:	69b9      	ldr	r1, [r7, #24]
   115cc:	4618      	mov	r0, r3
   115ce:	f015 f815 	bl	265fc <var_getBytes>
   115d2:	6278      	str	r0, [r7, #36]	; 0x24
   115d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115d6:	2b00      	cmp	r3, #0
   115d8:	f040 8107 	bne.w	117ea <cosem_getPppSetup+0x33a>
            (ret = hlp_setObjectCount(object->lcpOptions.size, data)) != 0)
        {
            return ret;
        }

        for (pos = 0; pos != object->lcpOptions.size; ++pos)
   115dc:	6a3b      	ldr	r3, [r7, #32]
   115de:	3301      	adds	r3, #1
   115e0:	623b      	str	r3, [r7, #32]
   115e2:	69fb      	ldr	r3, [r7, #28]
   115e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   115e6:	461a      	mov	r2, r3
   115e8:	6a3b      	ldr	r3, [r7, #32]
   115ea:	429a      	cmp	r2, r3
   115ec:	d1a3      	bne.n	11536 <cosem_getPppSetup+0x86>
   115ee:	e0fc      	b.n	117ea <cosem_getPppSetup+0x33a>
            {
                break;
            }
        }
    }
    else if (e->index == 4)
   115f0:	687b      	ldr	r3, [r7, #4]
   115f2:	7e1b      	ldrb	r3, [r3, #24]
   115f4:	2b04      	cmp	r3, #4
   115f6:	f040 8084 	bne.w	11702 <cosem_getPppSetup+0x252>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   115fa:	687b      	ldr	r3, [r7, #4]
   115fc:	4618      	mov	r0, r3
   115fe:	f7fb f9d1 	bl	c9a4 <cosem_getByteBuffer>
   11602:	6278      	str	r0, [r7, #36]	; 0x24
   11604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11606:	2b00      	cmp	r3, #0
   11608:	d001      	beq.n	1160e <cosem_getPppSetup+0x15e>
        {
            return ret;
   1160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1160c:	e0ee      	b.n	117ec <cosem_getPppSetup+0x33c>
        }
        gxByteBuffer *data = e->value.byteArr;
   1160e:	687b      	ldr	r3, [r7, #4]
   11610:	689b      	ldr	r3, [r3, #8]
   11612:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
   11614:	687b      	ldr	r3, [r7, #4]
   11616:	2201      	movs	r2, #1
   11618:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1161c:	2101      	movs	r1, #1
   1161e:	6978      	ldr	r0, [r7, #20]
   11620:	f7f1 fbf8 	bl	2e14 <bb_setUInt8>
   11624:	6278      	str	r0, [r7, #36]	; 0x24
   11626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11628:	2b00      	cmp	r3, #0
   1162a:	d109      	bne.n	11640 <cosem_getPppSetup+0x190>
            (ret = hlp_setObjectCount(object->ipcpOptions.size, data)) != 0)
   1162c:	69fb      	ldr	r3, [r7, #28]
   1162e:	8b1b      	ldrh	r3, [r3, #24]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11630:	6979      	ldr	r1, [r7, #20]
   11632:	4618      	mov	r0, r3
   11634:	f010 f952 	bl	218dc <hlp_setObjectCount>
   11638:	6278      	str	r0, [r7, #36]	; 0x24
   1163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1163c:	2b00      	cmp	r3, #0
   1163e:	d001      	beq.n	11644 <cosem_getPppSetup+0x194>
            (ret = hlp_setObjectCount(object->ipcpOptions.size, data)) != 0)
        {
            return ret;
   11640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11642:	e0d3      	b.n	117ec <cosem_getPppSetup+0x33c>
        }
        for (pos = 0; pos != object->ipcpOptions.size; ++pos)
   11644:	2300      	movs	r3, #0
   11646:	623b      	str	r3, [r7, #32]
   11648:	e054      	b.n	116f4 <cosem_getPppSetup+0x244>
        {
            if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
   1164a:	69fb      	ldr	r3, [r7, #28]
   1164c:	3310      	adds	r3, #16
   1164e:	f107 0208 	add.w	r2, r7, #8
   11652:	6a39      	ldr	r1, [r7, #32]
   11654:	4618      	mov	r0, r3
   11656:	f7fb f8d1 	bl	c7fc <arr_getByIndex>
   1165a:	6278      	str	r0, [r7, #36]	; 0x24
   1165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1165e:	2b00      	cmp	r3, #0
   11660:	f040 80c3 	bne.w	117ea <cosem_getPppSetup+0x33a>
   11664:	2102      	movs	r1, #2
   11666:	6978      	ldr	r0, [r7, #20]
   11668:	f7f1 fbd4 	bl	2e14 <bb_setUInt8>
   1166c:	6278      	str	r0, [r7, #36]	; 0x24
   1166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11670:	2b00      	cmp	r3, #0
   11672:	f040 80ba 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11676:	2103      	movs	r1, #3
   11678:	6978      	ldr	r0, [r7, #20]
   1167a:	f7f1 fbcb 	bl	2e14 <bb_setUInt8>
   1167e:	6278      	str	r0, [r7, #36]	; 0x24
   11680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11682:	2b00      	cmp	r3, #0
   11684:	f040 80b1 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, 3)) != 0 ||
   11688:	2111      	movs	r1, #17
   1168a:	6978      	ldr	r0, [r7, #20]
   1168c:	f7f1 fbc2 	bl	2e14 <bb_setUInt8>
   11690:	6278      	str	r0, [r7, #36]	; 0x24
   11692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11694:	2b00      	cmp	r3, #0
   11696:	f040 80a8 	bne.w	117ea <cosem_getPppSetup+0x33a>
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
   1169a:	68bb      	ldr	r3, [r7, #8]
   1169c:	781b      	ldrb	r3, [r3, #0]
        {
            if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   1169e:	4619      	mov	r1, r3
   116a0:	6978      	ldr	r0, [r7, #20]
   116a2:	f7f1 fbb7 	bl	2e14 <bb_setUInt8>
   116a6:	6278      	str	r0, [r7, #36]	; 0x24
   116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116aa:	2b00      	cmp	r3, #0
   116ac:	f040 809d 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
   116b0:	2111      	movs	r1, #17
   116b2:	6978      	ldr	r0, [r7, #20]
   116b4:	f7f1 fbae 	bl	2e14 <bb_setUInt8>
   116b8:	6278      	str	r0, [r7, #36]	; 0x24
   116ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116bc:	2b00      	cmp	r3, #0
   116be:	f040 8094 	bne.w	117ea <cosem_getPppSetup+0x33a>
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
   116c2:	68bb      	ldr	r3, [r7, #8]
   116c4:	699b      	ldr	r3, [r3, #24]
   116c6:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   116c8:	4619      	mov	r1, r3
   116ca:	6978      	ldr	r0, [r7, #20]
   116cc:	f7f1 fba2 	bl	2e14 <bb_setUInt8>
   116d0:	6278      	str	r0, [r7, #36]	; 0x24
   116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116d4:	2b00      	cmp	r3, #0
   116d6:	f040 8088 	bne.w	117ea <cosem_getPppSetup+0x33a>
                (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
                (ret = var_getBytes(&ipcpItem->data, data)) != 0)
   116da:	68bb      	ldr	r3, [r7, #8]
   116dc:	3308      	adds	r3, #8
                //Add type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
                //Add length.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
   116de:	6979      	ldr	r1, [r7, #20]
   116e0:	4618      	mov	r0, r3
   116e2:	f014 ff8b 	bl	265fc <var_getBytes>
   116e6:	6278      	str	r0, [r7, #36]	; 0x24
   116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116ea:	2b00      	cmp	r3, #0
   116ec:	d17d      	bne.n	117ea <cosem_getPppSetup+0x33a>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->ipcpOptions.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->ipcpOptions.size; ++pos)
   116ee:	6a3b      	ldr	r3, [r7, #32]
   116f0:	3301      	adds	r3, #1
   116f2:	623b      	str	r3, [r7, #32]
   116f4:	69fb      	ldr	r3, [r7, #28]
   116f6:	8b1b      	ldrh	r3, [r3, #24]
   116f8:	461a      	mov	r2, r3
   116fa:	6a3b      	ldr	r3, [r7, #32]
   116fc:	429a      	cmp	r2, r3
   116fe:	d1a4      	bne.n	1164a <cosem_getPppSetup+0x19a>
   11700:	e073      	b.n	117ea <cosem_getPppSetup+0x33a>
            {
                break;
            }
        }
    }
    else if (e->index == 5)
   11702:	687b      	ldr	r3, [r7, #4]
   11704:	7e1b      	ldrb	r3, [r3, #24]
   11706:	2b05      	cmp	r3, #5
   11708:	d16c      	bne.n	117e4 <cosem_getPppSetup+0x334>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1170a:	687b      	ldr	r3, [r7, #4]
   1170c:	4618      	mov	r0, r3
   1170e:	f7fb f949 	bl	c9a4 <cosem_getByteBuffer>
   11712:	6278      	str	r0, [r7, #36]	; 0x24
   11714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11716:	2b00      	cmp	r3, #0
   11718:	d001      	beq.n	1171e <cosem_getPppSetup+0x26e>
        {
            return ret;
   1171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1171c:	e066      	b.n	117ec <cosem_getPppSetup+0x33c>
        }
        gxByteBuffer *data = e->value.byteArr;
   1171e:	687b      	ldr	r3, [r7, #4]
   11720:	689b      	ldr	r3, [r3, #8]
   11722:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   11724:	687b      	ldr	r3, [r7, #4]
   11726:	2201      	movs	r2, #1
   11728:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1172c:	2102      	movs	r1, #2
   1172e:	6938      	ldr	r0, [r7, #16]
   11730:	f7f1 fb70 	bl	2e14 <bb_setUInt8>
   11734:	6278      	str	r0, [r7, #36]	; 0x24
   11736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11738:	2b00      	cmp	r3, #0
   1173a:	d151      	bne.n	117e0 <cosem_getPppSetup+0x330>
   1173c:	2102      	movs	r1, #2
   1173e:	6938      	ldr	r0, [r7, #16]
   11740:	f7f1 fb68 	bl	2e14 <bb_setUInt8>
   11744:	6278      	str	r0, [r7, #36]	; 0x24
   11746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11748:	2b00      	cmp	r3, #0
   1174a:	d149      	bne.n	117e0 <cosem_getPppSetup+0x330>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   1174c:	2109      	movs	r1, #9
   1174e:	6938      	ldr	r0, [r7, #16]
   11750:	f7f1 fb60 	bl	2e14 <bb_setUInt8>
   11754:	6278      	str	r0, [r7, #36]	; 0x24
   11756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11758:	2b00      	cmp	r3, #0
   1175a:	d141      	bne.n	117e0 <cosem_getPppSetup+0x330>
            //Add user name.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
   1175c:	69fb      	ldr	r3, [r7, #28]
   1175e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //Add user name.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11762:	6939      	ldr	r1, [r7, #16]
   11764:	4618      	mov	r0, r3
   11766:	f010 f8b9 	bl	218dc <hlp_setObjectCount>
   1176a:	6278      	str	r0, [r7, #36]	; 0x24
   1176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1176e:	2b00      	cmp	r3, #0
   11770:	d136      	bne.n	117e0 <cosem_getPppSetup+0x330>
            (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
            (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
   11772:	69fb      	ldr	r3, [r7, #28]
   11774:	f103 043c 	add.w	r4, r3, #60	; 0x3c
   11778:	69fb      	ldr	r3, [r7, #28]
   1177a:	333c      	adds	r3, #60	; 0x3c
   1177c:	4618      	mov	r0, r3
   1177e:	f7f1 faa3 	bl	2cc8 <bb_size>
   11782:	4603      	mov	r3, r0
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //Add user name.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
   11784:	2200      	movs	r2, #0
   11786:	4621      	mov	r1, r4
   11788:	6938      	ldr	r0, [r7, #16]
   1178a:	f7f1 ff49 	bl	3620 <bb_set2>
   1178e:	6278      	str	r0, [r7, #36]	; 0x24
   11790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11792:	2b00      	cmp	r3, #0
   11794:	d124      	bne.n	117e0 <cosem_getPppSetup+0x330>
            (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
   11796:	2109      	movs	r1, #9
   11798:	6938      	ldr	r0, [r7, #16]
   1179a:	f7f1 fb3b 	bl	2e14 <bb_setUInt8>
   1179e:	6278      	str	r0, [r7, #36]	; 0x24
   117a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117a2:	2b00      	cmp	r3, #0
   117a4:	d11c      	bne.n	117e0 <cosem_getPppSetup+0x330>
            //Add pw.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
   117a6:	69fb      	ldr	r3, [r7, #28]
   117a8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
            //Add user name.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
            (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
            //Add pw.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   117ac:	6939      	ldr	r1, [r7, #16]
   117ae:	4618      	mov	r0, r3
   117b0:	f010 f894 	bl	218dc <hlp_setObjectCount>
   117b4:	6278      	str	r0, [r7, #36]	; 0x24
   117b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117b8:	2b00      	cmp	r3, #0
   117ba:	d111      	bne.n	117e0 <cosem_getPppSetup+0x330>
            (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
            (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
   117bc:	69fb      	ldr	r3, [r7, #28]
   117be:	f103 0448 	add.w	r4, r3, #72	; 0x48
   117c2:	69fb      	ldr	r3, [r7, #28]
   117c4:	3348      	adds	r3, #72	; 0x48
   117c6:	4618      	mov	r0, r3
   117c8:	f7f1 fa7e 	bl	2cc8 <bb_size>
   117cc:	4603      	mov	r3, r0
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
            (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
            //Add pw.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
   117ce:	2200      	movs	r2, #0
   117d0:	4621      	mov	r1, r4
   117d2:	6938      	ldr	r0, [r7, #16]
   117d4:	f7f1 ff24 	bl	3620 <bb_set2>
   117d8:	6278      	str	r0, [r7, #36]	; 0x24
   117da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117dc:	2b00      	cmp	r3, #0
   117de:	d004      	beq.n	117ea <cosem_getPppSetup+0x33a>
            (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
        {
            return ret;
   117e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117e2:	e003      	b.n	117ec <cosem_getPppSetup+0x33c>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   117e4:	f44f 7381 	mov.w	r3, #258	; 0x102
   117e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   117ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   117ec:	4618      	mov	r0, r3
   117ee:	372c      	adds	r7, #44	; 0x2c
   117f0:	46bd      	mov	sp, r7
   117f2:	bd90      	pop	{r4, r7, pc}

000117f4 <cosem_getRegisterActivation>:
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
int cosem_getRegisterActivation(
    gxValueEventArg *e)
{
   117f4:	b590      	push	{r4, r7, lr}
   117f6:	b08d      	sub	sp, #52	; 0x34
   117f8:	af00      	add	r7, sp, #0
   117fa:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK, pos;
   117fc:	2300      	movs	r3, #0
   117fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    gxObjectDefinition *od;
    gxKey *it;
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   11800:	687b      	ldr	r3, [r7, #4]
   11802:	695b      	ldr	r3, [r3, #20]
   11804:	623b      	str	r3, [r7, #32]
    if (e->index == 2)
   11806:	687b      	ldr	r3, [r7, #4]
   11808:	7e1b      	ldrb	r3, [r3, #24]
   1180a:	2b02      	cmp	r3, #2
   1180c:	f040 8083 	bne.w	11916 <cosem_getRegisterActivation+0x122>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11810:	687b      	ldr	r3, [r7, #4]
   11812:	4618      	mov	r0, r3
   11814:	f7fb f8c6 	bl	c9a4 <cosem_getByteBuffer>
   11818:	62f8      	str	r0, [r7, #44]	; 0x2c
   1181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1181c:	2b00      	cmp	r3, #0
   1181e:	d001      	beq.n	11824 <cosem_getRegisterActivation+0x30>
        {
            return ret;
   11820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11822:	e172      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
        gxByteBuffer *data = e->value.byteArr;
   11824:	687b      	ldr	r3, [r7, #4]
   11826:	689b      	ldr	r3, [r3, #8]
   11828:	61fb      	str	r3, [r7, #28]
        e->byteArray = 1;
   1182a:	687b      	ldr	r3, [r7, #4]
   1182c:	2201      	movs	r2, #1
   1182e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11832:	2101      	movs	r1, #1
   11834:	69f8      	ldr	r0, [r7, #28]
   11836:	f7f1 faed 	bl	2e14 <bb_setUInt8>
   1183a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1183e:	2b00      	cmp	r3, #0
   11840:	d109      	bne.n	11856 <cosem_getRegisterActivation+0x62>
            (ret = hlp_setObjectCount(object->registerAssignment.size, data)) != 0)
   11842:	6a3b      	ldr	r3, [r7, #32]
   11844:	8b1b      	ldrh	r3, [r3, #24]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11846:	69f9      	ldr	r1, [r7, #28]
   11848:	4618      	mov	r0, r3
   1184a:	f010 f847 	bl	218dc <hlp_setObjectCount>
   1184e:	62f8      	str	r0, [r7, #44]	; 0x2c
   11850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11852:	2b00      	cmp	r3, #0
   11854:	d001      	beq.n	1185a <cosem_getRegisterActivation+0x66>
            (ret = hlp_setObjectCount(object->registerAssignment.size, data)) != 0)
        {
            return ret;
   11856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11858:	e157      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
        for (pos = 0; pos != object->registerAssignment.size; ++pos)
   1185a:	2300      	movs	r3, #0
   1185c:	62bb      	str	r3, [r7, #40]	; 0x28
   1185e:	e053      	b.n	11908 <cosem_getRegisterActivation+0x114>
        {
            if ((ret = arr_getByIndex(&object->registerAssignment, pos, (void**)&od)) != 0 ||
   11860:	6a3b      	ldr	r3, [r7, #32]
   11862:	3310      	adds	r3, #16
   11864:	f107 0210 	add.w	r2, r7, #16
   11868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1186a:	4618      	mov	r0, r3
   1186c:	f7fa ffc6 	bl	c7fc <arr_getByIndex>
   11870:	62f8      	str	r0, [r7, #44]	; 0x2c
   11872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11874:	2b00      	cmp	r3, #0
   11876:	f040 8147 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
   1187a:	2102      	movs	r1, #2
   1187c:	69f8      	ldr	r0, [r7, #28]
   1187e:	f7f1 fac9 	bl	2e14 <bb_setUInt8>
   11882:	62f8      	str	r0, [r7, #44]	; 0x2c
   11884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11886:	2b00      	cmp	r3, #0
   11888:	f040 813e 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1188c:	2102      	movs	r1, #2
   1188e:	69f8      	ldr	r0, [r7, #28]
   11890:	f7f1 fac0 	bl	2e14 <bb_setUInt8>
   11894:	62f8      	str	r0, [r7, #44]	; 0x2c
   11896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11898:	2b00      	cmp	r3, #0
   1189a:	f040 8135 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   1189e:	2112      	movs	r1, #18
   118a0:	69f8      	ldr	r0, [r7, #28]
   118a2:	f7f1 fab7 	bl	2e14 <bb_setUInt8>
   118a6:	62f8      	str	r0, [r7, #44]	; 0x2c
   118a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   118aa:	2b00      	cmp	r3, #0
   118ac:	f040 812c 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, od->classId)) != 0 ||
   118b0:	693b      	ldr	r3, [r7, #16]
   118b2:	881b      	ldrh	r3, [r3, #0]
        for (pos = 0; pos != object->registerAssignment.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->registerAssignment, pos, (void**)&od)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   118b4:	4619      	mov	r1, r3
   118b6:	69f8      	ldr	r0, [r7, #28]
   118b8:	f7f1 fb3e 	bl	2f38 <bb_setUInt16>
   118bc:	62f8      	str	r0, [r7, #44]	; 0x2c
   118be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   118c0:	2b00      	cmp	r3, #0
   118c2:	f040 8121 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt16(data, od->classId)) != 0 ||
   118c6:	2109      	movs	r1, #9
   118c8:	69f8      	ldr	r0, [r7, #28]
   118ca:	f7f1 faa3 	bl	2e14 <bb_setUInt8>
   118ce:	62f8      	str	r0, [r7, #44]	; 0x2c
   118d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   118d2:	2b00      	cmp	r3, #0
   118d4:	f040 8118 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   118d8:	2106      	movs	r1, #6
   118da:	69f8      	ldr	r0, [r7, #28]
   118dc:	f7f1 fa9a 	bl	2e14 <bb_setUInt8>
   118e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   118e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   118e4:	2b00      	cmp	r3, #0
   118e6:	f040 810f 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, od->logicalName, 6)) != 0)
   118ea:	693b      	ldr	r3, [r7, #16]
   118ec:	3302      	adds	r3, #2
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, od->classId)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   118ee:	2206      	movs	r2, #6
   118f0:	4619      	mov	r1, r3
   118f2:	69f8      	ldr	r0, [r7, #28]
   118f4:	f7f1 fe34 	bl	3560 <bb_set>
   118f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   118fc:	2b00      	cmp	r3, #0
   118fe:	f040 8103 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->registerAssignment.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->registerAssignment.size; ++pos)
   11902:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11904:	3301      	adds	r3, #1
   11906:	62bb      	str	r3, [r7, #40]	; 0x28
   11908:	6a3b      	ldr	r3, [r7, #32]
   1190a:	8b1b      	ldrh	r3, [r3, #24]
   1190c:	461a      	mov	r2, r3
   1190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11910:	429a      	cmp	r2, r3
   11912:	d1a5      	bne.n	11860 <cosem_getRegisterActivation+0x6c>
   11914:	e0f8      	b.n	11b08 <cosem_getRegisterActivation+0x314>
            {
                break;
            }
        }
    }
    else if (e->index == 3)
   11916:	687b      	ldr	r3, [r7, #4]
   11918:	7e1b      	ldrb	r3, [r3, #24]
   1191a:	2b03      	cmp	r3, #3
   1191c:	f040 80b3 	bne.w	11a86 <cosem_getRegisterActivation+0x292>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11920:	687b      	ldr	r3, [r7, #4]
   11922:	4618      	mov	r0, r3
   11924:	f7fb f83e 	bl	c9a4 <cosem_getByteBuffer>
   11928:	62f8      	str	r0, [r7, #44]	; 0x2c
   1192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1192c:	2b00      	cmp	r3, #0
   1192e:	d001      	beq.n	11934 <cosem_getRegisterActivation+0x140>
        {
            return ret;
   11930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11932:	e0ea      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
        gxByteBuffer *data = e->value.byteArr;
   11934:	687b      	ldr	r3, [r7, #4]
   11936:	689b      	ldr	r3, [r3, #8]
   11938:	61bb      	str	r3, [r7, #24]
        unsigned long pos2;
        e->byteArray = 1;
   1193a:	687b      	ldr	r3, [r7, #4]
   1193c:	2201      	movs	r2, #1
   1193e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11942:	2101      	movs	r1, #1
   11944:	69b8      	ldr	r0, [r7, #24]
   11946:	f7f1 fa65 	bl	2e14 <bb_setUInt8>
   1194a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1194e:	2b00      	cmp	r3, #0
   11950:	d109      	bne.n	11966 <cosem_getRegisterActivation+0x172>
            (ret = hlp_setObjectCount(object->maskList.size, data)) != 0)
   11952:	6a3b      	ldr	r3, [r7, #32]
   11954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        unsigned long pos2;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11956:	69b9      	ldr	r1, [r7, #24]
   11958:	4618      	mov	r0, r3
   1195a:	f00f ffbf 	bl	218dc <hlp_setObjectCount>
   1195e:	62f8      	str	r0, [r7, #44]	; 0x2c
   11960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11962:	2b00      	cmp	r3, #0
   11964:	d001      	beq.n	1196a <cosem_getRegisterActivation+0x176>
            (ret = hlp_setObjectCount(object->maskList.size, data)) != 0)
        {
            return ret;
   11966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11968:	e0cf      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
        for (pos = 0; pos != object->maskList.size; ++pos)
   1196a:	2300      	movs	r3, #0
   1196c:	62bb      	str	r3, [r7, #40]	; 0x28
   1196e:	e082      	b.n	11a76 <cosem_getRegisterActivation+0x282>
        {
            if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&it)) != 0 ||
   11970:	6a3b      	ldr	r3, [r7, #32]
   11972:	3320      	adds	r3, #32
   11974:	f107 020c 	add.w	r2, r7, #12
   11978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1197a:	4618      	mov	r0, r3
   1197c:	f7fa ff3e 	bl	c7fc <arr_getByIndex>
   11980:	62f8      	str	r0, [r7, #44]	; 0x2c
   11982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11984:	2b00      	cmp	r3, #0
   11986:	f040 80bf 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
   1198a:	2102      	movs	r1, #2
   1198c:	69b8      	ldr	r0, [r7, #24]
   1198e:	f7f1 fa41 	bl	2e14 <bb_setUInt8>
   11992:	62f8      	str	r0, [r7, #44]	; 0x2c
   11994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11996:	2b00      	cmp	r3, #0
   11998:	f040 80b6 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1199c:	2102      	movs	r1, #2
   1199e:	69b8      	ldr	r0, [r7, #24]
   119a0:	f7f1 fa38 	bl	2e14 <bb_setUInt8>
   119a4:	62f8      	str	r0, [r7, #44]	; 0x2c
   119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   119a8:	2b00      	cmp	r3, #0
   119aa:	f040 80ad 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   119ae:	2109      	movs	r1, #9
   119b0:	69b8      	ldr	r0, [r7, #24]
   119b2:	f7f1 fa2f 	bl	2e14 <bb_setUInt8>
   119b6:	62f8      	str	r0, [r7, #44]	; 0x2c
   119b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   119ba:	2b00      	cmp	r3, #0
   119bc:	f040 80a4 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->key)->size)) != 0 ||
   119c0:	68fb      	ldr	r3, [r7, #12]
   119c2:	681b      	ldr	r3, [r3, #0]
   119c4:	88db      	ldrh	r3, [r3, #6]
   119c6:	b2db      	uxtb	r3, r3
        for (pos = 0; pos != object->maskList.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   119c8:	4619      	mov	r1, r3
   119ca:	69b8      	ldr	r0, [r7, #24]
   119cc:	f7f1 fa22 	bl	2e14 <bb_setUInt8>
   119d0:	62f8      	str	r0, [r7, #44]	; 0x2c
   119d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   119d4:	2b00      	cmp	r3, #0
   119d6:	f040 8097 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->key)->size)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
   119da:	68fb      	ldr	r3, [r7, #12]
   119dc:	681c      	ldr	r4, [r3, #0]
   119de:	68fb      	ldr	r3, [r7, #12]
   119e0:	681b      	ldr	r3, [r3, #0]
   119e2:	4618      	mov	r0, r3
   119e4:	f7f1 f970 	bl	2cc8 <bb_size>
   119e8:	4603      	mov	r3, r0
        {
            if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->key)->size)) != 0 ||
   119ea:	2200      	movs	r2, #0
   119ec:	4621      	mov	r1, r4
   119ee:	69b8      	ldr	r0, [r7, #24]
   119f0:	f7f1 fe16 	bl	3620 <bb_set2>
   119f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   119f8:	2b00      	cmp	r3, #0
   119fa:	f040 8085 	bne.w	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
   119fe:	2101      	movs	r1, #1
   11a00:	69b8      	ldr	r0, [r7, #24]
   11a02:	f7f1 fa07 	bl	2e14 <bb_setUInt8>
   11a06:	62f8      	str	r0, [r7, #44]	; 0x2c
   11a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d17c      	bne.n	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->value)->size)) != 0)
   11a0e:	68fb      	ldr	r3, [r7, #12]
   11a10:	685b      	ldr	r3, [r3, #4]
   11a12:	88db      	ldrh	r3, [r3, #6]
   11a14:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->key)->size)) != 0 ||
                (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11a16:	4619      	mov	r1, r3
   11a18:	69b8      	ldr	r0, [r7, #24]
   11a1a:	f7f1 f9fb 	bl	2e14 <bb_setUInt8>
   11a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
   11a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a22:	2b00      	cmp	r3, #0
   11a24:	d170      	bne.n	11b08 <cosem_getRegisterActivation+0x314>
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->value)->size)) != 0)
            {
                break;
            }
            for (pos2 = 0; pos2 != ((gxByteBuffer*)it->value)->size; ++pos2)
   11a26:	2300      	movs	r3, #0
   11a28:	627b      	str	r3, [r7, #36]	; 0x24
   11a2a:	e01a      	b.n	11a62 <cosem_getRegisterActivation+0x26e>
            {
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   11a2c:	2111      	movs	r1, #17
   11a2e:	69b8      	ldr	r0, [r7, #24]
   11a30:	f7f1 f9f0 	bl	2e14 <bb_setUInt8>
   11a34:	62f8      	str	r0, [r7, #44]	; 0x2c
   11a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a38:	2b00      	cmp	r3, #0
   11a3a:	d10d      	bne.n	11a58 <cosem_getRegisterActivation+0x264>
                    (ret = bb_setUInt8(data, ((gxByteBuffer*)it->value)->data[pos2])) != 0)
   11a3c:	68fb      	ldr	r3, [r7, #12]
   11a3e:	685b      	ldr	r3, [r3, #4]
   11a40:	681a      	ldr	r2, [r3, #0]
   11a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a44:	4413      	add	r3, r2
   11a46:	781b      	ldrb	r3, [r3, #0]
            {
                break;
            }
            for (pos2 = 0; pos2 != ((gxByteBuffer*)it->value)->size; ++pos2)
            {
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   11a48:	4619      	mov	r1, r3
   11a4a:	69b8      	ldr	r0, [r7, #24]
   11a4c:	f7f1 f9e2 	bl	2e14 <bb_setUInt8>
   11a50:	62f8      	str	r0, [r7, #44]	; 0x2c
   11a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a54:	2b00      	cmp	r3, #0
   11a56:	d001      	beq.n	11a5c <cosem_getRegisterActivation+0x268>
                    (ret = bb_setUInt8(data, ((gxByteBuffer*)it->value)->data[pos2])) != 0)
                {
                    return ret;
   11a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a5a:	e056      	b.n	11b0a <cosem_getRegisterActivation+0x316>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)((gxByteBuffer*)it->value)->size)) != 0)
            {
                break;
            }
            for (pos2 = 0; pos2 != ((gxByteBuffer*)it->value)->size; ++pos2)
   11a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a5e:	3301      	adds	r3, #1
   11a60:	627b      	str	r3, [r7, #36]	; 0x24
   11a62:	68fb      	ldr	r3, [r7, #12]
   11a64:	685b      	ldr	r3, [r3, #4]
   11a66:	88db      	ldrh	r3, [r3, #6]
   11a68:	461a      	mov	r2, r3
   11a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a6c:	429a      	cmp	r2, r3
   11a6e:	d1dd      	bne.n	11a2c <cosem_getRegisterActivation+0x238>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->maskList.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->maskList.size; ++pos)
   11a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11a72:	3301      	adds	r3, #1
   11a74:	62bb      	str	r3, [r7, #40]	; 0x28
   11a76:	6a3b      	ldr	r3, [r7, #32]
   11a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   11a7a:	461a      	mov	r2, r3
   11a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11a7e:	429a      	cmp	r2, r3
   11a80:	f47f af76 	bne.w	11970 <cosem_getRegisterActivation+0x17c>
   11a84:	e040      	b.n	11b08 <cosem_getRegisterActivation+0x314>
                    return ret;
                }
            }
        }
    }
    else if (e->index == 4)
   11a86:	687b      	ldr	r3, [r7, #4]
   11a88:	7e1b      	ldrb	r3, [r3, #24]
   11a8a:	2b04      	cmp	r3, #4
   11a8c:	d139      	bne.n	11b02 <cosem_getRegisterActivation+0x30e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11a8e:	687b      	ldr	r3, [r7, #4]
   11a90:	4618      	mov	r0, r3
   11a92:	f7fa ff87 	bl	c9a4 <cosem_getByteBuffer>
   11a96:	62f8      	str	r0, [r7, #44]	; 0x2c
   11a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	d001      	beq.n	11aa2 <cosem_getRegisterActivation+0x2ae>
        {
            return ret;
   11a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11aa0:	e033      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
        gxByteBuffer *data = e->value.byteArr;
   11aa2:	687b      	ldr	r3, [r7, #4]
   11aa4:	689b      	ldr	r3, [r3, #8]
   11aa6:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
   11aa8:	687b      	ldr	r3, [r7, #4]
   11aaa:	2201      	movs	r2, #1
   11aac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   11ab0:	687b      	ldr	r3, [r7, #4]
   11ab2:	2209      	movs	r2, #9
   11ab4:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11ab6:	2109      	movs	r1, #9
   11ab8:	6978      	ldr	r0, [r7, #20]
   11aba:	f7f1 f9ab 	bl	2e14 <bb_setUInt8>
   11abe:	62f8      	str	r0, [r7, #44]	; 0x2c
   11ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ac2:	2b00      	cmp	r3, #0
   11ac4:	d11b      	bne.n	11afe <cosem_getRegisterActivation+0x30a>
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
   11ac6:	6a3b      	ldr	r3, [r7, #32]
   11ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11aca:	6979      	ldr	r1, [r7, #20]
   11acc:	4618      	mov	r0, r3
   11ace:	f00f ff05 	bl	218dc <hlp_setObjectCount>
   11ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
   11ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ad6:	2b00      	cmp	r3, #0
   11ad8:	d111      	bne.n	11afe <cosem_getRegisterActivation+0x30a>
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
            (ret = bb_set2(data, &object->activeMask, 0, bb_size(&object->activeMask))) != 0)
   11ada:	6a3b      	ldr	r3, [r7, #32]
   11adc:	f103 0430 	add.w	r4, r3, #48	; 0x30
   11ae0:	6a3b      	ldr	r3, [r7, #32]
   11ae2:	3330      	adds	r3, #48	; 0x30
   11ae4:	4618      	mov	r0, r3
   11ae6:	f7f1 f8ef 	bl	2cc8 <bb_size>
   11aea:	4603      	mov	r3, r0
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
   11aec:	2200      	movs	r2, #0
   11aee:	4621      	mov	r1, r4
   11af0:	6978      	ldr	r0, [r7, #20]
   11af2:	f7f1 fd95 	bl	3620 <bb_set2>
   11af6:	62f8      	str	r0, [r7, #44]	; 0x2c
   11af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11afa:	2b00      	cmp	r3, #0
   11afc:	d004      	beq.n	11b08 <cosem_getRegisterActivation+0x314>
            (ret = bb_set2(data, &object->activeMask, 0, bb_size(&object->activeMask))) != 0)
        {
            return ret;
   11afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11b00:	e003      	b.n	11b0a <cosem_getRegisterActivation+0x316>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11b02:	f44f 7381 	mov.w	r3, #258	; 0x102
   11b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return ret;
   11b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   11b0a:	4618      	mov	r0, r3
   11b0c:	3734      	adds	r7, #52	; 0x34
   11b0e:	46bd      	mov	sp, r7
   11b10:	bd90      	pop	{r4, r7, pc}
   11b12:	bf00      	nop

00011b14 <cosem_getRegisterMonitor>:
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int cosem_getRegisterMonitor(
    gxValueEventArg *e)
{
   11b14:	b580      	push	{r7, lr}
   11b16:	b088      	sub	sp, #32
   11b18:	af00      	add	r7, sp, #0
   11b1a:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK, pos;
   11b1c:	2300      	movs	r3, #0
   11b1e:	61fb      	str	r3, [r7, #28]
    dlmsVARIANT* tmp;
    gxActionSet* actionSet;
    gxRegisterMonitor* object = (gxRegisterMonitor*)e->target;
   11b20:	687b      	ldr	r3, [r7, #4]
   11b22:	695b      	ldr	r3, [r3, #20]
   11b24:	617b      	str	r3, [r7, #20]
    if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11b26:	687b      	ldr	r3, [r7, #4]
   11b28:	4618      	mov	r0, r3
   11b2a:	f7fa ff3b 	bl	c9a4 <cosem_getByteBuffer>
   11b2e:	61f8      	str	r0, [r7, #28]
   11b30:	69fb      	ldr	r3, [r7, #28]
   11b32:	2b00      	cmp	r3, #0
   11b34:	d001      	beq.n	11b3a <cosem_getRegisterMonitor+0x26>
    {
        return ret;
   11b36:	69fb      	ldr	r3, [r7, #28]
   11b38:	e15c      	b.n	11df4 <cosem_getRegisterMonitor+0x2e0>
    }
    gxByteBuffer *data = e->value.byteArr;
   11b3a:	687b      	ldr	r3, [r7, #4]
   11b3c:	689b      	ldr	r3, [r3, #8]
   11b3e:	613b      	str	r3, [r7, #16]
    if (e->index == 2)
   11b40:	687b      	ldr	r3, [r7, #4]
   11b42:	7e1b      	ldrb	r3, [r3, #24]
   11b44:	2b02      	cmp	r3, #2
   11b46:	d137      	bne.n	11bb8 <cosem_getRegisterMonitor+0xa4>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11b48:	2101      	movs	r1, #1
   11b4a:	6938      	ldr	r0, [r7, #16]
   11b4c:	f7f1 f962 	bl	2e14 <bb_setUInt8>
   11b50:	61f8      	str	r0, [r7, #28]
   11b52:	69fb      	ldr	r3, [r7, #28]
   11b54:	2b00      	cmp	r3, #0
   11b56:	d109      	bne.n	11b6c <cosem_getRegisterMonitor+0x58>
            //Add count
            (ret = hlp_setObjectCount(object->thresholds.size, data)) != 0)
   11b58:	697b      	ldr	r3, [r7, #20]
   11b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
        return ret;
    }
    gxByteBuffer *data = e->value.byteArr;
    if (e->index == 2)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11b5c:	6939      	ldr	r1, [r7, #16]
   11b5e:	4618      	mov	r0, r3
   11b60:	f00f febc 	bl	218dc <hlp_setObjectCount>
   11b64:	61f8      	str	r0, [r7, #28]
   11b66:	69fb      	ldr	r3, [r7, #28]
   11b68:	2b00      	cmp	r3, #0
   11b6a:	d001      	beq.n	11b70 <cosem_getRegisterMonitor+0x5c>
            //Add count
            (ret = hlp_setObjectCount(object->thresholds.size, data)) != 0)
        {
            return ret;
   11b6c:	69fb      	ldr	r3, [r7, #28]
   11b6e:	e141      	b.n	11df4 <cosem_getRegisterMonitor+0x2e0>
        }
        for (pos = 0; pos != object->thresholds.size; ++pos)
   11b70:	2300      	movs	r3, #0
   11b72:	61bb      	str	r3, [r7, #24]
   11b74:	e019      	b.n	11baa <cosem_getRegisterMonitor+0x96>
        {
            if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   11b76:	697b      	ldr	r3, [r7, #20]
   11b78:	332c      	adds	r3, #44	; 0x2c
   11b7a:	f107 020c 	add.w	r2, r7, #12
   11b7e:	69b9      	ldr	r1, [r7, #24]
   11b80:	4618      	mov	r0, r3
   11b82:	f015 f973 	bl	26e6c <va_getByIndex>
   11b86:	61f8      	str	r0, [r7, #28]
   11b88:	69fb      	ldr	r3, [r7, #28]
   11b8a:	2b00      	cmp	r3, #0
   11b8c:	d108      	bne.n	11ba0 <cosem_getRegisterMonitor+0x8c>
                (ret = var_getBytes(tmp, data)) != 0)
   11b8e:	68fb      	ldr	r3, [r7, #12]
        {
            return ret;
        }
        for (pos = 0; pos != object->thresholds.size; ++pos)
        {
            if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   11b90:	6939      	ldr	r1, [r7, #16]
   11b92:	4618      	mov	r0, r3
   11b94:	f014 fd32 	bl	265fc <var_getBytes>
   11b98:	61f8      	str	r0, [r7, #28]
   11b9a:	69fb      	ldr	r3, [r7, #28]
   11b9c:	2b00      	cmp	r3, #0
   11b9e:	d001      	beq.n	11ba4 <cosem_getRegisterMonitor+0x90>
                (ret = var_getBytes(tmp, data)) != 0)
            {
                return ret;
   11ba0:	69fb      	ldr	r3, [r7, #28]
   11ba2:	e127      	b.n	11df4 <cosem_getRegisterMonitor+0x2e0>
            //Add count
            (ret = hlp_setObjectCount(object->thresholds.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->thresholds.size; ++pos)
   11ba4:	69bb      	ldr	r3, [r7, #24]
   11ba6:	3301      	adds	r3, #1
   11ba8:	61bb      	str	r3, [r7, #24]
   11baa:	697b      	ldr	r3, [r7, #20]
   11bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   11bae:	461a      	mov	r2, r3
   11bb0:	69bb      	ldr	r3, [r7, #24]
   11bb2:	429a      	cmp	r2, r3
   11bb4:	d1df      	bne.n	11b76 <cosem_getRegisterMonitor+0x62>
   11bb6:	e118      	b.n	11dea <cosem_getRegisterMonitor+0x2d6>
            {
                return ret;
            }
        }
    }
    else if (e->index == 3)
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	7e1b      	ldrb	r3, [r3, #24]
   11bbc:	2b03      	cmp	r3, #3
   11bbe:	d152      	bne.n	11c66 <cosem_getRegisterMonitor+0x152>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11bc0:	2102      	movs	r1, #2
   11bc2:	6938      	ldr	r0, [r7, #16]
   11bc4:	f7f1 f926 	bl	2e14 <bb_setUInt8>
   11bc8:	61f8      	str	r0, [r7, #28]
   11bca:	69fb      	ldr	r3, [r7, #28]
   11bcc:	2b00      	cmp	r3, #0
   11bce:	d148      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
   11bd0:	2103      	movs	r1, #3
   11bd2:	6938      	ldr	r0, [r7, #16]
   11bd4:	f7f1 f91e 	bl	2e14 <bb_setUInt8>
   11bd8:	61f8      	str	r0, [r7, #28]
   11bda:	69fb      	ldr	r3, [r7, #28]
   11bdc:	2b00      	cmp	r3, #0
   11bde:	d140      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   11be0:	2112      	movs	r1, #18
   11be2:	6938      	ldr	r0, [r7, #16]
   11be4:	f7f1 f916 	bl	2e14 <bb_setUInt8>
   11be8:	61f8      	str	r0, [r7, #28]
   11bea:	69fb      	ldr	r3, [r7, #28]
   11bec:	2b00      	cmp	r3, #0
   11bee:	d138      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            //Object type
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, object->monitoredValue.objectType)) != 0 ||
   11bf0:	697b      	ldr	r3, [r7, #20]
   11bf2:	8c1b      	ldrh	r3, [r3, #32]
    else if (e->index == 3)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 3)) != 0 ||
            //Object type
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11bf4:	4619      	mov	r1, r3
   11bf6:	6938      	ldr	r0, [r7, #16]
   11bf8:	f7f1 f99e 	bl	2f38 <bb_setUInt16>
   11bfc:	61f8      	str	r0, [r7, #28]
   11bfe:	69fb      	ldr	r3, [r7, #28]
   11c00:	2b00      	cmp	r3, #0
   11c02:	d12e      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            (ret = bb_setUInt16(data, object->monitoredValue.objectType)) != 0 ||
   11c04:	2109      	movs	r1, #9
   11c06:	6938      	ldr	r0, [r7, #16]
   11c08:	f7f1 f904 	bl	2e14 <bb_setUInt8>
   11c0c:	61f8      	str	r0, [r7, #28]
   11c0e:	69fb      	ldr	r3, [r7, #28]
   11c10:	2b00      	cmp	r3, #0
   11c12:	d126      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11c14:	6939      	ldr	r1, [r7, #16]
   11c16:	2006      	movs	r0, #6
   11c18:	f00f fe60 	bl	218dc <hlp_setObjectCount>
   11c1c:	61f8      	str	r0, [r7, #28]
   11c1e:	69fb      	ldr	r3, [r7, #28]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d11e      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
            (ret = bb_set(data, object->monitoredValue.logicalName, 6)) != 0 ||
   11c24:	697b      	ldr	r3, [r7, #20]
   11c26:	3322      	adds	r3, #34	; 0x22
            //Object type
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, object->monitoredValue.objectType)) != 0 ||
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11c28:	2206      	movs	r2, #6
   11c2a:	4619      	mov	r1, r3
   11c2c:	6938      	ldr	r0, [r7, #16]
   11c2e:	f7f1 fc97 	bl	3560 <bb_set>
   11c32:	61f8      	str	r0, [r7, #28]
   11c34:	69fb      	ldr	r3, [r7, #28]
   11c36:	2b00      	cmp	r3, #0
   11c38:	d113      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            (ret = bb_set(data, object->monitoredValue.logicalName, 6)) != 0 ||
   11c3a:	210f      	movs	r1, #15
   11c3c:	6938      	ldr	r0, [r7, #16]
   11c3e:	f7f1 f8e9 	bl	2e14 <bb_setUInt8>
   11c42:	61f8      	str	r0, [r7, #28]
   11c44:	69fb      	ldr	r3, [r7, #28]
   11c46:	2b00      	cmp	r3, #0
   11c48:	d10b      	bne.n	11c62 <cosem_getRegisterMonitor+0x14e>
            //attribute index.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, object->monitoredValue.attributeIndex)) != 0)
   11c4a:	697b      	ldr	r3, [r7, #20]
   11c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
            //LN
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = hlp_setObjectCount(6, data)) != 0 ||
            (ret = bb_set(data, object->monitoredValue.logicalName, 6)) != 0 ||
            //attribute index.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11c50:	4619      	mov	r1, r3
   11c52:	6938      	ldr	r0, [r7, #16]
   11c54:	f7f1 f8de 	bl	2e14 <bb_setUInt8>
   11c58:	61f8      	str	r0, [r7, #28]
   11c5a:	69fb      	ldr	r3, [r7, #28]
   11c5c:	2b00      	cmp	r3, #0
   11c5e:	f000 80c4 	beq.w	11dea <cosem_getRegisterMonitor+0x2d6>
            (ret = bb_setUInt8(data, object->monitoredValue.attributeIndex)) != 0)
        {
            return ret;
   11c62:	69fb      	ldr	r3, [r7, #28]
   11c64:	e0c6      	b.n	11df4 <cosem_getRegisterMonitor+0x2e0>
        }
    }
    else if (e->index == 4)
   11c66:	687b      	ldr	r3, [r7, #4]
   11c68:	7e1b      	ldrb	r3, [r3, #24]
   11c6a:	2b04      	cmp	r3, #4
   11c6c:	f040 80ba 	bne.w	11de4 <cosem_getRegisterMonitor+0x2d0>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11c70:	2101      	movs	r1, #1
   11c72:	6938      	ldr	r0, [r7, #16]
   11c74:	f7f1 f8ce 	bl	2e14 <bb_setUInt8>
   11c78:	61f8      	str	r0, [r7, #28]
   11c7a:	69fb      	ldr	r3, [r7, #28]
   11c7c:	2b00      	cmp	r3, #0
   11c7e:	d109      	bne.n	11c94 <cosem_getRegisterMonitor+0x180>
            //Add count
            (ret = hlp_setObjectCount(object->actions.size, data)) != 0)
   11c80:	697b      	ldr	r3, [r7, #20]
   11c82:	8b1b      	ldrh	r3, [r3, #24]
            return ret;
        }
    }
    else if (e->index == 4)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11c84:	6939      	ldr	r1, [r7, #16]
   11c86:	4618      	mov	r0, r3
   11c88:	f00f fe28 	bl	218dc <hlp_setObjectCount>
   11c8c:	61f8      	str	r0, [r7, #28]
   11c8e:	69fb      	ldr	r3, [r7, #28]
   11c90:	2b00      	cmp	r3, #0
   11c92:	d001      	beq.n	11c98 <cosem_getRegisterMonitor+0x184>
            //Add count
            (ret = hlp_setObjectCount(object->actions.size, data)) != 0)
        {
            return ret;
   11c94:	69fb      	ldr	r3, [r7, #28]
   11c96:	e0ad      	b.n	11df4 <cosem_getRegisterMonitor+0x2e0>
        }
        for (pos = 0; pos != object->actions.size; ++pos)
   11c98:	2300      	movs	r3, #0
   11c9a:	61bb      	str	r3, [r7, #24]
   11c9c:	e09a      	b.n	11dd4 <cosem_getRegisterMonitor+0x2c0>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11c9e:	2102      	movs	r1, #2
   11ca0:	6938      	ldr	r0, [r7, #16]
   11ca2:	f7f1 f8b7 	bl	2e14 <bb_setUInt8>
   11ca6:	61f8      	str	r0, [r7, #28]
   11ca8:	69fb      	ldr	r3, [r7, #28]
   11caa:	2b00      	cmp	r3, #0
   11cac:	f040 809d 	bne.w	11dea <cosem_getRegisterMonitor+0x2d6>
   11cb0:	2102      	movs	r1, #2
   11cb2:	6938      	ldr	r0, [r7, #16]
   11cb4:	f7f1 f8ae 	bl	2e14 <bb_setUInt8>
   11cb8:	61f8      	str	r0, [r7, #28]
   11cba:	69fb      	ldr	r3, [r7, #28]
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	f040 8094 	bne.w	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   11cc2:	697b      	ldr	r3, [r7, #20]
   11cc4:	3310      	adds	r3, #16
            return ret;
        }
        for (pos = 0; pos != object->actions.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
   11cc6:	f107 0208 	add.w	r2, r7, #8
   11cca:	69b9      	ldr	r1, [r7, #24]
   11ccc:	4618      	mov	r0, r3
   11cce:	f7fa fd95 	bl	c7fc <arr_getByIndex>
   11cd2:	61f8      	str	r0, [r7, #28]
   11cd4:	69fb      	ldr	r3, [r7, #28]
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	f040 8087 	bne.w	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   11cdc:	2102      	movs	r1, #2
   11cde:	6938      	ldr	r0, [r7, #16]
   11ce0:	f7f1 f898 	bl	2e14 <bb_setUInt8>
   11ce4:	61f8      	str	r0, [r7, #28]
   11ce6:	69fb      	ldr	r3, [r7, #28]
   11ce8:	2b00      	cmp	r3, #0
   11cea:	d17e      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11cec:	2102      	movs	r1, #2
   11cee:	6938      	ldr	r0, [r7, #16]
   11cf0:	f7f1 f890 	bl	2e14 <bb_setUInt8>
   11cf4:	61f8      	str	r0, [r7, #28]
   11cf6:	69fb      	ldr	r3, [r7, #28]
   11cf8:	2b00      	cmp	r3, #0
   11cfa:	d176      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   11cfc:	2109      	movs	r1, #9
   11cfe:	6938      	ldr	r0, [r7, #16]
   11d00:	f7f1 f888 	bl	2e14 <bb_setUInt8>
   11d04:	61f8      	str	r0, [r7, #28]
   11d06:	69fb      	ldr	r3, [r7, #28]
   11d08:	2b00      	cmp	r3, #0
   11d0a:	d16e      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11d0c:	2106      	movs	r1, #6
   11d0e:	6938      	ldr	r0, [r7, #16]
   11d10:	f7f1 f880 	bl	2e14 <bb_setUInt8>
   11d14:	61f8      	str	r0, [r7, #28]
   11d16:	69fb      	ldr	r3, [r7, #28]
   11d18:	2b00      	cmp	r3, #0
   11d1a:	d166      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, actionSet->actionUp.logicalName, 6)) != 0 ||
   11d1c:	68bb      	ldr	r3, [r7, #8]
                (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11d1e:	2206      	movs	r2, #6
   11d20:	4619      	mov	r1, r3
   11d22:	6938      	ldr	r0, [r7, #16]
   11d24:	f7f1 fc1c 	bl	3560 <bb_set>
   11d28:	61f8      	str	r0, [r7, #28]
   11d2a:	69fb      	ldr	r3, [r7, #28]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d15c      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_set(data, actionSet->actionUp.logicalName, 6)) != 0 ||
   11d30:	2112      	movs	r1, #18
   11d32:	6938      	ldr	r0, [r7, #16]
   11d34:	f7f1 f86e 	bl	2e14 <bb_setUInt8>
   11d38:	61f8      	str	r0, [r7, #28]
   11d3a:	69fb      	ldr	r3, [r7, #28]
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	d154      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   11d40:	68bb      	ldr	r3, [r7, #8]
   11d42:	88db      	ldrh	r3, [r3, #6]
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, actionSet->actionUp.logicalName, 6)) != 0 ||
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11d44:	4619      	mov	r1, r3
   11d46:	6938      	ldr	r0, [r7, #16]
   11d48:	f7f1 f8f6 	bl	2f38 <bb_setUInt16>
   11d4c:	61f8      	str	r0, [r7, #28]
   11d4e:	69fb      	ldr	r3, [r7, #28]
   11d50:	2b00      	cmp	r3, #0
   11d52:	d14a      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   11d54:	2102      	movs	r1, #2
   11d56:	6938      	ldr	r0, [r7, #16]
   11d58:	f7f1 f85c 	bl	2e14 <bb_setUInt8>
   11d5c:	61f8      	str	r0, [r7, #28]
   11d5e:	69fb      	ldr	r3, [r7, #28]
   11d60:	2b00      	cmp	r3, #0
   11d62:	d142      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11d64:	2102      	movs	r1, #2
   11d66:	6938      	ldr	r0, [r7, #16]
   11d68:	f7f1 f854 	bl	2e14 <bb_setUInt8>
   11d6c:	61f8      	str	r0, [r7, #28]
   11d6e:	69fb      	ldr	r3, [r7, #28]
   11d70:	2b00      	cmp	r3, #0
   11d72:	d13a      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   11d74:	2109      	movs	r1, #9
   11d76:	6938      	ldr	r0, [r7, #16]
   11d78:	f7f1 f84c 	bl	2e14 <bb_setUInt8>
   11d7c:	61f8      	str	r0, [r7, #28]
   11d7e:	69fb      	ldr	r3, [r7, #28]
   11d80:	2b00      	cmp	r3, #0
   11d82:	d132      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11d84:	2106      	movs	r1, #6
   11d86:	6938      	ldr	r0, [r7, #16]
   11d88:	f7f1 f844 	bl	2e14 <bb_setUInt8>
   11d8c:	61f8      	str	r0, [r7, #28]
   11d8e:	69fb      	ldr	r3, [r7, #28]
   11d90:	2b00      	cmp	r3, #0
   11d92:	d12a      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, actionSet->actionDown.logicalName, 6)) != 0 ||
   11d94:	68bb      	ldr	r3, [r7, #8]
   11d96:	3308      	adds	r3, #8
                (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11d98:	2206      	movs	r2, #6
   11d9a:	4619      	mov	r1, r3
   11d9c:	6938      	ldr	r0, [r7, #16]
   11d9e:	f7f1 fbdf 	bl	3560 <bb_set>
   11da2:	61f8      	str	r0, [r7, #28]
   11da4:	69fb      	ldr	r3, [r7, #28]
   11da6:	2b00      	cmp	r3, #0
   11da8:	d11f      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                (ret = bb_set(data, actionSet->actionDown.logicalName, 6)) != 0 ||
   11daa:	2112      	movs	r1, #18
   11dac:	6938      	ldr	r0, [r7, #16]
   11dae:	f7f1 f831 	bl	2e14 <bb_setUInt8>
   11db2:	61f8      	str	r0, [r7, #28]
   11db4:	69fb      	ldr	r3, [r7, #28]
   11db6:	2b00      	cmp	r3, #0
   11db8:	d117      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   11dba:	68bb      	ldr	r3, [r7, #8]
   11dbc:	89db      	ldrh	r3, [r3, #14]
                //Add LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, actionSet->actionDown.logicalName, 6)) != 0 ||
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11dbe:	4619      	mov	r1, r3
   11dc0:	6938      	ldr	r0, [r7, #16]
   11dc2:	f7f1 f8b9 	bl	2f38 <bb_setUInt16>
   11dc6:	61f8      	str	r0, [r7, #28]
   11dc8:	69fb      	ldr	r3, [r7, #28]
   11dca:	2b00      	cmp	r3, #0
   11dcc:	d10d      	bne.n	11dea <cosem_getRegisterMonitor+0x2d6>
            //Add count
            (ret = hlp_setObjectCount(object->actions.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->actions.size; ++pos)
   11dce:	69bb      	ldr	r3, [r7, #24]
   11dd0:	3301      	adds	r3, #1
   11dd2:	61bb      	str	r3, [r7, #24]
   11dd4:	697b      	ldr	r3, [r7, #20]
   11dd6:	8b1b      	ldrh	r3, [r3, #24]
   11dd8:	461a      	mov	r2, r3
   11dda:	69bb      	ldr	r3, [r7, #24]
   11ddc:	429a      	cmp	r2, r3
   11dde:	f47f af5e 	bne.w	11c9e <cosem_getRegisterMonitor+0x18a>
   11de2:	e002      	b.n	11dea <cosem_getRegisterMonitor+0x2d6>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11de4:	f44f 7381 	mov.w	r3, #258	; 0x102
   11de8:	61fb      	str	r3, [r7, #28]
    }
    e->byteArray = 1;
   11dea:	687b      	ldr	r3, [r7, #4]
   11dec:	2201      	movs	r2, #1
   11dee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return ret;
   11df2:	69fb      	ldr	r3, [r7, #28]
}
   11df4:	4618      	mov	r0, r3
   11df6:	3720      	adds	r7, #32
   11df8:	46bd      	mov	sp, r7
   11dfa:	bd80      	pop	{r7, pc}

00011dfc <cosem_getSapAssignment>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int cosem_getSapAssignment(
    gxValueEventArg *e)
{
   11dfc:	b590      	push	{r4, r7, lr}
   11dfe:	b089      	sub	sp, #36	; 0x24
   11e00:	af00      	add	r7, sp, #0
   11e02:	6078      	str	r0, [r7, #4]
    int ret, pos;
    gxSapItem *it;
    gxSapAssignment* object = (gxSapAssignment*)e->target;
   11e04:	687b      	ldr	r3, [r7, #4]
   11e06:	695b      	ldr	r3, [r3, #20]
   11e08:	617b      	str	r3, [r7, #20]
    if (e->index == 2)
   11e0a:	687b      	ldr	r3, [r7, #4]
   11e0c:	7e1b      	ldrb	r3, [r3, #24]
   11e0e:	2b02      	cmp	r3, #2
   11e10:	f040 8086 	bne.w	11f20 <cosem_getSapAssignment+0x124>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11e14:	687b      	ldr	r3, [r7, #4]
   11e16:	4618      	mov	r0, r3
   11e18:	f7fa fdc4 	bl	c9a4 <cosem_getByteBuffer>
   11e1c:	61f8      	str	r0, [r7, #28]
   11e1e:	69fb      	ldr	r3, [r7, #28]
   11e20:	2b00      	cmp	r3, #0
   11e22:	d001      	beq.n	11e28 <cosem_getSapAssignment+0x2c>
        {
            return ret;
   11e24:	69fb      	ldr	r3, [r7, #28]
   11e26:	e07f      	b.n	11f28 <cosem_getSapAssignment+0x12c>
        }
        gxByteBuffer *data = e->value.byteArr;
   11e28:	687b      	ldr	r3, [r7, #4]
   11e2a:	689b      	ldr	r3, [r3, #8]
   11e2c:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   11e2e:	687b      	ldr	r3, [r7, #4]
   11e30:	2201      	movs	r2, #1
   11e32:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   11e36:	687b      	ldr	r3, [r7, #4]
   11e38:	2209      	movs	r2, #9
   11e3a:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11e3c:	2101      	movs	r1, #1
   11e3e:	6938      	ldr	r0, [r7, #16]
   11e40:	f7f0 ffe8 	bl	2e14 <bb_setUInt8>
   11e44:	61f8      	str	r0, [r7, #28]
   11e46:	69fb      	ldr	r3, [r7, #28]
   11e48:	2b00      	cmp	r3, #0
   11e4a:	d109      	bne.n	11e60 <cosem_getSapAssignment+0x64>
            //Add count
            (ret = hlp_setObjectCount(object->sapAssignmentList.size, data)) != 0)
   11e4c:	697b      	ldr	r3, [r7, #20]
   11e4e:	8b1b      	ldrh	r3, [r3, #24]
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11e50:	6939      	ldr	r1, [r7, #16]
   11e52:	4618      	mov	r0, r3
   11e54:	f00f fd42 	bl	218dc <hlp_setObjectCount>
   11e58:	61f8      	str	r0, [r7, #28]
   11e5a:	69fb      	ldr	r3, [r7, #28]
   11e5c:	2b00      	cmp	r3, #0
   11e5e:	d001      	beq.n	11e64 <cosem_getSapAssignment+0x68>
            //Add count
            (ret = hlp_setObjectCount(object->sapAssignmentList.size, data)) != 0)
        {
            return ret;
   11e60:	69fb      	ldr	r3, [r7, #28]
   11e62:	e061      	b.n	11f28 <cosem_getSapAssignment+0x12c>
        }
        for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
   11e64:	2300      	movs	r3, #0
   11e66:	61bb      	str	r3, [r7, #24]
   11e68:	e053      	b.n	11f12 <cosem_getSapAssignment+0x116>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e6a:	2102      	movs	r1, #2
   11e6c:	6938      	ldr	r0, [r7, #16]
   11e6e:	f7f0 ffd1 	bl	2e14 <bb_setUInt8>
   11e72:	61f8      	str	r0, [r7, #28]
   11e74:	69fb      	ldr	r3, [r7, #28]
   11e76:	2b00      	cmp	r3, #0
   11e78:	d155      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
   11e7a:	2102      	movs	r1, #2
   11e7c:	6938      	ldr	r0, [r7, #16]
   11e7e:	f7f0 ffc9 	bl	2e14 <bb_setUInt8>
   11e82:	61f8      	str	r0, [r7, #28]
   11e84:	69fb      	ldr	r3, [r7, #28]
   11e86:	2b00      	cmp	r3, #0
   11e88:	d14d      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   11e8a:	697b      	ldr	r3, [r7, #20]
   11e8c:	3310      	adds	r3, #16
            return ret;
        }
        for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
   11e8e:	f107 020c 	add.w	r2, r7, #12
   11e92:	69b9      	ldr	r1, [r7, #24]
   11e94:	4618      	mov	r0, r3
   11e96:	f7fa fcb1 	bl	c7fc <arr_getByIndex>
   11e9a:	61f8      	str	r0, [r7, #28]
   11e9c:	69fb      	ldr	r3, [r7, #28]
   11e9e:	2b00      	cmp	r3, #0
   11ea0:	d141      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   11ea2:	2112      	movs	r1, #18
   11ea4:	6938      	ldr	r0, [r7, #16]
   11ea6:	f7f0 ffb5 	bl	2e14 <bb_setUInt8>
   11eaa:	61f8      	str	r0, [r7, #28]
   11eac:	69fb      	ldr	r3, [r7, #28]
   11eae:	2b00      	cmp	r3, #0
   11eb0:	d139      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->id)) != 0 ||
   11eb2:	68fb      	ldr	r3, [r7, #12]
   11eb4:	881b      	ldrh	r3, [r3, #0]
        for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11eb6:	4619      	mov	r1, r3
   11eb8:	6938      	ldr	r0, [r7, #16]
   11eba:	f7f1 f83d 	bl	2f38 <bb_setUInt16>
   11ebe:	61f8      	str	r0, [r7, #28]
   11ec0:	69fb      	ldr	r3, [r7, #28]
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	d12f      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = bb_setUInt16(data, it->id)) != 0 ||
   11ec6:	2109      	movs	r1, #9
   11ec8:	6938      	ldr	r0, [r7, #16]
   11eca:	f7f0 ffa3 	bl	2e14 <bb_setUInt8>
   11ece:	61f8      	str	r0, [r7, #28]
   11ed0:	69fb      	ldr	r3, [r7, #28]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d127      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   11ed6:	68fb      	ldr	r3, [r7, #12]
   11ed8:	895b      	ldrh	r3, [r3, #10]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->id)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11eda:	6939      	ldr	r1, [r7, #16]
   11edc:	4618      	mov	r0, r3
   11ede:	f00f fcfd 	bl	218dc <hlp_setObjectCount>
   11ee2:	61f8      	str	r0, [r7, #28]
   11ee4:	69fb      	ldr	r3, [r7, #28]
   11ee6:	2b00      	cmp	r3, #0
   11ee8:	d11d      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
                (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
                (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   11eea:	68fb      	ldr	r3, [r7, #12]
   11eec:	1d1c      	adds	r4, r3, #4
   11eee:	68fb      	ldr	r3, [r7, #12]
   11ef0:	3304      	adds	r3, #4
   11ef2:	4618      	mov	r0, r3
   11ef4:	f7f0 fee8 	bl	2cc8 <bb_size>
   11ef8:	4603      	mov	r3, r0
                (ret = bb_setUInt8(data, 2)) != 0 ||
                (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->id)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   11efa:	2200      	movs	r2, #0
   11efc:	4621      	mov	r1, r4
   11efe:	6938      	ldr	r0, [r7, #16]
   11f00:	f7f1 fb8e 	bl	3620 <bb_set2>
   11f04:	61f8      	str	r0, [r7, #28]
   11f06:	69fb      	ldr	r3, [r7, #28]
   11f08:	2b00      	cmp	r3, #0
   11f0a:	d10c      	bne.n	11f26 <cosem_getSapAssignment+0x12a>
            //Add count
            (ret = hlp_setObjectCount(object->sapAssignmentList.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
   11f0c:	69bb      	ldr	r3, [r7, #24]
   11f0e:	3301      	adds	r3, #1
   11f10:	61bb      	str	r3, [r7, #24]
   11f12:	697b      	ldr	r3, [r7, #20]
   11f14:	8b1b      	ldrh	r3, [r3, #24]
   11f16:	461a      	mov	r2, r3
   11f18:	69bb      	ldr	r3, [r7, #24]
   11f1a:	429a      	cmp	r2, r3
   11f1c:	d1a5      	bne.n	11e6a <cosem_getSapAssignment+0x6e>
   11f1e:	e002      	b.n	11f26 <cosem_getSapAssignment+0x12a>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11f20:	f44f 7381 	mov.w	r3, #258	; 0x102
   11f24:	61fb      	str	r3, [r7, #28]
    }
    return ret;
   11f26:	69fb      	ldr	r3, [r7, #28]
}
   11f28:	4618      	mov	r0, r3
   11f2a:	3724      	adds	r7, #36	; 0x24
   11f2c:	46bd      	mov	sp, r7
   11f2e:	bd90      	pop	{r4, r7, pc}

00011f30 <cosem_getSchedule>:
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_SCHEDULE
int cosem_getSchedule(
    gxValueEventArg *e)
{
   11f30:	b590      	push	{r4, r7, lr}
   11f32:	b08d      	sub	sp, #52	; 0x34
   11f34:	af00      	add	r7, sp, #0
   11f36:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
   11f38:	2300      	movs	r3, #0
   11f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    gxScheduleEntry *se;
    dlmsVARIANT tmp;
    gxSchedule* object = (gxSchedule*)e->target;
   11f3c:	687b      	ldr	r3, [r7, #4]
   11f3e:	695b      	ldr	r3, [r3, #20]
   11f40:	627b      	str	r3, [r7, #36]	; 0x24
    if (e->index == 2)
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	7e1b      	ldrb	r3, [r3, #24]
   11f46:	2b02      	cmp	r3, #2
   11f48:	f040 817d 	bne.w	12246 <cosem_getSchedule+0x316>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	4618      	mov	r0, r3
   11f50:	f7fa fd28 	bl	c9a4 <cosem_getByteBuffer>
   11f54:	62b8      	str	r0, [r7, #40]	; 0x28
   11f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d001      	beq.n	11f60 <cosem_getSchedule+0x30>
        {
            return ret;
   11f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f5e:	e176      	b.n	1224e <cosem_getSchedule+0x31e>
        }
        gxByteBuffer *data = e->value.byteArr;
   11f60:	687b      	ldr	r3, [r7, #4]
   11f62:	689b      	ldr	r3, [r3, #8]
   11f64:	623b      	str	r3, [r7, #32]
        e->byteArray = 1;
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	2201      	movs	r2, #1
   11f6a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11f6e:	2101      	movs	r1, #1
   11f70:	6a38      	ldr	r0, [r7, #32]
   11f72:	f7f0 ff4f 	bl	2e14 <bb_setUInt8>
   11f76:	62b8      	str	r0, [r7, #40]	; 0x28
   11f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f7a:	2b00      	cmp	r3, #0
   11f7c:	d112      	bne.n	11fa4 <cosem_getSchedule+0x74>
            //Add count
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0 ||
   11f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f80:	8b1b      	ldrh	r3, [r3, #24]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11f82:	6a39      	ldr	r1, [r7, #32]
   11f84:	4618      	mov	r0, r3
   11f86:	f00f fca9 	bl	218dc <hlp_setObjectCount>
   11f8a:	62b8      	str	r0, [r7, #40]	; 0x28
   11f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f8e:	2b00      	cmp	r3, #0
   11f90:	d108      	bne.n	11fa4 <cosem_getSchedule+0x74>
            //Add count
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0 ||
   11f92:	f107 0308 	add.w	r3, r7, #8
   11f96:	4618      	mov	r0, r3
   11f98:	f014 f8c6 	bl	26128 <var_init>
   11f9c:	62b8      	str	r0, [r7, #40]	; 0x28
   11f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d001      	beq.n	11fa8 <cosem_getSchedule+0x78>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
   11fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fa6:	e152      	b.n	1224e <cosem_getSchedule+0x31e>
        }
        for (pos = 0; pos != object->entries.size; ++pos)
   11fa8:	2300      	movs	r3, #0
   11faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   11fac:	e143      	b.n	12236 <cosem_getSchedule+0x306>
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11fae:	2102      	movs	r1, #2
   11fb0:	6a38      	ldr	r0, [r7, #32]
   11fb2:	f7f0 ff2f 	bl	2e14 <bb_setUInt8>
   11fb6:	62b8      	str	r0, [r7, #40]	; 0x28
   11fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fba:	2b00      	cmp	r3, #0
   11fbc:	f040 8132 	bne.w	12224 <cosem_getSchedule+0x2f4>
   11fc0:	210a      	movs	r1, #10
   11fc2:	6a38      	ldr	r0, [r7, #32]
   11fc4:	f7f0 ff26 	bl	2e14 <bb_setUInt8>
   11fc8:	62b8      	str	r0, [r7, #40]	; 0x28
   11fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fcc:	2b00      	cmp	r3, #0
   11fce:	f040 8129 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt8(data, 10)) != 0 ||
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   11fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11fd4:	3310      	adds	r3, #16
            return ret;
        }
        for (pos = 0; pos != object->entries.size; ++pos)
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 10)) != 0 ||
   11fd6:	f107 021c 	add.w	r2, r7, #28
   11fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11fdc:	4618      	mov	r0, r3
   11fde:	f7fa fc0d 	bl	c7fc <arr_getByIndex>
   11fe2:	62b8      	str	r0, [r7, #40]	; 0x28
   11fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	f040 811c 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   11fec:	2112      	movs	r1, #18
   11fee:	6a38      	ldr	r0, [r7, #32]
   11ff0:	f7f0 ff10 	bl	2e14 <bb_setUInt8>
   11ff4:	62b8      	str	r0, [r7, #40]	; 0x28
   11ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	f040 8113 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add index.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->index)) != 0 ||
   11ffe:	69fb      	ldr	r3, [r7, #28]
   12000:	881b      	ldrh	r3, [r3, #0]
        {
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 10)) != 0 ||
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
                //Add index.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12002:	4619      	mov	r1, r3
   12004:	6a38      	ldr	r0, [r7, #32]
   12006:	f7f0 ff97 	bl	2f38 <bb_setUInt16>
   1200a:	62b8      	str	r0, [r7, #40]	; 0x28
   1200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1200e:	2b00      	cmp	r3, #0
   12010:	f040 8108 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt16(data, se->index)) != 0 ||
   12014:	2103      	movs	r1, #3
   12016:	6a38      	ldr	r0, [r7, #32]
   12018:	f7f0 fefc 	bl	2e14 <bb_setUInt8>
   1201c:	62b8      	str	r0, [r7, #40]	; 0x28
   1201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12020:	2b00      	cmp	r3, #0
   12022:	f040 80ff 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add enable.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
                (ret = bb_setUInt8(data, se->enable)) != 0 ||
   12026:	69fb      	ldr	r3, [r7, #28]
   12028:	789b      	ldrb	r3, [r3, #2]
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
                //Add index.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->index)) != 0 ||
                //Add enable.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
   1202a:	4619      	mov	r1, r3
   1202c:	6a38      	ldr	r0, [r7, #32]
   1202e:	f7f0 fef1 	bl	2e14 <bb_setUInt8>
   12032:	62b8      	str	r0, [r7, #40]	; 0x28
   12034:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12036:	2b00      	cmp	r3, #0
   12038:	f040 80f4 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt8(data, se->enable)) != 0 ||
   1203c:	2109      	movs	r1, #9
   1203e:	6a38      	ldr	r0, [r7, #32]
   12040:	f7f0 fee8 	bl	2e14 <bb_setUInt8>
   12044:	62b8      	str	r0, [r7, #40]	; 0x28
   12046:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12048:	2b00      	cmp	r3, #0
   1204a:	f040 80eb 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add logical Name.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1204e:	2106      	movs	r1, #6
   12050:	6a38      	ldr	r0, [r7, #32]
   12052:	f7f0 fedf 	bl	2e14 <bb_setUInt8>
   12056:	62b8      	str	r0, [r7, #40]	; 0x28
   12058:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1205a:	2b00      	cmp	r3, #0
   1205c:	f040 80e2 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, se->logicalName, 6)) != 0 ||
   12060:	69fb      	ldr	r3, [r7, #28]
   12062:	3303      	adds	r3, #3
                //Add enable.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
                (ret = bb_setUInt8(data, se->enable)) != 0 ||
                //Add logical Name.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   12064:	2206      	movs	r2, #6
   12066:	4619      	mov	r1, r3
   12068:	6a38      	ldr	r0, [r7, #32]
   1206a:	f7f1 fa79 	bl	3560 <bb_set>
   1206e:	62b8      	str	r0, [r7, #40]	; 0x28
   12070:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12072:	2b00      	cmp	r3, #0
   12074:	f040 80d6 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_set(data, se->logicalName, 6)) != 0 ||
   12078:	2112      	movs	r1, #18
   1207a:	6a38      	ldr	r0, [r7, #32]
   1207c:	f7f0 feca 	bl	2e14 <bb_setUInt8>
   12080:	62b8      	str	r0, [r7, #40]	; 0x28
   12082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12084:	2b00      	cmp	r3, #0
   12086:	f040 80cd 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->scriptSelector)) != 0 ||
   1208a:	69fb      	ldr	r3, [r7, #28]
   1208c:	895b      	ldrh	r3, [r3, #10]
                //Add logical Name.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, se->logicalName, 6)) != 0 ||
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1208e:	4619      	mov	r1, r3
   12090:	6a38      	ldr	r0, [r7, #32]
   12092:	f7f0 ff51 	bl	2f38 <bb_setUInt16>
   12096:	62b8      	str	r0, [r7, #40]	; 0x28
   12098:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1209a:	2b00      	cmp	r3, #0
   1209c:	f040 80c2 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt16(data, se->scriptSelector)) != 0 ||
                //Add switch time.
                (ret = var_setDateTime(&tmp, &se->switchTime)) != 0 ||
   120a0:	69fb      	ldr	r3, [r7, #28]
   120a2:	f103 020c 	add.w	r2, r3, #12
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, se->logicalName, 6)) != 0 ||
                //Add script selector.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->scriptSelector)) != 0 ||
   120a6:	f107 0308 	add.w	r3, r7, #8
   120aa:	4611      	mov	r1, r2
   120ac:	4618      	mov	r0, r3
   120ae:	f015 ffb1 	bl	28014 <var_setDateTime>
   120b2:	62b8      	str	r0, [r7, #40]	; 0x28
   120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   120b6:	2b00      	cmp	r3, #0
   120b8:	f040 80b4 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add switch time.
                (ret = var_setDateTime(&tmp, &se->switchTime)) != 0 ||
   120bc:	f107 0308 	add.w	r3, r7, #8
   120c0:	6a39      	ldr	r1, [r7, #32]
   120c2:	4618      	mov	r0, r3
   120c4:	f014 fa9a 	bl	265fc <var_getBytes>
   120c8:	62b8      	str	r0, [r7, #40]	; 0x28
   120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   120cc:	2b00      	cmp	r3, #0
   120ce:	f040 80a9 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   120d2:	f107 0308 	add.w	r3, r7, #8
   120d6:	4618      	mov	r0, r3
   120d8:	f014 f836 	bl	26148 <var_clear>
   120dc:	62b8      	str	r0, [r7, #40]	; 0x28
   120de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   120e0:	2b00      	cmp	r3, #0
   120e2:	f040 809f 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = var_clear(&tmp)) != 0 ||
   120e6:	2112      	movs	r1, #18
   120e8:	6a38      	ldr	r0, [r7, #32]
   120ea:	f7f0 fe93 	bl	2e14 <bb_setUInt8>
   120ee:	62b8      	str	r0, [r7, #40]	; 0x28
   120f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   120f2:	2b00      	cmp	r3, #0
   120f4:	f040 8096 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add validity window.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->validityWindow)) != 0 ||
   120f8:	69fb      	ldr	r3, [r7, #28]
   120fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
                //Add switch time.
                (ret = var_setDateTime(&tmp, &se->switchTime)) != 0 ||
                (ret = var_getBytes(&tmp, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
                //Add validity window.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   120fc:	4619      	mov	r1, r3
   120fe:	6a38      	ldr	r0, [r7, #32]
   12100:	f7f0 ff1a 	bl	2f38 <bb_setUInt16>
   12104:	62b8      	str	r0, [r7, #40]	; 0x28
   12106:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12108:	2b00      	cmp	r3, #0
   1210a:	f040 808b 	bne.w	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_setUInt16(data, se->validityWindow)) != 0 ||
   1210e:	2104      	movs	r1, #4
   12110:	6a38      	ldr	r0, [r7, #32]
   12112:	f7f0 fe7f 	bl	2e14 <bb_setUInt8>
   12116:	62b8      	str	r0, [r7, #40]	; 0x28
   12118:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1211a:	2b00      	cmp	r3, #0
   1211c:	f040 8082 	bne.w	12224 <cosem_getSchedule+0x2f4>
                //Add exec week days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
   12120:	69fb      	ldr	r3, [r7, #28]
   12122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
                (ret = var_clear(&tmp)) != 0 ||
                //Add validity window.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->validityWindow)) != 0 ||
                //Add exec week days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12126:	6a39      	ldr	r1, [r7, #32]
   12128:	4618      	mov	r0, r3
   1212a:	f00f fbd7 	bl	218dc <hlp_setObjectCount>
   1212e:	62b8      	str	r0, [r7, #40]	; 0x28
   12130:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12132:	2b00      	cmp	r3, #0
   12134:	d176      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
                (ret = bb_set(data, se->execWeekdays.data, ba_getByteCount(se->execWeekdays.size))) != 0 ||
   12136:	69fb      	ldr	r3, [r7, #28]
   12138:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   1213a:	69fb      	ldr	r3, [r7, #28]
   1213c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
   12140:	4618      	mov	r0, r3
   12142:	f7f0 faf9 	bl	2738 <ba_getByteCount>
   12146:	4603      	mov	r3, r0
                //Add validity window.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, se->validityWindow)) != 0 ||
                //Add exec week days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
   12148:	461a      	mov	r2, r3
   1214a:	4621      	mov	r1, r4
   1214c:	6a38      	ldr	r0, [r7, #32]
   1214e:	f7f1 fa07 	bl	3560 <bb_set>
   12152:	62b8      	str	r0, [r7, #40]	; 0x28
   12154:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12156:	2b00      	cmp	r3, #0
   12158:	d164      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_set(data, se->execWeekdays.data, ba_getByteCount(se->execWeekdays.size))) != 0 ||
   1215a:	2104      	movs	r1, #4
   1215c:	6a38      	ldr	r0, [r7, #32]
   1215e:	f7f0 fe59 	bl	2e14 <bb_setUInt8>
   12162:	62b8      	str	r0, [r7, #40]	; 0x28
   12164:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12166:	2b00      	cmp	r3, #0
   12168:	d15c      	bne.n	12224 <cosem_getSchedule+0x2f4>
                //Add exec spec days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   1216a:	69fb      	ldr	r3, [r7, #28]
   1216c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
                //Add exec week days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
                (ret = bb_set(data, se->execWeekdays.data, ba_getByteCount(se->execWeekdays.size))) != 0 ||
                //Add exec spec days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12170:	6a39      	ldr	r1, [r7, #32]
   12172:	4618      	mov	r0, r3
   12174:	f00f fbb2 	bl	218dc <hlp_setObjectCount>
   12178:	62b8      	str	r0, [r7, #40]	; 0x28
   1217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1217c:	2b00      	cmp	r3, #0
   1217e:	d151      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   12180:	69fb      	ldr	r3, [r7, #28]
   12182:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   12184:	69fb      	ldr	r3, [r7, #28]
   12186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
   1218a:	4618      	mov	r0, r3
   1218c:	f7f0 fad4 	bl	2738 <ba_getByteCount>
   12190:	4603      	mov	r3, r0
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
                (ret = bb_set(data, se->execWeekdays.data, ba_getByteCount(se->execWeekdays.size))) != 0 ||
                //Add exec spec days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   12192:	461a      	mov	r2, r3
   12194:	4621      	mov	r1, r4
   12196:	6a38      	ldr	r0, [r7, #32]
   12198:	f7f1 f9e2 	bl	3560 <bb_set>
   1219c:	62b8      	str	r0, [r7, #40]	; 0x28
   1219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121a0:	2b00      	cmp	r3, #0
   121a2:	d13f      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
                //Add begin date.
                (ret = var_setDateTime(&tmp, &se->beginDate)) != 0 ||
   121a4:	69fb      	ldr	r3, [r7, #28]
   121a6:	f103 0258 	add.w	r2, r3, #88	; 0x58
                (ret = hlp_setObjectCount(se->execWeekdays.size, data)) != 0 ||
                (ret = bb_set(data, se->execWeekdays.data, ba_getByteCount(se->execWeekdays.size))) != 0 ||
                //Add exec spec days.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   121aa:	f107 0308 	add.w	r3, r7, #8
   121ae:	4611      	mov	r1, r2
   121b0:	4618      	mov	r0, r3
   121b2:	f015 ff2f 	bl	28014 <var_setDateTime>
   121b6:	62b8      	str	r0, [r7, #40]	; 0x28
   121b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121ba:	2b00      	cmp	r3, #0
   121bc:	d132      	bne.n	12224 <cosem_getSchedule+0x2f4>
                //Add begin date.
                (ret = var_setDateTime(&tmp, &se->beginDate)) != 0 ||
   121be:	f107 0308 	add.w	r3, r7, #8
   121c2:	6a39      	ldr	r1, [r7, #32]
   121c4:	4618      	mov	r0, r3
   121c6:	f014 fa19 	bl	265fc <var_getBytes>
   121ca:	62b8      	str	r0, [r7, #40]	; 0x28
   121cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121ce:	2b00      	cmp	r3, #0
   121d0:	d128      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   121d2:	f107 0308 	add.w	r3, r7, #8
   121d6:	4618      	mov	r0, r3
   121d8:	f013 ffb6 	bl	26148 <var_clear>
   121dc:	62b8      	str	r0, [r7, #40]	; 0x28
   121de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121e0:	2b00      	cmp	r3, #0
   121e2:	d11f      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = var_clear(&tmp)) != 0 ||
                //Add end date.
                (ret = var_setDateTime(&tmp, &se->endDate)) != 0 ||
   121e4:	69fb      	ldr	r3, [r7, #28]
   121e6:	f103 0288 	add.w	r2, r3, #136	; 0x88
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
                //Add begin date.
                (ret = var_setDateTime(&tmp, &se->beginDate)) != 0 ||
                (ret = var_getBytes(&tmp, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
   121ea:	f107 0308 	add.w	r3, r7, #8
   121ee:	4611      	mov	r1, r2
   121f0:	4618      	mov	r0, r3
   121f2:	f015 ff0f 	bl	28014 <var_setDateTime>
   121f6:	62b8      	str	r0, [r7, #40]	; 0x28
   121f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121fa:	2b00      	cmp	r3, #0
   121fc:	d112      	bne.n	12224 <cosem_getSchedule+0x2f4>
                //Add end date.
                (ret = var_setDateTime(&tmp, &se->endDate)) != 0 ||
   121fe:	f107 0308 	add.w	r3, r7, #8
   12202:	6a39      	ldr	r1, [r7, #32]
   12204:	4618      	mov	r0, r3
   12206:	f014 f9f9 	bl	265fc <var_getBytes>
   1220a:	62b8      	str	r0, [r7, #40]	; 0x28
   1220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1220e:	2b00      	cmp	r3, #0
   12210:	d108      	bne.n	12224 <cosem_getSchedule+0x2f4>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   12212:	f107 0308 	add.w	r3, r7, #8
   12216:	4618      	mov	r0, r3
   12218:	f013 ff96 	bl	26148 <var_clear>
   1221c:	62b8      	str	r0, [r7, #40]	; 0x28
   1221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12220:	2b00      	cmp	r3, #0
   12222:	d005      	beq.n	12230 <cosem_getSchedule+0x300>
                (ret = var_clear(&tmp)) != 0)
            {
                var_clear(&tmp);
   12224:	f107 0308 	add.w	r3, r7, #8
   12228:	4618      	mov	r0, r3
   1222a:	f013 ff8d 	bl	26148 <var_clear>
                break;
   1222e:	e00d      	b.n	1224c <cosem_getSchedule+0x31c>
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0 ||
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->entries.size; ++pos)
   12230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12232:	3301      	adds	r3, #1
   12234:	62fb      	str	r3, [r7, #44]	; 0x2c
   12236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12238:	8b1b      	ldrh	r3, [r3, #24]
   1223a:	461a      	mov	r2, r3
   1223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1223e:	429a      	cmp	r2, r3
   12240:	f47f aeb5 	bne.w	11fae <cosem_getSchedule+0x7e>
   12244:	e002      	b.n	1224c <cosem_getSchedule+0x31c>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   12246:	f44f 7381 	mov.w	r3, #258	; 0x102
   1224a:	e000      	b.n	1224e <cosem_getSchedule+0x31e>
    }
    return ret;
   1224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   1224e:	4618      	mov	r0, r3
   12250:	3734      	adds	r7, #52	; 0x34
   12252:	46bd      	mov	sp, r7
   12254:	bd90      	pop	{r4, r7, pc}
   12256:	bf00      	nop

00012258 <cosem_getScriptTable>:
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
int cosem_getScriptTable(
    gxValueEventArg *e)
{
   12258:	b580      	push	{r7, lr}
   1225a:	b08a      	sub	sp, #40	; 0x28
   1225c:	af00      	add	r7, sp, #0
   1225e:	6078      	str	r0, [r7, #4]
    int ret, pos, pos2;
    gxScript *it;
    gxScriptAction *a;
    gxScriptTable* object = (gxScriptTable*)e->target;
   12260:	687b      	ldr	r3, [r7, #4]
   12262:	695b      	ldr	r3, [r3, #20]
   12264:	61bb      	str	r3, [r7, #24]
    if (e->index == 2)
   12266:	687b      	ldr	r3, [r7, #4]
   12268:	7e1b      	ldrb	r3, [r3, #24]
   1226a:	2b02      	cmp	r3, #2
   1226c:	f040 8105 	bne.w	1247a <cosem_getScriptTable+0x222>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	4618      	mov	r0, r3
   12274:	f7fa fb96 	bl	c9a4 <cosem_getByteBuffer>
   12278:	6278      	str	r0, [r7, #36]	; 0x24
   1227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1227c:	2b00      	cmp	r3, #0
   1227e:	d001      	beq.n	12284 <cosem_getScriptTable+0x2c>
        {
            return ret;
   12280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12282:	e0fe      	b.n	12482 <cosem_getScriptTable+0x22a>
        }
        gxByteBuffer *data = e->value.byteArr;
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	689b      	ldr	r3, [r3, #8]
   12288:	617b      	str	r3, [r7, #20]
        e->byteArray = 1;
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	2201      	movs	r2, #1
   1228e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   12292:	687b      	ldr	r3, [r7, #4]
   12294:	2209      	movs	r2, #9
   12296:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12298:	2101      	movs	r1, #1
   1229a:	6978      	ldr	r0, [r7, #20]
   1229c:	f7f0 fdba 	bl	2e14 <bb_setUInt8>
   122a0:	6278      	str	r0, [r7, #36]	; 0x24
   122a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122a4:	2b00      	cmp	r3, #0
   122a6:	d109      	bne.n	122bc <cosem_getScriptTable+0x64>
            (ret = hlp_setObjectCount(object->scripts.size, data)) != 0)
   122a8:	69bb      	ldr	r3, [r7, #24]
   122aa:	8b1b      	ldrh	r3, [r3, #24]
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   122ac:	6979      	ldr	r1, [r7, #20]
   122ae:	4618      	mov	r0, r3
   122b0:	f00f fb14 	bl	218dc <hlp_setObjectCount>
   122b4:	6278      	str	r0, [r7, #36]	; 0x24
   122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122b8:	2b00      	cmp	r3, #0
   122ba:	d001      	beq.n	122c0 <cosem_getScriptTable+0x68>
            (ret = hlp_setObjectCount(object->scripts.size, data)) != 0)
        {
            return ret;
   122bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122be:	e0e0      	b.n	12482 <cosem_getScriptTable+0x22a>
        }
        for (pos = 0; pos != object->scripts.size; ++pos)
   122c0:	2300      	movs	r3, #0
   122c2:	623b      	str	r3, [r7, #32]
   122c4:	e0d1      	b.n	1246a <cosem_getScriptTable+0x212>
        {
            if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   122c6:	69bb      	ldr	r3, [r7, #24]
   122c8:	3310      	adds	r3, #16
   122ca:	f107 0210 	add.w	r2, r7, #16
   122ce:	6a39      	ldr	r1, [r7, #32]
   122d0:	4618      	mov	r0, r3
   122d2:	f7fa fa93 	bl	c7fc <arr_getByIndex>
   122d6:	6278      	str	r0, [r7, #36]	; 0x24
   122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122da:	2b00      	cmp	r3, #0
   122dc:	f040 80d0 	bne.w	12480 <cosem_getScriptTable+0x228>
   122e0:	2102      	movs	r1, #2
   122e2:	6978      	ldr	r0, [r7, #20]
   122e4:	f7f0 fd96 	bl	2e14 <bb_setUInt8>
   122e8:	6278      	str	r0, [r7, #36]	; 0x24
   122ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122ec:	2b00      	cmp	r3, #0
   122ee:	f040 80c7 	bne.w	12480 <cosem_getScriptTable+0x228>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   122f2:	2102      	movs	r1, #2
   122f4:	6978      	ldr	r0, [r7, #20]
   122f6:	f7f0 fd8d 	bl	2e14 <bb_setUInt8>
   122fa:	6278      	str	r0, [r7, #36]	; 0x24
   122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122fe:	2b00      	cmp	r3, #0
   12300:	f040 80be 	bne.w	12480 <cosem_getScriptTable+0x228>
                (ret = bb_setUInt8(data, 2)) != 0 ||
   12304:	2112      	movs	r1, #18
   12306:	6978      	ldr	r0, [r7, #20]
   12308:	f7f0 fd84 	bl	2e14 <bb_setUInt8>
   1230c:	6278      	str	r0, [r7, #36]	; 0x24
   1230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12310:	2b00      	cmp	r3, #0
   12312:	f040 80b5 	bne.w	12480 <cosem_getScriptTable+0x228>
                //Script_identifier:
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->id)) != 0 ||
   12316:	693b      	ldr	r3, [r7, #16]
   12318:	881b      	ldrh	r3, [r3, #0]
        {
            if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Script_identifier:
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1231a:	4619      	mov	r1, r3
   1231c:	6978      	ldr	r0, [r7, #20]
   1231e:	f7f0 fe0b 	bl	2f38 <bb_setUInt16>
   12322:	6278      	str	r0, [r7, #36]	; 0x24
   12324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12326:	2b00      	cmp	r3, #0
   12328:	f040 80aa 	bne.w	12480 <cosem_getScriptTable+0x228>
                (ret = bb_setUInt16(data, it->id)) != 0 ||
   1232c:	2101      	movs	r1, #1
   1232e:	6978      	ldr	r0, [r7, #20]
   12330:	f7f0 fd70 	bl	2e14 <bb_setUInt8>
   12334:	6278      	str	r0, [r7, #36]	; 0x24
   12336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12338:	2b00      	cmp	r3, #0
   1233a:	f040 80a1 	bne.w	12480 <cosem_getScriptTable+0x228>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->actions.size)) != 0)
   1233e:	693b      	ldr	r3, [r7, #16]
   12340:	899b      	ldrh	r3, [r3, #12]
   12342:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Script_identifier:
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, it->id)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12344:	4619      	mov	r1, r3
   12346:	6978      	ldr	r0, [r7, #20]
   12348:	f7f0 fd64 	bl	2e14 <bb_setUInt8>
   1234c:	6278      	str	r0, [r7, #36]	; 0x24
   1234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12350:	2b00      	cmp	r3, #0
   12352:	f040 8095 	bne.w	12480 <cosem_getScriptTable+0x228>
                (ret = bb_setUInt8(data, (unsigned char)it->actions.size)) != 0)
            {
                break;
            }
            for (pos2 = 0; pos2 != it->actions.size; ++pos2)
   12356:	2300      	movs	r3, #0
   12358:	61fb      	str	r3, [r7, #28]
   1235a:	e07c      	b.n	12456 <cosem_getScriptTable+0x1fe>
            {
                if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   1235c:	693b      	ldr	r3, [r7, #16]
   1235e:	3304      	adds	r3, #4
   12360:	f107 020c 	add.w	r2, r7, #12
   12364:	69f9      	ldr	r1, [r7, #28]
   12366:	4618      	mov	r0, r3
   12368:	f7fa fa48 	bl	c7fc <arr_getByIndex>
   1236c:	6278      	str	r0, [r7, #36]	; 0x24
   1236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12370:	2b00      	cmp	r3, #0
   12372:	d16b      	bne.n	1244c <cosem_getScriptTable+0x1f4>
   12374:	2102      	movs	r1, #2
   12376:	6978      	ldr	r0, [r7, #20]
   12378:	f7f0 fd4c 	bl	2e14 <bb_setUInt8>
   1237c:	6278      	str	r0, [r7, #36]	; 0x24
   1237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12380:	2b00      	cmp	r3, #0
   12382:	d163      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12384:	2105      	movs	r1, #5
   12386:	6978      	ldr	r0, [r7, #20]
   12388:	f7f0 fd44 	bl	2e14 <bb_setUInt8>
   1238c:	6278      	str	r0, [r7, #36]	; 0x24
   1238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12390:	2b00      	cmp	r3, #0
   12392:	d15b      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setUInt8(data, 5)) != 0 ||
   12394:	2116      	movs	r1, #22
   12396:	6978      	ldr	r0, [r7, #20]
   12398:	f7f0 fd3c 	bl	2e14 <bb_setUInt8>
   1239c:	6278      	str	r0, [r7, #36]	; 0x24
   1239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123a0:	2b00      	cmp	r3, #0
   123a2:	d153      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    //service_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
                    (ret = bb_setUInt8(data, a->type)) != 0 ||
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	781b      	ldrb	r3, [r3, #0]
            {
                if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                    (ret = bb_setUInt8(data, 5)) != 0 ||
                    //service_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   123a8:	4619      	mov	r1, r3
   123aa:	6978      	ldr	r0, [r7, #20]
   123ac:	f7f0 fd32 	bl	2e14 <bb_setUInt8>
   123b0:	6278      	str	r0, [r7, #36]	; 0x24
   123b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123b4:	2b00      	cmp	r3, #0
   123b6:	d149      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setUInt8(data, a->type)) != 0 ||
   123b8:	2112      	movs	r1, #18
   123ba:	6978      	ldr	r0, [r7, #20]
   123bc:	f7f0 fd2a 	bl	2e14 <bb_setUInt8>
   123c0:	6278      	str	r0, [r7, #36]	; 0x24
   123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123c4:	2b00      	cmp	r3, #0
   123c6:	d141      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    //class_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                    (ret = bb_setUInt16(data, a->objectType)) != 0 ||
   123c8:	68fb      	ldr	r3, [r7, #12]
   123ca:	885b      	ldrh	r3, [r3, #2]
                    (ret = bb_setUInt8(data, 5)) != 0 ||
                    //service_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
                    (ret = bb_setUInt8(data, a->type)) != 0 ||
                    //class_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   123cc:	4619      	mov	r1, r3
   123ce:	6978      	ldr	r0, [r7, #20]
   123d0:	f7f0 fdb2 	bl	2f38 <bb_setUInt16>
   123d4:	6278      	str	r0, [r7, #36]	; 0x24
   123d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123d8:	2b00      	cmp	r3, #0
   123da:	d137      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setUInt16(data, a->objectType)) != 0 ||
   123dc:	2109      	movs	r1, #9
   123de:	6978      	ldr	r0, [r7, #20]
   123e0:	f7f0 fd18 	bl	2e14 <bb_setUInt8>
   123e4:	6278      	str	r0, [r7, #36]	; 0x24
   123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123e8:	2b00      	cmp	r3, #0
   123ea:	d12f      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    //logical_name
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   123ec:	2106      	movs	r1, #6
   123ee:	6978      	ldr	r0, [r7, #20]
   123f0:	f7f0 fd10 	bl	2e14 <bb_setUInt8>
   123f4:	6278      	str	r0, [r7, #36]	; 0x24
   123f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123f8:	2b00      	cmp	r3, #0
   123fa:	d127      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
                    (ret = bb_set(data, a->logicalName, 6)) != 0 ||
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3304      	adds	r3, #4
                    //class_id
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                    (ret = bb_setUInt16(data, a->objectType)) != 0 ||
                    //logical_name
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12400:	2206      	movs	r2, #6
   12402:	4619      	mov	r1, r3
   12404:	6978      	ldr	r0, [r7, #20]
   12406:	f7f1 f8ab 	bl	3560 <bb_set>
   1240a:	6278      	str	r0, [r7, #36]	; 0x24
   1240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1240e:	2b00      	cmp	r3, #0
   12410:	d11c      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_set(data, a->logicalName, 6)) != 0 ||
   12412:	210f      	movs	r1, #15
   12414:	6978      	ldr	r0, [r7, #20]
   12416:	f7f0 fcfd 	bl	2e14 <bb_setUInt8>
   1241a:	6278      	str	r0, [r7, #36]	; 0x24
   1241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1241e:	2b00      	cmp	r3, #0
   12420:	d114      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    //index
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                    (ret = bb_setInt8(data, a->index)) != 0 ||
   12422:	68fb      	ldr	r3, [r7, #12]
   12424:	f893 3020 	ldrb.w	r3, [r3, #32]
                    //logical_name
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, 6)) != 0 ||
                    (ret = bb_set(data, a->logicalName, 6)) != 0 ||
                    //index
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12428:	4619      	mov	r1, r3
   1242a:	6978      	ldr	r0, [r7, #20]
   1242c:	f7f1 f856 	bl	34dc <bb_setInt8>
   12430:	6278      	str	r0, [r7, #36]	; 0x24
   12432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12434:	2b00      	cmp	r3, #0
   12436:	d109      	bne.n	1244c <cosem_getScriptTable+0x1f4>
                    (ret = bb_setInt8(data, a->index)) != 0 ||
                    //parameter
                    (ret = var_getBytes(&a->parameter, data)) != 0)
   12438:	68fb      	ldr	r3, [r7, #12]
   1243a:	3310      	adds	r3, #16
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, 6)) != 0 ||
                    (ret = bb_set(data, a->logicalName, 6)) != 0 ||
                    //index
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                    (ret = bb_setInt8(data, a->index)) != 0 ||
   1243c:	6979      	ldr	r1, [r7, #20]
   1243e:	4618      	mov	r0, r3
   12440:	f014 f8dc 	bl	265fc <var_getBytes>
   12444:	6278      	str	r0, [r7, #36]	; 0x24
   12446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12448:	2b00      	cmp	r3, #0
   1244a:	d001      	beq.n	12450 <cosem_getScriptTable+0x1f8>
                    //parameter
                    (ret = var_getBytes(&a->parameter, data)) != 0)
                {
                    return ret;
   1244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1244e:	e018      	b.n	12482 <cosem_getScriptTable+0x22a>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->actions.size)) != 0)
            {
                break;
            }
            for (pos2 = 0; pos2 != it->actions.size; ++pos2)
   12450:	69fb      	ldr	r3, [r7, #28]
   12452:	3301      	adds	r3, #1
   12454:	61fb      	str	r3, [r7, #28]
   12456:	693b      	ldr	r3, [r7, #16]
   12458:	899b      	ldrh	r3, [r3, #12]
   1245a:	461a      	mov	r2, r3
   1245c:	69fb      	ldr	r3, [r7, #28]
   1245e:	429a      	cmp	r2, r3
   12460:	f47f af7c 	bne.w	1235c <cosem_getScriptTable+0x104>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->scripts.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->scripts.size; ++pos)
   12464:	6a3b      	ldr	r3, [r7, #32]
   12466:	3301      	adds	r3, #1
   12468:	623b      	str	r3, [r7, #32]
   1246a:	69bb      	ldr	r3, [r7, #24]
   1246c:	8b1b      	ldrh	r3, [r3, #24]
   1246e:	461a      	mov	r2, r3
   12470:	6a3b      	ldr	r3, [r7, #32]
   12472:	429a      	cmp	r2, r3
   12474:	f47f af27 	bne.w	122c6 <cosem_getScriptTable+0x6e>
   12478:	e002      	b.n	12480 <cosem_getScriptTable+0x228>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1247a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1247e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   12480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   12482:	4618      	mov	r0, r3
   12484:	3728      	adds	r7, #40	; 0x28
   12486:	46bd      	mov	sp, r7
   12488:	bd80      	pop	{r7, pc}
   1248a:	bf00      	nop

0001248c <cosem_getSpecialDaysTable>:
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
int cosem_getSpecialDaysTable(
    gxValueEventArg *e)
{
   1248c:	b580      	push	{r7, lr}
   1248e:	b08c      	sub	sp, #48	; 0x30
   12490:	af00      	add	r7, sp, #0
   12492:	6078      	str	r0, [r7, #4]
    int ret, pos;
    dlmsVARIANT tmp;
    gxSpecialDay* sd;
    gxSpecialDaysTable* object = (gxSpecialDaysTable*)e->target;
   12494:	687b      	ldr	r3, [r7, #4]
   12496:	695b      	ldr	r3, [r3, #20]
   12498:	627b      	str	r3, [r7, #36]	; 0x24
    if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1249a:	687b      	ldr	r3, [r7, #4]
   1249c:	4618      	mov	r0, r3
   1249e:	f7fa fa81 	bl	c9a4 <cosem_getByteBuffer>
   124a2:	62f8      	str	r0, [r7, #44]	; 0x2c
   124a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124a6:	2b00      	cmp	r3, #0
   124a8:	d001      	beq.n	124ae <cosem_getSpecialDaysTable+0x22>
    {
        return ret;
   124aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124ac:	e09a      	b.n	125e4 <cosem_getSpecialDaysTable+0x158>
    }
    gxByteBuffer *data = e->value.byteArr;
   124ae:	687b      	ldr	r3, [r7, #4]
   124b0:	689b      	ldr	r3, [r3, #8]
   124b2:	623b      	str	r3, [r7, #32]
    if (e->index == 2)
   124b4:	687b      	ldr	r3, [r7, #4]
   124b6:	7e1b      	ldrb	r3, [r3, #24]
   124b8:	2b02      	cmp	r3, #2
   124ba:	f040 808f 	bne.w	125dc <cosem_getSpecialDaysTable+0x150>
    {
        e->byteArray = 1;
   124be:	687b      	ldr	r3, [r7, #4]
   124c0:	2201      	movs	r2, #1
   124c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = var_init(&tmp)) != 0 ||
   124c6:	f107 0310 	add.w	r3, r7, #16
   124ca:	4618      	mov	r0, r3
   124cc:	f013 fe2c 	bl	26128 <var_init>
   124d0:	62f8      	str	r0, [r7, #44]	; 0x2c
   124d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124d4:	2b00      	cmp	r3, #0
   124d6:	d111      	bne.n	124fc <cosem_getSpecialDaysTable+0x70>
   124d8:	2101      	movs	r1, #1
   124da:	6a38      	ldr	r0, [r7, #32]
   124dc:	f7f0 fc9a 	bl	2e14 <bb_setUInt8>
   124e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   124e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124e4:	2b00      	cmp	r3, #0
   124e6:	d109      	bne.n	124fc <cosem_getSpecialDaysTable+0x70>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0)
   124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   124ea:	8b1b      	ldrh	r3, [r3, #24]
    gxByteBuffer *data = e->value.byteArr;
    if (e->index == 2)
    {
        e->byteArray = 1;
        if ((ret = var_init(&tmp)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   124ec:	6a39      	ldr	r1, [r7, #32]
   124ee:	4618      	mov	r0, r3
   124f0:	f00f f9f4 	bl	218dc <hlp_setObjectCount>
   124f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   124f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124f8:	2b00      	cmp	r3, #0
   124fa:	d001      	beq.n	12500 <cosem_getSpecialDaysTable+0x74>
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0)
        {
            return ret;
   124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   124fe:	e071      	b.n	125e4 <cosem_getSpecialDaysTable+0x158>
        }
        for (pos = 0; pos != object->entries.size; ++pos)
   12500:	2300      	movs	r3, #0
   12502:	62bb      	str	r3, [r7, #40]	; 0x28
   12504:	e063      	b.n	125ce <cosem_getSpecialDaysTable+0x142>
        {
            if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   12506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12508:	3310      	adds	r3, #16
   1250a:	f107 020c 	add.w	r2, r7, #12
   1250e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   12510:	4618      	mov	r0, r3
   12512:	f7fa f973 	bl	c7fc <arr_getByIndex>
   12516:	62f8      	str	r0, [r7, #44]	; 0x2c
   12518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1251a:	2b00      	cmp	r3, #0
   1251c:	d161      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = var_setDate(&tmp, &sd->date)) != 0 ||
   1251e:	68fb      	ldr	r3, [r7, #12]
   12520:	1d1a      	adds	r2, r3, #4
        {
            return ret;
        }
        for (pos = 0; pos != object->entries.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   12522:	f107 0310 	add.w	r3, r7, #16
   12526:	4611      	mov	r1, r2
   12528:	4618      	mov	r0, r3
   1252a:	f015 fd97 	bl	2805c <var_setDate>
   1252e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12532:	2b00      	cmp	r3, #0
   12534:	d155      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = var_setDate(&tmp, &sd->date)) != 0 ||
   12536:	2102      	movs	r1, #2
   12538:	6a38      	ldr	r0, [r7, #32]
   1253a:	f7f0 fc6b 	bl	2e14 <bb_setUInt8>
   1253e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12542:	2b00      	cmp	r3, #0
   12544:	d14d      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12546:	2103      	movs	r1, #3
   12548:	6a38      	ldr	r0, [r7, #32]
   1254a:	f7f0 fc63 	bl	2e14 <bb_setUInt8>
   1254e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12552:	2b00      	cmp	r3, #0
   12554:	d145      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = bb_setUInt8(data, 3)) != 0 ||
   12556:	2112      	movs	r1, #18
   12558:	6a38      	ldr	r0, [r7, #32]
   1255a:	f7f0 fc5b 	bl	2e14 <bb_setUInt8>
   1255e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12562:	2b00      	cmp	r3, #0
   12564:	d13d      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                //Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, sd->index)) != 0 ||
   12566:	68fb      	ldr	r3, [r7, #12]
   12568:	881b      	ldrh	r3, [r3, #0]
            if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
                (ret = var_setDate(&tmp, &sd->date)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
                //Index
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1256a:	4619      	mov	r1, r3
   1256c:	6a38      	ldr	r0, [r7, #32]
   1256e:	f7f0 fce3 	bl	2f38 <bb_setUInt16>
   12572:	62f8      	str	r0, [r7, #44]	; 0x2c
   12574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12576:	2b00      	cmp	r3, #0
   12578:	d133      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = bb_setUInt16(data, sd->index)) != 0 ||
   1257a:	f107 0310 	add.w	r3, r7, #16
   1257e:	6a3a      	ldr	r2, [r7, #32]
   12580:	2109      	movs	r1, #9
   12582:	4618      	mov	r0, r3
   12584:	f014 f8a0 	bl	266c8 <var_getBytes2>
   12588:	62f8      	str	r0, [r7, #44]	; 0x2c
   1258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1258c:	2b00      	cmp	r3, #0
   1258e:	d128      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                //Date
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
   12590:	f107 0310 	add.w	r3, r7, #16
   12594:	4618      	mov	r0, r3
   12596:	f013 fdd7 	bl	26148 <var_clear>
   1259a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1259e:	2b00      	cmp	r3, #0
   125a0:	d11f      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                (ret = var_clear(&tmp)) != 0 ||
   125a2:	2111      	movs	r1, #17
   125a4:	6a38      	ldr	r0, [r7, #32]
   125a6:	f7f0 fc35 	bl	2e14 <bb_setUInt8>
   125aa:	62f8      	str	r0, [r7, #44]	; 0x2c
   125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125ae:	2b00      	cmp	r3, #0
   125b0:	d117      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
                //DayId
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, sd->dayId)) != 0)
   125b2:	68fb      	ldr	r3, [r7, #12]
   125b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
                (ret = bb_setUInt16(data, sd->index)) != 0 ||
                //Date
                (ret = var_getBytes2(&tmp, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
                //DayId
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   125b8:	4619      	mov	r1, r3
   125ba:	6a38      	ldr	r0, [r7, #32]
   125bc:	f7f0 fc2a 	bl	2e14 <bb_setUInt8>
   125c0:	62f8      	str	r0, [r7, #44]	; 0x2c
   125c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   125c4:	2b00      	cmp	r3, #0
   125c6:	d10c      	bne.n	125e2 <cosem_getSpecialDaysTable+0x156>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->entries.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->entries.size; ++pos)
   125c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   125ca:	3301      	adds	r3, #1
   125cc:	62bb      	str	r3, [r7, #40]	; 0x28
   125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125d0:	8b1b      	ldrh	r3, [r3, #24]
   125d2:	461a      	mov	r2, r3
   125d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   125d6:	429a      	cmp	r2, r3
   125d8:	d195      	bne.n	12506 <cosem_getSpecialDaysTable+0x7a>
   125da:	e002      	b.n	125e2 <cosem_getSpecialDaysTable+0x156>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   125dc:	f44f 7381 	mov.w	r3, #258	; 0x102
   125e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return ret;
   125e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   125e4:	4618      	mov	r0, r3
   125e6:	3730      	adds	r7, #48	; 0x30
   125e8:	46bd      	mov	sp, r7
   125ea:	bd80      	pop	{r7, pc}

000125ec <cosem_getTcpUdpSetup>:
#endif //DLMS_IGNORE_SPECIAL_DAYS_TABLE
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
int cosem_getTcpUdpSetup(
    gxValueEventArg *e)
{
   125ec:	b580      	push	{r7, lr}
   125ee:	b084      	sub	sp, #16
   125f0:	af00      	add	r7, sp, #0
   125f2:	6078      	str	r0, [r7, #4]
    int ret;
    gxTcpUdpSetup* object = (gxTcpUdpSetup*)e->target;
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	695b      	ldr	r3, [r3, #20]
   125f8:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
   125fa:	687b      	ldr	r3, [r7, #4]
   125fc:	7e1b      	ldrb	r3, [r3, #24]
   125fe:	2b02      	cmp	r3, #2
   12600:	d108      	bne.n	12614 <cosem_getTcpUdpSetup+0x28>
    {
        ret = var_setUInt16(&e->value, object->port);
   12602:	687a      	ldr	r2, [r7, #4]
   12604:	68bb      	ldr	r3, [r7, #8]
   12606:	8a1b      	ldrh	r3, [r3, #16]
   12608:	4619      	mov	r1, r3
   1260a:	4610      	mov	r0, r2
   1260c:	f013 fc98 	bl	25f40 <var_setUInt16>
   12610:	60f8      	str	r0, [r7, #12]
   12612:	e037      	b.n	12684 <cosem_getTcpUdpSetup+0x98>
    }
    else if (e->index == 3)
   12614:	687b      	ldr	r3, [r7, #4]
   12616:	7e1b      	ldrb	r3, [r3, #24]
   12618:	2b03      	cmp	r3, #3
   1261a:	d108      	bne.n	1262e <cosem_getTcpUdpSetup+0x42>
    {
        ret = var_addOctetString(&e->value, &object->ipReference);
   1261c:	687a      	ldr	r2, [r7, #4]
   1261e:	68bb      	ldr	r3, [r7, #8]
   12620:	3314      	adds	r3, #20
   12622:	4619      	mov	r1, r3
   12624:	4610      	mov	r0, r2
   12626:	f013 fd63 	bl	260f0 <var_addOctetString>
   1262a:	60f8      	str	r0, [r7, #12]
   1262c:	e02a      	b.n	12684 <cosem_getTcpUdpSetup+0x98>
    }
    else if (e->index == 4)
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	7e1b      	ldrb	r3, [r3, #24]
   12632:	2b04      	cmp	r3, #4
   12634:	d108      	bne.n	12648 <cosem_getTcpUdpSetup+0x5c>
    {
        ret = var_setUInt16(&e->value, object->maximumSegmentSize);
   12636:	687a      	ldr	r2, [r7, #4]
   12638:	68bb      	ldr	r3, [r7, #8]
   1263a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1263c:	4619      	mov	r1, r3
   1263e:	4610      	mov	r0, r2
   12640:	f013 fc7e 	bl	25f40 <var_setUInt16>
   12644:	60f8      	str	r0, [r7, #12]
   12646:	e01d      	b.n	12684 <cosem_getTcpUdpSetup+0x98>
    }
    else if (e->index == 5)
   12648:	687b      	ldr	r3, [r7, #4]
   1264a:	7e1b      	ldrb	r3, [r3, #24]
   1264c:	2b05      	cmp	r3, #5
   1264e:	d109      	bne.n	12664 <cosem_getTcpUdpSetup+0x78>
    {
        ret = var_setUInt8(&e->value, object->maximumSimultaneousConnections);
   12650:	687a      	ldr	r2, [r7, #4]
   12652:	68bb      	ldr	r3, [r7, #8]
   12654:	f893 3020 	ldrb.w	r3, [r3, #32]
   12658:	4619      	mov	r1, r3
   1265a:	4610      	mov	r0, r2
   1265c:	f013 fc5c 	bl	25f18 <var_setUInt8>
   12660:	60f8      	str	r0, [r7, #12]
   12662:	e00f      	b.n	12684 <cosem_getTcpUdpSetup+0x98>
    }
    else if (e->index == 6)
   12664:	687b      	ldr	r3, [r7, #4]
   12666:	7e1b      	ldrb	r3, [r3, #24]
   12668:	2b06      	cmp	r3, #6
   1266a:	d108      	bne.n	1267e <cosem_getTcpUdpSetup+0x92>
    {
        ret = var_setUInt16(&e->value, object->inactivityTimeout);
   1266c:	687a      	ldr	r2, [r7, #4]
   1266e:	68bb      	ldr	r3, [r7, #8]
   12670:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   12672:	4619      	mov	r1, r3
   12674:	4610      	mov	r0, r2
   12676:	f013 fc63 	bl	25f40 <var_setUInt16>
   1267a:	60f8      	str	r0, [r7, #12]
   1267c:	e002      	b.n	12684 <cosem_getTcpUdpSetup+0x98>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1267e:	f44f 7381 	mov.w	r3, #258	; 0x102
   12682:	60fb      	str	r3, [r7, #12]
    }
    return ret;
   12684:	68fb      	ldr	r3, [r7, #12]
}
   12686:	4618      	mov	r0, r3
   12688:	3710      	adds	r7, #16
   1268a:	46bd      	mov	sp, r7
   1268c:	bd80      	pop	{r7, pc}
   1268e:	bf00      	nop

00012690 <cosem_getMbusMasterPortSetup>:
#endif //DLMS_IGNORE_TCP_UDP_SETUP
#ifndef DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
int cosem_getMbusMasterPortSetup(
    gxValueEventArg *e)
{
   12690:	b580      	push	{r7, lr}
   12692:	b084      	sub	sp, #16
   12694:	af00      	add	r7, sp, #0
   12696:	6078      	str	r0, [r7, #4]
    int ret;
    gxMBusMasterPortSetup* object = (gxMBusMasterPortSetup*)e->target;
   12698:	687b      	ldr	r3, [r7, #4]
   1269a:	695b      	ldr	r3, [r3, #20]
   1269c:	60bb      	str	r3, [r7, #8]
    if (e->index == 2)
   1269e:	687b      	ldr	r3, [r7, #4]
   126a0:	7e1b      	ldrb	r3, [r3, #24]
   126a2:	2b02      	cmp	r3, #2
   126a4:	d108      	bne.n	126b8 <cosem_getMbusMasterPortSetup+0x28>
    {
        ret = var_setEnum(&e->value, object->commSpeed);
   126a6:	687a      	ldr	r2, [r7, #4]
   126a8:	68bb      	ldr	r3, [r7, #8]
   126aa:	7c1b      	ldrb	r3, [r3, #16]
   126ac:	4619      	mov	r1, r3
   126ae:	4610      	mov	r0, r2
   126b0:	f013 fc1e 	bl	25ef0 <var_setEnum>
   126b4:	60f8      	str	r0, [r7, #12]
   126b6:	e002      	b.n	126be <cosem_getMbusMasterPortSetup+0x2e>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   126b8:	f44f 7381 	mov.w	r3, #258	; 0x102
   126bc:	60fb      	str	r3, [r7, #12]
    }
    return ret;
   126be:	68fb      	ldr	r3, [r7, #12]
}
   126c0:	4618      	mov	r0, r3
   126c2:	3710      	adds	r7, #16
   126c4:	46bd      	mov	sp, r7
   126c6:	bd80      	pop	{r7, pc}

000126c8 <cosem_getMessageHandler>:
#endif //DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
#ifndef DLMS_IGNORE_MESSAGE_HANDLER
int cosem_getMessageHandler(
    gxValueEventArg *e)
{
   126c8:	b580      	push	{r7, lr}
   126ca:	b08c      	sub	sp, #48	; 0x30
   126cc:	af00      	add	r7, sp, #0
   126ce:	6078      	str	r0, [r7, #4]
    int ret, pos;
    gxKey *it;
    dlmsVARIANT *tmp;
    dlmsVARIANT tmp2;
    gxMessageHandler* object = (gxMessageHandler*)e->target;
   126d0:	687b      	ldr	r3, [r7, #4]
   126d2:	695b      	ldr	r3, [r3, #20]
   126d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   126d6:	687b      	ldr	r3, [r7, #4]
   126d8:	4618      	mov	r0, r3
   126da:	f7fa f963 	bl	c9a4 <cosem_getByteBuffer>
   126de:	62f8      	str	r0, [r7, #44]	; 0x2c
   126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   126e2:	2b00      	cmp	r3, #0
   126e4:	d001      	beq.n	126ea <cosem_getMessageHandler+0x22>
    {
        return ret;
   126e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   126e8:	e11a      	b.n	12920 <cosem_getMessageHandler+0x258>
    }
    gxByteBuffer *data = e->value.byteArr;
   126ea:	687b      	ldr	r3, [r7, #4]
   126ec:	689b      	ldr	r3, [r3, #8]
   126ee:	623b      	str	r3, [r7, #32]
    if (e->index == 2)
   126f0:	687b      	ldr	r3, [r7, #4]
   126f2:	7e1b      	ldrb	r3, [r3, #24]
   126f4:	2b02      	cmp	r3, #2
   126f6:	f040 808d 	bne.w	12814 <cosem_getMessageHandler+0x14c>
    {
        if ((ret = var_init(&tmp2)) != 0 ||
   126fa:	f107 0308 	add.w	r3, r7, #8
   126fe:	4618      	mov	r0, r3
   12700:	f013 fd12 	bl	26128 <var_init>
   12704:	62f8      	str	r0, [r7, #44]	; 0x2c
   12706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12708:	2b00      	cmp	r3, #0
   1270a:	d111      	bne.n	12730 <cosem_getMessageHandler+0x68>
   1270c:	2101      	movs	r1, #1
   1270e:	6a38      	ldr	r0, [r7, #32]
   12710:	f7f0 fb80 	bl	2e14 <bb_setUInt8>
   12714:	62f8      	str	r0, [r7, #44]	; 0x2c
   12716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12718:	2b00      	cmp	r3, #0
   1271a:	d109      	bne.n	12730 <cosem_getMessageHandler+0x68>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0)
   1271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1271e:	8b1b      	ldrh	r3, [r3, #24]
    }
    gxByteBuffer *data = e->value.byteArr;
    if (e->index == 2)
    {
        if ((ret = var_init(&tmp2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12720:	6a39      	ldr	r1, [r7, #32]
   12722:	4618      	mov	r0, r3
   12724:	f00f f8da 	bl	218dc <hlp_setObjectCount>
   12728:	62f8      	str	r0, [r7, #44]	; 0x2c
   1272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1272c:	2b00      	cmp	r3, #0
   1272e:	d001      	beq.n	12734 <cosem_getMessageHandler+0x6c>
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0)
        {
            return ret;
   12730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12732:	e0f5      	b.n	12920 <cosem_getMessageHandler+0x258>
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
   12734:	2300      	movs	r3, #0
   12736:	62bb      	str	r3, [r7, #40]	; 0x28
   12738:	e065      	b.n	12806 <cosem_getMessageHandler+0x13e>
        {
            if ((ret = arr_get(&object->listeningWindow, (void**)&it)) != 0 ||
   1273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1273c:	3310      	adds	r3, #16
   1273e:	f107 021c 	add.w	r2, r7, #28
   12742:	4611      	mov	r1, r2
   12744:	4618      	mov	r0, r3
   12746:	f7fa f837 	bl	c7b8 <arr_get>
   1274a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1274e:	2b00      	cmp	r3, #0
   12750:	f040 80e1 	bne.w	12916 <cosem_getMessageHandler+0x24e>
   12754:	2102      	movs	r1, #2
   12756:	6a38      	ldr	r0, [r7, #32]
   12758:	f7f0 fb5c 	bl	2e14 <bb_setUInt8>
   1275c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12760:	2b00      	cmp	r3, #0
   12762:	f040 80d8 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12766:	2102      	movs	r1, #2
   12768:	6a38      	ldr	r0, [r7, #32]
   1276a:	f7f0 fb53 	bl	2e14 <bb_setUInt8>
   1276e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12772:	2b00      	cmp	r3, #0
   12774:	f040 80cf 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Add start
                (ret = var_setDateTime(&tmp2, (gxtime*)it->key)) != 0 ||
   12778:	69fb      	ldr	r3, [r7, #28]
   1277a:	681a      	ldr	r2, [r3, #0]
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
        {
            if ((ret = arr_get(&object->listeningWindow, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
   1277c:	f107 0308 	add.w	r3, r7, #8
   12780:	4611      	mov	r1, r2
   12782:	4618      	mov	r0, r3
   12784:	f015 fc46 	bl	28014 <var_setDateTime>
   12788:	62f8      	str	r0, [r7, #44]	; 0x2c
   1278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1278c:	2b00      	cmp	r3, #0
   1278e:	f040 80c2 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                //Add start
                (ret = var_setDateTime(&tmp2, (gxtime*)it->key)) != 0 ||
   12792:	f107 0308 	add.w	r3, r7, #8
   12796:	6a39      	ldr	r1, [r7, #32]
   12798:	4618      	mov	r0, r3
   1279a:	f013 ff2f 	bl	265fc <var_getBytes>
   1279e:	62f8      	str	r0, [r7, #44]	; 0x2c
   127a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127a2:	2b00      	cmp	r3, #0
   127a4:	f040 80b7 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                (ret = var_getBytes(&tmp2, data)) != 0 ||
   127a8:	f107 0308 	add.w	r3, r7, #8
   127ac:	4618      	mov	r0, r3
   127ae:	f013 fccb 	bl	26148 <var_clear>
   127b2:	62f8      	str	r0, [r7, #44]	; 0x2c
   127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127b6:	2b00      	cmp	r3, #0
   127b8:	f040 80ad 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                (ret = var_clear(&tmp2)) != 0 ||
                //Add end
                (ret = var_setDateTime(&tmp2, (gxtime*)it->value)) != 0 ||
   127bc:	69fb      	ldr	r3, [r7, #28]
   127be:	685a      	ldr	r2, [r3, #4]
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Add start
                (ret = var_setDateTime(&tmp2, (gxtime*)it->key)) != 0 ||
                (ret = var_getBytes(&tmp2, data)) != 0 ||
                (ret = var_clear(&tmp2)) != 0 ||
   127c0:	f107 0308 	add.w	r3, r7, #8
   127c4:	4611      	mov	r1, r2
   127c6:	4618      	mov	r0, r3
   127c8:	f015 fc24 	bl	28014 <var_setDateTime>
   127cc:	62f8      	str	r0, [r7, #44]	; 0x2c
   127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127d0:	2b00      	cmp	r3, #0
   127d2:	f040 80a0 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                //Add end
                (ret = var_setDateTime(&tmp2, (gxtime*)it->value)) != 0 ||
   127d6:	f107 0308 	add.w	r3, r7, #8
   127da:	6a39      	ldr	r1, [r7, #32]
   127dc:	4618      	mov	r0, r3
   127de:	f013 ff0d 	bl	265fc <var_getBytes>
   127e2:	62f8      	str	r0, [r7, #44]	; 0x2c
   127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127e6:	2b00      	cmp	r3, #0
   127e8:	f040 8095 	bne.w	12916 <cosem_getMessageHandler+0x24e>
                (ret = var_getBytes(&tmp2, data)) != 0 ||
   127ec:	f107 0308 	add.w	r3, r7, #8
   127f0:	4618      	mov	r0, r3
   127f2:	f013 fca9 	bl	26148 <var_clear>
   127f6:	62f8      	str	r0, [r7, #44]	; 0x2c
   127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   127fa:	2b00      	cmp	r3, #0
   127fc:	f040 808b 	bne.w	12916 <cosem_getMessageHandler+0x24e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->listeningWindow.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->listeningWindow.size; ++pos)
   12800:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12802:	3301      	adds	r3, #1
   12804:	62bb      	str	r3, [r7, #40]	; 0x28
   12806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12808:	8b1b      	ldrh	r3, [r3, #24]
   1280a:	461a      	mov	r2, r3
   1280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1280e:	429a      	cmp	r2, r3
   12810:	d193      	bne.n	1273a <cosem_getMessageHandler+0x72>
   12812:	e080      	b.n	12916 <cosem_getMessageHandler+0x24e>
            {
                break;
            }
        }
    }
    else if (e->index == 3)
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	7e1b      	ldrb	r3, [r3, #24]
   12818:	2b03      	cmp	r3, #3
   1281a:	d137      	bne.n	1288c <cosem_getMessageHandler+0x1c4>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1281c:	2101      	movs	r1, #1
   1281e:	6a38      	ldr	r0, [r7, #32]
   12820:	f7f0 faf8 	bl	2e14 <bb_setUInt8>
   12824:	62f8      	str	r0, [r7, #44]	; 0x2c
   12826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12828:	2b00      	cmp	r3, #0
   1282a:	d109      	bne.n	12840 <cosem_getMessageHandler+0x178>
            (ret = hlp_setObjectCount(object->allowedSenders.size, data)) != 0)
   1282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1282e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
            }
        }
    }
    else if (e->index == 3)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12830:	6a39      	ldr	r1, [r7, #32]
   12832:	4618      	mov	r0, r3
   12834:	f00f f852 	bl	218dc <hlp_setObjectCount>
   12838:	62f8      	str	r0, [r7, #44]	; 0x2c
   1283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1283c:	2b00      	cmp	r3, #0
   1283e:	d001      	beq.n	12844 <cosem_getMessageHandler+0x17c>
            (ret = hlp_setObjectCount(object->allowedSenders.size, data)) != 0)
        {
            return ret;
   12840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12842:	e06d      	b.n	12920 <cosem_getMessageHandler+0x258>
        }
        for (pos = 0; pos != object->allowedSenders.size; ++pos)
   12844:	2300      	movs	r3, #0
   12846:	62bb      	str	r3, [r7, #40]	; 0x28
   12848:	e019      	b.n	1287e <cosem_getMessageHandler+0x1b6>
        {
            if ((ret = va_getByIndex(&object->allowedSenders, pos, &tmp)) != 0 ||
   1284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1284c:	3320      	adds	r3, #32
   1284e:	f107 0218 	add.w	r2, r7, #24
   12852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   12854:	4618      	mov	r0, r3
   12856:	f014 fb09 	bl	26e6c <va_getByIndex>
   1285a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1285e:	2b00      	cmp	r3, #0
   12860:	d108      	bne.n	12874 <cosem_getMessageHandler+0x1ac>
                (ret = var_getBytes(tmp, data)) != 0)
   12862:	69bb      	ldr	r3, [r7, #24]
        {
            return ret;
        }
        for (pos = 0; pos != object->allowedSenders.size; ++pos)
        {
            if ((ret = va_getByIndex(&object->allowedSenders, pos, &tmp)) != 0 ||
   12864:	6a39      	ldr	r1, [r7, #32]
   12866:	4618      	mov	r0, r3
   12868:	f013 fec8 	bl	265fc <var_getBytes>
   1286c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12870:	2b00      	cmp	r3, #0
   12872:	d001      	beq.n	12878 <cosem_getMessageHandler+0x1b0>
                (ret = var_getBytes(tmp, data)) != 0)
            {
                return ret;
   12874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12876:	e053      	b.n	12920 <cosem_getMessageHandler+0x258>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->allowedSenders.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->allowedSenders.size; ++pos)
   12878:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1287a:	3301      	adds	r3, #1
   1287c:	62bb      	str	r3, [r7, #40]	; 0x28
   1287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   12882:	461a      	mov	r2, r3
   12884:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12886:	429a      	cmp	r2, r3
   12888:	d1df      	bne.n	1284a <cosem_getMessageHandler+0x182>
   1288a:	e044      	b.n	12916 <cosem_getMessageHandler+0x24e>
            {
                return ret;
            }
        }
    }
    else if (e->index == 4)
   1288c:	687b      	ldr	r3, [r7, #4]
   1288e:	7e1b      	ldrb	r3, [r3, #24]
   12890:	2b04      	cmp	r3, #4
   12892:	d13d      	bne.n	12910 <cosem_getMessageHandler+0x248>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12894:	2101      	movs	r1, #1
   12896:	6a38      	ldr	r0, [r7, #32]
   12898:	f7f0 fabc 	bl	2e14 <bb_setUInt8>
   1289c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128a0:	2b00      	cmp	r3, #0
   128a2:	d111      	bne.n	128c8 <cosem_getMessageHandler+0x200>
   128a4:	2100      	movs	r1, #0
   128a6:	6a38      	ldr	r0, [r7, #32]
   128a8:	f7f0 fab4 	bl	2e14 <bb_setUInt8>
   128ac:	62f8      	str	r0, [r7, #44]	; 0x2c
   128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128b0:	2b00      	cmp	r3, #0
   128b2:	d109      	bne.n	128c8 <cosem_getMessageHandler+0x200>
            (ret = bb_setUInt8(data, 0)) != 0 ||
            (ret = hlp_setObjectCount(object->sendersAndActions.size, data)) != 0)
   128b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   128b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        }
    }
    else if (e->index == 4)
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = bb_setUInt8(data, 0)) != 0 ||
   128b8:	6a39      	ldr	r1, [r7, #32]
   128ba:	4618      	mov	r0, r3
   128bc:	f00f f80e 	bl	218dc <hlp_setObjectCount>
   128c0:	62f8      	str	r0, [r7, #44]	; 0x2c
   128c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128c4:	2b00      	cmp	r3, #0
   128c6:	d001      	beq.n	128cc <cosem_getMessageHandler+0x204>
            (ret = hlp_setObjectCount(object->sendersAndActions.size, data)) != 0)
        {
            return ret;
   128c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128ca:	e029      	b.n	12920 <cosem_getMessageHandler+0x258>
        }
        for (pos = 0; pos != object->sendersAndActions.size; ++pos)
   128cc:	2300      	movs	r3, #0
   128ce:	62bb      	str	r3, [r7, #40]	; 0x28
   128d0:	e017      	b.n	12902 <cosem_getMessageHandler+0x23a>
        {
            if ((ret = arr_getByIndex(&object->sendersAndActions, pos, (void**)&tmp)) != 0 ||
   128d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   128d4:	332c      	adds	r3, #44	; 0x2c
   128d6:	f107 0218 	add.w	r2, r7, #24
   128da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   128dc:	4618      	mov	r0, r3
   128de:	f7f9 ff8d 	bl	c7fc <arr_getByIndex>
   128e2:	62f8      	str	r0, [r7, #44]	; 0x2c
   128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128e6:	2b00      	cmp	r3, #0
   128e8:	d115      	bne.n	12916 <cosem_getMessageHandler+0x24e>
                (ret = var_getBytes(tmp, data)) != 0)
   128ea:	69bb      	ldr	r3, [r7, #24]
        {
            return ret;
        }
        for (pos = 0; pos != object->sendersAndActions.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->sendersAndActions, pos, (void**)&tmp)) != 0 ||
   128ec:	6a39      	ldr	r1, [r7, #32]
   128ee:	4618      	mov	r0, r3
   128f0:	f013 fe84 	bl	265fc <var_getBytes>
   128f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   128f8:	2b00      	cmp	r3, #0
   128fa:	d10c      	bne.n	12916 <cosem_getMessageHandler+0x24e>
            (ret = bb_setUInt8(data, 0)) != 0 ||
            (ret = hlp_setObjectCount(object->sendersAndActions.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->sendersAndActions.size; ++pos)
   128fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   128fe:	3301      	adds	r3, #1
   12900:	62bb      	str	r3, [r7, #40]	; 0x28
   12902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12904:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   12906:	461a      	mov	r2, r3
   12908:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1290a:	429a      	cmp	r2, r3
   1290c:	d1e1      	bne.n	128d2 <cosem_getMessageHandler+0x20a>
   1290e:	e002      	b.n	12916 <cosem_getMessageHandler+0x24e>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12910:	f44f 7381 	mov.w	r3, #258	; 0x102
   12914:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    e->byteArray = 1;
   12916:	687b      	ldr	r3, [r7, #4]
   12918:	2201      	movs	r2, #1
   1291a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    return ret;
   1291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   12920:	4618      	mov	r0, r3
   12922:	3730      	adds	r7, #48	; 0x30
   12924:	46bd      	mov	sp, r7
   12926:	bd80      	pop	{r7, pc}

00012928 <cosem_getPushSetup>:
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
int cosem_getPushSetup(
    gxValueEventArg *e)
{
   12928:	b580      	push	{r7, lr}
   1292a:	b08e      	sub	sp, #56	; 0x38
   1292c:	af00      	add	r7, sp, #0
   1292e:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   12930:	2300      	movs	r3, #0
   12932:	637b      	str	r3, [r7, #52]	; 0x34
    gxKey *it;
    dlmsVARIANT tmp;
    gxPushSetup* object = (gxPushSetup*)e->target;
   12934:	687b      	ldr	r3, [r7, #4]
   12936:	695b      	ldr	r3, [r3, #20]
   12938:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (e->index == 2)
   1293a:	687b      	ldr	r3, [r7, #4]
   1293c:	7e1b      	ldrb	r3, [r3, #24]
   1293e:	2b02      	cmp	r3, #2
   12940:	f040 80b2 	bne.w	12aa8 <cosem_getPushSetup+0x180>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   12944:	687b      	ldr	r3, [r7, #4]
   12946:	4618      	mov	r0, r3
   12948:	f7fa f82c 	bl	c9a4 <cosem_getByteBuffer>
   1294c:	6378      	str	r0, [r7, #52]	; 0x34
   1294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12950:	2b00      	cmp	r3, #0
   12952:	d001      	beq.n	12958 <cosem_getPushSetup+0x30>
        {
            return ret;
   12954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12956:	e1fc      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        gxByteBuffer *data = e->value.byteArr;
   12958:	687b      	ldr	r3, [r7, #4]
   1295a:	689b      	ldr	r3, [r3, #8]
   1295c:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
   1295e:	687b      	ldr	r3, [r7, #4]
   12960:	2201      	movs	r2, #1
   12962:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12966:	2101      	movs	r1, #1
   12968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1296a:	f7f0 fa53 	bl	2e14 <bb_setUInt8>
   1296e:	6378      	str	r0, [r7, #52]	; 0x34
   12970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12972:	2b00      	cmp	r3, #0
   12974:	d109      	bne.n	1298a <cosem_getPushSetup+0x62>
            (ret = hlp_setObjectCount(object->pushObjectList.size, data)) != 0)
   12976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12978:	8b1b      	ldrh	r3, [r3, #24]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1297a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1297c:	4618      	mov	r0, r3
   1297e:	f00e ffad 	bl	218dc <hlp_setObjectCount>
   12982:	6378      	str	r0, [r7, #52]	; 0x34
   12984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12986:	2b00      	cmp	r3, #0
   12988:	d001      	beq.n	1298e <cosem_getPushSetup+0x66>
            (ret = hlp_setObjectCount(object->pushObjectList.size, data)) != 0)
        {
            return ret;
   1298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1298c:	e1e1      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        for (pos = 0; pos != object->pushObjectList.size; ++pos)
   1298e:	2300      	movs	r3, #0
   12990:	633b      	str	r3, [r7, #48]	; 0x30
   12992:	e081      	b.n	12a98 <cosem_getPushSetup+0x170>
        {
            if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   12994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12996:	3310      	adds	r3, #16
   12998:	f107 0218 	add.w	r2, r7, #24
   1299c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1299e:	4618      	mov	r0, r3
   129a0:	f7f9 ff2c 	bl	c7fc <arr_getByIndex>
   129a4:	6378      	str	r0, [r7, #52]	; 0x34
   129a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129a8:	2b00      	cmp	r3, #0
   129aa:	f040 81d1 	bne.w	12d50 <cosem_getPushSetup+0x428>
   129ae:	2102      	movs	r1, #2
   129b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   129b2:	f7f0 fa2f 	bl	2e14 <bb_setUInt8>
   129b6:	6378      	str	r0, [r7, #52]	; 0x34
   129b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129ba:	2b00      	cmp	r3, #0
   129bc:	f040 81c8 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   129c0:	2104      	movs	r1, #4
   129c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   129c4:	f7f0 fa26 	bl	2e14 <bb_setUInt8>
   129c8:	6378      	str	r0, [r7, #52]	; 0x34
   129ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129cc:	2b00      	cmp	r3, #0
   129ce:	f040 81bf 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_setUInt8(data, 4)) != 0 ||
   129d2:	2112      	movs	r1, #18
   129d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   129d6:	f7f0 fa1d 	bl	2e14 <bb_setUInt8>
   129da:	6378      	str	r0, [r7, #52]	; 0x34
   129dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129de:	2b00      	cmp	r3, #0
   129e0:	f040 81b6 	bne.w	12d50 <cosem_getPushSetup+0x428>
                //Type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   129e4:	69bb      	ldr	r3, [r7, #24]
   129e6:	681b      	ldr	r3, [r3, #0]
   129e8:	781b      	ldrb	r3, [r3, #0]
   129ea:	b29b      	uxth	r3, r3
        {
            if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 4)) != 0 ||
                //Type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   129ec:	4619      	mov	r1, r3
   129ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   129f0:	f7f0 faa2 	bl	2f38 <bb_setUInt16>
   129f4:	6378      	str	r0, [r7, #52]	; 0x34
   129f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   129f8:	2b00      	cmp	r3, #0
   129fa:	f040 81a9 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   129fe:	2109      	movs	r1, #9
   12a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a02:	f7f0 fa07 	bl	2e14 <bb_setUInt8>
   12a06:	6378      	str	r0, [r7, #52]	; 0x34
   12a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	f040 81a0 	bne.w	12d50 <cosem_getPushSetup+0x428>
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12a10:	2106      	movs	r1, #6
   12a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a14:	f7f0 f9fe 	bl	2e14 <bb_setUInt8>
   12a18:	6378      	str	r0, [r7, #52]	; 0x34
   12a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	f040 8197 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12a22:	69bb      	ldr	r3, [r7, #24]
   12a24:	681b      	ldr	r3, [r3, #0]
   12a26:	3306      	adds	r3, #6
                //Type.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   12a28:	2206      	movs	r2, #6
   12a2a:	4619      	mov	r1, r3
   12a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a2e:	f7f0 fd97 	bl	3560 <bb_set>
   12a32:	6378      	str	r0, [r7, #52]	; 0x34
   12a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a36:	2b00      	cmp	r3, #0
   12a38:	f040 818a 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_set(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12a3c:	210f      	movs	r1, #15
   12a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a40:	f7f0 f9e8 	bl	2e14 <bb_setUInt8>
   12a44:	6378      	str	r0, [r7, #52]	; 0x34
   12a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a48:	2b00      	cmp	r3, #0
   12a4a:	f040 8181 	bne.w	12d50 <cosem_getPushSetup+0x428>
                //attributeIndex
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
   12a4e:	69bb      	ldr	r3, [r7, #24]
   12a50:	685b      	ldr	r3, [r3, #4]
   12a52:	781b      	ldrb	r3, [r3, #0]
                //LN
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                //attributeIndex
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12a54:	4619      	mov	r1, r3
   12a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a58:	f7f0 f9dc 	bl	2e14 <bb_setUInt8>
   12a5c:	6378      	str	r0, [r7, #52]	; 0x34
   12a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a60:	2b00      	cmp	r3, #0
   12a62:	f040 8175 	bne.w	12d50 <cosem_getPushSetup+0x428>
                (ret = bb_setUInt8(data, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
   12a66:	2112      	movs	r1, #18
   12a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a6a:	f7f0 f9d3 	bl	2e14 <bb_setUInt8>
   12a6e:	6378      	str	r0, [r7, #52]	; 0x34
   12a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a72:	2b00      	cmp	r3, #0
   12a74:	f040 816c 	bne.w	12d50 <cosem_getPushSetup+0x428>
                //dataIndex
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, ((gxCaptureObject*)it->value)->dataIndex)) != 0)
   12a78:	69bb      	ldr	r3, [r7, #24]
   12a7a:	685b      	ldr	r3, [r3, #4]
   12a7c:	785b      	ldrb	r3, [r3, #1]
   12a7e:	b29b      	uxth	r3, r3
                (ret = bb_set(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                //attributeIndex
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, ((gxCaptureObject*)it->value)->attributeIndex)) != 0 ||
                //dataIndex
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12a80:	4619      	mov	r1, r3
   12a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12a84:	f7f0 fa58 	bl	2f38 <bb_setUInt16>
   12a88:	6378      	str	r0, [r7, #52]	; 0x34
   12a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	f040 815f 	bne.w	12d50 <cosem_getPushSetup+0x428>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->pushObjectList.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->pushObjectList.size; ++pos)
   12a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a94:	3301      	adds	r3, #1
   12a96:	633b      	str	r3, [r7, #48]	; 0x30
   12a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12a9a:	8b1b      	ldrh	r3, [r3, #24]
   12a9c:	461a      	mov	r2, r3
   12a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12aa0:	429a      	cmp	r2, r3
   12aa2:	f47f af77 	bne.w	12994 <cosem_getPushSetup+0x6c>
   12aa6:	e153      	b.n	12d50 <cosem_getPushSetup+0x428>
            {
                break;
            }
        }
    }
    else if (e->index == 3)
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	7e1b      	ldrb	r3, [r3, #24]
   12aac:	2b03      	cmp	r3, #3
   12aae:	f040 8083 	bne.w	12bb8 <cosem_getPushSetup+0x290>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	4618      	mov	r0, r3
   12ab6:	f7f9 ff75 	bl	c9a4 <cosem_getByteBuffer>
   12aba:	6378      	str	r0, [r7, #52]	; 0x34
   12abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12abe:	2b00      	cmp	r3, #0
   12ac0:	d001      	beq.n	12ac6 <cosem_getPushSetup+0x19e>
        {
            return ret;
   12ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ac4:	e145      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        gxByteBuffer *data = e->value.byteArr;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	689b      	ldr	r3, [r3, #8]
   12aca:	627b      	str	r3, [r7, #36]	; 0x24
        e->byteArray = 1;
   12acc:	687b      	ldr	r3, [r7, #4]
   12ace:	2201      	movs	r2, #1
   12ad0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12ad4:	2102      	movs	r1, #2
   12ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12ad8:	f7f0 f99c 	bl	2e14 <bb_setUInt8>
   12adc:	6378      	str	r0, [r7, #52]	; 0x34
   12ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ae0:	2b00      	cmp	r3, #0
   12ae2:	d122      	bne.n	12b2a <cosem_getPushSetup+0x202>
   12ae4:	2103      	movs	r1, #3
   12ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12ae8:	f7f0 f994 	bl	2e14 <bb_setUInt8>
   12aec:	6378      	str	r0, [r7, #52]	; 0x34
   12aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12af0:	2b00      	cmp	r3, #0
   12af2:	d11a      	bne.n	12b2a <cosem_getPushSetup+0x202>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   12af4:	2116      	movs	r1, #22
   12af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12af8:	f7f0 f98c 	bl	2e14 <bb_setUInt8>
   12afc:	6378      	str	r0, [r7, #52]	; 0x34
   12afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b00:	2b00      	cmp	r3, #0
   12b02:	d112      	bne.n	12b2a <cosem_getPushSetup+0x202>
            //Service
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->service)) != 0 ||
   12b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b06:	f893 3020 	ldrb.w	r3, [r3, #32]
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 3)) != 0 ||
            //Service
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   12b0a:	4619      	mov	r1, r3
   12b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b0e:	f7f0 f981 	bl	2e14 <bb_setUInt8>
   12b12:	6378      	str	r0, [r7, #52]	; 0x34
   12b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b16:	2b00      	cmp	r3, #0
   12b18:	d107      	bne.n	12b2a <cosem_getPushSetup+0x202>
            (ret = bb_setUInt8(data, object->service)) != 0 ||
   12b1a:	2109      	movs	r1, #9
   12b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b1e:	f7f0 f979 	bl	2e14 <bb_setUInt8>
   12b22:	6378      	str	r0, [r7, #52]	; 0x34
   12b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b26:	2b00      	cmp	r3, #0
   12b28:	d001      	beq.n	12b2e <cosem_getPushSetup+0x206>
            //Destination
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0)
        {
            return ret;
   12b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b2c:	e111      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        if (object->destination != NULL)
   12b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12b32:	2b00      	cmp	r3, #0
   12b34:	d020      	beq.n	12b78 <cosem_getPushSetup+0x250>
        {
            unsigned char len = (unsigned char)strlen(object->destination);
   12b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12b3a:	4618      	mov	r0, r3
   12b3c:	f7ed faf0 	bl	120 <strlen>
   12b40:	4603      	mov	r3, r0
   12b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if ((ret = bb_setUInt8(data, len)) != 0 ||
   12b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   12b4a:	4619      	mov	r1, r3
   12b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b4e:	f7f0 f961 	bl	2e14 <bb_setUInt8>
   12b52:	6378      	str	r0, [r7, #52]	; 0x34
   12b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b56:	2b00      	cmp	r3, #0
   12b58:	d10c      	bne.n	12b74 <cosem_getPushSetup+0x24c>
                (ret = bb_set(data, (unsigned char*)object->destination, len)) != 0)
   12b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12b5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   12b62:	b292      	uxth	r2, r2
            return ret;
        }
        if (object->destination != NULL)
        {
            unsigned char len = (unsigned char)strlen(object->destination);
            if ((ret = bb_setUInt8(data, len)) != 0 ||
   12b64:	4619      	mov	r1, r3
   12b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b68:	f7f0 fcfa 	bl	3560 <bb_set>
   12b6c:	6378      	str	r0, [r7, #52]	; 0x34
   12b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b70:	2b00      	cmp	r3, #0
   12b72:	d00b      	beq.n	12b8c <cosem_getPushSetup+0x264>
                (ret = bb_set(data, (unsigned char*)object->destination, len)) != 0)
            {
                return ret;
   12b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b76:	e0ec      	b.n	12d52 <cosem_getPushSetup+0x42a>
            }
        }
        else
        {
            if ((ret = bb_setUInt8(data, 0)) != 0)
   12b78:	2100      	movs	r1, #0
   12b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b7c:	f7f0 f94a 	bl	2e14 <bb_setUInt8>
   12b80:	6378      	str	r0, [r7, #52]	; 0x34
   12b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b84:	2b00      	cmp	r3, #0
   12b86:	d001      	beq.n	12b8c <cosem_getPushSetup+0x264>
            {
                return ret;
   12b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b8a:	e0e2      	b.n	12d52 <cosem_getPushSetup+0x42a>
            }
        }
        //Message
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   12b8c:	2116      	movs	r1, #22
   12b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12b90:	f7f0 f940 	bl	2e14 <bb_setUInt8>
   12b94:	6378      	str	r0, [r7, #52]	; 0x34
   12b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12b98:	2b00      	cmp	r3, #0
   12b9a:	d10b      	bne.n	12bb4 <cosem_getPushSetup+0x28c>
            (ret = bb_setUInt8(data, object->message)) != 0)
   12b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
            {
                return ret;
            }
        }
        //Message
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   12ba2:	4619      	mov	r1, r3
   12ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12ba6:	f7f0 f935 	bl	2e14 <bb_setUInt8>
   12baa:	6378      	str	r0, [r7, #52]	; 0x34
   12bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12bae:	2b00      	cmp	r3, #0
   12bb0:	f000 80ce 	beq.w	12d50 <cosem_getPushSetup+0x428>
            (ret = bb_setUInt8(data, object->message)) != 0)
        {
            return ret;
   12bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12bb6:	e0cc      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
    }
    else if (e->index == 4)
   12bb8:	687b      	ldr	r3, [r7, #4]
   12bba:	7e1b      	ldrb	r3, [r3, #24]
   12bbc:	2b04      	cmp	r3, #4
   12bbe:	f040 809b 	bne.w	12cf8 <cosem_getPushSetup+0x3d0>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   12bc2:	687b      	ldr	r3, [r7, #4]
   12bc4:	4618      	mov	r0, r3
   12bc6:	f7f9 feed 	bl	c9a4 <cosem_getByteBuffer>
   12bca:	6378      	str	r0, [r7, #52]	; 0x34
   12bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d001      	beq.n	12bd6 <cosem_getPushSetup+0x2ae>
        {
            return ret;
   12bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12bd4:	e0bd      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        gxByteBuffer *data = e->value.byteArr;
   12bd6:	687b      	ldr	r3, [r7, #4]
   12bd8:	689b      	ldr	r3, [r3, #8]
   12bda:	61fb      	str	r3, [r7, #28]
        e->byteArray = 1;
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	2201      	movs	r2, #1
   12be0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12be4:	2101      	movs	r1, #1
   12be6:	69f8      	ldr	r0, [r7, #28]
   12be8:	f7f0 f914 	bl	2e14 <bb_setUInt8>
   12bec:	6378      	str	r0, [r7, #52]	; 0x34
   12bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d112      	bne.n	12c1a <cosem_getPushSetup+0x2f2>
            (ret = hlp_setObjectCount(object->communicationWindow.size, data)) != 0 ||
   12bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12bf6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12bf8:	69f9      	ldr	r1, [r7, #28]
   12bfa:	4618      	mov	r0, r3
   12bfc:	f00e fe6e 	bl	218dc <hlp_setObjectCount>
   12c00:	6378      	str	r0, [r7, #52]	; 0x34
   12c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c04:	2b00      	cmp	r3, #0
   12c06:	d108      	bne.n	12c1a <cosem_getPushSetup+0x2f2>
            (ret = hlp_setObjectCount(object->communicationWindow.size, data)) != 0 ||
   12c08:	f107 0308 	add.w	r3, r7, #8
   12c0c:	4618      	mov	r0, r3
   12c0e:	f013 fa8b 	bl	26128 <var_init>
   12c12:	6378      	str	r0, [r7, #52]	; 0x34
   12c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c16:	2b00      	cmp	r3, #0
   12c18:	d001      	beq.n	12c1e <cosem_getPushSetup+0x2f6>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
   12c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c1c:	e099      	b.n	12d52 <cosem_getPushSetup+0x42a>
        }
        for (pos = 0; pos != object->communicationWindow.size; ++pos)
   12c1e:	2300      	movs	r3, #0
   12c20:	633b      	str	r3, [r7, #48]	; 0x30
   12c22:	e062      	b.n	12cea <cosem_getPushSetup+0x3c2>
        {
            if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   12c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c26:	332c      	adds	r3, #44	; 0x2c
   12c28:	f107 0218 	add.w	r2, r7, #24
   12c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   12c2e:	4618      	mov	r0, r3
   12c30:	f7f9 fde4 	bl	c7fc <arr_getByIndex>
   12c34:	6378      	str	r0, [r7, #52]	; 0x34
   12c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c38:	2b00      	cmp	r3, #0
   12c3a:	d14d      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
   12c3c:	2102      	movs	r1, #2
   12c3e:	69f8      	ldr	r0, [r7, #28]
   12c40:	f7f0 f8e8 	bl	2e14 <bb_setUInt8>
   12c44:	6378      	str	r0, [r7, #52]	; 0x34
   12c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d145      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12c4c:	2102      	movs	r1, #2
   12c4e:	69f8      	ldr	r0, [r7, #28]
   12c50:	f7f0 f8e0 	bl	2e14 <bb_setUInt8>
   12c54:	6378      	str	r0, [r7, #52]	; 0x34
   12c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c58:	2b00      	cmp	r3, #0
   12c5a:	d13d      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Start date time.
                (ret = var_setDateTimeAsOctetString(&tmp, (gxtime*)it->key)) != 0 ||
   12c5c:	69bb      	ldr	r3, [r7, #24]
   12c5e:	681a      	ldr	r2, [r3, #0]
        }
        for (pos = 0; pos != object->communicationWindow.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
   12c60:	f107 0308 	add.w	r3, r7, #8
   12c64:	4611      	mov	r1, r2
   12c66:	4618      	mov	r0, r3
   12c68:	f015 fa40 	bl	280ec <var_setDateTimeAsOctetString>
   12c6c:	6378      	str	r0, [r7, #52]	; 0x34
   12c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c70:	2b00      	cmp	r3, #0
   12c72:	d131      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                //Start date time.
                (ret = var_setDateTimeAsOctetString(&tmp, (gxtime*)it->key)) != 0 ||
   12c74:	f107 0308 	add.w	r3, r7, #8
   12c78:	69f9      	ldr	r1, [r7, #28]
   12c7a:	4618      	mov	r0, r3
   12c7c:	f013 fcbe 	bl	265fc <var_getBytes>
   12c80:	6378      	str	r0, [r7, #52]	; 0x34
   12c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c84:	2b00      	cmp	r3, #0
   12c86:	d127      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   12c88:	f107 0308 	add.w	r3, r7, #8
   12c8c:	4618      	mov	r0, r3
   12c8e:	f013 fa5b 	bl	26148 <var_clear>
   12c92:	6378      	str	r0, [r7, #52]	; 0x34
   12c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c96:	2b00      	cmp	r3, #0
   12c98:	d11e      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                (ret = var_clear(&tmp)) != 0 ||
                //End date time.
                (ret = var_setDateTimeAsOctetString(&tmp, (gxtime*)it->value)) != 0 ||
   12c9a:	69bb      	ldr	r3, [r7, #24]
   12c9c:	685a      	ldr	r2, [r3, #4]
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 2)) != 0 ||
                //Start date time.
                (ret = var_setDateTimeAsOctetString(&tmp, (gxtime*)it->key)) != 0 ||
                (ret = var_getBytes(&tmp, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
   12c9e:	f107 0308 	add.w	r3, r7, #8
   12ca2:	4611      	mov	r1, r2
   12ca4:	4618      	mov	r0, r3
   12ca6:	f015 fa21 	bl	280ec <var_setDateTimeAsOctetString>
   12caa:	6378      	str	r0, [r7, #52]	; 0x34
   12cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cae:	2b00      	cmp	r3, #0
   12cb0:	d112      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                //End date time.
                (ret = var_setDateTimeAsOctetString(&tmp, (gxtime*)it->value)) != 0 ||
   12cb2:	f107 0308 	add.w	r3, r7, #8
   12cb6:	69f9      	ldr	r1, [r7, #28]
   12cb8:	4618      	mov	r0, r3
   12cba:	f013 fc9f 	bl	265fc <var_getBytes>
   12cbe:	6378      	str	r0, [r7, #52]	; 0x34
   12cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d108      	bne.n	12cd8 <cosem_getPushSetup+0x3b0>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   12cc6:	f107 0308 	add.w	r3, r7, #8
   12cca:	4618      	mov	r0, r3
   12ccc:	f013 fa3c 	bl	26148 <var_clear>
   12cd0:	6378      	str	r0, [r7, #52]	; 0x34
   12cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	d005      	beq.n	12ce4 <cosem_getPushSetup+0x3bc>
                (ret = var_clear(&tmp)) != 0)
            {
                var_clear(&tmp);
   12cd8:	f107 0308 	add.w	r3, r7, #8
   12cdc:	4618      	mov	r0, r3
   12cde:	f013 fa33 	bl	26148 <var_clear>
                break;
   12ce2:	e035      	b.n	12d50 <cosem_getPushSetup+0x428>
            (ret = hlp_setObjectCount(object->communicationWindow.size, data)) != 0 ||
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->communicationWindow.size; ++pos)
   12ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12ce6:	3301      	adds	r3, #1
   12ce8:	633b      	str	r3, [r7, #48]	; 0x30
   12cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   12cee:	461a      	mov	r2, r3
   12cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12cf2:	429a      	cmp	r2, r3
   12cf4:	d196      	bne.n	12c24 <cosem_getPushSetup+0x2fc>
   12cf6:	e02b      	b.n	12d50 <cosem_getPushSetup+0x428>
                var_clear(&tmp);
                break;
            }
        }
    }
    else if (e->index == 5)
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	7e1b      	ldrb	r3, [r3, #24]
   12cfc:	2b05      	cmp	r3, #5
   12cfe:	d108      	bne.n	12d12 <cosem_getPushSetup+0x3ea>
    {
        ret = var_setUInt16(&e->value, object->randomisationStartInterval);
   12d00:	687a      	ldr	r2, [r7, #4]
   12d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   12d06:	4619      	mov	r1, r3
   12d08:	4610      	mov	r0, r2
   12d0a:	f013 f919 	bl	25f40 <var_setUInt16>
   12d0e:	6378      	str	r0, [r7, #52]	; 0x34
   12d10:	e01e      	b.n	12d50 <cosem_getPushSetup+0x428>
    }
    else if (e->index == 6)
   12d12:	687b      	ldr	r3, [r7, #4]
   12d14:	7e1b      	ldrb	r3, [r3, #24]
   12d16:	2b06      	cmp	r3, #6
   12d18:	d109      	bne.n	12d2e <cosem_getPushSetup+0x406>
    {
        ret = var_setUInt8(&e->value, object->numberOfRetries);
   12d1a:	687a      	ldr	r2, [r7, #4]
   12d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   12d22:	4619      	mov	r1, r3
   12d24:	4610      	mov	r0, r2
   12d26:	f013 f8f7 	bl	25f18 <var_setUInt8>
   12d2a:	6378      	str	r0, [r7, #52]	; 0x34
   12d2c:	e010      	b.n	12d50 <cosem_getPushSetup+0x428>
    }
    else if (e->index == 7)
   12d2e:	687b      	ldr	r3, [r7, #4]
   12d30:	7e1b      	ldrb	r3, [r3, #24]
   12d32:	2b07      	cmp	r3, #7
   12d34:	d109      	bne.n	12d4a <cosem_getPushSetup+0x422>
    {
        ret = var_setUInt16(&e->value, object->repetitionDelay);
   12d36:	687a      	ldr	r2, [r7, #4]
   12d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   12d3e:	4619      	mov	r1, r3
   12d40:	4610      	mov	r0, r2
   12d42:	f013 f8fd 	bl	25f40 <var_setUInt16>
   12d46:	6378      	str	r0, [r7, #52]	; 0x34
   12d48:	e002      	b.n	12d50 <cosem_getPushSetup+0x428>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12d4a:	f44f 7381 	mov.w	r3, #258	; 0x102
   12d4e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    return ret;
   12d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   12d52:	4618      	mov	r0, r3
   12d54:	3738      	adds	r7, #56	; 0x38
   12d56:	46bd      	mov	sp, r7
   12d58:	bd80      	pop	{r7, pc}
   12d5a:	bf00      	nop

00012d5c <cosem_getZigbeeNetworkControl>:
#endif //DLMS_IGNORE_PUSH_SETUP
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int cosem_getZigbeeNetworkControl(
    gxValueEventArg *e)
{
   12d5c:	b590      	push	{r4, r7, lr}
   12d5e:	b08d      	sub	sp, #52	; 0x34
   12d60:	af00      	add	r7, sp, #0
   12d62:	6078      	str	r0, [r7, #4]
    gxZigBeeNetworkControl* object = (gxZigBeeNetworkControl*)e->target;
   12d64:	687b      	ldr	r3, [r7, #4]
   12d66:	695b      	ldr	r3, [r3, #20]
   12d68:	627b      	str	r3, [r7, #36]	; 0x24
    int ret = 0, pos;
   12d6a:	2300      	movs	r3, #0
   12d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gxActiveDevice *it;
    dlmsVARIANT tmp;
    if (e->index == 2)
   12d6e:	687b      	ldr	r3, [r7, #4]
   12d70:	7e1b      	ldrb	r3, [r3, #24]
   12d72:	2b02      	cmp	r3, #2
   12d74:	d108      	bne.n	12d88 <cosem_getZigbeeNetworkControl+0x2c>
    {
        ret = var_setUInt8(&e->value, object->enableDisableJoining);
   12d76:	687a      	ldr	r2, [r7, #4]
   12d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d7a:	7c1b      	ldrb	r3, [r3, #16]
   12d7c:	4619      	mov	r1, r3
   12d7e:	4610      	mov	r0, r2
   12d80:	f013 f8ca 	bl	25f18 <var_setUInt8>
   12d84:	62f8      	str	r0, [r7, #44]	; 0x2c
   12d86:	e1b7      	b.n	130f8 <cosem_getZigbeeNetworkControl+0x39c>
    }
    else if (e->index == 3)
   12d88:	687b      	ldr	r3, [r7, #4]
   12d8a:	7e1b      	ldrb	r3, [r3, #24]
   12d8c:	2b03      	cmp	r3, #3
   12d8e:	d108      	bne.n	12da2 <cosem_getZigbeeNetworkControl+0x46>
    {
        ret = var_setUInt16(&e->value, object->joinTimeout);
   12d90:	687a      	ldr	r2, [r7, #4]
   12d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d94:	8a5b      	ldrh	r3, [r3, #18]
   12d96:	4619      	mov	r1, r3
   12d98:	4610      	mov	r0, r2
   12d9a:	f013 f8d1 	bl	25f40 <var_setUInt16>
   12d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12da0:	e1aa      	b.n	130f8 <cosem_getZigbeeNetworkControl+0x39c>
    }
    else if (e->index == 4)
   12da2:	687b      	ldr	r3, [r7, #4]
   12da4:	7e1b      	ldrb	r3, [r3, #24]
   12da6:	2b04      	cmp	r3, #4
   12da8:	f040 81a3 	bne.w	130f2 <cosem_getZigbeeNetworkControl+0x396>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   12dac:	687b      	ldr	r3, [r7, #4]
   12dae:	4618      	mov	r0, r3
   12db0:	f7f9 fdf8 	bl	c9a4 <cosem_getByteBuffer>
   12db4:	62f8      	str	r0, [r7, #44]	; 0x2c
   12db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12db8:	2b00      	cmp	r3, #0
   12dba:	d001      	beq.n	12dc0 <cosem_getZigbeeNetworkControl+0x64>
        {
            return ret;
   12dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dbe:	e19c      	b.n	130fa <cosem_getZigbeeNetworkControl+0x39e>
        }
        gxByteBuffer *data = e->value.byteArr;
   12dc0:	687b      	ldr	r3, [r7, #4]
   12dc2:	689b      	ldr	r3, [r3, #8]
   12dc4:	623b      	str	r3, [r7, #32]
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   12dc6:	687b      	ldr	r3, [r7, #4]
   12dc8:	2209      	movs	r2, #9
   12dca:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12dcc:	2101      	movs	r1, #1
   12dce:	6a38      	ldr	r0, [r7, #32]
   12dd0:	f7f0 f820 	bl	2e14 <bb_setUInt8>
   12dd4:	62f8      	str	r0, [r7, #44]	; 0x2c
   12dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d112      	bne.n	12e02 <cosem_getZigbeeNetworkControl+0xa6>
            (ret = hlp_setObjectCount(object->activeDevices.size, data)) != 0 ||
   12ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12dde:	8b9b      	ldrh	r3, [r3, #28]
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12de0:	6a39      	ldr	r1, [r7, #32]
   12de2:	4618      	mov	r0, r3
   12de4:	f00e fd7a 	bl	218dc <hlp_setObjectCount>
   12de8:	62f8      	str	r0, [r7, #44]	; 0x2c
   12dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dec:	2b00      	cmp	r3, #0
   12dee:	d108      	bne.n	12e02 <cosem_getZigbeeNetworkControl+0xa6>
            (ret = hlp_setObjectCount(object->activeDevices.size, data)) != 0 ||
   12df0:	f107 0308 	add.w	r3, r7, #8
   12df4:	4618      	mov	r0, r3
   12df6:	f013 f997 	bl	26128 <var_init>
   12dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
   12dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dfe:	2b00      	cmp	r3, #0
   12e00:	d001      	beq.n	12e06 <cosem_getZigbeeNetworkControl+0xaa>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
   12e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e04:	e179      	b.n	130fa <cosem_getZigbeeNetworkControl+0x39e>
        }

        for (pos = 0; pos != object->activeDevices.size; ++pos)
   12e06:	2300      	movs	r3, #0
   12e08:	62bb      	str	r3, [r7, #40]	; 0x28
   12e0a:	e16a      	b.n	130e2 <cosem_getZigbeeNetworkControl+0x386>
        {
            if ((ret = arr_get(&object->activeDevices, (void**)&it)) != 0 ||
   12e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12e0e:	3314      	adds	r3, #20
   12e10:	f107 021c 	add.w	r2, r7, #28
   12e14:	4611      	mov	r1, r2
   12e16:	4618      	mov	r0, r3
   12e18:	f7f9 fcce 	bl	c7b8 <arr_get>
   12e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e20:	2b00      	cmp	r3, #0
   12e22:	f040 8155 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
   12e26:	2102      	movs	r1, #2
   12e28:	6a38      	ldr	r0, [r7, #32]
   12e2a:	f7ef fff3 	bl	2e14 <bb_setUInt8>
   12e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e32:	2b00      	cmp	r3, #0
   12e34:	f040 814c 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12e38:	210e      	movs	r1, #14
   12e3a:	6a38      	ldr	r0, [r7, #32]
   12e3c:	f7ef ffea 	bl	2e14 <bb_setUInt8>
   12e40:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e44:	2b00      	cmp	r3, #0
   12e46:	f040 8143 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, 14)) != 0 ||
   12e4a:	2109      	movs	r1, #9
   12e4c:	6a38      	ldr	r0, [r7, #32]
   12e4e:	f7ef ffe1 	bl	2e14 <bb_setUInt8>
   12e52:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e56:	2b00      	cmp	r3, #0
   12e58:	f040 813a 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //mac address.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->macAddress.size)) != 0 ||
   12e5c:	69fb      	ldr	r3, [r7, #28]
   12e5e:	88db      	ldrh	r3, [r3, #6]
   12e60:	b2db      	uxtb	r3, r3
        {
            if ((ret = arr_get(&object->activeDevices, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 14)) != 0 ||
                //mac address.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12e62:	4619      	mov	r1, r3
   12e64:	6a38      	ldr	r0, [r7, #32]
   12e66:	f7ef ffd5 	bl	2e14 <bb_setUInt8>
   12e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e6e:	2b00      	cmp	r3, #0
   12e70:	f040 812e 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, (unsigned char)it->macAddress.size)) != 0 ||
                (ret = bb_set2(data, &it->macAddress, 0, bb_size(&it->macAddress))) != 0 ||
   12e74:	69fb      	ldr	r3, [r7, #28]
   12e76:	461c      	mov	r4, r3
   12e78:	69fb      	ldr	r3, [r7, #28]
   12e7a:	4618      	mov	r0, r3
   12e7c:	f7ef ff24 	bl	2cc8 <bb_size>
   12e80:	4603      	mov	r3, r0
            if ((ret = arr_get(&object->activeDevices, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = bb_setUInt8(data, 14)) != 0 ||
                //mac address.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->macAddress.size)) != 0 ||
   12e82:	2200      	movs	r2, #0
   12e84:	4621      	mov	r1, r4
   12e86:	6a38      	ldr	r0, [r7, #32]
   12e88:	f7f0 fbca 	bl	3620 <bb_set2>
   12e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e90:	2b00      	cmp	r3, #0
   12e92:	f040 811d 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_set2(data, &it->macAddress, 0, bb_size(&it->macAddress))) != 0 ||
   12e96:	2104      	movs	r1, #4
   12e98:	6a38      	ldr	r0, [r7, #32]
   12e9a:	f7ef ffbb 	bl	2e14 <bb_setUInt8>
   12e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
   12ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ea2:	2b00      	cmp	r3, #0
   12ea4:	f040 8114 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //status
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->status.size)) != 0 ||
   12ea8:	69fb      	ldr	r3, [r7, #28]
   12eaa:	8a5b      	ldrh	r3, [r3, #18]
   12eac:	b2db      	uxtb	r3, r3
                //mac address.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->macAddress.size)) != 0 ||
                (ret = bb_set2(data, &it->macAddress, 0, bb_size(&it->macAddress))) != 0 ||
                //status
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12eae:	4619      	mov	r1, r3
   12eb0:	6a38      	ldr	r0, [r7, #32]
   12eb2:	f7ef ffaf 	bl	2e14 <bb_setUInt8>
   12eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
   12eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12eba:	2b00      	cmp	r3, #0
   12ebc:	f040 8108 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, (unsigned char)it->status.size)) != 0 ||
                (ret = bb_set(data, it->status.data, ba_getByteCount(it->status.size))) != 0 ||
   12ec0:	69fb      	ldr	r3, [r7, #28]
   12ec2:	68dc      	ldr	r4, [r3, #12]
   12ec4:	69fb      	ldr	r3, [r7, #28]
   12ec6:	8a5b      	ldrh	r3, [r3, #18]
   12ec8:	4618      	mov	r0, r3
   12eca:	f7ef fc35 	bl	2738 <ba_getByteCount>
   12ece:	4603      	mov	r3, r0
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->macAddress.size)) != 0 ||
                (ret = bb_set2(data, &it->macAddress, 0, bb_size(&it->macAddress))) != 0 ||
                //status
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->status.size)) != 0 ||
   12ed0:	461a      	mov	r2, r3
   12ed2:	4621      	mov	r1, r4
   12ed4:	6a38      	ldr	r0, [r7, #32]
   12ed6:	f7f0 fb43 	bl	3560 <bb_set>
   12eda:	62f8      	str	r0, [r7, #44]	; 0x2c
   12edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ede:	2b00      	cmp	r3, #0
   12ee0:	f040 80f6 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_set(data, it->status.data, ba_getByteCount(it->status.size))) != 0 ||
   12ee4:	210f      	movs	r1, #15
   12ee6:	6a38      	ldr	r0, [r7, #32]
   12ee8:	f7ef ff94 	bl	2e14 <bb_setUInt8>
   12eec:	62f8      	str	r0, [r7, #44]	; 0x2c
   12eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	f040 80ed 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //max RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->maxRSSI)) != 0 ||
   12ef6:	69fb      	ldr	r3, [r7, #28]
   12ef8:	7e1b      	ldrb	r3, [r3, #24]
                //status
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)it->status.size)) != 0 ||
                (ret = bb_set(data, it->status.data, ba_getByteCount(it->status.size))) != 0 ||
                //max RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12efa:	4619      	mov	r1, r3
   12efc:	6a38      	ldr	r0, [r7, #32]
   12efe:	f7ef ff89 	bl	2e14 <bb_setUInt8>
   12f02:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f06:	2b00      	cmp	r3, #0
   12f08:	f040 80e2 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->maxRSSI)) != 0 ||
   12f0c:	210f      	movs	r1, #15
   12f0e:	6a38      	ldr	r0, [r7, #32]
   12f10:	f7ef ff80 	bl	2e14 <bb_setUInt8>
   12f14:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f18:	2b00      	cmp	r3, #0
   12f1a:	f040 80d9 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //average RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->averageRSSI)) != 0 ||
   12f1e:	69fb      	ldr	r3, [r7, #28]
   12f20:	7e5b      	ldrb	r3, [r3, #25]
                (ret = bb_set(data, it->status.data, ba_getByteCount(it->status.size))) != 0 ||
                //max RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->maxRSSI)) != 0 ||
                //average RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12f22:	4619      	mov	r1, r3
   12f24:	6a38      	ldr	r0, [r7, #32]
   12f26:	f7ef ff75 	bl	2e14 <bb_setUInt8>
   12f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f2e:	2b00      	cmp	r3, #0
   12f30:	f040 80ce 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->averageRSSI)) != 0 ||
   12f34:	210f      	movs	r1, #15
   12f36:	6a38      	ldr	r0, [r7, #32]
   12f38:	f7ef ff6c 	bl	2e14 <bb_setUInt8>
   12f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f40:	2b00      	cmp	r3, #0
   12f42:	f040 80c5 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //min RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->minRSSI)) != 0 ||
   12f46:	69fb      	ldr	r3, [r7, #28]
   12f48:	7e9b      	ldrb	r3, [r3, #26]
                (ret = bb_setUInt8(data, it->maxRSSI)) != 0 ||
                //average RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->averageRSSI)) != 0 ||
                //min RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12f4a:	4619      	mov	r1, r3
   12f4c:	6a38      	ldr	r0, [r7, #32]
   12f4e:	f7ef ff61 	bl	2e14 <bb_setUInt8>
   12f52:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f56:	2b00      	cmp	r3, #0
   12f58:	f040 80ba 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->minRSSI)) != 0 ||
   12f5c:	2111      	movs	r1, #17
   12f5e:	6a38      	ldr	r0, [r7, #32]
   12f60:	f7ef ff58 	bl	2e14 <bb_setUInt8>
   12f64:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f68:	2b00      	cmp	r3, #0
   12f6a:	f040 80b1 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //max LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->maxLQI)) != 0 ||
   12f6e:	69fb      	ldr	r3, [r7, #28]
   12f70:	7edb      	ldrb	r3, [r3, #27]
                (ret = bb_setUInt8(data, it->averageRSSI)) != 0 ||
                //min RSSI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, it->minRSSI)) != 0 ||
                //max LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   12f72:	4619      	mov	r1, r3
   12f74:	6a38      	ldr	r0, [r7, #32]
   12f76:	f7ef ff4d 	bl	2e14 <bb_setUInt8>
   12f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f7e:	2b00      	cmp	r3, #0
   12f80:	f040 80a6 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->maxLQI)) != 0 ||
   12f84:	2111      	movs	r1, #17
   12f86:	6a38      	ldr	r0, [r7, #32]
   12f88:	f7ef ff44 	bl	2e14 <bb_setUInt8>
   12f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f90:	2b00      	cmp	r3, #0
   12f92:	f040 809d 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //average LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->averageLQI)) != 0 ||
   12f96:	69fb      	ldr	r3, [r7, #28]
   12f98:	7f1b      	ldrb	r3, [r3, #28]
                (ret = bb_setUInt8(data, it->minRSSI)) != 0 ||
                //max LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->maxLQI)) != 0 ||
                //average LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   12f9a:	4619      	mov	r1, r3
   12f9c:	6a38      	ldr	r0, [r7, #32]
   12f9e:	f7ef ff39 	bl	2e14 <bb_setUInt8>
   12fa2:	62f8      	str	r0, [r7, #44]	; 0x2c
   12fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fa6:	2b00      	cmp	r3, #0
   12fa8:	f040 8092 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->averageLQI)) != 0 ||
   12fac:	2111      	movs	r1, #17
   12fae:	6a38      	ldr	r0, [r7, #32]
   12fb0:	f7ef ff30 	bl	2e14 <bb_setUInt8>
   12fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
   12fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fb8:	2b00      	cmp	r3, #0
   12fba:	f040 8089 	bne.w	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //min LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->minLQI)) != 0 ||
   12fbe:	69fb      	ldr	r3, [r7, #28]
   12fc0:	7f5b      	ldrb	r3, [r3, #29]
                (ret = bb_setUInt8(data, it->maxLQI)) != 0 ||
                //average LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->averageLQI)) != 0 ||
                //min LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   12fc2:	4619      	mov	r1, r3
   12fc4:	6a38      	ldr	r0, [r7, #32]
   12fc6:	f7ef ff25 	bl	2e14 <bb_setUInt8>
   12fca:	62f8      	str	r0, [r7, #44]	; 0x2c
   12fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d17e      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->minLQI)) != 0 ||
                //last communication date time
                (ret = var_setDateTime(&tmp, &it->lastCommunicationDateTime)) != 0 ||
   12fd2:	69fb      	ldr	r3, [r7, #28]
   12fd4:	f103 0220 	add.w	r2, r3, #32
                //average LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->averageLQI)) != 0 ||
                //min LQI
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->minLQI)) != 0 ||
   12fd8:	f107 0308 	add.w	r3, r7, #8
   12fdc:	4611      	mov	r1, r2
   12fde:	4618      	mov	r0, r3
   12fe0:	f015 f818 	bl	28014 <var_setDateTime>
   12fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
   12fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fe8:	2b00      	cmp	r3, #0
   12fea:	d171      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //last communication date time
                (ret = var_setDateTime(&tmp, &it->lastCommunicationDateTime)) != 0 ||
   12fec:	f107 0308 	add.w	r3, r7, #8
   12ff0:	6a39      	ldr	r1, [r7, #32]
   12ff2:	4618      	mov	r0, r3
   12ff4:	f013 fb02 	bl	265fc <var_getBytes>
   12ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
   12ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d167      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = var_getBytes(&tmp, data)) != 0 ||
   13000:	f107 0308 	add.w	r3, r7, #8
   13004:	4618      	mov	r0, r3
   13006:	f013 f89f 	bl	26148 <var_clear>
   1300a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1300e:	2b00      	cmp	r3, #0
   13010:	d15e      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = var_clear(&tmp)) != 0 ||
   13012:	2111      	movs	r1, #17
   13014:	6a38      	ldr	r0, [r7, #32]
   13016:	f7ef fefd 	bl	2e14 <bb_setUInt8>
   1301a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1301e:	2b00      	cmp	r3, #0
   13020:	d156      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //number of hops
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->numberOfHops)) != 0 ||
   13022:	69fb      	ldr	r3, [r7, #28]
   13024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
                //last communication date time
                (ret = var_setDateTime(&tmp, &it->lastCommunicationDateTime)) != 0 ||
                (ret = var_getBytes(&tmp, data)) != 0 ||
                (ret = var_clear(&tmp)) != 0 ||
                //number of hops
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   13028:	4619      	mov	r1, r3
   1302a:	6a38      	ldr	r0, [r7, #32]
   1302c:	f7ef fef2 	bl	2e14 <bb_setUInt8>
   13030:	62f8      	str	r0, [r7, #44]	; 0x2c
   13032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13034:	2b00      	cmp	r3, #0
   13036:	d14b      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->numberOfHops)) != 0 ||
   13038:	2111      	movs	r1, #17
   1303a:	6a38      	ldr	r0, [r7, #32]
   1303c:	f7ef feea 	bl	2e14 <bb_setUInt8>
   13040:	62f8      	str	r0, [r7, #44]	; 0x2c
   13042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13044:	2b00      	cmp	r3, #0
   13046:	d143      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //transmission failures
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->transmissionFailures)) != 0 ||
   13048:	69fb      	ldr	r3, [r7, #28]
   1304a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
                (ret = var_clear(&tmp)) != 0 ||
                //number of hops
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->numberOfHops)) != 0 ||
                //transmission failures
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   1304e:	4619      	mov	r1, r3
   13050:	6a38      	ldr	r0, [r7, #32]
   13052:	f7ef fedf 	bl	2e14 <bb_setUInt8>
   13056:	62f8      	str	r0, [r7, #44]	; 0x2c
   13058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1305a:	2b00      	cmp	r3, #0
   1305c:	d138      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->transmissionFailures)) != 0 ||
   1305e:	2111      	movs	r1, #17
   13060:	6a38      	ldr	r0, [r7, #32]
   13062:	f7ef fed7 	bl	2e14 <bb_setUInt8>
   13066:	62f8      	str	r0, [r7, #44]	; 0x2c
   13068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1306a:	2b00      	cmp	r3, #0
   1306c:	d130      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //transmission successes
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   1306e:	69fb      	ldr	r3, [r7, #28]
   13070:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
                (ret = bb_setUInt8(data, it->numberOfHops)) != 0 ||
                //transmission failures
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->transmissionFailures)) != 0 ||
                //transmission successes
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   13074:	4619      	mov	r1, r3
   13076:	6a38      	ldr	r0, [r7, #32]
   13078:	f7ef fecc 	bl	2e14 <bb_setUInt8>
   1307c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13080:	2b00      	cmp	r3, #0
   13082:	d125      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   13084:	2111      	movs	r1, #17
   13086:	6a38      	ldr	r0, [r7, #32]
   13088:	f7ef fec4 	bl	2e14 <bb_setUInt8>
   1308c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13090:	2b00      	cmp	r3, #0
   13092:	d11d      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //application version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->applicationVersion)) != 0 ||
   13094:	69fb      	ldr	r3, [r7, #28]
   13096:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                (ret = bb_setUInt8(data, it->transmissionFailures)) != 0 ||
                //transmission successes
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->transmissionSuccesses)) != 0 ||
                //application version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   1309a:	4619      	mov	r1, r3
   1309c:	6a38      	ldr	r0, [r7, #32]
   1309e:	f7ef feb9 	bl	2e14 <bb_setUInt8>
   130a2:	62f8      	str	r0, [r7, #44]	; 0x2c
   130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130a6:	2b00      	cmp	r3, #0
   130a8:	d112      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                (ret = bb_setUInt8(data, it->applicationVersion)) != 0 ||
   130aa:	2111      	movs	r1, #17
   130ac:	6a38      	ldr	r0, [r7, #32]
   130ae:	f7ef feb1 	bl	2e14 <bb_setUInt8>
   130b2:	62f8      	str	r0, [r7, #44]	; 0x2c
   130b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130b6:	2b00      	cmp	r3, #0
   130b8:	d10a      	bne.n	130d0 <cosem_getZigbeeNetworkControl+0x374>
                //stack version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->stackVersion)) != 0)
   130ba:	69fb      	ldr	r3, [r7, #28]
   130bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
                (ret = bb_setUInt8(data, it->transmissionSuccesses)) != 0 ||
                //application version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, it->applicationVersion)) != 0 ||
                //stack version
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   130c0:	4619      	mov	r1, r3
   130c2:	6a38      	ldr	r0, [r7, #32]
   130c4:	f7ef fea6 	bl	2e14 <bb_setUInt8>
   130c8:	62f8      	str	r0, [r7, #44]	; 0x2c
   130ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130cc:	2b00      	cmp	r3, #0
   130ce:	d005      	beq.n	130dc <cosem_getZigbeeNetworkControl+0x380>
                (ret = bb_setUInt8(data, it->stackVersion)) != 0)
            {
                var_clear(&tmp);
   130d0:	f107 0308 	add.w	r3, r7, #8
   130d4:	4618      	mov	r0, r3
   130d6:	f013 f837 	bl	26148 <var_clear>
                break;
   130da:	e00d      	b.n	130f8 <cosem_getZigbeeNetworkControl+0x39c>
            (ret = var_init(&tmp)) != 0)
        {
            return ret;
        }

        for (pos = 0; pos != object->activeDevices.size; ++pos)
   130dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   130de:	3301      	adds	r3, #1
   130e0:	62bb      	str	r3, [r7, #40]	; 0x28
   130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130e4:	8b9b      	ldrh	r3, [r3, #28]
   130e6:	461a      	mov	r2, r3
   130e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   130ea:	429a      	cmp	r2, r3
   130ec:	f47f ae8e 	bne.w	12e0c <cosem_getZigbeeNetworkControl+0xb0>
   130f0:	e002      	b.n	130f8 <cosem_getZigbeeNetworkControl+0x39c>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   130f2:	f44f 7381 	mov.w	r3, #258	; 0x102
   130f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return ret;
   130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   130fa:	4618      	mov	r0, r3
   130fc:	3734      	adds	r7, #52	; 0x34
   130fe:	46bd      	mov	sp, r7
   13100:	bd90      	pop	{r4, r7, pc}
   13102:	bf00      	nop

00013104 <getUnitCharge>:
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_CHARGE
int getUnitCharge(gxUnitCharge* target, dlmsVARIANT *value)
{
   13104:	b590      	push	{r4, r7, lr}
   13106:	b087      	sub	sp, #28
   13108:	af00      	add	r7, sp, #0
   1310a:	6078      	str	r0, [r7, #4]
   1310c:	6039      	str	r1, [r7, #0]
    int ret = 0, pos;
   1310e:	2300      	movs	r3, #0
   13110:	617b      	str	r3, [r7, #20]
    gxChargeTable *it;
    if ((ret = cosem_getByteBuffer(value)) != 0)
   13112:	6838      	ldr	r0, [r7, #0]
   13114:	f7f9 fc46 	bl	c9a4 <cosem_getByteBuffer>
   13118:	6178      	str	r0, [r7, #20]
   1311a:	697b      	ldr	r3, [r7, #20]
   1311c:	2b00      	cmp	r3, #0
   1311e:	d001      	beq.n	13124 <getUnitCharge+0x20>
    {
        return ret;
   13120:	697b      	ldr	r3, [r7, #20]
   13122:	e114      	b.n	1334e <getUnitCharge+0x24a>
    }
    gxByteBuffer *data = value->byteArr;
   13124:	683b      	ldr	r3, [r7, #0]
   13126:	689b      	ldr	r3, [r3, #8]
   13128:	60fb      	str	r3, [r7, #12]

    value->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1312a:	683b      	ldr	r3, [r7, #0]
   1312c:	2209      	movs	r2, #9
   1312e:	701a      	strb	r2, [r3, #0]
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13130:	2102      	movs	r1, #2
   13132:	68f8      	ldr	r0, [r7, #12]
   13134:	f7ef fe6e 	bl	2e14 <bb_setUInt8>
   13138:	6178      	str	r0, [r7, #20]
   1313a:	697b      	ldr	r3, [r7, #20]
   1313c:	2b00      	cmp	r3, #0
   1313e:	f040 80a5 	bne.w	1328c <getUnitCharge+0x188>
   13142:	2103      	movs	r1, #3
   13144:	68f8      	ldr	r0, [r7, #12]
   13146:	f7ef fe65 	bl	2e14 <bb_setUInt8>
   1314a:	6178      	str	r0, [r7, #20]
   1314c:	697b      	ldr	r3, [r7, #20]
   1314e:	2b00      	cmp	r3, #0
   13150:	f040 809c 	bne.w	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, 3)) != 0 ||
   13154:	2102      	movs	r1, #2
   13156:	68f8      	ldr	r0, [r7, #12]
   13158:	f7ef fe5c 	bl	2e14 <bb_setUInt8>
   1315c:	6178      	str	r0, [r7, #20]
   1315e:	697b      	ldr	r3, [r7, #20]
   13160:	2b00      	cmp	r3, #0
   13162:	f040 8093 	bne.w	1328c <getUnitCharge+0x188>
        //-------------
        //charge per unit scaling
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13166:	2102      	movs	r1, #2
   13168:	68f8      	ldr	r0, [r7, #12]
   1316a:	f7ef fe53 	bl	2e14 <bb_setUInt8>
   1316e:	6178      	str	r0, [r7, #20]
   13170:	697b      	ldr	r3, [r7, #20]
   13172:	2b00      	cmp	r3, #0
   13174:	f040 808a 	bne.w	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, 2)) != 0 ||
   13178:	210f      	movs	r1, #15
   1317a:	68f8      	ldr	r0, [r7, #12]
   1317c:	f7ef fe4a 	bl	2e14 <bb_setUInt8>
   13180:	6178      	str	r0, [r7, #20]
   13182:	697b      	ldr	r3, [r7, #20]
   13184:	2b00      	cmp	r3, #0
   13186:	f040 8081 	bne.w	1328c <getUnitCharge+0x188>
        //commodity scale
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
        (ret = bb_setUInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   1318a:	687b      	ldr	r3, [r7, #4]
   1318c:	f993 3000 	ldrsb.w	r3, [r3]
   13190:	b2db      	uxtb	r3, r3
        //-------------
        //charge per unit scaling
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
        (ret = bb_setUInt8(data, 2)) != 0 ||
        //commodity scale
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13192:	4619      	mov	r1, r3
   13194:	68f8      	ldr	r0, [r7, #12]
   13196:	f7ef fe3d 	bl	2e14 <bb_setUInt8>
   1319a:	6178      	str	r0, [r7, #20]
   1319c:	697b      	ldr	r3, [r7, #20]
   1319e:	2b00      	cmp	r3, #0
   131a0:	d174      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   131a2:	210f      	movs	r1, #15
   131a4:	68f8      	ldr	r0, [r7, #12]
   131a6:	f7ef fe35 	bl	2e14 <bb_setUInt8>
   131aa:	6178      	str	r0, [r7, #20]
   131ac:	697b      	ldr	r3, [r7, #20]
   131ae:	2b00      	cmp	r3, #0
   131b0:	d16c      	bne.n	1328c <getUnitCharge+0x188>
        //price scale
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
        (ret = bb_setUInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   131b2:	687b      	ldr	r3, [r7, #4]
   131b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
   131b8:	b2db      	uxtb	r3, r3
        (ret = bb_setUInt8(data, 2)) != 0 ||
        //commodity scale
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
        (ret = bb_setUInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
        //price scale
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   131ba:	4619      	mov	r1, r3
   131bc:	68f8      	ldr	r0, [r7, #12]
   131be:	f7ef fe29 	bl	2e14 <bb_setUInt8>
   131c2:	6178      	str	r0, [r7, #20]
   131c4:	697b      	ldr	r3, [r7, #20]
   131c6:	2b00      	cmp	r3, #0
   131c8:	d160      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   131ca:	2102      	movs	r1, #2
   131cc:	68f8      	ldr	r0, [r7, #12]
   131ce:	f7ef fe21 	bl	2e14 <bb_setUInt8>
   131d2:	6178      	str	r0, [r7, #20]
   131d4:	697b      	ldr	r3, [r7, #20]
   131d6:	2b00      	cmp	r3, #0
   131d8:	d158      	bne.n	1328c <getUnitCharge+0x188>
        //-------------
        //commodity
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   131da:	2103      	movs	r1, #3
   131dc:	68f8      	ldr	r0, [r7, #12]
   131de:	f7ef fe19 	bl	2e14 <bb_setUInt8>
   131e2:	6178      	str	r0, [r7, #20]
   131e4:	697b      	ldr	r3, [r7, #20]
   131e6:	2b00      	cmp	r3, #0
   131e8:	d150      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, 3)) != 0 ||
   131ea:	2112      	movs	r1, #18
   131ec:	68f8      	ldr	r0, [r7, #12]
   131ee:	f7ef fe11 	bl	2e14 <bb_setUInt8>
   131f2:	6178      	str	r0, [r7, #20]
   131f4:	697b      	ldr	r3, [r7, #20]
   131f6:	2b00      	cmp	r3, #0
   131f8:	d148      	bne.n	1328c <getUnitCharge+0x188>
        //type
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
        (ret = bb_setUInt16(data, target->commodity.type)) != 0 ||
   131fa:	687b      	ldr	r3, [r7, #4]
   131fc:	885b      	ldrh	r3, [r3, #2]
        //-------------
        //commodity
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
        (ret = bb_setUInt8(data, 3)) != 0 ||
        //type
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   131fe:	4619      	mov	r1, r3
   13200:	68f8      	ldr	r0, [r7, #12]
   13202:	f7ef fe99 	bl	2f38 <bb_setUInt16>
   13206:	6178      	str	r0, [r7, #20]
   13208:	697b      	ldr	r3, [r7, #20]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d13e      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt16(data, target->commodity.type)) != 0 ||
   1320e:	2109      	movs	r1, #9
   13210:	68f8      	ldr	r0, [r7, #12]
   13212:	f7ef fdff 	bl	2e14 <bb_setUInt8>
   13216:	6178      	str	r0, [r7, #20]
   13218:	697b      	ldr	r3, [r7, #20]
   1321a:	2b00      	cmp	r3, #0
   1321c:	d136      	bne.n	1328c <getUnitCharge+0x188>
        //logicalName
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1321e:	2106      	movs	r1, #6
   13220:	68f8      	ldr	r0, [r7, #12]
   13222:	f7ef fdf7 	bl	2e14 <bb_setUInt8>
   13226:	6178      	str	r0, [r7, #20]
   13228:	697b      	ldr	r3, [r7, #20]
   1322a:	2b00      	cmp	r3, #0
   1322c:	d12e      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, 6)) != 0 ||
        (ret = bb_set(data, target->commodity.logicalName, 6)) != 0 ||
   1322e:	687b      	ldr	r3, [r7, #4]
   13230:	3304      	adds	r3, #4
        //type
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
        (ret = bb_setUInt16(data, target->commodity.type)) != 0 ||
        //logicalName
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
        (ret = bb_setUInt8(data, 6)) != 0 ||
   13232:	2206      	movs	r2, #6
   13234:	4619      	mov	r1, r3
   13236:	68f8      	ldr	r0, [r7, #12]
   13238:	f7f0 f992 	bl	3560 <bb_set>
   1323c:	6178      	str	r0, [r7, #20]
   1323e:	697b      	ldr	r3, [r7, #20]
   13240:	2b00      	cmp	r3, #0
   13242:	d123      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_set(data, target->commodity.logicalName, 6)) != 0 ||
   13244:	210f      	movs	r1, #15
   13246:	68f8      	ldr	r0, [r7, #12]
   13248:	f7ef fde4 	bl	2e14 <bb_setUInt8>
   1324c:	6178      	str	r0, [r7, #20]
   1324e:	697b      	ldr	r3, [r7, #20]
   13250:	2b00      	cmp	r3, #0
   13252:	d11b      	bne.n	1328c <getUnitCharge+0x188>
        //attributeIndex
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
        (ret = bb_setUInt8(data, target->commodity.attributeIndex)) != 0 ||
   13254:	687b      	ldr	r3, [r7, #4]
   13256:	7a9b      	ldrb	r3, [r3, #10]
        //logicalName
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
        (ret = bb_setUInt8(data, 6)) != 0 ||
        (ret = bb_set(data, target->commodity.logicalName, 6)) != 0 ||
        //attributeIndex
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13258:	4619      	mov	r1, r3
   1325a:	68f8      	ldr	r0, [r7, #12]
   1325c:	f7ef fdda 	bl	2e14 <bb_setUInt8>
   13260:	6178      	str	r0, [r7, #20]
   13262:	697b      	ldr	r3, [r7, #20]
   13264:	2b00      	cmp	r3, #0
   13266:	d111      	bne.n	1328c <getUnitCharge+0x188>
        (ret = bb_setUInt8(data, target->commodity.attributeIndex)) != 0 ||
   13268:	2101      	movs	r1, #1
   1326a:	68f8      	ldr	r0, [r7, #12]
   1326c:	f7ef fdd2 	bl	2e14 <bb_setUInt8>
   13270:	6178      	str	r0, [r7, #20]
   13272:	697b      	ldr	r3, [r7, #20]
   13274:	2b00      	cmp	r3, #0
   13276:	d109      	bne.n	1328c <getUnitCharge+0x188>
        //-------------
        //chargeTables
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
        (ret = hlp_setObjectCount(target->chargeTables.size, data)) != 0)
   13278:	687b      	ldr	r3, [r7, #4]
   1327a:	8a9b      	ldrh	r3, [r3, #20]
        //attributeIndex
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
        (ret = bb_setUInt8(data, target->commodity.attributeIndex)) != 0 ||
        //-------------
        //chargeTables
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1327c:	68f9      	ldr	r1, [r7, #12]
   1327e:	4618      	mov	r0, r3
   13280:	f00e fb2c 	bl	218dc <hlp_setObjectCount>
   13284:	6178      	str	r0, [r7, #20]
   13286:	697b      	ldr	r3, [r7, #20]
   13288:	2b00      	cmp	r3, #0
   1328a:	d001      	beq.n	13290 <getUnitCharge+0x18c>
        (ret = hlp_setObjectCount(target->chargeTables.size, data)) != 0)
    {
        return ret;
   1328c:	697b      	ldr	r3, [r7, #20]
   1328e:	e05e      	b.n	1334e <getUnitCharge+0x24a>
    }
    for (pos = 0; pos != target->chargeTables.size; ++pos)
   13290:	2300      	movs	r3, #0
   13292:	613b      	str	r3, [r7, #16]
   13294:	e054      	b.n	13340 <getUnitCharge+0x23c>
    {
        if ((ret = arr_get(&target->chargeTables, (void**)&it)) != 0 ||
   13296:	687b      	ldr	r3, [r7, #4]
   13298:	330c      	adds	r3, #12
   1329a:	f107 0208 	add.w	r2, r7, #8
   1329e:	4611      	mov	r1, r2
   132a0:	4618      	mov	r0, r3
   132a2:	f7f9 fa89 	bl	c7b8 <arr_get>
   132a6:	6178      	str	r0, [r7, #20]
   132a8:	697b      	ldr	r3, [r7, #20]
   132aa:	2b00      	cmp	r3, #0
   132ac:	d14e      	bne.n	1334c <getUnitCharge+0x248>
   132ae:	2102      	movs	r1, #2
   132b0:	68f8      	ldr	r0, [r7, #12]
   132b2:	f7ef fdaf 	bl	2e14 <bb_setUInt8>
   132b6:	6178      	str	r0, [r7, #20]
   132b8:	697b      	ldr	r3, [r7, #20]
   132ba:	2b00      	cmp	r3, #0
   132bc:	d146      	bne.n	1334c <getUnitCharge+0x248>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   132be:	2102      	movs	r1, #2
   132c0:	68f8      	ldr	r0, [r7, #12]
   132c2:	f7ef fda7 	bl	2e14 <bb_setUInt8>
   132c6:	6178      	str	r0, [r7, #20]
   132c8:	697b      	ldr	r3, [r7, #20]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d13e      	bne.n	1334c <getUnitCharge+0x248>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   132ce:	2109      	movs	r1, #9
   132d0:	68f8      	ldr	r0, [r7, #12]
   132d2:	f7ef fd9f 	bl	2e14 <bb_setUInt8>
   132d6:	6178      	str	r0, [r7, #20]
   132d8:	697b      	ldr	r3, [r7, #20]
   132da:	2b00      	cmp	r3, #0
   132dc:	d136      	bne.n	1334c <getUnitCharge+0x248>
            //index
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, (unsigned char)it->index.size)) != 0 ||
   132de:	68bb      	ldr	r3, [r7, #8]
   132e0:	88db      	ldrh	r3, [r3, #6]
   132e2:	b2db      	uxtb	r3, r3
    {
        if ((ret = arr_get(&target->chargeTables, (void**)&it)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //index
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   132e4:	4619      	mov	r1, r3
   132e6:	68f8      	ldr	r0, [r7, #12]
   132e8:	f7ef fd94 	bl	2e14 <bb_setUInt8>
   132ec:	6178      	str	r0, [r7, #20]
   132ee:	697b      	ldr	r3, [r7, #20]
   132f0:	2b00      	cmp	r3, #0
   132f2:	d12b      	bne.n	1334c <getUnitCharge+0x248>
            (ret = bb_setUInt8(data, (unsigned char)it->index.size)) != 0 ||
            (ret = bb_set2(data, &it->index, 0, bb_size(&it->index))) != 0 ||
   132f4:	68bb      	ldr	r3, [r7, #8]
   132f6:	461c      	mov	r4, r3
   132f8:	68bb      	ldr	r3, [r7, #8]
   132fa:	4618      	mov	r0, r3
   132fc:	f7ef fce4 	bl	2cc8 <bb_size>
   13300:	4603      	mov	r3, r0
        if ((ret = arr_get(&target->chargeTables, (void**)&it)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            //index
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, (unsigned char)it->index.size)) != 0 ||
   13302:	2200      	movs	r2, #0
   13304:	4621      	mov	r1, r4
   13306:	68f8      	ldr	r0, [r7, #12]
   13308:	f7f0 f98a 	bl	3620 <bb_set2>
   1330c:	6178      	str	r0, [r7, #20]
   1330e:	697b      	ldr	r3, [r7, #20]
   13310:	2b00      	cmp	r3, #0
   13312:	d11b      	bne.n	1334c <getUnitCharge+0x248>
            (ret = bb_set2(data, &it->index, 0, bb_size(&it->index))) != 0 ||
   13314:	2110      	movs	r1, #16
   13316:	68f8      	ldr	r0, [r7, #12]
   13318:	f7ef fd7c 	bl	2e14 <bb_setUInt8>
   1331c:	6178      	str	r0, [r7, #20]
   1331e:	697b      	ldr	r3, [r7, #20]
   13320:	2b00      	cmp	r3, #0
   13322:	d113      	bne.n	1334c <getUnitCharge+0x248>
            //chargePerUnit
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT16)) != 0 ||
            (ret = bb_setInt16(data, it->chargePerUnit)) != 0)
   13324:	68bb      	ldr	r3, [r7, #8]
   13326:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
            //index
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, (unsigned char)it->index.size)) != 0 ||
            (ret = bb_set2(data, &it->index, 0, bb_size(&it->index))) != 0 ||
            //chargePerUnit
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT16)) != 0 ||
   1332a:	4619      	mov	r1, r3
   1332c:	68f8      	ldr	r0, [r7, #12]
   1332e:	f7f0 f8e5 	bl	34fc <bb_setInt16>
   13332:	6178      	str	r0, [r7, #20]
   13334:	697b      	ldr	r3, [r7, #20]
   13336:	2b00      	cmp	r3, #0
   13338:	d108      	bne.n	1334c <getUnitCharge+0x248>
        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
        (ret = hlp_setObjectCount(target->chargeTables.size, data)) != 0)
    {
        return ret;
    }
    for (pos = 0; pos != target->chargeTables.size; ++pos)
   1333a:	693b      	ldr	r3, [r7, #16]
   1333c:	3301      	adds	r3, #1
   1333e:	613b      	str	r3, [r7, #16]
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	8a9b      	ldrh	r3, [r3, #20]
   13344:	461a      	mov	r2, r3
   13346:	693b      	ldr	r3, [r7, #16]
   13348:	429a      	cmp	r2, r3
   1334a:	d1a4      	bne.n	13296 <getUnitCharge+0x192>
            (ret = bb_setInt16(data, it->chargePerUnit)) != 0)
        {
            break;
        }
    }
    return ret;
   1334c:	697b      	ldr	r3, [r7, #20]
}
   1334e:	4618      	mov	r0, r3
   13350:	371c      	adds	r7, #28
   13352:	46bd      	mov	sp, r7
   13354:	bd90      	pop	{r4, r7, pc}
   13356:	bf00      	nop

00013358 <cosem_getCharge>:

int cosem_getCharge(
    gxValueEventArg *e)
{
   13358:	b590      	push	{r4, r7, lr}
   1335a:	b087      	sub	sp, #28
   1335c:	af00      	add	r7, sp, #0
   1335e:	6078      	str	r0, [r7, #4]
    gxCharge* object = (gxCharge*)e->target;
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	695b      	ldr	r3, [r3, #20]
   13364:	613b      	str	r3, [r7, #16]
    int ret = 0;
   13366:	2300      	movs	r3, #0
   13368:	617b      	str	r3, [r7, #20]
    if (e->index == 2)
   1336a:	687b      	ldr	r3, [r7, #4]
   1336c:	7e1b      	ldrb	r3, [r3, #24]
   1336e:	2b02      	cmp	r3, #2
   13370:	d109      	bne.n	13386 <cosem_getCharge+0x2e>
    {
        ret = var_setInt32(&e->value, object->totalAmountPaid);
   13372:	687a      	ldr	r2, [r7, #4]
   13374:	693b      	ldr	r3, [r7, #16]
   13376:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
   1337a:	4619      	mov	r1, r3
   1337c:	4610      	mov	r0, r2
   1337e:	f012 fe31 	bl	25fe4 <var_setInt32>
   13382:	6178      	str	r0, [r7, #20]
   13384:	e0cf      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 3)
   13386:	687b      	ldr	r3, [r7, #4]
   13388:	7e1b      	ldrb	r3, [r3, #24]
   1338a:	2b03      	cmp	r3, #3
   1338c:	d108      	bne.n	133a0 <cosem_getCharge+0x48>
    {
        ret = var_setEnum(&e->value, object->chargeType);
   1338e:	687a      	ldr	r2, [r7, #4]
   13390:	693b      	ldr	r3, [r7, #16]
   13392:	7c9b      	ldrb	r3, [r3, #18]
   13394:	4619      	mov	r1, r3
   13396:	4610      	mov	r0, r2
   13398:	f012 fdaa 	bl	25ef0 <var_setEnum>
   1339c:	6178      	str	r0, [r7, #20]
   1339e:	e0c2      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 4)
   133a0:	687b      	ldr	r3, [r7, #4]
   133a2:	7e1b      	ldrb	r3, [r3, #24]
   133a4:	2b04      	cmp	r3, #4
   133a6:	d108      	bne.n	133ba <cosem_getCharge+0x62>
    {
        ret = var_setUInt8(&e->value, object->priority);
   133a8:	687a      	ldr	r2, [r7, #4]
   133aa:	693b      	ldr	r3, [r7, #16]
   133ac:	7cdb      	ldrb	r3, [r3, #19]
   133ae:	4619      	mov	r1, r3
   133b0:	4610      	mov	r0, r2
   133b2:	f012 fdb1 	bl	25f18 <var_setUInt8>
   133b6:	6178      	str	r0, [r7, #20]
   133b8:	e0b5      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 5)
   133ba:	687b      	ldr	r3, [r7, #4]
   133bc:	7e1b      	ldrb	r3, [r3, #24]
   133be:	2b05      	cmp	r3, #5
   133c0:	d10c      	bne.n	133dc <cosem_getCharge+0x84>
    {
        e->byteArray = 1;
   133c2:	687b      	ldr	r3, [r7, #4]
   133c4:	2201      	movs	r2, #1
   133c6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getUnitCharge(&object->unitChargeActive, &e->value);
   133ca:	693b      	ldr	r3, [r7, #16]
   133cc:	3314      	adds	r3, #20
   133ce:	687a      	ldr	r2, [r7, #4]
   133d0:	4611      	mov	r1, r2
   133d2:	4618      	mov	r0, r3
   133d4:	f7ff fe96 	bl	13104 <getUnitCharge>
   133d8:	6178      	str	r0, [r7, #20]
   133da:	e0a4      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 6)
   133dc:	687b      	ldr	r3, [r7, #4]
   133de:	7e1b      	ldrb	r3, [r3, #24]
   133e0:	2b06      	cmp	r3, #6
   133e2:	d10c      	bne.n	133fe <cosem_getCharge+0xa6>
    {
        e->byteArray = 1;
   133e4:	687b      	ldr	r3, [r7, #4]
   133e6:	2201      	movs	r2, #1
   133e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getUnitCharge(&object->unitChargePassive, &e->value);
   133ec:	693b      	ldr	r3, [r7, #16]
   133ee:	3330      	adds	r3, #48	; 0x30
   133f0:	687a      	ldr	r2, [r7, #4]
   133f2:	4611      	mov	r1, r2
   133f4:	4618      	mov	r0, r3
   133f6:	f7ff fe85 	bl	13104 <getUnitCharge>
   133fa:	6178      	str	r0, [r7, #20]
   133fc:	e093      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 7)
   133fe:	687b      	ldr	r3, [r7, #4]
   13400:	7e1b      	ldrb	r3, [r3, #24]
   13402:	2b07      	cmp	r3, #7
   13404:	d108      	bne.n	13418 <cosem_getCharge+0xc0>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &object->unitChargeActivationTime);
   13406:	687a      	ldr	r2, [r7, #4]
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	334c      	adds	r3, #76	; 0x4c
   1340c:	4619      	mov	r1, r3
   1340e:	4610      	mov	r0, r2
   13410:	f014 fe6c 	bl	280ec <var_setDateTimeAsOctetString>
   13414:	6178      	str	r0, [r7, #20]
   13416:	e086      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 8)
   13418:	687b      	ldr	r3, [r7, #4]
   1341a:	7e1b      	ldrb	r3, [r3, #24]
   1341c:	2b08      	cmp	r3, #8
   1341e:	d108      	bne.n	13432 <cosem_getCharge+0xda>
    {
        ret = var_setUInt32(&e->value, object->period);
   13420:	687a      	ldr	r2, [r7, #4]
   13422:	693b      	ldr	r3, [r7, #16]
   13424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   13426:	4619      	mov	r1, r3
   13428:	4610      	mov	r0, r2
   1342a:	f012 fd9d 	bl	25f68 <var_setUInt32>
   1342e:	6178      	str	r0, [r7, #20]
   13430:	e079      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 9)
   13432:	687b      	ldr	r3, [r7, #4]
   13434:	7e1b      	ldrb	r3, [r3, #24]
   13436:	2b09      	cmp	r3, #9
   13438:	d13b      	bne.n	134b2 <cosem_getCharge+0x15a>
    {
        e->byteArray = 1;
   1343a:	687b      	ldr	r3, [r7, #4]
   1343c:	2201      	movs	r2, #1
   1343e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13442:	687b      	ldr	r3, [r7, #4]
   13444:	4618      	mov	r0, r3
   13446:	f7f9 faad 	bl	c9a4 <cosem_getByteBuffer>
   1344a:	6178      	str	r0, [r7, #20]
   1344c:	697b      	ldr	r3, [r7, #20]
   1344e:	2b00      	cmp	r3, #0
   13450:	d001      	beq.n	13456 <cosem_getCharge+0xfe>
        {
            return ret;
   13452:	697b      	ldr	r3, [r7, #20]
   13454:	e068      	b.n	13528 <cosem_getCharge+0x1d0>
        }
        gxByteBuffer *data = e->value.byteArr;
   13456:	687b      	ldr	r3, [r7, #4]
   13458:	689b      	ldr	r3, [r3, #8]
   1345a:	60fb      	str	r3, [r7, #12]
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   1345c:	687b      	ldr	r3, [r7, #4]
   1345e:	2209      	movs	r2, #9
   13460:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13462:	2104      	movs	r1, #4
   13464:	68f8      	ldr	r0, [r7, #12]
   13466:	f7ef fcd5 	bl	2e14 <bb_setUInt8>
   1346a:	6178      	str	r0, [r7, #20]
   1346c:	697b      	ldr	r3, [r7, #20]
   1346e:	2b00      	cmp	r3, #0
   13470:	d11d      	bne.n	134ae <cosem_getCharge+0x156>
            (ret = hlp_setObjectCount(object->chargeConfiguration.size, data)) != 0 ||
   13472:	693b      	ldr	r3, [r7, #16]
   13474:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
        {
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13478:	68f9      	ldr	r1, [r7, #12]
   1347a:	4618      	mov	r0, r3
   1347c:	f00e fa2e 	bl	218dc <hlp_setObjectCount>
   13480:	6178      	str	r0, [r7, #20]
   13482:	697b      	ldr	r3, [r7, #20]
   13484:	2b00      	cmp	r3, #0
   13486:	d112      	bne.n	134ae <cosem_getCharge+0x156>
            (ret = hlp_setObjectCount(object->chargeConfiguration.size, data)) != 0 ||
            (ret = bb_set(data, object->chargeConfiguration.data, ba_getByteCount(object->chargeConfiguration.size))) != 0)
   13488:	693b      	ldr	r3, [r7, #16]
   1348a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
   1348e:	693b      	ldr	r3, [r7, #16]
   13490:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
   13494:	4618      	mov	r0, r3
   13496:	f7ef f94f 	bl	2738 <ba_getByteCount>
   1349a:	4603      	mov	r3, r0
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->chargeConfiguration.size, data)) != 0 ||
   1349c:	461a      	mov	r2, r3
   1349e:	4621      	mov	r1, r4
   134a0:	68f8      	ldr	r0, [r7, #12]
   134a2:	f7f0 f85d 	bl	3560 <bb_set>
   134a6:	6178      	str	r0, [r7, #20]
   134a8:	697b      	ldr	r3, [r7, #20]
   134aa:	2b00      	cmp	r3, #0
   134ac:	d03b      	beq.n	13526 <cosem_getCharge+0x1ce>
            (ret = bb_set(data, object->chargeConfiguration.data, ba_getByteCount(object->chargeConfiguration.size))) != 0)
        {
            return ret;
   134ae:	697b      	ldr	r3, [r7, #20]
   134b0:	e03a      	b.n	13528 <cosem_getCharge+0x1d0>
        }
    }
    else if (e->index == 10)
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	7e1b      	ldrb	r3, [r3, #24]
   134b6:	2b0a      	cmp	r3, #10
   134b8:	d108      	bne.n	134cc <cosem_getCharge+0x174>
    {
        ret = var_setDateTimeAsOctetString(&e->value, &object->lastCollectionTime);
   134ba:	687a      	ldr	r2, [r7, #4]
   134bc:	693b      	ldr	r3, [r7, #16]
   134be:	338c      	adds	r3, #140	; 0x8c
   134c0:	4619      	mov	r1, r3
   134c2:	4610      	mov	r0, r2
   134c4:	f014 fe12 	bl	280ec <var_setDateTimeAsOctetString>
   134c8:	6178      	str	r0, [r7, #20]
   134ca:	e02c      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 11)
   134cc:	687b      	ldr	r3, [r7, #4]
   134ce:	7e1b      	ldrb	r3, [r3, #24]
   134d0:	2b0b      	cmp	r3, #11
   134d2:	d109      	bne.n	134e8 <cosem_getCharge+0x190>
    {
        ret = var_setInt32(&e->value, object->lastCollectionAmount);
   134d4:	687a      	ldr	r2, [r7, #4]
   134d6:	693b      	ldr	r3, [r7, #16]
   134d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   134dc:	4619      	mov	r1, r3
   134de:	4610      	mov	r0, r2
   134e0:	f012 fd80 	bl	25fe4 <var_setInt32>
   134e4:	6178      	str	r0, [r7, #20]
   134e6:	e01e      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 12)
   134e8:	687b      	ldr	r3, [r7, #4]
   134ea:	7e1b      	ldrb	r3, [r3, #24]
   134ec:	2b0c      	cmp	r3, #12
   134ee:	d109      	bne.n	13504 <cosem_getCharge+0x1ac>
    {
        ret = var_setInt32(&e->value, object->totalAmountRemaining);
   134f0:	687a      	ldr	r2, [r7, #4]
   134f2:	693b      	ldr	r3, [r7, #16]
   134f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   134f8:	4619      	mov	r1, r3
   134fa:	4610      	mov	r0, r2
   134fc:	f012 fd72 	bl	25fe4 <var_setInt32>
   13500:	6178      	str	r0, [r7, #20]
   13502:	e010      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else if (e->index == 13)
   13504:	687b      	ldr	r3, [r7, #4]
   13506:	7e1b      	ldrb	r3, [r3, #24]
   13508:	2b0d      	cmp	r3, #13
   1350a:	d109      	bne.n	13520 <cosem_getCharge+0x1c8>
    {
        ret = var_setUInt16(&e->value, object->proportion);
   1350c:	687a      	ldr	r2, [r7, #4]
   1350e:	693b      	ldr	r3, [r7, #16]
   13510:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
   13514:	4619      	mov	r1, r3
   13516:	4610      	mov	r0, r2
   13518:	f012 fd12 	bl	25f40 <var_setUInt16>
   1351c:	6178      	str	r0, [r7, #20]
   1351e:	e002      	b.n	13526 <cosem_getCharge+0x1ce>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13520:	f44f 7381 	mov.w	r3, #258	; 0x102
   13524:	617b      	str	r3, [r7, #20]
    }
    return ret;
   13526:	697b      	ldr	r3, [r7, #20]
}
   13528:	4618      	mov	r0, r3
   1352a:	371c      	adds	r7, #28
   1352c:	46bd      	mov	sp, r7
   1352e:	bd90      	pop	{r4, r7, pc}

00013530 <cosem_getTokenGateway>:
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int cosem_getTokenGateway(
    gxValueEventArg *e)
{
   13530:	b590      	push	{r4, r7, lr}
   13532:	b089      	sub	sp, #36	; 0x24
   13534:	af00      	add	r7, sp, #0
   13536:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   13538:	2300      	movs	r3, #0
   1353a:	61bb      	str	r3, [r7, #24]
    gxByteBuffer *data;
    char* it;
    gxTokenGateway* object = (gxTokenGateway*)e->target;
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	695b      	ldr	r3, [r3, #20]
   13540:	617b      	str	r3, [r7, #20]
    switch (e->index)
   13542:	687b      	ldr	r3, [r7, #4]
   13544:	7e1b      	ldrb	r3, [r3, #24]
   13546:	3b02      	subs	r3, #2
   13548:	2b04      	cmp	r3, #4
   1354a:	f200 8105 	bhi.w	13758 <cosem_getTokenGateway+0x228>
   1354e:	a201      	add	r2, pc, #4	; (adr r2, 13554 <cosem_getTokenGateway+0x24>)
   13550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13554:	00013569 	.word	0x00013569
   13558:	000135a3 	.word	0x000135a3
   1355c:	000135b7 	.word	0x000135b7
   13560:	00013689 	.word	0x00013689
   13564:	0001369d 	.word	0x0001369d
    {
    case 2:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13568:	687b      	ldr	r3, [r7, #4]
   1356a:	4618      	mov	r0, r3
   1356c:	f7f9 fa1a 	bl	c9a4 <cosem_getByteBuffer>
   13570:	61b8      	str	r0, [r7, #24]
   13572:	69bb      	ldr	r3, [r7, #24]
   13574:	2b00      	cmp	r3, #0
   13576:	d001      	beq.n	1357c <cosem_getTokenGateway+0x4c>
        {
            return ret;
   13578:	69bb      	ldr	r3, [r7, #24]
   1357a:	e0f5      	b.n	13768 <cosem_getTokenGateway+0x238>
        }
        data = e->value.byteArr;
   1357c:	687b      	ldr	r3, [r7, #4]
   1357e:	689b      	ldr	r3, [r3, #8]
   13580:	613b      	str	r3, [r7, #16]
        ret = bb_set2(data, &object->token, 0, bb_size(&object->token));
   13582:	697b      	ldr	r3, [r7, #20]
   13584:	f103 0410 	add.w	r4, r3, #16
   13588:	697b      	ldr	r3, [r7, #20]
   1358a:	3310      	adds	r3, #16
   1358c:	4618      	mov	r0, r3
   1358e:	f7ef fb9b 	bl	2cc8 <bb_size>
   13592:	4603      	mov	r3, r0
   13594:	2200      	movs	r2, #0
   13596:	4621      	mov	r1, r4
   13598:	6938      	ldr	r0, [r7, #16]
   1359a:	f7f0 f841 	bl	3620 <bb_set2>
   1359e:	61b8      	str	r0, [r7, #24]
        break;
   135a0:	e0e1      	b.n	13766 <cosem_getTokenGateway+0x236>
    case 3:
        ret = var_setDateTimeAsOctetString(&e->value, &((gxTokenGateway*)e->target)->time);
   135a2:	687a      	ldr	r2, [r7, #4]
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	695b      	ldr	r3, [r3, #20]
   135a8:	331c      	adds	r3, #28
   135aa:	4619      	mov	r1, r3
   135ac:	4610      	mov	r0, r2
   135ae:	f014 fd9d 	bl	280ec <var_setDateTimeAsOctetString>
   135b2:	61b8      	str	r0, [r7, #24]
        break;
   135b4:	e0d7      	b.n	13766 <cosem_getTokenGateway+0x236>
    case 4:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	4618      	mov	r0, r3
   135ba:	f7f9 f9f3 	bl	c9a4 <cosem_getByteBuffer>
   135be:	61b8      	str	r0, [r7, #24]
   135c0:	69bb      	ldr	r3, [r7, #24]
   135c2:	2b00      	cmp	r3, #0
   135c4:	d001      	beq.n	135ca <cosem_getTokenGateway+0x9a>
        {
            return ret;
   135c6:	69bb      	ldr	r3, [r7, #24]
   135c8:	e0ce      	b.n	13768 <cosem_getTokenGateway+0x238>
        }
        data = e->value.byteArr;
   135ca:	687b      	ldr	r3, [r7, #4]
   135cc:	689b      	ldr	r3, [r3, #8]
   135ce:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	2201      	movs	r2, #1
   135d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   135d8:	687b      	ldr	r3, [r7, #4]
   135da:	2209      	movs	r2, #9
   135dc:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   135de:	2101      	movs	r1, #1
   135e0:	6938      	ldr	r0, [r7, #16]
   135e2:	f7ef fc17 	bl	2e14 <bb_setUInt8>
   135e6:	61b8      	str	r0, [r7, #24]
   135e8:	69bb      	ldr	r3, [r7, #24]
   135ea:	2b00      	cmp	r3, #0
   135ec:	d10a      	bne.n	13604 <cosem_getTokenGateway+0xd4>
            (ret = hlp_setObjectCount(object->descriptions.size, data)) != 0)
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
            return ret;
        }
        data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   135f4:	6939      	ldr	r1, [r7, #16]
   135f6:	4618      	mov	r0, r3
   135f8:	f00e f970 	bl	218dc <hlp_setObjectCount>
   135fc:	61b8      	str	r0, [r7, #24]
   135fe:	69bb      	ldr	r3, [r7, #24]
   13600:	2b00      	cmp	r3, #0
   13602:	d001      	beq.n	13608 <cosem_getTokenGateway+0xd8>
            (ret = hlp_setObjectCount(object->descriptions.size, data)) != 0)
        {
            return ret;
   13604:	69bb      	ldr	r3, [r7, #24]
   13606:	e0af      	b.n	13768 <cosem_getTokenGateway+0x238>
        }
        for (pos = 0; pos != object->descriptions.size; ++pos)
   13608:	2300      	movs	r3, #0
   1360a:	61fb      	str	r3, [r7, #28]
   1360c:	e032      	b.n	13674 <cosem_getTokenGateway+0x144>
        {
            if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0)
   1360e:	697b      	ldr	r3, [r7, #20]
   13610:	334c      	adds	r3, #76	; 0x4c
   13612:	f107 0208 	add.w	r2, r7, #8
   13616:	69f9      	ldr	r1, [r7, #28]
   13618:	4618      	mov	r0, r3
   1361a:	f7f9 f8ef 	bl	c7fc <arr_getByIndex>
   1361e:	61b8      	str	r0, [r7, #24]
   13620:	69bb      	ldr	r3, [r7, #24]
   13622:	2b00      	cmp	r3, #0
   13624:	d12e      	bne.n	13684 <cosem_getTokenGateway+0x154>
            {
                break;
            }
            int len = (int)strlen(it);
   13626:	68bb      	ldr	r3, [r7, #8]
   13628:	4618      	mov	r0, r3
   1362a:	f7ec fd79 	bl	120 <strlen>
   1362e:	4603      	mov	r3, r0
   13630:	60fb      	str	r3, [r7, #12]
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13632:	2109      	movs	r1, #9
   13634:	6938      	ldr	r0, [r7, #16]
   13636:	f7ef fbed 	bl	2e14 <bb_setUInt8>
   1363a:	61b8      	str	r0, [r7, #24]
   1363c:	69bb      	ldr	r3, [r7, #24]
   1363e:	2b00      	cmp	r3, #0
   13640:	f040 808e 	bne.w	13760 <cosem_getTokenGateway+0x230>
                (ret = hlp_setObjectCount(len, data)) != 0 ||
   13644:	68fb      	ldr	r3, [r7, #12]
            if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0)
            {
                break;
            }
            int len = (int)strlen(it);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13646:	6939      	ldr	r1, [r7, #16]
   13648:	4618      	mov	r0, r3
   1364a:	f00e f947 	bl	218dc <hlp_setObjectCount>
   1364e:	61b8      	str	r0, [r7, #24]
   13650:	69bb      	ldr	r3, [r7, #24]
   13652:	2b00      	cmp	r3, #0
   13654:	f040 8084 	bne.w	13760 <cosem_getTokenGateway+0x230>
                (ret = hlp_setObjectCount(len, data)) != 0 ||
                (ret = bb_set(data, (unsigned char*)it, len)) != 0)
   13658:	68bb      	ldr	r3, [r7, #8]
   1365a:	68fa      	ldr	r2, [r7, #12]
   1365c:	b292      	uxth	r2, r2
            {
                break;
            }
            int len = (int)strlen(it);
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(len, data)) != 0 ||
   1365e:	4619      	mov	r1, r3
   13660:	6938      	ldr	r0, [r7, #16]
   13662:	f7ef ff7d 	bl	3560 <bb_set>
   13666:	61b8      	str	r0, [r7, #24]
   13668:	69bb      	ldr	r3, [r7, #24]
   1366a:	2b00      	cmp	r3, #0
   1366c:	d178      	bne.n	13760 <cosem_getTokenGateway+0x230>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->descriptions.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->descriptions.size; ++pos)
   1366e:	69fb      	ldr	r3, [r7, #28]
   13670:	3301      	adds	r3, #1
   13672:	61fb      	str	r3, [r7, #28]
   13674:	697b      	ldr	r3, [r7, #20]
   13676:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   1367a:	461a      	mov	r2, r3
   1367c:	69fb      	ldr	r3, [r7, #28]
   1367e:	429a      	cmp	r2, r3
   13680:	d1c5      	bne.n	1360e <cosem_getTokenGateway+0xde>
                (ret = bb_set(data, (unsigned char*)it, len)) != 0)
            {
                break;
            }
        }
        break;
   13682:	e06d      	b.n	13760 <cosem_getTokenGateway+0x230>
        }
        for (pos = 0; pos != object->descriptions.size; ++pos)
        {
            if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0)
            {
                break;
   13684:	bf00      	nop
                (ret = bb_set(data, (unsigned char*)it, len)) != 0)
            {
                break;
            }
        }
        break;
   13686:	e06b      	b.n	13760 <cosem_getTokenGateway+0x230>
    case 5:
        ret = var_setEnum(&e->value, object->deliveryMethod);
   13688:	687a      	ldr	r2, [r7, #4]
   1368a:	697b      	ldr	r3, [r7, #20]
   1368c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   13690:	4619      	mov	r1, r3
   13692:	4610      	mov	r0, r2
   13694:	f012 fc2c 	bl	25ef0 <var_setEnum>
   13698:	61b8      	str	r0, [r7, #24]
        break;
   1369a:	e064      	b.n	13766 <cosem_getTokenGateway+0x236>
    case 6:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	4618      	mov	r0, r3
   136a0:	f7f9 f980 	bl	c9a4 <cosem_getByteBuffer>
   136a4:	61b8      	str	r0, [r7, #24]
   136a6:	69bb      	ldr	r3, [r7, #24]
   136a8:	2b00      	cmp	r3, #0
   136aa:	d001      	beq.n	136b0 <cosem_getTokenGateway+0x180>
        {
            return ret;
   136ac:	69bb      	ldr	r3, [r7, #24]
   136ae:	e05b      	b.n	13768 <cosem_getTokenGateway+0x238>
        }
        data = e->value.byteArr;
   136b0:	687b      	ldr	r3, [r7, #4]
   136b2:	689b      	ldr	r3, [r3, #8]
   136b4:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   136b6:	687b      	ldr	r3, [r7, #4]
   136b8:	2201      	movs	r2, #1
   136ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   136be:	687b      	ldr	r3, [r7, #4]
   136c0:	2209      	movs	r2, #9
   136c2:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   136c4:	2102      	movs	r1, #2
   136c6:	6938      	ldr	r0, [r7, #16]
   136c8:	f7ef fba4 	bl	2e14 <bb_setUInt8>
   136cc:	61b8      	str	r0, [r7, #24]
   136ce:	69bb      	ldr	r3, [r7, #24]
   136d0:	2b00      	cmp	r3, #0
   136d2:	d13f      	bne.n	13754 <cosem_getTokenGateway+0x224>
   136d4:	2102      	movs	r1, #2
   136d6:	6938      	ldr	r0, [r7, #16]
   136d8:	f7ef fb9c 	bl	2e14 <bb_setUInt8>
   136dc:	61b8      	str	r0, [r7, #24]
   136de:	69bb      	ldr	r3, [r7, #24]
   136e0:	2b00      	cmp	r3, #0
   136e2:	d137      	bne.n	13754 <cosem_getTokenGateway+0x224>
            (ret = bb_setUInt8(data, 2)) != 0 ||
   136e4:	2116      	movs	r1, #22
   136e6:	6938      	ldr	r0, [r7, #16]
   136e8:	f7ef fb94 	bl	2e14 <bb_setUInt8>
   136ec:	61b8      	str	r0, [r7, #24]
   136ee:	69bb      	ldr	r3, [r7, #24]
   136f0:	2b00      	cmp	r3, #0
   136f2:	d12f      	bne.n	13754 <cosem_getTokenGateway+0x224>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->status)) != 0 ||
   136f4:	697b      	ldr	r3, [r7, #20]
   136f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
        data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   136fa:	4619      	mov	r1, r3
   136fc:	6938      	ldr	r0, [r7, #16]
   136fe:	f7ef fb89 	bl	2e14 <bb_setUInt8>
   13702:	61b8      	str	r0, [r7, #24]
   13704:	69bb      	ldr	r3, [r7, #24]
   13706:	2b00      	cmp	r3, #0
   13708:	d124      	bne.n	13754 <cosem_getTokenGateway+0x224>
            (ret = bb_setUInt8(data, object->status)) != 0 ||
   1370a:	2104      	movs	r1, #4
   1370c:	6938      	ldr	r0, [r7, #16]
   1370e:	f7ef fb81 	bl	2e14 <bb_setUInt8>
   13712:	61b8      	str	r0, [r7, #24]
   13714:	69bb      	ldr	r3, [r7, #24]
   13716:	2b00      	cmp	r3, #0
   13718:	d11c      	bne.n	13754 <cosem_getTokenGateway+0x224>

            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
   1371a:	697b      	ldr	r3, [r7, #20]
   1371c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->status)) != 0 ||

            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13720:	6939      	ldr	r1, [r7, #16]
   13722:	4618      	mov	r0, r3
   13724:	f00e f8da 	bl	218dc <hlp_setObjectCount>
   13728:	61b8      	str	r0, [r7, #24]
   1372a:	69bb      	ldr	r3, [r7, #24]
   1372c:	2b00      	cmp	r3, #0
   1372e:	d111      	bne.n	13754 <cosem_getTokenGateway+0x224>
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
   13730:	697b      	ldr	r3, [r7, #20]
   13732:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   13734:	697b      	ldr	r3, [r7, #20]
   13736:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   1373a:	4618      	mov	r0, r3
   1373c:	f7ee fffc 	bl	2738 <ba_getByteCount>
   13740:	4603      	mov	r3, r0
            (ret = bb_setUInt8(data, 2)) != 0 ||
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->status)) != 0 ||

            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
   13742:	461a      	mov	r2, r3
   13744:	4621      	mov	r1, r4
   13746:	6938      	ldr	r0, [r7, #16]
   13748:	f7ef ff0a 	bl	3560 <bb_set>
   1374c:	61b8      	str	r0, [r7, #24]
   1374e:	69bb      	ldr	r3, [r7, #24]
   13750:	2b00      	cmp	r3, #0
   13752:	d007      	beq.n	13764 <cosem_getTokenGateway+0x234>
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
        {
            return ret;
   13754:	69bb      	ldr	r3, [r7, #24]
   13756:	e007      	b.n	13768 <cosem_getTokenGateway+0x238>
        }
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13758:	f44f 7381 	mov.w	r3, #258	; 0x102
   1375c:	61bb      	str	r3, [r7, #24]
        break;
   1375e:	e002      	b.n	13766 <cosem_getTokenGateway+0x236>
                (ret = bb_set(data, (unsigned char*)it, len)) != 0)
            {
                break;
            }
        }
        break;
   13760:	bf00      	nop
   13762:	e000      	b.n	13766 <cosem_getTokenGateway+0x236>
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
        {
            return ret;
        }
        break;
   13764:	bf00      	nop
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
   13766:	69bb      	ldr	r3, [r7, #24]
}
   13768:	4618      	mov	r0, r3
   1376a:	3724      	adds	r7, #36	; 0x24
   1376c:	46bd      	mov	sp, r7
   1376e:	bd90      	pop	{r4, r7, pc}

00013770 <cosem_getCredit>:
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_CREDIT
int cosem_getCredit(
    gxValueEventArg *e)
{
   13770:	b590      	push	{r4, r7, lr}
   13772:	b087      	sub	sp, #28
   13774:	af00      	add	r7, sp, #0
   13776:	6078      	str	r0, [r7, #4]
    gxCredit* object = (gxCredit*)e->target;
   13778:	687b      	ldr	r3, [r7, #4]
   1377a:	695b      	ldr	r3, [r3, #20]
   1377c:	613b      	str	r3, [r7, #16]
    int ret = 0;
   1377e:	2300      	movs	r3, #0
   13780:	617b      	str	r3, [r7, #20]
    if (e->index == 2)
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	7e1b      	ldrb	r3, [r3, #24]
   13786:	2b02      	cmp	r3, #2
   13788:	d108      	bne.n	1379c <cosem_getCredit+0x2c>
    {
        ret = var_setInt32(&e->value, object->currentCreditAmount);
   1378a:	687a      	ldr	r2, [r7, #4]
   1378c:	693b      	ldr	r3, [r7, #16]
   1378e:	691b      	ldr	r3, [r3, #16]
   13790:	4619      	mov	r1, r3
   13792:	4610      	mov	r0, r2
   13794:	f012 fc26 	bl	25fe4 <var_setInt32>
   13798:	6178      	str	r0, [r7, #20]
   1379a:	e0a8      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 3)
   1379c:	687b      	ldr	r3, [r7, #4]
   1379e:	7e1b      	ldrb	r3, [r3, #24]
   137a0:	2b03      	cmp	r3, #3
   137a2:	d108      	bne.n	137b6 <cosem_getCredit+0x46>
    {
        ret = var_setEnum(&e->value, object->type);
   137a4:	687a      	ldr	r2, [r7, #4]
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	7d1b      	ldrb	r3, [r3, #20]
   137aa:	4619      	mov	r1, r3
   137ac:	4610      	mov	r0, r2
   137ae:	f012 fb9f 	bl	25ef0 <var_setEnum>
   137b2:	6178      	str	r0, [r7, #20]
   137b4:	e09b      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 4)
   137b6:	687b      	ldr	r3, [r7, #4]
   137b8:	7e1b      	ldrb	r3, [r3, #24]
   137ba:	2b04      	cmp	r3, #4
   137bc:	d108      	bne.n	137d0 <cosem_getCredit+0x60>
    {
        ret = var_setUInt8(&e->value, object->priority);
   137be:	687a      	ldr	r2, [r7, #4]
   137c0:	693b      	ldr	r3, [r7, #16]
   137c2:	7d5b      	ldrb	r3, [r3, #21]
   137c4:	4619      	mov	r1, r3
   137c6:	4610      	mov	r0, r2
   137c8:	f012 fba6 	bl	25f18 <var_setUInt8>
   137cc:	6178      	str	r0, [r7, #20]
   137ce:	e08e      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 5)
   137d0:	687b      	ldr	r3, [r7, #4]
   137d2:	7e1b      	ldrb	r3, [r3, #24]
   137d4:	2b05      	cmp	r3, #5
   137d6:	d108      	bne.n	137ea <cosem_getCredit+0x7a>
    {
        ret = var_setInt32(&e->value, object->warningThreshold);
   137d8:	687a      	ldr	r2, [r7, #4]
   137da:	693b      	ldr	r3, [r7, #16]
   137dc:	699b      	ldr	r3, [r3, #24]
   137de:	4619      	mov	r1, r3
   137e0:	4610      	mov	r0, r2
   137e2:	f012 fbff 	bl	25fe4 <var_setInt32>
   137e6:	6178      	str	r0, [r7, #20]
   137e8:	e081      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 6)
   137ea:	687b      	ldr	r3, [r7, #4]
   137ec:	7e1b      	ldrb	r3, [r3, #24]
   137ee:	2b06      	cmp	r3, #6
   137f0:	d108      	bne.n	13804 <cosem_getCredit+0x94>
    {
        ret = var_setInt32(&e->value, object->limit);
   137f2:	687a      	ldr	r2, [r7, #4]
   137f4:	693b      	ldr	r3, [r7, #16]
   137f6:	69db      	ldr	r3, [r3, #28]
   137f8:	4619      	mov	r1, r3
   137fa:	4610      	mov	r0, r2
   137fc:	f012 fbf2 	bl	25fe4 <var_setInt32>
   13800:	6178      	str	r0, [r7, #20]
   13802:	e074      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 7)
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	7e1b      	ldrb	r3, [r3, #24]
   13808:	2b07      	cmp	r3, #7
   1380a:	d138      	bne.n	1387e <cosem_getCredit+0x10e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	4618      	mov	r0, r3
   13810:	f7f9 f8c8 	bl	c9a4 <cosem_getByteBuffer>
   13814:	6178      	str	r0, [r7, #20]
   13816:	697b      	ldr	r3, [r7, #20]
   13818:	2b00      	cmp	r3, #0
   1381a:	d001      	beq.n	13820 <cosem_getCredit+0xb0>
        {
            return ret;
   1381c:	697b      	ldr	r3, [r7, #20]
   1381e:	e067      	b.n	138f0 <cosem_getCredit+0x180>
        }
        gxByteBuffer *data = e->value.byteArr;
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	689b      	ldr	r3, [r3, #8]
   13824:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
   13826:	687b      	ldr	r3, [r7, #4]
   13828:	2201      	movs	r2, #1
   1382a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   1382e:	687b      	ldr	r3, [r7, #4]
   13830:	2209      	movs	r2, #9
   13832:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13834:	2104      	movs	r1, #4
   13836:	68f8      	ldr	r0, [r7, #12]
   13838:	f7ef faec 	bl	2e14 <bb_setUInt8>
   1383c:	6178      	str	r0, [r7, #20]
   1383e:	697b      	ldr	r3, [r7, #20]
   13840:	2b00      	cmp	r3, #0
   13842:	d11a      	bne.n	1387a <cosem_getCredit+0x10a>
            (ret = hlp_setObjectCount(object->creditConfiguration.size, data)) != 0 ||
   13844:	693b      	ldr	r3, [r7, #16]
   13846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13848:	68f9      	ldr	r1, [r7, #12]
   1384a:	4618      	mov	r0, r3
   1384c:	f00e f846 	bl	218dc <hlp_setObjectCount>
   13850:	6178      	str	r0, [r7, #20]
   13852:	697b      	ldr	r3, [r7, #20]
   13854:	2b00      	cmp	r3, #0
   13856:	d110      	bne.n	1387a <cosem_getCredit+0x10a>
            (ret = hlp_setObjectCount(object->creditConfiguration.size, data)) != 0 ||
            (ret = bb_set(data, object->creditConfiguration.data, ba_getByteCount(object->creditConfiguration.size))) != 0)
   13858:	693b      	ldr	r3, [r7, #16]
   1385a:	6a1c      	ldr	r4, [r3, #32]
   1385c:	693b      	ldr	r3, [r7, #16]
   1385e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   13860:	4618      	mov	r0, r3
   13862:	f7ee ff69 	bl	2738 <ba_getByteCount>
   13866:	4603      	mov	r3, r0
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = hlp_setObjectCount(object->creditConfiguration.size, data)) != 0 ||
   13868:	461a      	mov	r2, r3
   1386a:	4621      	mov	r1, r4
   1386c:	68f8      	ldr	r0, [r7, #12]
   1386e:	f7ef fe77 	bl	3560 <bb_set>
   13872:	6178      	str	r0, [r7, #20]
   13874:	697b      	ldr	r3, [r7, #20]
   13876:	2b00      	cmp	r3, #0
   13878:	d039      	beq.n	138ee <cosem_getCredit+0x17e>
            (ret = bb_set(data, object->creditConfiguration.data, ba_getByteCount(object->creditConfiguration.size))) != 0)
        {
            return ret;
   1387a:	697b      	ldr	r3, [r7, #20]
   1387c:	e038      	b.n	138f0 <cosem_getCredit+0x180>
        }
    }
    else if (e->index == 8)
   1387e:	687b      	ldr	r3, [r7, #4]
   13880:	7e1b      	ldrb	r3, [r3, #24]
   13882:	2b08      	cmp	r3, #8
   13884:	d109      	bne.n	1389a <cosem_getCredit+0x12a>
    {
        ret = var_setEnum(&e->value, object->status);
   13886:	687a      	ldr	r2, [r7, #4]
   13888:	693b      	ldr	r3, [r7, #16]
   1388a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1388e:	4619      	mov	r1, r3
   13890:	4610      	mov	r0, r2
   13892:	f012 fb2d 	bl	25ef0 <var_setEnum>
   13896:	6178      	str	r0, [r7, #20]
   13898:	e029      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 9)
   1389a:	687b      	ldr	r3, [r7, #4]
   1389c:	7e1b      	ldrb	r3, [r3, #24]
   1389e:	2b09      	cmp	r3, #9
   138a0:	d108      	bne.n	138b4 <cosem_getCredit+0x144>
    {
        ret = var_setInt32(&e->value, object->presetCreditAmount);
   138a2:	687a      	ldr	r2, [r7, #4]
   138a4:	693b      	ldr	r3, [r7, #16]
   138a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   138a8:	4619      	mov	r1, r3
   138aa:	4610      	mov	r0, r2
   138ac:	f012 fb9a 	bl	25fe4 <var_setInt32>
   138b0:	6178      	str	r0, [r7, #20]
   138b2:	e01c      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 10)
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	7e1b      	ldrb	r3, [r3, #24]
   138b8:	2b0a      	cmp	r3, #10
   138ba:	d108      	bne.n	138ce <cosem_getCredit+0x15e>
    {
        ret = var_setInt32(&e->value, object->creditAvailableThreshold);
   138bc:	687a      	ldr	r2, [r7, #4]
   138be:	693b      	ldr	r3, [r7, #16]
   138c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   138c2:	4619      	mov	r1, r3
   138c4:	4610      	mov	r0, r2
   138c6:	f012 fb8d 	bl	25fe4 <var_setInt32>
   138ca:	6178      	str	r0, [r7, #20]
   138cc:	e00f      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else if (e->index == 11)
   138ce:	687b      	ldr	r3, [r7, #4]
   138d0:	7e1b      	ldrb	r3, [r3, #24]
   138d2:	2b0b      	cmp	r3, #11
   138d4:	d108      	bne.n	138e8 <cosem_getCredit+0x178>
    {
        ret = var_setDateTime(&e->value, &object->period);
   138d6:	687a      	ldr	r2, [r7, #4]
   138d8:	693b      	ldr	r3, [r7, #16]
   138da:	3338      	adds	r3, #56	; 0x38
   138dc:	4619      	mov	r1, r3
   138de:	4610      	mov	r0, r2
   138e0:	f014 fb98 	bl	28014 <var_setDateTime>
   138e4:	6178      	str	r0, [r7, #20]
   138e6:	e002      	b.n	138ee <cosem_getCredit+0x17e>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   138e8:	f44f 7381 	mov.w	r3, #258	; 0x102
   138ec:	617b      	str	r3, [r7, #20]
    }
    return ret;
   138ee:	697b      	ldr	r3, [r7, #20]
}
   138f0:	4618      	mov	r0, r3
   138f2:	371c      	adds	r7, #28
   138f4:	46bd      	mov	sp, r7
   138f6:	bd90      	pop	{r4, r7, pc}

000138f8 <cosem_getAccount>:
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_ACCOUNT
int cosem_getAccount(
    gxValueEventArg *e)
{
   138f8:	b580      	push	{r7, lr}
   138fa:	b094      	sub	sp, #80	; 0x50
   138fc:	af00      	add	r7, sp, #0
   138fe:	6078      	str	r0, [r7, #4]
    int ret = 0, pos;
   13900:	2300      	movs	r3, #0
   13902:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* it;
    gxCreditChargeConfiguration *ccc;
    gxTokenGatewayConfiguration *gwc;
    gxAccount* object = (gxAccount*)e->target;
   13904:	687b      	ldr	r3, [r7, #4]
   13906:	695b      	ldr	r3, [r3, #20]
   13908:	647b      	str	r3, [r7, #68]	; 0x44
    if (e->index == 2)
   1390a:	687b      	ldr	r3, [r7, #4]
   1390c:	7e1b      	ldrb	r3, [r3, #24]
   1390e:	2b02      	cmp	r3, #2
   13910:	d150      	bne.n	139b4 <cosem_getAccount+0xbc>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13912:	687b      	ldr	r3, [r7, #4]
   13914:	4618      	mov	r0, r3
   13916:	f7f9 f845 	bl	c9a4 <cosem_getByteBuffer>
   1391a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1391e:	2b00      	cmp	r3, #0
   13920:	d001      	beq.n	13926 <cosem_getAccount+0x2e>
        {
            return ret;
   13922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13924:	e3a7      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	689b      	ldr	r3, [r3, #8]
   1392a:	643b      	str	r3, [r7, #64]	; 0x40
        e->byteArray = 1;
   1392c:	687b      	ldr	r3, [r7, #4]
   1392e:	2201      	movs	r2, #1
   13930:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13934:	687b      	ldr	r3, [r7, #4]
   13936:	2209      	movs	r2, #9
   13938:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1393a:	2102      	movs	r1, #2
   1393c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1393e:	f7ef fa69 	bl	2e14 <bb_setUInt8>
   13942:	64f8      	str	r0, [r7, #76]	; 0x4c
   13944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13946:	2b00      	cmp	r3, #0
   13948:	d132      	bne.n	139b0 <cosem_getAccount+0xb8>
   1394a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1394c:	2002      	movs	r0, #2
   1394e:	f00d ffc5 	bl	218dc <hlp_setObjectCount>
   13952:	64f8      	str	r0, [r7, #76]	; 0x4c
   13954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13956:	2b00      	cmp	r3, #0
   13958:	d12a      	bne.n	139b0 <cosem_getAccount+0xb8>
            (ret = hlp_setObjectCount(2, data)) != 0 ||
   1395a:	2116      	movs	r1, #22
   1395c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1395e:	f7ef fa59 	bl	2e14 <bb_setUInt8>
   13962:	64f8      	str	r0, [r7, #76]	; 0x4c
   13964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13966:	2b00      	cmp	r3, #0
   13968:	d122      	bne.n	139b0 <cosem_getAccount+0xb8>
            //payment mode
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->paymentMode & 0x3)) != 0 ||
   1396a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1396c:	7c1b      	ldrb	r3, [r3, #16]
   1396e:	f003 0303 	and.w	r3, r3, #3
   13972:	b2db      	uxtb	r3, r3
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
            (ret = hlp_setObjectCount(2, data)) != 0 ||
            //payment mode
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   13974:	4619      	mov	r1, r3
   13976:	6c38      	ldr	r0, [r7, #64]	; 0x40
   13978:	f7ef fa4c 	bl	2e14 <bb_setUInt8>
   1397c:	64f8      	str	r0, [r7, #76]	; 0x4c
   1397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13980:	2b00      	cmp	r3, #0
   13982:	d115      	bne.n	139b0 <cosem_getAccount+0xb8>
            (ret = bb_setUInt8(data, object->paymentMode & 0x3)) != 0 ||
   13984:	2116      	movs	r1, #22
   13986:	6c38      	ldr	r0, [r7, #64]	; 0x40
   13988:	f7ef fa44 	bl	2e14 <bb_setUInt8>
   1398c:	64f8      	str	r0, [r7, #76]	; 0x4c
   1398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13990:	2b00      	cmp	r3, #0
   13992:	d10d      	bne.n	139b0 <cosem_getAccount+0xb8>
            //account status
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->accountStatus & 0x3)) != 0)
   13994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13996:	7c5b      	ldrb	r3, [r3, #17]
   13998:	f003 0303 	and.w	r3, r3, #3
   1399c:	b2db      	uxtb	r3, r3
            (ret = hlp_setObjectCount(2, data)) != 0 ||
            //payment mode
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->paymentMode & 0x3)) != 0 ||
            //account status
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   1399e:	4619      	mov	r1, r3
   139a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
   139a2:	f7ef fa37 	bl	2e14 <bb_setUInt8>
   139a6:	64f8      	str	r0, [r7, #76]	; 0x4c
   139a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   139aa:	2b00      	cmp	r3, #0
   139ac:	f000 8362 	beq.w	14074 <cosem_getAccount+0x77c>
            (ret = bb_setUInt8(data, object->accountStatus & 0x3)) != 0)
        {
            return ret;
   139b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   139b2:	e360      	b.n	14076 <cosem_getAccount+0x77e>
        }
    }
    else if (e->index == 3)
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	7e1b      	ldrb	r3, [r3, #24]
   139b8:	2b03      	cmp	r3, #3
   139ba:	d108      	bne.n	139ce <cosem_getAccount+0xd6>
    {
        ret = var_setUInt8(&e->value, object->currentCreditInUse);
   139bc:	687a      	ldr	r2, [r7, #4]
   139be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   139c0:	7c9b      	ldrb	r3, [r3, #18]
   139c2:	4619      	mov	r1, r3
   139c4:	4610      	mov	r0, r2
   139c6:	f012 faa7 	bl	25f18 <var_setUInt8>
   139ca:	64f8      	str	r0, [r7, #76]	; 0x4c
   139cc:	e352      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 4)
   139ce:	687b      	ldr	r3, [r7, #4]
   139d0:	7e1b      	ldrb	r3, [r3, #24]
   139d2:	2b04      	cmp	r3, #4
   139d4:	d130      	bne.n	13a38 <cosem_getAccount+0x140>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	4618      	mov	r0, r3
   139da:	f7f8 ffe3 	bl	c9a4 <cosem_getByteBuffer>
   139de:	64f8      	str	r0, [r7, #76]	; 0x4c
   139e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   139e2:	2b00      	cmp	r3, #0
   139e4:	d001      	beq.n	139ea <cosem_getAccount+0xf2>
        {
            return ret;
   139e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   139e8:	e345      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   139ea:	687b      	ldr	r3, [r7, #4]
   139ec:	689b      	ldr	r3, [r3, #8]
   139ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        e->byteArray = 1;
   139f0:	687b      	ldr	r3, [r7, #4]
   139f2:	2201      	movs	r2, #1
   139f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	2209      	movs	r2, #9
   139fc:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   139fe:	2104      	movs	r1, #4
   13a00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13a02:	f7ef fa07 	bl	2e14 <bb_setUInt8>
   13a06:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	d112      	bne.n	13a34 <cosem_getAccount+0x13c>
   13a0e:	2108      	movs	r1, #8
   13a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13a12:	f7ef f9ff 	bl	2e14 <bb_setUInt8>
   13a16:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a1a:	2b00      	cmp	r3, #0
   13a1c:	d10a      	bne.n	13a34 <cosem_getAccount+0x13c>
            (ret = bb_setUInt8(data, 8)) != 0 ||
            (ret = bb_setUInt8(data, object->currentCreditStatus & 0xFF)) != 0)
   13a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a20:	7cdb      	ldrb	r3, [r3, #19]
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 8)) != 0 ||
   13a22:	4619      	mov	r1, r3
   13a24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13a26:	f7ef f9f5 	bl	2e14 <bb_setUInt8>
   13a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a2e:	2b00      	cmp	r3, #0
   13a30:	f000 8320 	beq.w	14074 <cosem_getAccount+0x77c>
            (ret = bb_setUInt8(data, object->currentCreditStatus & 0xFF)) != 0)
        {
            return ret;
   13a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a36:	e31e      	b.n	14076 <cosem_getAccount+0x77e>
        }
    }
    else if (e->index == 5)
   13a38:	687b      	ldr	r3, [r7, #4]
   13a3a:	7e1b      	ldrb	r3, [r3, #24]
   13a3c:	2b05      	cmp	r3, #5
   13a3e:	d108      	bne.n	13a52 <cosem_getAccount+0x15a>
    {
        ret = var_setInt32(&e->value, object->availableCredit);
   13a40:	687a      	ldr	r2, [r7, #4]
   13a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a44:	695b      	ldr	r3, [r3, #20]
   13a46:	4619      	mov	r1, r3
   13a48:	4610      	mov	r0, r2
   13a4a:	f012 facb 	bl	25fe4 <var_setInt32>
   13a4e:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a50:	e310      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 6)
   13a52:	687b      	ldr	r3, [r7, #4]
   13a54:	7e1b      	ldrb	r3, [r3, #24]
   13a56:	2b06      	cmp	r3, #6
   13a58:	d108      	bne.n	13a6c <cosem_getAccount+0x174>
    {
        ret = var_setInt32(&e->value, object->amountToClear);
   13a5a:	687a      	ldr	r2, [r7, #4]
   13a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a5e:	699b      	ldr	r3, [r3, #24]
   13a60:	4619      	mov	r1, r3
   13a62:	4610      	mov	r0, r2
   13a64:	f012 fabe 	bl	25fe4 <var_setInt32>
   13a68:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a6a:	e303      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 7)
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	7e1b      	ldrb	r3, [r3, #24]
   13a70:	2b07      	cmp	r3, #7
   13a72:	d108      	bne.n	13a86 <cosem_getAccount+0x18e>
    {
        ret = var_setInt32(&e->value, object->clearanceThreshold);
   13a74:	687a      	ldr	r2, [r7, #4]
   13a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a78:	69db      	ldr	r3, [r3, #28]
   13a7a:	4619      	mov	r1, r3
   13a7c:	4610      	mov	r0, r2
   13a7e:	f012 fab1 	bl	25fe4 <var_setInt32>
   13a82:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a84:	e2f6      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 8)
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	7e1b      	ldrb	r3, [r3, #24]
   13a8a:	2b08      	cmp	r3, #8
   13a8c:	d108      	bne.n	13aa0 <cosem_getAccount+0x1a8>
    {
        ret = var_setInt32(&e->value, object->aggregatedDebt);
   13a8e:	687a      	ldr	r2, [r7, #4]
   13a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13a92:	6a1b      	ldr	r3, [r3, #32]
   13a94:	4619      	mov	r1, r3
   13a96:	4610      	mov	r0, r2
   13a98:	f012 faa4 	bl	25fe4 <var_setInt32>
   13a9c:	64f8      	str	r0, [r7, #76]	; 0x4c
   13a9e:	e2e9      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 9)
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	7e1b      	ldrb	r3, [r3, #24]
   13aa4:	2b09      	cmp	r3, #9
   13aa6:	d15e      	bne.n	13b66 <cosem_getAccount+0x26e>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	4618      	mov	r0, r3
   13aac:	f7f8 ff7a 	bl	c9a4 <cosem_getByteBuffer>
   13ab0:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13ab4:	2b00      	cmp	r3, #0
   13ab6:	d001      	beq.n	13abc <cosem_getAccount+0x1c4>
        {
            return ret;
   13ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13aba:	e2dc      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	689b      	ldr	r3, [r3, #8]
   13ac0:	63bb      	str	r3, [r7, #56]	; 0x38
        e->byteArray = 1;
   13ac2:	687b      	ldr	r3, [r7, #4]
   13ac4:	2201      	movs	r2, #1
   13ac6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13aca:	687b      	ldr	r3, [r7, #4]
   13acc:	2209      	movs	r2, #9
   13ace:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13ad0:	2101      	movs	r1, #1
   13ad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13ad4:	f7ef f99e 	bl	2e14 <bb_setUInt8>
   13ad8:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13adc:	2b00      	cmp	r3, #0
   13ade:	d109      	bne.n	13af4 <cosem_getAccount+0x1fc>
            (ret = hlp_setObjectCount(object->creditReferences.size, data)) != 0)
   13ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13ae2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   13ae6:	4618      	mov	r0, r3
   13ae8:	f00d fef8 	bl	218dc <hlp_setObjectCount>
   13aec:	64f8      	str	r0, [r7, #76]	; 0x4c
   13aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13af0:	2b00      	cmp	r3, #0
   13af2:	d001      	beq.n	13af8 <cosem_getAccount+0x200>
            (ret = hlp_setObjectCount(object->creditReferences.size, data)) != 0)
        {
            return ret;
   13af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13af6:	e2be      	b.n	14076 <cosem_getAccount+0x77e>
        }
        for (pos = 0; pos != object->creditReferences.size; ++pos)
   13af8:	2300      	movs	r3, #0
   13afa:	64bb      	str	r3, [r7, #72]	; 0x48
   13afc:	e02c      	b.n	13b58 <cosem_getAccount+0x260>
        {
            if ((ret = arr_get(&object->creditReferences, (void**)&it)) != 0 ||
   13afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b00:	3324      	adds	r3, #36	; 0x24
   13b02:	f107 0220 	add.w	r2, r7, #32
   13b06:	4611      	mov	r1, r2
   13b08:	4618      	mov	r0, r3
   13b0a:	f7f8 fe55 	bl	c7b8 <arr_get>
   13b0e:	64f8      	str	r0, [r7, #76]	; 0x4c
   13b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b12:	2b00      	cmp	r3, #0
   13b14:	f040 82ae 	bne.w	14074 <cosem_getAccount+0x77c>
   13b18:	2109      	movs	r1, #9
   13b1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13b1c:	f7ef f97a 	bl	2e14 <bb_setUInt8>
   13b20:	64f8      	str	r0, [r7, #76]	; 0x4c
   13b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b24:	2b00      	cmp	r3, #0
   13b26:	f040 82a5 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13b2a:	2106      	movs	r1, #6
   13b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13b2e:	f7ef f971 	bl	2e14 <bb_setUInt8>
   13b32:	64f8      	str	r0, [r7, #76]	; 0x4c
   13b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b36:	2b00      	cmp	r3, #0
   13b38:	f040 829c 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, it, 6)) != 0)
   13b3c:	6a3b      	ldr	r3, [r7, #32]
        }
        for (pos = 0; pos != object->creditReferences.size; ++pos)
        {
            if ((ret = arr_get(&object->creditReferences, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   13b3e:	2206      	movs	r2, #6
   13b40:	4619      	mov	r1, r3
   13b42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13b44:	f7ef fd0c 	bl	3560 <bb_set>
   13b48:	64f8      	str	r0, [r7, #76]	; 0x4c
   13b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b4c:	2b00      	cmp	r3, #0
   13b4e:	f040 8291 	bne.w	14074 <cosem_getAccount+0x77c>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->creditReferences.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->creditReferences.size; ++pos)
   13b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13b54:	3301      	adds	r3, #1
   13b56:	64bb      	str	r3, [r7, #72]	; 0x48
   13b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   13b5c:	461a      	mov	r2, r3
   13b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13b60:	429a      	cmp	r2, r3
   13b62:	d1cc      	bne.n	13afe <cosem_getAccount+0x206>
   13b64:	e286      	b.n	14074 <cosem_getAccount+0x77c>
            {
                break;
            }
        }
    }
    else if (e->index == 10)
   13b66:	687b      	ldr	r3, [r7, #4]
   13b68:	7e1b      	ldrb	r3, [r3, #24]
   13b6a:	2b0a      	cmp	r3, #10
   13b6c:	d15e      	bne.n	13c2c <cosem_getAccount+0x334>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	4618      	mov	r0, r3
   13b72:	f7f8 ff17 	bl	c9a4 <cosem_getByteBuffer>
   13b76:	64f8      	str	r0, [r7, #76]	; 0x4c
   13b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	d001      	beq.n	13b82 <cosem_getAccount+0x28a>
        {
            return ret;
   13b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b80:	e279      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   13b82:	687b      	ldr	r3, [r7, #4]
   13b84:	689b      	ldr	r3, [r3, #8]
   13b86:	637b      	str	r3, [r7, #52]	; 0x34
        e->byteArray = 1;
   13b88:	687b      	ldr	r3, [r7, #4]
   13b8a:	2201      	movs	r2, #1
   13b8c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13b90:	687b      	ldr	r3, [r7, #4]
   13b92:	2209      	movs	r2, #9
   13b94:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13b96:	2101      	movs	r1, #1
   13b98:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13b9a:	f7ef f93b 	bl	2e14 <bb_setUInt8>
   13b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13ba2:	2b00      	cmp	r3, #0
   13ba4:	d109      	bne.n	13bba <cosem_getAccount+0x2c2>
            (ret = hlp_setObjectCount(object->chargeReferences.size, data)) != 0)
   13ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13ba8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   13bac:	4618      	mov	r0, r3
   13bae:	f00d fe95 	bl	218dc <hlp_setObjectCount>
   13bb2:	64f8      	str	r0, [r7, #76]	; 0x4c
   13bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13bb6:	2b00      	cmp	r3, #0
   13bb8:	d001      	beq.n	13bbe <cosem_getAccount+0x2c6>
            (ret = hlp_setObjectCount(object->chargeReferences.size, data)) != 0)
        {
            return ret;
   13bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13bbc:	e25b      	b.n	14076 <cosem_getAccount+0x77e>
        }
        for (pos = 0; pos != object->chargeReferences.size; ++pos)
   13bbe:	2300      	movs	r3, #0
   13bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   13bc2:	e02c      	b.n	13c1e <cosem_getAccount+0x326>
        {
            if ((ret = arr_get(&object->chargeReferences, (void**)&it)) != 0 ||
   13bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13bc6:	3334      	adds	r3, #52	; 0x34
   13bc8:	f107 0220 	add.w	r2, r7, #32
   13bcc:	4611      	mov	r1, r2
   13bce:	4618      	mov	r0, r3
   13bd0:	f7f8 fdf2 	bl	c7b8 <arr_get>
   13bd4:	64f8      	str	r0, [r7, #76]	; 0x4c
   13bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13bd8:	2b00      	cmp	r3, #0
   13bda:	f040 824b 	bne.w	14074 <cosem_getAccount+0x77c>
   13bde:	2109      	movs	r1, #9
   13be0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13be2:	f7ef f917 	bl	2e14 <bb_setUInt8>
   13be6:	64f8      	str	r0, [r7, #76]	; 0x4c
   13be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13bea:	2b00      	cmp	r3, #0
   13bec:	f040 8242 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13bf0:	2106      	movs	r1, #6
   13bf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13bf4:	f7ef f90e 	bl	2e14 <bb_setUInt8>
   13bf8:	64f8      	str	r0, [r7, #76]	; 0x4c
   13bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	f040 8239 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, it, 6)) != 0)
   13c02:	6a3b      	ldr	r3, [r7, #32]
        }
        for (pos = 0; pos != object->chargeReferences.size; ++pos)
        {
            if ((ret = arr_get(&object->chargeReferences, (void**)&it)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
   13c04:	2206      	movs	r2, #6
   13c06:	4619      	mov	r1, r3
   13c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13c0a:	f7ef fca9 	bl	3560 <bb_set>
   13c0e:	64f8      	str	r0, [r7, #76]	; 0x4c
   13c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c12:	2b00      	cmp	r3, #0
   13c14:	f040 822e 	bne.w	14074 <cosem_getAccount+0x77c>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->chargeReferences.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->chargeReferences.size; ++pos)
   13c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13c1a:	3301      	adds	r3, #1
   13c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   13c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13c20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   13c22:	461a      	mov	r2, r3
   13c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13c26:	429a      	cmp	r2, r3
   13c28:	d1cc      	bne.n	13bc4 <cosem_getAccount+0x2cc>
   13c2a:	e223      	b.n	14074 <cosem_getAccount+0x77c>
            {
                break;
            }
        }
    }
    else if (e->index == 11)
   13c2c:	687b      	ldr	r3, [r7, #4]
   13c2e:	7e1b      	ldrb	r3, [r3, #24]
   13c30:	2b0b      	cmp	r3, #11
   13c32:	f040 80b6 	bne.w	13da2 <cosem_getAccount+0x4aa>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13c36:	687b      	ldr	r3, [r7, #4]
   13c38:	4618      	mov	r0, r3
   13c3a:	f7f8 feb3 	bl	c9a4 <cosem_getByteBuffer>
   13c3e:	64f8      	str	r0, [r7, #76]	; 0x4c
   13c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c42:	2b00      	cmp	r3, #0
   13c44:	d001      	beq.n	13c4a <cosem_getAccount+0x352>
        {
            return ret;
   13c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c48:	e215      	b.n	14076 <cosem_getAccount+0x77e>
        }
        bitArray ba;
        ba_init(&ba);
   13c4a:	f107 030c 	add.w	r3, r7, #12
   13c4e:	4618      	mov	r0, r3
   13c50:	f7ee fdd2 	bl	27f8 <ba_init>
        gxByteBuffer *data = e->value.byteArr;
   13c54:	687b      	ldr	r3, [r7, #4]
   13c56:	689b      	ldr	r3, [r3, #8]
   13c58:	633b      	str	r3, [r7, #48]	; 0x30
        e->byteArray = 1;
   13c5a:	687b      	ldr	r3, [r7, #4]
   13c5c:	2201      	movs	r2, #1
   13c5e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13c62:	687b      	ldr	r3, [r7, #4]
   13c64:	2209      	movs	r2, #9
   13c66:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13c68:	2101      	movs	r1, #1
   13c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13c6c:	f7ef f8d2 	bl	2e14 <bb_setUInt8>
   13c70:	64f8      	str	r0, [r7, #76]	; 0x4c
   13c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c74:	2b00      	cmp	r3, #0
   13c76:	d10a      	bne.n	13c8e <cosem_getAccount+0x396>
            (ret = hlp_setObjectCount(object->creditChargeConfigurations.size, data)) != 0)
   13c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13c7a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
        bitArray ba;
        ba_init(&ba);
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13c80:	4618      	mov	r0, r3
   13c82:	f00d fe2b 	bl	218dc <hlp_setObjectCount>
   13c86:	64f8      	str	r0, [r7, #76]	; 0x4c
   13c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c8a:	2b00      	cmp	r3, #0
   13c8c:	d001      	beq.n	13c92 <cosem_getAccount+0x39a>
            (ret = hlp_setObjectCount(object->creditChargeConfigurations.size, data)) != 0)
        {
            return ret;
   13c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13c90:	e1f1      	b.n	14076 <cosem_getAccount+0x77e>
        }
        for (pos = 0; pos != object->creditChargeConfigurations.size; ++pos)
   13c92:	2300      	movs	r3, #0
   13c94:	64bb      	str	r3, [r7, #72]	; 0x48
   13c96:	e07b      	b.n	13d90 <cosem_getAccount+0x498>
        {
            if ((ret = arr_get(&object->creditChargeConfigurations, (void**)&ccc)) != 0 ||
   13c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13c9a:	3344      	adds	r3, #68	; 0x44
   13c9c:	f107 021c 	add.w	r2, r7, #28
   13ca0:	4611      	mov	r1, r2
   13ca2:	4618      	mov	r0, r3
   13ca4:	f7f8 fd88 	bl	c7b8 <arr_get>
   13ca8:	64f8      	str	r0, [r7, #76]	; 0x4c
   13caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13cac:	2b00      	cmp	r3, #0
   13cae:	f040 81e1 	bne.w	14074 <cosem_getAccount+0x77c>
   13cb2:	2102      	movs	r1, #2
   13cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13cb6:	f7ef f8ad 	bl	2e14 <bb_setUInt8>
   13cba:	64f8      	str	r0, [r7, #76]	; 0x4c
   13cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13cbe:	2b00      	cmp	r3, #0
   13cc0:	f040 81d8 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13cc6:	2003      	movs	r0, #3
   13cc8:	f00d fe08 	bl	218dc <hlp_setObjectCount>
   13ccc:	64f8      	str	r0, [r7, #76]	; 0x4c
   13cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13cd0:	2b00      	cmp	r3, #0
   13cd2:	f040 81cf 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = hlp_setObjectCount(3, data)) != 0 ||
   13cd6:	2109      	movs	r1, #9
   13cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13cda:	f7ef f89b 	bl	2e14 <bb_setUInt8>
   13cde:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	f040 81c6 	bne.w	14074 <cosem_getAccount+0x77c>
                //credit reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13cea:	2006      	movs	r0, #6
   13cec:	f00d fdf6 	bl	218dc <hlp_setObjectCount>
   13cf0:	64f8      	str	r0, [r7, #76]	; 0x4c
   13cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	f040 81bd 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, ccc->creditReference, 6)) != 0 ||
   13cfa:	69fb      	ldr	r3, [r7, #28]
            if ((ret = arr_get(&object->creditChargeConfigurations, (void**)&ccc)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = hlp_setObjectCount(3, data)) != 0 ||
                //credit reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
   13cfc:	2206      	movs	r2, #6
   13cfe:	4619      	mov	r1, r3
   13d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d02:	f7ef fc2d 	bl	3560 <bb_set>
   13d06:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d0a:	2b00      	cmp	r3, #0
   13d0c:	f040 81b2 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_set(data, ccc->creditReference, 6)) != 0 ||
   13d10:	2109      	movs	r1, #9
   13d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d14:	f7ef f87e 	bl	2e14 <bb_setUInt8>
   13d18:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d1c:	2b00      	cmp	r3, #0
   13d1e:	f040 81a9 	bne.w	14074 <cosem_getAccount+0x77c>
                //charge reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13d24:	2006      	movs	r0, #6
   13d26:	f00d fdd9 	bl	218dc <hlp_setObjectCount>
   13d2a:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d2e:	2b00      	cmp	r3, #0
   13d30:	f040 81a0 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, ccc->chargeReference, 6)) != 0 ||
   13d34:	69fb      	ldr	r3, [r7, #28]
   13d36:	3306      	adds	r3, #6
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, ccc->creditReference, 6)) != 0 ||
                //charge reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
   13d38:	2206      	movs	r2, #6
   13d3a:	4619      	mov	r1, r3
   13d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d3e:	f7ef fc0f 	bl	3560 <bb_set>
   13d42:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d46:	2b00      	cmp	r3, #0
   13d48:	f040 8194 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_set(data, ccc->chargeReference, 6)) != 0 ||
   13d4c:	2104      	movs	r1, #4
   13d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d50:	f7ef f860 	bl	2e14 <bb_setUInt8>
   13d54:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d58:	2b00      	cmp	r3, #0
   13d5a:	f040 818b 	bne.w	14074 <cosem_getAccount+0x77c>
                //collection configuration
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13d5e:	2103      	movs	r1, #3
   13d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d62:	f7ef f857 	bl	2e14 <bb_setUInt8>
   13d66:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	f040 8182 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, 3)) != 0 ||
                (ret = bb_setUInt8(data, (unsigned char)(ccc->collectionConfiguration << 5))) != 0)
   13d70:	69fb      	ldr	r3, [r7, #28]
   13d72:	7b1b      	ldrb	r3, [r3, #12]
   13d74:	015b      	lsls	r3, r3, #5
   13d76:	b2db      	uxtb	r3, r3
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, ccc->chargeReference, 6)) != 0 ||
                //collection configuration
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 3)) != 0 ||
   13d78:	4619      	mov	r1, r3
   13d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13d7c:	f7ef f84a 	bl	2e14 <bb_setUInt8>
   13d80:	64f8      	str	r0, [r7, #76]	; 0x4c
   13d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13d84:	2b00      	cmp	r3, #0
   13d86:	f040 8175 	bne.w	14074 <cosem_getAccount+0x77c>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->creditChargeConfigurations.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->creditChargeConfigurations.size; ++pos)
   13d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13d8c:	3301      	adds	r3, #1
   13d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   13d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13d92:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   13d96:	461a      	mov	r2, r3
   13d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13d9a:	429a      	cmp	r2, r3
   13d9c:	f47f af7c 	bne.w	13c98 <cosem_getAccount+0x3a0>
   13da0:	e168      	b.n	14074 <cosem_getAccount+0x77c>
            {
                break;
            }
        }
    }
    else if (e->index == 12)
   13da2:	687b      	ldr	r3, [r7, #4]
   13da4:	7e1b      	ldrb	r3, [r3, #24]
   13da6:	2b0c      	cmp	r3, #12
   13da8:	f040 8087 	bne.w	13eba <cosem_getAccount+0x5c2>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13dac:	687b      	ldr	r3, [r7, #4]
   13dae:	4618      	mov	r0, r3
   13db0:	f7f8 fdf8 	bl	c9a4 <cosem_getByteBuffer>
   13db4:	64f8      	str	r0, [r7, #76]	; 0x4c
   13db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13db8:	2b00      	cmp	r3, #0
   13dba:	d001      	beq.n	13dc0 <cosem_getAccount+0x4c8>
        {
            return ret;
   13dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13dbe:	e15a      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   13dc0:	687b      	ldr	r3, [r7, #4]
   13dc2:	689b      	ldr	r3, [r3, #8]
   13dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        e->byteArray = 1;
   13dc6:	687b      	ldr	r3, [r7, #4]
   13dc8:	2201      	movs	r2, #1
   13dca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13dce:	687b      	ldr	r3, [r7, #4]
   13dd0:	2209      	movs	r2, #9
   13dd2:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13dd4:	2101      	movs	r1, #1
   13dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13dd8:	f7ef f81c 	bl	2e14 <bb_setUInt8>
   13ddc:	64f8      	str	r0, [r7, #76]	; 0x4c
   13dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13de0:	2b00      	cmp	r3, #0
   13de2:	d10a      	bne.n	13dfa <cosem_getAccount+0x502>
            (ret = hlp_setObjectCount(object->tokenGatewayConfigurations.size, data)) != 0)
   13de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13dec:	4618      	mov	r0, r3
   13dee:	f00d fd75 	bl	218dc <hlp_setObjectCount>
   13df2:	64f8      	str	r0, [r7, #76]	; 0x4c
   13df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13df6:	2b00      	cmp	r3, #0
   13df8:	d001      	beq.n	13dfe <cosem_getAccount+0x506>
            (ret = hlp_setObjectCount(object->tokenGatewayConfigurations.size, data)) != 0)
        {
            return ret;
   13dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13dfc:	e13b      	b.n	14076 <cosem_getAccount+0x77e>
        }
        for (pos = 0; pos != object->tokenGatewayConfigurations.size; ++pos)
   13dfe:	2300      	movs	r3, #0
   13e00:	64bb      	str	r3, [r7, #72]	; 0x48
   13e02:	e052      	b.n	13eaa <cosem_getAccount+0x5b2>
        {
            if ((ret = arr_get(&object->tokenGatewayConfigurations, (void**)&gwc)) != 0 ||
   13e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13e06:	3354      	adds	r3, #84	; 0x54
   13e08:	f107 0218 	add.w	r2, r7, #24
   13e0c:	4611      	mov	r1, r2
   13e0e:	4618      	mov	r0, r3
   13e10:	f7f8 fcd2 	bl	c7b8 <arr_get>
   13e14:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e18:	2b00      	cmp	r3, #0
   13e1a:	f040 812b 	bne.w	14074 <cosem_getAccount+0x77c>
   13e1e:	2102      	movs	r1, #2
   13e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e22:	f7ee fff7 	bl	2e14 <bb_setUInt8>
   13e26:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	f040 8122 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13e32:	2002      	movs	r0, #2
   13e34:	f00d fd52 	bl	218dc <hlp_setObjectCount>
   13e38:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	f040 8119 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = hlp_setObjectCount(2, data)) != 0 ||
   13e42:	2109      	movs	r1, #9
   13e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e46:	f7ee ffe5 	bl	2e14 <bb_setUInt8>
   13e4a:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e4e:	2b00      	cmp	r3, #0
   13e50:	f040 8110 	bne.w	14074 <cosem_getAccount+0x77c>
                //credit reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13e56:	2006      	movs	r0, #6
   13e58:	f00d fd40 	bl	218dc <hlp_setObjectCount>
   13e5c:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e60:	2b00      	cmp	r3, #0
   13e62:	f040 8107 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, gwc->creditReference, 6)) != 0 ||
   13e66:	69bb      	ldr	r3, [r7, #24]
            if ((ret = arr_get(&object->tokenGatewayConfigurations, (void**)&gwc)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
                (ret = hlp_setObjectCount(2, data)) != 0 ||
                //credit reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
   13e68:	2206      	movs	r2, #6
   13e6a:	4619      	mov	r1, r3
   13e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e6e:	f7ef fb77 	bl	3560 <bb_set>
   13e72:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e76:	2b00      	cmp	r3, #0
   13e78:	f040 80fc 	bne.w	14074 <cosem_getAccount+0x77c>
                (ret = bb_set(data, gwc->creditReference, 6)) != 0 ||
   13e7c:	2111      	movs	r1, #17
   13e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e80:	f7ee ffc8 	bl	2e14 <bb_setUInt8>
   13e84:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e88:	2b00      	cmp	r3, #0
   13e8a:	f040 80f3 	bne.w	14074 <cosem_getAccount+0x77c>
                //token proportion
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                (ret = bb_setUInt8(data, gwc->tokenProportion)) != 0)
   13e8e:	69bb      	ldr	r3, [r7, #24]
   13e90:	799b      	ldrb	r3, [r3, #6]
                //credit reference
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(6, data)) != 0 ||
                (ret = bb_set(data, gwc->creditReference, 6)) != 0 ||
                //token proportion
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   13e92:	4619      	mov	r1, r3
   13e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e96:	f7ee ffbd 	bl	2e14 <bb_setUInt8>
   13e9a:	64f8      	str	r0, [r7, #76]	; 0x4c
   13e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	f040 80e8 	bne.w	14074 <cosem_getAccount+0x77c>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->tokenGatewayConfigurations.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->tokenGatewayConfigurations.size; ++pos)
   13ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13ea6:	3301      	adds	r3, #1
   13ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   13eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   13eb0:	461a      	mov	r2, r3
   13eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13eb4:	429a      	cmp	r2, r3
   13eb6:	d1a5      	bne.n	13e04 <cosem_getAccount+0x50c>
   13eb8:	e0dc      	b.n	14074 <cosem_getAccount+0x77c>
            {
                break;
            }
        }
    }
    else if (e->index == 13)
   13eba:	687b      	ldr	r3, [r7, #4]
   13ebc:	7e1b      	ldrb	r3, [r3, #24]
   13ebe:	2b0d      	cmp	r3, #13
   13ec0:	d108      	bne.n	13ed4 <cosem_getAccount+0x5dc>
    {
        ret = var_setDateTime(&e->value, &object->accountActivationTime);
   13ec2:	687a      	ldr	r2, [r7, #4]
   13ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13ec6:	3364      	adds	r3, #100	; 0x64
   13ec8:	4619      	mov	r1, r3
   13eca:	4610      	mov	r0, r2
   13ecc:	f014 f8a2 	bl	28014 <var_setDateTime>
   13ed0:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ed2:	e0cf      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 14)
   13ed4:	687b      	ldr	r3, [r7, #4]
   13ed6:	7e1b      	ldrb	r3, [r3, #24]
   13ed8:	2b0e      	cmp	r3, #14
   13eda:	d108      	bne.n	13eee <cosem_getAccount+0x5f6>
    {
        ret = var_setDateTime(&e->value, &object->accountClosureTime);
   13edc:	687a      	ldr	r2, [r7, #4]
   13ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13ee0:	3394      	adds	r3, #148	; 0x94
   13ee2:	4619      	mov	r1, r3
   13ee4:	4610      	mov	r0, r2
   13ee6:	f014 f895 	bl	28014 <var_setDateTime>
   13eea:	64f8      	str	r0, [r7, #76]	; 0x4c
   13eec:	e0c2      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 15)
   13eee:	687b      	ldr	r3, [r7, #4]
   13ef0:	7e1b      	ldrb	r3, [r3, #24]
   13ef2:	2b0f      	cmp	r3, #15
   13ef4:	f040 8083 	bne.w	13ffe <cosem_getAccount+0x706>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	4618      	mov	r0, r3
   13efc:	f7f8 fd52 	bl	c9a4 <cosem_getByteBuffer>
   13f00:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f04:	2b00      	cmp	r3, #0
   13f06:	d001      	beq.n	13f0c <cosem_getAccount+0x614>
        {
            return ret;
   13f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f0a:	e0b4      	b.n	14076 <cosem_getAccount+0x77e>
        }
        gxByteBuffer *data = e->value.byteArr;
   13f0c:	687b      	ldr	r3, [r7, #4]
   13f0e:	689b      	ldr	r3, [r3, #8]
   13f10:	62bb      	str	r3, [r7, #40]	; 0x28
        e->byteArray = 1;
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	2201      	movs	r2, #1
   13f16:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   13f1a:	687b      	ldr	r3, [r7, #4]
   13f1c:	2209      	movs	r2, #9
   13f1e:	701a      	strb	r2, [r3, #0]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13f20:	2102      	movs	r1, #2
   13f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13f24:	f7ee ff76 	bl	2e14 <bb_setUInt8>
   13f28:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f2c:	2b00      	cmp	r3, #0
   13f2e:	d10f      	bne.n	13f50 <cosem_getAccount+0x658>
   13f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13f32:	2003      	movs	r0, #3
   13f34:	f00d fcd2 	bl	218dc <hlp_setObjectCount>
   13f38:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f3c:	2b00      	cmp	r3, #0
   13f3e:	d107      	bne.n	13f50 <cosem_getAccount+0x658>
            (ret = hlp_setObjectCount(3, data)) != 0 ||
   13f40:	210c      	movs	r1, #12
   13f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13f44:	f7ee ff66 	bl	2e14 <bb_setUInt8>
   13f48:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d001      	beq.n	13f54 <cosem_getAccount+0x65c>
            //Name
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING_UTF8)) != 0)
        {
            return ret;
   13f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f52:	e090      	b.n	14076 <cosem_getAccount+0x77e>
        }
        if (object->currency.name == NULL)
   13f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13f56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   13f5a:	2b00      	cmp	r3, #0
   13f5c:	d109      	bne.n	13f72 <cosem_getAccount+0x67a>
        {
            if ((ret = bb_setUInt8(data, 0)) != 0)
   13f5e:	2100      	movs	r1, #0
   13f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13f62:	f7ee ff57 	bl	2e14 <bb_setUInt8>
   13f66:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f6a:	2b00      	cmp	r3, #0
   13f6c:	d01f      	beq.n	13fae <cosem_getAccount+0x6b6>
            {
                return ret;
   13f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f70:	e081      	b.n	14076 <cosem_getAccount+0x77e>
            }
        }
        else
        {
            unsigned int len = (unsigned int)strlen(object->currency.name);
   13f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   13f78:	4618      	mov	r0, r3
   13f7a:	f7ec f8d1 	bl	120 <strlen>
   13f7e:	6278      	str	r0, [r7, #36]	; 0x24
            if ((ret = hlp_setObjectCount(len, data)) != 0 ||
   13f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13f84:	f00d fcaa 	bl	218dc <hlp_setObjectCount>
   13f88:	64f8      	str	r0, [r7, #76]	; 0x4c
   13f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d10c      	bne.n	13faa <cosem_getAccount+0x6b2>
                (ret = bb_set(data, (unsigned char*)object->currency.name, len)) != 0)
   13f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13f92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   13f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13f98:	b292      	uxth	r2, r2
            }
        }
        else
        {
            unsigned int len = (unsigned int)strlen(object->currency.name);
            if ((ret = hlp_setObjectCount(len, data)) != 0 ||
   13f9a:	4619      	mov	r1, r3
   13f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13f9e:	f7ef fadf 	bl	3560 <bb_set>
   13fa2:	64f8      	str	r0, [r7, #76]	; 0x4c
   13fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13fa6:	2b00      	cmp	r3, #0
   13fa8:	d001      	beq.n	13fae <cosem_getAccount+0x6b6>
                (ret = bb_set(data, (unsigned char*)object->currency.name, len)) != 0)
            {
                return ret;
   13faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13fac:	e063      	b.n	14076 <cosem_getAccount+0x77e>
            }
        }
        //scale
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13fae:	210f      	movs	r1, #15
   13fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13fb2:	f7ee ff2f 	bl	2e14 <bb_setUInt8>
   13fb6:	64f8      	str	r0, [r7, #76]	; 0x4c
   13fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d11d      	bne.n	13ffa <cosem_getAccount+0x702>
            (ret = bb_setUInt8(data, object->currency.scale)) != 0 ||
   13fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13fc0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
            {
                return ret;
            }
        }
        //scale
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13fc4:	4619      	mov	r1, r3
   13fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13fc8:	f7ee ff24 	bl	2e14 <bb_setUInt8>
   13fcc:	64f8      	str	r0, [r7, #76]	; 0x4c
   13fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13fd0:	2b00      	cmp	r3, #0
   13fd2:	d112      	bne.n	13ffa <cosem_getAccount+0x702>
            (ret = bb_setUInt8(data, object->currency.scale)) != 0 ||
   13fd4:	2116      	movs	r1, #22
   13fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13fd8:	f7ee ff1c 	bl	2e14 <bb_setUInt8>
   13fdc:	64f8      	str	r0, [r7, #76]	; 0x4c
   13fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	d10a      	bne.n	13ffa <cosem_getAccount+0x702>
            //unit
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
            (ret = bb_setUInt8(data, object->currency.unit)) != 0)
   13fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13fe6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
        }
        //scale
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
            (ret = bb_setUInt8(data, object->currency.scale)) != 0 ||
            //unit
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ENUM)) != 0 ||
   13fea:	4619      	mov	r1, r3
   13fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13fee:	f7ee ff11 	bl	2e14 <bb_setUInt8>
   13ff2:	64f8      	str	r0, [r7, #76]	; 0x4c
   13ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13ff6:	2b00      	cmp	r3, #0
   13ff8:	d03c      	beq.n	14074 <cosem_getAccount+0x77c>
            (ret = bb_setUInt8(data, object->currency.unit)) != 0)
        {
            return ret;
   13ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13ffc:	e03b      	b.n	14076 <cosem_getAccount+0x77e>
        }
    }
    else if (e->index == 16)
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	7e1b      	ldrb	r3, [r3, #24]
   14002:	2b10      	cmp	r3, #16
   14004:	d109      	bne.n	1401a <cosem_getAccount+0x722>
    {
        ret = var_setInt32(&e->value, object->lowCreditThreshold);
   14006:	687a      	ldr	r2, [r7, #4]
   14008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1400a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   1400e:	4619      	mov	r1, r3
   14010:	4610      	mov	r0, r2
   14012:	f011 ffe7 	bl	25fe4 <var_setInt32>
   14016:	64f8      	str	r0, [r7, #76]	; 0x4c
   14018:	e02c      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 17)
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	7e1b      	ldrb	r3, [r3, #24]
   1401e:	2b11      	cmp	r3, #17
   14020:	d109      	bne.n	14036 <cosem_getAccount+0x73e>
    {
        ret = var_setInt32(&e->value, object->nextCreditAvailableThreshold);
   14022:	687a      	ldr	r2, [r7, #4]
   14024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14026:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   1402a:	4619      	mov	r1, r3
   1402c:	4610      	mov	r0, r2
   1402e:	f011 ffd9 	bl	25fe4 <var_setInt32>
   14032:	64f8      	str	r0, [r7, #76]	; 0x4c
   14034:	e01e      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 18)
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	7e1b      	ldrb	r3, [r3, #24]
   1403a:	2b12      	cmp	r3, #18
   1403c:	d109      	bne.n	14052 <cosem_getAccount+0x75a>
    {
        ret = var_setUInt16(&e->value, object->maxProvision);
   1403e:	687a      	ldr	r2, [r7, #4]
   14040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14042:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
   14046:	4619      	mov	r1, r3
   14048:	4610      	mov	r0, r2
   1404a:	f011 ff79 	bl	25f40 <var_setUInt16>
   1404e:	64f8      	str	r0, [r7, #76]	; 0x4c
   14050:	e010      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else if (e->index == 19)
   14052:	687b      	ldr	r3, [r7, #4]
   14054:	7e1b      	ldrb	r3, [r3, #24]
   14056:	2b13      	cmp	r3, #19
   14058:	d109      	bne.n	1406e <cosem_getAccount+0x776>
    {
        ret = var_setInt32(&e->value, object->maxProvisionPeriod);
   1405a:	687a      	ldr	r2, [r7, #4]
   1405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1405e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   14062:	4619      	mov	r1, r3
   14064:	4610      	mov	r0, r2
   14066:	f011 ffbd 	bl	25fe4 <var_setInt32>
   1406a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1406c:	e002      	b.n	14074 <cosem_getAccount+0x77c>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1406e:	f44f 7381 	mov.w	r3, #258	; 0x102
   14072:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return ret;
   14074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   14076:	4618      	mov	r0, r3
   14078:	3750      	adds	r7, #80	; 0x50
   1407a:	46bd      	mov	sp, r7
   1407c:	bd80      	pop	{r7, pc}
   1407e:	bf00      	nop

00014080 <cosem_getCompactData>:

#ifndef DLMS_IGNORE_COMPACT_DATA
int cosem_getCompactData(
    dlmsSettings* settings,
    gxValueEventArg *e)
{
   14080:	b580      	push	{r7, lr}
   14082:	b086      	sub	sp, #24
   14084:	af00      	add	r7, sp, #0
   14086:	6078      	str	r0, [r7, #4]
   14088:	6039      	str	r1, [r7, #0]
    gxByteBuffer* data;
    gxCompactData* object = (gxCompactData*)e->target;
   1408a:	683b      	ldr	r3, [r7, #0]
   1408c:	695b      	ldr	r3, [r3, #20]
   1408e:	613b      	str	r3, [r7, #16]
    int ret;
    switch (e->index)
   14090:	683b      	ldr	r3, [r7, #0]
   14092:	7e1b      	ldrb	r3, [r3, #24]
   14094:	3b02      	subs	r3, #2
   14096:	2b04      	cmp	r3, #4
   14098:	f200 8087 	bhi.w	141aa <cosem_getCompactData+0x12a>
   1409c:	a201      	add	r2, pc, #4	; (adr r2, 140a4 <cosem_getCompactData+0x24>)
   1409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   140a2:	bf00      	nop
   140a4:	000140b9 	.word	0x000140b9
   140a8:	00014103 	.word	0x00014103
   140ac:	00014139 	.word	0x00014139
   140b0:	0001414d 	.word	0x0001414d
   140b4:	00014197 	.word	0x00014197
    {
    case 2:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   140b8:	683b      	ldr	r3, [r7, #0]
   140ba:	4618      	mov	r0, r3
   140bc:	f7f8 fc72 	bl	c9a4 <cosem_getByteBuffer>
   140c0:	6178      	str	r0, [r7, #20]
   140c2:	697b      	ldr	r3, [r7, #20]
   140c4:	2b00      	cmp	r3, #0
   140c6:	d001      	beq.n	140cc <cosem_getCompactData+0x4c>
        {
            return ret;
   140c8:	697b      	ldr	r3, [r7, #20]
   140ca:	e072      	b.n	141b2 <cosem_getCompactData+0x132>
        }
        data = e->value.byteArr;
   140cc:	683b      	ldr	r3, [r7, #0]
   140ce:	689b      	ldr	r3, [r3, #8]
   140d0:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
   140d2:	683b      	ldr	r3, [r7, #0]
   140d4:	2201      	movs	r2, #1
   140d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING);
   140da:	2109      	movs	r1, #9
   140dc:	68f8      	ldr	r0, [r7, #12]
   140de:	f7ee fe99 	bl	2e14 <bb_setUInt8>
   140e2:	6178      	str	r0, [r7, #20]
        hlp_setObjectCount(object->buffer.size, data);
   140e4:	693b      	ldr	r3, [r7, #16]
   140e6:	8adb      	ldrh	r3, [r3, #22]
   140e8:	68f9      	ldr	r1, [r7, #12]
   140ea:	4618      	mov	r0, r3
   140ec:	f00d fbf6 	bl	218dc <hlp_setObjectCount>
        bb_set(data, object->buffer.data, object->buffer.size);
   140f0:	693b      	ldr	r3, [r7, #16]
   140f2:	6919      	ldr	r1, [r3, #16]
   140f4:	693b      	ldr	r3, [r7, #16]
   140f6:	8adb      	ldrh	r3, [r3, #22]
   140f8:	461a      	mov	r2, r3
   140fa:	68f8      	ldr	r0, [r7, #12]
   140fc:	f7ef fa30 	bl	3560 <bb_set>
        break;
   14100:	e056      	b.n	141b0 <cosem_getCompactData+0x130>
    case 3:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   14102:	683b      	ldr	r3, [r7, #0]
   14104:	4618      	mov	r0, r3
   14106:	f7f8 fc4d 	bl	c9a4 <cosem_getByteBuffer>
   1410a:	6178      	str	r0, [r7, #20]
   1410c:	697b      	ldr	r3, [r7, #20]
   1410e:	2b00      	cmp	r3, #0
   14110:	d001      	beq.n	14116 <cosem_getCompactData+0x96>
        {
            return ret;
   14112:	697b      	ldr	r3, [r7, #20]
   14114:	e04d      	b.n	141b2 <cosem_getCompactData+0x132>
        }
        data = e->value.byteArr;
   14116:	683b      	ldr	r3, [r7, #0]
   14118:	689b      	ldr	r3, [r3, #8]
   1411a:	60fb      	str	r3, [r7, #12]
        e->byteArray = 1;
   1411c:	683b      	ldr	r3, [r7, #0]
   1411e:	2201      	movs	r2, #1
   14120:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = getColumns(settings, &object->captureObjects, data, e);
   14124:	693b      	ldr	r3, [r7, #16]
   14126:	f103 011c 	add.w	r1, r3, #28
   1412a:	683b      	ldr	r3, [r7, #0]
   1412c:	68fa      	ldr	r2, [r7, #12]
   1412e:	6878      	ldr	r0, [r7, #4]
   14130:	f7fb fcc6 	bl	fac0 <getColumns>
   14134:	6178      	str	r0, [r7, #20]
        break;
   14136:	e03b      	b.n	141b0 <cosem_getCompactData+0x130>
    case 4:
        ret = var_setUInt8(&e->value, object->templateId);
   14138:	683a      	ldr	r2, [r7, #0]
   1413a:	693b      	ldr	r3, [r7, #16]
   1413c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   14140:	4619      	mov	r1, r3
   14142:	4610      	mov	r0, r2
   14144:	f011 fee8 	bl	25f18 <var_setUInt8>
   14148:	6178      	str	r0, [r7, #20]
        break;
   1414a:	e031      	b.n	141b0 <cosem_getCompactData+0x130>
    case 5:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1414c:	683b      	ldr	r3, [r7, #0]
   1414e:	4618      	mov	r0, r3
   14150:	f7f8 fc28 	bl	c9a4 <cosem_getByteBuffer>
   14154:	6178      	str	r0, [r7, #20]
   14156:	697b      	ldr	r3, [r7, #20]
   14158:	2b00      	cmp	r3, #0
   1415a:	d001      	beq.n	14160 <cosem_getCompactData+0xe0>
        {
            return ret;
   1415c:	697b      	ldr	r3, [r7, #20]
   1415e:	e028      	b.n	141b2 <cosem_getCompactData+0x132>
        }
        gxByteBuffer *data = e->value.byteArr;
   14160:	683b      	ldr	r3, [r7, #0]
   14162:	689b      	ldr	r3, [r3, #8]
   14164:	60bb      	str	r3, [r7, #8]
        e->byteArray = 1;
   14166:	683b      	ldr	r3, [r7, #0]
   14168:	2201      	movs	r2, #1
   1416a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING);
   1416e:	2109      	movs	r1, #9
   14170:	68b8      	ldr	r0, [r7, #8]
   14172:	f7ee fe4f 	bl	2e14 <bb_setUInt8>
   14176:	6178      	str	r0, [r7, #20]
        hlp_setObjectCount(object->templateDescription.size, data);
   14178:	693b      	ldr	r3, [r7, #16]
   1417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   1417c:	68b9      	ldr	r1, [r7, #8]
   1417e:	4618      	mov	r0, r3
   14180:	f00d fbac 	bl	218dc <hlp_setObjectCount>
        bb_set(data, object->templateDescription.data, object->templateDescription.size);
   14184:	693b      	ldr	r3, [r7, #16]
   14186:	6b19      	ldr	r1, [r3, #48]	; 0x30
   14188:	693b      	ldr	r3, [r7, #16]
   1418a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   1418c:	461a      	mov	r2, r3
   1418e:	68b8      	ldr	r0, [r7, #8]
   14190:	f7ef f9e6 	bl	3560 <bb_set>
        break;
   14194:	e00c      	b.n	141b0 <cosem_getCompactData+0x130>
    case 6:
        ret = var_setEnum(&e->value, object->captureMethod);
   14196:	683a      	ldr	r2, [r7, #0]
   14198:	693b      	ldr	r3, [r7, #16]
   1419a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1419e:	4619      	mov	r1, r3
   141a0:	4610      	mov	r0, r2
   141a2:	f011 fea5 	bl	25ef0 <var_setEnum>
   141a6:	6178      	str	r0, [r7, #20]
        break;
   141a8:	e002      	b.n	141b0 <cosem_getCompactData+0x130>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   141aa:	f44f 7381 	mov.w	r3, #258	; 0x102
   141ae:	617b      	str	r3, [r7, #20]
    }
    return ret;
   141b0:	697b      	ldr	r3, [r7, #20]
}
   141b2:	4618      	mov	r0, r3
   141b4:	3718      	adds	r7, #24
   141b6:	46bd      	mov	sp, r7
   141b8:	bd80      	pop	{r7, pc}
   141ba:	bf00      	nop

000141bc <cosem_getValue>:
#endif //DLMS_IGNORE_COMPACT_DATA

int cosem_getValue(
    dlmsSettings* settings,
    gxValueEventArg *e)
{
   141bc:	b580      	push	{r7, lr}
   141be:	b084      	sub	sp, #16
   141c0:	af00      	add	r7, sp, #0
   141c2:	6078      	str	r0, [r7, #4]
   141c4:	6039      	str	r1, [r7, #0]
    int ret = 0;
   141c6:	2300      	movs	r3, #0
   141c8:	60fb      	str	r3, [r7, #12]
    if (e->index == 1)
   141ca:	683b      	ldr	r3, [r7, #0]
   141cc:	7e1b      	ldrb	r3, [r3, #24]
   141ce:	2b01      	cmp	r3, #1
   141d0:	d130      	bne.n	14234 <cosem_getValue+0x78>
    {
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   141d2:	683b      	ldr	r3, [r7, #0]
   141d4:	4618      	mov	r0, r3
   141d6:	f7f8 fbe5 	bl	c9a4 <cosem_getByteBuffer>
   141da:	60f8      	str	r0, [r7, #12]
   141dc:	68fb      	ldr	r3, [r7, #12]
   141de:	2b00      	cmp	r3, #0
   141e0:	d001      	beq.n	141e6 <cosem_getValue+0x2a>
        {
            return ret;
   141e2:	68fb      	ldr	r3, [r7, #12]
   141e4:	e1f7      	b.n	145d6 <cosem_getValue+0x41a>
        }
        gxByteBuffer *data = e->value.byteArr;
   141e6:	683b      	ldr	r3, [r7, #0]
   141e8:	689b      	ldr	r3, [r3, #8]
   141ea:	60bb      	str	r3, [r7, #8]
        e->byteArray = 1;
   141ec:	683b      	ldr	r3, [r7, #0]
   141ee:	2201      	movs	r2, #1
   141f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   141f4:	2109      	movs	r1, #9
   141f6:	68b8      	ldr	r0, [r7, #8]
   141f8:	f7ee fe0c 	bl	2e14 <bb_setUInt8>
   141fc:	60f8      	str	r0, [r7, #12]
   141fe:	68fb      	ldr	r3, [r7, #12]
   14200:	2b00      	cmp	r3, #0
   14202:	d113      	bne.n	1422c <cosem_getValue+0x70>
   14204:	2106      	movs	r1, #6
   14206:	68b8      	ldr	r0, [r7, #8]
   14208:	f7ee fe04 	bl	2e14 <bb_setUInt8>
   1420c:	60f8      	str	r0, [r7, #12]
   1420e:	68fb      	ldr	r3, [r7, #12]
   14210:	2b00      	cmp	r3, #0
   14212:	d10b      	bne.n	1422c <cosem_getValue+0x70>
            (ret = bb_setUInt8(data, 6)) != 0 ||
            (ret = bb_set(data, e->target->logicalName, 6)) != 0)
   14214:	683b      	ldr	r3, [r7, #0]
   14216:	695b      	ldr	r3, [r3, #20]
   14218:	3306      	adds	r3, #6
            return ret;
        }
        gxByteBuffer *data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
            (ret = bb_setUInt8(data, 6)) != 0 ||
   1421a:	2206      	movs	r2, #6
   1421c:	4619      	mov	r1, r3
   1421e:	68b8      	ldr	r0, [r7, #8]
   14220:	f7ef f99e 	bl	3560 <bb_set>
   14224:	60f8      	str	r0, [r7, #12]
   14226:	68fb      	ldr	r3, [r7, #12]
   14228:	2b00      	cmp	r3, #0
   1422a:	d001      	beq.n	14230 <cosem_getValue+0x74>
            (ret = bb_set(data, e->target->logicalName, 6)) != 0)
        {
            return ret;
   1422c:	68fb      	ldr	r3, [r7, #12]
   1422e:	e1d2      	b.n	145d6 <cosem_getValue+0x41a>
        }
        return DLMS_ERROR_CODE_OK;
   14230:	2300      	movs	r3, #0
   14232:	e1d0      	b.n	145d6 <cosem_getValue+0x41a>
    }
    switch (e->target->objectType)
   14234:	683b      	ldr	r3, [r7, #0]
   14236:	695b      	ldr	r3, [r3, #20]
   14238:	781b      	ldrb	r3, [r3, #0]
   1423a:	3b01      	subs	r3, #1
   1423c:	2b72      	cmp	r3, #114	; 0x72
   1423e:	f200 81c4 	bhi.w	145ca <cosem_getValue+0x40e>
   14242:	a201      	add	r2, pc, #4	; (adr r2, 14248 <cosem_getValue+0x8c>)
   14244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14248:	00014415 	.word	0x00014415
   1424c:	000145cb 	.word	0x000145cb
   14250:	0001441f 	.word	0x0001441f
   14254:	00014487 	.word	0x00014487
   14258:	00014473 	.word	0x00014473
   1425c:	00014515 	.word	0x00014515
   14260:	00014509 	.word	0x00014509
   14264:	00014429 	.word	0x00014429
   14268:	00014551 	.word	0x00014551
   1426c:	00014547 	.word	0x00014547
   14270:	0001455b 	.word	0x0001455b
   14274:	00014453 	.word	0x00014453
   14278:	000145cb 	.word	0x000145cb
   1427c:	000145cb 	.word	0x000145cb
   14280:	00014447 	.word	0x00014447
   14284:	000145cb 	.word	0x000145cb
   14288:	0001453d 	.word	0x0001453d
   1428c:	000144cd 	.word	0x000144cd
   14290:	000144af 	.word	0x000144af
   14294:	0001443d 	.word	0x0001443d
   14298:	0001451f 	.word	0x0001451f
   1429c:	00014433 	.word	0x00014433
   142a0:	000144a5 	.word	0x000144a5
   142a4:	000145d3 	.word	0x000145d3
   142a8:	000144c3 	.word	0x000144c3
   142ac:	000145d3 	.word	0x000145d3
   142b0:	000144f5 	.word	0x000144f5
   142b4:	0001445f 	.word	0x0001445f
   142b8:	00014469 	.word	0x00014469
   142bc:	000145d3 	.word	0x000145d3
   142c0:	000145cb 	.word	0x000145cb
   142c4:	000145cb 	.word	0x000145cb
   142c8:	000145cb 	.word	0x000145cb
   142cc:	000145cb 	.word	0x000145cb
   142d0:	000145cb 	.word	0x000145cb
   142d4:	000145cb 	.word	0x000145cb
   142d8:	000145cb 	.word	0x000145cb
   142dc:	000145cb 	.word	0x000145cb
   142e0:	000145cb 	.word	0x000145cb
   142e4:	00014583 	.word	0x00014583
   142e8:	00014565 	.word	0x00014565
   142ec:	000144b9 	.word	0x000144b9
   142f0:	0001447d 	.word	0x0001447d
   142f4:	000144ff 	.word	0x000144ff
   142f8:	00014491 	.word	0x00014491
   142fc:	000145cb 	.word	0x000145cb
   14300:	000145b5 	.word	0x000145b5
   14304:	000145cb 	.word	0x000145cb
   14308:	000145cb 	.word	0x000145cb
   1430c:	000145cb 	.word	0x000145cb
   14310:	000145cb 	.word	0x000145cb
   14314:	000145cb 	.word	0x000145cb
   14318:	000145cb 	.word	0x000145cb
   1431c:	000145cb 	.word	0x000145cb
   14320:	000145cb 	.word	0x000145cb
   14324:	000145cb 	.word	0x000145cb
   14328:	000145cb 	.word	0x000145cb
   1432c:	000145cb 	.word	0x000145cb
   14330:	000145cb 	.word	0x000145cb
   14334:	00014579 	.word	0x00014579
   14338:	00014529 	.word	0x00014529
   1433c:	000145bf 	.word	0x000145bf
   14340:	000145d3 	.word	0x000145d3
   14344:	0001449b 	.word	0x0001449b
   14348:	000145cb 	.word	0x000145cb
   1434c:	000145cb 	.word	0x000145cb
   14350:	000145cb 	.word	0x000145cb
   14354:	000145cb 	.word	0x000145cb
   14358:	000145cb 	.word	0x000145cb
   1435c:	000144d7 	.word	0x000144d7
   14360:	000144e1 	.word	0x000144e1
   14364:	000144eb 	.word	0x000144eb
   14368:	000145cb 	.word	0x000145cb
   1436c:	0001456f 	.word	0x0001456f
   14370:	000145cb 	.word	0x000145cb
   14374:	000145cb 	.word	0x000145cb
   14378:	000145cb 	.word	0x000145cb
   1437c:	000145cb 	.word	0x000145cb
   14380:	000145cb 	.word	0x000145cb
   14384:	000145cb 	.word	0x000145cb
   14388:	000145cb 	.word	0x000145cb
   1438c:	000145cb 	.word	0x000145cb
   14390:	000145cb 	.word	0x000145cb
   14394:	000145cb 	.word	0x000145cb
   14398:	000145cb 	.word	0x000145cb
   1439c:	000145cb 	.word	0x000145cb
   143a0:	000145cb 	.word	0x000145cb
   143a4:	000145cb 	.word	0x000145cb
   143a8:	000145cb 	.word	0x000145cb
   143ac:	000145cb 	.word	0x000145cb
   143b0:	000145cb 	.word	0x000145cb
   143b4:	000145cb 	.word	0x000145cb
   143b8:	000145cb 	.word	0x000145cb
   143bc:	000145cb 	.word	0x000145cb
   143c0:	000145cb 	.word	0x000145cb
   143c4:	000145cb 	.word	0x000145cb
   143c8:	000145cb 	.word	0x000145cb
   143cc:	000145cb 	.word	0x000145cb
   143d0:	000145cb 	.word	0x000145cb
   143d4:	000145cb 	.word	0x000145cb
   143d8:	000145d3 	.word	0x000145d3
   143dc:	000145d3 	.word	0x000145d3
   143e0:	000145d3 	.word	0x000145d3
   143e4:	00014533 	.word	0x00014533
   143e8:	000145cb 	.word	0x000145cb
   143ec:	000145cb 	.word	0x000145cb
   143f0:	000145cb 	.word	0x000145cb
   143f4:	000145cb 	.word	0x000145cb
   143f8:	000145cb 	.word	0x000145cb
   143fc:	000145cb 	.word	0x000145cb
   14400:	0001458d 	.word	0x0001458d
   14404:	00014597 	.word	0x00014597
   14408:	000145a1 	.word	0x000145a1
   1440c:	000145cb 	.word	0x000145cb
   14410:	000145ab 	.word	0x000145ab
    {
#ifndef DLMS_IGNORE_DATA
    case DLMS_OBJECT_TYPE_DATA:
        ret = cosem_getData(e);
   14414:	6838      	ldr	r0, [r7, #0]
   14416:	f7f8 fae9 	bl	c9ec <cosem_getData>
   1441a:	60f8      	str	r0, [r7, #12]
        break;
   1441c:	e0da      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_DATA
#ifndef DLMS_IGNORE_REGISTER
    case DLMS_OBJECT_TYPE_REGISTER:
        ret = cosem_getRegister(e);
   1441e:	6838      	ldr	r0, [r7, #0]
   14420:	f7f8 fb00 	bl	ca24 <cosem_getRegister>
   14424:	60f8      	str	r0, [r7, #12]
        break;
   14426:	e0d5      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_CLOCK
    case DLMS_OBJECT_TYPE_CLOCK:
        ret = cosem_getClock(e);
   14428:	6838      	ldr	r0, [r7, #0]
   1442a:	f7f8 fbc9 	bl	cbc0 <cosem_getClock>
   1442e:	60f8      	str	r0, [r7, #12]
        break;
   14430:	e0d0      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        ret = cosem_getActionSchedule(e);
   14432:	6838      	ldr	r0, [r7, #0]
   14434:	f7f8 fc44 	bl	ccc0 <cosem_getActionSchedule>
   14438:	60f8      	str	r0, [r7, #12]
        break;
   1443a:	e0cb      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = cosem_getActivityCalendar(e);
   1443c:	6838      	ldr	r0, [r7, #0]
   1443e:	f7f9 f81d 	bl	d47c <cosem_getActivityCalendar>
   14442:	60f8      	str	r0, [r7, #12]
        break;
   14444:	e0c6      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        ret = cosem_getAssociationLogicalName(settings, e);
   14446:	6839      	ldr	r1, [r7, #0]
   14448:	6878      	ldr	r0, [r7, #4]
   1444a:	f7f9 fb65 	bl	db18 <cosem_getAssociationLogicalName>
   1444e:	60f8      	str	r0, [r7, #12]
        break;
   14450:	e0c0      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_SERVER
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        ret = cosem_getAssociationShortName(settings, e);
   14452:	6839      	ldr	r1, [r7, #0]
   14454:	6878      	ldr	r0, [r7, #4]
   14456:	f7fa f851 	bl	e4fc <cosem_getAssociationShortName>
   1445a:	60f8      	str	r0, [r7, #12]
        break;
   1445c:	e0ba      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_SERVER
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_AUTO_ANSWER
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        ret = cosem_getAutoAnswer(e);
   1445e:	6838      	ldr	r0, [r7, #0]
   14460:	f7fa f8e8 	bl	e634 <cosem_getAutoAnswer>
   14464:	60f8      	str	r0, [r7, #12]
        break;
   14466:	e0b5      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_AUTO_ANSWER
#ifndef DLMS_IGNORE_AUTO_CONNECT
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ret = cosem_getAutoConnect(e);
   14468:	6838      	ldr	r0, [r7, #0]
   1446a:	f7fa fa11 	bl	e890 <cosem_getAutoConnect>
   1446e:	60f8      	str	r0, [r7, #12]
        break;
   14470:	e0b0      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        ret = cosem_getDemandRegister(e);
   14472:	6838      	ldr	r0, [r7, #0]
   14474:	f7fa fb46 	bl	eb04 <cosem_getDemandRegister>
   14478:	60f8      	str	r0, [r7, #12]
        break;
   1447a:	e0ab      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_DEMAND_REGISTER
#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
    case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
        ret = cosem_getMacAddressSetup(e);
   1447c:	6838      	ldr	r0, [r7, #0]
   1447e:	f7fa fc2d 	bl	ecdc <cosem_getMacAddressSetup>
   14482:	60f8      	str	r0, [r7, #12]
        break;
   14484:	e0a6      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
        ret = cosem_getExtendedRegister(e);
   14486:	6838      	ldr	r0, [r7, #0]
   14488:	f7fa fc46 	bl	ed18 <cosem_getExtendedRegister>
   1448c:	60f8      	str	r0, [r7, #12]
        break;
   1448e:	e0a1      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_GPRS_SETUP
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        ret = cosem_getGprsSetup(e);
   14490:	6838      	ldr	r0, [r7, #0]
   14492:	f7fa fd5d 	bl	ef50 <cosem_getGprsSetup>
   14496:	60f8      	str	r0, [r7, #12]
        break;
   14498:	e09c      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_GPRS_SETUP
#ifndef DLMS_IGNORE_SECURITY_SETUP
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        ret = cosem_getSecuritySetup(e);
   1449a:	6838      	ldr	r0, [r7, #0]
   1449c:	f7fa fdd6 	bl	f04c <cosem_getSecuritySetup>
   144a0:	60f8      	str	r0, [r7, #12]
        break;
   144a2:	e097      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_SECURITY_SETUP
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
        ret = cosem_getIecHdlcSetup(e);
   144a4:	6838      	ldr	r0, [r7, #0]
   144a6:	f7fa ff29 	bl	f2fc <cosem_getIecHdlcSetup>
   144aa:	60f8      	str	r0, [r7, #12]
        break;
   144ac:	e092      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        ret = cosem_getIecLocalPortSetup(e);
   144ae:	6838      	ldr	r0, [r7, #0]
   144b0:	f7fa ff96 	bl	f3e0 <cosem_getIecLocalPortSetup>
   144b4:	60f8      	str	r0, [r7, #12]
        break;
   144b6:	e08d      	b.n	145d4 <cosem_getValue+0x418>
#endif
        break;
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        ret = cosem_getIP4Setup(e);
   144b8:	6838      	ldr	r0, [r7, #0]
   144ba:	f7fb f80d 	bl	f4d8 <cosem_getIP4Setup>
   144be:	60f8      	str	r0, [r7, #12]
        break;
   144c0:	e088      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        ret = cosem_getMbusSlavePortSetup(e);
   144c2:	6838      	ldr	r0, [r7, #0]
   144c4:	f7fb f96a 	bl	f79c <cosem_getMbusSlavePortSetup>
   144c8:	60f8      	str	r0, [r7, #12]
        break;
   144ca:	e083      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        ret = cosem_getImageTransfer(e);
   144cc:	6838      	ldr	r0, [r7, #0]
   144ce:	f7fb f9a9 	bl	f824 <cosem_getImageTransfer>
   144d2:	60f8      	str	r0, [r7, #12]
        break;
   144d4:	e07e      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_IMAGE_TRANSFER
#ifndef DLMS_IGNORE_DISCONNECT_CONTROL
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
        ret = cosem_getDisconnectControl(e);
   144d6:	6838      	ldr	r0, [r7, #0]
   144d8:	f7fc faae 	bl	10a38 <cosem_getDisconnectControl>
   144dc:	60f8      	str	r0, [r7, #12]
        break;
   144de:	e079      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = cosem_getLimiter(e);
   144e0:	6838      	ldr	r0, [r7, #0]
   144e2:	f7fc fae1 	bl	10aa8 <cosem_getLimiter>
   144e6:	60f8      	str	r0, [r7, #12]
        break;
   144e8:	e074      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = cosem_getmMbusClient(e);
   144ea:	6838      	ldr	r0, [r7, #0]
   144ec:	f7fc fd6c 	bl	10fc8 <cosem_getmMbusClient>
   144f0:	60f8      	str	r0, [r7, #12]
        break;
   144f2:	e06f      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_MBUS_CLIENT
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
    case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
        ret = cosem_getModemConfiguration(e);
   144f4:	6838      	ldr	r0, [r7, #0]
   144f6:	f7fc fead 	bl	11254 <cosem_getModemConfiguration>
   144fa:	60f8      	str	r0, [r7, #12]
        break;
   144fc:	e06a      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
    case DLMS_OBJECT_TYPE_PPP_SETUP:
        ret = cosem_getPppSetup(e);
   144fe:	6838      	ldr	r0, [r7, #0]
   14500:	f7fc ffd6 	bl	114b0 <cosem_getPppSetup>
   14504:	60f8      	str	r0, [r7, #12]
        break;
   14506:	e065      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_PROFILE_GENERIC
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
        ret = cosem_getProfileGeneric(settings, e);
   14508:	6839      	ldr	r1, [r7, #0]
   1450a:	6878      	ldr	r0, [r7, #4]
   1450c:	f7fc f93a 	bl	10784 <cosem_getProfileGeneric>
   14510:	60f8      	str	r0, [r7, #12]
        break;
   14512:	e05f      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
        ret = cosem_getRegisterActivation(e);
   14514:	6838      	ldr	r0, [r7, #0]
   14516:	f7fd f96d 	bl	117f4 <cosem_getRegisterActivation>
   1451a:	60f8      	str	r0, [r7, #12]
        break;
   1451c:	e05a      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
    case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
        ret = cosem_getRegisterMonitor(e);
   1451e:	6838      	ldr	r0, [r7, #0]
   14520:	f7fd faf8 	bl	11b14 <cosem_getRegisterMonitor>
   14524:	60f8      	str	r0, [r7, #12]
        break;
   14526:	e055      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_REGISTER_TABLE
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
        ret = cosem_getRegisterTable(e);
   14528:	6838      	ldr	r0, [r7, #0]
   1452a:	f7f8 fae5 	bl	caf8 <cosem_getRegisterTable>
   1452e:	60f8      	str	r0, [r7, #12]
        break;
   14530:	e050      	b.n	145d4 <cosem_getValue+0x418>
#endif
        break;
#endif //DLMS_IGNORE_ZIG_BEE_SAS_APS_FRAGMENTATION
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        ret = cosem_getZigbeeNetworkControl(e);
   14532:	6838      	ldr	r0, [r7, #0]
   14534:	f7fe fc12 	bl	12d5c <cosem_getZigbeeNetworkControl>
   14538:	60f8      	str	r0, [r7, #12]
        break;
   1453a:	e04b      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
        ret = cosem_getSapAssignment(e);
   1453c:	6838      	ldr	r0, [r7, #0]
   1453e:	f7fd fc5d 	bl	11dfc <cosem_getSapAssignment>
   14542:	60f8      	str	r0, [r7, #12]
        break;
   14544:	e046      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_SCHEDULE
    case DLMS_OBJECT_TYPE_SCHEDULE:
        ret = cosem_getSchedule(e);
   14546:	6838      	ldr	r0, [r7, #0]
   14548:	f7fd fcf2 	bl	11f30 <cosem_getSchedule>
   1454c:	60f8      	str	r0, [r7, #12]
        break;
   1454e:	e041      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
        ret = cosem_getScriptTable(e);
   14550:	6838      	ldr	r0, [r7, #0]
   14552:	f7fd fe81 	bl	12258 <cosem_getScriptTable>
   14556:	60f8      	str	r0, [r7, #12]
        break;
   14558:	e03c      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
        ret = cosem_getSpecialDaysTable(e);
   1455a:	6838      	ldr	r0, [r7, #0]
   1455c:	f7fd ff96 	bl	1248c <cosem_getSpecialDaysTable>
   14560:	60f8      	str	r0, [r7, #12]
        break;
   14562:	e037      	b.n	145d4 <cosem_getValue+0x418>
#endif
        break;
#endif //DLMS_IGNORE_STATUS_MAPPING
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        ret = cosem_getTcpUdpSetup(e);
   14564:	6838      	ldr	r0, [r7, #0]
   14566:	f7fe f841 	bl	125ec <cosem_getTcpUdpSetup>
   1456a:	60f8      	str	r0, [r7, #12]
        break;
   1456c:	e032      	b.n	145d4 <cosem_getValue+0x418>
#endif
        break;
#endif //DLMS_IGNORE_UTILITY_TABLES
#ifndef DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        ret = cosem_getMbusMasterPortSetup(e);
   1456e:	6838      	ldr	r0, [r7, #0]
   14570:	f7fe f88e 	bl	12690 <cosem_getMbusMasterPortSetup>
   14574:	60f8      	str	r0, [r7, #12]
        break;
   14576:	e02d      	b.n	145d4 <cosem_getValue+0x418>
#endif //
#ifndef DLMS_IGNORE_MESSAGE_HANDLER
    case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
        ret = cosem_getMessageHandler(e);
   14578:	6838      	ldr	r0, [r7, #0]
   1457a:	f7fe f8a5 	bl	126c8 <cosem_getMessageHandler>
   1457e:	60f8      	str	r0, [r7, #12]
        break;
   14580:	e028      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        ret = cosem_getPushSetup(e);
   14582:	6838      	ldr	r0, [r7, #0]
   14584:	f7fe f9d0 	bl	12928 <cosem_getPushSetup>
   14588:	60f8      	str	r0, [r7, #12]
        break;
   1458a:	e023      	b.n	145d4 <cosem_getValue+0x418>
#endif
        break;
#endif //DLMS_IGNORE_DATA_PROTECTION
#ifndef DLMS_IGNORE_ACCOUNT
    case DLMS_OBJECT_TYPE_ACCOUNT:
        ret = cosem_getAccount(e);
   1458c:	6838      	ldr	r0, [r7, #0]
   1458e:	f7ff f9b3 	bl	138f8 <cosem_getAccount>
   14592:	60f8      	str	r0, [r7, #12]
        break;
   14594:	e01e      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_CREDIT
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = cosem_getCredit(e);
   14596:	6838      	ldr	r0, [r7, #0]
   14598:	f7ff f8ea 	bl	13770 <cosem_getCredit>
   1459c:	60f8      	str	r0, [r7, #12]
        break;
   1459e:	e019      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_CHARGE
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = cosem_getCharge(e);
   145a0:	6838      	ldr	r0, [r7, #0]
   145a2:	f7fe fed9 	bl	13358 <cosem_getCharge>
   145a6:	60f8      	str	r0, [r7, #12]
        break;
   145a8:	e014      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        ret = cosem_getTokenGateway(e);
   145aa:	6838      	ldr	r0, [r7, #0]
   145ac:	f7fe ffc0 	bl	13530 <cosem_getTokenGateway>
   145b0:	60f8      	str	r0, [r7, #12]
        break;
   145b2:	e00f      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        ret = cosem_getGsmDiagnostic(e);
   145b4:	6838      	ldr	r0, [r7, #0]
   145b6:	f000 f813 	bl	145e0 <cosem_getGsmDiagnostic>
   145ba:	60f8      	str	r0, [r7, #12]
        break;
   145bc:	e00a      	b.n	145d4 <cosem_getValue+0x418>
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_COMPACT_DATA
    case DLMS_OBJECT_TYPE_COMPACT_DATA:
        ret = cosem_getCompactData(settings, e);
   145be:	6839      	ldr	r1, [r7, #0]
   145c0:	6878      	ldr	r0, [r7, #4]
   145c2:	f7ff fd5d 	bl	14080 <cosem_getCompactData>
   145c6:	60f8      	str	r0, [r7, #12]
        break;
   145c8:	e004      	b.n	145d4 <cosem_getValue+0x418>
        ret = cosem_getTariffPlan(e);
        break;
#endif //DLMS_ITALIAN_STANDARD
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   145ca:	f44f 7381 	mov.w	r3, #258	; 0x102
   145ce:	60fb      	str	r3, [r7, #12]
   145d0:	e000      	b.n	145d4 <cosem_getValue+0x418>
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        //TODO:
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        break;
   145d2:	bf00      	nop
#endif //DLMS_ITALIAN_STANDARD
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
   145d4:	68fb      	ldr	r3, [r7, #12]
}
   145d6:	4618      	mov	r0, r3
   145d8:	3710      	adds	r7, #16
   145da:	46bd      	mov	sp, r7
   145dc:	bd80      	pop	{r7, pc}
   145de:	bf00      	nop

000145e0 <cosem_getGsmDiagnostic>:
#endif //DLMS_ITALIAN_STANDARD

#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
int cosem_getGsmDiagnostic(
    gxValueEventArg *e)
{
   145e0:	b5b0      	push	{r4, r5, r7, lr}
   145e2:	b088      	sub	sp, #32
   145e4:	af00      	add	r7, sp, #0
   145e6:	6078      	str	r0, [r7, #4]
    gxAdjacentCell *it;
    gxByteBuffer *data;
    gxGsmDiagnostic* object = (gxGsmDiagnostic*)e->target;
   145e8:	687b      	ldr	r3, [r7, #4]
   145ea:	695b      	ldr	r3, [r3, #20]
   145ec:	617b      	str	r3, [r7, #20]
    int pos, ret;
    switch (e->index)
   145ee:	687b      	ldr	r3, [r7, #4]
   145f0:	7e1b      	ldrb	r3, [r3, #24]
   145f2:	3b02      	subs	r3, #2
   145f4:	2b06      	cmp	r3, #6
   145f6:	f200 81b1 	bhi.w	1495c <cosem_getGsmDiagnostic+0x37c>
   145fa:	a201      	add	r2, pc, #4	; (adr r2, 14600 <cosem_getGsmDiagnostic+0x20>)
   145fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14600:	0001461d 	.word	0x0001461d
   14604:	00014659 	.word	0x00014659
   14608:	0001466b 	.word	0x0001466b
   1460c:	0001467d 	.word	0x0001467d
   14610:	0001468f 	.word	0x0001468f
   14614:	00014837 	.word	0x00014837
   14618:	0001494b 	.word	0x0001494b
    {
    case 2:
        if (object->operatorName == NULL)
   1461c:	697b      	ldr	r3, [r7, #20]
   1461e:	691b      	ldr	r3, [r3, #16]
   14620:	2b00      	cmp	r3, #0
   14622:	d108      	bne.n	14636 <cosem_getGsmDiagnostic+0x56>
        {
            ret = var_setString(&e->value, object->operatorName, 0);
   14624:	6878      	ldr	r0, [r7, #4]
   14626:	697b      	ldr	r3, [r7, #20]
   14628:	691b      	ldr	r3, [r3, #16]
   1462a:	2200      	movs	r2, #0
   1462c:	4619      	mov	r1, r3
   1462e:	f011 fd33 	bl	26098 <var_setString>
   14632:	61b8      	str	r0, [r7, #24]
        }
        else
        {
            ret = var_setString(&e->value, object->operatorName, (unsigned short)strlen(object->operatorName));
        }
        break;
   14634:	e199      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
        {
            ret = var_setString(&e->value, object->operatorName, 0);
        }
        else
        {
            ret = var_setString(&e->value, object->operatorName, (unsigned short)strlen(object->operatorName));
   14636:	687c      	ldr	r4, [r7, #4]
   14638:	697b      	ldr	r3, [r7, #20]
   1463a:	691d      	ldr	r5, [r3, #16]
   1463c:	697b      	ldr	r3, [r7, #20]
   1463e:	691b      	ldr	r3, [r3, #16]
   14640:	4618      	mov	r0, r3
   14642:	f7eb fd6d 	bl	120 <strlen>
   14646:	4603      	mov	r3, r0
   14648:	b29b      	uxth	r3, r3
   1464a:	461a      	mov	r2, r3
   1464c:	4629      	mov	r1, r5
   1464e:	4620      	mov	r0, r4
   14650:	f011 fd22 	bl	26098 <var_setString>
   14654:	61b8      	str	r0, [r7, #24]
        }
        break;
   14656:	e188      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
    case 3:
        ret = var_setEnum(&e->value, object->status);
   14658:	687a      	ldr	r2, [r7, #4]
   1465a:	697b      	ldr	r3, [r7, #20]
   1465c:	7d1b      	ldrb	r3, [r3, #20]
   1465e:	4619      	mov	r1, r3
   14660:	4610      	mov	r0, r2
   14662:	f011 fc45 	bl	25ef0 <var_setEnum>
   14666:	61b8      	str	r0, [r7, #24]
        break;
   14668:	e17f      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
    case 4:
        ret = var_setEnum(&e->value, object->circuitSwitchStatus);
   1466a:	687a      	ldr	r2, [r7, #4]
   1466c:	697b      	ldr	r3, [r7, #20]
   1466e:	7d5b      	ldrb	r3, [r3, #21]
   14670:	4619      	mov	r1, r3
   14672:	4610      	mov	r0, r2
   14674:	f011 fc3c 	bl	25ef0 <var_setEnum>
   14678:	61b8      	str	r0, [r7, #24]
        break;
   1467a:	e176      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
    case 5:
        ret = var_setEnum(&e->value, object->packetSwitchStatus);
   1467c:	687a      	ldr	r2, [r7, #4]
   1467e:	697b      	ldr	r3, [r7, #20]
   14680:	7d9b      	ldrb	r3, [r3, #22]
   14682:	4619      	mov	r1, r3
   14684:	4610      	mov	r0, r2
   14686:	f011 fc33 	bl	25ef0 <var_setEnum>
   1468a:	61b8      	str	r0, [r7, #24]
        break;
   1468c:	e16d      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
    case 6:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   1468e:	687b      	ldr	r3, [r7, #4]
   14690:	4618      	mov	r0, r3
   14692:	f7f8 f987 	bl	c9a4 <cosem_getByteBuffer>
   14696:	61b8      	str	r0, [r7, #24]
   14698:	69bb      	ldr	r3, [r7, #24]
   1469a:	2b00      	cmp	r3, #0
   1469c:	d001      	beq.n	146a2 <cosem_getGsmDiagnostic+0xc2>
        {
            return ret;
   1469e:	69bb      	ldr	r3, [r7, #24]
   146a0:	e164      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
        }
        data = e->value.byteArr;
   146a2:	687b      	ldr	r3, [r7, #4]
   146a4:	689b      	ldr	r3, [r3, #8]
   146a6:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   146a8:	687b      	ldr	r3, [r7, #4]
   146aa:	2201      	movs	r2, #1
   146ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0)
   146b0:	2102      	movs	r1, #2
   146b2:	6938      	ldr	r0, [r7, #16]
   146b4:	f7ee fbae 	bl	2e14 <bb_setUInt8>
   146b8:	61b8      	str	r0, [r7, #24]
   146ba:	69bb      	ldr	r3, [r7, #24]
   146bc:	2b00      	cmp	r3, #0
   146be:	d001      	beq.n	146c4 <cosem_getGsmDiagnostic+0xe4>
        {
            return ret;
   146c0:	69bb      	ldr	r3, [r7, #24]
   146c2:	e153      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
        }
        if (object->base.version == 0)
   146c4:	697b      	ldr	r3, [r7, #20]
   146c6:	785b      	ldrb	r3, [r3, #1]
   146c8:	2b00      	cmp	r3, #0
   146ca:	d11c      	bne.n	14706 <cosem_getGsmDiagnostic+0x126>
        {
            if ((ret = bb_setUInt8(data, 4)) != 0 ||
   146cc:	2104      	movs	r1, #4
   146ce:	6938      	ldr	r0, [r7, #16]
   146d0:	f7ee fba0 	bl	2e14 <bb_setUInt8>
   146d4:	61b8      	str	r0, [r7, #24]
   146d6:	69bb      	ldr	r3, [r7, #24]
   146d8:	2b00      	cmp	r3, #0
   146da:	d112      	bne.n	14702 <cosem_getGsmDiagnostic+0x122>
   146dc:	2112      	movs	r1, #18
   146de:	6938      	ldr	r0, [r7, #16]
   146e0:	f7ee fb98 	bl	2e14 <bb_setUInt8>
   146e4:	61b8      	str	r0, [r7, #24]
   146e6:	69bb      	ldr	r3, [r7, #24]
   146e8:	2b00      	cmp	r3, #0
   146ea:	d10a      	bne.n	14702 <cosem_getGsmDiagnostic+0x122>
                //cellId.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, (unsigned short)object->cellInfo.cellId)) != 0)
   146ec:	697b      	ldr	r3, [r7, #20]
   146ee:	699b      	ldr	r3, [r3, #24]
   146f0:	b29b      	uxth	r3, r3
        }
        if (object->base.version == 0)
        {
            if ((ret = bb_setUInt8(data, 4)) != 0 ||
                //cellId.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   146f2:	4619      	mov	r1, r3
   146f4:	6938      	ldr	r0, [r7, #16]
   146f6:	f7ee fc1f 	bl	2f38 <bb_setUInt16>
   146fa:	61b8      	str	r0, [r7, #24]
   146fc:	69bb      	ldr	r3, [r7, #24]
   146fe:	2b00      	cmp	r3, #0
   14700:	d01d      	beq.n	1473e <cosem_getGsmDiagnostic+0x15e>
                (ret = bb_setUInt16(data, (unsigned short)object->cellInfo.cellId)) != 0)
            {
                return ret;
   14702:	69bb      	ldr	r3, [r7, #24]
   14704:	e132      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
            }
        }
        else
        {
            if ((ret = bb_setUInt8(data, 7)) != 0 ||
   14706:	2107      	movs	r1, #7
   14708:	6938      	ldr	r0, [r7, #16]
   1470a:	f7ee fb83 	bl	2e14 <bb_setUInt8>
   1470e:	61b8      	str	r0, [r7, #24]
   14710:	69bb      	ldr	r3, [r7, #24]
   14712:	2b00      	cmp	r3, #0
   14714:	d111      	bne.n	1473a <cosem_getGsmDiagnostic+0x15a>
   14716:	2106      	movs	r1, #6
   14718:	6938      	ldr	r0, [r7, #16]
   1471a:	f7ee fb7b 	bl	2e14 <bb_setUInt8>
   1471e:	61b8      	str	r0, [r7, #24]
   14720:	69bb      	ldr	r3, [r7, #24]
   14722:	2b00      	cmp	r3, #0
   14724:	d109      	bne.n	1473a <cosem_getGsmDiagnostic+0x15a>
                //cellId.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
                (ret = bb_setUInt32(data, object->cellInfo.cellId)) != 0)
   14726:	697b      	ldr	r3, [r7, #20]
   14728:	699b      	ldr	r3, [r3, #24]
        }
        else
        {
            if ((ret = bb_setUInt8(data, 7)) != 0 ||
                //cellId.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   1472a:	4619      	mov	r1, r3
   1472c:	6938      	ldr	r0, [r7, #16]
   1472e:	f7ee fc65 	bl	2ffc <bb_setUInt32>
   14732:	61b8      	str	r0, [r7, #24]
   14734:	69bb      	ldr	r3, [r7, #24]
   14736:	2b00      	cmp	r3, #0
   14738:	d001      	beq.n	1473e <cosem_getGsmDiagnostic+0x15e>
                (ret = bb_setUInt32(data, object->cellInfo.cellId)) != 0)
            {
                return ret;
   1473a:	69bb      	ldr	r3, [r7, #24]
   1473c:	e116      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
            }
        }
        //LocationId.
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1473e:	2112      	movs	r1, #18
   14740:	6938      	ldr	r0, [r7, #16]
   14742:	f7ee fb67 	bl	2e14 <bb_setUInt8>
   14746:	61b8      	str	r0, [r7, #24]
   14748:	69bb      	ldr	r3, [r7, #24]
   1474a:	2b00      	cmp	r3, #0
   1474c:	d133      	bne.n	147b6 <cosem_getGsmDiagnostic+0x1d6>
            (ret = bb_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   1474e:	697b      	ldr	r3, [r7, #20]
   14750:	8b9b      	ldrh	r3, [r3, #28]
            {
                return ret;
            }
        }
        //LocationId.
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   14752:	4619      	mov	r1, r3
   14754:	6938      	ldr	r0, [r7, #16]
   14756:	f7ee fbef 	bl	2f38 <bb_setUInt16>
   1475a:	61b8      	str	r0, [r7, #24]
   1475c:	69bb      	ldr	r3, [r7, #24]
   1475e:	2b00      	cmp	r3, #0
   14760:	d129      	bne.n	147b6 <cosem_getGsmDiagnostic+0x1d6>
            (ret = bb_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   14762:	2111      	movs	r1, #17
   14764:	6938      	ldr	r0, [r7, #16]
   14766:	f7ee fb55 	bl	2e14 <bb_setUInt8>
   1476a:	61b8      	str	r0, [r7, #24]
   1476c:	69bb      	ldr	r3, [r7, #24]
   1476e:	2b00      	cmp	r3, #0
   14770:	d121      	bne.n	147b6 <cosem_getGsmDiagnostic+0x1d6>
            //SignalQuality.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   14772:	697b      	ldr	r3, [r7, #20]
   14774:	7f9b      	ldrb	r3, [r3, #30]
        }
        //LocationId.
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
            (ret = bb_setUInt16(data, object->cellInfo.locationId)) != 0 ||
            //SignalQuality.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   14776:	4619      	mov	r1, r3
   14778:	6938      	ldr	r0, [r7, #16]
   1477a:	f7ee fb4b 	bl	2e14 <bb_setUInt8>
   1477e:	61b8      	str	r0, [r7, #24]
   14780:	69bb      	ldr	r3, [r7, #24]
   14782:	2b00      	cmp	r3, #0
   14784:	d117      	bne.n	147b6 <cosem_getGsmDiagnostic+0x1d6>
            (ret = bb_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   14786:	2111      	movs	r1, #17
   14788:	6938      	ldr	r0, [r7, #16]
   1478a:	f7ee fb43 	bl	2e14 <bb_setUInt8>
   1478e:	61b8      	str	r0, [r7, #24]
   14790:	69bb      	ldr	r3, [r7, #24]
   14792:	2b00      	cmp	r3, #0
   14794:	d10f      	bne.n	147b6 <cosem_getGsmDiagnostic+0x1d6>
            //Ber.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->cellInfo.ber) != 0))
   14796:	697b      	ldr	r3, [r7, #20]
   14798:	7fdb      	ldrb	r3, [r3, #31]
   1479a:	4619      	mov	r1, r3
   1479c:	6938      	ldr	r0, [r7, #16]
   1479e:	f7ee fb39 	bl	2e14 <bb_setUInt8>
   147a2:	4603      	mov	r3, r0
   147a4:	2b00      	cmp	r3, #0
   147a6:	bf14      	ite	ne
   147a8:	2301      	movne	r3, #1
   147aa:	2300      	moveq	r3, #0
   147ac:	b2db      	uxtb	r3, r3
   147ae:	61bb      	str	r3, [r7, #24]
            (ret = bb_setUInt16(data, object->cellInfo.locationId)) != 0 ||
            //SignalQuality.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
            (ret = bb_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
            //Ber.
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   147b0:	69bb      	ldr	r3, [r7, #24]
   147b2:	2b00      	cmp	r3, #0
   147b4:	d001      	beq.n	147ba <cosem_getGsmDiagnostic+0x1da>
            (ret = bb_setUInt8(data, object->cellInfo.ber) != 0))
        {
            return ret;
   147b6:	69bb      	ldr	r3, [r7, #24]
   147b8:	e0d8      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
        }
        if (object->base.version > 0)
   147ba:	697b      	ldr	r3, [r7, #20]
   147bc:	785b      	ldrb	r3, [r3, #1]
   147be:	2b00      	cmp	r3, #0
   147c0:	f000 80d0 	beq.w	14964 <cosem_getGsmDiagnostic+0x384>
        {
            if (//mobileCountryCode.
   147c4:	2112      	movs	r1, #18
   147c6:	6938      	ldr	r0, [r7, #16]
   147c8:	f7ee fb24 	bl	2e14 <bb_setUInt8>
   147cc:	61b8      	str	r0, [r7, #24]
   147ce:	69bb      	ldr	r3, [r7, #24]
   147d0:	2b00      	cmp	r3, #0
   147d2:	d12e      	bne.n	14832 <cosem_getGsmDiagnostic+0x252>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   147d4:	697b      	ldr	r3, [r7, #20]
   147d6:	8c1b      	ldrh	r3, [r3, #32]
            return ret;
        }
        if (object->base.version > 0)
        {
            if (//mobileCountryCode.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   147d8:	4619      	mov	r1, r3
   147da:	6938      	ldr	r0, [r7, #16]
   147dc:	f7ee fbac 	bl	2f38 <bb_setUInt16>
   147e0:	61b8      	str	r0, [r7, #24]
   147e2:	69bb      	ldr	r3, [r7, #24]
   147e4:	2b00      	cmp	r3, #0
   147e6:	d124      	bne.n	14832 <cosem_getGsmDiagnostic+0x252>
                (ret = bb_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   147e8:	2112      	movs	r1, #18
   147ea:	6938      	ldr	r0, [r7, #16]
   147ec:	f7ee fb12 	bl	2e14 <bb_setUInt8>
   147f0:	61b8      	str	r0, [r7, #24]
   147f2:	69bb      	ldr	r3, [r7, #24]
   147f4:	2b00      	cmp	r3, #0
   147f6:	d11c      	bne.n	14832 <cosem_getGsmDiagnostic+0x252>
                //MobileNetworkCode.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
   147f8:	697b      	ldr	r3, [r7, #20]
   147fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
        {
            if (//mobileCountryCode.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
                //MobileNetworkCode.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   147fc:	4619      	mov	r1, r3
   147fe:	6938      	ldr	r0, [r7, #16]
   14800:	f7ee fb9a 	bl	2f38 <bb_setUInt16>
   14804:	61b8      	str	r0, [r7, #24]
   14806:	69bb      	ldr	r3, [r7, #24]
   14808:	2b00      	cmp	r3, #0
   1480a:	d112      	bne.n	14832 <cosem_getGsmDiagnostic+0x252>
                (ret = bb_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
   1480c:	2106      	movs	r1, #6
   1480e:	6938      	ldr	r0, [r7, #16]
   14810:	f7ee fb00 	bl	2e14 <bb_setUInt8>
   14814:	61b8      	str	r0, [r7, #24]
   14816:	69bb      	ldr	r3, [r7, #24]
   14818:	2b00      	cmp	r3, #0
   1481a:	d10a      	bne.n	14832 <cosem_getGsmDiagnostic+0x252>
                //ChannelNumber.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
                (ret = bb_setUInt32(data, object->cellInfo.channelNumber)) != 0)
   1481c:	697b      	ldr	r3, [r7, #20]
   1481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (ret = bb_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
                //MobileNetworkCode.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
                (ret = bb_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
                //ChannelNumber.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   14820:	4619      	mov	r1, r3
   14822:	6938      	ldr	r0, [r7, #16]
   14824:	f7ee fbea 	bl	2ffc <bb_setUInt32>
   14828:	61b8      	str	r0, [r7, #24]
   1482a:	69bb      	ldr	r3, [r7, #24]
   1482c:	2b00      	cmp	r3, #0
   1482e:	f000 8099 	beq.w	14964 <cosem_getGsmDiagnostic+0x384>
                (ret = bb_setUInt32(data, object->cellInfo.channelNumber)) != 0)
            {
                return ret;
   14832:	69bb      	ldr	r3, [r7, #24]
   14834:	e09a      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
            }
        }
        break;
    case 7:
        if ((ret = cosem_getByteBuffer(&e->value)) != 0)
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	4618      	mov	r0, r3
   1483a:	f7f8 f8b3 	bl	c9a4 <cosem_getByteBuffer>
   1483e:	61b8      	str	r0, [r7, #24]
   14840:	69bb      	ldr	r3, [r7, #24]
   14842:	2b00      	cmp	r3, #0
   14844:	d001      	beq.n	1484a <cosem_getGsmDiagnostic+0x26a>
        {
            return ret;
   14846:	69bb      	ldr	r3, [r7, #24]
   14848:	e090      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
        }
        data = e->value.byteArr;
   1484a:	687b      	ldr	r3, [r7, #4]
   1484c:	689b      	ldr	r3, [r3, #8]
   1484e:	613b      	str	r3, [r7, #16]
        e->byteArray = 1;
   14850:	687b      	ldr	r3, [r7, #4]
   14852:	2201      	movs	r2, #1
   14854:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   14858:	2101      	movs	r1, #1
   1485a:	6938      	ldr	r0, [r7, #16]
   1485c:	f7ee fada 	bl	2e14 <bb_setUInt8>
   14860:	61b8      	str	r0, [r7, #24]
   14862:	69bb      	ldr	r3, [r7, #24]
   14864:	2b00      	cmp	r3, #0
   14866:	d109      	bne.n	1487c <cosem_getGsmDiagnostic+0x29c>
            (ret = hlp_setObjectCount(object->adjacentCells.size, data)) != 0)
   14868:	697b      	ldr	r3, [r7, #20]
   1486a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
        {
            return ret;
        }
        data = e->value.byteArr;
        e->byteArray = 1;
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1486c:	6939      	ldr	r1, [r7, #16]
   1486e:	4618      	mov	r0, r3
   14870:	f00d f834 	bl	218dc <hlp_setObjectCount>
   14874:	61b8      	str	r0, [r7, #24]
   14876:	69bb      	ldr	r3, [r7, #24]
   14878:	2b00      	cmp	r3, #0
   1487a:	d001      	beq.n	14880 <cosem_getGsmDiagnostic+0x2a0>
            (ret = hlp_setObjectCount(object->adjacentCells.size, data)) != 0)
        {
            return ret;
   1487c:	69bb      	ldr	r3, [r7, #24]
   1487e:	e075      	b.n	1496c <cosem_getGsmDiagnostic+0x38c>
        }
        for (pos = 0; pos != object->adjacentCells.size; ++pos)
   14880:	2300      	movs	r3, #0
   14882:	61fb      	str	r3, [r7, #28]
   14884:	e05a      	b.n	1493c <cosem_getGsmDiagnostic+0x35c>
        {
            if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   14886:	697b      	ldr	r3, [r7, #20]
   14888:	3328      	adds	r3, #40	; 0x28
   1488a:	f107 020c 	add.w	r2, r7, #12
   1488e:	69f9      	ldr	r1, [r7, #28]
   14890:	4618      	mov	r0, r3
   14892:	f7f7 ffb3 	bl	c7fc <arr_getByIndex>
   14896:	61b8      	str	r0, [r7, #24]
   14898:	69bb      	ldr	r3, [r7, #24]
   1489a:	2b00      	cmp	r3, #0
   1489c:	d164      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
   1489e:	2102      	movs	r1, #2
   148a0:	6938      	ldr	r0, [r7, #16]
   148a2:	f7ee fab7 	bl	2e14 <bb_setUInt8>
   148a6:	61b8      	str	r0, [r7, #24]
   148a8:	69bb      	ldr	r3, [r7, #24]
   148aa:	2b00      	cmp	r3, #0
   148ac:	d15c      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   148ae:	2102      	movs	r1, #2
   148b0:	6938      	ldr	r0, [r7, #16]
   148b2:	f7ee faaf 	bl	2e14 <bb_setUInt8>
   148b6:	61b8      	str	r0, [r7, #24]
   148b8:	69bb      	ldr	r3, [r7, #24]
   148ba:	2b00      	cmp	r3, #0
   148bc:	d154      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                (ret = bb_setUInt8(data, 2)) != 0)
            {
                break;
            }
            if (object->base.version == 0)
   148be:	697b      	ldr	r3, [r7, #20]
   148c0:	785b      	ldrb	r3, [r3, #1]
   148c2:	2b00      	cmp	r3, #0
   148c4:	d113      	bne.n	148ee <cosem_getGsmDiagnostic+0x30e>
            {
                //cellId.
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   148c6:	2112      	movs	r1, #18
   148c8:	6938      	ldr	r0, [r7, #16]
   148ca:	f7ee faa3 	bl	2e14 <bb_setUInt8>
   148ce:	61b8      	str	r0, [r7, #24]
   148d0:	69bb      	ldr	r3, [r7, #24]
   148d2:	2b00      	cmp	r3, #0
   148d4:	d148      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                    (ret = bb_setUInt16(data, (unsigned short)it->cellId)) != 0)
   148d6:	68fb      	ldr	r3, [r7, #12]
   148d8:	681b      	ldr	r3, [r3, #0]
   148da:	b29b      	uxth	r3, r3
                break;
            }
            if (object->base.version == 0)
            {
                //cellId.
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   148dc:	4619      	mov	r1, r3
   148de:	6938      	ldr	r0, [r7, #16]
   148e0:	f7ee fb2a 	bl	2f38 <bb_setUInt16>
   148e4:	61b8      	str	r0, [r7, #24]
   148e6:	69bb      	ldr	r3, [r7, #24]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d13d      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
   148ec:	e011      	b.n	14912 <cosem_getGsmDiagnostic+0x332>
                }
            }
            else
            {
                //cellId.
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   148ee:	2106      	movs	r1, #6
   148f0:	6938      	ldr	r0, [r7, #16]
   148f2:	f7ee fa8f 	bl	2e14 <bb_setUInt8>
   148f6:	61b8      	str	r0, [r7, #24]
   148f8:	69bb      	ldr	r3, [r7, #24]
   148fa:	2b00      	cmp	r3, #0
   148fc:	d134      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                    (ret = bb_setUInt32(data, it->cellId)) != 0)
   148fe:	68fb      	ldr	r3, [r7, #12]
   14900:	681b      	ldr	r3, [r3, #0]
                }
            }
            else
            {
                //cellId.
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   14902:	4619      	mov	r1, r3
   14904:	6938      	ldr	r0, [r7, #16]
   14906:	f7ee fb79 	bl	2ffc <bb_setUInt32>
   1490a:	61b8      	str	r0, [r7, #24]
   1490c:	69bb      	ldr	r3, [r7, #24]
   1490e:	2b00      	cmp	r3, #0
   14910:	d12a      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                {
                    break;
                }
            }
            //SignalQuality.
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   14912:	2111      	movs	r1, #17
   14914:	6938      	ldr	r0, [r7, #16]
   14916:	f7ee fa7d 	bl	2e14 <bb_setUInt8>
   1491a:	61b8      	str	r0, [r7, #24]
   1491c:	69bb      	ldr	r3, [r7, #24]
   1491e:	2b00      	cmp	r3, #0
   14920:	d122      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
                (ret = bb_setUInt8(data, it->signalQuality)) != 0)
   14922:	68fb      	ldr	r3, [r7, #12]
   14924:	791b      	ldrb	r3, [r3, #4]
                {
                    break;
                }
            }
            //SignalQuality.
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
   14926:	4619      	mov	r1, r3
   14928:	6938      	ldr	r0, [r7, #16]
   1492a:	f7ee fa73 	bl	2e14 <bb_setUInt8>
   1492e:	61b8      	str	r0, [r7, #24]
   14930:	69bb      	ldr	r3, [r7, #24]
   14932:	2b00      	cmp	r3, #0
   14934:	d118      	bne.n	14968 <cosem_getGsmDiagnostic+0x388>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
            (ret = hlp_setObjectCount(object->adjacentCells.size, data)) != 0)
        {
            return ret;
        }
        for (pos = 0; pos != object->adjacentCells.size; ++pos)
   14936:	69fb      	ldr	r3, [r7, #28]
   14938:	3301      	adds	r3, #1
   1493a:	61fb      	str	r3, [r7, #28]
   1493c:	697b      	ldr	r3, [r7, #20]
   1493e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14940:	461a      	mov	r2, r3
   14942:	69fb      	ldr	r3, [r7, #28]
   14944:	429a      	cmp	r2, r3
   14946:	d19e      	bne.n	14886 <cosem_getGsmDiagnostic+0x2a6>
                (ret = bb_setUInt8(data, it->signalQuality)) != 0)
            {
                break;
            }
        }
        break;
   14948:	e00e      	b.n	14968 <cosem_getGsmDiagnostic+0x388>
    case 8:
        ret = var_setDateTime(&e->value, &object->captureTime);
   1494a:	687a      	ldr	r2, [r7, #4]
   1494c:	697b      	ldr	r3, [r7, #20]
   1494e:	3338      	adds	r3, #56	; 0x38
   14950:	4619      	mov	r1, r3
   14952:	4610      	mov	r0, r2
   14954:	f013 fb5e 	bl	28014 <var_setDateTime>
   14958:	61b8      	str	r0, [r7, #24]
        break;
   1495a:	e006      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1495c:	f44f 7381 	mov.w	r3, #258	; 0x102
   14960:	61bb      	str	r3, [r7, #24]
   14962:	e002      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
                (ret = bb_setUInt32(data, object->cellInfo.channelNumber)) != 0)
            {
                return ret;
            }
        }
        break;
   14964:	bf00      	nop
   14966:	e000      	b.n	1496a <cosem_getGsmDiagnostic+0x38a>
                (ret = bb_setUInt8(data, it->signalQuality)) != 0)
            {
                break;
            }
        }
        break;
   14968:	bf00      	nop
        ret = var_setDateTime(&e->value, &object->captureTime);
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
   1496a:	69bb      	ldr	r3, [r7, #24]
}
   1496c:	4618      	mov	r0, r3
   1496e:	3720      	adds	r7, #32
   14970:	46bd      	mov	sp, r7
   14972:	bdb0      	pop	{r4, r5, r7, pc}

00014974 <invoke_Charge>:

int invoke_Charge(
	gxCharge* object,
	unsigned char index,
	dlmsVARIANT* value)
{
   14974:	b590      	push	{r4, r7, lr}
   14976:	b089      	sub	sp, #36	; 0x24
   14978:	af00      	add	r7, sp, #0
   1497a:	60f8      	str	r0, [r7, #12]
   1497c:	460b      	mov	r3, r1
   1497e:	607a      	str	r2, [r7, #4]
   14980:	72fb      	strb	r3, [r7, #11]
	gxChargeTable* ct, * it;
	int ret = 0, pos;
   14982:	2300      	movs	r3, #0
   14984:	61fb      	str	r3, [r7, #28]
	//Update unit charge.
	if (index == 1)
   14986:	7afb      	ldrb	r3, [r7, #11]
   14988:	2b01      	cmp	r3, #1
   1498a:	d122      	bne.n	149d2 <invoke_Charge+0x5e>
	{
		for (pos = 0; pos != object->unitChargePassive.chargeTables.size; ++pos)
   1498c:	2300      	movs	r3, #0
   1498e:	61bb      	str	r3, [r7, #24]
   14990:	e017      	b.n	149c2 <invoke_Charge+0x4e>
		{
			ret = arr_get(&object->unitChargePassive.chargeTables, (void**)& ct);
   14992:	68fb      	ldr	r3, [r7, #12]
   14994:	333c      	adds	r3, #60	; 0x3c
   14996:	f107 0210 	add.w	r2, r7, #16
   1499a:	4611      	mov	r1, r2
   1499c:	4618      	mov	r0, r3
   1499e:	f7f7 ff0b 	bl	c7b8 <arr_get>
   149a2:	61f8      	str	r0, [r7, #28]
			if (ret != 0)
   149a4:	69fb      	ldr	r3, [r7, #28]
   149a6:	2b00      	cmp	r3, #0
   149a8:	d001      	beq.n	149ae <invoke_Charge+0x3a>
			{
				return ret;
   149aa:	69fb      	ldr	r3, [r7, #28]
   149ac:	e066      	b.n	14a7c <invoke_Charge+0x108>
			}
			ct->chargePerUnit = (short)var_toInteger(value);
   149ae:	693c      	ldr	r4, [r7, #16]
   149b0:	6878      	ldr	r0, [r7, #4]
   149b2:	f012 f88b 	bl	26acc <var_toInteger>
   149b6:	4603      	mov	r3, r0
   149b8:	b21b      	sxth	r3, r3
   149ba:	81a3      	strh	r3, [r4, #12]
	gxChargeTable* ct, * it;
	int ret = 0, pos;
	//Update unit charge.
	if (index == 1)
	{
		for (pos = 0; pos != object->unitChargePassive.chargeTables.size; ++pos)
   149bc:	69bb      	ldr	r3, [r7, #24]
   149be:	3301      	adds	r3, #1
   149c0:	61bb      	str	r3, [r7, #24]
   149c2:	68fb      	ldr	r3, [r7, #12]
   149c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   149c8:	461a      	mov	r2, r3
   149ca:	69bb      	ldr	r3, [r7, #24]
   149cc:	429a      	cmp	r2, r3
   149ce:	d1e0      	bne.n	14992 <invoke_Charge+0x1e>
   149d0:	e053      	b.n	14a7a <invoke_Charge+0x106>
			}
			ct->chargePerUnit = (short)var_toInteger(value);
		}
	}
	//Activate passive unit charge.
	else if (index == 2)
   149d2:	7afb      	ldrb	r3, [r7, #11]
   149d4:	2b02      	cmp	r3, #2
   149d6:	d13e      	bne.n	14a56 <invoke_Charge+0xe2>
	{
		object->unitChargeActive.chargePerUnitScaling = object->unitChargePassive.chargePerUnitScaling;
   149d8:	68fb      	ldr	r3, [r7, #12]
   149da:	68fa      	ldr	r2, [r7, #12]
   149dc:	8e12      	ldrh	r2, [r2, #48]	; 0x30
   149de:	829a      	strh	r2, [r3, #20]
		object->unitChargeActive.commodity = object->unitChargePassive.commodity;
   149e0:	68fb      	ldr	r3, [r7, #12]
   149e2:	68fa      	ldr	r2, [r7, #12]
   149e4:	3316      	adds	r3, #22
   149e6:	3232      	adds	r2, #50	; 0x32
   149e8:	6810      	ldr	r0, [r2, #0]
   149ea:	6851      	ldr	r1, [r2, #4]
   149ec:	6018      	str	r0, [r3, #0]
   149ee:	6059      	str	r1, [r3, #4]
   149f0:	8912      	ldrh	r2, [r2, #8]
   149f2:	811a      	strh	r2, [r3, #8]
		for (pos = 0; pos != object->unitChargePassive.chargeTables.size; ++pos)
   149f4:	2300      	movs	r3, #0
   149f6:	61bb      	str	r3, [r7, #24]
   149f8:	e025      	b.n	14a46 <invoke_Charge+0xd2>
		{
			ret = arr_get(&object->unitChargePassive.chargeTables, (void**)& ct);
   149fa:	68fb      	ldr	r3, [r7, #12]
   149fc:	333c      	adds	r3, #60	; 0x3c
   149fe:	f107 0210 	add.w	r2, r7, #16
   14a02:	4611      	mov	r1, r2
   14a04:	4618      	mov	r0, r3
   14a06:	f7f7 fed7 	bl	c7b8 <arr_get>
   14a0a:	61f8      	str	r0, [r7, #28]
			if (ret != 0)
   14a0c:	69fb      	ldr	r3, [r7, #28]
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d001      	beq.n	14a16 <invoke_Charge+0xa2>
			{
				return ret;
   14a12:	69fb      	ldr	r3, [r7, #28]
   14a14:	e032      	b.n	14a7c <invoke_Charge+0x108>
			}
			it = (gxChargeTable*)gxmalloc(sizeof(gxChargeTable));
   14a16:	2010      	movs	r0, #16
   14a18:	f015 f814 	bl	29a44 <malloc>
   14a1c:	4603      	mov	r3, r0
   14a1e:	617b      	str	r3, [r7, #20]
			it->chargePerUnit = ct->chargePerUnit;
   14a20:	693b      	ldr	r3, [r7, #16]
   14a22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
   14a26:	697b      	ldr	r3, [r7, #20]
   14a28:	819a      	strh	r2, [r3, #12]
			it->index = ct->index;
   14a2a:	693a      	ldr	r2, [r7, #16]
   14a2c:	697b      	ldr	r3, [r7, #20]
   14a2e:	ca07      	ldmia	r2, {r0, r1, r2}
   14a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			arr_push(&object->unitChargeActive.chargeTables, it);
   14a34:	68fb      	ldr	r3, [r7, #12]
   14a36:	3320      	adds	r3, #32
   14a38:	6979      	ldr	r1, [r7, #20]
   14a3a:	4618      	mov	r0, r3
   14a3c:	f7f7 fe20 	bl	c680 <arr_push>
	//Activate passive unit charge.
	else if (index == 2)
	{
		object->unitChargeActive.chargePerUnitScaling = object->unitChargePassive.chargePerUnitScaling;
		object->unitChargeActive.commodity = object->unitChargePassive.commodity;
		for (pos = 0; pos != object->unitChargePassive.chargeTables.size; ++pos)
   14a40:	69bb      	ldr	r3, [r7, #24]
   14a42:	3301      	adds	r3, #1
   14a44:	61bb      	str	r3, [r7, #24]
   14a46:	68fb      	ldr	r3, [r7, #12]
   14a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   14a4c:	461a      	mov	r2, r3
   14a4e:	69bb      	ldr	r3, [r7, #24]
   14a50:	429a      	cmp	r2, r3
   14a52:	d1d2      	bne.n	149fa <invoke_Charge+0x86>
   14a54:	e011      	b.n	14a7a <invoke_Charge+0x106>
			it->index = ct->index;
			arr_push(&object->unitChargeActive.chargeTables, it);
		}
	}
	//Update total amount remaining.
	else if (index == 4)
   14a56:	7afb      	ldrb	r3, [r7, #11]
   14a58:	2b04      	cmp	r3, #4
   14a5a:	d10b      	bne.n	14a74 <invoke_Charge+0x100>
	{
		object->totalAmountRemaining += var_toInteger(value);
   14a5c:	6878      	ldr	r0, [r7, #4]
   14a5e:	f012 f835 	bl	26acc <var_toInteger>
   14a62:	4602      	mov	r2, r0
   14a64:	68fb      	ldr	r3, [r7, #12]
   14a66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   14a6a:	441a      	add	r2, r3
   14a6c:	68fb      	ldr	r3, [r7, #12]
   14a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   14a72:	e002      	b.n	14a7a <invoke_Charge+0x106>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14a74:	f44f 7381 	mov.w	r3, #258	; 0x102
   14a78:	61fb      	str	r3, [r7, #28]
	}
	return ret;
   14a7a:	69fb      	ldr	r3, [r7, #28]
}
   14a7c:	4618      	mov	r0, r3
   14a7e:	3724      	adds	r7, #36	; 0x24
   14a80:	46bd      	mov	sp, r7
   14a82:	bd90      	pop	{r4, r7, pc}

00014a84 <invoke_Credit>:
#ifndef DLMS_IGNORE_CREDIT
int invoke_Credit(
	gxCredit* object,
	unsigned char index,
	dlmsVARIANT* value)
{
   14a84:	b580      	push	{r7, lr}
   14a86:	b086      	sub	sp, #24
   14a88:	af00      	add	r7, sp, #0
   14a8a:	60f8      	str	r0, [r7, #12]
   14a8c:	460b      	mov	r3, r1
   14a8e:	607a      	str	r2, [r7, #4]
   14a90:	72fb      	strb	r3, [r7, #11]
	int ret = 0;
   14a92:	2300      	movs	r3, #0
   14a94:	617b      	str	r3, [r7, #20]
	//Update amount.
	if (index == 1)
   14a96:	7afb      	ldrb	r3, [r7, #11]
   14a98:	2b01      	cmp	r3, #1
   14a9a:	d109      	bne.n	14ab0 <invoke_Credit+0x2c>
	{
		object->currentCreditAmount += var_toInteger(value);
   14a9c:	6878      	ldr	r0, [r7, #4]
   14a9e:	f012 f815 	bl	26acc <var_toInteger>
   14aa2:	4602      	mov	r2, r0
   14aa4:	68fb      	ldr	r3, [r7, #12]
   14aa6:	691b      	ldr	r3, [r3, #16]
   14aa8:	441a      	add	r2, r3
   14aaa:	68fb      	ldr	r3, [r7, #12]
   14aac:	611a      	str	r2, [r3, #16]
   14aae:	e019      	b.n	14ae4 <invoke_Credit+0x60>
	}
	//Set amount to value.
	else if (index == 2)
   14ab0:	7afb      	ldrb	r3, [r7, #11]
   14ab2:	2b02      	cmp	r3, #2
   14ab4:	d106      	bne.n	14ac4 <invoke_Credit+0x40>
	{
		object->currentCreditAmount = var_toInteger(value);
   14ab6:	6878      	ldr	r0, [r7, #4]
   14ab8:	f012 f808 	bl	26acc <var_toInteger>
   14abc:	4602      	mov	r2, r0
   14abe:	68fb      	ldr	r3, [r7, #12]
   14ac0:	611a      	str	r2, [r3, #16]
   14ac2:	e00f      	b.n	14ae4 <invoke_Credit+0x60>
	}
	else if (index == 3)
   14ac4:	7afb      	ldrb	r3, [r7, #11]
   14ac6:	2b03      	cmp	r3, #3
   14ac8:	d109      	bne.n	14ade <invoke_Credit+0x5a>
	{
		// The mechanism for selecting the �Credit� is not in the scope of COSEM and
		// shall be specified by the implementer (e.g. button push, meter process, script etc.).
		object->status |= 4;
   14aca:	68fb      	ldr	r3, [r7, #12]
   14acc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   14ad0:	f043 0304 	orr.w	r3, r3, #4
   14ad4:	b2da      	uxtb	r2, r3
   14ad6:	68fb      	ldr	r3, [r7, #12]
   14ad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   14adc:	e002      	b.n	14ae4 <invoke_Credit+0x60>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14ade:	f44f 7381 	mov.w	r3, #258	; 0x102
   14ae2:	617b      	str	r3, [r7, #20]
	}
	return ret;
   14ae4:	697b      	ldr	r3, [r7, #20]
}
   14ae6:	4618      	mov	r0, r3
   14ae8:	3718      	adds	r7, #24
   14aea:	46bd      	mov	sp, r7
   14aec:	bd80      	pop	{r7, pc}
   14aee:	bf00      	nop

00014af0 <invoke_gxTokenGateway>:
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int invoke_gxTokenGateway(
	gxTokenGateway* object,
	unsigned char index,
	dlmsVARIANT* value)
{
   14af0:	b580      	push	{r7, lr}
   14af2:	b086      	sub	sp, #24
   14af4:	af00      	add	r7, sp, #0
   14af6:	60f8      	str	r0, [r7, #12]
   14af8:	460b      	mov	r3, r1
   14afa:	607a      	str	r2, [r7, #4]
   14afc:	72fb      	strb	r3, [r7, #11]
	int ret = 0;
   14afe:	2300      	movs	r3, #0
   14b00:	617b      	str	r3, [r7, #20]
	//Update token.
	if (index == 1)
   14b02:	7afb      	ldrb	r3, [r7, #11]
   14b04:	2b01      	cmp	r3, #1
   14b06:	d115      	bne.n	14b34 <invoke_gxTokenGateway+0x44>
	{
		bb_clear(&object->token);
   14b08:	68fb      	ldr	r3, [r7, #12]
   14b0a:	3310      	adds	r3, #16
   14b0c:	4618      	mov	r0, r3
   14b0e:	f7ee fe29 	bl	3764 <bb_clear>
		if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   14b12:	687b      	ldr	r3, [r7, #4]
   14b14:	781b      	ldrb	r3, [r3, #0]
   14b16:	2b09      	cmp	r3, #9
   14b18:	d10f      	bne.n	14b3a <invoke_gxTokenGateway+0x4a>
		{
			bb_set(&object->token, value->byteArr->data, value->byteArr->size);
   14b1a:	68fb      	ldr	r3, [r7, #12]
   14b1c:	f103 0010 	add.w	r0, r3, #16
   14b20:	687b      	ldr	r3, [r7, #4]
   14b22:	689b      	ldr	r3, [r3, #8]
   14b24:	6819      	ldr	r1, [r3, #0]
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	689b      	ldr	r3, [r3, #8]
   14b2a:	88db      	ldrh	r3, [r3, #6]
   14b2c:	461a      	mov	r2, r3
   14b2e:	f7ee fd17 	bl	3560 <bb_set>
   14b32:	e002      	b.n	14b3a <invoke_gxTokenGateway+0x4a>
		}
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14b34:	f44f 7381 	mov.w	r3, #258	; 0x102
   14b38:	617b      	str	r3, [r7, #20]
	}
	return ret;
   14b3a:	697b      	ldr	r3, [r7, #20]
}
   14b3c:	4618      	mov	r0, r3
   14b3e:	3718      	adds	r7, #24
   14b40:	46bd      	mov	sp, r7
   14b42:	bd80      	pop	{r7, pc}

00014b44 <invoke_AssociationLogicalName>:
#endif //DLMS_IGNORE_TOKEN_GATEWAY

int invoke_AssociationLogicalName(
	dlmsServerSettings* settings,
	gxValueEventArg* e)
{
   14b44:	b580      	push	{r7, lr}
   14b46:	b096      	sub	sp, #88	; 0x58
   14b48:	af02      	add	r7, sp, #8
   14b4a:	6078      	str	r0, [r7, #4]
   14b4c:	6039      	str	r1, [r7, #0]
	int ret = 0;
   14b4e:	2300      	movs	r3, #0
   14b50:	64fb      	str	r3, [r7, #76]	; 0x4c
	// Check reply_to_HLS_authentication
	if (e->index == 1)
   14b52:	683b      	ldr	r3, [r7, #0]
   14b54:	7e1b      	ldrb	r3, [r3, #24]
   14b56:	2b01      	cmp	r3, #1
   14b58:	f040 80b1 	bne.w	14cbe <invoke_AssociationLogicalName+0x17a>
	{
		unsigned char equal;
		unsigned long ic = 0;
   14b5c:	2300      	movs	r3, #0
   14b5e:	62bb      	str	r3, [r7, #40]	; 0x28
		gxByteBuffer bb;
		gxByteBuffer* readSecret;
		bb_init(&bb);
   14b60:	f107 031c 	add.w	r3, r7, #28
   14b64:	4618      	mov	r0, r3
   14b66:	f7ee f8bf 	bl	2ce8 <bb_init>
		if (settings->base.authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
   14b6a:	687b      	ldr	r3, [r7, #4]
   14b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14b70:	2b05      	cmp	r3, #5
   14b72:	d132      	bne.n	14bda <invoke_AssociationLogicalName+0x96>
		{
			unsigned char ch;
			readSecret = &settings->base.sourceSystemTitle;
   14b74:	687b      	ldr	r3, [r7, #4]
   14b76:	331c      	adds	r3, #28
   14b78:	64bb      	str	r3, [r7, #72]	; 0x48
			bb_set(&bb, e->parameters.byteArr->data, e->parameters.byteArr->size);
   14b7a:	683b      	ldr	r3, [r7, #0]
   14b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b7e:	6819      	ldr	r1, [r3, #0]
   14b80:	683b      	ldr	r3, [r7, #0]
   14b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b84:	88da      	ldrh	r2, [r3, #6]
   14b86:	f107 031c 	add.w	r3, r7, #28
   14b8a:	4618      	mov	r0, r3
   14b8c:	f7ee fce8 	bl	3560 <bb_set>
			if ((ret = bb_getUInt8(&bb, &ch)) != 0 ||
   14b90:	f107 021b 	add.w	r2, r7, #27
   14b94:	f107 031c 	add.w	r3, r7, #28
   14b98:	4611      	mov	r1, r2
   14b9a:	4618      	mov	r0, r3
   14b9c:	f7ee fe06 	bl	37ac <bb_getUInt8>
   14ba0:	64f8      	str	r0, [r7, #76]	; 0x4c
   14ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14ba4:	2b00      	cmp	r3, #0
   14ba6:	d10b      	bne.n	14bc0 <invoke_AssociationLogicalName+0x7c>
   14ba8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14bac:	f107 031c 	add.w	r3, r7, #28
   14bb0:	4611      	mov	r1, r2
   14bb2:	4618      	mov	r0, r3
   14bb4:	f7ee fe8c 	bl	38d0 <bb_getUInt32>
   14bb8:	64f8      	str	r0, [r7, #76]	; 0x4c
   14bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bbc:	2b00      	cmp	r3, #0
   14bbe:	d006      	beq.n	14bce <invoke_AssociationLogicalName+0x8a>
				(ret = bb_getUInt32(&bb, &ic)) != 0)
			{
				bb_clear(&bb);
   14bc0:	f107 031c 	add.w	r3, r7, #28
   14bc4:	4618      	mov	r0, r3
   14bc6:	f7ee fdcd 	bl	3764 <bb_clear>
				return ret;
   14bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bcc:	e168      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
			}
			bb_clear(&bb);
   14bce:	f107 031c 	add.w	r3, r7, #28
   14bd2:	4618      	mov	r0, r3
   14bd4:	f7ee fdc6 	bl	3764 <bb_clear>
   14bd8:	e003      	b.n	14be2 <invoke_AssociationLogicalName+0x9e>
		}
		else
		{
			readSecret = &((gxAssociationLogicalName*)e->target)->secret;
   14bda:	683b      	ldr	r3, [r7, #0]
   14bdc:	695b      	ldr	r3, [r3, #20]
   14bde:	3354      	adds	r3, #84	; 0x54
   14be0:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		bb_clear(&settings->info.data);
   14be2:	687b      	ldr	r3, [r7, #4]
   14be4:	33cc      	adds	r3, #204	; 0xcc
   14be6:	4618      	mov	r0, r3
   14be8:	f7ee fdbc 	bl	3764 <bb_clear>
		if ((ret = dlms_secure(&settings->base,
   14bec:	6878      	ldr	r0, [r7, #4]
   14bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14bf0:	4619      	mov	r1, r3
   14bf2:	687b      	ldr	r3, [r7, #4]
   14bf4:	f103 0210 	add.w	r2, r3, #16
   14bf8:	687b      	ldr	r3, [r7, #4]
   14bfa:	33cc      	adds	r3, #204	; 0xcc
   14bfc:	9300      	str	r3, [sp, #0]
   14bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14c00:	f7f6 fd16 	bl	b630 <dlms_secure>
   14c04:	64f8      	str	r0, [r7, #76]	; 0x4c
   14c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c08:	2b00      	cmp	r3, #0
   14c0a:	d001      	beq.n	14c10 <invoke_AssociationLogicalName+0xcc>
			ic,
			&settings->base.stoCChallenge,
			readSecret,
			&settings->info.data)) != 0)
		{
			return ret;
   14c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c0e:	e147      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
		}
		equal = bb_compare(&settings->info.data,
   14c10:	687b      	ldr	r3, [r7, #4]
   14c12:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
			e->parameters.byteArr->data,
   14c16:	683b      	ldr	r3, [r7, #0]
   14c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			readSecret,
			&settings->info.data)) != 0)
		{
			return ret;
		}
		equal = bb_compare(&settings->info.data,
   14c1a:	6819      	ldr	r1, [r3, #0]
			e->parameters.byteArr->data,
			e->parameters.byteArr->size);
   14c1c:	683b      	ldr	r3, [r7, #0]
   14c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			readSecret,
			&settings->info.data)) != 0)
		{
			return ret;
		}
		equal = bb_compare(&settings->info.data,
   14c20:	88db      	ldrh	r3, [r3, #6]
   14c22:	461a      	mov	r2, r3
   14c24:	f7ef f9b2 	bl	3f8c <bb_compare>
   14c28:	4603      	mov	r3, r0
   14c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			e->parameters.byteArr->data,
			e->parameters.byteArr->size);
		bb_clear(&settings->info.data);
   14c2e:	687b      	ldr	r3, [r7, #4]
   14c30:	33cc      	adds	r3, #204	; 0xcc
   14c32:	4618      	mov	r0, r3
   14c34:	f7ee fd96 	bl	3764 <bb_clear>
		if (equal)
   14c38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d039      	beq.n	14cb4 <invoke_AssociationLogicalName+0x170>
		{
			if (settings->base.authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
   14c40:	687b      	ldr	r3, [r7, #4]
   14c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14c46:	2b05      	cmp	r3, #5
   14c48:	d106      	bne.n	14c58 <invoke_AssociationLogicalName+0x114>
			{
#ifndef DLMS_IGNORE_HIGH_GMAC
				readSecret = &settings->base.cipher.systemTitle;
   14c4a:	687b      	ldr	r3, [r7, #4]
   14c4c:	3398      	adds	r3, #152	; 0x98
   14c4e:	64bb      	str	r3, [r7, #72]	; 0x48
				ic = settings->base.cipher.invocationCounter;
   14c50:	687b      	ldr	r3, [r7, #4]
   14c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   14c56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif //DLMS_IGNORE_HIGH_GMAC
			}
			e->byteArray = 1;
   14c58:	683b      	ldr	r3, [r7, #0]
   14c5a:	2201      	movs	r2, #1
   14c5c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			if ((ret = dlms_secure(&settings->base,
   14c60:	6878      	ldr	r0, [r7, #4]
   14c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14c64:	4619      	mov	r1, r3
   14c66:	687b      	ldr	r3, [r7, #4]
   14c68:	1d1a      	adds	r2, r3, #4
   14c6a:	687b      	ldr	r3, [r7, #4]
   14c6c:	33cc      	adds	r3, #204	; 0xcc
   14c6e:	9300      	str	r3, [sp, #0]
   14c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14c72:	f7f6 fcdd 	bl	b630 <dlms_secure>
   14c76:	64f8      	str	r0, [r7, #76]	; 0x4c
   14c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d001      	beq.n	14c82 <invoke_AssociationLogicalName+0x13e>
				ic,
				&settings->base.ctoSChallenge,
				readSecret,
				&settings->info.data)) != 0)
			{
				return ret;
   14c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c80:	e10e      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
			}
			bb_insertUInt8(&settings->info.data, 0, DLMS_DATA_TYPE_OCTET_STRING);
   14c82:	687b      	ldr	r3, [r7, #4]
   14c84:	33cc      	adds	r3, #204	; 0xcc
   14c86:	2209      	movs	r2, #9
   14c88:	2100      	movs	r1, #0
   14c8a:	4618      	mov	r0, r3
   14c8c:	f7ee f8de 	bl	2e4c <bb_insertUInt8>
			bb_insertUInt8(&settings->info.data, 1, (unsigned char)(settings->info.data.size - 1));
   14c90:	687b      	ldr	r3, [r7, #4]
   14c92:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
   14c96:	687b      	ldr	r3, [r7, #4]
   14c98:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
   14c9c:	b2db      	uxtb	r3, r3
   14c9e:	3b01      	subs	r3, #1
   14ca0:	b2db      	uxtb	r3, r3
   14ca2:	461a      	mov	r2, r3
   14ca4:	2101      	movs	r1, #1
   14ca6:	f7ee f8d1 	bl	2e4c <bb_insertUInt8>
			((gxAssociationLogicalName*)e->target)->associationStatus = DLMS_ASSOCIATION_STATUS_ASSOCIATED;
   14caa:	683b      	ldr	r3, [r7, #0]
   14cac:	695b      	ldr	r3, [r3, #20]
   14cae:	2202      	movs	r2, #2
   14cb0:	741a      	strb	r2, [r3, #16]
   14cb2:	e0f4      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
		else
		{
			((gxAssociationLogicalName*)e->target)->associationStatus = DLMS_ASSOCIATION_STATUS_NON_ASSOCIATED;
   14cb4:	683b      	ldr	r3, [r7, #0]
   14cb6:	695b      	ldr	r3, [r3, #20]
   14cb8:	2200      	movs	r2, #0
   14cba:	741a      	strb	r2, [r3, #16]
   14cbc:	e0ef      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
	}
	else if (e->index == 2)
   14cbe:	683b      	ldr	r3, [r7, #0]
   14cc0:	7e1b      	ldrb	r3, [r3, #24]
   14cc2:	2b02      	cmp	r3, #2
   14cc4:	d11b      	bne.n	14cfe <invoke_AssociationLogicalName+0x1ba>
	{
		if (e->parameters.byteArr->size == 0)
   14cc6:	683b      	ldr	r3, [r7, #0]
   14cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14cca:	88db      	ldrh	r3, [r3, #6]
   14ccc:	2b00      	cmp	r3, #0
   14cce:	d102      	bne.n	14cd6 <invoke_AssociationLogicalName+0x192>
		{
			ret = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   14cd0:	2303      	movs	r3, #3
   14cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   14cd4:	e0e3      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
		else
		{
			bb_clear(&((gxAssociationLogicalName*)e->target)->secret);
   14cd6:	683b      	ldr	r3, [r7, #0]
   14cd8:	695b      	ldr	r3, [r3, #20]
   14cda:	3354      	adds	r3, #84	; 0x54
   14cdc:	4618      	mov	r0, r3
   14cde:	f7ee fd41 	bl	3764 <bb_clear>
			bb_set(&((gxAssociationLogicalName*)e->target)->secret, e->parameters.byteArr->data, e->parameters.byteArr->size);
   14ce2:	683b      	ldr	r3, [r7, #0]
   14ce4:	695b      	ldr	r3, [r3, #20]
   14ce6:	f103 0054 	add.w	r0, r3, #84	; 0x54
   14cea:	683b      	ldr	r3, [r7, #0]
   14cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14cee:	6819      	ldr	r1, [r3, #0]
   14cf0:	683b      	ldr	r3, [r7, #0]
   14cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14cf4:	88db      	ldrh	r3, [r3, #6]
   14cf6:	461a      	mov	r2, r3
   14cf8:	f7ee fc32 	bl	3560 <bb_set>
   14cfc:	e0cf      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
	}
	else if (e->index == 5)
   14cfe:	683b      	ldr	r3, [r7, #0]
   14d00:	7e1b      	ldrb	r3, [r3, #24]
   14d02:	2b05      	cmp	r3, #5
   14d04:	d15f      	bne.n	14dc6 <invoke_AssociationLogicalName+0x282>
	{
		if (e->parameters.vt != DLMS_DATA_TYPE_STRUCTURE || e->parameters.Arr->size != 2)
   14d06:	683b      	ldr	r3, [r7, #0]
   14d08:	f893 3020 	ldrb.w	r3, [r3, #32]
   14d0c:	2b02      	cmp	r3, #2
   14d0e:	d104      	bne.n	14d1a <invoke_AssociationLogicalName+0x1d6>
   14d10:	683b      	ldr	r3, [r7, #0]
   14d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d14:	88db      	ldrh	r3, [r3, #6]
   14d16:	2b02      	cmp	r3, #2
   14d18:	d002      	beq.n	14d20 <invoke_AssociationLogicalName+0x1dc>
		{
			ret = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   14d1a:	2303      	movs	r3, #3
   14d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   14d1e:	e0be      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
		else
		{
			dlmsVARIANT* tmp;
			char* name;
			gxKey2* it = (gxKey2*)gxmalloc(sizeof(gxKey2));
   14d20:	2008      	movs	r0, #8
   14d22:	f014 fe8f 	bl	29a44 <malloc>
   14d26:	4603      	mov	r3, r0
   14d28:	63fb      	str	r3, [r7, #60]	; 0x3c
			if ((ret = va_get(e->parameters.Arr, &tmp)) != 0)
   14d2a:	683b      	ldr	r3, [r7, #0]
   14d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d2e:	f107 0214 	add.w	r2, r7, #20
   14d32:	4611      	mov	r1, r2
   14d34:	4618      	mov	r0, r3
   14d36:	f012 f873 	bl	26e20 <va_get>
   14d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
   14d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d004      	beq.n	14d4c <invoke_AssociationLogicalName+0x208>
			{
				gxfree(it);
   14d42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14d44:	f014 fe86 	bl	29a54 <free>
				return ret;
   14d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d4a:	e0a9      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
			}
			it->key = tmp->bVal;
   14d4c:	697b      	ldr	r3, [r7, #20]
   14d4e:	7a1a      	ldrb	r2, [r3, #8]
   14d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d52:	701a      	strb	r2, [r3, #0]
			if ((ret = va_get(e->parameters.Arr, &tmp)) != 0)
   14d54:	683b      	ldr	r3, [r7, #0]
   14d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d58:	f107 0214 	add.w	r2, r7, #20
   14d5c:	4611      	mov	r1, r2
   14d5e:	4618      	mov	r0, r3
   14d60:	f012 f85e 	bl	26e20 <va_get>
   14d64:	64f8      	str	r0, [r7, #76]	; 0x4c
   14d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d68:	2b00      	cmp	r3, #0
   14d6a:	d004      	beq.n	14d76 <invoke_AssociationLogicalName+0x232>
			{
				gxfree(it);
   14d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14d6e:	f014 fe71 	bl	29a54 <free>
				return ret;
   14d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d74:	e094      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
			}
			name = gxmalloc(tmp->strVal->size + 1);
   14d76:	697b      	ldr	r3, [r7, #20]
   14d78:	689b      	ldr	r3, [r3, #8]
   14d7a:	88db      	ldrh	r3, [r3, #6]
   14d7c:	3301      	adds	r3, #1
   14d7e:	4618      	mov	r0, r3
   14d80:	f014 fe60 	bl	29a44 <malloc>
   14d84:	4603      	mov	r3, r0
   14d86:	63bb      	str	r3, [r7, #56]	; 0x38
			it->value = name;
   14d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14d8c:	605a      	str	r2, [r3, #4]
			*(name + tmp->strVal->size) = '\0';
   14d8e:	697b      	ldr	r3, [r7, #20]
   14d90:	689b      	ldr	r3, [r3, #8]
   14d92:	88db      	ldrh	r3, [r3, #6]
   14d94:	461a      	mov	r2, r3
   14d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d98:	4413      	add	r3, r2
   14d9a:	2200      	movs	r2, #0
   14d9c:	701a      	strb	r2, [r3, #0]
			memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
   14d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14da0:	6858      	ldr	r0, [r3, #4]
   14da2:	697b      	ldr	r3, [r7, #20]
   14da4:	689b      	ldr	r3, [r3, #8]
   14da6:	6819      	ldr	r1, [r3, #0]
   14da8:	697b      	ldr	r3, [r7, #20]
   14daa:	689b      	ldr	r3, [r3, #8]
   14dac:	88db      	ldrh	r3, [r3, #6]
   14dae:	461a      	mov	r2, r3
   14db0:	f014 fe67 	bl	29a82 <memcpy>
			ret = arr_push(&((gxAssociationLogicalName*)e->target)->userList, it);
   14db4:	683b      	ldr	r3, [r7, #0]
   14db6:	695b      	ldr	r3, [r3, #20]
   14db8:	3368      	adds	r3, #104	; 0x68
   14dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14dbc:	4618      	mov	r0, r3
   14dbe:	f7f7 fc5f 	bl	c680 <arr_push>
   14dc2:	64f8      	str	r0, [r7, #76]	; 0x4c
   14dc4:	e06b      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
		}
	}
	else if (e->index == 6)
   14dc6:	683b      	ldr	r3, [r7, #0]
   14dc8:	7e1b      	ldrb	r3, [r3, #24]
   14dca:	2b06      	cmp	r3, #6
   14dcc:	d165      	bne.n	14e9a <invoke_AssociationLogicalName+0x356>
	{
		if (e->parameters.Arr->size != 2)
   14dce:	683b      	ldr	r3, [r7, #0]
   14dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14dd2:	88db      	ldrh	r3, [r3, #6]
   14dd4:	2b02      	cmp	r3, #2
   14dd6:	d001      	beq.n	14ddc <invoke_AssociationLogicalName+0x298>
		{
			return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   14dd8:	2303      	movs	r3, #3
   14dda:	e061      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
			gxKey2* it;
			int pos;
			unsigned char id;
			dlmsVARIANT* tmp;
			unsigned char* name;
			ret = va_get(e->parameters.Arr, &tmp);
   14ddc:	683b      	ldr	r3, [r7, #0]
   14dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14de0:	f107 020c 	add.w	r2, r7, #12
   14de4:	4611      	mov	r1, r2
   14de6:	4618      	mov	r0, r3
   14de8:	f012 f81a 	bl	26e20 <va_get>
   14dec:	64f8      	str	r0, [r7, #76]	; 0x4c
			id = tmp->bVal;
   14dee:	68fb      	ldr	r3, [r7, #12]
   14df0:	7a1b      	ldrb	r3, [r3, #8]
   14df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			ret = va_get(e->parameters.Arr, &tmp);
   14df6:	683b      	ldr	r3, [r7, #0]
   14df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14dfa:	f107 020c 	add.w	r2, r7, #12
   14dfe:	4611      	mov	r1, r2
   14e00:	4618      	mov	r0, r3
   14e02:	f012 f80d 	bl	26e20 <va_get>
   14e06:	64f8      	str	r0, [r7, #76]	; 0x4c
			name = tmp->strVal->data;
   14e08:	68fb      	ldr	r3, [r7, #12]
   14e0a:	689b      	ldr	r3, [r3, #8]
   14e0c:	681b      	ldr	r3, [r3, #0]
   14e0e:	633b      	str	r3, [r7, #48]	; 0x30
			int len = tmp->strVal->size;
   14e10:	68fb      	ldr	r3, [r7, #12]
   14e12:	689b      	ldr	r3, [r3, #8]
   14e14:	88db      	ldrh	r3, [r3, #6]
   14e16:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (pos = 0; pos != ((gxAssociationLogicalName*)e->target)->userList.size; ++pos)
   14e18:	2300      	movs	r3, #0
   14e1a:	647b      	str	r3, [r7, #68]	; 0x44
   14e1c:	e034      	b.n	14e88 <invoke_AssociationLogicalName+0x344>
			{
				ret = arr_getByIndex(&((gxAssociationLogicalName*)e->target)->userList, pos, (void**)& it);
   14e1e:	683b      	ldr	r3, [r7, #0]
   14e20:	695b      	ldr	r3, [r3, #20]
   14e22:	3368      	adds	r3, #104	; 0x68
   14e24:	f107 0210 	add.w	r2, r7, #16
   14e28:	6c79      	ldr	r1, [r7, #68]	; 0x44
   14e2a:	4618      	mov	r0, r3
   14e2c:	f7f7 fce6 	bl	c7fc <arr_getByIndex>
   14e30:	64f8      	str	r0, [r7, #76]	; 0x4c
				if (ret != 0)
   14e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14e34:	2b00      	cmp	r3, #0
   14e36:	d001      	beq.n	14e3c <invoke_AssociationLogicalName+0x2f8>
				{
					return ret;
   14e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14e3a:	e031      	b.n	14ea0 <invoke_AssociationLogicalName+0x35c>
				}
				if (it->key == id && memcmp(it->value, name, len) == 0)
   14e3c:	693b      	ldr	r3, [r7, #16]
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
   14e44:	429a      	cmp	r2, r3
   14e46:	d11c      	bne.n	14e82 <invoke_AssociationLogicalName+0x33e>
   14e48:	693b      	ldr	r3, [r7, #16]
   14e4a:	685b      	ldr	r3, [r3, #4]
   14e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   14e50:	4618      	mov	r0, r3
   14e52:	f014 fe07 	bl	29a64 <memcmp>
   14e56:	4603      	mov	r3, r0
   14e58:	2b00      	cmp	r3, #0
   14e5a:	d112      	bne.n	14e82 <invoke_AssociationLogicalName+0x33e>
				{
					arr_removeByIndex(&((gxAssociationLogicalName*)e->target)->userList, pos, (void**)& it);
   14e5c:	683b      	ldr	r3, [r7, #0]
   14e5e:	695b      	ldr	r3, [r3, #20]
   14e60:	3368      	adds	r3, #104	; 0x68
   14e62:	f107 0210 	add.w	r2, r7, #16
   14e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
   14e68:	4618      	mov	r0, r3
   14e6a:	f7f7 fd5b 	bl	c924 <arr_removeByIndex>
					gxfree(it->value);
   14e6e:	693b      	ldr	r3, [r7, #16]
   14e70:	685b      	ldr	r3, [r3, #4]
   14e72:	4618      	mov	r0, r3
   14e74:	f014 fdee 	bl	29a54 <free>
					gxfree(it);
   14e78:	693b      	ldr	r3, [r7, #16]
   14e7a:	4618      	mov	r0, r3
   14e7c:	f014 fdea 	bl	29a54 <free>
					break;
   14e80:	e00d      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
			ret = va_get(e->parameters.Arr, &tmp);
			id = tmp->bVal;
			ret = va_get(e->parameters.Arr, &tmp);
			name = tmp->strVal->data;
			int len = tmp->strVal->size;
			for (pos = 0; pos != ((gxAssociationLogicalName*)e->target)->userList.size; ++pos)
   14e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e84:	3301      	adds	r3, #1
   14e86:	647b      	str	r3, [r7, #68]	; 0x44
   14e88:	683b      	ldr	r3, [r7, #0]
   14e8a:	695b      	ldr	r3, [r3, #20]
   14e8c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
   14e90:	461a      	mov	r2, r3
   14e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e94:	429a      	cmp	r2, r3
   14e96:	d1c2      	bne.n	14e1e <invoke_AssociationLogicalName+0x2da>
   14e98:	e001      	b.n	14e9e <invoke_AssociationLogicalName+0x35a>
			}
		}
	}
	else
	{
		ret = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   14e9a:	2303      	movs	r3, #3
   14e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	return ret;
   14e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
   14ea0:	4618      	mov	r0, r3
   14ea2:	3750      	adds	r7, #80	; 0x50
   14ea4:	46bd      	mov	sp, r7
   14ea6:	bd80      	pop	{r7, pc}

00014ea8 <invoke_ImageTransfer>:

#ifndef DLMS_IGNORE_IMAGE_TRANSFER
int invoke_ImageTransfer(
	gxImageTransfer * target,
	gxValueEventArg * e)
{
   14ea8:	b590      	push	{r4, r7, lr}
   14eaa:	b08d      	sub	sp, #52	; 0x34
   14eac:	af00      	add	r7, sp, #0
   14eae:	6078      	str	r0, [r7, #4]
   14eb0:	6039      	str	r1, [r7, #0]
	int pos, ret;
	//Image transfer initiate
	if (e->index == 1)
   14eb2:	683b      	ldr	r3, [r7, #0]
   14eb4:	7e1b      	ldrb	r3, [r3, #24]
   14eb6:	2b01      	cmp	r3, #1
   14eb8:	f040 80ca 	bne.w	15050 <invoke_ImageTransfer+0x1a8>
	{
		gxImageActivateInfo* it, * item = NULL;
   14ebc:	2300      	movs	r3, #0
   14ebe:	627b      	str	r3, [r7, #36]	; 0x24
		target->imageFirstNotTransferredBlockNumber = 0;
   14ec0:	687b      	ldr	r3, [r7, #4]
   14ec2:	2200      	movs	r2, #0
   14ec4:	621a      	str	r2, [r3, #32]
		ba_clear(&target->imageTransferredBlocksStatus);
   14ec6:	687b      	ldr	r3, [r7, #4]
   14ec8:	3314      	adds	r3, #20
   14eca:	4618      	mov	r0, r3
   14ecc:	f7ed fe1c 	bl	2b08 <ba_clear>

		dlmsVARIANT* imageIdentifier, * size;
		if ((ret = va_getByIndex(e->parameters.Arr, 0, &imageIdentifier)) != 0 ||
   14ed0:	683b      	ldr	r3, [r7, #0]
   14ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ed4:	f107 0214 	add.w	r2, r7, #20
   14ed8:	2100      	movs	r1, #0
   14eda:	4618      	mov	r0, r3
   14edc:	f011 ffc6 	bl	26e6c <va_getByIndex>
   14ee0:	62b8      	str	r0, [r7, #40]	; 0x28
   14ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ee4:	2b00      	cmp	r3, #0
   14ee6:	d10b      	bne.n	14f00 <invoke_ImageTransfer+0x58>
			(ret = va_getByIndex(e->parameters.Arr, 1, &size)) != 0)
   14ee8:	683b      	ldr	r3, [r7, #0]
   14eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		gxImageActivateInfo* it, * item = NULL;
		target->imageFirstNotTransferredBlockNumber = 0;
		ba_clear(&target->imageTransferredBlocksStatus);

		dlmsVARIANT* imageIdentifier, * size;
		if ((ret = va_getByIndex(e->parameters.Arr, 0, &imageIdentifier)) != 0 ||
   14eec:	f107 0210 	add.w	r2, r7, #16
   14ef0:	2101      	movs	r1, #1
   14ef2:	4618      	mov	r0, r3
   14ef4:	f011 ffba 	bl	26e6c <va_getByIndex>
   14ef8:	62b8      	str	r0, [r7, #40]	; 0x28
   14efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14efc:	2b00      	cmp	r3, #0
   14efe:	d004      	beq.n	14f0a <invoke_ImageTransfer+0x62>
			(ret = va_getByIndex(e->parameters.Arr, 1, &size)) != 0)
		{
			e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   14f00:	683b      	ldr	r3, [r7, #0]
   14f02:	2201      	movs	r2, #1
   14f04:	861a      	strh	r2, [r3, #48]	; 0x30
			return ret;
   14f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f08:	e0dd      	b.n	150c6 <invoke_ImageTransfer+0x21e>
		}
		target->imageTransferStatus = DLMS_IMAGE_TRANSFER_STATUS_INITIATED;
   14f0a:	687b      	ldr	r3, [r7, #4]
   14f0c:	2201      	movs	r2, #1
   14f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		unsigned char exists = 0;
   14f12:	2300      	movs	r3, #0
   14f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (pos = 0; pos != target->imageActivateInfo.size; ++pos)
   14f18:	2300      	movs	r3, #0
   14f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   14f1c:	e023      	b.n	14f66 <invoke_ImageTransfer+0xbe>
		{
			if ((ret = arr_getByIndex(&target->imageActivateInfo, pos, (void**)& it)) != 0)
   14f1e:	687b      	ldr	r3, [r7, #4]
   14f20:	3328      	adds	r3, #40	; 0x28
   14f22:	f107 0218 	add.w	r2, r7, #24
   14f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14f28:	4618      	mov	r0, r3
   14f2a:	f7f7 fc67 	bl	c7fc <arr_getByIndex>
   14f2e:	62b8      	str	r0, [r7, #40]	; 0x28
   14f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f32:	2b00      	cmp	r3, #0
   14f34:	d001      	beq.n	14f3a <invoke_ImageTransfer+0x92>
			{
				return ret;
   14f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f38:	e0c5      	b.n	150c6 <invoke_ImageTransfer+0x21e>
			}
			if (bb_compare(&it->identification, imageIdentifier->byteArr->data, imageIdentifier->byteArr->size))
   14f3a:	69bb      	ldr	r3, [r7, #24]
   14f3c:	1d18      	adds	r0, r3, #4
   14f3e:	697b      	ldr	r3, [r7, #20]
   14f40:	689b      	ldr	r3, [r3, #8]
   14f42:	6819      	ldr	r1, [r3, #0]
   14f44:	697b      	ldr	r3, [r7, #20]
   14f46:	689b      	ldr	r3, [r3, #8]
   14f48:	88db      	ldrh	r3, [r3, #6]
   14f4a:	461a      	mov	r2, r3
   14f4c:	f7ef f81e 	bl	3f8c <bb_compare>
   14f50:	4603      	mov	r3, r0
   14f52:	2b00      	cmp	r3, #0
   14f54:	d004      	beq.n	14f60 <invoke_ImageTransfer+0xb8>
			{
				item = it;
   14f56:	69bb      	ldr	r3, [r7, #24]
   14f58:	627b      	str	r3, [r7, #36]	; 0x24
				exists = 1;
   14f5a:	2301      	movs	r3, #1
   14f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
			return ret;
		}
		target->imageTransferStatus = DLMS_IMAGE_TRANSFER_STATUS_INITIATED;
		unsigned char exists = 0;
		for (pos = 0; pos != target->imageActivateInfo.size; ++pos)
   14f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f62:	3301      	adds	r3, #1
   14f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   14f66:	687b      	ldr	r3, [r7, #4]
   14f68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14f6a:	461a      	mov	r2, r3
   14f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f6e:	429a      	cmp	r2, r3
   14f70:	d1d5      	bne.n	14f1e <invoke_ImageTransfer+0x76>
			{
				item = it;
				exists = 1;
			}
		}
		if (!exists)
   14f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   14f76:	2b00      	cmp	r3, #0
   14f78:	d10f      	bne.n	14f9a <invoke_ImageTransfer+0xf2>
		{
			item = (gxImageActivateInfo*)gxmalloc(sizeof(gxImageActivateInfo));
   14f7a:	201c      	movs	r0, #28
   14f7c:	f014 fd62 	bl	29a44 <malloc>
   14f80:	4603      	mov	r3, r0
   14f82:	627b      	str	r3, [r7, #36]	; 0x24
			bb_init(&item->identification);
   14f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f86:	3304      	adds	r3, #4
   14f88:	4618      	mov	r0, r3
   14f8a:	f7ed fead 	bl	2ce8 <bb_init>
			bb_init(&item->signature);
   14f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f90:	3310      	adds	r3, #16
   14f92:	4618      	mov	r0, r3
   14f94:	f7ed fea8 	bl	2ce8 <bb_init>
   14f98:	e009      	b.n	14fae <invoke_ImageTransfer+0x106>
		}
		else
		{
			bb_clear(&item->identification);
   14f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f9c:	3304      	adds	r3, #4
   14f9e:	4618      	mov	r0, r3
   14fa0:	f7ee fbe0 	bl	3764 <bb_clear>
			bb_clear(&item->signature);
   14fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fa6:	3310      	adds	r3, #16
   14fa8:	4618      	mov	r0, r3
   14faa:	f7ee fbdb 	bl	3764 <bb_clear>
		}
		item->size = var_toInteger(size);
   14fae:	693b      	ldr	r3, [r7, #16]
   14fb0:	4618      	mov	r0, r3
   14fb2:	f011 fd8b 	bl	26acc <var_toInteger>
   14fb6:	4602      	mov	r2, r0
   14fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fba:	601a      	str	r2, [r3, #0]
		bb_set2(&item->identification, imageIdentifier->byteArr, 0, imageIdentifier->byteArr->size);
   14fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fbe:	1d18      	adds	r0, r3, #4
   14fc0:	697b      	ldr	r3, [r7, #20]
   14fc2:	6899      	ldr	r1, [r3, #8]
   14fc4:	697b      	ldr	r3, [r7, #20]
   14fc6:	689b      	ldr	r3, [r3, #8]
   14fc8:	88db      	ldrh	r3, [r3, #6]
   14fca:	2200      	movs	r2, #0
   14fcc:	f7ee fb28 	bl	3620 <bb_set2>
		if (!exists)
   14fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   14fd4:	2b00      	cmp	r3, #0
   14fd6:	d105      	bne.n	14fe4 <invoke_ImageTransfer+0x13c>
		{
			arr_push(&target->imageActivateInfo, item);
   14fd8:	687b      	ldr	r3, [r7, #4]
   14fda:	3328      	adds	r3, #40	; 0x28
   14fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14fde:	4618      	mov	r0, r3
   14fe0:	f7f7 fb4e 	bl	c680 <arr_push>
		}
		int cnt = item->size / target->imageBlockSize;
   14fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fe6:	681b      	ldr	r3, [r3, #0]
   14fe8:	461a      	mov	r2, r3
   14fea:	687b      	ldr	r3, [r7, #4]
   14fec:	691b      	ldr	r3, [r3, #16]
   14fee:	fbb2 f3f3 	udiv	r3, r2, r3
   14ff2:	61fb      	str	r3, [r7, #28]
		if (item->size % target->imageBlockSize != 0)
   14ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ff6:	681b      	ldr	r3, [r3, #0]
   14ff8:	461a      	mov	r2, r3
   14ffa:	687b      	ldr	r3, [r7, #4]
   14ffc:	691b      	ldr	r3, [r3, #16]
   14ffe:	fbb2 f1f3 	udiv	r1, r2, r3
   15002:	fb03 f301 	mul.w	r3, r3, r1
   15006:	1ad3      	subs	r3, r2, r3
   15008:	2b00      	cmp	r3, #0
   1500a:	d002      	beq.n	15012 <invoke_ImageTransfer+0x16a>
		{
			++cnt;
   1500c:	69fb      	ldr	r3, [r7, #28]
   1500e:	3301      	adds	r3, #1
   15010:	61fb      	str	r3, [r7, #28]
		}
#ifndef GX_DLMS_MICROCONTROLLER
		target->imageTransferredBlocksStatus.position = 0;
   15012:	687b      	ldr	r3, [r7, #4]
   15014:	2200      	movs	r2, #0
   15016:	839a      	strh	r2, [r3, #28]
#endif //GX_DLMS_MICROCONTROLLER
		target->imageTransferredBlocksStatus.size = 0;
   15018:	687b      	ldr	r3, [r7, #4]
   1501a:	2200      	movs	r2, #0
   1501c:	835a      	strh	r2, [r3, #26]
		ba_capacity(&target->imageTransferredBlocksStatus, (unsigned short)cnt);
   1501e:	687b      	ldr	r3, [r7, #4]
   15020:	3314      	adds	r3, #20
   15022:	69fa      	ldr	r2, [r7, #28]
   15024:	b292      	uxth	r2, r2
   15026:	4611      	mov	r1, r2
   15028:	4618      	mov	r0, r3
   1502a:	f7ed fbfb 	bl	2824 <ba_capacity>
		for (pos = 0; pos != cnt; ++pos)
   1502e:	2300      	movs	r3, #0
   15030:	62fb      	str	r3, [r7, #44]	; 0x2c
   15032:	e008      	b.n	15046 <invoke_ImageTransfer+0x19e>
		{
			ba_set(&target->imageTransferredBlocksStatus, 0);
   15034:	687b      	ldr	r3, [r7, #4]
   15036:	3314      	adds	r3, #20
   15038:	2100      	movs	r1, #0
   1503a:	4618      	mov	r0, r3
   1503c:	f7ed fc30 	bl	28a0 <ba_set>
#ifndef GX_DLMS_MICROCONTROLLER
		target->imageTransferredBlocksStatus.position = 0;
#endif //GX_DLMS_MICROCONTROLLER
		target->imageTransferredBlocksStatus.size = 0;
		ba_capacity(&target->imageTransferredBlocksStatus, (unsigned short)cnt);
		for (pos = 0; pos != cnt; ++pos)
   15040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15042:	3301      	adds	r3, #1
   15044:	62fb      	str	r3, [r7, #44]	; 0x2c
   15046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15048:	69fb      	ldr	r3, [r7, #28]
   1504a:	429a      	cmp	r2, r3
   1504c:	d1f2      	bne.n	15034 <invoke_ImageTransfer+0x18c>
   1504e:	e039      	b.n	150c4 <invoke_ImageTransfer+0x21c>
		{
			ba_set(&target->imageTransferredBlocksStatus, 0);
		}
	}
	//Image block transfer
	else if (e->index == 2)
   15050:	683b      	ldr	r3, [r7, #0]
   15052:	7e1b      	ldrb	r3, [r3, #24]
   15054:	2b02      	cmp	r3, #2
   15056:	d12b      	bne.n	150b0 <invoke_ImageTransfer+0x208>
	{
		dlmsVARIANT* imageIndex;
		if ((ret = va_getByIndex(e->parameters.Arr, 0, &imageIndex)) != 0)
   15058:	683b      	ldr	r3, [r7, #0]
   1505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1505c:	f107 020c 	add.w	r2, r7, #12
   15060:	2100      	movs	r1, #0
   15062:	4618      	mov	r0, r3
   15064:	f011 ff02 	bl	26e6c <va_getByIndex>
   15068:	62b8      	str	r0, [r7, #40]	; 0x28
   1506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1506c:	2b00      	cmp	r3, #0
   1506e:	d004      	beq.n	1507a <invoke_ImageTransfer+0x1d2>
		{
			e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   15070:	683b      	ldr	r3, [r7, #0]
   15072:	2201      	movs	r2, #1
   15074:	861a      	strh	r2, [r3, #48]	; 0x30
			return ret;
   15076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15078:	e025      	b.n	150c6 <invoke_ImageTransfer+0x21e>
		}
		ba_setByIndex(&target->imageTransferredBlocksStatus, var_toInteger(imageIndex), 1);
   1507a:	687b      	ldr	r3, [r7, #4]
   1507c:	f103 0414 	add.w	r4, r3, #20
   15080:	68fb      	ldr	r3, [r7, #12]
   15082:	4618      	mov	r0, r3
   15084:	f011 fd22 	bl	26acc <var_toInteger>
   15088:	4603      	mov	r3, r0
   1508a:	2201      	movs	r2, #1
   1508c:	4619      	mov	r1, r3
   1508e:	4620      	mov	r0, r4
   15090:	f7ed fc1e 	bl	28d0 <ba_setByIndex>
		target->imageFirstNotTransferredBlockNumber = var_toInteger(imageIndex) + 1;
   15094:	68fb      	ldr	r3, [r7, #12]
   15096:	4618      	mov	r0, r3
   15098:	f011 fd18 	bl	26acc <var_toInteger>
   1509c:	4603      	mov	r3, r0
   1509e:	3301      	adds	r3, #1
   150a0:	461a      	mov	r2, r3
   150a2:	687b      	ldr	r3, [r7, #4]
   150a4:	621a      	str	r2, [r3, #32]
		target->imageTransferStatus = DLMS_IMAGE_TRANSFER_STATUS_INITIATED;
   150a6:	687b      	ldr	r3, [r7, #4]
   150a8:	2201      	movs	r2, #1
   150aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   150ae:	e009      	b.n	150c4 <invoke_ImageTransfer+0x21c>
	}
	//Image verify
	else if (e->index == 3)
   150b0:	683b      	ldr	r3, [r7, #0]
   150b2:	7e1b      	ldrb	r3, [r3, #24]
   150b4:	2b03      	cmp	r3, #3
   150b6:	d005      	beq.n	150c4 <invoke_ImageTransfer+0x21c>
	{
	}
	//Image activate.
	else if (e->index == 4)
   150b8:	683b      	ldr	r3, [r7, #0]
   150ba:	7e1b      	ldrb	r3, [r3, #24]
   150bc:	2b04      	cmp	r3, #4
   150be:	d001      	beq.n	150c4 <invoke_ImageTransfer+0x21c>
	{
	}
	else
	{
		return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   150c0:	2303      	movs	r3, #3
   150c2:	e000      	b.n	150c6 <invoke_ImageTransfer+0x21e>
	}
	return DLMS_ERROR_CODE_OK;
   150c4:	2300      	movs	r3, #0
}
   150c6:	4618      	mov	r0, r3
   150c8:	3734      	adds	r7, #52	; 0x34
   150ca:	46bd      	mov	sp, r7
   150cc:	bd90      	pop	{r4, r7, pc}
   150ce:	bf00      	nop

000150d0 <invoke_SapAssigment>:

#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int invoke_SapAssigment(
	gxSapAssignment * target,
	gxValueEventArg * e)
{
   150d0:	b580      	push	{r7, lr}
   150d2:	b088      	sub	sp, #32
   150d4:	af00      	add	r7, sp, #0
   150d6:	6078      	str	r0, [r7, #4]
   150d8:	6039      	str	r1, [r7, #0]
	dlmsVARIANT* tmp;
	int pos, ret;
	gxSapItem* it;
	//Image transfer initiate
	if (e->index == 1)
   150da:	683b      	ldr	r3, [r7, #0]
   150dc:	7e1b      	ldrb	r3, [r3, #24]
   150de:	2b01      	cmp	r3, #1
   150e0:	f040 8089 	bne.w	151f6 <invoke_SapAssigment+0x126>
	{
		if ((ret = va_getByIndex(e->parameters.Arr, 0, &tmp)))
   150e4:	683b      	ldr	r3, [r7, #0]
   150e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150e8:	f107 020c 	add.w	r2, r7, #12
   150ec:	2100      	movs	r1, #0
   150ee:	4618      	mov	r0, r3
   150f0:	f011 febc 	bl	26e6c <va_getByIndex>
   150f4:	6178      	str	r0, [r7, #20]
   150f6:	697b      	ldr	r3, [r7, #20]
   150f8:	2b00      	cmp	r3, #0
   150fa:	d001      	beq.n	15100 <invoke_SapAssigment+0x30>
		{
			return ret;
   150fc:	697b      	ldr	r3, [r7, #20]
   150fe:	e07d      	b.n	151fc <invoke_SapAssigment+0x12c>
		}
		unsigned short id = tmp->uiVal;
   15100:	68fb      	ldr	r3, [r7, #12]
   15102:	891b      	ldrh	r3, [r3, #8]
   15104:	827b      	strh	r3, [r7, #18]
		if ((ret = va_getByIndex(e->parameters.Arr, 1, &tmp)))
   15106:	683b      	ldr	r3, [r7, #0]
   15108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1510a:	f107 020c 	add.w	r2, r7, #12
   1510e:	2101      	movs	r1, #1
   15110:	4618      	mov	r0, r3
   15112:	f011 feab 	bl	26e6c <va_getByIndex>
   15116:	6178      	str	r0, [r7, #20]
   15118:	697b      	ldr	r3, [r7, #20]
   1511a:	2b00      	cmp	r3, #0
   1511c:	d001      	beq.n	15122 <invoke_SapAssigment+0x52>
		{
			return ret;
   1511e:	697b      	ldr	r3, [r7, #20]
   15120:	e06c      	b.n	151fc <invoke_SapAssigment+0x12c>
		}

		gxByteBuffer* name;
		if (tmp->vt == DLMS_DATA_TYPE_OCTET_STRING)
   15122:	68fb      	ldr	r3, [r7, #12]
   15124:	781b      	ldrb	r3, [r3, #0]
   15126:	2b09      	cmp	r3, #9
   15128:	d103      	bne.n	15132 <invoke_SapAssigment+0x62>
		{
			name = tmp->byteArr;
   1512a:	68fb      	ldr	r3, [r7, #12]
   1512c:	689b      	ldr	r3, [r3, #8]
   1512e:	61bb      	str	r3, [r7, #24]
   15130:	e002      	b.n	15138 <invoke_SapAssigment+0x68>
		}
		else
		{
			name = tmp->strVal;
   15132:	68fb      	ldr	r3, [r7, #12]
   15134:	689b      	ldr	r3, [r3, #8]
   15136:	61bb      	str	r3, [r7, #24]
		}
		if (id == 0)
   15138:	8a7b      	ldrh	r3, [r7, #18]
   1513a:	2b00      	cmp	r3, #0
   1513c:	d13d      	bne.n	151ba <invoke_SapAssigment+0xea>
		{
			for (pos = 0; pos != target->sapAssignmentList.size; ++pos)
   1513e:	2300      	movs	r3, #0
   15140:	61fb      	str	r3, [r7, #28]
   15142:	e033      	b.n	151ac <invoke_SapAssigment+0xdc>
			{
				if ((ret = arr_getByIndex(&target->sapAssignmentList, pos, (void**)& it)) != 0)
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	3310      	adds	r3, #16
   15148:	f107 0208 	add.w	r2, r7, #8
   1514c:	69f9      	ldr	r1, [r7, #28]
   1514e:	4618      	mov	r0, r3
   15150:	f7f7 fb54 	bl	c7fc <arr_getByIndex>
   15154:	6178      	str	r0, [r7, #20]
   15156:	697b      	ldr	r3, [r7, #20]
   15158:	2b00      	cmp	r3, #0
   1515a:	d001      	beq.n	15160 <invoke_SapAssigment+0x90>
				{
					return ret;
   1515c:	697b      	ldr	r3, [r7, #20]
   1515e:	e04d      	b.n	151fc <invoke_SapAssigment+0x12c>
				}
				it->name.position = 0;
   15160:	68bb      	ldr	r3, [r7, #8]
   15162:	2200      	movs	r2, #0
   15164:	819a      	strh	r2, [r3, #12]
				if (bb_compare(&it->name, name->data, name->size))
   15166:	68bb      	ldr	r3, [r7, #8]
   15168:	1d18      	adds	r0, r3, #4
   1516a:	69bb      	ldr	r3, [r7, #24]
   1516c:	6819      	ldr	r1, [r3, #0]
   1516e:	69bb      	ldr	r3, [r7, #24]
   15170:	88db      	ldrh	r3, [r3, #6]
   15172:	461a      	mov	r2, r3
   15174:	f7ee ff0a 	bl	3f8c <bb_compare>
   15178:	4603      	mov	r3, r0
   1517a:	2b00      	cmp	r3, #0
   1517c:	d013      	beq.n	151a6 <invoke_SapAssigment+0xd6>
				{
					ret = arr_removeByIndex(&target->sapAssignmentList, pos, (void**)& it);
   1517e:	687b      	ldr	r3, [r7, #4]
   15180:	3310      	adds	r3, #16
   15182:	f107 0208 	add.w	r2, r7, #8
   15186:	69f9      	ldr	r1, [r7, #28]
   15188:	4618      	mov	r0, r3
   1518a:	f7f7 fbcb 	bl	c924 <arr_removeByIndex>
   1518e:	6178      	str	r0, [r7, #20]
					bb_clear(&it->name);
   15190:	68bb      	ldr	r3, [r7, #8]
   15192:	3304      	adds	r3, #4
   15194:	4618      	mov	r0, r3
   15196:	f7ee fae5 	bl	3764 <bb_clear>
					gxfree(it);
   1519a:	68bb      	ldr	r3, [r7, #8]
   1519c:	4618      	mov	r0, r3
   1519e:	f014 fc59 	bl	29a54 <free>
					return ret;
   151a2:	697b      	ldr	r3, [r7, #20]
   151a4:	e02a      	b.n	151fc <invoke_SapAssigment+0x12c>
		{
			name = tmp->strVal;
		}
		if (id == 0)
		{
			for (pos = 0; pos != target->sapAssignmentList.size; ++pos)
   151a6:	69fb      	ldr	r3, [r7, #28]
   151a8:	3301      	adds	r3, #1
   151aa:	61fb      	str	r3, [r7, #28]
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	8b1b      	ldrh	r3, [r3, #24]
   151b0:	461a      	mov	r2, r3
   151b2:	69fb      	ldr	r3, [r7, #28]
   151b4:	429a      	cmp	r2, r3
   151b6:	d1c5      	bne.n	15144 <invoke_SapAssigment+0x74>
   151b8:	e01f      	b.n	151fa <invoke_SapAssigment+0x12a>
				}
			}
		}
		else
		{
			it = (gxSapItem*)gxmalloc(sizeof(gxSapItem));
   151ba:	2010      	movs	r0, #16
   151bc:	f014 fc42 	bl	29a44 <malloc>
   151c0:	4603      	mov	r3, r0
   151c2:	60bb      	str	r3, [r7, #8]
			it->id = id;
   151c4:	68bb      	ldr	r3, [r7, #8]
   151c6:	8a7a      	ldrh	r2, [r7, #18]
   151c8:	801a      	strh	r2, [r3, #0]
			bb_init(&it->name);
   151ca:	68bb      	ldr	r3, [r7, #8]
   151cc:	3304      	adds	r3, #4
   151ce:	4618      	mov	r0, r3
   151d0:	f7ed fd8a 	bl	2ce8 <bb_init>
			bb_set(&it->name, name->data, name->size);
   151d4:	68bb      	ldr	r3, [r7, #8]
   151d6:	1d18      	adds	r0, r3, #4
   151d8:	69bb      	ldr	r3, [r7, #24]
   151da:	6819      	ldr	r1, [r3, #0]
   151dc:	69bb      	ldr	r3, [r7, #24]
   151de:	88db      	ldrh	r3, [r3, #6]
   151e0:	461a      	mov	r2, r3
   151e2:	f7ee f9bd 	bl	3560 <bb_set>
			arr_push(&target->sapAssignmentList, it);
   151e6:	687b      	ldr	r3, [r7, #4]
   151e8:	3310      	adds	r3, #16
   151ea:	68ba      	ldr	r2, [r7, #8]
   151ec:	4611      	mov	r1, r2
   151ee:	4618      	mov	r0, r3
   151f0:	f7f7 fa46 	bl	c680 <arr_push>
   151f4:	e001      	b.n	151fa <invoke_SapAssigment+0x12a>
		}
	}
	else
	{
		return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   151f6:	2303      	movs	r3, #3
   151f8:	e000      	b.n	151fc <invoke_SapAssigment+0x12c>
	}
	return DLMS_ERROR_CODE_OK;
   151fa:	2300      	movs	r3, #0
}
   151fc:	4618      	mov	r0, r3
   151fe:	3720      	adds	r7, #32
   15200:	46bd      	mov	sp, r7
   15202:	bd80      	pop	{r7, pc}

00015204 <invoke_AssociationShortName>:

#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int invoke_AssociationShortName(
	dlmsServerSettings * settings,
	gxValueEventArg * e)
{
   15204:	b580      	push	{r7, lr}
   15206:	b08a      	sub	sp, #40	; 0x28
   15208:	af02      	add	r7, sp, #8
   1520a:	6078      	str	r0, [r7, #4]
   1520c:	6039      	str	r1, [r7, #0]
	int ret;
	unsigned char equal;
	unsigned long ic = 0;
   1520e:	2300      	movs	r3, #0
   15210:	613b      	str	r3, [r7, #16]
	gxByteBuffer* readSecret;
	// Check reply_to_HLS_authentication
	if (e->index == 8)
   15212:	683b      	ldr	r3, [r7, #0]
   15214:	7e1b      	ldrb	r3, [r3, #24]
   15216:	2b08      	cmp	r3, #8
   15218:	f040 8096 	bne.w	15348 <invoke_AssociationShortName+0x144>
	{
		if (settings->base.authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
   1521c:	687b      	ldr	r3, [r7, #4]
   1521e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15222:	2b05      	cmp	r3, #5
   15224:	d121      	bne.n	1526a <invoke_AssociationShortName+0x66>
		{
			unsigned char ch;
			readSecret = &settings->base.sourceSystemTitle;
   15226:	687b      	ldr	r3, [r7, #4]
   15228:	331c      	adds	r3, #28
   1522a:	61bb      	str	r3, [r7, #24]
			if ((ret = bb_getUInt8(&settings->info.data, &ch)) != 0 ||
   1522c:	687b      	ldr	r3, [r7, #4]
   1522e:	33cc      	adds	r3, #204	; 0xcc
   15230:	f107 020f 	add.w	r2, r7, #15
   15234:	4611      	mov	r1, r2
   15236:	4618      	mov	r0, r3
   15238:	f7ee fab8 	bl	37ac <bb_getUInt8>
   1523c:	61f8      	str	r0, [r7, #28]
   1523e:	69fb      	ldr	r3, [r7, #28]
   15240:	2b00      	cmp	r3, #0
   15242:	d10b      	bne.n	1525c <invoke_AssociationShortName+0x58>
				(ret = bb_getUInt32(&settings->info.data, &ic)) != 0)
   15244:	687b      	ldr	r3, [r7, #4]
   15246:	33cc      	adds	r3, #204	; 0xcc
	{
		if (settings->base.authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
		{
			unsigned char ch;
			readSecret = &settings->base.sourceSystemTitle;
			if ((ret = bb_getUInt8(&settings->info.data, &ch)) != 0 ||
   15248:	f107 0210 	add.w	r2, r7, #16
   1524c:	4611      	mov	r1, r2
   1524e:	4618      	mov	r0, r3
   15250:	f7ee fb3e 	bl	38d0 <bb_getUInt32>
   15254:	61f8      	str	r0, [r7, #28]
   15256:	69fb      	ldr	r3, [r7, #28]
   15258:	2b00      	cmp	r3, #0
   1525a:	d00a      	beq.n	15272 <invoke_AssociationShortName+0x6e>
				(ret = bb_getUInt32(&settings->info.data, &ic)) != 0)
			{
				bb_clear(&settings->info.data);
   1525c:	687b      	ldr	r3, [r7, #4]
   1525e:	33cc      	adds	r3, #204	; 0xcc
   15260:	4618      	mov	r0, r3
   15262:	f7ee fa7f 	bl	3764 <bb_clear>
				return ret;
   15266:	69fb      	ldr	r3, [r7, #28]
   15268:	e06f      	b.n	1534a <invoke_AssociationShortName+0x146>
			}
		}
		else
		{
			readSecret = &((gxAssociationShortName*)e->target)->secret;
   1526a:	683b      	ldr	r3, [r7, #0]
   1526c:	695b      	ldr	r3, [r3, #20]
   1526e:	3324      	adds	r3, #36	; 0x24
   15270:	61bb      	str	r3, [r7, #24]
		}
		bb_clear(&settings->info.data);
   15272:	687b      	ldr	r3, [r7, #4]
   15274:	33cc      	adds	r3, #204	; 0xcc
   15276:	4618      	mov	r0, r3
   15278:	f7ee fa74 	bl	3764 <bb_clear>
		if ((ret = dlms_secure(&settings->base, ic,
   1527c:	6878      	ldr	r0, [r7, #4]
   1527e:	693b      	ldr	r3, [r7, #16]
   15280:	4619      	mov	r1, r3
   15282:	687b      	ldr	r3, [r7, #4]
   15284:	f103 0210 	add.w	r2, r3, #16
   15288:	687b      	ldr	r3, [r7, #4]
   1528a:	33cc      	adds	r3, #204	; 0xcc
   1528c:	9300      	str	r3, [sp, #0]
   1528e:	69bb      	ldr	r3, [r7, #24]
   15290:	f7f6 f9ce 	bl	b630 <dlms_secure>
   15294:	61f8      	str	r0, [r7, #28]
   15296:	69fb      	ldr	r3, [r7, #28]
   15298:	2b00      	cmp	r3, #0
   1529a:	d006      	beq.n	152aa <invoke_AssociationShortName+0xa6>
			&settings->base.stoCChallenge, readSecret, &settings->info.data)) != 0)
		{
			bb_clear(&settings->info.data);
   1529c:	687b      	ldr	r3, [r7, #4]
   1529e:	33cc      	adds	r3, #204	; 0xcc
   152a0:	4618      	mov	r0, r3
   152a2:	f7ee fa5f 	bl	3764 <bb_clear>
			return ret;
   152a6:	69fb      	ldr	r3, [r7, #28]
   152a8:	e04f      	b.n	1534a <invoke_AssociationShortName+0x146>
		}
		equal = bb_compare(&settings->info.data,
   152aa:	687b      	ldr	r3, [r7, #4]
   152ac:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
			e->parameters.byteArr->data,
   152b0:	683b      	ldr	r3, [r7, #0]
   152b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			&settings->base.stoCChallenge, readSecret, &settings->info.data)) != 0)
		{
			bb_clear(&settings->info.data);
			return ret;
		}
		equal = bb_compare(&settings->info.data,
   152b4:	6819      	ldr	r1, [r3, #0]
			e->parameters.byteArr->data,
			e->parameters.byteArr->size);
   152b6:	683b      	ldr	r3, [r7, #0]
   152b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			&settings->base.stoCChallenge, readSecret, &settings->info.data)) != 0)
		{
			bb_clear(&settings->info.data);
			return ret;
		}
		equal = bb_compare(&settings->info.data,
   152ba:	88db      	ldrh	r3, [r3, #6]
   152bc:	461a      	mov	r2, r3
   152be:	f7ee fe65 	bl	3f8c <bb_compare>
   152c2:	4603      	mov	r3, r0
   152c4:	75fb      	strb	r3, [r7, #23]
			e->parameters.byteArr->data,
			e->parameters.byteArr->size);
		bb_clear(&settings->info.data);
   152c6:	687b      	ldr	r3, [r7, #4]
   152c8:	33cc      	adds	r3, #204	; 0xcc
   152ca:	4618      	mov	r0, r3
   152cc:	f7ee fa4a 	bl	3764 <bb_clear>
		if (equal)
   152d0:	7dfb      	ldrb	r3, [r7, #23]
   152d2:	2b00      	cmp	r3, #0
   152d4:	d036      	beq.n	15344 <invoke_AssociationShortName+0x140>
		{
			e->byteArray = 1;
   152d6:	683b      	ldr	r3, [r7, #0]
   152d8:	2201      	movs	r2, #1
   152da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			if (settings->base.authentication == DLMS_AUTHENTICATION_HIGH_GMAC)
   152de:	687b      	ldr	r3, [r7, #4]
   152e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   152e4:	2b05      	cmp	r3, #5
   152e6:	d106      	bne.n	152f6 <invoke_AssociationShortName+0xf2>
			{
#ifndef DLMS_IGNORE_HIGH_GMAC
				readSecret = &settings->base.cipher.systemTitle;
   152e8:	687b      	ldr	r3, [r7, #4]
   152ea:	3398      	adds	r3, #152	; 0x98
   152ec:	61bb      	str	r3, [r7, #24]
				ic = settings->base.cipher.invocationCounter;
   152ee:	687b      	ldr	r3, [r7, #4]
   152f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   152f4:	613b      	str	r3, [r7, #16]
#endif //DLMS_IGNORE_HIGH_GMAC
			}
			if ((ret = dlms_secure(&settings->base,
   152f6:	6878      	ldr	r0, [r7, #4]
   152f8:	693b      	ldr	r3, [r7, #16]
   152fa:	4619      	mov	r1, r3
   152fc:	687b      	ldr	r3, [r7, #4]
   152fe:	1d1a      	adds	r2, r3, #4
   15300:	687b      	ldr	r3, [r7, #4]
   15302:	33cc      	adds	r3, #204	; 0xcc
   15304:	9300      	str	r3, [sp, #0]
   15306:	69bb      	ldr	r3, [r7, #24]
   15308:	f7f6 f992 	bl	b630 <dlms_secure>
   1530c:	61f8      	str	r0, [r7, #28]
   1530e:	69fb      	ldr	r3, [r7, #28]
   15310:	2b00      	cmp	r3, #0
   15312:	d001      	beq.n	15318 <invoke_AssociationShortName+0x114>
				ic,
				&settings->base.ctoSChallenge,
				readSecret,
				&settings->info.data)) != 0)
			{
				return ret;
   15314:	69fb      	ldr	r3, [r7, #28]
   15316:	e018      	b.n	1534a <invoke_AssociationShortName+0x146>
			}
			bb_insertUInt8(&settings->info.data, 0, DLMS_DATA_TYPE_OCTET_STRING);
   15318:	687b      	ldr	r3, [r7, #4]
   1531a:	33cc      	adds	r3, #204	; 0xcc
   1531c:	2209      	movs	r2, #9
   1531e:	2100      	movs	r1, #0
   15320:	4618      	mov	r0, r3
   15322:	f7ed fd93 	bl	2e4c <bb_insertUInt8>
			bb_insertUInt8(&settings->info.data, 1, (unsigned char)(settings->info.data.size - 1));
   15326:	687b      	ldr	r3, [r7, #4]
   15328:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
   1532c:	687b      	ldr	r3, [r7, #4]
   1532e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
   15332:	b2db      	uxtb	r3, r3
   15334:	3b01      	subs	r3, #1
   15336:	b2db      	uxtb	r3, r3
   15338:	461a      	mov	r2, r3
   1533a:	2101      	movs	r1, #1
   1533c:	f7ed fd86 	bl	2e4c <bb_insertUInt8>
	}
	else
	{
		return DLMS_ERROR_CODE_READ_WRITE_DENIED;
	}
	return 0;
   15340:	2300      	movs	r3, #0
   15342:	e002      	b.n	1534a <invoke_AssociationShortName+0x146>
			bb_insertUInt8(&settings->info.data, 0, DLMS_DATA_TYPE_OCTET_STRING);
			bb_insertUInt8(&settings->info.data, 1, (unsigned char)(settings->info.data.size - 1));
		}
		else
		{
			return 0;
   15344:	2300      	movs	r3, #0
   15346:	e000      	b.n	1534a <invoke_AssociationShortName+0x146>
		}
	}
	else
	{
		return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   15348:	2303      	movs	r3, #3
	}
	return 0;
}
   1534a:	4618      	mov	r0, r3
   1534c:	3720      	adds	r7, #32
   1534e:	46bd      	mov	sp, r7
   15350:	bd80      	pop	{r7, pc}
   15352:	bf00      	nop

00015354 <invoke_ScriptTable>:
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_SCRIPT_TABLE
int invoke_ScriptTable(dlmsServerSettings * settings, gxValueEventArg * e)
{
   15354:	b590      	push	{r4, r7, lr}
   15356:	b087      	sub	sp, #28
   15358:	af00      	add	r7, sp, #0
   1535a:	6078      	str	r0, [r7, #4]
   1535c:	6039      	str	r1, [r7, #0]
	gxScriptAction* sa;
	int ret = 0, pos;
   1535e:	2300      	movs	r3, #0
   15360:	617b      	str	r3, [r7, #20]
	//Find index and execute it.
	if (e->index == 1)
   15362:	683b      	ldr	r3, [r7, #0]
   15364:	7e1b      	ldrb	r3, [r3, #24]
   15366:	2b01      	cmp	r3, #1
   15368:	d146      	bne.n	153f8 <invoke_ScriptTable+0xa4>
	{
		for (pos = 0; pos != ((gxScriptTable*)e->target)->scripts.size; ++pos)
   1536a:	2300      	movs	r3, #0
   1536c:	613b      	str	r3, [r7, #16]
   1536e:	e03b      	b.n	153e8 <invoke_ScriptTable+0x94>
		{
			ret = arr_get(&((gxScriptTable*)e->target)->scripts, (void**)& sa);
   15370:	683b      	ldr	r3, [r7, #0]
   15372:	695b      	ldr	r3, [r3, #20]
   15374:	3310      	adds	r3, #16
   15376:	f107 020c 	add.w	r2, r7, #12
   1537a:	4611      	mov	r1, r2
   1537c:	4618      	mov	r0, r3
   1537e:	f7f7 fa1b 	bl	c7b8 <arr_get>
   15382:	6178      	str	r0, [r7, #20]
			if (ret != 0)
   15384:	697b      	ldr	r3, [r7, #20]
   15386:	2b00      	cmp	r3, #0
   15388:	d001      	beq.n	1538e <invoke_ScriptTable+0x3a>
			{
				return ret;
   1538a:	697b      	ldr	r3, [r7, #20]
   1538c:	e038      	b.n	15400 <invoke_ScriptTable+0xac>
			}
			if (sa->identifier == var_toInteger(&e->value))
   1538e:	68fb      	ldr	r3, [r7, #12]
   15390:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   15392:	683b      	ldr	r3, [r7, #0]
   15394:	4618      	mov	r0, r3
   15396:	f011 fb99 	bl	26acc <var_toInteger>
   1539a:	4603      	mov	r3, r0
   1539c:	429c      	cmp	r4, r3
   1539e:	d120      	bne.n	153e2 <invoke_ScriptTable+0x8e>
			{
				if (sa->type == DLMS_SCRIPT_ACTION_TYPE_WRITE)
   153a0:	68fb      	ldr	r3, [r7, #12]
   153a2:	781b      	ldrb	r3, [r3, #0]
   153a4:	2b01      	cmp	r3, #1
   153a6:	d10a      	bne.n	153be <invoke_ScriptTable+0x6a>
				{
					ret = cosem_setValue(&settings->base, e);
   153a8:	687b      	ldr	r3, [r7, #4]
   153aa:	6839      	ldr	r1, [r7, #0]
   153ac:	4618      	mov	r0, r3
   153ae:	f009 fe31 	bl	1f014 <cosem_setValue>
   153b2:	6178      	str	r0, [r7, #20]
					if (ret != 0)
   153b4:	697b      	ldr	r3, [r7, #20]
   153b6:	2b00      	cmp	r3, #0
   153b8:	d013      	beq.n	153e2 <invoke_ScriptTable+0x8e>
					{
						return ret;
   153ba:	697b      	ldr	r3, [r7, #20]
   153bc:	e020      	b.n	15400 <invoke_ScriptTable+0xac>
					}
				}
				else if (sa->type == DLMS_SCRIPT_ACTION_TYPE_EXECUTE)
   153be:	68fb      	ldr	r3, [r7, #12]
   153c0:	781b      	ldrb	r3, [r3, #0]
   153c2:	2b02      	cmp	r3, #2
   153c4:	d109      	bne.n	153da <invoke_ScriptTable+0x86>
				{
					ret = cosem_invoke(settings, e);
   153c6:	6839      	ldr	r1, [r7, #0]
   153c8:	6878      	ldr	r0, [r7, #4]
   153ca:	f000 fc1d 	bl	15c08 <cosem_invoke>
   153ce:	6178      	str	r0, [r7, #20]
					if (ret != 0)
   153d0:	697b      	ldr	r3, [r7, #20]
   153d2:	2b00      	cmp	r3, #0
   153d4:	d005      	beq.n	153e2 <invoke_ScriptTable+0x8e>
					{
						return ret;
   153d6:	697b      	ldr	r3, [r7, #20]
   153d8:	e012      	b.n	15400 <invoke_ScriptTable+0xac>
					}
				}
				else
				{
					ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   153da:	f44f 7381 	mov.w	r3, #258	; 0x102
   153de:	617b      	str	r3, [r7, #20]
					break;
   153e0:	e00d      	b.n	153fe <invoke_ScriptTable+0xaa>
	gxScriptAction* sa;
	int ret = 0, pos;
	//Find index and execute it.
	if (e->index == 1)
	{
		for (pos = 0; pos != ((gxScriptTable*)e->target)->scripts.size; ++pos)
   153e2:	693b      	ldr	r3, [r7, #16]
   153e4:	3301      	adds	r3, #1
   153e6:	613b      	str	r3, [r7, #16]
   153e8:	683b      	ldr	r3, [r7, #0]
   153ea:	695b      	ldr	r3, [r3, #20]
   153ec:	8b1b      	ldrh	r3, [r3, #24]
   153ee:	461a      	mov	r2, r3
   153f0:	693b      	ldr	r3, [r7, #16]
   153f2:	429a      	cmp	r2, r3
   153f4:	d1bc      	bne.n	15370 <invoke_ScriptTable+0x1c>
   153f6:	e002      	b.n	153fe <invoke_ScriptTable+0xaa>
			}
		}
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   153f8:	f44f 7381 	mov.w	r3, #258	; 0x102
   153fc:	617b      	str	r3, [r7, #20]
	}
	return ret;
   153fe:	697b      	ldr	r3, [r7, #20]
}
   15400:	4618      	mov	r0, r3
   15402:	371c      	adds	r7, #28
   15404:	46bd      	mov	sp, r7
   15406:	bd90      	pop	{r4, r7, pc}

00015408 <invoke_zigbeeNetworkControl>:
#endif //DLMS_IGNORE_SCRIPT_TABLE

#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int invoke_zigbeeNetworkControl(gxZigBeeNetworkControl * object, unsigned char index, dlmsVARIANT * value)
{
   15408:	b580      	push	{r7, lr}
   1540a:	b088      	sub	sp, #32
   1540c:	af00      	add	r7, sp, #0
   1540e:	60f8      	str	r0, [r7, #12]
   15410:	460b      	mov	r3, r1
   15412:	607a      	str	r2, [r7, #4]
   15414:	72fb      	strb	r3, [r7, #11]
	int ret = 0, pos;
   15416:	2300      	movs	r3, #0
   15418:	61fb      	str	r3, [r7, #28]
	dlmsVARIANT* it;
	gxActiveDevice* ad;
	//Register device.
	if (index == 1)
   1541a:	7afb      	ldrb	r3, [r7, #11]
   1541c:	2b01      	cmp	r3, #1
   1541e:	d12f      	bne.n	15480 <invoke_zigbeeNetworkControl+0x78>
	{
		ret = va_get(value->Arr, &it);
   15420:	687b      	ldr	r3, [r7, #4]
   15422:	689b      	ldr	r3, [r3, #8]
   15424:	f107 0214 	add.w	r2, r7, #20
   15428:	4611      	mov	r1, r2
   1542a:	4618      	mov	r0, r3
   1542c:	f011 fcf8 	bl	26e20 <va_get>
   15430:	61f8      	str	r0, [r7, #28]
		if (ret != 0)
   15432:	69fb      	ldr	r3, [r7, #28]
   15434:	2b00      	cmp	r3, #0
   15436:	d001      	beq.n	1543c <invoke_zigbeeNetworkControl+0x34>
		{
			return ret;
   15438:	69fb      	ldr	r3, [r7, #28]
   1543a:	e071      	b.n	15520 <invoke_zigbeeNetworkControl+0x118>
		}
		ad = (gxActiveDevice*)gxcalloc(1, sizeof(gxActiveDevice));
   1543c:	2158      	movs	r1, #88	; 0x58
   1543e:	2001      	movs	r0, #1
   15440:	f014 f9da 	bl	297f8 <calloc>
   15444:	4603      	mov	r3, r0
   15446:	613b      	str	r3, [r7, #16]
		bb_init(&ad->macAddress);
   15448:	693b      	ldr	r3, [r7, #16]
   1544a:	4618      	mov	r0, r3
   1544c:	f7ed fc4c 	bl	2ce8 <bb_init>
		ba_init(&ad->status);
   15450:	693b      	ldr	r3, [r7, #16]
   15452:	330c      	adds	r3, #12
   15454:	4618      	mov	r0, r3
   15456:	f7ed f9cf 	bl	27f8 <ba_init>
		bb_set(&ad->macAddress, it->byteArr->data, it->byteArr->size);
   1545a:	693b      	ldr	r3, [r7, #16]
   1545c:	4618      	mov	r0, r3
   1545e:	697b      	ldr	r3, [r7, #20]
   15460:	689b      	ldr	r3, [r3, #8]
   15462:	6819      	ldr	r1, [r3, #0]
   15464:	697b      	ldr	r3, [r7, #20]
   15466:	689b      	ldr	r3, [r3, #8]
   15468:	88db      	ldrh	r3, [r3, #6]
   1546a:	461a      	mov	r2, r3
   1546c:	f7ee f878 	bl	3560 <bb_set>
		arr_push(&object->activeDevices, ad);
   15470:	68fb      	ldr	r3, [r7, #12]
   15472:	3314      	adds	r3, #20
   15474:	693a      	ldr	r2, [r7, #16]
   15476:	4611      	mov	r1, r2
   15478:	4618      	mov	r0, r3
   1547a:	f7f7 f901 	bl	c680 <arr_push>
   1547e:	e04e      	b.n	1551e <invoke_zigbeeNetworkControl+0x116>
	}
	//Unregister device.
	else if (index == 2)
   15480:	7afb      	ldrb	r3, [r7, #11]
   15482:	2b02      	cmp	r3, #2
   15484:	d138      	bne.n	154f8 <invoke_zigbeeNetworkControl+0xf0>
	{
		for (pos = 0; pos != object->activeDevices.size; ++pos)
   15486:	2300      	movs	r3, #0
   15488:	61bb      	str	r3, [r7, #24]
   1548a:	e02e      	b.n	154ea <invoke_zigbeeNetworkControl+0xe2>
		{
			ret = arr_get(&object->activeDevices, (void**)& ad);
   1548c:	68fb      	ldr	r3, [r7, #12]
   1548e:	3314      	adds	r3, #20
   15490:	f107 0210 	add.w	r2, r7, #16
   15494:	4611      	mov	r1, r2
   15496:	4618      	mov	r0, r3
   15498:	f7f7 f98e 	bl	c7b8 <arr_get>
   1549c:	61f8      	str	r0, [r7, #28]
			if (ret != 0)
   1549e:	69fb      	ldr	r3, [r7, #28]
   154a0:	2b00      	cmp	r3, #0
   154a2:	d001      	beq.n	154a8 <invoke_zigbeeNetworkControl+0xa0>
			{
				return ret;
   154a4:	69fb      	ldr	r3, [r7, #28]
   154a6:	e03b      	b.n	15520 <invoke_zigbeeNetworkControl+0x118>
			}
			if (memcpy(&ad->macAddress, &value->byteArr, 8) == 0)
   154a8:	693b      	ldr	r3, [r7, #16]
   154aa:	4618      	mov	r0, r3
   154ac:	687b      	ldr	r3, [r7, #4]
   154ae:	3308      	adds	r3, #8
   154b0:	2208      	movs	r2, #8
   154b2:	4619      	mov	r1, r3
   154b4:	f014 fae5 	bl	29a82 <memcpy>
   154b8:	4603      	mov	r3, r0
   154ba:	2b00      	cmp	r3, #0
   154bc:	d112      	bne.n	154e4 <invoke_zigbeeNetworkControl+0xdc>
			{
				ret = arr_removeByIndex(&object->activeDevices, pos, (void**)& ad);
   154be:	68fb      	ldr	r3, [r7, #12]
   154c0:	3314      	adds	r3, #20
   154c2:	f107 0210 	add.w	r2, r7, #16
   154c6:	69b9      	ldr	r1, [r7, #24]
   154c8:	4618      	mov	r0, r3
   154ca:	f7f7 fa2b 	bl	c924 <arr_removeByIndex>
   154ce:	61f8      	str	r0, [r7, #28]
				if (ret != 0)
   154d0:	69fb      	ldr	r3, [r7, #28]
   154d2:	2b00      	cmp	r3, #0
   154d4:	d001      	beq.n	154da <invoke_zigbeeNetworkControl+0xd2>
				{
					return ret;
   154d6:	69fb      	ldr	r3, [r7, #28]
   154d8:	e022      	b.n	15520 <invoke_zigbeeNetworkControl+0x118>
				}
				gxfree(ad);
   154da:	693b      	ldr	r3, [r7, #16]
   154dc:	4618      	mov	r0, r3
   154de:	f014 fab9 	bl	29a54 <free>
				break;
   154e2:	e01c      	b.n	1551e <invoke_zigbeeNetworkControl+0x116>
		arr_push(&object->activeDevices, ad);
	}
	//Unregister device.
	else if (index == 2)
	{
		for (pos = 0; pos != object->activeDevices.size; ++pos)
   154e4:	69bb      	ldr	r3, [r7, #24]
   154e6:	3301      	adds	r3, #1
   154e8:	61bb      	str	r3, [r7, #24]
   154ea:	68fb      	ldr	r3, [r7, #12]
   154ec:	8b9b      	ldrh	r3, [r3, #28]
   154ee:	461a      	mov	r2, r3
   154f0:	69bb      	ldr	r3, [r7, #24]
   154f2:	429a      	cmp	r2, r3
   154f4:	d1ca      	bne.n	1548c <invoke_zigbeeNetworkControl+0x84>
   154f6:	e012      	b.n	1551e <invoke_zigbeeNetworkControl+0x116>
				break;
			}
		}
	}
	//Unregister all device.
	else if (index == 3)
   154f8:	7afb      	ldrb	r3, [r7, #11]
   154fa:	2b03      	cmp	r3, #3
   154fc:	d106      	bne.n	1550c <invoke_zigbeeNetworkControl+0x104>
	{
		ret = obj_clearActiveDevices(&object->activeDevices);
   154fe:	68fb      	ldr	r3, [r7, #12]
   15500:	3314      	adds	r3, #20
   15502:	4618      	mov	r0, r3
   15504:	f001 fed0 	bl	172a8 <obj_clearActiveDevices>
   15508:	61f8      	str	r0, [r7, #28]
   1550a:	e008      	b.n	1551e <invoke_zigbeeNetworkControl+0x116>
	}
	//backup PAN
	else if (index == 4)
   1550c:	7afb      	ldrb	r3, [r7, #11]
   1550e:	2b04      	cmp	r3, #4
   15510:	d005      	beq.n	1551e <invoke_zigbeeNetworkControl+0x116>
	{
	}
	//Restore PAN,
	else if (index == 5)
   15512:	7afb      	ldrb	r3, [r7, #11]
   15514:	2b05      	cmp	r3, #5
   15516:	d002      	beq.n	1551e <invoke_zigbeeNetworkControl+0x116>
		// The storage location of the back-up is not currently defined and is an internal function
		// of the DLMS/COSEM Server.
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15518:	f44f 7381 	mov.w	r3, #258	; 0x102
   1551c:	61fb      	str	r3, [r7, #28]
	}
	return ret;
   1551e:	69fb      	ldr	r3, [r7, #28]
}
   15520:	4618      	mov	r0, r3
   15522:	3720      	adds	r7, #32
   15524:	46bd      	mov	sp, r7
   15526:	bd80      	pop	{r7, pc}

00015528 <invoke_ExtendedRegister>:
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
int invoke_ExtendedRegister(
	gxExtendedRegister * object,
	unsigned char index)
{
   15528:	b580      	push	{r7, lr}
   1552a:	b084      	sub	sp, #16
   1552c:	af00      	add	r7, sp, #0
   1552e:	6078      	str	r0, [r7, #4]
   15530:	460b      	mov	r3, r1
   15532:	70fb      	strb	r3, [r7, #3]
	int ret = 0;
   15534:	2300      	movs	r3, #0
   15536:	60fb      	str	r3, [r7, #12]
	//Reset.
	if (index == 1)
   15538:	78fb      	ldrb	r3, [r7, #3]
   1553a:	2b01      	cmp	r3, #1
   1553c:	d111      	bne.n	15562 <invoke_ExtendedRegister+0x3a>
	{
		ret = var_clear(&object->base.value);
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	3310      	adds	r3, #16
   15542:	4618      	mov	r0, r3
   15544:	f010 fe00 	bl	26148 <var_clear>
   15548:	60f8      	str	r0, [r7, #12]
		if (ret != 0)
   1554a:	68fb      	ldr	r3, [r7, #12]
   1554c:	2b00      	cmp	r3, #0
   1554e:	d001      	beq.n	15554 <invoke_ExtendedRegister+0x2c>
		{
			return ret;
   15550:	68fb      	ldr	r3, [r7, #12]
   15552:	e00a      	b.n	1556a <invoke_ExtendedRegister+0x42>
		}
		ret = var_clear(&object->status);
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	3358      	adds	r3, #88	; 0x58
   15558:	4618      	mov	r0, r3
   1555a:	f010 fdf5 	bl	26148 <var_clear>
   1555e:	60f8      	str	r0, [r7, #12]
   15560:	e002      	b.n	15568 <invoke_ExtendedRegister+0x40>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15562:	f44f 7381 	mov.w	r3, #258	; 0x102
   15566:	60fb      	str	r3, [r7, #12]
	}
	return ret;
   15568:	68fb      	ldr	r3, [r7, #12]
}
   1556a:	4618      	mov	r0, r3
   1556c:	3710      	adds	r7, #16
   1556e:	46bd      	mov	sp, r7
   15570:	bd80      	pop	{r7, pc}
   15572:	bf00      	nop

00015574 <invoke_Clock>:
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_CLOCK
int invoke_Clock(gxClock * object, unsigned char index, dlmsVARIANT * value)
{
   15574:	b5b0      	push	{r4, r5, r7, lr}
   15576:	b08c      	sub	sp, #48	; 0x30
   15578:	af00      	add	r7, sp, #0
   1557a:	60f8      	str	r0, [r7, #12]
   1557c:	460b      	mov	r3, r1
   1557e:	607a      	str	r2, [r7, #4]
   15580:	72fb      	strb	r3, [r7, #11]
	int ret = 0;
   15582:	2300      	movs	r3, #0
   15584:	62fb      	str	r3, [r7, #44]	; 0x2c
	dlmsVARIANT* it;
	dlmsVARIANT tmp;
	// Resets the value to the default value.
	// The default value is an instance specific constant.
	if (index == 1)
   15586:	7afb      	ldrb	r3, [r7, #11]
   15588:	2b01      	cmp	r3, #1
   1558a:	d134      	bne.n	155f6 <invoke_Clock+0x82>
	{
		int minutes = object->time.value.tm_min;
   1558c:	68fb      	ldr	r3, [r7, #12]
   1558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   15592:	62bb      	str	r3, [r7, #40]	; 0x28
		if (minutes < 8)
   15594:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15596:	2b07      	cmp	r3, #7
   15598:	dc02      	bgt.n	155a0 <invoke_Clock+0x2c>
		{
			minutes = 0;
   1559a:	2300      	movs	r3, #0
   1559c:	62bb      	str	r3, [r7, #40]	; 0x28
   1559e:	e01a      	b.n	155d6 <invoke_Clock+0x62>
		}
		else if (minutes < 23)
   155a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155a2:	2b16      	cmp	r3, #22
   155a4:	dc02      	bgt.n	155ac <invoke_Clock+0x38>
		{
			minutes = 15;
   155a6:	230f      	movs	r3, #15
   155a8:	62bb      	str	r3, [r7, #40]	; 0x28
   155aa:	e014      	b.n	155d6 <invoke_Clock+0x62>
		}
		else if (minutes < 38)
   155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155ae:	2b25      	cmp	r3, #37	; 0x25
   155b0:	dc02      	bgt.n	155b8 <invoke_Clock+0x44>
		{
			minutes = 30;
   155b2:	231e      	movs	r3, #30
   155b4:	62bb      	str	r3, [r7, #40]	; 0x28
   155b6:	e00e      	b.n	155d6 <invoke_Clock+0x62>
		}
		else if (minutes < 53)
   155b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155ba:	2b34      	cmp	r3, #52	; 0x34
   155bc:	dc02      	bgt.n	155c4 <invoke_Clock+0x50>
		{
			minutes = 45;
   155be:	232d      	movs	r3, #45	; 0x2d
   155c0:	62bb      	str	r3, [r7, #40]	; 0x28
   155c2:	e008      	b.n	155d6 <invoke_Clock+0x62>
		}
		else
		{
			minutes = 0;
   155c4:	2300      	movs	r3, #0
   155c6:	62bb      	str	r3, [r7, #40]	; 0x28
			++object->time.value.tm_hour;
   155c8:	68fb      	ldr	r3, [r7, #12]
   155ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   155ce:	1c5a      	adds	r2, r3, #1
   155d0:	68fb      	ldr	r3, [r7, #12]
   155d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			//If OS
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
			mktime(&object->time.value);
#endif
		}
		time_addTime(&object->time, 0, -object->time.value.tm_min + minutes, -object->time.value.tm_sec);
   155d6:	68fb      	ldr	r3, [r7, #12]
   155d8:	f103 007c 	add.w	r0, r3, #124	; 0x7c
   155dc:	68fb      	ldr	r3, [r7, #12]
   155de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   155e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   155e4:	1ad2      	subs	r2, r2, r3
   155e6:	68fb      	ldr	r3, [r7, #12]
   155e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   155ec:	425b      	negs	r3, r3
   155ee:	2100      	movs	r1, #0
   155f0:	f7f1 f9e0 	bl	69b4 <time_addTime>
   155f4:	e079      	b.n	156ea <invoke_Clock+0x176>
	}
	// Sets the meter�s time to the nearest minute.
	else if (index == 3)
   155f6:	7afb      	ldrb	r3, [r7, #11]
   155f8:	2b03      	cmp	r3, #3
   155fa:	d11a      	bne.n	15632 <invoke_Clock+0xbe>
	{
		int s = object->time.value.tm_sec;
   155fc:	68fb      	ldr	r3, [r7, #12]
   155fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15602:	627b      	str	r3, [r7, #36]	; 0x24
		if (s > 30)
   15604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15606:	2b1e      	cmp	r3, #30
   15608:	dd07      	ble.n	1561a <invoke_Clock+0xa6>
		{
			time_addTime(&object->time, 0, 1, 0);
   1560a:	68fb      	ldr	r3, [r7, #12]
   1560c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
   15610:	2300      	movs	r3, #0
   15612:	2201      	movs	r2, #1
   15614:	2100      	movs	r1, #0
   15616:	f7f1 f9cd 	bl	69b4 <time_addTime>
		}
		time_addTime(&object->time, 0, 0, -object->time.value.tm_sec);
   1561a:	68fb      	ldr	r3, [r7, #12]
   1561c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
   15620:	68fb      	ldr	r3, [r7, #12]
   15622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15626:	425b      	negs	r3, r3
   15628:	2200      	movs	r2, #0
   1562a:	2100      	movs	r1, #0
   1562c:	f7f1 f9c2 	bl	69b4 <time_addTime>
   15630:	e05b      	b.n	156ea <invoke_Clock+0x176>
	}
	//Adjust to preset time.
	else if (index == 4)
   15632:	7afb      	ldrb	r3, [r7, #11]
   15634:	2b04      	cmp	r3, #4
   15636:	d10e      	bne.n	15656 <invoke_Clock+0xe2>
	{
		object->time = object->presetTime;
   15638:	68fa      	ldr	r2, [r7, #12]
   1563a:	68fb      	ldr	r3, [r7, #12]
   1563c:	f102 047c 	add.w	r4, r2, #124	; 0x7c
   15640:	f103 05ac 	add.w	r5, r3, #172	; 0xac
   15644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1564a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1564c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   15650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   15654:	e049      	b.n	156ea <invoke_Clock+0x176>
	}
	// Presets the time to a new value (preset_time) and defines
	// avalidity_interval within which the new time can be activated.
	else if (index == 5)
   15656:	7afb      	ldrb	r3, [r7, #11]
   15658:	2b05      	cmp	r3, #5
   1565a:	d133      	bne.n	156c4 <invoke_Clock+0x150>
	{
		ret = var_init(&tmp);
   1565c:	f107 0310 	add.w	r3, r7, #16
   15660:	4618      	mov	r0, r3
   15662:	f010 fd61 	bl	26128 <var_init>
   15666:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (ret != 0)
   15668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1566a:	2b00      	cmp	r3, #0
   1566c:	d001      	beq.n	15672 <invoke_Clock+0xfe>
		{
			return ret;
   1566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15670:	e03c      	b.n	156ec <invoke_Clock+0x178>
		}
		ret = va_get(value->Arr, &it);
   15672:	687b      	ldr	r3, [r7, #4]
   15674:	689b      	ldr	r3, [r3, #8]
   15676:	f107 0220 	add.w	r2, r7, #32
   1567a:	4611      	mov	r1, r2
   1567c:	4618      	mov	r0, r3
   1567e:	f011 fbcf 	bl	26e20 <va_get>
   15682:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (ret != 0)
   15684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15686:	2b00      	cmp	r3, #0
   15688:	d001      	beq.n	1568e <invoke_Clock+0x11a>
		{
			return ret;
   1568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1568c:	e02e      	b.n	156ec <invoke_Clock+0x178>
		}
		ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATETIME, &tmp);
   1568e:	6a3b      	ldr	r3, [r7, #32]
   15690:	f107 0210 	add.w	r2, r7, #16
   15694:	2119      	movs	r1, #25
   15696:	4618      	mov	r0, r3
   15698:	f7f4 f8b8 	bl	980c <dlms_changeType2>
   1569c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (ret != 0)
   1569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156a0:	2b00      	cmp	r3, #0
   156a2:	d001      	beq.n	156a8 <invoke_Clock+0x134>
		{
			return ret;
   156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156a6:	e021      	b.n	156ec <invoke_Clock+0x178>
		}
		object->presetTime = *tmp.dateTime;
   156a8:	69ba      	ldr	r2, [r7, #24]
   156aa:	68fb      	ldr	r3, [r7, #12]
   156ac:	f103 04ac 	add.w	r4, r3, #172	; 0xac
   156b0:	4615      	mov	r5, r2
   156b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   156b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   156b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   156b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   156ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   156be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   156c2:	e012      	b.n	156ea <invoke_Clock+0x176>
	}
	// Shifts the time.
	else if (index == 6)
   156c4:	7afb      	ldrb	r3, [r7, #11]
   156c6:	2b06      	cmp	r3, #6
   156c8:	d10c      	bne.n	156e4 <invoke_Clock+0x170>
	{
		time_addTime(&object->time, 0, 0, var_toInteger(value));
   156ca:	68fb      	ldr	r3, [r7, #12]
   156cc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   156d0:	6878      	ldr	r0, [r7, #4]
   156d2:	f011 f9fb 	bl	26acc <var_toInteger>
   156d6:	4603      	mov	r3, r0
   156d8:	2200      	movs	r2, #0
   156da:	2100      	movs	r1, #0
   156dc:	4620      	mov	r0, r4
   156de:	f7f1 f969 	bl	69b4 <time_addTime>
   156e2:	e002      	b.n	156ea <invoke_Clock+0x176>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   156e4:	f44f 7381 	mov.w	r3, #258	; 0x102
   156e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	return ret;
   156ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   156ec:	4618      	mov	r0, r3
   156ee:	3730      	adds	r7, #48	; 0x30
   156f0:	46bd      	mov	sp, r7
   156f2:	bdb0      	pop	{r4, r5, r7, pc}

000156f4 <invoke_Register>:
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_REGISTER
int invoke_Register(
	gxRegister * object,
	unsigned char index)
{
   156f4:	b580      	push	{r7, lr}
   156f6:	b084      	sub	sp, #16
   156f8:	af00      	add	r7, sp, #0
   156fa:	6078      	str	r0, [r7, #4]
   156fc:	460b      	mov	r3, r1
   156fe:	70fb      	strb	r3, [r7, #3]
	int ret = 0;
   15700:	2300      	movs	r3, #0
   15702:	60fb      	str	r3, [r7, #12]
	//Reset.
	if (index == 1)
   15704:	78fb      	ldrb	r3, [r7, #3]
   15706:	2b01      	cmp	r3, #1
   15708:	d106      	bne.n	15718 <invoke_Register+0x24>
	{
		ret = var_clear(&object->value);
   1570a:	687b      	ldr	r3, [r7, #4]
   1570c:	3310      	adds	r3, #16
   1570e:	4618      	mov	r0, r3
   15710:	f010 fd1a 	bl	26148 <var_clear>
   15714:	60f8      	str	r0, [r7, #12]
   15716:	e002      	b.n	1571e <invoke_Register+0x2a>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15718:	f44f 7381 	mov.w	r3, #258	; 0x102
   1571c:	60fb      	str	r3, [r7, #12]
	}
	return ret;
   1571e:	68fb      	ldr	r3, [r7, #12]
}
   15720:	4618      	mov	r0, r3
   15722:	3710      	adds	r7, #16
   15724:	46bd      	mov	sp, r7
   15726:	bd80      	pop	{r7, pc}

00015728 <capture>:
* Copies the values of the objects to capture into the buffer by reading
* capture objects.
*/
int capture(dlmsSettings * settings,
	gxProfileGeneric * object)
{
   15728:	b580      	push	{r7, lr}
   1572a:	b0b0      	sub	sp, #192	; 0xc0
   1572c:	af00      	add	r7, sp, #0
   1572e:	6078      	str	r0, [r7, #4]
   15730:	6039      	str	r1, [r7, #0]
	gxKey* kv;
	dlmsVARIANT* value;
	variantArray* row;
	gxValueEventArg e;
	gxValueEventCollection args;
	ve_init(&e);
   15732:	f107 0360 	add.w	r3, r7, #96	; 0x60
   15736:	4618      	mov	r0, r3
   15738:	f00b ffee 	bl	21718 <ve_init>
	e.action = 1;
   1573c:	2301      	movs	r3, #1
   1573e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	e.target = &object->base;
   15742:	683b      	ldr	r3, [r7, #0]
   15744:	677b      	str	r3, [r7, #116]	; 0x74
	e.index = 2;
   15746:	2302      	movs	r3, #2
   15748:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	vec_init(&args);
   1574c:	f107 0358 	add.w	r3, r7, #88	; 0x58
   15750:	4618      	mov	r0, r3
   15752:	f00b ff15 	bl	21580 <vec_init>
	vec_push(&args, &e);
   15756:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1575a:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1575e:	4611      	mov	r1, r2
   15760:	4618      	mov	r0, r3
   15762:	f00b ff23 	bl	215ac <vec_push>
	// svr_preGet(settings, &args);
	if (!e.handled)
   15766:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
   1576a:	2b00      	cmp	r3, #0
   1576c:	d179      	bne.n	15862 <capture+0x13a>
	{
		gxValueEventArg e2;
		ve_init(&e2);
   1576e:	f107 0308 	add.w	r3, r7, #8
   15772:	4618      	mov	r0, r3
   15774:	f00b ffd0 	bl	21718 <ve_init>
		row = (variantArray*)gxmalloc(sizeof(variantArray));
   15778:	200c      	movs	r0, #12
   1577a:	f014 f963 	bl	29a44 <malloc>
   1577e:	4603      	mov	r3, r0
   15780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		for (pos = 0; pos != object->captureObjects.size; ++pos)
   15784:	2300      	movs	r3, #0
   15786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1578a:	e045      	b.n	15818 <capture+0xf0>
		{
			ret = arr_getByIndex(&object->captureObjects, pos, (void**)& kv);
   1578c:	683b      	ldr	r3, [r7, #0]
   1578e:	3320      	adds	r3, #32
   15790:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   15794:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   15798:	4618      	mov	r0, r3
   1579a:	f7f7 f82f 	bl	c7fc <arr_getByIndex>
   1579e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			if (ret != DLMS_ERROR_CODE_OK)
   157a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   157a6:	2b00      	cmp	r3, #0
   157a8:	d002      	beq.n	157b0 <capture+0x88>
			{
				return ret;
   157aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   157ae:	e05e      	b.n	1586e <capture+0x146>
			}
			e2.target = (gxObject*)kv->key;
   157b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   157b4:	681b      	ldr	r3, [r3, #0]
   157b6:	61fb      	str	r3, [r7, #28]
			e2.index = ((gxCaptureObject*)kv->value)->attributeIndex;
   157b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   157bc:	685b      	ldr	r3, [r3, #4]
   157be:	781b      	ldrb	r3, [r3, #0]
   157c0:	f887 3020 	strb.w	r3, [r7, #32]
			if ((ret = cosem_getData(&e2)) != 0)
   157c4:	f107 0308 	add.w	r3, r7, #8
   157c8:	4618      	mov	r0, r3
   157ca:	f7f7 f90f 	bl	c9ec <cosem_getData>
   157ce:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
   157d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   157d6:	2b00      	cmp	r3, #0
   157d8:	d002      	beq.n	157e0 <capture+0xb8>
			{
				return ret;
   157da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   157de:	e046      	b.n	1586e <capture+0x146>
			}
			value = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   157e0:	2010      	movs	r0, #16
   157e2:	f014 f92f 	bl	29a44 <malloc>
   157e6:	4603      	mov	r3, r0
   157e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			var_init(value);
   157ec:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
   157f0:	f010 fc9a 	bl	26128 <var_init>
			var_copy(value, &e.value);
   157f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   157f8:	4619      	mov	r1, r3
   157fa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
   157fe:	f012 fab9 	bl	27d74 <var_copy>
			va_push(row, value);
   15802:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
   15806:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   1580a:	f011 fa47 	bl	26c9c <va_push>
	if (!e.handled)
	{
		gxValueEventArg e2;
		ve_init(&e2);
		row = (variantArray*)gxmalloc(sizeof(variantArray));
		for (pos = 0; pos != object->captureObjects.size; ++pos)
   1580e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   15812:	3301      	adds	r3, #1
   15814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   15818:	683b      	ldr	r3, [r7, #0]
   1581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   1581c:	461a      	mov	r2, r3
   1581e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   15822:	429a      	cmp	r2, r3
   15824:	d1b2      	bne.n	1578c <capture+0x64>
			var_init(value);
			var_copy(value, &e.value);
			va_push(row, value);
		}
		// Remove first item if buffer is full.
		if (object->profileEntries == object->buffer.size)
   15826:	683b      	ldr	r3, [r7, #0]
   15828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1582a:	683a      	ldr	r2, [r7, #0]
   1582c:	8b12      	ldrh	r2, [r2, #24]
   1582e:	4293      	cmp	r3, r2
   15830:	d10b      	bne.n	1584a <capture+0x122>
		{
			variantArray* removedRow;
			arr_removeByIndex(&object->buffer, 0, (void**)& removedRow);
   15832:	683b      	ldr	r3, [r7, #0]
   15834:	3310      	adds	r3, #16
   15836:	f107 0254 	add.w	r2, r7, #84	; 0x54
   1583a:	2100      	movs	r1, #0
   1583c:	4618      	mov	r0, r3
   1583e:	f7f7 f871 	bl	c924 <arr_removeByIndex>
			va_clear(removedRow);
   15842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15844:	4618      	mov	r0, r3
   15846:	f011 fa7d 	bl	26d44 <va_clear>
		}
		arr_push(&object->buffer, row);
   1584a:	683b      	ldr	r3, [r7, #0]
   1584c:	3310      	adds	r3, #16
   1584e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
   15852:	4618      	mov	r0, r3
   15854:	f7f6 ff14 	bl	c680 <arr_push>
		object->entriesInUse = object->buffer.size;
   15858:	683b      	ldr	r3, [r7, #0]
   1585a:	8b1b      	ldrh	r3, [r3, #24]
   1585c:	461a      	mov	r2, r3
   1585e:	683b      	ldr	r3, [r7, #0]
   15860:	641a      	str	r2, [r3, #64]	; 0x40
	}
	//svr_postGet(settings, &args);
	vec_empty(&args);
   15862:	f107 0358 	add.w	r3, r7, #88	; 0x58
   15866:	4618      	mov	r0, r3
   15868:	f00b fede 	bl	21628 <vec_empty>
	return 0;
   1586c:	2300      	movs	r3, #0
}
   1586e:	4618      	mov	r0, r3
   15870:	37c0      	adds	r7, #192	; 0xc0
   15872:	46bd      	mov	sp, r7
   15874:	bd80      	pop	{r7, pc}
   15876:	bf00      	nop

00015878 <invoke_ProfileGeneric>:

int invoke_ProfileGeneric(
	dlmsServerSettings * settings,
	gxProfileGeneric * object,
	unsigned char index)
{
   15878:	b580      	push	{r7, lr}
   1587a:	b086      	sub	sp, #24
   1587c:	af00      	add	r7, sp, #0
   1587e:	60f8      	str	r0, [r7, #12]
   15880:	60b9      	str	r1, [r7, #8]
   15882:	4613      	mov	r3, r2
   15884:	71fb      	strb	r3, [r7, #7]
	int ret = 0;
   15886:	2300      	movs	r3, #0
   15888:	617b      	str	r3, [r7, #20]
	//Reset.
	if (index == 1)
   1588a:	79fb      	ldrb	r3, [r7, #7]
   1588c:	2b01      	cmp	r3, #1
   1588e:	d106      	bne.n	1589e <invoke_ProfileGeneric+0x26>
	{
		ret = obj_clearProfileGenericBuffer(&object->buffer);
   15890:	68bb      	ldr	r3, [r7, #8]
   15892:	3310      	adds	r3, #16
   15894:	4618      	mov	r0, r3
   15896:	f001 fa0d 	bl	16cb4 <obj_clearProfileGenericBuffer>
   1589a:	6178      	str	r0, [r7, #20]
   1589c:	e00b      	b.n	158b6 <invoke_ProfileGeneric+0x3e>
	}
	//Capture.
	else if (index == 2)
   1589e:	79fb      	ldrb	r3, [r7, #7]
   158a0:	2b02      	cmp	r3, #2
   158a2:	d105      	bne.n	158b0 <invoke_ProfileGeneric+0x38>
	{
		// Capture.
		capture(&settings->base, object);
   158a4:	68fb      	ldr	r3, [r7, #12]
   158a6:	68b9      	ldr	r1, [r7, #8]
   158a8:	4618      	mov	r0, r3
   158aa:	f7ff ff3d 	bl	15728 <capture>
   158ae:	e002      	b.n	158b6 <invoke_ProfileGeneric+0x3e>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   158b0:	f44f 7381 	mov.w	r3, #258	; 0x102
   158b4:	617b      	str	r3, [r7, #20]
	}
	return ret;
   158b6:	697b      	ldr	r3, [r7, #20]
}
   158b8:	4618      	mov	r0, r3
   158ba:	3718      	adds	r7, #24
   158bc:	46bd      	mov	sp, r7
   158be:	bd80      	pop	{r7, pc}

000158c0 <compactDataAppend>:
#endif //DLMS_IGNORE_PROFILE_GENERIC


#ifndef DLMS_IGNORE_COMPACT_DATA
int compactDataAppend(dlmsVARIANT * value3, gxByteBuffer * bb)
{
   158c0:	b580      	push	{r7, lr}
   158c2:	b086      	sub	sp, #24
   158c4:	af00      	add	r7, sp, #0
   158c6:	6078      	str	r0, [r7, #4]
   158c8:	6039      	str	r1, [r7, #0]
	int ret;
	gxByteBuffer tmp;
	bb_init(&tmp);
   158ca:	f107 0308 	add.w	r3, r7, #8
   158ce:	4618      	mov	r0, r3
   158d0:	f7ed fa0a 	bl	2ce8 <bb_init>
	if ((ret = dlms_setData(&tmp, value3->vt, value3)) != 0)
   158d4:	687b      	ldr	r3, [r7, #4]
   158d6:	7819      	ldrb	r1, [r3, #0]
   158d8:	f107 0308 	add.w	r3, r7, #8
   158dc:	687a      	ldr	r2, [r7, #4]
   158de:	4618      	mov	r0, r3
   158e0:	f7f1 fa52 	bl	6d88 <dlms_setData>
   158e4:	6178      	str	r0, [r7, #20]
   158e6:	697b      	ldr	r3, [r7, #20]
   158e8:	2b00      	cmp	r3, #0
   158ea:	d001      	beq.n	158f0 <compactDataAppend+0x30>
	{
		return ret;
   158ec:	697b      	ldr	r3, [r7, #20]
   158ee:	e016      	b.n	1591e <compactDataAppend+0x5e>
	}
	if (tmp.size == 1)
   158f0:	89fb      	ldrh	r3, [r7, #14]
   158f2:	2b01      	cmp	r3, #1
   158f4:	d104      	bne.n	15900 <compactDataAppend+0x40>
	{
		bb_setUInt8(bb, 0);
   158f6:	2100      	movs	r1, #0
   158f8:	6838      	ldr	r0, [r7, #0]
   158fa:	f7ed fa8b 	bl	2e14 <bb_setUInt8>
   158fe:	e008      	b.n	15912 <compactDataAppend+0x52>
	}
	else
	{
		bb_set(bb, tmp.data + 1, tmp.size - 1);
   15900:	68bb      	ldr	r3, [r7, #8]
   15902:	1c59      	adds	r1, r3, #1
   15904:	89fb      	ldrh	r3, [r7, #14]
   15906:	3b01      	subs	r3, #1
   15908:	b29b      	uxth	r3, r3
   1590a:	461a      	mov	r2, r3
   1590c:	6838      	ldr	r0, [r7, #0]
   1590e:	f7ed fe27 	bl	3560 <bb_set>
	}
	bb_clear(&tmp);
   15912:	f107 0308 	add.w	r3, r7, #8
   15916:	4618      	mov	r0, r3
   15918:	f7ed ff24 	bl	3764 <bb_clear>
	return 0;
   1591c:	2300      	movs	r3, #0
}
   1591e:	4618      	mov	r0, r3
   15920:	3718      	adds	r7, #24
   15922:	46bd      	mov	sp, r7
   15924:	bd80      	pop	{r7, pc}
   15926:	bf00      	nop

00015928 <compactDataAppendArray>:

int compactDataAppendArray(dlmsVARIANT * value, gxByteBuffer * bb, unsigned short dataIndex)
{
   15928:	b580      	push	{r7, lr}
   1592a:	b08a      	sub	sp, #40	; 0x28
   1592c:	af00      	add	r7, sp, #0
   1592e:	60f8      	str	r0, [r7, #12]
   15930:	60b9      	str	r1, [r7, #8]
   15932:	4613      	mov	r3, r2
   15934:	80fb      	strh	r3, [r7, #6]
	int ret, pos;
	int cnt = value->Arr->size;
   15936:	68fb      	ldr	r3, [r7, #12]
   15938:	689b      	ldr	r3, [r3, #8]
   1593a:	88db      	ldrh	r3, [r3, #6]
   1593c:	61fb      	str	r3, [r7, #28]
	if (dataIndex != 0)
   1593e:	88fb      	ldrh	r3, [r7, #6]
   15940:	2b00      	cmp	r3, #0
   15942:	d004      	beq.n	1594e <compactDataAppendArray+0x26>
	{
		cnt = dataIndex;
   15944:	88fb      	ldrh	r3, [r7, #6]
   15946:	61fb      	str	r3, [r7, #28]
		--dataIndex;
   15948:	88fb      	ldrh	r3, [r7, #6]
   1594a:	3b01      	subs	r3, #1
   1594c:	80fb      	strh	r3, [r7, #6]
	}
	dlmsVARIANT* value2;
	for (pos = dataIndex; pos != cnt; ++pos)
   1594e:	88fb      	ldrh	r3, [r7, #6]
   15950:	623b      	str	r3, [r7, #32]
   15952:	e044      	b.n	159de <compactDataAppendArray+0xb6>
	{
		if ((ret = va_getByIndex(value->Arr, pos, &value2)) != 0)
   15954:	68fb      	ldr	r3, [r7, #12]
   15956:	689b      	ldr	r3, [r3, #8]
   15958:	f107 0214 	add.w	r2, r7, #20
   1595c:	6a39      	ldr	r1, [r7, #32]
   1595e:	4618      	mov	r0, r3
   15960:	f011 fa84 	bl	26e6c <va_getByIndex>
   15964:	6278      	str	r0, [r7, #36]	; 0x24
   15966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15968:	2b00      	cmp	r3, #0
   1596a:	d001      	beq.n	15970 <compactDataAppendArray+0x48>
		{
			return ret;
   1596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1596e:	e03b      	b.n	159e8 <compactDataAppendArray+0xc0>
		}
		if (value2->vt == DLMS_DATA_TYPE_STRUCTURE)
   15970:	697b      	ldr	r3, [r7, #20]
   15972:	781b      	ldrb	r3, [r3, #0]
   15974:	2b02      	cmp	r3, #2
   15976:	d124      	bne.n	159c2 <compactDataAppendArray+0x9a>
		{
			dlmsVARIANT* value3;
			int pos1;
			for (pos1 = 0; pos1 != value2->Arr->size; ++pos1)
   15978:	2300      	movs	r3, #0
   1597a:	61bb      	str	r3, [r7, #24]
   1597c:	e019      	b.n	159b2 <compactDataAppendArray+0x8a>
			{
				if ((ret = va_getByIndex(value2->Arr, pos1, &value3)) != 0 ||
   1597e:	697b      	ldr	r3, [r7, #20]
   15980:	689b      	ldr	r3, [r3, #8]
   15982:	f107 0210 	add.w	r2, r7, #16
   15986:	69b9      	ldr	r1, [r7, #24]
   15988:	4618      	mov	r0, r3
   1598a:	f011 fa6f 	bl	26e6c <va_getByIndex>
   1598e:	6278      	str	r0, [r7, #36]	; 0x24
   15990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15992:	2b00      	cmp	r3, #0
   15994:	d108      	bne.n	159a8 <compactDataAppendArray+0x80>
					(ret = compactDataAppend(value3, bb)) != 0)
   15996:	693b      	ldr	r3, [r7, #16]
		{
			dlmsVARIANT* value3;
			int pos1;
			for (pos1 = 0; pos1 != value2->Arr->size; ++pos1)
			{
				if ((ret = va_getByIndex(value2->Arr, pos1, &value3)) != 0 ||
   15998:	68b9      	ldr	r1, [r7, #8]
   1599a:	4618      	mov	r0, r3
   1599c:	f7ff ff90 	bl	158c0 <compactDataAppend>
   159a0:	6278      	str	r0, [r7, #36]	; 0x24
   159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159a4:	2b00      	cmp	r3, #0
   159a6:	d001      	beq.n	159ac <compactDataAppendArray+0x84>
					(ret = compactDataAppend(value3, bb)) != 0)
				{
					return ret;
   159a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159aa:	e01d      	b.n	159e8 <compactDataAppendArray+0xc0>
		}
		if (value2->vt == DLMS_DATA_TYPE_STRUCTURE)
		{
			dlmsVARIANT* value3;
			int pos1;
			for (pos1 = 0; pos1 != value2->Arr->size; ++pos1)
   159ac:	69bb      	ldr	r3, [r7, #24]
   159ae:	3301      	adds	r3, #1
   159b0:	61bb      	str	r3, [r7, #24]
   159b2:	697b      	ldr	r3, [r7, #20]
   159b4:	689b      	ldr	r3, [r3, #8]
   159b6:	88db      	ldrh	r3, [r3, #6]
   159b8:	461a      	mov	r2, r3
   159ba:	69bb      	ldr	r3, [r7, #24]
   159bc:	429a      	cmp	r2, r3
   159be:	d1de      	bne.n	1597e <compactDataAppendArray+0x56>
   159c0:	e00a      	b.n	159d8 <compactDataAppendArray+0xb0>
				}
			}
		}
		else
		{
			if ((ret = compactDataAppend(value2, bb)) != 0)
   159c2:	697b      	ldr	r3, [r7, #20]
   159c4:	68b9      	ldr	r1, [r7, #8]
   159c6:	4618      	mov	r0, r3
   159c8:	f7ff ff7a 	bl	158c0 <compactDataAppend>
   159cc:	6278      	str	r0, [r7, #36]	; 0x24
   159ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159d0:	2b00      	cmp	r3, #0
   159d2:	d001      	beq.n	159d8 <compactDataAppendArray+0xb0>
			{
				return ret;
   159d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159d6:	e007      	b.n	159e8 <compactDataAppendArray+0xc0>
	{
		cnt = dataIndex;
		--dataIndex;
	}
	dlmsVARIANT* value2;
	for (pos = dataIndex; pos != cnt; ++pos)
   159d8:	6a3b      	ldr	r3, [r7, #32]
   159da:	3301      	adds	r3, #1
   159dc:	623b      	str	r3, [r7, #32]
   159de:	6a3a      	ldr	r2, [r7, #32]
   159e0:	69fb      	ldr	r3, [r7, #28]
   159e2:	429a      	cmp	r2, r3
   159e4:	d1b6      	bne.n	15954 <compactDataAppendArray+0x2c>
			{
				return ret;
			}
		}
	}
	return 0;
   159e6:	2300      	movs	r3, #0
}
   159e8:	4618      	mov	r0, r3
   159ea:	3728      	adds	r7, #40	; 0x28
   159ec:	46bd      	mov	sp, r7
   159ee:	bd80      	pop	{r7, pc}

000159f0 <cosem_captureCompactData>:
* Copies the values of the objects to capture into the buffer by reading
* capture objects.
*/
int cosem_captureCompactData(dlmsSettings * settings,
	gxCompactData * object)
{
   159f0:	b580      	push	{r7, lr}
   159f2:	b0a0      	sub	sp, #128	; 0x80
   159f4:	af00      	add	r7, sp, #0
   159f6:	6078      	str	r0, [r7, #4]
   159f8:	6039      	str	r1, [r7, #0]
	int ret = 0;
   159fa:	2300      	movs	r3, #0
   159fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	unsigned short pos, pos2;
	gxKey* kv;
	gxValueEventArg e;
	gxValueEventCollection args;
	bb_clear(&object->buffer);
   159fe:	683b      	ldr	r3, [r7, #0]
   15a00:	3310      	adds	r3, #16
   15a02:	4618      	mov	r0, r3
   15a04:	f7ed feae 	bl	3764 <bb_clear>
	ve_init(&e);
   15a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
   15a0c:	4618      	mov	r0, r3
   15a0e:	f00b fe83 	bl	21718 <ve_init>
	e.action = 1;
   15a12:	2301      	movs	r3, #1
   15a14:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	e.target = &object->base;
   15a18:	683b      	ldr	r3, [r7, #0]
   15a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	e.index = 2;
   15a1c:	2302      	movs	r3, #2
   15a1e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	vec_init(&args);
   15a22:	f107 0320 	add.w	r3, r7, #32
   15a26:	4618      	mov	r0, r3
   15a28:	f00b fdaa 	bl	21580 <vec_init>
	vec_push(&args, &e);
   15a2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15a30:	f107 0320 	add.w	r3, r7, #32
   15a34:	4611      	mov	r1, r2
   15a36:	4618      	mov	r0, r3
   15a38:	f00b fdb8 	bl	215ac <vec_push>
	// svr_preGet(settings, &args);
	if (!e.handled)
   15a3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   15a40:	2b00      	cmp	r3, #0
   15a42:	f040 80a9 	bne.w	15b98 <cosem_captureCompactData+0x1a8>
	{
		for (pos = 0; pos != object->captureObjects.size; ++pos)
   15a46:	2300      	movs	r3, #0
   15a48:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
   15a4c:	e09b      	b.n	15b86 <cosem_captureCompactData+0x196>
		{
			ret = arr_getByIndex(&object->captureObjects, pos, (void**)& kv);
   15a4e:	683b      	ldr	r3, [r7, #0]
   15a50:	331c      	adds	r3, #28
   15a52:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   15a56:	f107 0274 	add.w	r2, r7, #116	; 0x74
   15a5a:	4618      	mov	r0, r3
   15a5c:	f7f6 fece 	bl	c7fc <arr_getByIndex>
   15a60:	67f8      	str	r0, [r7, #124]	; 0x7c
			if (ret != DLMS_ERROR_CODE_OK)
   15a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15a64:	2b00      	cmp	r3, #0
   15a66:	d005      	beq.n	15a74 <cosem_captureCompactData+0x84>
			{
				bb_clear(&object->buffer);
   15a68:	683b      	ldr	r3, [r7, #0]
   15a6a:	3310      	adds	r3, #16
   15a6c:	4618      	mov	r0, r3
   15a6e:	f7ed fe79 	bl	3764 <bb_clear>
				break;
   15a72:	e091      	b.n	15b98 <cosem_captureCompactData+0x1a8>
			}
			e.target = (gxObject*)kv->key;
   15a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15a76:	681b      	ldr	r3, [r3, #0]
   15a78:	63fb      	str	r3, [r7, #60]	; 0x3c
			e.index = ((gxCaptureObject*)kv->value)->attributeIndex;
   15a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15a7c:	685b      	ldr	r3, [r3, #4]
   15a7e:	781b      	ldrb	r3, [r3, #0]
   15a80:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			if ((ret = cosem_getValue(settings, &e)) != 0)
   15a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
   15a88:	4619      	mov	r1, r3
   15a8a:	6878      	ldr	r0, [r7, #4]
   15a8c:	f7fe fb96 	bl	141bc <cosem_getValue>
   15a90:	67f8      	str	r0, [r7, #124]	; 0x7c
   15a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15a94:	2b00      	cmp	r3, #0
   15a96:	d005      	beq.n	15aa4 <cosem_captureCompactData+0xb4>
			{
				bb_clear(&object->buffer);
   15a98:	683b      	ldr	r3, [r7, #0]
   15a9a:	3310      	adds	r3, #16
   15a9c:	4618      	mov	r0, r3
   15a9e:	f7ed fe61 	bl	3764 <bb_clear>
				break;
   15aa2:	e079      	b.n	15b98 <cosem_captureCompactData+0x1a8>
			}
			if (e.byteArray && e.value.vt == DLMS_DATA_TYPE_OCTET_STRING)
   15aa4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d055      	beq.n	15b58 <cosem_captureCompactData+0x168>
   15aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   15ab0:	2b09      	cmp	r3, #9
   15ab2:	d151      	bne.n	15b58 <cosem_captureCompactData+0x168>
			{
				gxDataInfo info;
				dlmsVARIANT value;
				di_init(&info);
   15ab4:	f107 0318 	add.w	r3, r7, #24
   15ab8:	4618      	mov	r0, r3
   15aba:	f7f0 fb4f 	bl	615c <di_init>
				var_init(&value);
   15abe:	f107 0308 	add.w	r3, r7, #8
   15ac2:	4618      	mov	r0, r3
   15ac4:	f010 fb30 	bl	26128 <var_init>
				if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   15ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15aca:	f107 0208 	add.w	r2, r7, #8
   15ace:	f107 0118 	add.w	r1, r7, #24
   15ad2:	4618      	mov	r0, r3
   15ad4:	f7f2 f894 	bl	7c00 <dlms_getData>
   15ad8:	67f8      	str	r0, [r7, #124]	; 0x7c
   15ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15adc:	2b00      	cmp	r3, #0
   15ade:	d005      	beq.n	15aec <cosem_captureCompactData+0xfc>
				{
					var_clear(&value);
   15ae0:	f107 0308 	add.w	r3, r7, #8
   15ae4:	4618      	mov	r0, r3
   15ae6:	f010 fb2f 	bl	26148 <var_clear>
					break;
   15aea:	e055      	b.n	15b98 <cosem_captureCompactData+0x1a8>
				}
				if (value.vt == DLMS_DATA_TYPE_STRUCTURE ||
   15aec:	7a3b      	ldrb	r3, [r7, #8]
   15aee:	2b02      	cmp	r3, #2
   15af0:	d002      	beq.n	15af8 <cosem_captureCompactData+0x108>
					value.vt == DLMS_DATA_TYPE_ARRAY)
   15af2:	7a3b      	ldrb	r3, [r7, #8]
				if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
				{
					var_clear(&value);
					break;
				}
				if (value.vt == DLMS_DATA_TYPE_STRUCTURE ||
   15af4:	2b01      	cmp	r3, #1
   15af6:	d115      	bne.n	15b24 <cosem_captureCompactData+0x134>
					value.vt == DLMS_DATA_TYPE_ARRAY)
				{
					if ((ret = compactDataAppendArray(&value, &object->buffer, ((gxCaptureObject*)kv->value)->dataIndex)) != 0)
   15af8:	683b      	ldr	r3, [r7, #0]
   15afa:	f103 0110 	add.w	r1, r3, #16
   15afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15b00:	685b      	ldr	r3, [r3, #4]
   15b02:	785b      	ldrb	r3, [r3, #1]
   15b04:	b29a      	uxth	r2, r3
   15b06:	f107 0308 	add.w	r3, r7, #8
   15b0a:	4618      	mov	r0, r3
   15b0c:	f7ff ff0c 	bl	15928 <compactDataAppendArray>
   15b10:	67f8      	str	r0, [r7, #124]	; 0x7c
   15b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15b14:	2b00      	cmp	r3, #0
   15b16:	d019      	beq.n	15b4c <cosem_captureCompactData+0x15c>
					{
						var_clear(&value);
   15b18:	f107 0308 	add.w	r3, r7, #8
   15b1c:	4618      	mov	r0, r3
   15b1e:	f010 fb13 	bl	26148 <var_clear>
						break;
   15b22:	e039      	b.n	15b98 <cosem_captureCompactData+0x1a8>
					}
				}
				else
				{
					if ((ret = compactDataAppend(&e.value, &object->buffer)) != 0)
   15b24:	683b      	ldr	r3, [r7, #0]
   15b26:	f103 0210 	add.w	r2, r3, #16
   15b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   15b2e:	4611      	mov	r1, r2
   15b30:	4618      	mov	r0, r3
   15b32:	f7ff fec5 	bl	158c0 <compactDataAppend>
   15b36:	67f8      	str	r0, [r7, #124]	; 0x7c
   15b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15b3a:	2b00      	cmp	r3, #0
   15b3c:	d006      	beq.n	15b4c <cosem_captureCompactData+0x15c>
					{
						var_clear(&value);
   15b3e:	f107 0308 	add.w	r3, r7, #8
   15b42:	4618      	mov	r0, r3
   15b44:	f010 fb00 	bl	26148 <var_clear>
						break;
   15b48:	bf00      	nop
   15b4a:	e025      	b.n	15b98 <cosem_captureCompactData+0x1a8>
					}
				}
				var_clear(&value);
   15b4c:	f107 0308 	add.w	r3, r7, #8
   15b50:	4618      	mov	r0, r3
   15b52:	f010 faf9 	bl	26148 <var_clear>
			{
				bb_clear(&object->buffer);
				break;
			}
			if (e.byteArray && e.value.vt == DLMS_DATA_TYPE_OCTET_STRING)
			{
   15b56:	e00c      	b.n	15b72 <cosem_captureCompactData+0x182>
						break;
					}
				}
				var_clear(&value);
			}
			else if ((ret = compactDataAppend(&e.value, &object->buffer)) != 0)
   15b58:	683b      	ldr	r3, [r7, #0]
   15b5a:	f103 0210 	add.w	r2, r3, #16
   15b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   15b62:	4611      	mov	r1, r2
   15b64:	4618      	mov	r0, r3
   15b66:	f7ff feab 	bl	158c0 <compactDataAppend>
   15b6a:	67f8      	str	r0, [r7, #124]	; 0x7c
   15b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d111      	bne.n	15b96 <cosem_captureCompactData+0x1a6>
			{
				break;
			}
			ve_clear(&e);
   15b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
   15b76:	4618      	mov	r0, r3
   15b78:	f00b fe0e 	bl	21798 <ve_clear>
	vec_init(&args);
	vec_push(&args, &e);
	// svr_preGet(settings, &args);
	if (!e.handled)
	{
		for (pos = 0; pos != object->captureObjects.size; ++pos)
   15b7c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   15b80:	3301      	adds	r3, #1
   15b82:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
   15b86:	683b      	ldr	r3, [r7, #0]
   15b88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   15b8a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
   15b8e:	429a      	cmp	r2, r3
   15b90:	f47f af5d 	bne.w	15a4e <cosem_captureCompactData+0x5e>
   15b94:	e000      	b.n	15b98 <cosem_captureCompactData+0x1a8>
				}
				var_clear(&value);
			}
			else if ((ret = compactDataAppend(&e.value, &object->buffer)) != 0)
			{
				break;
   15b96:	bf00      	nop
			}
			ve_clear(&e);
		}
	}
	// svr_postGet(settings, &args);
	if (ret != 0)
   15b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d004      	beq.n	15ba8 <cosem_captureCompactData+0x1b8>
	{
		bb_clear(&object->buffer);
   15b9e:	683b      	ldr	r3, [r7, #0]
   15ba0:	3310      	adds	r3, #16
   15ba2:	4618      	mov	r0, r3
   15ba4:	f7ed fdde 	bl	3764 <bb_clear>
	}
	vec_empty(&args);
   15ba8:	f107 0320 	add.w	r3, r7, #32
   15bac:	4618      	mov	r0, r3
   15bae:	f00b fd3b 	bl	21628 <vec_empty>
	return ret;
   15bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
   15bb4:	4618      	mov	r0, r3
   15bb6:	3780      	adds	r7, #128	; 0x80
   15bb8:	46bd      	mov	sp, r7
   15bba:	bd80      	pop	{r7, pc}

00015bbc <invoke_CompactData>:

int invoke_CompactData(
	dlmsServerSettings * settings,
	gxCompactData * object,
	unsigned char index)
{
   15bbc:	b580      	push	{r7, lr}
   15bbe:	b086      	sub	sp, #24
   15bc0:	af00      	add	r7, sp, #0
   15bc2:	60f8      	str	r0, [r7, #12]
   15bc4:	60b9      	str	r1, [r7, #8]
   15bc6:	4613      	mov	r3, r2
   15bc8:	71fb      	strb	r3, [r7, #7]
	int ret = 0;
   15bca:	2300      	movs	r3, #0
   15bcc:	617b      	str	r3, [r7, #20]
	//Reset.
	if (index == 1)
   15bce:	79fb      	ldrb	r3, [r7, #7]
   15bd0:	2b01      	cmp	r3, #1
   15bd2:	d106      	bne.n	15be2 <invoke_CompactData+0x26>
	{
		ret = bb_clear(&object->buffer);
   15bd4:	68bb      	ldr	r3, [r7, #8]
   15bd6:	3310      	adds	r3, #16
   15bd8:	4618      	mov	r0, r3
   15bda:	f7ed fdc3 	bl	3764 <bb_clear>
   15bde:	6178      	str	r0, [r7, #20]
   15be0:	e00c      	b.n	15bfc <invoke_CompactData+0x40>
	}
	//Capture.
	else if (index == 2)
   15be2:	79fb      	ldrb	r3, [r7, #7]
   15be4:	2b02      	cmp	r3, #2
   15be6:	d106      	bne.n	15bf6 <invoke_CompactData+0x3a>
	{
		// Capture.
		ret = cosem_captureCompactData(&settings->base, object);
   15be8:	68fb      	ldr	r3, [r7, #12]
   15bea:	68b9      	ldr	r1, [r7, #8]
   15bec:	4618      	mov	r0, r3
   15bee:	f7ff feff 	bl	159f0 <cosem_captureCompactData>
   15bf2:	6178      	str	r0, [r7, #20]
   15bf4:	e002      	b.n	15bfc <invoke_CompactData+0x40>
	}
	else
	{
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15bf6:	f44f 7381 	mov.w	r3, #258	; 0x102
   15bfa:	617b      	str	r3, [r7, #20]
	}
	return ret;
   15bfc:	697b      	ldr	r3, [r7, #20]
}
   15bfe:	4618      	mov	r0, r3
   15c00:	3718      	adds	r7, #24
   15c02:	46bd      	mov	sp, r7
   15c04:	bd80      	pop	{r7, pc}
   15c06:	bf00      	nop

00015c08 <cosem_invoke>:
#endif //DLMS_IGNORE_COMPACT_DATA

int cosem_invoke(
	dlmsServerSettings * settings,
	gxValueEventArg * e)
{
   15c08:	b590      	push	{r4, r7, lr}
   15c0a:	b085      	sub	sp, #20
   15c0c:	af00      	add	r7, sp, #0
   15c0e:	6078      	str	r0, [r7, #4]
   15c10:	6039      	str	r1, [r7, #0]
	int ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15c12:	f44f 7381 	mov.w	r3, #258	; 0x102
   15c16:	60fb      	str	r3, [r7, #12]
	//If invoke index is invalid.
	if (e->index < 1 || e->index > obj_methodCount(e->target))
   15c18:	683b      	ldr	r3, [r7, #0]
   15c1a:	7e1b      	ldrb	r3, [r3, #24]
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d009      	beq.n	15c34 <cosem_invoke+0x2c>
   15c20:	683b      	ldr	r3, [r7, #0]
   15c22:	7e1c      	ldrb	r4, [r3, #24]
   15c24:	683b      	ldr	r3, [r7, #0]
   15c26:	695b      	ldr	r3, [r3, #20]
   15c28:	4618      	mov	r0, r3
   15c2a:	f002 f8a7 	bl	17d7c <obj_methodCount>
   15c2e:	4603      	mov	r3, r0
   15c30:	429c      	cmp	r4, r3
   15c32:	d902      	bls.n	15c3a <cosem_invoke+0x32>
	{
		return DLMS_ERROR_CODE_INVALID_PARAMETER;
   15c34:	f44f 7381 	mov.w	r3, #258	; 0x102
   15c38:	e16c      	b.n	15f14 <cosem_invoke+0x30c>
	}
	switch (e->target->objectType)
   15c3a:	683b      	ldr	r3, [r7, #0]
   15c3c:	695b      	ldr	r3, [r3, #20]
   15c3e:	781b      	ldrb	r3, [r3, #0]
   15c40:	3b03      	subs	r3, #3
   15c42:	2b70      	cmp	r3, #112	; 0x70
   15c44:	f200 8162 	bhi.w	15f0c <cosem_invoke+0x304>
   15c48:	a201      	add	r2, pc, #4	; (adr r2, 15c50 <cosem_invoke+0x48>)
   15c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c4e:	bf00      	nop
   15c50:	00015e15 	.word	0x00015e15
   15c54:	00015e3d 	.word	0x00015e3d
   15c58:	00015f0d 	.word	0x00015f0d
   15c5c:	00015f0d 	.word	0x00015f0d
   15c60:	00015e51 	.word	0x00015e51
   15c64:	00015e29 	.word	0x00015e29
   15c68:	00015e65 	.word	0x00015e65
   15c6c:	00015f0d 	.word	0x00015f0d
   15c70:	00015f0d 	.word	0x00015f0d
   15c74:	00015ec1 	.word	0x00015ec1
   15c78:	00015f0d 	.word	0x00015f0d
   15c7c:	00015f0d 	.word	0x00015f0d
   15c80:	00015ecd 	.word	0x00015ecd
   15c84:	00015f0d 	.word	0x00015f0d
   15c88:	00015ee9 	.word	0x00015ee9
   15c8c:	00015ed9 	.word	0x00015ed9
   15c90:	00015f0d 	.word	0x00015f0d
   15c94:	00015f0d 	.word	0x00015f0d
   15c98:	00015f0d 	.word	0x00015f0d
   15c9c:	00015f0d 	.word	0x00015f0d
   15ca0:	00015f0d 	.word	0x00015f0d
   15ca4:	00015f0d 	.word	0x00015f0d
   15ca8:	00015f0d 	.word	0x00015f0d
   15cac:	00015f0d 	.word	0x00015f0d
   15cb0:	00015f0d 	.word	0x00015f0d
   15cb4:	00015f0d 	.word	0x00015f0d
   15cb8:	00015f0d 	.word	0x00015f0d
   15cbc:	00015f0d 	.word	0x00015f0d
   15cc0:	00015f0d 	.word	0x00015f0d
   15cc4:	00015f0d 	.word	0x00015f0d
   15cc8:	00015f0d 	.word	0x00015f0d
   15ccc:	00015f0d 	.word	0x00015f0d
   15cd0:	00015f0d 	.word	0x00015f0d
   15cd4:	00015f0d 	.word	0x00015f0d
   15cd8:	00015f0d 	.word	0x00015f0d
   15cdc:	00015f0d 	.word	0x00015f0d
   15ce0:	00015f0d 	.word	0x00015f0d
   15ce4:	00015f0d 	.word	0x00015f0d
   15ce8:	00015f0d 	.word	0x00015f0d
   15cec:	00015f0d 	.word	0x00015f0d
   15cf0:	00015f0d 	.word	0x00015f0d
   15cf4:	00015f0d 	.word	0x00015f0d
   15cf8:	00015f0d 	.word	0x00015f0d
   15cfc:	00015f0d 	.word	0x00015f0d
   15d00:	00015f0d 	.word	0x00015f0d
   15d04:	00015f0d 	.word	0x00015f0d
   15d08:	00015f0d 	.word	0x00015f0d
   15d0c:	00015f0d 	.word	0x00015f0d
   15d10:	00015f0d 	.word	0x00015f0d
   15d14:	00015f0d 	.word	0x00015f0d
   15d18:	00015f0d 	.word	0x00015f0d
   15d1c:	00015f0d 	.word	0x00015f0d
   15d20:	00015f0d 	.word	0x00015f0d
   15d24:	00015f0d 	.word	0x00015f0d
   15d28:	00015f0d 	.word	0x00015f0d
   15d2c:	00015f0d 	.word	0x00015f0d
   15d30:	00015f0d 	.word	0x00015f0d
   15d34:	00015f0d 	.word	0x00015f0d
   15d38:	00015f0d 	.word	0x00015f0d
   15d3c:	00015ef9 	.word	0x00015ef9
   15d40:	00015f0d 	.word	0x00015f0d
   15d44:	00015f0d 	.word	0x00015f0d
   15d48:	00015f0d 	.word	0x00015f0d
   15d4c:	00015f0d 	.word	0x00015f0d
   15d50:	00015f0d 	.word	0x00015f0d
   15d54:	00015f0d 	.word	0x00015f0d
   15d58:	00015f0d 	.word	0x00015f0d
   15d5c:	00015f0d 	.word	0x00015f0d
   15d60:	00015f0d 	.word	0x00015f0d
   15d64:	00015f0d 	.word	0x00015f0d
   15d68:	00015f0d 	.word	0x00015f0d
   15d6c:	00015f0d 	.word	0x00015f0d
   15d70:	00015f0d 	.word	0x00015f0d
   15d74:	00015f0d 	.word	0x00015f0d
   15d78:	00015f0d 	.word	0x00015f0d
   15d7c:	00015f0d 	.word	0x00015f0d
   15d80:	00015f0d 	.word	0x00015f0d
   15d84:	00015f0d 	.word	0x00015f0d
   15d88:	00015f0d 	.word	0x00015f0d
   15d8c:	00015f0d 	.word	0x00015f0d
   15d90:	00015f0d 	.word	0x00015f0d
   15d94:	00015f0d 	.word	0x00015f0d
   15d98:	00015f0d 	.word	0x00015f0d
   15d9c:	00015f0d 	.word	0x00015f0d
   15da0:	00015f0d 	.word	0x00015f0d
   15da4:	00015f0d 	.word	0x00015f0d
   15da8:	00015f0d 	.word	0x00015f0d
   15dac:	00015f0d 	.word	0x00015f0d
   15db0:	00015f0d 	.word	0x00015f0d
   15db4:	00015f0d 	.word	0x00015f0d
   15db8:	00015f0d 	.word	0x00015f0d
   15dbc:	00015f0d 	.word	0x00015f0d
   15dc0:	00015f0d 	.word	0x00015f0d
   15dc4:	00015f0d 	.word	0x00015f0d
   15dc8:	00015f0d 	.word	0x00015f0d
   15dcc:	00015f0d 	.word	0x00015f0d
   15dd0:	00015f0d 	.word	0x00015f0d
   15dd4:	00015f0d 	.word	0x00015f0d
   15dd8:	00015f0d 	.word	0x00015f0d
   15ddc:	00015f0d 	.word	0x00015f0d
   15de0:	00015f0d 	.word	0x00015f0d
   15de4:	00015e71 	.word	0x00015e71
   15de8:	00015f0d 	.word	0x00015f0d
   15dec:	00015f0d 	.word	0x00015f0d
   15df0:	00015f0d 	.word	0x00015f0d
   15df4:	00015f0d 	.word	0x00015f0d
   15df8:	00015f0d 	.word	0x00015f0d
   15dfc:	00015f0d 	.word	0x00015f0d
   15e00:	00015f0d 	.word	0x00015f0d
   15e04:	00015e99 	.word	0x00015e99
   15e08:	00015e85 	.word	0x00015e85
   15e0c:	00015f0d 	.word	0x00015f0d
   15e10:	00015ead 	.word	0x00015ead
	{
#ifndef DLMS_IGNORE_REGISTER
	case DLMS_OBJECT_TYPE_REGISTER:
		ret = invoke_Register(
			(gxRegister*)e->target,
   15e14:	683b      	ldr	r3, [r7, #0]
   15e16:	695a      	ldr	r2, [r3, #20]
	}
	switch (e->target->objectType)
	{
#ifndef DLMS_IGNORE_REGISTER
	case DLMS_OBJECT_TYPE_REGISTER:
		ret = invoke_Register(
   15e18:	683b      	ldr	r3, [r7, #0]
   15e1a:	7e1b      	ldrb	r3, [r3, #24]
   15e1c:	4619      	mov	r1, r3
   15e1e:	4610      	mov	r0, r2
   15e20:	f7ff fc68 	bl	156f4 <invoke_Register>
   15e24:	60f8      	str	r0, [r7, #12]
			(gxRegister*)e->target,
			e->index);
		break;
   15e26:	e074      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_CLOCK
	case DLMS_OBJECT_TYPE_CLOCK:
		ret = invoke_Clock(
			(gxClock*)e->target,
   15e28:	683b      	ldr	r3, [r7, #0]
   15e2a:	6958      	ldr	r0, [r3, #20]
			e->index);
		break;
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_CLOCK
	case DLMS_OBJECT_TYPE_CLOCK:
		ret = invoke_Clock(
   15e2c:	683b      	ldr	r3, [r7, #0]
   15e2e:	7e1b      	ldrb	r3, [r3, #24]
   15e30:	683a      	ldr	r2, [r7, #0]
   15e32:	4619      	mov	r1, r3
   15e34:	f7ff fb9e 	bl	15574 <invoke_Clock>
   15e38:	60f8      	str	r0, [r7, #12]
			(gxClock*)e->target,
			e->index, &e->value);
		break;
   15e3a:	e06a      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
	case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
		ret = invoke_ExtendedRegister(
			(gxExtendedRegister*)e->target,
   15e3c:	683b      	ldr	r3, [r7, #0]
   15e3e:	695a      	ldr	r2, [r3, #20]
			e->index, &e->value);
		break;
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
	case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
		ret = invoke_ExtendedRegister(
   15e40:	683b      	ldr	r3, [r7, #0]
   15e42:	7e1b      	ldrb	r3, [r3, #24]
   15e44:	4619      	mov	r1, r3
   15e46:	4610      	mov	r0, r2
   15e48:	f7ff fb6e 	bl	15528 <invoke_ExtendedRegister>
   15e4c:	60f8      	str	r0, [r7, #12]
			(gxExtendedRegister*)e->target,
			e->index);
		break;
   15e4e:	e060      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_PROFILE_GENERIC
	case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
		ret = invoke_ProfileGeneric(
			settings,
			(gxProfileGeneric*)e->target,
   15e50:	683b      	ldr	r3, [r7, #0]
   15e52:	6959      	ldr	r1, [r3, #20]
			e->index);
		break;
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_PROFILE_GENERIC
	case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
		ret = invoke_ProfileGeneric(
   15e54:	683b      	ldr	r3, [r7, #0]
   15e56:	7e1b      	ldrb	r3, [r3, #24]
   15e58:	461a      	mov	r2, r3
   15e5a:	6878      	ldr	r0, [r7, #4]
   15e5c:	f7ff fd0c 	bl	15878 <invoke_ProfileGeneric>
   15e60:	60f8      	str	r0, [r7, #12]
			settings,
			(gxProfileGeneric*)e->target,
			e->index);
		break;
   15e62:	e056      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_SCRIPT_TABLE
	case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
		ret = invoke_ScriptTable(settings, e);
   15e64:	6839      	ldr	r1, [r7, #0]
   15e66:	6878      	ldr	r0, [r7, #4]
   15e68:	f7ff fa74 	bl	15354 <invoke_ScriptTable>
   15e6c:	60f8      	str	r0, [r7, #12]
		break;
   15e6e:	e050      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
	case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
		ret = invoke_zigbeeNetworkControl(
			(gxZigBeeNetworkControl*)e->target,
   15e70:	683b      	ldr	r3, [r7, #0]
   15e72:	6958      	ldr	r0, [r3, #20]
		ret = invoke_ScriptTable(settings, e);
		break;
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
	case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
		ret = invoke_zigbeeNetworkControl(
   15e74:	683b      	ldr	r3, [r7, #0]
   15e76:	7e1b      	ldrb	r3, [r3, #24]
   15e78:	683a      	ldr	r2, [r7, #0]
   15e7a:	4619      	mov	r1, r3
   15e7c:	f7ff fac4 	bl	15408 <invoke_zigbeeNetworkControl>
   15e80:	60f8      	str	r0, [r7, #12]
			(gxZigBeeNetworkControl*)e->target,
			e->index,
			&e->value);
		break;
   15e82:	e046      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_CHARGE
	case DLMS_OBJECT_TYPE_CHARGE:
		ret = invoke_Charge(
			(gxCharge*)e->target,
   15e84:	683b      	ldr	r3, [r7, #0]
   15e86:	6958      	ldr	r0, [r3, #20]
			&e->value);
		break;
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_CHARGE
	case DLMS_OBJECT_TYPE_CHARGE:
		ret = invoke_Charge(
   15e88:	683b      	ldr	r3, [r7, #0]
   15e8a:	7e1b      	ldrb	r3, [r3, #24]
   15e8c:	683a      	ldr	r2, [r7, #0]
   15e8e:	4619      	mov	r1, r3
   15e90:	f7fe fd70 	bl	14974 <invoke_Charge>
   15e94:	60f8      	str	r0, [r7, #12]
			(gxCharge*)e->target,
			e->index,
			&e->value);
		break;
   15e96:	e03c      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_CREDIT
	case DLMS_OBJECT_TYPE_CREDIT:
		ret = invoke_Credit(
			(gxCredit*)e->target,
   15e98:	683b      	ldr	r3, [r7, #0]
   15e9a:	6958      	ldr	r0, [r3, #20]
			&e->value);
		break;
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_CREDIT
	case DLMS_OBJECT_TYPE_CREDIT:
		ret = invoke_Credit(
   15e9c:	683b      	ldr	r3, [r7, #0]
   15e9e:	7e1b      	ldrb	r3, [r3, #24]
   15ea0:	683a      	ldr	r2, [r7, #0]
   15ea2:	4619      	mov	r1, r3
   15ea4:	f7fe fdee 	bl	14a84 <invoke_Credit>
   15ea8:	60f8      	str	r0, [r7, #12]
			(gxCredit*)e->target,
			e->index,
			&e->value);
		break;
   15eaa:	e032      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
	case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
		ret = invoke_gxTokenGateway(
			(gxTokenGateway*)e->target,
   15eac:	683b      	ldr	r3, [r7, #0]
   15eae:	6958      	ldr	r0, [r3, #20]
			&e->value);
		break;
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
	case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
		ret = invoke_gxTokenGateway(
   15eb0:	683b      	ldr	r3, [r7, #0]
   15eb2:	7e1b      	ldrb	r3, [r3, #24]
   15eb4:	683a      	ldr	r2, [r7, #0]
   15eb6:	4619      	mov	r1, r3
   15eb8:	f7fe fe1a 	bl	14af0 <invoke_gxTokenGateway>
   15ebc:	60f8      	str	r0, [r7, #12]
			(gxTokenGateway*)e->target,
			e->index,
			&e->value);
		break;
   15ebe:	e028      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
	case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
		ret = invoke_AssociationShortName(settings, e);
   15ec0:	6839      	ldr	r1, [r7, #0]
   15ec2:	6878      	ldr	r0, [r7, #4]
   15ec4:	f7ff f99e 	bl	15204 <invoke_AssociationShortName>
   15ec8:	60f8      	str	r0, [r7, #12]
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
		break;
   15eca:	e022      	b.n	15f12 <cosem_invoke+0x30a>
#endif //ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
	case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
		ret = invoke_AssociationLogicalName(settings, e);
   15ecc:	6839      	ldr	r1, [r7, #0]
   15ece:	6878      	ldr	r0, [r7, #4]
   15ed0:	f7fe fe38 	bl	14b44 <invoke_AssociationLogicalName>
   15ed4:	60f8      	str	r0, [r7, #12]
		break;
   15ed6:	e01c      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
	case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
		ret = invoke_ImageTransfer((gxImageTransfer*)e->target, e);
   15ed8:	683b      	ldr	r3, [r7, #0]
   15eda:	695b      	ldr	r3, [r3, #20]
   15edc:	6839      	ldr	r1, [r7, #0]
   15ede:	4618      	mov	r0, r3
   15ee0:	f7fe ffe2 	bl	14ea8 <invoke_ImageTransfer>
   15ee4:	60f8      	str	r0, [r7, #12]
		break;
   15ee6:	e014      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_IMAGE_TRANSFER
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
	case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
		ret = invoke_SapAssigment((gxSapAssignment*)e->target, e);
   15ee8:	683b      	ldr	r3, [r7, #0]
   15eea:	695b      	ldr	r3, [r3, #20]
   15eec:	6839      	ldr	r1, [r7, #0]
   15eee:	4618      	mov	r0, r3
   15ef0:	f7ff f8ee 	bl	150d0 <invoke_SapAssigment>
   15ef4:	60f8      	str	r0, [r7, #12]
		break;
   15ef6:	e00c      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_COMPACT_DATA
	case DLMS_OBJECT_TYPE_COMPACT_DATA:
		ret = invoke_CompactData(settings, (gxCompactData*)e->target, e->index);
   15ef8:	683b      	ldr	r3, [r7, #0]
   15efa:	6959      	ldr	r1, [r3, #20]
   15efc:	683b      	ldr	r3, [r7, #0]
   15efe:	7e1b      	ldrb	r3, [r3, #24]
   15f00:	461a      	mov	r2, r3
   15f02:	6878      	ldr	r0, [r7, #4]
   15f04:	f7ff fe5a 	bl	15bbc <invoke_CompactData>
   15f08:	60f8      	str	r0, [r7, #12]
		break;
   15f0a:	e002      	b.n	15f12 <cosem_invoke+0x30a>
#endif //DLMS_IGNORE_COMPACT_DATA
		//There are no actions on data component.
	default:
		//Unknown type.
		ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15f0c:	f44f 7381 	mov.w	r3, #258	; 0x102
   15f10:	60fb      	str	r3, [r7, #12]
	}
	return ret;
   15f12:	68fb      	ldr	r3, [r7, #12]
}
   15f14:	4618      	mov	r0, r3
   15f16:	3714      	adds	r7, #20
   15f18:	46bd      	mov	sp, r7
   15f1a:	bd90      	pop	{r4, r7, pc}

00015f1c <key_init>:

#include "../include/gxmem.h"
#include "../include/gxkey.h"

gxKey* key_init(void* key, void* value)
{
   15f1c:	b580      	push	{r7, lr}
   15f1e:	b084      	sub	sp, #16
   15f20:	af00      	add	r7, sp, #0
   15f22:	6078      	str	r0, [r7, #4]
   15f24:	6039      	str	r1, [r7, #0]
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   15f26:	2008      	movs	r0, #8
   15f28:	f013 fd8c 	bl	29a44 <malloc>
   15f2c:	4603      	mov	r3, r0
   15f2e:	60fb      	str	r3, [r7, #12]
    obj->key = key;
   15f30:	68fb      	ldr	r3, [r7, #12]
   15f32:	687a      	ldr	r2, [r7, #4]
   15f34:	601a      	str	r2, [r3, #0]
    obj->value = value;
   15f36:	68fb      	ldr	r3, [r7, #12]
   15f38:	683a      	ldr	r2, [r7, #0]
   15f3a:	605a      	str	r2, [r3, #4]
    return obj;
   15f3c:	68fb      	ldr	r3, [r7, #12]
}
   15f3e:	4618      	mov	r0, r3
   15f40:	3710      	adds	r7, #16
   15f42:	46bd      	mov	sp, r7
   15f44:	bd80      	pop	{r7, pc}
   15f46:	bf00      	nop

00015f48 <gxmd5_F>:
#ifndef DLMS_IGNORE_HIGH_MD5
#include <string.h>
#include "../include/gxmd5.h"

unsigned int gxmd5_F(unsigned int x, unsigned int y, unsigned int z)
{
   15f48:	b480      	push	{r7}
   15f4a:	b085      	sub	sp, #20
   15f4c:	af00      	add	r7, sp, #0
   15f4e:	60f8      	str	r0, [r7, #12]
   15f50:	60b9      	str	r1, [r7, #8]
   15f52:	607a      	str	r2, [r7, #4]
    return (x & y) | (~x & z);
   15f54:	68fa      	ldr	r2, [r7, #12]
   15f56:	68bb      	ldr	r3, [r7, #8]
   15f58:	401a      	ands	r2, r3
   15f5a:	68fb      	ldr	r3, [r7, #12]
   15f5c:	43d9      	mvns	r1, r3
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	400b      	ands	r3, r1
   15f62:	4313      	orrs	r3, r2
}
   15f64:	4618      	mov	r0, r3
   15f66:	3714      	adds	r7, #20
   15f68:	46bd      	mov	sp, r7
   15f6a:	bc80      	pop	{r7}
   15f6c:	4770      	bx	lr
   15f6e:	bf00      	nop

00015f70 <gxmd5_G>:

unsigned int gxmd5_G(unsigned int x, unsigned int y, unsigned int z)
{
   15f70:	b480      	push	{r7}
   15f72:	b085      	sub	sp, #20
   15f74:	af00      	add	r7, sp, #0
   15f76:	60f8      	str	r0, [r7, #12]
   15f78:	60b9      	str	r1, [r7, #8]
   15f7a:	607a      	str	r2, [r7, #4]
    return (x & z) | (y & ~z);
   15f7c:	68fa      	ldr	r2, [r7, #12]
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	401a      	ands	r2, r3
   15f82:	687b      	ldr	r3, [r7, #4]
   15f84:	43d9      	mvns	r1, r3
   15f86:	68bb      	ldr	r3, [r7, #8]
   15f88:	400b      	ands	r3, r1
   15f8a:	4313      	orrs	r3, r2
}
   15f8c:	4618      	mov	r0, r3
   15f8e:	3714      	adds	r7, #20
   15f90:	46bd      	mov	sp, r7
   15f92:	bc80      	pop	{r7}
   15f94:	4770      	bx	lr
   15f96:	bf00      	nop

00015f98 <gxmd5_H>:

unsigned int gxmd5_H(unsigned int x, unsigned int y, unsigned int z)
{
   15f98:	b480      	push	{r7}
   15f9a:	b085      	sub	sp, #20
   15f9c:	af00      	add	r7, sp, #0
   15f9e:	60f8      	str	r0, [r7, #12]
   15fa0:	60b9      	str	r1, [r7, #8]
   15fa2:	607a      	str	r2, [r7, #4]
    return x ^ y ^ z;
   15fa4:	68fa      	ldr	r2, [r7, #12]
   15fa6:	68bb      	ldr	r3, [r7, #8]
   15fa8:	405a      	eors	r2, r3
   15faa:	687b      	ldr	r3, [r7, #4]
   15fac:	4053      	eors	r3, r2
}
   15fae:	4618      	mov	r0, r3
   15fb0:	3714      	adds	r7, #20
   15fb2:	46bd      	mov	sp, r7
   15fb4:	bc80      	pop	{r7}
   15fb6:	4770      	bx	lr

00015fb8 <gxmd5_I>:

unsigned int gxmd5_I(unsigned int x, unsigned int y, unsigned int z)
{
   15fb8:	b480      	push	{r7}
   15fba:	b085      	sub	sp, #20
   15fbc:	af00      	add	r7, sp, #0
   15fbe:	60f8      	str	r0, [r7, #12]
   15fc0:	60b9      	str	r1, [r7, #8]
   15fc2:	607a      	str	r2, [r7, #4]
    return y ^ (x | ~z);
   15fc4:	687b      	ldr	r3, [r7, #4]
   15fc6:	43da      	mvns	r2, r3
   15fc8:	68fb      	ldr	r3, [r7, #12]
   15fca:	431a      	orrs	r2, r3
   15fcc:	68bb      	ldr	r3, [r7, #8]
   15fce:	4053      	eors	r3, r2
}
   15fd0:	4618      	mov	r0, r3
   15fd2:	3714      	adds	r7, #20
   15fd4:	46bd      	mov	sp, r7
   15fd6:	bc80      	pop	{r7}
   15fd8:	4770      	bx	lr
   15fda:	bf00      	nop

00015fdc <gxmd5_rotate_left>:

unsigned int gxmd5_rotate_left(unsigned int x, int n)
{
   15fdc:	b480      	push	{r7}
   15fde:	b083      	sub	sp, #12
   15fe0:	af00      	add	r7, sp, #0
   15fe2:	6078      	str	r0, [r7, #4]
   15fe4:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
   15fe6:	687a      	ldr	r2, [r7, #4]
   15fe8:	683b      	ldr	r3, [r7, #0]
   15fea:	f1c3 0320 	rsb	r3, r3, #32
   15fee:	fa62 f303 	ror.w	r3, r2, r3
}
   15ff2:	4618      	mov	r0, r3
   15ff4:	370c      	adds	r7, #12
   15ff6:	46bd      	mov	sp, r7
   15ff8:	bc80      	pop	{r7}
   15ffa:	4770      	bx	lr

00015ffc <gxmd5_FF>:

void gxmd5_FF(unsigned int *a, unsigned int b, unsigned int c, unsigned int d, unsigned int x, unsigned int s, unsigned long ac)
{
   15ffc:	b590      	push	{r4, r7, lr}
   15ffe:	b085      	sub	sp, #20
   16000:	af00      	add	r7, sp, #0
   16002:	60f8      	str	r0, [r7, #12]
   16004:	60b9      	str	r1, [r7, #8]
   16006:	607a      	str	r2, [r7, #4]
   16008:	603b      	str	r3, [r7, #0]
    *a = gxmd5_rotate_left(*a + gxmd5_F(b, c, d) + x + ac, s) + b;
   1600a:	68fb      	ldr	r3, [r7, #12]
   1600c:	681c      	ldr	r4, [r3, #0]
   1600e:	683a      	ldr	r2, [r7, #0]
   16010:	6879      	ldr	r1, [r7, #4]
   16012:	68b8      	ldr	r0, [r7, #8]
   16014:	f7ff ff98 	bl	15f48 <gxmd5_F>
   16018:	4603      	mov	r3, r0
   1601a:	18e2      	adds	r2, r4, r3
   1601c:	6a3b      	ldr	r3, [r7, #32]
   1601e:	441a      	add	r2, r3
   16020:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16022:	4413      	add	r3, r2
   16024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16026:	4611      	mov	r1, r2
   16028:	4618      	mov	r0, r3
   1602a:	f7ff ffd7 	bl	15fdc <gxmd5_rotate_left>
   1602e:	4602      	mov	r2, r0
   16030:	68bb      	ldr	r3, [r7, #8]
   16032:	441a      	add	r2, r3
   16034:	68fb      	ldr	r3, [r7, #12]
   16036:	601a      	str	r2, [r3, #0]
}
   16038:	bf00      	nop
   1603a:	3714      	adds	r7, #20
   1603c:	46bd      	mov	sp, r7
   1603e:	bd90      	pop	{r4, r7, pc}

00016040 <gxmd5_GG>:

void gxmd5_GG(unsigned int *a, unsigned int b, unsigned int c, unsigned int d, unsigned int x, unsigned int s, unsigned long ac) {
   16040:	b590      	push	{r4, r7, lr}
   16042:	b085      	sub	sp, #20
   16044:	af00      	add	r7, sp, #0
   16046:	60f8      	str	r0, [r7, #12]
   16048:	60b9      	str	r1, [r7, #8]
   1604a:	607a      	str	r2, [r7, #4]
   1604c:	603b      	str	r3, [r7, #0]
    *a = gxmd5_rotate_left(*a + gxmd5_G(b, c, d) + x + ac, s) + b;
   1604e:	68fb      	ldr	r3, [r7, #12]
   16050:	681c      	ldr	r4, [r3, #0]
   16052:	683a      	ldr	r2, [r7, #0]
   16054:	6879      	ldr	r1, [r7, #4]
   16056:	68b8      	ldr	r0, [r7, #8]
   16058:	f7ff ff8a 	bl	15f70 <gxmd5_G>
   1605c:	4603      	mov	r3, r0
   1605e:	18e2      	adds	r2, r4, r3
   16060:	6a3b      	ldr	r3, [r7, #32]
   16062:	441a      	add	r2, r3
   16064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16066:	4413      	add	r3, r2
   16068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1606a:	4611      	mov	r1, r2
   1606c:	4618      	mov	r0, r3
   1606e:	f7ff ffb5 	bl	15fdc <gxmd5_rotate_left>
   16072:	4602      	mov	r2, r0
   16074:	68bb      	ldr	r3, [r7, #8]
   16076:	441a      	add	r2, r3
   16078:	68fb      	ldr	r3, [r7, #12]
   1607a:	601a      	str	r2, [r3, #0]
}
   1607c:	bf00      	nop
   1607e:	3714      	adds	r7, #20
   16080:	46bd      	mov	sp, r7
   16082:	bd90      	pop	{r4, r7, pc}

00016084 <gxmd5_HH>:

void gxmd5_HH(unsigned int *a, unsigned int b, unsigned int c, unsigned int d, unsigned int x, unsigned int s, unsigned long ac) {
   16084:	b590      	push	{r4, r7, lr}
   16086:	b085      	sub	sp, #20
   16088:	af00      	add	r7, sp, #0
   1608a:	60f8      	str	r0, [r7, #12]
   1608c:	60b9      	str	r1, [r7, #8]
   1608e:	607a      	str	r2, [r7, #4]
   16090:	603b      	str	r3, [r7, #0]
    *a = gxmd5_rotate_left(*a + gxmd5_H(b, c, d) + x + ac, s) + b;
   16092:	68fb      	ldr	r3, [r7, #12]
   16094:	681c      	ldr	r4, [r3, #0]
   16096:	683a      	ldr	r2, [r7, #0]
   16098:	6879      	ldr	r1, [r7, #4]
   1609a:	68b8      	ldr	r0, [r7, #8]
   1609c:	f7ff ff7c 	bl	15f98 <gxmd5_H>
   160a0:	4603      	mov	r3, r0
   160a2:	18e2      	adds	r2, r4, r3
   160a4:	6a3b      	ldr	r3, [r7, #32]
   160a6:	441a      	add	r2, r3
   160a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160aa:	4413      	add	r3, r2
   160ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   160ae:	4611      	mov	r1, r2
   160b0:	4618      	mov	r0, r3
   160b2:	f7ff ff93 	bl	15fdc <gxmd5_rotate_left>
   160b6:	4602      	mov	r2, r0
   160b8:	68bb      	ldr	r3, [r7, #8]
   160ba:	441a      	add	r2, r3
   160bc:	68fb      	ldr	r3, [r7, #12]
   160be:	601a      	str	r2, [r3, #0]
}
   160c0:	bf00      	nop
   160c2:	3714      	adds	r7, #20
   160c4:	46bd      	mov	sp, r7
   160c6:	bd90      	pop	{r4, r7, pc}

000160c8 <gxmd5_II>:

void gxmd5_II(unsigned int *a, unsigned int b, unsigned int c, unsigned int d, unsigned int x, unsigned int s, unsigned long ac) {
   160c8:	b590      	push	{r4, r7, lr}
   160ca:	b085      	sub	sp, #20
   160cc:	af00      	add	r7, sp, #0
   160ce:	60f8      	str	r0, [r7, #12]
   160d0:	60b9      	str	r1, [r7, #8]
   160d2:	607a      	str	r2, [r7, #4]
   160d4:	603b      	str	r3, [r7, #0]
    *a = gxmd5_rotate_left(*a + gxmd5_I(b, c, d) + x + ac, s) + b;
   160d6:	68fb      	ldr	r3, [r7, #12]
   160d8:	681c      	ldr	r4, [r3, #0]
   160da:	683a      	ldr	r2, [r7, #0]
   160dc:	6879      	ldr	r1, [r7, #4]
   160de:	68b8      	ldr	r0, [r7, #8]
   160e0:	f7ff ff6a 	bl	15fb8 <gxmd5_I>
   160e4:	4603      	mov	r3, r0
   160e6:	18e2      	adds	r2, r4, r3
   160e8:	6a3b      	ldr	r3, [r7, #32]
   160ea:	441a      	add	r2, r3
   160ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160ee:	4413      	add	r3, r2
   160f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   160f2:	4611      	mov	r1, r2
   160f4:	4618      	mov	r0, r3
   160f6:	f7ff ff71 	bl	15fdc <gxmd5_rotate_left>
   160fa:	4602      	mov	r2, r0
   160fc:	68bb      	ldr	r3, [r7, #8]
   160fe:	441a      	add	r2, r3
   16100:	68fb      	ldr	r3, [r7, #12]
   16102:	601a      	str	r2, [r3, #0]
}
   16104:	bf00      	nop
   16106:	3714      	adds	r7, #20
   16108:	46bd      	mov	sp, r7
   1610a:	bd90      	pop	{r4, r7, pc}

0001610c <gxmd5_decode>:

void gxmd5_decode(unsigned int * output, unsigned char *input, unsigned int len)
{
   1610c:	b480      	push	{r7}
   1610e:	b087      	sub	sp, #28
   16110:	af00      	add	r7, sp, #0
   16112:	60f8      	str	r0, [r7, #12]
   16114:	60b9      	str	r1, [r7, #8]
   16116:	607a      	str	r2, [r7, #4]
    unsigned int i, j;
    for (i = 0, j = 0; j < len; i++, j += 4)
   16118:	2300      	movs	r3, #0
   1611a:	617b      	str	r3, [r7, #20]
   1611c:	2300      	movs	r3, #0
   1611e:	613b      	str	r3, [r7, #16]
   16120:	e025      	b.n	1616e <gxmd5_decode+0x62>
    {
        output[i] = (input[j]) | (((unsigned int)input[j + 1]) << 8) |
   16122:	697b      	ldr	r3, [r7, #20]
   16124:	009b      	lsls	r3, r3, #2
   16126:	68fa      	ldr	r2, [r7, #12]
   16128:	4413      	add	r3, r2
   1612a:	68b9      	ldr	r1, [r7, #8]
   1612c:	693a      	ldr	r2, [r7, #16]
   1612e:	440a      	add	r2, r1
   16130:	7812      	ldrb	r2, [r2, #0]
   16132:	4610      	mov	r0, r2
   16134:	693a      	ldr	r2, [r7, #16]
   16136:	3201      	adds	r2, #1
   16138:	68b9      	ldr	r1, [r7, #8]
   1613a:	440a      	add	r2, r1
   1613c:	7812      	ldrb	r2, [r2, #0]
   1613e:	0212      	lsls	r2, r2, #8
   16140:	ea40 0102 	orr.w	r1, r0, r2
            (((unsigned int)input[j + 2]) << 16) | (((unsigned int)input[j + 3]) << 24);
   16144:	693a      	ldr	r2, [r7, #16]
   16146:	3202      	adds	r2, #2
   16148:	68b8      	ldr	r0, [r7, #8]
   1614a:	4402      	add	r2, r0
   1614c:	7812      	ldrb	r2, [r2, #0]
   1614e:	0412      	lsls	r2, r2, #16
void gxmd5_decode(unsigned int * output, unsigned char *input, unsigned int len)
{
    unsigned int i, j;
    for (i = 0, j = 0; j < len; i++, j += 4)
    {
        output[i] = (input[j]) | (((unsigned int)input[j + 1]) << 8) |
   16150:	4311      	orrs	r1, r2
            (((unsigned int)input[j + 2]) << 16) | (((unsigned int)input[j + 3]) << 24);
   16152:	693a      	ldr	r2, [r7, #16]
   16154:	3203      	adds	r2, #3
   16156:	68b8      	ldr	r0, [r7, #8]
   16158:	4402      	add	r2, r0
   1615a:	7812      	ldrb	r2, [r2, #0]
   1615c:	0612      	lsls	r2, r2, #24
   1615e:	430a      	orrs	r2, r1
void gxmd5_decode(unsigned int * output, unsigned char *input, unsigned int len)
{
    unsigned int i, j;
    for (i = 0, j = 0; j < len; i++, j += 4)
    {
        output[i] = (input[j]) | (((unsigned int)input[j + 1]) << 8) |
   16160:	601a      	str	r2, [r3, #0]
}

void gxmd5_decode(unsigned int * output, unsigned char *input, unsigned int len)
{
    unsigned int i, j;
    for (i = 0, j = 0; j < len; i++, j += 4)
   16162:	697b      	ldr	r3, [r7, #20]
   16164:	3301      	adds	r3, #1
   16166:	617b      	str	r3, [r7, #20]
   16168:	693b      	ldr	r3, [r7, #16]
   1616a:	3304      	adds	r3, #4
   1616c:	613b      	str	r3, [r7, #16]
   1616e:	693a      	ldr	r2, [r7, #16]
   16170:	687b      	ldr	r3, [r7, #4]
   16172:	429a      	cmp	r2, r3
   16174:	d3d5      	bcc.n	16122 <gxmd5_decode+0x16>
    {
        output[i] = (input[j]) | (((unsigned int)input[j + 1]) << 8) |
            (((unsigned int)input[j + 2]) << 16) | (((unsigned int)input[j + 3]) << 24);
    }
}
   16176:	bf00      	nop
   16178:	371c      	adds	r7, #28
   1617a:	46bd      	mov	sp, r7
   1617c:	bc80      	pop	{r7}
   1617e:	4770      	bx	lr

00016180 <gxmd5_encode>:

void gxmd5_encode(unsigned char * output, unsigned int *input, unsigned int len)
{
   16180:	b480      	push	{r7}
   16182:	b087      	sub	sp, #28
   16184:	af00      	add	r7, sp, #0
   16186:	60f8      	str	r0, [r7, #12]
   16188:	60b9      	str	r1, [r7, #8]
   1618a:	607a      	str	r2, [r7, #4]
    unsigned int i, pos = 0;
   1618c:	2300      	movs	r3, #0
   1618e:	613b      	str	r3, [r7, #16]
    for (i = 0; i != len; ++i)
   16190:	2300      	movs	r3, #0
   16192:	617b      	str	r3, [r7, #20]
   16194:	e039      	b.n	1620a <gxmd5_encode+0x8a>
    {
        output[pos] = input[i] & 0xff;
   16196:	68fa      	ldr	r2, [r7, #12]
   16198:	693b      	ldr	r3, [r7, #16]
   1619a:	4413      	add	r3, r2
   1619c:	697a      	ldr	r2, [r7, #20]
   1619e:	0092      	lsls	r2, r2, #2
   161a0:	68b9      	ldr	r1, [r7, #8]
   161a2:	440a      	add	r2, r1
   161a4:	6812      	ldr	r2, [r2, #0]
   161a6:	b2d2      	uxtb	r2, r2
   161a8:	701a      	strb	r2, [r3, #0]
        ++pos;
   161aa:	693b      	ldr	r3, [r7, #16]
   161ac:	3301      	adds	r3, #1
   161ae:	613b      	str	r3, [r7, #16]
        output[pos] = (input[i] >> 8) & 0xff;
   161b0:	68fa      	ldr	r2, [r7, #12]
   161b2:	693b      	ldr	r3, [r7, #16]
   161b4:	4413      	add	r3, r2
   161b6:	697a      	ldr	r2, [r7, #20]
   161b8:	0092      	lsls	r2, r2, #2
   161ba:	68b9      	ldr	r1, [r7, #8]
   161bc:	440a      	add	r2, r1
   161be:	6812      	ldr	r2, [r2, #0]
   161c0:	0a12      	lsrs	r2, r2, #8
   161c2:	b2d2      	uxtb	r2, r2
   161c4:	701a      	strb	r2, [r3, #0]
        ++pos;
   161c6:	693b      	ldr	r3, [r7, #16]
   161c8:	3301      	adds	r3, #1
   161ca:	613b      	str	r3, [r7, #16]
        output[pos] = (input[i] >> 16) & 0xff;
   161cc:	68fa      	ldr	r2, [r7, #12]
   161ce:	693b      	ldr	r3, [r7, #16]
   161d0:	4413      	add	r3, r2
   161d2:	697a      	ldr	r2, [r7, #20]
   161d4:	0092      	lsls	r2, r2, #2
   161d6:	68b9      	ldr	r1, [r7, #8]
   161d8:	440a      	add	r2, r1
   161da:	6812      	ldr	r2, [r2, #0]
   161dc:	0c12      	lsrs	r2, r2, #16
   161de:	b2d2      	uxtb	r2, r2
   161e0:	701a      	strb	r2, [r3, #0]
        ++pos;
   161e2:	693b      	ldr	r3, [r7, #16]
   161e4:	3301      	adds	r3, #1
   161e6:	613b      	str	r3, [r7, #16]
        output[pos] = (input[i] >> 24) & 0xff;
   161e8:	68fa      	ldr	r2, [r7, #12]
   161ea:	693b      	ldr	r3, [r7, #16]
   161ec:	4413      	add	r3, r2
   161ee:	697a      	ldr	r2, [r7, #20]
   161f0:	0092      	lsls	r2, r2, #2
   161f2:	68b9      	ldr	r1, [r7, #8]
   161f4:	440a      	add	r2, r1
   161f6:	6812      	ldr	r2, [r2, #0]
   161f8:	0e12      	lsrs	r2, r2, #24
   161fa:	b2d2      	uxtb	r2, r2
   161fc:	701a      	strb	r2, [r3, #0]
        ++pos;
   161fe:	693b      	ldr	r3, [r7, #16]
   16200:	3301      	adds	r3, #1
   16202:	613b      	str	r3, [r7, #16]
}

void gxmd5_encode(unsigned char * output, unsigned int *input, unsigned int len)
{
    unsigned int i, pos = 0;
    for (i = 0; i != len; ++i)
   16204:	697b      	ldr	r3, [r7, #20]
   16206:	3301      	adds	r3, #1
   16208:	617b      	str	r3, [r7, #20]
   1620a:	697a      	ldr	r2, [r7, #20]
   1620c:	687b      	ldr	r3, [r7, #4]
   1620e:	429a      	cmp	r2, r3
   16210:	d1c1      	bne.n	16196 <gxmd5_encode+0x16>
        output[pos] = (input[i] >> 16) & 0xff;
        ++pos;
        output[pos] = (input[i] >> 24) & 0xff;
        ++pos;
    }
}
   16212:	bf00      	nop
   16214:	371c      	adds	r7, #28
   16216:	46bd      	mov	sp, r7
   16218:	bc80      	pop	{r7}
   1621a:	4770      	bx	lr

0001621c <gxmd5_transform>:

void gxmd5_transform(unsigned char* block, unsigned int *state)
{
   1621c:	b5b0      	push	{r4, r5, r7, lr}
   1621e:	b09a      	sub	sp, #104	; 0x68
   16220:	af04      	add	r7, sp, #16
   16222:	6078      	str	r0, [r7, #4]
   16224:	6039      	str	r1, [r7, #0]
    unsigned int a = state[0], b = state[1], c = state[2], d = state[3], x[16];
   16226:	683b      	ldr	r3, [r7, #0]
   16228:	681b      	ldr	r3, [r3, #0]
   1622a:	657b      	str	r3, [r7, #84]	; 0x54
   1622c:	683b      	ldr	r3, [r7, #0]
   1622e:	685b      	ldr	r3, [r3, #4]
   16230:	653b      	str	r3, [r7, #80]	; 0x50
   16232:	683b      	ldr	r3, [r7, #0]
   16234:	689b      	ldr	r3, [r3, #8]
   16236:	64fb      	str	r3, [r7, #76]	; 0x4c
   16238:	683b      	ldr	r3, [r7, #0]
   1623a:	68db      	ldr	r3, [r3, #12]
   1623c:	64bb      	str	r3, [r7, #72]	; 0x48
    gxmd5_decode(x, block, 64);
   1623e:	f107 0308 	add.w	r3, r7, #8
   16242:	2240      	movs	r2, #64	; 0x40
   16244:	6879      	ldr	r1, [r7, #4]
   16246:	4618      	mov	r0, r3
   16248:	f7ff ff60 	bl	1610c <gxmd5_decode>

    /* Round 1 */
    gxmd5_FF(&a, b, c, d, x[0], S11, 0xd76aa478);
   1624c:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1624e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16250:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16252:	68bb      	ldr	r3, [r7, #8]
   16254:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16258:	4aa5      	ldr	r2, [pc, #660]	; (164f0 <gxmd5_transform+0x2d4>)
   1625a:	9202      	str	r2, [sp, #8]
   1625c:	2207      	movs	r2, #7
   1625e:	9201      	str	r2, [sp, #4]
   16260:	9300      	str	r3, [sp, #0]
   16262:	462b      	mov	r3, r5
   16264:	4622      	mov	r2, r4
   16266:	f7ff fec9 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&d, a, b, c, x[1], S12, 0xe8c7b756);
   1626a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1626c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1626e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16270:	68fb      	ldr	r3, [r7, #12]
   16272:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16276:	4a9f      	ldr	r2, [pc, #636]	; (164f4 <gxmd5_transform+0x2d8>)
   16278:	9202      	str	r2, [sp, #8]
   1627a:	220c      	movs	r2, #12
   1627c:	9201      	str	r2, [sp, #4]
   1627e:	9300      	str	r3, [sp, #0]
   16280:	462b      	mov	r3, r5
   16282:	4622      	mov	r2, r4
   16284:	f7ff feba 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&c, d, a, b, x[2], S13, 0x242070db);
   16288:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1628a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   1628c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1628e:	693b      	ldr	r3, [r7, #16]
   16290:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16294:	4a98      	ldr	r2, [pc, #608]	; (164f8 <gxmd5_transform+0x2dc>)
   16296:	9202      	str	r2, [sp, #8]
   16298:	2211      	movs	r2, #17
   1629a:	9201      	str	r2, [sp, #4]
   1629c:	9300      	str	r3, [sp, #0]
   1629e:	462b      	mov	r3, r5
   162a0:	4622      	mov	r2, r4
   162a2:	f7ff feab 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&b, c, d, a, x[3], S14, 0xc1bdceee);
   162a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   162a8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   162aa:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   162ac:	697b      	ldr	r3, [r7, #20]
   162ae:	f107 0050 	add.w	r0, r7, #80	; 0x50
   162b2:	4a92      	ldr	r2, [pc, #584]	; (164fc <gxmd5_transform+0x2e0>)
   162b4:	9202      	str	r2, [sp, #8]
   162b6:	2216      	movs	r2, #22
   162b8:	9201      	str	r2, [sp, #4]
   162ba:	9300      	str	r3, [sp, #0]
   162bc:	462b      	mov	r3, r5
   162be:	4622      	mov	r2, r4
   162c0:	f7ff fe9c 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&a, b, c, d, x[4], S11, 0xf57c0faf);
   162c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
   162c6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   162c8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   162ca:	69bb      	ldr	r3, [r7, #24]
   162cc:	f107 0054 	add.w	r0, r7, #84	; 0x54
   162d0:	4a8b      	ldr	r2, [pc, #556]	; (16500 <gxmd5_transform+0x2e4>)
   162d2:	9202      	str	r2, [sp, #8]
   162d4:	2207      	movs	r2, #7
   162d6:	9201      	str	r2, [sp, #4]
   162d8:	9300      	str	r3, [sp, #0]
   162da:	462b      	mov	r3, r5
   162dc:	4622      	mov	r2, r4
   162de:	f7ff fe8d 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&d, a, b, c, x[5], S12, 0x4787c62a);
   162e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   162e4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   162e6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   162e8:	69fb      	ldr	r3, [r7, #28]
   162ea:	f107 0048 	add.w	r0, r7, #72	; 0x48
   162ee:	4a85      	ldr	r2, [pc, #532]	; (16504 <gxmd5_transform+0x2e8>)
   162f0:	9202      	str	r2, [sp, #8]
   162f2:	220c      	movs	r2, #12
   162f4:	9201      	str	r2, [sp, #4]
   162f6:	9300      	str	r3, [sp, #0]
   162f8:	462b      	mov	r3, r5
   162fa:	4622      	mov	r2, r4
   162fc:	f7ff fe7e 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&c, d, a, b, x[6], S13, 0xa8304613);
   16300:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16302:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   16304:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   16306:	6a3b      	ldr	r3, [r7, #32]
   16308:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1630c:	4a7e      	ldr	r2, [pc, #504]	; (16508 <gxmd5_transform+0x2ec>)
   1630e:	9202      	str	r2, [sp, #8]
   16310:	2211      	movs	r2, #17
   16312:	9201      	str	r2, [sp, #4]
   16314:	9300      	str	r3, [sp, #0]
   16316:	462b      	mov	r3, r5
   16318:	4622      	mov	r2, r4
   1631a:	f7ff fe6f 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&b, c, d, a, x[7], S14, 0xfd469501);
   1631e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16320:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16322:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16326:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1632a:	4a78      	ldr	r2, [pc, #480]	; (1650c <gxmd5_transform+0x2f0>)
   1632c:	9202      	str	r2, [sp, #8]
   1632e:	2216      	movs	r2, #22
   16330:	9201      	str	r2, [sp, #4]
   16332:	9300      	str	r3, [sp, #0]
   16334:	462b      	mov	r3, r5
   16336:	4622      	mov	r2, r4
   16338:	f7ff fe60 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&a, b, c, d, x[8], S11, 0x698098d8);
   1633c:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1633e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16340:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16344:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16348:	4a71      	ldr	r2, [pc, #452]	; (16510 <gxmd5_transform+0x2f4>)
   1634a:	9202      	str	r2, [sp, #8]
   1634c:	2207      	movs	r2, #7
   1634e:	9201      	str	r2, [sp, #4]
   16350:	9300      	str	r3, [sp, #0]
   16352:	462b      	mov	r3, r5
   16354:	4622      	mov	r2, r4
   16356:	f7ff fe51 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&d, a, b, c, x[9], S12, 0x8b44f7af);
   1635a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1635c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1635e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16362:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16366:	4a6b      	ldr	r2, [pc, #428]	; (16514 <gxmd5_transform+0x2f8>)
   16368:	9202      	str	r2, [sp, #8]
   1636a:	220c      	movs	r2, #12
   1636c:	9201      	str	r2, [sp, #4]
   1636e:	9300      	str	r3, [sp, #0]
   16370:	462b      	mov	r3, r5
   16372:	4622      	mov	r2, r4
   16374:	f7ff fe42 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&c, d, a, b, x[10], S13, 0xffff5bb1);
   16378:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1637a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   1637c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16380:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16384:	4a64      	ldr	r2, [pc, #400]	; (16518 <gxmd5_transform+0x2fc>)
   16386:	9202      	str	r2, [sp, #8]
   16388:	2211      	movs	r2, #17
   1638a:	9201      	str	r2, [sp, #4]
   1638c:	9300      	str	r3, [sp, #0]
   1638e:	462b      	mov	r3, r5
   16390:	4622      	mov	r2, r4
   16392:	f7ff fe33 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&b, c, d, a, x[11], S14, 0x895cd7be);
   16396:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16398:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1639a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   1639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1639e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   163a2:	4a5e      	ldr	r2, [pc, #376]	; (1651c <gxmd5_transform+0x300>)
   163a4:	9202      	str	r2, [sp, #8]
   163a6:	2216      	movs	r2, #22
   163a8:	9201      	str	r2, [sp, #4]
   163aa:	9300      	str	r3, [sp, #0]
   163ac:	462b      	mov	r3, r5
   163ae:	4622      	mov	r2, r4
   163b0:	f7ff fe24 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&a, b, c, d, x[12], S11, 0x6b901122);
   163b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
   163b6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   163b8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   163ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163bc:	f107 0054 	add.w	r0, r7, #84	; 0x54
   163c0:	4a57      	ldr	r2, [pc, #348]	; (16520 <gxmd5_transform+0x304>)
   163c2:	9202      	str	r2, [sp, #8]
   163c4:	2207      	movs	r2, #7
   163c6:	9201      	str	r2, [sp, #4]
   163c8:	9300      	str	r3, [sp, #0]
   163ca:	462b      	mov	r3, r5
   163cc:	4622      	mov	r2, r4
   163ce:	f7ff fe15 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&d, a, b, c, x[13], S12, 0xfd987193);
   163d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   163d4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   163d6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   163d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   163da:	f107 0048 	add.w	r0, r7, #72	; 0x48
   163de:	4a51      	ldr	r2, [pc, #324]	; (16524 <gxmd5_transform+0x308>)
   163e0:	9202      	str	r2, [sp, #8]
   163e2:	220c      	movs	r2, #12
   163e4:	9201      	str	r2, [sp, #4]
   163e6:	9300      	str	r3, [sp, #0]
   163e8:	462b      	mov	r3, r5
   163ea:	4622      	mov	r2, r4
   163ec:	f7ff fe06 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&c, d, a, b, x[14], S13, 0xa679438e);
   163f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   163f2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   163f4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   163f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163f8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   163fc:	4a4a      	ldr	r2, [pc, #296]	; (16528 <gxmd5_transform+0x30c>)
   163fe:	9202      	str	r2, [sp, #8]
   16400:	2211      	movs	r2, #17
   16402:	9201      	str	r2, [sp, #4]
   16404:	9300      	str	r3, [sp, #0]
   16406:	462b      	mov	r3, r5
   16408:	4622      	mov	r2, r4
   1640a:	f7ff fdf7 	bl	15ffc <gxmd5_FF>
    gxmd5_FF(&b, c, d, a, x[15], S14, 0x49b40821);
   1640e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16410:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16412:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16416:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1641a:	4a44      	ldr	r2, [pc, #272]	; (1652c <gxmd5_transform+0x310>)
   1641c:	9202      	str	r2, [sp, #8]
   1641e:	2216      	movs	r2, #22
   16420:	9201      	str	r2, [sp, #4]
   16422:	9300      	str	r3, [sp, #0]
   16424:	462b      	mov	r3, r5
   16426:	4622      	mov	r2, r4
   16428:	f7ff fde8 	bl	15ffc <gxmd5_FF>

    /* Round 2 */
    gxmd5_GG(&a, b, c, d, x[1], S21, 0xf61e2562);
   1642c:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1642e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16430:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16432:	68fb      	ldr	r3, [r7, #12]
   16434:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16438:	4a3d      	ldr	r2, [pc, #244]	; (16530 <gxmd5_transform+0x314>)
   1643a:	9202      	str	r2, [sp, #8]
   1643c:	2205      	movs	r2, #5
   1643e:	9201      	str	r2, [sp, #4]
   16440:	9300      	str	r3, [sp, #0]
   16442:	462b      	mov	r3, r5
   16444:	4622      	mov	r2, r4
   16446:	f7ff fdfb 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&d, a, b, c, x[6], S22, 0xc040b340);
   1644a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1644c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1644e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16450:	6a3b      	ldr	r3, [r7, #32]
   16452:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16456:	4a37      	ldr	r2, [pc, #220]	; (16534 <gxmd5_transform+0x318>)
   16458:	9202      	str	r2, [sp, #8]
   1645a:	2209      	movs	r2, #9
   1645c:	9201      	str	r2, [sp, #4]
   1645e:	9300      	str	r3, [sp, #0]
   16460:	462b      	mov	r3, r5
   16462:	4622      	mov	r2, r4
   16464:	f7ff fdec 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&c, d, a, b, x[11], S23, 0x265e5a51);
   16468:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1646a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   1646c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16470:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16474:	4a30      	ldr	r2, [pc, #192]	; (16538 <gxmd5_transform+0x31c>)
   16476:	9202      	str	r2, [sp, #8]
   16478:	220e      	movs	r2, #14
   1647a:	9201      	str	r2, [sp, #4]
   1647c:	9300      	str	r3, [sp, #0]
   1647e:	462b      	mov	r3, r5
   16480:	4622      	mov	r2, r4
   16482:	f7ff fddd 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&b, c, d, a, x[0], S24, 0xe9b6c7aa);
   16486:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16488:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1648a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   1648c:	68bb      	ldr	r3, [r7, #8]
   1648e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16492:	4a2a      	ldr	r2, [pc, #168]	; (1653c <gxmd5_transform+0x320>)
   16494:	9202      	str	r2, [sp, #8]
   16496:	2214      	movs	r2, #20
   16498:	9201      	str	r2, [sp, #4]
   1649a:	9300      	str	r3, [sp, #0]
   1649c:	462b      	mov	r3, r5
   1649e:	4622      	mov	r2, r4
   164a0:	f7ff fdce 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&a, b, c, d, x[5], S21, 0xd62f105d);
   164a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
   164a6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   164a8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   164aa:	69fb      	ldr	r3, [r7, #28]
   164ac:	f107 0054 	add.w	r0, r7, #84	; 0x54
   164b0:	4a23      	ldr	r2, [pc, #140]	; (16540 <gxmd5_transform+0x324>)
   164b2:	9202      	str	r2, [sp, #8]
   164b4:	2205      	movs	r2, #5
   164b6:	9201      	str	r2, [sp, #4]
   164b8:	9300      	str	r3, [sp, #0]
   164ba:	462b      	mov	r3, r5
   164bc:	4622      	mov	r2, r4
   164be:	f7ff fdbf 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&d, a, b, c, x[10], S22, 0x2441453);
   164c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   164c4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   164c6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   164c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   164ca:	f107 0048 	add.w	r0, r7, #72	; 0x48
   164ce:	4a1d      	ldr	r2, [pc, #116]	; (16544 <gxmd5_transform+0x328>)
   164d0:	9202      	str	r2, [sp, #8]
   164d2:	2209      	movs	r2, #9
   164d4:	9201      	str	r2, [sp, #4]
   164d6:	9300      	str	r3, [sp, #0]
   164d8:	462b      	mov	r3, r5
   164da:	4622      	mov	r2, r4
   164dc:	f7ff fdb0 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&c, d, a, b, x[15], S23, 0xd8a1e681);
   164e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   164e2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   164e4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   164e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   164e8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   164ec:	e02c      	b.n	16548 <gxmd5_transform+0x32c>
   164ee:	bf00      	nop
   164f0:	d76aa478 	.word	0xd76aa478
   164f4:	e8c7b756 	.word	0xe8c7b756
   164f8:	242070db 	.word	0x242070db
   164fc:	c1bdceee 	.word	0xc1bdceee
   16500:	f57c0faf 	.word	0xf57c0faf
   16504:	4787c62a 	.word	0x4787c62a
   16508:	a8304613 	.word	0xa8304613
   1650c:	fd469501 	.word	0xfd469501
   16510:	698098d8 	.word	0x698098d8
   16514:	8b44f7af 	.word	0x8b44f7af
   16518:	ffff5bb1 	.word	0xffff5bb1
   1651c:	895cd7be 	.word	0x895cd7be
   16520:	6b901122 	.word	0x6b901122
   16524:	fd987193 	.word	0xfd987193
   16528:	a679438e 	.word	0xa679438e
   1652c:	49b40821 	.word	0x49b40821
   16530:	f61e2562 	.word	0xf61e2562
   16534:	c040b340 	.word	0xc040b340
   16538:	265e5a51 	.word	0x265e5a51
   1653c:	e9b6c7aa 	.word	0xe9b6c7aa
   16540:	d62f105d 	.word	0xd62f105d
   16544:	02441453 	.word	0x02441453
   16548:	4aa5      	ldr	r2, [pc, #660]	; (167e0 <gxmd5_transform+0x5c4>)
   1654a:	9202      	str	r2, [sp, #8]
   1654c:	220e      	movs	r2, #14
   1654e:	9201      	str	r2, [sp, #4]
   16550:	9300      	str	r3, [sp, #0]
   16552:	462b      	mov	r3, r5
   16554:	4622      	mov	r2, r4
   16556:	f7ff fd73 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&b, c, d, a, x[4], S24, 0xe7d3fbc8);
   1655a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1655c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1655e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16560:	69bb      	ldr	r3, [r7, #24]
   16562:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16566:	4a9f      	ldr	r2, [pc, #636]	; (167e4 <gxmd5_transform+0x5c8>)
   16568:	9202      	str	r2, [sp, #8]
   1656a:	2214      	movs	r2, #20
   1656c:	9201      	str	r2, [sp, #4]
   1656e:	9300      	str	r3, [sp, #0]
   16570:	462b      	mov	r3, r5
   16572:	4622      	mov	r2, r4
   16574:	f7ff fd64 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&a, b, c, d, x[9], S21, 0x21e1cde6);
   16578:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1657a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   1657c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   1657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16580:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16584:	4a98      	ldr	r2, [pc, #608]	; (167e8 <gxmd5_transform+0x5cc>)
   16586:	9202      	str	r2, [sp, #8]
   16588:	2205      	movs	r2, #5
   1658a:	9201      	str	r2, [sp, #4]
   1658c:	9300      	str	r3, [sp, #0]
   1658e:	462b      	mov	r3, r5
   16590:	4622      	mov	r2, r4
   16592:	f7ff fd55 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&d, a, b, c, x[14], S22, 0xc33707d6);
   16596:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16598:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1659a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   1659c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1659e:	f107 0048 	add.w	r0, r7, #72	; 0x48
   165a2:	4a92      	ldr	r2, [pc, #584]	; (167ec <gxmd5_transform+0x5d0>)
   165a4:	9202      	str	r2, [sp, #8]
   165a6:	2209      	movs	r2, #9
   165a8:	9201      	str	r2, [sp, #4]
   165aa:	9300      	str	r3, [sp, #0]
   165ac:	462b      	mov	r3, r5
   165ae:	4622      	mov	r2, r4
   165b0:	f7ff fd46 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&c, d, a, b, x[3], S23, 0xf4d50d87);
   165b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   165b6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   165b8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   165ba:	697b      	ldr	r3, [r7, #20]
   165bc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   165c0:	4a8b      	ldr	r2, [pc, #556]	; (167f0 <gxmd5_transform+0x5d4>)
   165c2:	9202      	str	r2, [sp, #8]
   165c4:	220e      	movs	r2, #14
   165c6:	9201      	str	r2, [sp, #4]
   165c8:	9300      	str	r3, [sp, #0]
   165ca:	462b      	mov	r3, r5
   165cc:	4622      	mov	r2, r4
   165ce:	f7ff fd37 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&b, c, d, a, x[8], S24, 0x455a14ed);
   165d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   165d4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   165d6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   165d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165da:	f107 0050 	add.w	r0, r7, #80	; 0x50
   165de:	4a85      	ldr	r2, [pc, #532]	; (167f4 <gxmd5_transform+0x5d8>)
   165e0:	9202      	str	r2, [sp, #8]
   165e2:	2214      	movs	r2, #20
   165e4:	9201      	str	r2, [sp, #4]
   165e6:	9300      	str	r3, [sp, #0]
   165e8:	462b      	mov	r3, r5
   165ea:	4622      	mov	r2, r4
   165ec:	f7ff fd28 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&a, b, c, d, x[13], S21, 0xa9e3e905);
   165f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
   165f2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   165f4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   165f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165f8:	f107 0054 	add.w	r0, r7, #84	; 0x54
   165fc:	4a7e      	ldr	r2, [pc, #504]	; (167f8 <gxmd5_transform+0x5dc>)
   165fe:	9202      	str	r2, [sp, #8]
   16600:	2205      	movs	r2, #5
   16602:	9201      	str	r2, [sp, #4]
   16604:	9300      	str	r3, [sp, #0]
   16606:	462b      	mov	r3, r5
   16608:	4622      	mov	r2, r4
   1660a:	f7ff fd19 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&d, a, b, c, x[2], S22, 0xfcefa3f8);
   1660e:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16610:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   16612:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16614:	693b      	ldr	r3, [r7, #16]
   16616:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1661a:	4a78      	ldr	r2, [pc, #480]	; (167fc <gxmd5_transform+0x5e0>)
   1661c:	9202      	str	r2, [sp, #8]
   1661e:	2209      	movs	r2, #9
   16620:	9201      	str	r2, [sp, #4]
   16622:	9300      	str	r3, [sp, #0]
   16624:	462b      	mov	r3, r5
   16626:	4622      	mov	r2, r4
   16628:	f7ff fd0a 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&c, d, a, b, x[7], S23, 0x676f02d9);
   1662c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1662e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   16630:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   16632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16634:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16638:	4a71      	ldr	r2, [pc, #452]	; (16800 <gxmd5_transform+0x5e4>)
   1663a:	9202      	str	r2, [sp, #8]
   1663c:	220e      	movs	r2, #14
   1663e:	9201      	str	r2, [sp, #4]
   16640:	9300      	str	r3, [sp, #0]
   16642:	462b      	mov	r3, r5
   16644:	4622      	mov	r2, r4
   16646:	f7ff fcfb 	bl	16040 <gxmd5_GG>
    gxmd5_GG(&b, c, d, a, x[12], S24, 0x8d2a4c8a);
   1664a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1664c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1664e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16652:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16656:	4a6b      	ldr	r2, [pc, #428]	; (16804 <gxmd5_transform+0x5e8>)
   16658:	9202      	str	r2, [sp, #8]
   1665a:	2214      	movs	r2, #20
   1665c:	9201      	str	r2, [sp, #4]
   1665e:	9300      	str	r3, [sp, #0]
   16660:	462b      	mov	r3, r5
   16662:	4622      	mov	r2, r4
   16664:	f7ff fcec 	bl	16040 <gxmd5_GG>

    /* Round 3 */
    gxmd5_HH(&a, b, c, d, x[5], S31, 0xfffa3942);
   16668:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1666a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   1666c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   1666e:	69fb      	ldr	r3, [r7, #28]
   16670:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16674:	4a64      	ldr	r2, [pc, #400]	; (16808 <gxmd5_transform+0x5ec>)
   16676:	9202      	str	r2, [sp, #8]
   16678:	2204      	movs	r2, #4
   1667a:	9201      	str	r2, [sp, #4]
   1667c:	9300      	str	r3, [sp, #0]
   1667e:	462b      	mov	r3, r5
   16680:	4622      	mov	r2, r4
   16682:	f7ff fcff 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&d, a, b, c, x[8], S32, 0x8771f681);
   16686:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16688:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1668a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   1668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1668e:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16692:	4a5e      	ldr	r2, [pc, #376]	; (1680c <gxmd5_transform+0x5f0>)
   16694:	9202      	str	r2, [sp, #8]
   16696:	220b      	movs	r2, #11
   16698:	9201      	str	r2, [sp, #4]
   1669a:	9300      	str	r3, [sp, #0]
   1669c:	462b      	mov	r3, r5
   1669e:	4622      	mov	r2, r4
   166a0:	f7ff fcf0 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&c, d, a, b, x[11], S33, 0x6d9d6122);
   166a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   166a6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   166a8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   166aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166ac:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   166b0:	4a57      	ldr	r2, [pc, #348]	; (16810 <gxmd5_transform+0x5f4>)
   166b2:	9202      	str	r2, [sp, #8]
   166b4:	2210      	movs	r2, #16
   166b6:	9201      	str	r2, [sp, #4]
   166b8:	9300      	str	r3, [sp, #0]
   166ba:	462b      	mov	r3, r5
   166bc:	4622      	mov	r2, r4
   166be:	f7ff fce1 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&b, c, d, a, x[14], S34, 0xfde5380c);
   166c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   166c4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   166c6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   166c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   166ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
   166ce:	4a51      	ldr	r2, [pc, #324]	; (16814 <gxmd5_transform+0x5f8>)
   166d0:	9202      	str	r2, [sp, #8]
   166d2:	2217      	movs	r2, #23
   166d4:	9201      	str	r2, [sp, #4]
   166d6:	9300      	str	r3, [sp, #0]
   166d8:	462b      	mov	r3, r5
   166da:	4622      	mov	r2, r4
   166dc:	f7ff fcd2 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&a, b, c, d, x[1], S31, 0xa4beea44);
   166e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
   166e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   166e4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	f107 0054 	add.w	r0, r7, #84	; 0x54
   166ec:	4a4a      	ldr	r2, [pc, #296]	; (16818 <gxmd5_transform+0x5fc>)
   166ee:	9202      	str	r2, [sp, #8]
   166f0:	2204      	movs	r2, #4
   166f2:	9201      	str	r2, [sp, #4]
   166f4:	9300      	str	r3, [sp, #0]
   166f6:	462b      	mov	r3, r5
   166f8:	4622      	mov	r2, r4
   166fa:	f7ff fcc3 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&d, a, b, c, x[4], S32, 0x4bdecfa9);
   166fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16700:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   16702:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16704:	69bb      	ldr	r3, [r7, #24]
   16706:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1670a:	4a44      	ldr	r2, [pc, #272]	; (1681c <gxmd5_transform+0x600>)
   1670c:	9202      	str	r2, [sp, #8]
   1670e:	220b      	movs	r2, #11
   16710:	9201      	str	r2, [sp, #4]
   16712:	9300      	str	r3, [sp, #0]
   16714:	462b      	mov	r3, r5
   16716:	4622      	mov	r2, r4
   16718:	f7ff fcb4 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&c, d, a, b, x[7], S33, 0xf6bb4b60);
   1671c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1671e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   16720:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   16722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16724:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16728:	4a3d      	ldr	r2, [pc, #244]	; (16820 <gxmd5_transform+0x604>)
   1672a:	9202      	str	r2, [sp, #8]
   1672c:	2210      	movs	r2, #16
   1672e:	9201      	str	r2, [sp, #4]
   16730:	9300      	str	r3, [sp, #0]
   16732:	462b      	mov	r3, r5
   16734:	4622      	mov	r2, r4
   16736:	f7ff fca5 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&b, c, d, a, x[10], S34, 0xbebfbc70);
   1673a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1673c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1673e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16742:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16746:	4a37      	ldr	r2, [pc, #220]	; (16824 <gxmd5_transform+0x608>)
   16748:	9202      	str	r2, [sp, #8]
   1674a:	2217      	movs	r2, #23
   1674c:	9201      	str	r2, [sp, #4]
   1674e:	9300      	str	r3, [sp, #0]
   16750:	462b      	mov	r3, r5
   16752:	4622      	mov	r2, r4
   16754:	f7ff fc96 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&a, b, c, d, x[13], S31, 0x289b7ec6);
   16758:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1675a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   1675c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   1675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16760:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16764:	4a30      	ldr	r2, [pc, #192]	; (16828 <gxmd5_transform+0x60c>)
   16766:	9202      	str	r2, [sp, #8]
   16768:	2204      	movs	r2, #4
   1676a:	9201      	str	r2, [sp, #4]
   1676c:	9300      	str	r3, [sp, #0]
   1676e:	462b      	mov	r3, r5
   16770:	4622      	mov	r2, r4
   16772:	f7ff fc87 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&d, a, b, c, x[0], S32, 0xeaa127fa);
   16776:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16778:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1677a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   1677c:	68bb      	ldr	r3, [r7, #8]
   1677e:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16782:	4a2a      	ldr	r2, [pc, #168]	; (1682c <gxmd5_transform+0x610>)
   16784:	9202      	str	r2, [sp, #8]
   16786:	220b      	movs	r2, #11
   16788:	9201      	str	r2, [sp, #4]
   1678a:	9300      	str	r3, [sp, #0]
   1678c:	462b      	mov	r3, r5
   1678e:	4622      	mov	r2, r4
   16790:	f7ff fc78 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&c, d, a, b, x[3], S33, 0xd4ef3085);
   16794:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16796:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   16798:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1679a:	697b      	ldr	r3, [r7, #20]
   1679c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   167a0:	4a23      	ldr	r2, [pc, #140]	; (16830 <gxmd5_transform+0x614>)
   167a2:	9202      	str	r2, [sp, #8]
   167a4:	2210      	movs	r2, #16
   167a6:	9201      	str	r2, [sp, #4]
   167a8:	9300      	str	r3, [sp, #0]
   167aa:	462b      	mov	r3, r5
   167ac:	4622      	mov	r2, r4
   167ae:	f7ff fc69 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&b, c, d, a, x[6], S34, 0x4881d05);
   167b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   167b4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   167b6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   167b8:	6a3b      	ldr	r3, [r7, #32]
   167ba:	f107 0050 	add.w	r0, r7, #80	; 0x50
   167be:	4a1d      	ldr	r2, [pc, #116]	; (16834 <gxmd5_transform+0x618>)
   167c0:	9202      	str	r2, [sp, #8]
   167c2:	2217      	movs	r2, #23
   167c4:	9201      	str	r2, [sp, #4]
   167c6:	9300      	str	r3, [sp, #0]
   167c8:	462b      	mov	r3, r5
   167ca:	4622      	mov	r2, r4
   167cc:	f7ff fc5a 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&a, b, c, d, x[9], S31, 0xd9d4d039);
   167d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
   167d2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   167d4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167d8:	f107 0054 	add.w	r0, r7, #84	; 0x54
   167dc:	e02c      	b.n	16838 <gxmd5_transform+0x61c>
   167de:	bf00      	nop
   167e0:	d8a1e681 	.word	0xd8a1e681
   167e4:	e7d3fbc8 	.word	0xe7d3fbc8
   167e8:	21e1cde6 	.word	0x21e1cde6
   167ec:	c33707d6 	.word	0xc33707d6
   167f0:	f4d50d87 	.word	0xf4d50d87
   167f4:	455a14ed 	.word	0x455a14ed
   167f8:	a9e3e905 	.word	0xa9e3e905
   167fc:	fcefa3f8 	.word	0xfcefa3f8
   16800:	676f02d9 	.word	0x676f02d9
   16804:	8d2a4c8a 	.word	0x8d2a4c8a
   16808:	fffa3942 	.word	0xfffa3942
   1680c:	8771f681 	.word	0x8771f681
   16810:	6d9d6122 	.word	0x6d9d6122
   16814:	fde5380c 	.word	0xfde5380c
   16818:	a4beea44 	.word	0xa4beea44
   1681c:	4bdecfa9 	.word	0x4bdecfa9
   16820:	f6bb4b60 	.word	0xf6bb4b60
   16824:	bebfbc70 	.word	0xbebfbc70
   16828:	289b7ec6 	.word	0x289b7ec6
   1682c:	eaa127fa 	.word	0xeaa127fa
   16830:	d4ef3085 	.word	0xd4ef3085
   16834:	04881d05 	.word	0x04881d05
   16838:	4aa3      	ldr	r2, [pc, #652]	; (16ac8 <gxmd5_transform+0x8ac>)
   1683a:	9202      	str	r2, [sp, #8]
   1683c:	2204      	movs	r2, #4
   1683e:	9201      	str	r2, [sp, #4]
   16840:	9300      	str	r3, [sp, #0]
   16842:	462b      	mov	r3, r5
   16844:	4622      	mov	r2, r4
   16846:	f7ff fc1d 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&d, a, b, c, x[12], S32, 0xe6db99e5);
   1684a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1684c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1684e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16852:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16856:	4a9d      	ldr	r2, [pc, #628]	; (16acc <gxmd5_transform+0x8b0>)
   16858:	9202      	str	r2, [sp, #8]
   1685a:	220b      	movs	r2, #11
   1685c:	9201      	str	r2, [sp, #4]
   1685e:	9300      	str	r3, [sp, #0]
   16860:	462b      	mov	r3, r5
   16862:	4622      	mov	r2, r4
   16864:	f7ff fc0e 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&c, d, a, b, x[15], S33, 0x1fa27cf8);
   16868:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1686a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   1686c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1686e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16870:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16874:	4a96      	ldr	r2, [pc, #600]	; (16ad0 <gxmd5_transform+0x8b4>)
   16876:	9202      	str	r2, [sp, #8]
   16878:	2210      	movs	r2, #16
   1687a:	9201      	str	r2, [sp, #4]
   1687c:	9300      	str	r3, [sp, #0]
   1687e:	462b      	mov	r3, r5
   16880:	4622      	mov	r2, r4
   16882:	f7ff fbff 	bl	16084 <gxmd5_HH>
    gxmd5_HH(&b, c, d, a, x[2], S34, 0xc4ac5665);
   16886:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16888:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1688a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   1688c:	693b      	ldr	r3, [r7, #16]
   1688e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16892:	4a90      	ldr	r2, [pc, #576]	; (16ad4 <gxmd5_transform+0x8b8>)
   16894:	9202      	str	r2, [sp, #8]
   16896:	2217      	movs	r2, #23
   16898:	9201      	str	r2, [sp, #4]
   1689a:	9300      	str	r3, [sp, #0]
   1689c:	462b      	mov	r3, r5
   1689e:	4622      	mov	r2, r4
   168a0:	f7ff fbf0 	bl	16084 <gxmd5_HH>

    /* Round 4 */
    gxmd5_II(&a, b, c, d, x[0], S41, 0xf4292244);
   168a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
   168a6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   168a8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   168aa:	68bb      	ldr	r3, [r7, #8]
   168ac:	f107 0054 	add.w	r0, r7, #84	; 0x54
   168b0:	4a89      	ldr	r2, [pc, #548]	; (16ad8 <gxmd5_transform+0x8bc>)
   168b2:	9202      	str	r2, [sp, #8]
   168b4:	2206      	movs	r2, #6
   168b6:	9201      	str	r2, [sp, #4]
   168b8:	9300      	str	r3, [sp, #0]
   168ba:	462b      	mov	r3, r5
   168bc:	4622      	mov	r2, r4
   168be:	f7ff fc03 	bl	160c8 <gxmd5_II>
    gxmd5_II(&d, a, b, c, x[7], S42, 0x432aff97);
   168c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   168c4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   168c6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168ca:	f107 0048 	add.w	r0, r7, #72	; 0x48
   168ce:	4a83      	ldr	r2, [pc, #524]	; (16adc <gxmd5_transform+0x8c0>)
   168d0:	9202      	str	r2, [sp, #8]
   168d2:	220a      	movs	r2, #10
   168d4:	9201      	str	r2, [sp, #4]
   168d6:	9300      	str	r3, [sp, #0]
   168d8:	462b      	mov	r3, r5
   168da:	4622      	mov	r2, r4
   168dc:	f7ff fbf4 	bl	160c8 <gxmd5_II>
    gxmd5_II(&c, d, a, b, x[14], S43, 0xab9423a7);
   168e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   168e2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   168e4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   168e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   168e8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   168ec:	4a7c      	ldr	r2, [pc, #496]	; (16ae0 <gxmd5_transform+0x8c4>)
   168ee:	9202      	str	r2, [sp, #8]
   168f0:	220f      	movs	r2, #15
   168f2:	9201      	str	r2, [sp, #4]
   168f4:	9300      	str	r3, [sp, #0]
   168f6:	462b      	mov	r3, r5
   168f8:	4622      	mov	r2, r4
   168fa:	f7ff fbe5 	bl	160c8 <gxmd5_II>
    gxmd5_II(&b, c, d, a, x[5], S44, 0xfc93a039);
   168fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16900:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16902:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16904:	69fb      	ldr	r3, [r7, #28]
   16906:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1690a:	4a76      	ldr	r2, [pc, #472]	; (16ae4 <gxmd5_transform+0x8c8>)
   1690c:	9202      	str	r2, [sp, #8]
   1690e:	2215      	movs	r2, #21
   16910:	9201      	str	r2, [sp, #4]
   16912:	9300      	str	r3, [sp, #0]
   16914:	462b      	mov	r3, r5
   16916:	4622      	mov	r2, r4
   16918:	f7ff fbd6 	bl	160c8 <gxmd5_II>
    gxmd5_II(&a, b, c, d, x[12], S41, 0x655b59c3);
   1691c:	6d39      	ldr	r1, [r7, #80]	; 0x50
   1691e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16920:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16924:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16928:	4a6f      	ldr	r2, [pc, #444]	; (16ae8 <gxmd5_transform+0x8cc>)
   1692a:	9202      	str	r2, [sp, #8]
   1692c:	2206      	movs	r2, #6
   1692e:	9201      	str	r2, [sp, #4]
   16930:	9300      	str	r3, [sp, #0]
   16932:	462b      	mov	r3, r5
   16934:	4622      	mov	r2, r4
   16936:	f7ff fbc7 	bl	160c8 <gxmd5_II>
    gxmd5_II(&d, a, b, c, x[3], S42, 0x8f0ccc92);
   1693a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1693c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1693e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16940:	697b      	ldr	r3, [r7, #20]
   16942:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16946:	4a69      	ldr	r2, [pc, #420]	; (16aec <gxmd5_transform+0x8d0>)
   16948:	9202      	str	r2, [sp, #8]
   1694a:	220a      	movs	r2, #10
   1694c:	9201      	str	r2, [sp, #4]
   1694e:	9300      	str	r3, [sp, #0]
   16950:	462b      	mov	r3, r5
   16952:	4622      	mov	r2, r4
   16954:	f7ff fbb8 	bl	160c8 <gxmd5_II>
    gxmd5_II(&c, d, a, b, x[10], S43, 0xffeff47d);
   16958:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1695a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   1695c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   1695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16960:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16964:	4a62      	ldr	r2, [pc, #392]	; (16af0 <gxmd5_transform+0x8d4>)
   16966:	9202      	str	r2, [sp, #8]
   16968:	220f      	movs	r2, #15
   1696a:	9201      	str	r2, [sp, #4]
   1696c:	9300      	str	r3, [sp, #0]
   1696e:	462b      	mov	r3, r5
   16970:	4622      	mov	r2, r4
   16972:	f7ff fba9 	bl	160c8 <gxmd5_II>
    gxmd5_II(&b, c, d, a, x[1], S44, 0x85845dd1);
   16976:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16978:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1697a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   1697c:	68fb      	ldr	r3, [r7, #12]
   1697e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16982:	4a5c      	ldr	r2, [pc, #368]	; (16af4 <gxmd5_transform+0x8d8>)
   16984:	9202      	str	r2, [sp, #8]
   16986:	2215      	movs	r2, #21
   16988:	9201      	str	r2, [sp, #4]
   1698a:	9300      	str	r3, [sp, #0]
   1698c:	462b      	mov	r3, r5
   1698e:	4622      	mov	r2, r4
   16990:	f7ff fb9a 	bl	160c8 <gxmd5_II>
    gxmd5_II(&a, b, c, d, x[8], S41, 0x6fa87e4f);
   16994:	6d39      	ldr	r1, [r7, #80]	; 0x50
   16996:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16998:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   1699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1699c:	f107 0054 	add.w	r0, r7, #84	; 0x54
   169a0:	4a55      	ldr	r2, [pc, #340]	; (16af8 <gxmd5_transform+0x8dc>)
   169a2:	9202      	str	r2, [sp, #8]
   169a4:	2206      	movs	r2, #6
   169a6:	9201      	str	r2, [sp, #4]
   169a8:	9300      	str	r3, [sp, #0]
   169aa:	462b      	mov	r3, r5
   169ac:	4622      	mov	r2, r4
   169ae:	f7ff fb8b 	bl	160c8 <gxmd5_II>
    gxmd5_II(&d, a, b, c, x[15], S42, 0xfe2ce6e0);
   169b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   169b4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   169b6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   169b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   169ba:	f107 0048 	add.w	r0, r7, #72	; 0x48
   169be:	4a4f      	ldr	r2, [pc, #316]	; (16afc <gxmd5_transform+0x8e0>)
   169c0:	9202      	str	r2, [sp, #8]
   169c2:	220a      	movs	r2, #10
   169c4:	9201      	str	r2, [sp, #4]
   169c6:	9300      	str	r3, [sp, #0]
   169c8:	462b      	mov	r3, r5
   169ca:	4622      	mov	r2, r4
   169cc:	f7ff fb7c 	bl	160c8 <gxmd5_II>
    gxmd5_II(&c, d, a, b, x[6], S43, 0xa3014314);
   169d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   169d2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   169d4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   169d6:	6a3b      	ldr	r3, [r7, #32]
   169d8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   169dc:	4a48      	ldr	r2, [pc, #288]	; (16b00 <gxmd5_transform+0x8e4>)
   169de:	9202      	str	r2, [sp, #8]
   169e0:	220f      	movs	r2, #15
   169e2:	9201      	str	r2, [sp, #4]
   169e4:	9300      	str	r3, [sp, #0]
   169e6:	462b      	mov	r3, r5
   169e8:	4622      	mov	r2, r4
   169ea:	f7ff fb6d 	bl	160c8 <gxmd5_II>
    gxmd5_II(&b, c, d, a, x[13], S44, 0x4e0811a1);
   169ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   169f0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   169f2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   169f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   169f6:	f107 0050 	add.w	r0, r7, #80	; 0x50
   169fa:	4a42      	ldr	r2, [pc, #264]	; (16b04 <gxmd5_transform+0x8e8>)
   169fc:	9202      	str	r2, [sp, #8]
   169fe:	2215      	movs	r2, #21
   16a00:	9201      	str	r2, [sp, #4]
   16a02:	9300      	str	r3, [sp, #0]
   16a04:	462b      	mov	r3, r5
   16a06:	4622      	mov	r2, r4
   16a08:	f7ff fb5e 	bl	160c8 <gxmd5_II>
    gxmd5_II(&a, b, c, d, x[4], S41, 0xf7537e82);
   16a0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
   16a0e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   16a10:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16a12:	69bb      	ldr	r3, [r7, #24]
   16a14:	f107 0054 	add.w	r0, r7, #84	; 0x54
   16a18:	4a3b      	ldr	r2, [pc, #236]	; (16b08 <gxmd5_transform+0x8ec>)
   16a1a:	9202      	str	r2, [sp, #8]
   16a1c:	2206      	movs	r2, #6
   16a1e:	9201      	str	r2, [sp, #4]
   16a20:	9300      	str	r3, [sp, #0]
   16a22:	462b      	mov	r3, r5
   16a24:	4622      	mov	r2, r4
   16a26:	f7ff fb4f 	bl	160c8 <gxmd5_II>
    gxmd5_II(&d, a, b, c, x[11], S42, 0xbd3af235);
   16a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16a2c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   16a2e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   16a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a32:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16a36:	4a35      	ldr	r2, [pc, #212]	; (16b0c <gxmd5_transform+0x8f0>)
   16a38:	9202      	str	r2, [sp, #8]
   16a3a:	220a      	movs	r2, #10
   16a3c:	9201      	str	r2, [sp, #4]
   16a3e:	9300      	str	r3, [sp, #0]
   16a40:	462b      	mov	r3, r5
   16a42:	4622      	mov	r2, r4
   16a44:	f7ff fb40 	bl	160c8 <gxmd5_II>
    gxmd5_II(&c, d, a, b, x[2], S43, 0x2ad7d2bb);
   16a48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16a4a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   16a4c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
   16a4e:	693b      	ldr	r3, [r7, #16]
   16a50:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   16a54:	4a2e      	ldr	r2, [pc, #184]	; (16b10 <gxmd5_transform+0x8f4>)
   16a56:	9202      	str	r2, [sp, #8]
   16a58:	220f      	movs	r2, #15
   16a5a:	9201      	str	r2, [sp, #4]
   16a5c:	9300      	str	r3, [sp, #0]
   16a5e:	462b      	mov	r3, r5
   16a60:	4622      	mov	r2, r4
   16a62:	f7ff fb31 	bl	160c8 <gxmd5_II>
    gxmd5_II(&b, c, d, a, x[9], S44, 0xeb86d391);
   16a66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   16a68:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16a6a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   16a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a6e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   16a72:	4a28      	ldr	r2, [pc, #160]	; (16b14 <gxmd5_transform+0x8f8>)
   16a74:	9202      	str	r2, [sp, #8]
   16a76:	2215      	movs	r2, #21
   16a78:	9201      	str	r2, [sp, #4]
   16a7a:	9300      	str	r3, [sp, #0]
   16a7c:	462b      	mov	r3, r5
   16a7e:	4622      	mov	r2, r4
   16a80:	f7ff fb22 	bl	160c8 <gxmd5_II>

    state[0] += a;
   16a84:	683b      	ldr	r3, [r7, #0]
   16a86:	681a      	ldr	r2, [r3, #0]
   16a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16a8a:	441a      	add	r2, r3
   16a8c:	683b      	ldr	r3, [r7, #0]
   16a8e:	601a      	str	r2, [r3, #0]
    state[1] += b;
   16a90:	683b      	ldr	r3, [r7, #0]
   16a92:	3304      	adds	r3, #4
   16a94:	683a      	ldr	r2, [r7, #0]
   16a96:	3204      	adds	r2, #4
   16a98:	6811      	ldr	r1, [r2, #0]
   16a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   16a9c:	440a      	add	r2, r1
   16a9e:	601a      	str	r2, [r3, #0]
    state[2] += c;
   16aa0:	683b      	ldr	r3, [r7, #0]
   16aa2:	3308      	adds	r3, #8
   16aa4:	683a      	ldr	r2, [r7, #0]
   16aa6:	3208      	adds	r2, #8
   16aa8:	6811      	ldr	r1, [r2, #0]
   16aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16aac:	440a      	add	r2, r1
   16aae:	601a      	str	r2, [r3, #0]
    state[3] += d;
   16ab0:	683b      	ldr	r3, [r7, #0]
   16ab2:	330c      	adds	r3, #12
   16ab4:	683a      	ldr	r2, [r7, #0]
   16ab6:	320c      	adds	r2, #12
   16ab8:	6811      	ldr	r1, [r2, #0]
   16aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16abc:	440a      	add	r2, r1
   16abe:	601a      	str	r2, [r3, #0]
}
   16ac0:	bf00      	nop
   16ac2:	3758      	adds	r7, #88	; 0x58
   16ac4:	46bd      	mov	sp, r7
   16ac6:	bdb0      	pop	{r4, r5, r7, pc}
   16ac8:	d9d4d039 	.word	0xd9d4d039
   16acc:	e6db99e5 	.word	0xe6db99e5
   16ad0:	1fa27cf8 	.word	0x1fa27cf8
   16ad4:	c4ac5665 	.word	0xc4ac5665
   16ad8:	f4292244 	.word	0xf4292244
   16adc:	432aff97 	.word	0x432aff97
   16ae0:	ab9423a7 	.word	0xab9423a7
   16ae4:	fc93a039 	.word	0xfc93a039
   16ae8:	655b59c3 	.word	0x655b59c3
   16aec:	8f0ccc92 	.word	0x8f0ccc92
   16af0:	ffeff47d 	.word	0xffeff47d
   16af4:	85845dd1 	.word	0x85845dd1
   16af8:	6fa87e4f 	.word	0x6fa87e4f
   16afc:	fe2ce6e0 	.word	0xfe2ce6e0
   16b00:	a3014314 	.word	0xa3014314
   16b04:	4e0811a1 	.word	0x4e0811a1
   16b08:	f7537e82 	.word	0xf7537e82
   16b0c:	bd3af235 	.word	0xbd3af235
   16b10:	2ad7d2bb 	.word	0x2ad7d2bb
   16b14:	eb86d391 	.word	0xeb86d391

00016b18 <gxmd5_update>:

int gxmd5_update(unsigned char* data, unsigned int len, unsigned char* buffer, unsigned int* count, unsigned int* state)
{
   16b18:	b580      	push	{r7, lr}
   16b1a:	b088      	sub	sp, #32
   16b1c:	af00      	add	r7, sp, #0
   16b1e:	60f8      	str	r0, [r7, #12]
   16b20:	60b9      	str	r1, [r7, #8]
   16b22:	607a      	str	r2, [r7, #4]
   16b24:	603b      	str	r3, [r7, #0]
    unsigned int i;
    // Number of bytes.
    unsigned int index = count[0] / 8 % 64;
   16b26:	683b      	ldr	r3, [r7, #0]
   16b28:	681b      	ldr	r3, [r3, #0]
   16b2a:	08db      	lsrs	r3, r3, #3
   16b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16b30:	61bb      	str	r3, [r7, #24]

    // Update number of bits
    if ((count[0] += (len << 3)) < (len << 3))
   16b32:	683b      	ldr	r3, [r7, #0]
   16b34:	681a      	ldr	r2, [r3, #0]
   16b36:	68bb      	ldr	r3, [r7, #8]
   16b38:	00db      	lsls	r3, r3, #3
   16b3a:	441a      	add	r2, r3
   16b3c:	683b      	ldr	r3, [r7, #0]
   16b3e:	601a      	str	r2, [r3, #0]
   16b40:	683b      	ldr	r3, [r7, #0]
   16b42:	681a      	ldr	r2, [r3, #0]
   16b44:	68bb      	ldr	r3, [r7, #8]
   16b46:	00db      	lsls	r3, r3, #3
   16b48:	429a      	cmp	r2, r3
   16b4a:	d204      	bcs.n	16b56 <gxmd5_update+0x3e>
    {
        count[1]++;
   16b4c:	683b      	ldr	r3, [r7, #0]
   16b4e:	3304      	adds	r3, #4
   16b50:	681a      	ldr	r2, [r3, #0]
   16b52:	3201      	adds	r2, #1
   16b54:	601a      	str	r2, [r3, #0]
    }
    count[1] += (len >> 29);
   16b56:	683b      	ldr	r3, [r7, #0]
   16b58:	3304      	adds	r3, #4
   16b5a:	683a      	ldr	r2, [r7, #0]
   16b5c:	3204      	adds	r2, #4
   16b5e:	6811      	ldr	r1, [r2, #0]
   16b60:	68ba      	ldr	r2, [r7, #8]
   16b62:	0f52      	lsrs	r2, r2, #29
   16b64:	440a      	add	r2, r1
   16b66:	601a      	str	r2, [r3, #0]

    // number of bytes we need to fill in buffer
    unsigned int firstpart = 64 - index;
   16b68:	69bb      	ldr	r3, [r7, #24]
   16b6a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   16b6e:	617b      	str	r3, [r7, #20]


    // transform as many times as possible.
    if (len >= firstpart)
   16b70:	68ba      	ldr	r2, [r7, #8]
   16b72:	697b      	ldr	r3, [r7, #20]
   16b74:	429a      	cmp	r2, r3
   16b76:	d321      	bcc.n	16bbc <gxmd5_update+0xa4>
    {
        memcpy(&buffer[index], data, firstpart);
   16b78:	687a      	ldr	r2, [r7, #4]
   16b7a:	69bb      	ldr	r3, [r7, #24]
   16b7c:	4413      	add	r3, r2
   16b7e:	697a      	ldr	r2, [r7, #20]
   16b80:	68f9      	ldr	r1, [r7, #12]
   16b82:	4618      	mov	r0, r3
   16b84:	f012 ff7d 	bl	29a82 <memcpy>
        gxmd5_transform(buffer, state);
   16b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16b8a:	6878      	ldr	r0, [r7, #4]
   16b8c:	f7ff fb46 	bl	1621c <gxmd5_transform>

        // Transform block
        for (i = firstpart; i + 64 <= len; i += 64)
   16b90:	697b      	ldr	r3, [r7, #20]
   16b92:	61fb      	str	r3, [r7, #28]
   16b94:	e009      	b.n	16baa <gxmd5_update+0x92>
        {
            gxmd5_transform(data + i, state);
   16b96:	68fa      	ldr	r2, [r7, #12]
   16b98:	69fb      	ldr	r3, [r7, #28]
   16b9a:	4413      	add	r3, r2
   16b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16b9e:	4618      	mov	r0, r3
   16ba0:	f7ff fb3c 	bl	1621c <gxmd5_transform>
    {
        memcpy(&buffer[index], data, firstpart);
        gxmd5_transform(buffer, state);

        // Transform block
        for (i = firstpart; i + 64 <= len; i += 64)
   16ba4:	69fb      	ldr	r3, [r7, #28]
   16ba6:	3340      	adds	r3, #64	; 0x40
   16ba8:	61fb      	str	r3, [r7, #28]
   16baa:	69fb      	ldr	r3, [r7, #28]
   16bac:	f103 0240 	add.w	r2, r3, #64	; 0x40
   16bb0:	68bb      	ldr	r3, [r7, #8]
   16bb2:	429a      	cmp	r2, r3
   16bb4:	d9ef      	bls.n	16b96 <gxmd5_update+0x7e>
        {
            gxmd5_transform(data + i, state);
        }
        index = 0;
   16bb6:	2300      	movs	r3, #0
   16bb8:	61bb      	str	r3, [r7, #24]
   16bba:	e001      	b.n	16bc0 <gxmd5_update+0xa8>
    }
    else
    {
        i = 0;
   16bbc:	2300      	movs	r3, #0
   16bbe:	61fb      	str	r3, [r7, #28]
    }

    memcpy(&buffer[index], &data[i], len - i);
   16bc0:	687a      	ldr	r2, [r7, #4]
   16bc2:	69bb      	ldr	r3, [r7, #24]
   16bc4:	18d0      	adds	r0, r2, r3
   16bc6:	68fa      	ldr	r2, [r7, #12]
   16bc8:	69fb      	ldr	r3, [r7, #28]
   16bca:	18d1      	adds	r1, r2, r3
   16bcc:	68ba      	ldr	r2, [r7, #8]
   16bce:	69fb      	ldr	r3, [r7, #28]
   16bd0:	1ad3      	subs	r3, r2, r3
   16bd2:	461a      	mov	r2, r3
   16bd4:	f012 ff55 	bl	29a82 <memcpy>
    return 0;
   16bd8:	2300      	movs	r3, #0
}
   16bda:	4618      	mov	r0, r3
   16bdc:	3720      	adds	r7, #32
   16bde:	46bd      	mov	sp, r7
   16be0:	bd80      	pop	{r7, pc}
   16be2:	bf00      	nop

00016be4 <gxmd5_encrypt>:

int gxmd5_encrypt(gxByteBuffer* data, gxByteBuffer* digest)
{
   16be4:	b590      	push	{r4, r7, lr}
   16be6:	b09f      	sub	sp, #124	; 0x7c
   16be8:	af02      	add	r7, sp, #8
   16bea:	6078      	str	r0, [r7, #4]
   16bec:	6039      	str	r1, [r7, #0]
    // Bytes that didn't fit in last 64 byte chunk
    unsigned char buffer[64];
    // Number of bits (lo, hi)
    unsigned long count[2] = { 0, 0 };
   16bee:	2300      	movs	r3, #0
   16bf0:	623b      	str	r3, [r7, #32]
   16bf2:	2300      	movs	r3, #0
   16bf4:	627b      	str	r3, [r7, #36]	; 0x24
    // Digest
    unsigned int state[4] = { 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476 };
   16bf6:	4b2d      	ldr	r3, [pc, #180]	; (16cac <gxmd5_encrypt+0xc8>)
   16bf8:	f107 0410 	add.w	r4, r7, #16
   16bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bb_capacity(digest, 16);
   16c02:	2110      	movs	r1, #16
   16c04:	6838      	ldr	r0, [r7, #0]
   16c06:	f7ec f885 	bl	2d14 <bb_capacity>

    gxmd5_update(data->data, data->size, buffer, (unsigned int*)&count, (unsigned int*)&state);
   16c0a:	687b      	ldr	r3, [r7, #4]
   16c0c:	6818      	ldr	r0, [r3, #0]
   16c0e:	687b      	ldr	r3, [r7, #4]
   16c10:	88db      	ldrh	r3, [r3, #6]
   16c12:	461c      	mov	r4, r3
   16c14:	f107 0120 	add.w	r1, r7, #32
   16c18:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16c1c:	f107 0310 	add.w	r3, r7, #16
   16c20:	9300      	str	r3, [sp, #0]
   16c22:	460b      	mov	r3, r1
   16c24:	4621      	mov	r1, r4
   16c26:	f7ff ff77 	bl	16b18 <gxmd5_update>
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    // Save number of bits
    unsigned char bits[8];
    gxmd5_encode(bits, (unsigned int*)&count, 2);
   16c2a:	f107 0120 	add.w	r1, r7, #32
   16c2e:	f107 0308 	add.w	r3, r7, #8
   16c32:	2202      	movs	r2, #2
   16c34:	4618      	mov	r0, r3
   16c36:	f7ff faa3 	bl	16180 <gxmd5_encode>

    // Pad out to 56 mod 64.
    unsigned int index = count[0] / 8 % 64;
   16c3a:	6a3b      	ldr	r3, [r7, #32]
   16c3c:	08db      	lsrs	r3, r3, #3
   16c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16c42:	66fb      	str	r3, [r7, #108]	; 0x6c
    unsigned int padLen = (index < 56) ? (56 - index) : (120 - index);
   16c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16c46:	2b37      	cmp	r3, #55	; 0x37
   16c48:	d803      	bhi.n	16c52 <gxmd5_encrypt+0x6e>
   16c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16c4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
   16c50:	e002      	b.n	16c58 <gxmd5_encrypt+0x74>
   16c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16c54:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
   16c58:	66bb      	str	r3, [r7, #104]	; 0x68
    gxmd5_update(padding, padLen, buffer, (unsigned int*)&count, (unsigned int*)&state);
   16c5a:	f107 0120 	add.w	r1, r7, #32
   16c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16c62:	f107 0310 	add.w	r3, r7, #16
   16c66:	9300      	str	r3, [sp, #0]
   16c68:	460b      	mov	r3, r1
   16c6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   16c6c:	4810      	ldr	r0, [pc, #64]	; (16cb0 <gxmd5_encrypt+0xcc>)
   16c6e:	f7ff ff53 	bl	16b18 <gxmd5_update>

    // Append length (before padding)
    gxmd5_update(bits, 8, buffer, (unsigned int*)&count, (unsigned int*)&state);
   16c72:	f107 0120 	add.w	r1, r7, #32
   16c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16c7a:	f107 0008 	add.w	r0, r7, #8
   16c7e:	f107 0310 	add.w	r3, r7, #16
   16c82:	9300      	str	r3, [sp, #0]
   16c84:	460b      	mov	r3, r1
   16c86:	2108      	movs	r1, #8
   16c88:	f7ff ff46 	bl	16b18 <gxmd5_update>

    // Store state in digest
    gxmd5_encode(digest->data, state, 4);
   16c8c:	683b      	ldr	r3, [r7, #0]
   16c8e:	681b      	ldr	r3, [r3, #0]
   16c90:	f107 0110 	add.w	r1, r7, #16
   16c94:	2204      	movs	r2, #4
   16c96:	4618      	mov	r0, r3
   16c98:	f7ff fa72 	bl	16180 <gxmd5_encode>
    digest->size = 16;
   16c9c:	683b      	ldr	r3, [r7, #0]
   16c9e:	2210      	movs	r2, #16
   16ca0:	80da      	strh	r2, [r3, #6]
    return 0;
   16ca2:	2300      	movs	r3, #0
}
   16ca4:	4618      	mov	r0, r3
   16ca6:	3774      	adds	r7, #116	; 0x74
   16ca8:	46bd      	mov	sp, r7
   16caa:	bd90      	pop	{r4, r7, pc}
   16cac:	0002bfb0 	.word	0x0002bfb0
   16cb0:	10000004 	.word	0x10000004

00016cb4 <obj_clearProfileGenericBuffer>:
    obj->dataIndex = dataIndex;
    return obj;
}

int obj_clearProfileGenericBuffer(gxArray* buffer)
{
   16cb4:	b580      	push	{r7, lr}
   16cb6:	b086      	sub	sp, #24
   16cb8:	af00      	add	r7, sp, #0
   16cba:	6078      	str	r0, [r7, #4]
    variantArray* va;
    int pos, ret;
    //Clear data rows.
    for (pos = 0; pos != buffer->size; ++pos)
   16cbc:	2300      	movs	r3, #0
   16cbe:	617b      	str	r3, [r7, #20]
   16cc0:	e013      	b.n	16cea <obj_clearProfileGenericBuffer+0x36>
    {
        ret = arr_getByIndex(buffer, pos, (void**)&va);
   16cc2:	f107 030c 	add.w	r3, r7, #12
   16cc6:	461a      	mov	r2, r3
   16cc8:	6979      	ldr	r1, [r7, #20]
   16cca:	6878      	ldr	r0, [r7, #4]
   16ccc:	f7f5 fd96 	bl	c7fc <arr_getByIndex>
   16cd0:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16cd2:	693b      	ldr	r3, [r7, #16]
   16cd4:	2b00      	cmp	r3, #0
   16cd6:	d001      	beq.n	16cdc <obj_clearProfileGenericBuffer+0x28>
        {
            return ret;
   16cd8:	693b      	ldr	r3, [r7, #16]
   16cda:	e010      	b.n	16cfe <obj_clearProfileGenericBuffer+0x4a>
        }
        va_clear(va);
   16cdc:	68fb      	ldr	r3, [r7, #12]
   16cde:	4618      	mov	r0, r3
   16ce0:	f010 f830 	bl	26d44 <va_clear>
int obj_clearProfileGenericBuffer(gxArray* buffer)
{
    variantArray* va;
    int pos, ret;
    //Clear data rows.
    for (pos = 0; pos != buffer->size; ++pos)
   16ce4:	697b      	ldr	r3, [r7, #20]
   16ce6:	3301      	adds	r3, #1
   16ce8:	617b      	str	r3, [r7, #20]
   16cea:	687b      	ldr	r3, [r7, #4]
   16cec:	891b      	ldrh	r3, [r3, #8]
   16cee:	461a      	mov	r2, r3
   16cf0:	697b      	ldr	r3, [r7, #20]
   16cf2:	429a      	cmp	r2, r3
   16cf4:	d1e5      	bne.n	16cc2 <obj_clearProfileGenericBuffer+0xe>
        {
            return ret;
        }
        va_clear(va);
    }
    arr_clear(buffer);
   16cf6:	6878      	ldr	r0, [r7, #4]
   16cf8:	f7f5 fd0a 	bl	c710 <arr_clear>
    return 0;
   16cfc:	2300      	movs	r3, #0
}
   16cfe:	4618      	mov	r0, r3
   16d00:	3718      	adds	r7, #24
   16d02:	46bd      	mov	sp, r7
   16d04:	bd80      	pop	{r7, pc}
   16d06:	bf00      	nop

00016d08 <obj_clearPushObjectList>:

int obj_clearPushObjectList(gxArray* buffer)
{
   16d08:	b580      	push	{r7, lr}
   16d0a:	b086      	sub	sp, #24
   16d0c:	af00      	add	r7, sp, #0
   16d0e:	6078      	str	r0, [r7, #4]
    gxKey *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != buffer->size; ++pos)
   16d10:	2300      	movs	r3, #0
   16d12:	617b      	str	r3, [r7, #20]
   16d14:	e014      	b.n	16d40 <obj_clearPushObjectList+0x38>
    {
        ret = arr_getByIndex(buffer, pos, (void**)&it);
   16d16:	f107 030c 	add.w	r3, r7, #12
   16d1a:	461a      	mov	r2, r3
   16d1c:	6979      	ldr	r1, [r7, #20]
   16d1e:	6878      	ldr	r0, [r7, #4]
   16d20:	f7f5 fd6c 	bl	c7fc <arr_getByIndex>
   16d24:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16d26:	693b      	ldr	r3, [r7, #16]
   16d28:	2b00      	cmp	r3, #0
   16d2a:	d001      	beq.n	16d30 <obj_clearPushObjectList+0x28>
        {
            return ret;
   16d2c:	693b      	ldr	r3, [r7, #16]
   16d2e:	e011      	b.n	16d54 <obj_clearPushObjectList+0x4c>
        }
        gxfree((gxCaptureObject*)it->value);
   16d30:	68fb      	ldr	r3, [r7, #12]
   16d32:	685b      	ldr	r3, [r3, #4]
   16d34:	4618      	mov	r0, r3
   16d36:	f012 fe8d 	bl	29a54 <free>
int obj_clearPushObjectList(gxArray* buffer)
{
    gxKey *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != buffer->size; ++pos)
   16d3a:	697b      	ldr	r3, [r7, #20]
   16d3c:	3301      	adds	r3, #1
   16d3e:	617b      	str	r3, [r7, #20]
   16d40:	687b      	ldr	r3, [r7, #4]
   16d42:	891b      	ldrh	r3, [r3, #8]
   16d44:	461a      	mov	r2, r3
   16d46:	697b      	ldr	r3, [r7, #20]
   16d48:	429a      	cmp	r2, r3
   16d4a:	d1e4      	bne.n	16d16 <obj_clearPushObjectList+0xe>
        {
            return ret;
        }
        gxfree((gxCaptureObject*)it->value);
    }
    arr_clear(buffer);
   16d4c:	6878      	ldr	r0, [r7, #4]
   16d4e:	f7f5 fcdf 	bl	c710 <arr_clear>
    return 0;
   16d52:	2300      	movs	r3, #0
}
   16d54:	4618      	mov	r0, r3
   16d56:	3718      	adds	r7, #24
   16d58:	46bd      	mov	sp, r7
   16d5a:	bd80      	pop	{r7, pc}

00016d5c <obj_clearCreditChargeConfigurations>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_ACCOUNT

int obj_clearCreditChargeConfigurations(gxArray* list)
{
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b086      	sub	sp, #24
   16d60:	af00      	add	r7, sp, #0
   16d62:	6078      	str	r0, [r7, #4]
    gxCreditChargeConfiguration *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   16d64:	2300      	movs	r3, #0
   16d66:	617b      	str	r3, [r7, #20]
   16d68:	e01f      	b.n	16daa <obj_clearCreditChargeConfigurations+0x4e>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   16d6a:	f107 030c 	add.w	r3, r7, #12
   16d6e:	461a      	mov	r2, r3
   16d70:	6979      	ldr	r1, [r7, #20]
   16d72:	6878      	ldr	r0, [r7, #4]
   16d74:	f7f5 fd42 	bl	c7fc <arr_getByIndex>
   16d78:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16d7a:	693b      	ldr	r3, [r7, #16]
   16d7c:	2b00      	cmp	r3, #0
   16d7e:	d001      	beq.n	16d84 <obj_clearCreditChargeConfigurations+0x28>
        {
            return ret;
   16d80:	693b      	ldr	r3, [r7, #16]
   16d82:	e01c      	b.n	16dbe <obj_clearCreditChargeConfigurations+0x62>
        }
        memset(it->creditReference, 0, sizeof(it->creditReference));
   16d84:	68fb      	ldr	r3, [r7, #12]
   16d86:	2206      	movs	r2, #6
   16d88:	2100      	movs	r1, #0
   16d8a:	4618      	mov	r0, r3
   16d8c:	f012 fe9f 	bl	29ace <memset>
        memset(it->chargeReference, 0, sizeof(it->creditReference));
   16d90:	68fb      	ldr	r3, [r7, #12]
   16d92:	3306      	adds	r3, #6
   16d94:	2206      	movs	r2, #6
   16d96:	2100      	movs	r1, #0
   16d98:	4618      	mov	r0, r3
   16d9a:	f012 fe98 	bl	29ace <memset>
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   16d9e:	68fb      	ldr	r3, [r7, #12]
   16da0:	2201      	movs	r2, #1
   16da2:	731a      	strb	r2, [r3, #12]
int obj_clearCreditChargeConfigurations(gxArray* list)
{
    gxCreditChargeConfiguration *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   16da4:	697b      	ldr	r3, [r7, #20]
   16da6:	3301      	adds	r3, #1
   16da8:	617b      	str	r3, [r7, #20]
   16daa:	687b      	ldr	r3, [r7, #4]
   16dac:	891b      	ldrh	r3, [r3, #8]
   16dae:	461a      	mov	r2, r3
   16db0:	697b      	ldr	r3, [r7, #20]
   16db2:	429a      	cmp	r2, r3
   16db4:	d1d9      	bne.n	16d6a <obj_clearCreditChargeConfigurations+0xe>
        }
        memset(it->creditReference, 0, sizeof(it->creditReference));
        memset(it->chargeReference, 0, sizeof(it->creditReference));
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
    }
    arr_clear(list);
   16db6:	6878      	ldr	r0, [r7, #4]
   16db8:	f7f5 fcaa 	bl	c710 <arr_clear>
    return 0;
   16dbc:	2300      	movs	r3, #0
}
   16dbe:	4618      	mov	r0, r3
   16dc0:	3718      	adds	r7, #24
   16dc2:	46bd      	mov	sp, r7
   16dc4:	bd80      	pop	{r7, pc}
   16dc6:	bf00      	nop

00016dc8 <obj_clearTokenGatewayConfigurations>:

int obj_clearTokenGatewayConfigurations(gxArray* list)
{
   16dc8:	b580      	push	{r7, lr}
   16dca:	b086      	sub	sp, #24
   16dcc:	af00      	add	r7, sp, #0
   16dce:	6078      	str	r0, [r7, #4]
    gxTokenGatewayConfiguration *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   16dd0:	2300      	movs	r3, #0
   16dd2:	617b      	str	r3, [r7, #20]
   16dd4:	e015      	b.n	16e02 <obj_clearTokenGatewayConfigurations+0x3a>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   16dd6:	f107 030c 	add.w	r3, r7, #12
   16dda:	461a      	mov	r2, r3
   16ddc:	6979      	ldr	r1, [r7, #20]
   16dde:	6878      	ldr	r0, [r7, #4]
   16de0:	f7f5 fd0c 	bl	c7fc <arr_getByIndex>
   16de4:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16de6:	693b      	ldr	r3, [r7, #16]
   16de8:	2b00      	cmp	r3, #0
   16dea:	d001      	beq.n	16df0 <obj_clearTokenGatewayConfigurations+0x28>
        {
            return ret;
   16dec:	693b      	ldr	r3, [r7, #16]
   16dee:	e012      	b.n	16e16 <obj_clearTokenGatewayConfigurations+0x4e>
        }
        memset(it->creditReference, 0, 6);
   16df0:	68fb      	ldr	r3, [r7, #12]
   16df2:	2206      	movs	r2, #6
   16df4:	2100      	movs	r1, #0
   16df6:	4618      	mov	r0, r3
   16df8:	f012 fe69 	bl	29ace <memset>
int obj_clearTokenGatewayConfigurations(gxArray* list)
{
    gxTokenGatewayConfiguration *it;
    int pos, ret;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   16dfc:	697b      	ldr	r3, [r7, #20]
   16dfe:	3301      	adds	r3, #1
   16e00:	617b      	str	r3, [r7, #20]
   16e02:	687b      	ldr	r3, [r7, #4]
   16e04:	891b      	ldrh	r3, [r3, #8]
   16e06:	461a      	mov	r2, r3
   16e08:	697b      	ldr	r3, [r7, #20]
   16e0a:	429a      	cmp	r2, r3
   16e0c:	d1e3      	bne.n	16dd6 <obj_clearTokenGatewayConfigurations+0xe>
        {
            return ret;
        }
        memset(it->creditReference, 0, 6);
    }
    arr_clear(list);
   16e0e:	6878      	ldr	r0, [r7, #4]
   16e10:	f7f5 fc7e 	bl	c710 <arr_clear>
    return 0;
   16e14:	2300      	movs	r3, #0
}
   16e16:	4618      	mov	r0, r3
   16e18:	3718      	adds	r7, #24
   16e1a:	46bd      	mov	sp, r7
   16e1c:	bd80      	pop	{r7, pc}
   16e1e:	bf00      	nop

00016e20 <obj_clearSapList>:
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int obj_clearSapList(gxArray* buffer)
{
   16e20:	b580      	push	{r7, lr}
   16e22:	b086      	sub	sp, #24
   16e24:	af00      	add	r7, sp, #0
   16e26:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
   16e28:	2300      	movs	r3, #0
   16e2a:	613b      	str	r3, [r7, #16]
    gxSapItem *it;

    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   16e2c:	2300      	movs	r3, #0
   16e2e:	617b      	str	r3, [r7, #20]
   16e30:	e014      	b.n	16e5c <obj_clearSapList+0x3c>
    {
        ret = arr_getByIndex(buffer, pos, (void**)&it);
   16e32:	f107 030c 	add.w	r3, r7, #12
   16e36:	461a      	mov	r2, r3
   16e38:	6979      	ldr	r1, [r7, #20]
   16e3a:	6878      	ldr	r0, [r7, #4]
   16e3c:	f7f5 fcde 	bl	c7fc <arr_getByIndex>
   16e40:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16e42:	693b      	ldr	r3, [r7, #16]
   16e44:	2b00      	cmp	r3, #0
   16e46:	d001      	beq.n	16e4c <obj_clearSapList+0x2c>
        {
            return ret;
   16e48:	693b      	ldr	r3, [r7, #16]
   16e4a:	e011      	b.n	16e70 <obj_clearSapList+0x50>
        }
        bb_clear(&it->name);
   16e4c:	68fb      	ldr	r3, [r7, #12]
   16e4e:	3304      	adds	r3, #4
   16e50:	4618      	mov	r0, r3
   16e52:	f7ec fc87 	bl	3764 <bb_clear>
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxSapItem *it;

    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   16e56:	697b      	ldr	r3, [r7, #20]
   16e58:	3301      	adds	r3, #1
   16e5a:	617b      	str	r3, [r7, #20]
   16e5c:	687b      	ldr	r3, [r7, #4]
   16e5e:	891b      	ldrh	r3, [r3, #8]
   16e60:	461a      	mov	r2, r3
   16e62:	697b      	ldr	r3, [r7, #20]
   16e64:	429a      	cmp	r2, r3
   16e66:	d1e4      	bne.n	16e32 <obj_clearSapList+0x12>
        {
            return ret;
        }
        bb_clear(&it->name);
    }
    arr_clear(buffer);
   16e68:	6878      	ldr	r0, [r7, #4]
   16e6a:	f7f5 fc51 	bl	c710 <arr_clear>
    return ret;
   16e6e:	693b      	ldr	r3, [r7, #16]
}
   16e70:	4618      	mov	r0, r3
   16e72:	3718      	adds	r7, #24
   16e74:	46bd      	mov	sp, r7
   16e76:	bd80      	pop	{r7, pc}

00016e78 <obj_clearProfileGenericCaptureObjects>:
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_PROFILE_GENERIC
int obj_clearProfileGenericCaptureObjects(gxArray* captureObjects)
{
   16e78:	b580      	push	{r7, lr}
   16e7a:	b086      	sub	sp, #24
   16e7c:	af00      	add	r7, sp, #0
   16e7e:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
   16e80:	2300      	movs	r3, #0
   16e82:	613b      	str	r3, [r7, #16]
    gxKey *kv;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != captureObjects->size; ++pos)
   16e84:	2300      	movs	r3, #0
   16e86:	617b      	str	r3, [r7, #20]
   16e88:	e014      	b.n	16eb4 <obj_clearProfileGenericCaptureObjects+0x3c>
    {
        ret = arr_getByIndex(captureObjects, pos, (void**)&kv);
   16e8a:	f107 030c 	add.w	r3, r7, #12
   16e8e:	461a      	mov	r2, r3
   16e90:	6979      	ldr	r1, [r7, #20]
   16e92:	6878      	ldr	r0, [r7, #4]
   16e94:	f7f5 fcb2 	bl	c7fc <arr_getByIndex>
   16e98:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16e9a:	693b      	ldr	r3, [r7, #16]
   16e9c:	2b00      	cmp	r3, #0
   16e9e:	d001      	beq.n	16ea4 <obj_clearProfileGenericCaptureObjects+0x2c>
        {
            return ret;
   16ea0:	693b      	ldr	r3, [r7, #16]
   16ea2:	e011      	b.n	16ec8 <obj_clearProfileGenericCaptureObjects+0x50>
        }
        gxfree(kv->value);
   16ea4:	68fb      	ldr	r3, [r7, #12]
   16ea6:	685b      	ldr	r3, [r3, #4]
   16ea8:	4618      	mov	r0, r3
   16eaa:	f012 fdd3 	bl	29a54 <free>
int obj_clearProfileGenericCaptureObjects(gxArray* captureObjects)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxKey *kv;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != captureObjects->size; ++pos)
   16eae:	697b      	ldr	r3, [r7, #20]
   16eb0:	3301      	adds	r3, #1
   16eb2:	617b      	str	r3, [r7, #20]
   16eb4:	687b      	ldr	r3, [r7, #4]
   16eb6:	891b      	ldrh	r3, [r3, #8]
   16eb8:	461a      	mov	r2, r3
   16eba:	697b      	ldr	r3, [r7, #20]
   16ebc:	429a      	cmp	r2, r3
   16ebe:	d1e4      	bne.n	16e8a <obj_clearProfileGenericCaptureObjects+0x12>
        {
            return ret;
        }
        gxfree(kv->value);
    }
    arr_clear(captureObjects);
   16ec0:	6878      	ldr	r0, [r7, #4]
   16ec2:	f7f5 fc25 	bl	c710 <arr_clear>
    return ret;
   16ec6:	693b      	ldr	r3, [r7, #16]
}
   16ec8:	4618      	mov	r0, r3
   16eca:	3718      	adds	r7, #24
   16ecc:	46bd      	mov	sp, r7
   16ece:	bd80      	pop	{r7, pc}

00016ed0 <obj_clearSeasonProfile>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int obj_clearSeasonProfile(gxArray* list)
{
   16ed0:	b580      	push	{r7, lr}
   16ed2:	b086      	sub	sp, #24
   16ed4:	af00      	add	r7, sp, #0
   16ed6:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
   16ed8:	2300      	movs	r3, #0
   16eda:	613b      	str	r3, [r7, #16]
    gxSeasonProfile* sp;
    for (pos = 0; pos != list->size; ++pos)
   16edc:	2300      	movs	r3, #0
   16ede:	617b      	str	r3, [r7, #20]
   16ee0:	e018      	b.n	16f14 <obj_clearSeasonProfile+0x44>
    {
        ret = arr_getByIndex(list, pos, (void**)&sp);
   16ee2:	f107 030c 	add.w	r3, r7, #12
   16ee6:	461a      	mov	r2, r3
   16ee8:	6979      	ldr	r1, [r7, #20]
   16eea:	6878      	ldr	r0, [r7, #4]
   16eec:	f7f5 fc86 	bl	c7fc <arr_getByIndex>
   16ef0:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16ef2:	693b      	ldr	r3, [r7, #16]
   16ef4:	2b00      	cmp	r3, #0
   16ef6:	d001      	beq.n	16efc <obj_clearSeasonProfile+0x2c>
        {
            return ret;
   16ef8:	693b      	ldr	r3, [r7, #16]
   16efa:	e015      	b.n	16f28 <obj_clearSeasonProfile+0x58>
        }
        bb_clear(&sp->name);
   16efc:	68fb      	ldr	r3, [r7, #12]
   16efe:	4618      	mov	r0, r3
   16f00:	f7ec fc30 	bl	3764 <bb_clear>
        bb_clear(&sp->weekName);
   16f04:	68fb      	ldr	r3, [r7, #12]
   16f06:	333c      	adds	r3, #60	; 0x3c
   16f08:	4618      	mov	r0, r3
   16f0a:	f7ec fc2b 	bl	3764 <bb_clear>
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int obj_clearSeasonProfile(gxArray* list)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxSeasonProfile* sp;
    for (pos = 0; pos != list->size; ++pos)
   16f0e:	697b      	ldr	r3, [r7, #20]
   16f10:	3301      	adds	r3, #1
   16f12:	617b      	str	r3, [r7, #20]
   16f14:	687b      	ldr	r3, [r7, #4]
   16f16:	891b      	ldrh	r3, [r3, #8]
   16f18:	461a      	mov	r2, r3
   16f1a:	697b      	ldr	r3, [r7, #20]
   16f1c:	429a      	cmp	r2, r3
   16f1e:	d1e0      	bne.n	16ee2 <obj_clearSeasonProfile+0x12>
            return ret;
        }
        bb_clear(&sp->name);
        bb_clear(&sp->weekName);
    };
    arr_clear(list);
   16f20:	6878      	ldr	r0, [r7, #4]
   16f22:	f7f5 fbf5 	bl	c710 <arr_clear>
    return ret;
   16f26:	693b      	ldr	r3, [r7, #16]
}
   16f28:	4618      	mov	r0, r3
   16f2a:	3718      	adds	r7, #24
   16f2c:	46bd      	mov	sp, r7
   16f2e:	bd80      	pop	{r7, pc}

00016f30 <obj_clearWeekProfileTable>:

int obj_clearWeekProfileTable(gxArray* list)
{
   16f30:	b580      	push	{r7, lr}
   16f32:	b086      	sub	sp, #24
   16f34:	af00      	add	r7, sp, #0
   16f36:	6078      	str	r0, [r7, #4]
    int pos, ret = DLMS_ERROR_CODE_OK;
   16f38:	2300      	movs	r3, #0
   16f3a:	613b      	str	r3, [r7, #16]
    gxWeekProfile* wp;
    for (pos = 0; pos != list->size; ++pos)
   16f3c:	2300      	movs	r3, #0
   16f3e:	617b      	str	r3, [r7, #20]
   16f40:	e013      	b.n	16f6a <obj_clearWeekProfileTable+0x3a>
    {
        ret = arr_getByIndex(list, pos, (void**)&wp);
   16f42:	f107 030c 	add.w	r3, r7, #12
   16f46:	461a      	mov	r2, r3
   16f48:	6979      	ldr	r1, [r7, #20]
   16f4a:	6878      	ldr	r0, [r7, #4]
   16f4c:	f7f5 fc56 	bl	c7fc <arr_getByIndex>
   16f50:	6138      	str	r0, [r7, #16]
        if (ret != DLMS_ERROR_CODE_OK)
   16f52:	693b      	ldr	r3, [r7, #16]
   16f54:	2b00      	cmp	r3, #0
   16f56:	d001      	beq.n	16f5c <obj_clearWeekProfileTable+0x2c>
        {
            return ret;
   16f58:	693b      	ldr	r3, [r7, #16]
   16f5a:	e010      	b.n	16f7e <obj_clearWeekProfileTable+0x4e>
        }
        bb_clear(&wp->name);
   16f5c:	68fb      	ldr	r3, [r7, #12]
   16f5e:	4618      	mov	r0, r3
   16f60:	f7ec fc00 	bl	3764 <bb_clear>

int obj_clearWeekProfileTable(gxArray* list)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxWeekProfile* wp;
    for (pos = 0; pos != list->size; ++pos)
   16f64:	697b      	ldr	r3, [r7, #20]
   16f66:	3301      	adds	r3, #1
   16f68:	617b      	str	r3, [r7, #20]
   16f6a:	687b      	ldr	r3, [r7, #4]
   16f6c:	891b      	ldrh	r3, [r3, #8]
   16f6e:	461a      	mov	r2, r3
   16f70:	697b      	ldr	r3, [r7, #20]
   16f72:	429a      	cmp	r2, r3
   16f74:	d1e5      	bne.n	16f42 <obj_clearWeekProfileTable+0x12>
        {
            return ret;
        }
        bb_clear(&wp->name);
    };
    arr_clear(list);
   16f76:	6878      	ldr	r0, [r7, #4]
   16f78:	f7f5 fbca 	bl	c710 <arr_clear>
    return ret;
   16f7c:	693b      	ldr	r3, [r7, #16]
}
   16f7e:	4618      	mov	r0, r3
   16f80:	3718      	adds	r7, #24
   16f82:	46bd      	mov	sp, r7
   16f84:	bd80      	pop	{r7, pc}
   16f86:	bf00      	nop

00016f88 <obj_clearDayProfileTable>:

int obj_clearDayProfileTable(gxArray* list)
{
   16f88:	b580      	push	{r7, lr}
   16f8a:	b088      	sub	sp, #32
   16f8c:	af00      	add	r7, sp, #0
   16f8e:	6078      	str	r0, [r7, #4]
    int pos, pos2, ret = DLMS_ERROR_CODE_OK;
   16f90:	2300      	movs	r3, #0
   16f92:	617b      	str	r3, [r7, #20]
    gxDayProfile* it;
    gxDayProfileAction* dp;
    for (pos = 0; pos != list->size; ++pos)
   16f94:	2300      	movs	r3, #0
   16f96:	61fb      	str	r3, [r7, #28]
   16f98:	e02e      	b.n	16ff8 <obj_clearDayProfileTable+0x70>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   16f9a:	f107 0310 	add.w	r3, r7, #16
   16f9e:	461a      	mov	r2, r3
   16fa0:	69f9      	ldr	r1, [r7, #28]
   16fa2:	6878      	ldr	r0, [r7, #4]
   16fa4:	f7f5 fc2a 	bl	c7fc <arr_getByIndex>
   16fa8:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   16faa:	697b      	ldr	r3, [r7, #20]
   16fac:	2b00      	cmp	r3, #0
   16fae:	d001      	beq.n	16fb4 <obj_clearDayProfileTable+0x2c>
        {
            return ret;
   16fb0:	697b      	ldr	r3, [r7, #20]
   16fb2:	e02b      	b.n	1700c <obj_clearDayProfileTable+0x84>
        }
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   16fb4:	2300      	movs	r3, #0
   16fb6:	61bb      	str	r3, [r7, #24]
   16fb8:	e010      	b.n	16fdc <obj_clearDayProfileTable+0x54>
        {
            ret = arr_getByIndex(&it->daySchedules, pos2, (void**)&dp);
   16fba:	693b      	ldr	r3, [r7, #16]
   16fbc:	3304      	adds	r3, #4
   16fbe:	f107 020c 	add.w	r2, r7, #12
   16fc2:	69b9      	ldr	r1, [r7, #24]
   16fc4:	4618      	mov	r0, r3
   16fc6:	f7f5 fc19 	bl	c7fc <arr_getByIndex>
   16fca:	6178      	str	r0, [r7, #20]
            if (ret != DLMS_ERROR_CODE_OK)
   16fcc:	697b      	ldr	r3, [r7, #20]
   16fce:	2b00      	cmp	r3, #0
   16fd0:	d001      	beq.n	16fd6 <obj_clearDayProfileTable+0x4e>
            {
                return ret;
   16fd2:	697b      	ldr	r3, [r7, #20]
   16fd4:	e01a      	b.n	1700c <obj_clearDayProfileTable+0x84>
        ret = arr_getByIndex(list, pos, (void**)&it);
        if (ret != DLMS_ERROR_CODE_OK)
        {
            return ret;
        }
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   16fd6:	69bb      	ldr	r3, [r7, #24]
   16fd8:	3301      	adds	r3, #1
   16fda:	61bb      	str	r3, [r7, #24]
   16fdc:	693b      	ldr	r3, [r7, #16]
   16fde:	899b      	ldrh	r3, [r3, #12]
   16fe0:	461a      	mov	r2, r3
   16fe2:	69bb      	ldr	r3, [r7, #24]
   16fe4:	429a      	cmp	r2, r3
   16fe6:	d1e8      	bne.n	16fba <obj_clearDayProfileTable+0x32>
            if (ret != DLMS_ERROR_CODE_OK)
            {
                return ret;
            }
        }
        arr_clear(&it->daySchedules);
   16fe8:	693b      	ldr	r3, [r7, #16]
   16fea:	3304      	adds	r3, #4
   16fec:	4618      	mov	r0, r3
   16fee:	f7f5 fb8f 	bl	c710 <arr_clear>
int obj_clearDayProfileTable(gxArray* list)
{
    int pos, pos2, ret = DLMS_ERROR_CODE_OK;
    gxDayProfile* it;
    gxDayProfileAction* dp;
    for (pos = 0; pos != list->size; ++pos)
   16ff2:	69fb      	ldr	r3, [r7, #28]
   16ff4:	3301      	adds	r3, #1
   16ff6:	61fb      	str	r3, [r7, #28]
   16ff8:	687b      	ldr	r3, [r7, #4]
   16ffa:	891b      	ldrh	r3, [r3, #8]
   16ffc:	461a      	mov	r2, r3
   16ffe:	69fb      	ldr	r3, [r7, #28]
   17000:	429a      	cmp	r2, r3
   17002:	d1ca      	bne.n	16f9a <obj_clearDayProfileTable+0x12>
                return ret;
            }
        }
        arr_clear(&it->daySchedules);
    };
    arr_clear(list);
   17004:	6878      	ldr	r0, [r7, #4]
   17006:	f7f5 fb83 	bl	c710 <arr_clear>
    return ret;
   1700a:	697b      	ldr	r3, [r7, #20]
}
   1700c:	4618      	mov	r0, r3
   1700e:	3720      	adds	r7, #32
   17010:	46bd      	mov	sp, r7
   17012:	bd80      	pop	{r7, pc}

00017014 <obj_clearRegisterMonitorActions>:
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int obj_clearRegisterMonitorActions(gxArray* list)
{
   17014:	b580      	push	{r7, lr}
   17016:	b082      	sub	sp, #8
   17018:	af00      	add	r7, sp, #0
   1701a:	6078      	str	r0, [r7, #4]
    arr_clear(list);
   1701c:	6878      	ldr	r0, [r7, #4]
   1701e:	f7f5 fb77 	bl	c710 <arr_clear>
    return 0;
   17022:	2300      	movs	r3, #0
}
   17024:	4618      	mov	r0, r3
   17026:	3708      	adds	r7, #8
   17028:	46bd      	mov	sp, r7
   1702a:	bd80      	pop	{r7, pc}

0001702c <obj_clearModemConfigurationInitialisationStrings>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int obj_clearModemConfigurationInitialisationStrings(gxArray* list)
{
   1702c:	b580      	push	{r7, lr}
   1702e:	b086      	sub	sp, #24
   17030:	af00      	add	r7, sp, #0
   17032:	6078      	str	r0, [r7, #4]
    int ret = DLMS_ERROR_CODE_OK, pos;
   17034:	2300      	movs	r3, #0
   17036:	617b      	str	r3, [r7, #20]
    gxModemInitialisation* it;
    for (pos = 0; pos != list->size; ++pos)
   17038:	2300      	movs	r3, #0
   1703a:	613b      	str	r3, [r7, #16]
   1703c:	e018      	b.n	17070 <obj_clearModemConfigurationInitialisationStrings+0x44>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   1703e:	f107 030c 	add.w	r3, r7, #12
   17042:	461a      	mov	r2, r3
   17044:	6939      	ldr	r1, [r7, #16]
   17046:	6878      	ldr	r0, [r7, #4]
   17048:	f7f5 fbd8 	bl	c7fc <arr_getByIndex>
   1704c:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   1704e:	697b      	ldr	r3, [r7, #20]
   17050:	2b00      	cmp	r3, #0
   17052:	d001      	beq.n	17058 <obj_clearModemConfigurationInitialisationStrings+0x2c>
        {
            return ret;
   17054:	697b      	ldr	r3, [r7, #20]
   17056:	e015      	b.n	17084 <obj_clearModemConfigurationInitialisationStrings+0x58>
        }
        bb_clear(&it->request);
   17058:	68fb      	ldr	r3, [r7, #12]
   1705a:	4618      	mov	r0, r3
   1705c:	f7ec fb82 	bl	3764 <bb_clear>
        bb_clear(&it->response);
   17060:	68fb      	ldr	r3, [r7, #12]
   17062:	330c      	adds	r3, #12
   17064:	4618      	mov	r0, r3
   17066:	f7ec fb7d 	bl	3764 <bb_clear>
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int obj_clearModemConfigurationInitialisationStrings(gxArray* list)
{
    int ret = DLMS_ERROR_CODE_OK, pos;
    gxModemInitialisation* it;
    for (pos = 0; pos != list->size; ++pos)
   1706a:	693b      	ldr	r3, [r7, #16]
   1706c:	3301      	adds	r3, #1
   1706e:	613b      	str	r3, [r7, #16]
   17070:	687b      	ldr	r3, [r7, #4]
   17072:	891b      	ldrh	r3, [r3, #8]
   17074:	461a      	mov	r2, r3
   17076:	693b      	ldr	r3, [r7, #16]
   17078:	429a      	cmp	r2, r3
   1707a:	d1e0      	bne.n	1703e <obj_clearModemConfigurationInitialisationStrings+0x12>
            return ret;
        }
        bb_clear(&it->request);
        bb_clear(&it->response);
    }
    arr_clear(list);
   1707c:	6878      	ldr	r0, [r7, #4]
   1707e:	f7f5 fb47 	bl	c710 <arr_clear>
    return ret;
   17082:	697b      	ldr	r3, [r7, #20]
}
   17084:	4618      	mov	r0, r3
   17086:	3718      	adds	r7, #24
   17088:	46bd      	mov	sp, r7
   1708a:	bd80      	pop	{r7, pc}

0001708c <obj_clearScriptTable>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_SCRIPT_TABLE
int obj_clearScriptTable(gxArray* list)
{
   1708c:	b580      	push	{r7, lr}
   1708e:	b088      	sub	sp, #32
   17090:	af00      	add	r7, sp, #0
   17092:	6078      	str	r0, [r7, #4]
    int pos, pos2, ret = 0;
   17094:	2300      	movs	r3, #0
   17096:	617b      	str	r3, [r7, #20]
    gxScript *s;
    gxScriptAction *sa;
    for (pos = 0; pos != list->size; ++pos)
   17098:	2300      	movs	r3, #0
   1709a:	61fb      	str	r3, [r7, #28]
   1709c:	e033      	b.n	17106 <obj_clearScriptTable+0x7a>
    {
        ret = arr_getByIndex(list, pos, (void**)&s);
   1709e:	f107 0310 	add.w	r3, r7, #16
   170a2:	461a      	mov	r2, r3
   170a4:	69f9      	ldr	r1, [r7, #28]
   170a6:	6878      	ldr	r0, [r7, #4]
   170a8:	f7f5 fba8 	bl	c7fc <arr_getByIndex>
   170ac:	6178      	str	r0, [r7, #20]
        if (ret != 0)
   170ae:	697b      	ldr	r3, [r7, #20]
   170b0:	2b00      	cmp	r3, #0
   170b2:	d001      	beq.n	170b8 <obj_clearScriptTable+0x2c>
        {
            return ret;
   170b4:	697b      	ldr	r3, [r7, #20]
   170b6:	e030      	b.n	1711a <obj_clearScriptTable+0x8e>
        }
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   170b8:	2300      	movs	r3, #0
   170ba:	61bb      	str	r3, [r7, #24]
   170bc:	e015      	b.n	170ea <obj_clearScriptTable+0x5e>
        {
            ret = arr_getByIndex(&s->actions, pos2, (void**)&sa);
   170be:	693b      	ldr	r3, [r7, #16]
   170c0:	3304      	adds	r3, #4
   170c2:	f107 020c 	add.w	r2, r7, #12
   170c6:	69b9      	ldr	r1, [r7, #24]
   170c8:	4618      	mov	r0, r3
   170ca:	f7f5 fb97 	bl	c7fc <arr_getByIndex>
   170ce:	6178      	str	r0, [r7, #20]
            if (ret != 0)
   170d0:	697b      	ldr	r3, [r7, #20]
   170d2:	2b00      	cmp	r3, #0
   170d4:	d001      	beq.n	170da <obj_clearScriptTable+0x4e>
            {
                return ret;
   170d6:	697b      	ldr	r3, [r7, #20]
   170d8:	e01f      	b.n	1711a <obj_clearScriptTable+0x8e>
            }
            var_clear(&sa->parameter);
   170da:	68fb      	ldr	r3, [r7, #12]
   170dc:	3310      	adds	r3, #16
   170de:	4618      	mov	r0, r3
   170e0:	f00f f832 	bl	26148 <var_clear>
        ret = arr_getByIndex(list, pos, (void**)&s);
        if (ret != 0)
        {
            return ret;
        }
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   170e4:	69bb      	ldr	r3, [r7, #24]
   170e6:	3301      	adds	r3, #1
   170e8:	61bb      	str	r3, [r7, #24]
   170ea:	693b      	ldr	r3, [r7, #16]
   170ec:	899b      	ldrh	r3, [r3, #12]
   170ee:	461a      	mov	r2, r3
   170f0:	69bb      	ldr	r3, [r7, #24]
   170f2:	429a      	cmp	r2, r3
   170f4:	d1e3      	bne.n	170be <obj_clearScriptTable+0x32>
            {
                return ret;
            }
            var_clear(&sa->parameter);
        }
        arr_clear(&s->actions);
   170f6:	693b      	ldr	r3, [r7, #16]
   170f8:	3304      	adds	r3, #4
   170fa:	4618      	mov	r0, r3
   170fc:	f7f5 fb08 	bl	c710 <arr_clear>
int obj_clearScriptTable(gxArray* list)
{
    int pos, pos2, ret = 0;
    gxScript *s;
    gxScriptAction *sa;
    for (pos = 0; pos != list->size; ++pos)
   17100:	69fb      	ldr	r3, [r7, #28]
   17102:	3301      	adds	r3, #1
   17104:	61fb      	str	r3, [r7, #28]
   17106:	687b      	ldr	r3, [r7, #4]
   17108:	891b      	ldrh	r3, [r3, #8]
   1710a:	461a      	mov	r2, r3
   1710c:	69fb      	ldr	r3, [r7, #28]
   1710e:	429a      	cmp	r2, r3
   17110:	d1c5      	bne.n	1709e <obj_clearScriptTable+0x12>
            }
            var_clear(&sa->parameter);
        }
        arr_clear(&s->actions);
    }
    arr_clear(list);
   17112:	6878      	ldr	r0, [r7, #4]
   17114:	f7f5 fafc 	bl	c710 <arr_clear>
    return ret;
   17118:	697b      	ldr	r3, [r7, #20]
}
   1711a:	4618      	mov	r0, r3
   1711c:	3720      	adds	r7, #32
   1711e:	46bd      	mov	sp, r7
   17120:	bd80      	pop	{r7, pc}
   17122:	bf00      	nop

00017124 <obj_clearRegisterActivationAssignment>:
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
int obj_clearRegisterActivationAssignment(gxArray* list)
{
   17124:	b580      	push	{r7, lr}
   17126:	b082      	sub	sp, #8
   17128:	af00      	add	r7, sp, #0
   1712a:	6078      	str	r0, [r7, #4]
    arr_clear(list);
   1712c:	6878      	ldr	r0, [r7, #4]
   1712e:	f7f5 faef 	bl	c710 <arr_clear>
    return 0;
   17132:	2300      	movs	r3, #0
}
   17134:	4618      	mov	r0, r3
   17136:	3708      	adds	r7, #8
   17138:	46bd      	mov	sp, r7
   1713a:	bd80      	pop	{r7, pc}

0001713c <obj_clearRegisterActivationMaskList>:

int obj_clearRegisterActivationMaskList(gxArray* list)
{
   1713c:	b580      	push	{r7, lr}
   1713e:	b086      	sub	sp, #24
   17140:	af00      	add	r7, sp, #0
   17142:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   17144:	2300      	movs	r3, #0
   17146:	613b      	str	r3, [r7, #16]
    gxKey *it;
    for (pos = 0; pos != list->size; ++pos)
   17148:	2300      	movs	r3, #0
   1714a:	617b      	str	r3, [r7, #20]
   1714c:	e019      	b.n	17182 <obj_clearRegisterActivationMaskList+0x46>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   1714e:	f107 030c 	add.w	r3, r7, #12
   17152:	461a      	mov	r2, r3
   17154:	6979      	ldr	r1, [r7, #20]
   17156:	6878      	ldr	r0, [r7, #4]
   17158:	f7f5 fb50 	bl	c7fc <arr_getByIndex>
   1715c:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   1715e:	693b      	ldr	r3, [r7, #16]
   17160:	2b00      	cmp	r3, #0
   17162:	d001      	beq.n	17168 <obj_clearRegisterActivationMaskList+0x2c>
        {
            return ret;
   17164:	693b      	ldr	r3, [r7, #16]
   17166:	e016      	b.n	17196 <obj_clearRegisterActivationMaskList+0x5a>
        }
        bb_clear((gxByteBuffer*)it->key);
   17168:	68fb      	ldr	r3, [r7, #12]
   1716a:	681b      	ldr	r3, [r3, #0]
   1716c:	4618      	mov	r0, r3
   1716e:	f7ec faf9 	bl	3764 <bb_clear>
        bb_clear((gxByteBuffer*)it->value);
   17172:	68fb      	ldr	r3, [r7, #12]
   17174:	685b      	ldr	r3, [r3, #4]
   17176:	4618      	mov	r0, r3
   17178:	f7ec faf4 	bl	3764 <bb_clear>

int obj_clearRegisterActivationMaskList(gxArray* list)
{
    int pos, ret = 0;
    gxKey *it;
    for (pos = 0; pos != list->size; ++pos)
   1717c:	697b      	ldr	r3, [r7, #20]
   1717e:	3301      	adds	r3, #1
   17180:	617b      	str	r3, [r7, #20]
   17182:	687b      	ldr	r3, [r7, #4]
   17184:	891b      	ldrh	r3, [r3, #8]
   17186:	461a      	mov	r2, r3
   17188:	697b      	ldr	r3, [r7, #20]
   1718a:	429a      	cmp	r2, r3
   1718c:	d1df      	bne.n	1714e <obj_clearRegisterActivationMaskList+0x12>
            return ret;
        }
        bb_clear((gxByteBuffer*)it->key);
        bb_clear((gxByteBuffer*)it->value);
    }
    arr_clearKeyValuePair(list);
   1718e:	6878      	ldr	r0, [r7, #4]
   17190:	f7f5 fb52 	bl	c838 <arr_clearKeyValuePair>
    return ret;
   17194:	693b      	ldr	r3, [r7, #16]
}
   17196:	4618      	mov	r0, r3
   17198:	3718      	adds	r7, #24
   1719a:	46bd      	mov	sp, r7
   1719c:	bd80      	pop	{r7, pc}
   1719e:	bf00      	nop

000171a0 <obj_clearIP4SetupOptions>:
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_IP4_SETUP
int obj_clearIP4SetupOptions(gxArray* list)
{
   171a0:	b580      	push	{r7, lr}
   171a2:	b086      	sub	sp, #24
   171a4:	af00      	add	r7, sp, #0
   171a6:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   171a8:	2300      	movs	r3, #0
   171aa:	613b      	str	r3, [r7, #16]
    gxip4SetupIpOption *it;
    for (pos = 0; pos != list->size; ++pos)
   171ac:	2300      	movs	r3, #0
   171ae:	617b      	str	r3, [r7, #20]
   171b0:	e014      	b.n	171dc <obj_clearIP4SetupOptions+0x3c>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   171b2:	f107 030c 	add.w	r3, r7, #12
   171b6:	461a      	mov	r2, r3
   171b8:	6979      	ldr	r1, [r7, #20]
   171ba:	6878      	ldr	r0, [r7, #4]
   171bc:	f7f5 fb1e 	bl	c7fc <arr_getByIndex>
   171c0:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   171c2:	693b      	ldr	r3, [r7, #16]
   171c4:	2b00      	cmp	r3, #0
   171c6:	d001      	beq.n	171cc <obj_clearIP4SetupOptions+0x2c>
        {
            return ret;
   171c8:	693b      	ldr	r3, [r7, #16]
   171ca:	e011      	b.n	171f0 <obj_clearIP4SetupOptions+0x50>
        }
        bb_clear(&it->data);
   171cc:	68fb      	ldr	r3, [r7, #12]
   171ce:	3304      	adds	r3, #4
   171d0:	4618      	mov	r0, r3
   171d2:	f7ec fac7 	bl	3764 <bb_clear>
#ifndef DLMS_IGNORE_IP4_SETUP
int obj_clearIP4SetupOptions(gxArray* list)
{
    int pos, ret = 0;
    gxip4SetupIpOption *it;
    for (pos = 0; pos != list->size; ++pos)
   171d6:	697b      	ldr	r3, [r7, #20]
   171d8:	3301      	adds	r3, #1
   171da:	617b      	str	r3, [r7, #20]
   171dc:	687b      	ldr	r3, [r7, #4]
   171de:	891b      	ldrh	r3, [r3, #8]
   171e0:	461a      	mov	r2, r3
   171e2:	697b      	ldr	r3, [r7, #20]
   171e4:	429a      	cmp	r2, r3
   171e6:	d1e4      	bne.n	171b2 <obj_clearIP4SetupOptions+0x12>
        {
            return ret;
        }
        bb_clear(&it->data);
    }
    arr_clear(list);
   171e8:	6878      	ldr	r0, [r7, #4]
   171ea:	f7f5 fa91 	bl	c710 <arr_clear>
    return ret;
   171ee:	693b      	ldr	r3, [r7, #16]
}
   171f0:	4618      	mov	r0, r3
   171f2:	3718      	adds	r7, #24
   171f4:	46bd      	mov	sp, r7
   171f6:	bd80      	pop	{r7, pc}

000171f8 <obj_clearPPPSetupIPCPOptions>:
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_PPP_SETUP
int obj_clearPPPSetupIPCPOptions(gxArray* list)
{
   171f8:	b580      	push	{r7, lr}
   171fa:	b086      	sub	sp, #24
   171fc:	af00      	add	r7, sp, #0
   171fe:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   17200:	2300      	movs	r3, #0
   17202:	613b      	str	r3, [r7, #16]
    gxpppSetupIPCPOption *it;
    for (pos = 0; pos != list->size; ++pos)
   17204:	2300      	movs	r3, #0
   17206:	617b      	str	r3, [r7, #20]
   17208:	e014      	b.n	17234 <obj_clearPPPSetupIPCPOptions+0x3c>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   1720a:	f107 030c 	add.w	r3, r7, #12
   1720e:	461a      	mov	r2, r3
   17210:	6979      	ldr	r1, [r7, #20]
   17212:	6878      	ldr	r0, [r7, #4]
   17214:	f7f5 faf2 	bl	c7fc <arr_getByIndex>
   17218:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   1721a:	693b      	ldr	r3, [r7, #16]
   1721c:	2b00      	cmp	r3, #0
   1721e:	d001      	beq.n	17224 <obj_clearPPPSetupIPCPOptions+0x2c>
        {
            return ret;
   17220:	693b      	ldr	r3, [r7, #16]
   17222:	e011      	b.n	17248 <obj_clearPPPSetupIPCPOptions+0x50>
        }
        var_clear(&it->data);
   17224:	68fb      	ldr	r3, [r7, #12]
   17226:	3308      	adds	r3, #8
   17228:	4618      	mov	r0, r3
   1722a:	f00e ff8d 	bl	26148 <var_clear>
#ifndef DLMS_IGNORE_PPP_SETUP
int obj_clearPPPSetupIPCPOptions(gxArray* list)
{
    int pos, ret = 0;
    gxpppSetupIPCPOption *it;
    for (pos = 0; pos != list->size; ++pos)
   1722e:	697b      	ldr	r3, [r7, #20]
   17230:	3301      	adds	r3, #1
   17232:	617b      	str	r3, [r7, #20]
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	891b      	ldrh	r3, [r3, #8]
   17238:	461a      	mov	r2, r3
   1723a:	697b      	ldr	r3, [r7, #20]
   1723c:	429a      	cmp	r2, r3
   1723e:	d1e4      	bne.n	1720a <obj_clearPPPSetupIPCPOptions+0x12>
        {
            return ret;
        }
        var_clear(&it->data);
    }
    arr_clear(list);
   17240:	6878      	ldr	r0, [r7, #4]
   17242:	f7f5 fa65 	bl	c710 <arr_clear>
    return ret;
   17246:	693b      	ldr	r3, [r7, #16]
}
   17248:	4618      	mov	r0, r3
   1724a:	3718      	adds	r7, #24
   1724c:	46bd      	mov	sp, r7
   1724e:	bd80      	pop	{r7, pc}

00017250 <obj_clearPPPSetupLCPOptions>:

int obj_clearPPPSetupLCPOptions(gxArray* list)
{
   17250:	b580      	push	{r7, lr}
   17252:	b086      	sub	sp, #24
   17254:	af00      	add	r7, sp, #0
   17256:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   17258:	2300      	movs	r3, #0
   1725a:	613b      	str	r3, [r7, #16]
    gxpppSetupLcpOption *it;
    for (pos = 0; pos != list->size; ++pos)
   1725c:	2300      	movs	r3, #0
   1725e:	617b      	str	r3, [r7, #20]
   17260:	e014      	b.n	1728c <obj_clearPPPSetupLCPOptions+0x3c>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   17262:	f107 030c 	add.w	r3, r7, #12
   17266:	461a      	mov	r2, r3
   17268:	6979      	ldr	r1, [r7, #20]
   1726a:	6878      	ldr	r0, [r7, #4]
   1726c:	f7f5 fac6 	bl	c7fc <arr_getByIndex>
   17270:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   17272:	693b      	ldr	r3, [r7, #16]
   17274:	2b00      	cmp	r3, #0
   17276:	d001      	beq.n	1727c <obj_clearPPPSetupLCPOptions+0x2c>
        {
            return ret;
   17278:	693b      	ldr	r3, [r7, #16]
   1727a:	e011      	b.n	172a0 <obj_clearPPPSetupLCPOptions+0x50>
        }
        var_clear(&it->data);
   1727c:	68fb      	ldr	r3, [r7, #12]
   1727e:	3308      	adds	r3, #8
   17280:	4618      	mov	r0, r3
   17282:	f00e ff61 	bl	26148 <var_clear>

int obj_clearPPPSetupLCPOptions(gxArray* list)
{
    int pos, ret = 0;
    gxpppSetupLcpOption *it;
    for (pos = 0; pos != list->size; ++pos)
   17286:	697b      	ldr	r3, [r7, #20]
   17288:	3301      	adds	r3, #1
   1728a:	617b      	str	r3, [r7, #20]
   1728c:	687b      	ldr	r3, [r7, #4]
   1728e:	891b      	ldrh	r3, [r3, #8]
   17290:	461a      	mov	r2, r3
   17292:	697b      	ldr	r3, [r7, #20]
   17294:	429a      	cmp	r2, r3
   17296:	d1e4      	bne.n	17262 <obj_clearPPPSetupLCPOptions+0x12>
        {
            return ret;
        }
        var_clear(&it->data);
    }
    arr_clear(list);
   17298:	6878      	ldr	r0, [r7, #4]
   1729a:	f7f5 fa39 	bl	c710 <arr_clear>
    return ret;
   1729e:	693b      	ldr	r3, [r7, #16]
}
   172a0:	4618      	mov	r0, r3
   172a2:	3718      	adds	r7, #24
   172a4:	46bd      	mov	sp, r7
   172a6:	bd80      	pop	{r7, pc}

000172a8 <obj_clearActiveDevices>:
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int obj_clearActiveDevices(gxArray* list)
{
   172a8:	b580      	push	{r7, lr}
   172aa:	b086      	sub	sp, #24
   172ac:	af00      	add	r7, sp, #0
   172ae:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   172b0:	2300      	movs	r3, #0
   172b2:	613b      	str	r3, [r7, #16]
    gxActiveDevice *it;
    for (pos = 0; pos != list->size; ++pos)
   172b4:	2300      	movs	r3, #0
   172b6:	617b      	str	r3, [r7, #20]
   172b8:	e018      	b.n	172ec <obj_clearActiveDevices+0x44>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   172ba:	f107 030c 	add.w	r3, r7, #12
   172be:	461a      	mov	r2, r3
   172c0:	6979      	ldr	r1, [r7, #20]
   172c2:	6878      	ldr	r0, [r7, #4]
   172c4:	f7f5 fa9a 	bl	c7fc <arr_getByIndex>
   172c8:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   172ca:	693b      	ldr	r3, [r7, #16]
   172cc:	2b00      	cmp	r3, #0
   172ce:	d001      	beq.n	172d4 <obj_clearActiveDevices+0x2c>
        {
            return ret;
   172d0:	693b      	ldr	r3, [r7, #16]
   172d2:	e015      	b.n	17300 <obj_clearActiveDevices+0x58>
        }
        bb_clear(&it->macAddress);
   172d4:	68fb      	ldr	r3, [r7, #12]
   172d6:	4618      	mov	r0, r3
   172d8:	f7ec fa44 	bl	3764 <bb_clear>
        ba_clear(&it->status);
   172dc:	68fb      	ldr	r3, [r7, #12]
   172de:	330c      	adds	r3, #12
   172e0:	4618      	mov	r0, r3
   172e2:	f7eb fc11 	bl	2b08 <ba_clear>
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int obj_clearActiveDevices(gxArray* list)
{
    int pos, ret = 0;
    gxActiveDevice *it;
    for (pos = 0; pos != list->size; ++pos)
   172e6:	697b      	ldr	r3, [r7, #20]
   172e8:	3301      	adds	r3, #1
   172ea:	617b      	str	r3, [r7, #20]
   172ec:	687b      	ldr	r3, [r7, #4]
   172ee:	891b      	ldrh	r3, [r3, #8]
   172f0:	461a      	mov	r2, r3
   172f2:	697b      	ldr	r3, [r7, #20]
   172f4:	429a      	cmp	r2, r3
   172f6:	d1e0      	bne.n	172ba <obj_clearActiveDevices+0x12>
            return ret;
        }
        bb_clear(&it->macAddress);
        ba_clear(&it->status);
    }
    arr_clear(list);
   172f8:	6878      	ldr	r0, [r7, #4]
   172fa:	f7f5 fa09 	bl	c710 <arr_clear>
    return ret;
   172fe:	693b      	ldr	r3, [r7, #16]
}
   17300:	4618      	mov	r0, r3
   17302:	3718      	adds	r7, #24
   17304:	46bd      	mov	sp, r7
   17306:	bd80      	pop	{r7, pc}

00017308 <obj_clearChargeTables>:
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_CHARGE
int obj_clearChargeTables(gxArray* list)
{
   17308:	b580      	push	{r7, lr}
   1730a:	b086      	sub	sp, #24
   1730c:	af00      	add	r7, sp, #0
   1730e:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   17310:	2300      	movs	r3, #0
   17312:	613b      	str	r3, [r7, #16]
    gxChargeTable *it;
    for (pos = 0; pos != list->size; ++pos)
   17314:	2300      	movs	r3, #0
   17316:	617b      	str	r3, [r7, #20]
   17318:	e013      	b.n	17342 <obj_clearChargeTables+0x3a>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   1731a:	f107 030c 	add.w	r3, r7, #12
   1731e:	461a      	mov	r2, r3
   17320:	6979      	ldr	r1, [r7, #20]
   17322:	6878      	ldr	r0, [r7, #4]
   17324:	f7f5 fa6a 	bl	c7fc <arr_getByIndex>
   17328:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   1732a:	693b      	ldr	r3, [r7, #16]
   1732c:	2b00      	cmp	r3, #0
   1732e:	d001      	beq.n	17334 <obj_clearChargeTables+0x2c>
        {
            return ret;
   17330:	693b      	ldr	r3, [r7, #16]
   17332:	e010      	b.n	17356 <obj_clearChargeTables+0x4e>
        }
        bb_clear(&it->index);
   17334:	68fb      	ldr	r3, [r7, #12]
   17336:	4618      	mov	r0, r3
   17338:	f7ec fa14 	bl	3764 <bb_clear>
#ifndef DLMS_IGNORE_CHARGE
int obj_clearChargeTables(gxArray* list)
{
    int pos, ret = 0;
    gxChargeTable *it;
    for (pos = 0; pos != list->size; ++pos)
   1733c:	697b      	ldr	r3, [r7, #20]
   1733e:	3301      	adds	r3, #1
   17340:	617b      	str	r3, [r7, #20]
   17342:	687b      	ldr	r3, [r7, #4]
   17344:	891b      	ldrh	r3, [r3, #8]
   17346:	461a      	mov	r2, r3
   17348:	697b      	ldr	r3, [r7, #20]
   1734a:	429a      	cmp	r2, r3
   1734c:	d1e5      	bne.n	1731a <obj_clearChargeTables+0x12>
        {
            return ret;
        }
        bb_clear(&it->index);
    }
    arr_clear(list);
   1734e:	6878      	ldr	r0, [r7, #4]
   17350:	f7f5 f9de 	bl	c710 <arr_clear>
    return ret;
   17354:	693b      	ldr	r3, [r7, #16]
}
   17356:	4618      	mov	r0, r3
   17358:	3718      	adds	r7, #24
   1735a:	46bd      	mov	sp, r7
   1735c:	bd80      	pop	{r7, pc}
   1735e:	bf00      	nop

00017360 <obj_clearUserList>:
#endif //DLMS_IGNORE_CHARGE

int obj_clearUserList(gxArray* list)
{
   17360:	b580      	push	{r7, lr}
   17362:	b086      	sub	sp, #24
   17364:	af00      	add	r7, sp, #0
   17366:	6078      	str	r0, [r7, #4]
    int pos, ret = 0;
   17368:	2300      	movs	r3, #0
   1736a:	613b      	str	r3, [r7, #16]
    gxKey2 *it;
    for (pos = 0; pos != list->size; ++pos)
   1736c:	2300      	movs	r3, #0
   1736e:	617b      	str	r3, [r7, #20]
   17370:	e014      	b.n	1739c <obj_clearUserList+0x3c>
    {
        ret = arr_getByIndex(list, pos, (void**)&it);
   17372:	f107 030c 	add.w	r3, r7, #12
   17376:	461a      	mov	r2, r3
   17378:	6979      	ldr	r1, [r7, #20]
   1737a:	6878      	ldr	r0, [r7, #4]
   1737c:	f7f5 fa3e 	bl	c7fc <arr_getByIndex>
   17380:	6138      	str	r0, [r7, #16]
        if (ret != 0)
   17382:	693b      	ldr	r3, [r7, #16]
   17384:	2b00      	cmp	r3, #0
   17386:	d001      	beq.n	1738c <obj_clearUserList+0x2c>
        {
            return ret;
   17388:	693b      	ldr	r3, [r7, #16]
   1738a:	e011      	b.n	173b0 <obj_clearUserList+0x50>
        }
        gxfree(it->value);
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	685b      	ldr	r3, [r3, #4]
   17390:	4618      	mov	r0, r3
   17392:	f012 fb5f 	bl	29a54 <free>

int obj_clearUserList(gxArray* list)
{
    int pos, ret = 0;
    gxKey2 *it;
    for (pos = 0; pos != list->size; ++pos)
   17396:	697b      	ldr	r3, [r7, #20]
   17398:	3301      	adds	r3, #1
   1739a:	617b      	str	r3, [r7, #20]
   1739c:	687b      	ldr	r3, [r7, #4]
   1739e:	891b      	ldrh	r3, [r3, #8]
   173a0:	461a      	mov	r2, r3
   173a2:	697b      	ldr	r3, [r7, #20]
   173a4:	429a      	cmp	r2, r3
   173a6:	d1e4      	bne.n	17372 <obj_clearUserList+0x12>
        {
            return ret;
        }
        gxfree(it->value);
    }
    arr_clear(list);
   173a8:	6878      	ldr	r0, [r7, #4]
   173aa:	f7f5 f9b1 	bl	c710 <arr_clear>
    return ret;
   173ae:	693b      	ldr	r3, [r7, #16]
}
   173b0:	4618      	mov	r0, r3
   173b2:	3718      	adds	r7, #24
   173b4:	46bd      	mov	sp, r7
   173b6:	bd80      	pop	{r7, pc}

000173b8 <obj_clearCertificateInfo>:

#ifndef DLMS_IGNORE_SECURITY_SETUP
int obj_clearCertificateInfo(gxArray* arr)
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b086      	sub	sp, #24
   173bc:	af00      	add	r7, sp, #0
   173be:	6078      	str	r0, [r7, #4]
    int ret;
    gxCertificateInfo* it;
    unsigned short pos;
    for (pos = 0; pos != arr->size; ++pos)
   173c0:	2300      	movs	r3, #0
   173c2:	82fb      	strh	r3, [r7, #22]
   173c4:	e023      	b.n	1740e <obj_clearCertificateInfo+0x56>
    {
        if ((ret = arr_getByIndex(arr, pos, (void**)&it)) != 0)
   173c6:	8afb      	ldrh	r3, [r7, #22]
   173c8:	f107 020c 	add.w	r2, r7, #12
   173cc:	4619      	mov	r1, r3
   173ce:	6878      	ldr	r0, [r7, #4]
   173d0:	f7f5 fa14 	bl	c7fc <arr_getByIndex>
   173d4:	6138      	str	r0, [r7, #16]
   173d6:	693b      	ldr	r3, [r7, #16]
   173d8:	2b00      	cmp	r3, #0
   173da:	d001      	beq.n	173e0 <obj_clearCertificateInfo+0x28>
        {
            return ret;
   173dc:	693b      	ldr	r3, [r7, #16]
   173de:	e01f      	b.n	17420 <obj_clearCertificateInfo+0x68>
        }
        gxfree(it->serialNumber);
   173e0:	68fb      	ldr	r3, [r7, #12]
   173e2:	685b      	ldr	r3, [r3, #4]
   173e4:	4618      	mov	r0, r3
   173e6:	f012 fb35 	bl	29a54 <free>
        gxfree(it->issuer);
   173ea:	68fb      	ldr	r3, [r7, #12]
   173ec:	689b      	ldr	r3, [r3, #8]
   173ee:	4618      	mov	r0, r3
   173f0:	f012 fb30 	bl	29a54 <free>
        gxfree(it->subject);
   173f4:	68fb      	ldr	r3, [r7, #12]
   173f6:	68db      	ldr	r3, [r3, #12]
   173f8:	4618      	mov	r0, r3
   173fa:	f012 fb2b 	bl	29a54 <free>
        gxfree(it->subjectAltName);
   173fe:	68fb      	ldr	r3, [r7, #12]
   17400:	691b      	ldr	r3, [r3, #16]
   17402:	4618      	mov	r0, r3
   17404:	f012 fb26 	bl	29a54 <free>
int obj_clearCertificateInfo(gxArray* arr)
{
    int ret;
    gxCertificateInfo* it;
    unsigned short pos;
    for (pos = 0; pos != arr->size; ++pos)
   17408:	8afb      	ldrh	r3, [r7, #22]
   1740a:	3301      	adds	r3, #1
   1740c:	82fb      	strh	r3, [r7, #22]
   1740e:	687b      	ldr	r3, [r7, #4]
   17410:	891b      	ldrh	r3, [r3, #8]
   17412:	8afa      	ldrh	r2, [r7, #22]
   17414:	429a      	cmp	r2, r3
   17416:	d1d6      	bne.n	173c6 <obj_clearCertificateInfo+0xe>
        gxfree(it->serialNumber);
        gxfree(it->issuer);
        gxfree(it->subject);
        gxfree(it->subjectAltName);
    }
    arr_clear(arr);
   17418:	6878      	ldr	r0, [r7, #4]
   1741a:	f7f5 f979 	bl	c710 <arr_clear>
    return 0;
   1741e:	2300      	movs	r3, #0
}
   17420:	4618      	mov	r0, r3
   17422:	3718      	adds	r7, #24
   17424:	46bd      	mov	sp, r7
   17426:	bd80      	pop	{r7, pc}

00017428 <obj_clear>:
#endif //DLMS_IGNORE_SECURITY_SETUP

void obj_clear(gxObject* object)
{
   17428:	b580      	push	{r7, lr}
   1742a:	b084      	sub	sp, #16
   1742c:	af00      	add	r7, sp, #0
   1742e:	6078      	str	r0, [r7, #4]
    int ret = 0;
   17430:	2300      	movs	r3, #0
   17432:	60fb      	str	r3, [r7, #12]
    if (object != NULL)
   17434:	687b      	ldr	r3, [r7, #4]
   17436:	2b00      	cmp	r3, #0
   17438:	f000 8327 	beq.w	17a8a <obj_clear+0x662>
    {
        if (object->access != NULL)
   1743c:	687b      	ldr	r3, [r7, #4]
   1743e:	68db      	ldr	r3, [r3, #12]
   17440:	2b00      	cmp	r3, #0
   17442:	d012      	beq.n	1746a <obj_clear+0x42>
        {
            bb_clear(&object->access->attributeAccessModes);
   17444:	687b      	ldr	r3, [r7, #4]
   17446:	68db      	ldr	r3, [r3, #12]
   17448:	4618      	mov	r0, r3
   1744a:	f7ec f98b 	bl	3764 <bb_clear>
            bb_clear(&object->access->methodAccessModes);
   1744e:	687b      	ldr	r3, [r7, #4]
   17450:	68db      	ldr	r3, [r3, #12]
   17452:	330c      	adds	r3, #12
   17454:	4618      	mov	r0, r3
   17456:	f7ec f985 	bl	3764 <bb_clear>
            gxfree(object->access);
   1745a:	687b      	ldr	r3, [r7, #4]
   1745c:	68db      	ldr	r3, [r3, #12]
   1745e:	4618      	mov	r0, r3
   17460:	f012 faf8 	bl	29a54 <free>
            object->access = NULL;
   17464:	687b      	ldr	r3, [r7, #4]
   17466:	2200      	movs	r2, #0
   17468:	60da      	str	r2, [r3, #12]
        }
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        object->shortName = 0;
   1746a:	687b      	ldr	r3, [r7, #4]
   1746c:	2200      	movs	r2, #0
   1746e:	809a      	strh	r2, [r3, #4]
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        switch (object->objectType)
   17470:	687b      	ldr	r3, [r7, #4]
   17472:	781b      	ldrb	r3, [r3, #0]
   17474:	3b01      	subs	r3, #1
   17476:	2b72      	cmp	r3, #114	; 0x72
   17478:	f200 8304 	bhi.w	17a84 <obj_clear+0x65c>
   1747c:	a201      	add	r2, pc, #4	; (adr r2, 17484 <obj_clear+0x5c>)
   1747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17482:	bf00      	nop
   17484:	00017651 	.word	0x00017651
   17488:	00017a85 	.word	0x00017a85
   1748c:	0001765d 	.word	0x0001765d
   17490:	0001777b 	.word	0x0001777b
   17494:	0001774f 	.word	0x0001774f
   17498:	000178ff 	.word	0x000178ff
   1749c:	000178e9 	.word	0x000178e9
   174a0:	00017a85 	.word	0x00017a85
   174a4:	0001794d 	.word	0x0001794d
   174a8:	00017a85 	.word	0x00017a85
   174ac:	00017959 	.word	0x00017959
   174b0:	00017717 	.word	0x00017717
   174b4:	00017a85 	.word	0x00017a85
   174b8:	00017a85 	.word	0x00017a85
   174bc:	000176d3 	.word	0x000176d3
   174c0:	00017a85 	.word	0x00017a85
   174c4:	00017941 	.word	0x00017941
   174c8:	00017807 	.word	0x00017807
   174cc:	000177b3 	.word	0x000177b3
   174d0:	00017675 	.word	0x00017675
   174d4:	0001791f 	.word	0x0001791f
   174d8:	00017669 	.word	0x00017669
   174dc:	00017a85 	.word	0x00017a85
   174e0:	00017a85 	.word	0x00017a85
   174e4:	00017a85 	.word	0x00017a85
   174e8:	00017a85 	.word	0x00017a85
   174ec:	0001789d 	.word	0x0001789d
   174f0:	0001772d 	.word	0x0001772d
   174f4:	00017739 	.word	0x00017739
   174f8:	00017a85 	.word	0x00017a85
   174fc:	00017a85 	.word	0x00017a85
   17500:	00017a85 	.word	0x00017a85
   17504:	00017a85 	.word	0x00017a85
   17508:	00017a85 	.word	0x00017a85
   1750c:	00017a85 	.word	0x00017a85
   17510:	00017a85 	.word	0x00017a85
   17514:	00017a85 	.word	0x00017a85
   17518:	00017a85 	.word	0x00017a85
   1751c:	00017a85 	.word	0x00017a85
   17520:	00017991 	.word	0x00017991
   17524:	00017965 	.word	0x00017965
   17528:	000177dd 	.word	0x000177dd
   1752c:	0001776f 	.word	0x0001776f
   17530:	000178b5 	.word	0x000178b5
   17534:	00017787 	.word	0x00017787
   17538:	00017a85 	.word	0x00017a85
   1753c:	00017a49 	.word	0x00017a49
   17540:	00017a85 	.word	0x00017a85
   17544:	00017a85 	.word	0x00017a85
   17548:	00017a85 	.word	0x00017a85
   1754c:	00017a85 	.word	0x00017a85
   17550:	00017a85 	.word	0x00017a85
   17554:	00017a85 	.word	0x00017a85
   17558:	00017a85 	.word	0x00017a85
   1755c:	00017a85 	.word	0x00017a85
   17560:	00017a85 	.word	0x00017a85
   17564:	00017a85 	.word	0x00017a85
   17568:	00017a85 	.word	0x00017a85
   1756c:	00017a85 	.word	0x00017a85
   17570:	00017971 	.word	0x00017971
   17574:	00017a85 	.word	0x00017a85
   17578:	00017a65 	.word	0x00017a65
   1757c:	00017a85 	.word	0x00017a85
   17580:	00017793 	.word	0x00017793
   17584:	00017a85 	.word	0x00017a85
   17588:	00017a85 	.word	0x00017a85
   1758c:	00017a85 	.word	0x00017a85
   17590:	00017a85 	.word	0x00017a85
   17594:	00017a85 	.word	0x00017a85
   17598:	00017a85 	.word	0x00017a85
   1759c:	0001785d 	.word	0x0001785d
   175a0:	00017887 	.word	0x00017887
   175a4:	00017a85 	.word	0x00017a85
   175a8:	00017a85 	.word	0x00017a85
   175ac:	00017a85 	.word	0x00017a85
   175b0:	00017a85 	.word	0x00017a85
   175b4:	00017a85 	.word	0x00017a85
   175b8:	00017a85 	.word	0x00017a85
   175bc:	00017a85 	.word	0x00017a85
   175c0:	00017a85 	.word	0x00017a85
   175c4:	00017a85 	.word	0x00017a85
   175c8:	00017a85 	.word	0x00017a85
   175cc:	00017a85 	.word	0x00017a85
   175d0:	00017a85 	.word	0x00017a85
   175d4:	00017a85 	.word	0x00017a85
   175d8:	00017a85 	.word	0x00017a85
   175dc:	00017a85 	.word	0x00017a85
   175e0:	00017a85 	.word	0x00017a85
   175e4:	00017a85 	.word	0x00017a85
   175e8:	00017a85 	.word	0x00017a85
   175ec:	00017a85 	.word	0x00017a85
   175f0:	00017a85 	.word	0x00017a85
   175f4:	00017a85 	.word	0x00017a85
   175f8:	00017a85 	.word	0x00017a85
   175fc:	00017a85 	.word	0x00017a85
   17600:	00017a85 	.word	0x00017a85
   17604:	00017a85 	.word	0x00017a85
   17608:	00017a85 	.word	0x00017a85
   1760c:	00017a85 	.word	0x00017a85
   17610:	00017a85 	.word	0x00017a85
   17614:	00017a85 	.word	0x00017a85
   17618:	00017a85 	.word	0x00017a85
   1761c:	00017a85 	.word	0x00017a85
   17620:	00017935 	.word	0x00017935
   17624:	00017a85 	.word	0x00017a85
   17628:	00017a85 	.word	0x00017a85
   1762c:	00017a85 	.word	0x00017a85
   17630:	00017a85 	.word	0x00017a85
   17634:	00017a85 	.word	0x00017a85
   17638:	00017a85 	.word	0x00017a85
   1763c:	000179bf 	.word	0x000179bf
   17640:	000179fd 	.word	0x000179fd
   17644:	00017a09 	.word	0x00017a09
   17648:	00017a85 	.word	0x00017a85
   1764c:	00017a29 	.word	0x00017a29
        {
#ifndef DLMS_IGNORE_DATA
        case DLMS_OBJECT_TYPE_DATA:
            var_clear(&((gxData*)object)->value);
   17650:	687b      	ldr	r3, [r7, #4]
   17652:	3310      	adds	r3, #16
   17654:	4618      	mov	r0, r3
   17656:	f00e fd77 	bl	26148 <var_clear>
            break;
   1765a:	e216      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_DATA
#ifndef DLMS_IGNORE_REGISTER
        case DLMS_OBJECT_TYPE_REGISTER:
            var_clear(&((gxData*)object)->value);
   1765c:	687b      	ldr	r3, [r7, #4]
   1765e:	3310      	adds	r3, #16
   17660:	4618      	mov	r0, r3
   17662:	f00e fd71 	bl	26148 <var_clear>
            break;
   17666:	e210      	b.n	17a8a <obj_clear+0x662>
            //Clock object do not need to clean.
            break;
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
        case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
            arr_clear(&((gxActionSchedule*)object)->executionTime);
   17668:	687b      	ldr	r3, [r7, #4]
   1766a:	331c      	adds	r3, #28
   1766c:	4618      	mov	r0, r3
   1766e:	f7f5 f84f 	bl	c710 <arr_clear>
            break;
   17672:	e20a      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
        case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
            bb_clear(&((gxActivityCalendar*)object)->calendarNameActive);
   17674:	687b      	ldr	r3, [r7, #4]
   17676:	3310      	adds	r3, #16
   17678:	4618      	mov	r0, r3
   1767a:	f7ec f873 	bl	3764 <bb_clear>
            bb_clear(&((gxActivityCalendar*)object)->calendarNamePassive);
   1767e:	687b      	ldr	r3, [r7, #4]
   17680:	331c      	adds	r3, #28
   17682:	4618      	mov	r0, r3
   17684:	f7ec f86e 	bl	3764 <bb_clear>
            ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfileActive);
   17688:	687b      	ldr	r3, [r7, #4]
   1768a:	3328      	adds	r3, #40	; 0x28
   1768c:	4618      	mov	r0, r3
   1768e:	f7ff fc1f 	bl	16ed0 <obj_clearSeasonProfile>
   17692:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif
            ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTableActive);
   17694:	687b      	ldr	r3, [r7, #4]
   17696:	3338      	adds	r3, #56	; 0x38
   17698:	4618      	mov	r0, r3
   1769a:	f7ff fc49 	bl	16f30 <obj_clearWeekProfileTable>
   1769e:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif

            ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTableActive);
   176a0:	687b      	ldr	r3, [r7, #4]
   176a2:	3348      	adds	r3, #72	; 0x48
   176a4:	4618      	mov	r0, r3
   176a6:	f7ff fc6f 	bl	16f88 <obj_clearDayProfileTable>
   176aa:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif

            ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfilePassive);
   176ac:	687b      	ldr	r3, [r7, #4]
   176ae:	3358      	adds	r3, #88	; 0x58
   176b0:	4618      	mov	r0, r3
   176b2:	f7ff fc0d 	bl	16ed0 <obj_clearSeasonProfile>
   176b6:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif

            ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTablePassive);
   176b8:	687b      	ldr	r3, [r7, #4]
   176ba:	3378      	adds	r3, #120	; 0x78
   176bc:	4618      	mov	r0, r3
   176be:	f7ff fc37 	bl	16f30 <obj_clearWeekProfileTable>
   176c2:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif

            ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTablePassive);
   176c4:	687b      	ldr	r3, [r7, #4]
   176c6:	3368      	adds	r3, #104	; 0x68
   176c8:	4618      	mov	r0, r3
   176ca:	f7ff fc5d 	bl	16f88 <obj_clearDayProfileTable>
   176ce:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif
            break;
   176d0:	e1db      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
        case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
            oa_empty(&((gxAssociationLogicalName*)object)->objectList);
   176d2:	687b      	ldr	r3, [r7, #4]
   176d4:	3314      	adds	r3, #20
   176d6:	4618      	mov	r0, r3
   176d8:	f00a fd8e 	bl	221f8 <oa_empty>
            ((gxAssociationLogicalName*)object)->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)0;
   176dc:	687b      	ldr	r3, [r7, #4]
   176de:	2200      	movs	r2, #0
   176e0:	635a      	str	r2, [r3, #52]	; 0x34
            bb_clear(&((gxAssociationLogicalName*)object)->xDLMSContextInfo.cypheringInfo);
   176e2:	687b      	ldr	r3, [r7, #4]
   176e4:	3340      	adds	r3, #64	; 0x40
   176e6:	4618      	mov	r0, r3
   176e8:	f7ec f83c 	bl	3764 <bb_clear>
            bb_clear(&((gxAssociationLogicalName*)object)->secret);
   176ec:	687b      	ldr	r3, [r7, #4]
   176ee:	3354      	adds	r3, #84	; 0x54
   176f0:	4618      	mov	r0, r3
   176f2:	f7ec f837 	bl	3764 <bb_clear>
            obj_clearUserList(&((gxAssociationLogicalName*)object)->userList);
   176f6:	687b      	ldr	r3, [r7, #4]
   176f8:	3368      	adds	r3, #104	; 0x68
   176fa:	4618      	mov	r0, r3
   176fc:	f7ff fe30 	bl	17360 <obj_clearUserList>
            if (((gxAssociationLogicalName*)object)->currentUser.value != NULL)
   17700:	687b      	ldr	r3, [r7, #4]
   17702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   17704:	2b00      	cmp	r3, #0
   17706:	f000 81bf 	beq.w	17a88 <obj_clear+0x660>
            {
                gxfree(((gxAssociationLogicalName*)object)->currentUser.value);
   1770a:	687b      	ldr	r3, [r7, #4]
   1770c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1770e:	4618      	mov	r0, r3
   17710:	f012 f9a0 	bl	29a54 <free>
            }
            break;
   17714:	e1b8      	b.n	17a88 <obj_clear+0x660>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            oa_empty(&((gxAssociationShortName*)object)->objectList);
   17716:	687b      	ldr	r3, [r7, #4]
   17718:	3310      	adds	r3, #16
   1771a:	4618      	mov	r0, r3
   1771c:	f00a fd6c 	bl	221f8 <oa_empty>
            bb_clear(&((gxAssociationShortName*)object)->secret);
   17720:	687b      	ldr	r3, [r7, #4]
   17722:	3324      	adds	r3, #36	; 0x24
   17724:	4618      	mov	r0, r3
   17726:	f7ec f81d 	bl	3764 <bb_clear>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            break;
   1772a:	e1ae      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_AUTO_ANSWER
        case DLMS_OBJECT_TYPE_AUTO_ANSWER:
            arr_clearKeyValuePair(&((gxAutoAnswer*)object)->listeningWindow);
   1772c:	687b      	ldr	r3, [r7, #4]
   1772e:	3314      	adds	r3, #20
   17730:	4618      	mov	r0, r3
   17732:	f7f5 f881 	bl	c838 <arr_clearKeyValuePair>
            break;
   17736:	e1a8      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_AUTO_ANSWER
#ifndef DLMS_IGNORE_AUTO_CONNECT
        case DLMS_OBJECT_TYPE_AUTO_CONNECT:
            arr_clearKeyValuePair(&((gxAutoConnect*)object)->callingWindow);
   17738:	687b      	ldr	r3, [r7, #4]
   1773a:	3314      	adds	r3, #20
   1773c:	4618      	mov	r0, r3
   1773e:	f7f5 f87b 	bl	c838 <arr_clearKeyValuePair>
            arr_clearStrings(&((gxAutoConnect*)object)->destinations);
   17742:	687b      	ldr	r3, [r7, #4]
   17744:	3324      	adds	r3, #36	; 0x24
   17746:	4618      	mov	r0, r3
   17748:	f7f5 f8b4 	bl	c8b4 <arr_clearStrings>
            break;
   1774c:	e19d      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
        case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
            var_clear(&((gxDemandRegister*)object)->currentAvarageValue);
   1774e:	687b      	ldr	r3, [r7, #4]
   17750:	3310      	adds	r3, #16
   17752:	4618      	mov	r0, r3
   17754:	f00e fcf8 	bl	26148 <var_clear>
            var_clear(&((gxDemandRegister*)object)->lastAvarageValue);
   17758:	687b      	ldr	r3, [r7, #4]
   1775a:	3320      	adds	r3, #32
   1775c:	4618      	mov	r0, r3
   1775e:	f00e fcf3 	bl	26148 <var_clear>
            var_clear(&((gxDemandRegister*)object)->status);
   17762:	687b      	ldr	r3, [r7, #4]
   17764:	3338      	adds	r3, #56	; 0x38
   17766:	4618      	mov	r0, r3
   17768:	f00e fcee 	bl	26148 <var_clear>
            break;
   1776c:	e18d      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_DEMAND_REGISTER
#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
        case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
            bb_clear(&((gxMacAddressSetup*)object)->macAddress);
   1776e:	687b      	ldr	r3, [r7, #4]
   17770:	3310      	adds	r3, #16
   17772:	4618      	mov	r0, r3
   17774:	f7eb fff6 	bl	3764 <bb_clear>
            break;
   17778:	e187      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
        case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
            var_clear(&((gxExtendedRegister*)object)->status);
   1777a:	687b      	ldr	r3, [r7, #4]
   1777c:	3358      	adds	r3, #88	; 0x58
   1777e:	4618      	mov	r0, r3
   17780:	f00e fce2 	bl	26148 <var_clear>
            break;
   17784:	e181      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_GPRS_SETUP
        case DLMS_OBJECT_TYPE_GPRS_SETUP:
            bb_clear(&((gxGPRSSetup*)object)->apn);
   17786:	687b      	ldr	r3, [r7, #4]
   17788:	3310      	adds	r3, #16
   1778a:	4618      	mov	r0, r3
   1778c:	f7eb ffea 	bl	3764 <bb_clear>
            break;
   17790:	e17b      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_GPRS_SETUP
#ifndef DLMS_IGNORE_SECURITY_SETUP
        case DLMS_OBJECT_TYPE_SECURITY_SETUP:
            bb_clear(&((gxSecuritySetup*)object)->serverSystemTitle);
   17792:	687b      	ldr	r3, [r7, #4]
   17794:	3314      	adds	r3, #20
   17796:	4618      	mov	r0, r3
   17798:	f7eb ffe4 	bl	3764 <bb_clear>
            bb_clear(&((gxSecuritySetup*)object)->clientSystemTitle);
   1779c:	687b      	ldr	r3, [r7, #4]
   1779e:	3320      	adds	r3, #32
   177a0:	4618      	mov	r0, r3
   177a2:	f7eb ffdf 	bl	3764 <bb_clear>
            obj_clearCertificateInfo(&((gxSecuritySetup*)object)->certificates);
   177a6:	687b      	ldr	r3, [r7, #4]
   177a8:	332c      	adds	r3, #44	; 0x2c
   177aa:	4618      	mov	r0, r3
   177ac:	f7ff fe04 	bl	173b8 <obj_clearCertificateInfo>
            break;
   177b0:	e16b      	b.n	17a8a <obj_clear+0x662>
            //Do nothing.
            break;
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
        case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
            bb_clear(&((gxLocalPortSetup*)object)->password1);
   177b2:	687b      	ldr	r3, [r7, #4]
   177b4:	3310      	adds	r3, #16
   177b6:	4618      	mov	r0, r3
   177b8:	f7eb ffd4 	bl	3764 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password2);
   177bc:	687b      	ldr	r3, [r7, #4]
   177be:	331c      	adds	r3, #28
   177c0:	4618      	mov	r0, r3
   177c2:	f7eb ffcf 	bl	3764 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password5);
   177c6:	687b      	ldr	r3, [r7, #4]
   177c8:	3328      	adds	r3, #40	; 0x28
   177ca:	4618      	mov	r0, r3
   177cc:	f7eb ffca 	bl	3764 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->deviceAddress);
   177d0:	687b      	ldr	r3, [r7, #4]
   177d2:	3338      	adds	r3, #56	; 0x38
   177d4:	4618      	mov	r0, r3
   177d6:	f7eb ffc5 	bl	3764 <bb_clear>
            break;
   177da:	e156      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
        case DLMS_OBJECT_TYPE_IP4_SETUP:
            bb_clear(&((gxIp4Setup*)object)->dataLinkLayerReference);
   177dc:	687b      	ldr	r3, [r7, #4]
   177de:	3310      	adds	r3, #16
   177e0:	4618      	mov	r0, r3
   177e2:	f7eb ffbf 	bl	3764 <bb_clear>
            var_clear(&((gxIp4Setup*)object)->value);
   177e6:	687b      	ldr	r3, [r7, #4]
   177e8:	3350      	adds	r3, #80	; 0x50
   177ea:	4618      	mov	r0, r3
   177ec:	f00e fcac 	bl	26148 <var_clear>
            va_clear(&((gxIp4Setup*)object)->multicastIPAddress);
   177f0:	687b      	ldr	r3, [r7, #4]
   177f2:	3320      	adds	r3, #32
   177f4:	4618      	mov	r0, r3
   177f6:	f00f faa5 	bl	26d44 <va_clear>
            obj_clearIP4SetupOptions(&((gxIp4Setup*)object)->ipOptions);
   177fa:	687b      	ldr	r3, [r7, #4]
   177fc:	332c      	adds	r3, #44	; 0x2c
   177fe:	4618      	mov	r0, r3
   17800:	f7ff fcce 	bl	171a0 <obj_clearIP4SetupOptions>
            break;
   17804:	e141      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
        case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        {
            gxImageActivateInfo *it;
            ((gxImageTransfer*)object)->imageActivateInfo.position = 0;
   17806:	687b      	ldr	r3, [r7, #4]
   17808:	2200      	movs	r2, #0
   1780a:	635a      	str	r2, [r3, #52]	; 0x34
            while (((gxImageTransfer*)object)->imageActivateInfo.position != ((gxImageTransfer*)object)->imageActivateInfo.size)
   1780c:	e014      	b.n	17838 <obj_clear+0x410>
            {
                if (arr_get(&((gxImageTransfer*)object)->imageActivateInfo, (void**)&it) == 0)
   1780e:	687b      	ldr	r3, [r7, #4]
   17810:	3328      	adds	r3, #40	; 0x28
   17812:	f107 0208 	add.w	r2, r7, #8
   17816:	4611      	mov	r1, r2
   17818:	4618      	mov	r0, r3
   1781a:	f7f4 ffcd 	bl	c7b8 <arr_get>
   1781e:	4603      	mov	r3, r0
   17820:	2b00      	cmp	r3, #0
   17822:	d109      	bne.n	17838 <obj_clear+0x410>
                {
                    bb_clear(&it->identification);
   17824:	68bb      	ldr	r3, [r7, #8]
   17826:	3304      	adds	r3, #4
   17828:	4618      	mov	r0, r3
   1782a:	f7eb ff9b 	bl	3764 <bb_clear>
                    bb_clear(&it->signature);
   1782e:	68bb      	ldr	r3, [r7, #8]
   17830:	3310      	adds	r3, #16
   17832:	4618      	mov	r0, r3
   17834:	f7eb ff96 	bl	3764 <bb_clear>
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
        case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        {
            gxImageActivateInfo *it;
            ((gxImageTransfer*)object)->imageActivateInfo.position = 0;
            while (((gxImageTransfer*)object)->imageActivateInfo.position != ((gxImageTransfer*)object)->imageActivateInfo.size)
   17838:	687b      	ldr	r3, [r7, #4]
   1783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1783c:	687a      	ldr	r2, [r7, #4]
   1783e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
   17840:	4293      	cmp	r3, r2
   17842:	d1e4      	bne.n	1780e <obj_clear+0x3e6>
                {
                    bb_clear(&it->identification);
                    bb_clear(&it->signature);
                }
            }
            ba_clear(&((gxImageTransfer*)object)->imageTransferredBlocksStatus);
   17844:	687b      	ldr	r3, [r7, #4]
   17846:	3314      	adds	r3, #20
   17848:	4618      	mov	r0, r3
   1784a:	f7eb f95d 	bl	2b08 <ba_clear>
            arr_clear(&((gxImageTransfer*)object)->imageActivateInfo);
   1784e:	687b      	ldr	r3, [r7, #4]
   17850:	3328      	adds	r3, #40	; 0x28
   17852:	4618      	mov	r0, r3
   17854:	f7f4 ff5c 	bl	c710 <arr_clear>
            break;
   17858:	bf00      	nop
   1785a:	e116      	b.n	17a8a <obj_clear+0x662>
            //Do nothing.
            break;
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
        case DLMS_OBJECT_TYPE_LIMITER:
            var_clear(&((gxLimiter*)object)->thresholdActive);
   1785c:	687b      	ldr	r3, [r7, #4]
   1785e:	3318      	adds	r3, #24
   17860:	4618      	mov	r0, r3
   17862:	f00e fc71 	bl	26148 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdNormal);
   17866:	687b      	ldr	r3, [r7, #4]
   17868:	3328      	adds	r3, #40	; 0x28
   1786a:	4618      	mov	r0, r3
   1786c:	f00e fc6c 	bl	26148 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdEmergency);
   17870:	687b      	ldr	r3, [r7, #4]
   17872:	3338      	adds	r3, #56	; 0x38
   17874:	4618      	mov	r0, r3
   17876:	f00e fc67 	bl	26148 <var_clear>
            va_clear(&((gxLimiter*)object)->emergencyProfileGroupIDs);
   1787a:	687b      	ldr	r3, [r7, #4]
   1787c:	3388      	adds	r3, #136	; 0x88
   1787e:	4618      	mov	r0, r3
   17880:	f00f fa60 	bl	26d44 <va_clear>
            break;
   17884:	e101      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
        case DLMS_OBJECT_TYPE_MBUS_CLIENT:
            bb_clear(&((gxMBusClient*)object)->mBusPortReference);
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	3318      	adds	r3, #24
   1788a:	4618      	mov	r0, r3
   1788c:	f7eb ff6a 	bl	3764 <bb_clear>
            arr_clearKeyValuePair(&((gxMBusClient*)object)->captureDefinition);
   17890:	687b      	ldr	r3, [r7, #4]
   17892:	3324      	adds	r3, #36	; 0x24
   17894:	4618      	mov	r0, r3
   17896:	f7f4 ffcf 	bl	c838 <arr_clearKeyValuePair>
            break;
   1789a:	e0f6      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_MBUS_CLIENT
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
        case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
            ret = obj_clearModemConfigurationInitialisationStrings(&((gxModemConfiguration*)object)->initialisationStrings);
   1789c:	687b      	ldr	r3, [r7, #4]
   1789e:	3310      	adds	r3, #16
   178a0:	4618      	mov	r0, r3
   178a2:	f7ff fbc3 	bl	1702c <obj_clearModemConfigurationInitialisationStrings>
   178a6:	60f8      	str	r0, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(ret == 0);
#endif
            arr_clearStrings(&((gxModemConfiguration*)object)->modemProfile);
   178a8:	687b      	ldr	r3, [r7, #4]
   178aa:	3320      	adds	r3, #32
   178ac:	4618      	mov	r0, r3
   178ae:	f7f5 f801 	bl	c8b4 <arr_clearStrings>
            break;
   178b2:	e0ea      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
        case DLMS_OBJECT_TYPE_PPP_SETUP:
            bb_clear(&((gxPppSetup*)object)->PHYReference);
   178b4:	687b      	ldr	r3, [r7, #4]
   178b6:	3320      	adds	r3, #32
   178b8:	4618      	mov	r0, r3
   178ba:	f7eb ff53 	bl	3764 <bb_clear>
            bb_clear(&((gxPppSetup*)object)->userName);
   178be:	687b      	ldr	r3, [r7, #4]
   178c0:	333c      	adds	r3, #60	; 0x3c
   178c2:	4618      	mov	r0, r3
   178c4:	f7eb ff4e 	bl	3764 <bb_clear>
            bb_clear(&((gxPppSetup*)object)->password);
   178c8:	687b      	ldr	r3, [r7, #4]
   178ca:	3348      	adds	r3, #72	; 0x48
   178cc:	4618      	mov	r0, r3
   178ce:	f7eb ff49 	bl	3764 <bb_clear>
            obj_clearPPPSetupIPCPOptions(&((gxPppSetup*)object)->ipcpOptions);
   178d2:	687b      	ldr	r3, [r7, #4]
   178d4:	3310      	adds	r3, #16
   178d6:	4618      	mov	r0, r3
   178d8:	f7ff fc8e 	bl	171f8 <obj_clearPPPSetupIPCPOptions>
            obj_clearPPPSetupLCPOptions(&((gxPppSetup*)object)->lcpOptions);
   178dc:	687b      	ldr	r3, [r7, #4]
   178de:	332c      	adds	r3, #44	; 0x2c
   178e0:	4618      	mov	r0, r3
   178e2:	f7ff fcb5 	bl	17250 <obj_clearPPPSetupLCPOptions>
            break;
   178e6:	e0d0      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_PROFILE_GENERIC
        case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
            obj_clearProfileGenericBuffer(&((gxProfileGeneric*)object)->buffer);
   178e8:	687b      	ldr	r3, [r7, #4]
   178ea:	3310      	adds	r3, #16
   178ec:	4618      	mov	r0, r3
   178ee:	f7ff f9e1 	bl	16cb4 <obj_clearProfileGenericBuffer>
            obj_clearProfileGenericCaptureObjects(&((gxProfileGeneric*)object)->captureObjects);
   178f2:	687b      	ldr	r3, [r7, #4]
   178f4:	3320      	adds	r3, #32
   178f6:	4618      	mov	r0, r3
   178f8:	f7ff fabe 	bl	16e78 <obj_clearProfileGenericCaptureObjects>
            break;
   178fc:	e0c5      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
        case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
            obj_clearRegisterActivationAssignment(&((gxRegisterActivation*)object)->registerAssignment);
   178fe:	687b      	ldr	r3, [r7, #4]
   17900:	3310      	adds	r3, #16
   17902:	4618      	mov	r0, r3
   17904:	f7ff fc0e 	bl	17124 <obj_clearRegisterActivationAssignment>
            obj_clearRegisterActivationMaskList(&((gxRegisterActivation*)object)->maskList);
   17908:	687b      	ldr	r3, [r7, #4]
   1790a:	3320      	adds	r3, #32
   1790c:	4618      	mov	r0, r3
   1790e:	f7ff fc15 	bl	1713c <obj_clearRegisterActivationMaskList>
            bb_clear(&((gxRegisterActivation*)object)->activeMask);
   17912:	687b      	ldr	r3, [r7, #4]
   17914:	3330      	adds	r3, #48	; 0x30
   17916:	4618      	mov	r0, r3
   17918:	f7eb ff24 	bl	3764 <bb_clear>
            break;
   1791c:	e0b5      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
        case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
            va_clear(&((gxRegisterMonitor*)object)->thresholds);
   1791e:	687b      	ldr	r3, [r7, #4]
   17920:	332c      	adds	r3, #44	; 0x2c
   17922:	4618      	mov	r0, r3
   17924:	f00f fa0e 	bl	26d44 <va_clear>
            obj_clearRegisterMonitorActions(&((gxRegisterMonitor*)object)->actions);
   17928:	687b      	ldr	r3, [r7, #4]
   1792a:	3310      	adds	r3, #16
   1792c:	4618      	mov	r0, r3
   1792e:	f7ff fb71 	bl	17014 <obj_clearRegisterMonitorActions>
            break;
   17932:	e0aa      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_ZIG_BEE_SAS_APS_FRAGMENTATION
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
        case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
            obj_clearActiveDevices(&((gxZigBeeNetworkControl*)object)->activeDevices);
   17934:	687b      	ldr	r3, [r7, #4]
   17936:	3314      	adds	r3, #20
   17938:	4618      	mov	r0, r3
   1793a:	f7ff fcb5 	bl	172a8 <obj_clearActiveDevices>
            break;
   1793e:	e0a4      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
        case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
            obj_clearSapList(&((gxSapAssignment*)object)->sapAssignmentList);
   17940:	687b      	ldr	r3, [r7, #4]
   17942:	3310      	adds	r3, #16
   17944:	4618      	mov	r0, r3
   17946:	f7ff fa6b 	bl	16e20 <obj_clearSapList>
            break;
   1794a:	e09e      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
        case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
            obj_clearScriptTable(&((gxScriptTable*)object)->scripts);
   1794c:	687b      	ldr	r3, [r7, #4]
   1794e:	3310      	adds	r3, #16
   17950:	4618      	mov	r0, r3
   17952:	f7ff fb9b 	bl	1708c <obj_clearScriptTable>
            break;
   17956:	e098      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_SMTP_SETUP
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
        case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
            arr_clear(&((gxSpecialDaysTable*)object)->entries);
   17958:	687b      	ldr	r3, [r7, #4]
   1795a:	3310      	adds	r3, #16
   1795c:	4618      	mov	r0, r3
   1795e:	f7f4 fed7 	bl	c710 <arr_clear>
            break;
   17962:	e092      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_STATUS_MAPPING
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
        case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
            bb_clear(&((gxTcpUdpSetup*)object)->ipReference);
   17964:	687b      	ldr	r3, [r7, #4]
   17966:	3314      	adds	r3, #20
   17968:	4618      	mov	r0, r3
   1796a:	f7eb fefb 	bl	3764 <bb_clear>
            break;
   1796e:	e08c      	b.n	17a8a <obj_clear+0x662>
            //Do nothing.
            break;
#endif //DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
#ifndef DLMS_IGNORE_MESSAGE_HANDLER
        case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
            arr_clearKeyValuePair(&((gxMessageHandler*)object)->listeningWindow);
   17970:	687b      	ldr	r3, [r7, #4]
   17972:	3310      	adds	r3, #16
   17974:	4618      	mov	r0, r3
   17976:	f7f4 ff5f 	bl	c838 <arr_clearKeyValuePair>
            va_clear(&((gxMessageHandler*)object)->allowedSenders);
   1797a:	687b      	ldr	r3, [r7, #4]
   1797c:	3320      	adds	r3, #32
   1797e:	4618      	mov	r0, r3
   17980:	f00f f9e0 	bl	26d44 <va_clear>
            arr_clear(&((gxMessageHandler*)object)->sendersAndActions);
   17984:	687b      	ldr	r3, [r7, #4]
   17986:	332c      	adds	r3, #44	; 0x2c
   17988:	4618      	mov	r0, r3
   1798a:	f7f4 fec1 	bl	c710 <arr_clear>
            break;
   1798e:	e07c      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
        case DLMS_OBJECT_TYPE_PUSH_SETUP:
            obj_clearPushObjectList(&((gxPushSetup*)object)->pushObjectList);
   17990:	687b      	ldr	r3, [r7, #4]
   17992:	3310      	adds	r3, #16
   17994:	4618      	mov	r0, r3
   17996:	f7ff f9b7 	bl	16d08 <obj_clearPushObjectList>
            if (((gxPushSetup*)object)->destination != NULL)
   1799a:	687b      	ldr	r3, [r7, #4]
   1799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1799e:	2b00      	cmp	r3, #0
   179a0:	d007      	beq.n	179b2 <obj_clear+0x58a>
            {
                gxfree(((gxPushSetup*)object)->destination);
   179a2:	687b      	ldr	r3, [r7, #4]
   179a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   179a6:	4618      	mov	r0, r3
   179a8:	f012 f854 	bl	29a54 <free>
                ((gxPushSetup*)object)->destination = NULL;
   179ac:	687b      	ldr	r3, [r7, #4]
   179ae:	2200      	movs	r2, #0
   179b0:	625a      	str	r2, [r3, #36]	; 0x24
            }
            arr_clearKeyValuePair(&((gxPushSetup*)object)->communicationWindow);
   179b2:	687b      	ldr	r3, [r7, #4]
   179b4:	332c      	adds	r3, #44	; 0x2c
   179b6:	4618      	mov	r0, r3
   179b8:	f7f4 ff3e 	bl	c838 <arr_clearKeyValuePair>
            break;
   179bc:	e065      	b.n	17a8a <obj_clear+0x662>
#endif
            break;
#endif //DLMS_IGNORE_PUSH_SETUP
#ifndef DLMS_IGNORE_ACCOUNT
        case DLMS_OBJECT_TYPE_ACCOUNT:
            arr_clear(&((gxAccount*)object)->creditReferences);
   179be:	687b      	ldr	r3, [r7, #4]
   179c0:	3324      	adds	r3, #36	; 0x24
   179c2:	4618      	mov	r0, r3
   179c4:	f7f4 fea4 	bl	c710 <arr_clear>
            arr_clear(&((gxAccount*)object)->chargeReferences);
   179c8:	687b      	ldr	r3, [r7, #4]
   179ca:	3334      	adds	r3, #52	; 0x34
   179cc:	4618      	mov	r0, r3
   179ce:	f7f4 fe9f 	bl	c710 <arr_clear>
            arr_clear(&((gxAccount*)object)->creditChargeConfigurations);
   179d2:	687b      	ldr	r3, [r7, #4]
   179d4:	3344      	adds	r3, #68	; 0x44
   179d6:	4618      	mov	r0, r3
   179d8:	f7f4 fe9a 	bl	c710 <arr_clear>
            arr_clear(&((gxAccount*)object)->tokenGatewayConfigurations);
   179dc:	687b      	ldr	r3, [r7, #4]
   179de:	3354      	adds	r3, #84	; 0x54
   179e0:	4618      	mov	r0, r3
   179e2:	f7f4 fe95 	bl	c710 <arr_clear>
            gxfree(((gxAccount*)object)->currency.name);
   179e6:	687b      	ldr	r3, [r7, #4]
   179e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   179ec:	4618      	mov	r0, r3
   179ee:	f012 f831 	bl	29a54 <free>
            ((gxAccount*)object)->currency.name = NULL;
   179f2:	687b      	ldr	r3, [r7, #4]
   179f4:	2200      	movs	r2, #0
   179f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            break;
   179fa:	e046      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_CREDIT
        case DLMS_OBJECT_TYPE_CREDIT:
            ba_clear(&((gxCredit*)object)->creditConfiguration);
   179fc:	687b      	ldr	r3, [r7, #4]
   179fe:	3320      	adds	r3, #32
   17a00:	4618      	mov	r0, r3
   17a02:	f7eb f881 	bl	2b08 <ba_clear>
            break;
   17a06:	e040      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_CHARGE
        case DLMS_OBJECT_TYPE_CHARGE:
            ba_clear(&((gxCharge*)object)->chargeConfiguration);
   17a08:	687b      	ldr	r3, [r7, #4]
   17a0a:	3380      	adds	r3, #128	; 0x80
   17a0c:	4618      	mov	r0, r3
   17a0e:	f7eb f87b 	bl	2b08 <ba_clear>
            arr_clear(&((gxCharge*)object)->unitChargeActive.chargeTables);
   17a12:	687b      	ldr	r3, [r7, #4]
   17a14:	3320      	adds	r3, #32
   17a16:	4618      	mov	r0, r3
   17a18:	f7f4 fe7a 	bl	c710 <arr_clear>
            arr_clear(&((gxCharge*)object)->unitChargePassive.chargeTables);
   17a1c:	687b      	ldr	r3, [r7, #4]
   17a1e:	333c      	adds	r3, #60	; 0x3c
   17a20:	4618      	mov	r0, r3
   17a22:	f7f4 fe75 	bl	c710 <arr_clear>
            break;
   17a26:	e030      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
        case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
            bb_clear(&((gxTokenGateway*)object)->token);
   17a28:	687b      	ldr	r3, [r7, #4]
   17a2a:	3310      	adds	r3, #16
   17a2c:	4618      	mov	r0, r3
   17a2e:	f7eb fe99 	bl	3764 <bb_clear>
            arr_clear(&((gxTokenGateway*)object)->descriptions);
   17a32:	687b      	ldr	r3, [r7, #4]
   17a34:	334c      	adds	r3, #76	; 0x4c
   17a36:	4618      	mov	r0, r3
   17a38:	f7f4 fe6a 	bl	c710 <arr_clear>
            ba_clear(&((gxTokenGateway*)object)->dataValue);
   17a3c:	687b      	ldr	r3, [r7, #4]
   17a3e:	3360      	adds	r3, #96	; 0x60
   17a40:	4618      	mov	r0, r3
   17a42:	f7eb f861 	bl	2b08 <ba_clear>
            break;
   17a46:	e020      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
        case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
            gxfree(((gxGsmDiagnostic*)object)->operatorName);
   17a48:	687b      	ldr	r3, [r7, #4]
   17a4a:	691b      	ldr	r3, [r3, #16]
   17a4c:	4618      	mov	r0, r3
   17a4e:	f012 f801 	bl	29a54 <free>
            ((gxGsmDiagnostic*)object)->operatorName = NULL;
   17a52:	687b      	ldr	r3, [r7, #4]
   17a54:	2200      	movs	r2, #0
   17a56:	611a      	str	r2, [r3, #16]
            arr_clear(&((gxGsmDiagnostic*)object)->adjacentCells);
   17a58:	687b      	ldr	r3, [r7, #4]
   17a5a:	3328      	adds	r3, #40	; 0x28
   17a5c:	4618      	mov	r0, r3
   17a5e:	f7f4 fe57 	bl	c710 <arr_clear>
            break;
   17a62:	e012      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_COMPACT_DATA
        case DLMS_OBJECT_TYPE_COMPACT_DATA:
            bb_clear(&((gxCompactData*)object)->buffer);
   17a64:	687b      	ldr	r3, [r7, #4]
   17a66:	3310      	adds	r3, #16
   17a68:	4618      	mov	r0, r3
   17a6a:	f7eb fe7b 	bl	3764 <bb_clear>
            obj_clearProfileGenericCaptureObjects(&((gxCompactData*)object)->captureObjects);
   17a6e:	687b      	ldr	r3, [r7, #4]
   17a70:	331c      	adds	r3, #28
   17a72:	4618      	mov	r0, r3
   17a74:	f7ff fa00 	bl	16e78 <obj_clearProfileGenericCaptureObjects>
            bb_clear(&((gxCompactData*)object)->templateDescription);
   17a78:	687b      	ldr	r3, [r7, #4]
   17a7a:	3330      	adds	r3, #48	; 0x30
   17a7c:	4618      	mov	r0, r3
   17a7e:	f7eb fe71 	bl	3764 <bb_clear>
            break;
   17a82:	e002      	b.n	17a8a <obj_clear+0x662>
#endif //DLMS_ITALIAN_STANDARD
        default://Unknown type.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(0);
#endif
            break;
   17a84:	bf00      	nop
   17a86:	e000      	b.n	17a8a <obj_clear+0x662>
            obj_clearUserList(&((gxAssociationLogicalName*)object)->userList);
            if (((gxAssociationLogicalName*)object)->currentUser.value != NULL)
            {
                gxfree(((gxAssociationLogicalName*)object)->currentUser.value);
            }
            break;
   17a88:	bf00      	nop
    {
        //Remove warning.
    }
#endif

}
   17a8a:	bf00      	nop
   17a8c:	3710      	adds	r7, #16
   17a8e:	46bd      	mov	sp, r7
   17a90:	bd80      	pop	{r7, pc}
   17a92:	bf00      	nop

00017a94 <obj_attributeCount>:

unsigned char obj_attributeCount(gxObject* object)
{
   17a94:	b480      	push	{r7}
   17a96:	b083      	sub	sp, #12
   17a98:	af00      	add	r7, sp, #0
   17a9a:	6078      	str	r0, [r7, #4]
    switch (object->objectType)
   17a9c:	687b      	ldr	r3, [r7, #4]
   17a9e:	781b      	ldrb	r3, [r3, #0]
   17aa0:	3b01      	subs	r3, #1
   17aa2:	2b72      	cmp	r3, #114	; 0x72
   17aa4:	f200 8162 	bhi.w	17d6c <obj_attributeCount+0x2d8>
   17aa8:	a201      	add	r2, pc, #4	; (adr r2, 17ab0 <obj_attributeCount+0x1c>)
   17aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17aae:	bf00      	nop
   17ab0:	00017c7d 	.word	0x00017c7d
   17ab4:	00017d6d 	.word	0x00017d6d
   17ab8:	00017c81 	.word	0x00017c81
   17abc:	00017cc1 	.word	0x00017cc1
   17ac0:	00017cb9 	.word	0x00017cb9
   17ac4:	00017d09 	.word	0x00017d09
   17ac8:	00017d05 	.word	0x00017d05
   17acc:	00017cb5 	.word	0x00017cb5
   17ad0:	00017d2d 	.word	0x00017d2d
   17ad4:	00017d29 	.word	0x00017d29
   17ad8:	00017d35 	.word	0x00017d35
   17adc:	00017ca9 	.word	0x00017ca9
   17ae0:	00017d6d 	.word	0x00017d6d
   17ae4:	00017d6d 	.word	0x00017d6d
   17ae8:	00017c8d 	.word	0x00017c8d
   17aec:	00017d6d 	.word	0x00017d6d
   17af0:	00017d25 	.word	0x00017d25
   17af4:	00017ced 	.word	0x00017ced
   17af8:	00017cdd 	.word	0x00017cdd
   17afc:	00017c89 	.word	0x00017c89
   17b00:	00017d0d 	.word	0x00017d0d
   17b04:	00017c85 	.word	0x00017c85
   17b08:	00017cd9 	.word	0x00017cd9
   17b0c:	00017ce1 	.word	0x00017ce1
   17b10:	00017ce9 	.word	0x00017ce9
   17b14:	00017d41 	.word	0x00017d41
   17b18:	00017cfd 	.word	0x00017cfd
   17b1c:	00017cad 	.word	0x00017cad
   17b20:	00017cb1 	.word	0x00017cb1
   17b24:	00017d51 	.word	0x00017d51
   17b28:	00017d6d 	.word	0x00017d6d
   17b2c:	00017d6d 	.word	0x00017d6d
   17b30:	00017d6d 	.word	0x00017d6d
   17b34:	00017d6d 	.word	0x00017d6d
   17b38:	00017d6d 	.word	0x00017d6d
   17b3c:	00017d6d 	.word	0x00017d6d
   17b40:	00017d6d 	.word	0x00017d6d
   17b44:	00017d6d 	.word	0x00017d6d
   17b48:	00017d6d 	.word	0x00017d6d
   17b4c:	00017d4d 	.word	0x00017d4d
   17b50:	00017d3d 	.word	0x00017d3d
   17b54:	00017ce5 	.word	0x00017ce5
   17b58:	00017cbd 	.word	0x00017cbd
   17b5c:	00017d01 	.word	0x00017d01
   17b60:	00017cc5 	.word	0x00017cc5
   17b64:	00017d31 	.word	0x00017d31
   17b68:	00017d69 	.word	0x00017d69
   17b6c:	00017d6d 	.word	0x00017d6d
   17b70:	00017d6d 	.word	0x00017d6d
   17b74:	00017d6d 	.word	0x00017d6d
   17b78:	00017d6d 	.word	0x00017d6d
   17b7c:	00017d6d 	.word	0x00017d6d
   17b80:	00017d6d 	.word	0x00017d6d
   17b84:	00017d6d 	.word	0x00017d6d
   17b88:	00017d6d 	.word	0x00017d6d
   17b8c:	00017d6d 	.word	0x00017d6d
   17b90:	00017d6d 	.word	0x00017d6d
   17b94:	00017d6d 	.word	0x00017d6d
   17b98:	00017d6d 	.word	0x00017d6d
   17b9c:	00017d49 	.word	0x00017d49
   17ba0:	00017d11 	.word	0x00017d11
   17ba4:	00017d65 	.word	0x00017d65
   17ba8:	00017d39 	.word	0x00017d39
   17bac:	00017cc9 	.word	0x00017cc9
   17bb0:	00017d6d 	.word	0x00017d6d
   17bb4:	00017d6d 	.word	0x00017d6d
   17bb8:	00017d6d 	.word	0x00017d6d
   17bbc:	00017d6d 	.word	0x00017d6d
   17bc0:	00017d6d 	.word	0x00017d6d
   17bc4:	00017cf1 	.word	0x00017cf1
   17bc8:	00017cf5 	.word	0x00017cf5
   17bcc:	00017cf9 	.word	0x00017cf9
   17bd0:	00017d6d 	.word	0x00017d6d
   17bd4:	00017d45 	.word	0x00017d45
   17bd8:	00017d6d 	.word	0x00017d6d
   17bdc:	00017d6d 	.word	0x00017d6d
   17be0:	00017d6d 	.word	0x00017d6d
   17be4:	00017d6d 	.word	0x00017d6d
   17be8:	00017d6d 	.word	0x00017d6d
   17bec:	00017d6d 	.word	0x00017d6d
   17bf0:	00017d6d 	.word	0x00017d6d
   17bf4:	00017d6d 	.word	0x00017d6d
   17bf8:	00017d6d 	.word	0x00017d6d
   17bfc:	00017d6d 	.word	0x00017d6d
   17c00:	00017d6d 	.word	0x00017d6d
   17c04:	00017d6d 	.word	0x00017d6d
   17c08:	00017d6d 	.word	0x00017d6d
   17c0c:	00017d6d 	.word	0x00017d6d
   17c10:	00017d6d 	.word	0x00017d6d
   17c14:	00017d6d 	.word	0x00017d6d
   17c18:	00017d6d 	.word	0x00017d6d
   17c1c:	00017d6d 	.word	0x00017d6d
   17c20:	00017d6d 	.word	0x00017d6d
   17c24:	00017d6d 	.word	0x00017d6d
   17c28:	00017d6d 	.word	0x00017d6d
   17c2c:	00017d6d 	.word	0x00017d6d
   17c30:	00017d6d 	.word	0x00017d6d
   17c34:	00017d6d 	.word	0x00017d6d
   17c38:	00017d6d 	.word	0x00017d6d
   17c3c:	00017d6d 	.word	0x00017d6d
   17c40:	00017d15 	.word	0x00017d15
   17c44:	00017d19 	.word	0x00017d19
   17c48:	00017d1d 	.word	0x00017d1d
   17c4c:	00017d21 	.word	0x00017d21
   17c50:	00017d6d 	.word	0x00017d6d
   17c54:	00017d6d 	.word	0x00017d6d
   17c58:	00017d6d 	.word	0x00017d6d
   17c5c:	00017d6d 	.word	0x00017d6d
   17c60:	00017d6d 	.word	0x00017d6d
   17c64:	00017d6d 	.word	0x00017d6d
   17c68:	00017d55 	.word	0x00017d55
   17c6c:	00017d59 	.word	0x00017d59
   17c70:	00017d5d 	.word	0x00017d5d
   17c74:	00017d6d 	.word	0x00017d6d
   17c78:	00017d61 	.word	0x00017d61
    {
    case DLMS_OBJECT_TYPE_DATA:
    {
        return 2;
   17c7c:	2302      	movs	r3, #2
   17c7e:	e077      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_REGISTER:
    {
        return 3;
   17c80:	2303      	movs	r3, #3
   17c82:	e075      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
    {
        return 4;
   17c84:	2304      	movs	r3, #4
   17c86:	e073      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
    {
        return 10;
   17c88:	230a      	movs	r3, #10
   17c8a:	e071      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        //user_list and current_user are in version 2.
        if (object->version > 1)
   17c8c:	687b      	ldr	r3, [r7, #4]
   17c8e:	785b      	ldrb	r3, [r3, #1]
   17c90:	2b01      	cmp	r3, #1
   17c92:	d901      	bls.n	17c98 <obj_attributeCount+0x204>
            return 11;
   17c94:	230b      	movs	r3, #11
   17c96:	e06b      	b.n	17d70 <obj_attributeCount+0x2dc>
        //Security Setup Reference is from version 1.
        if (object->version > 0)
   17c98:	687b      	ldr	r3, [r7, #4]
   17c9a:	785b      	ldrb	r3, [r3, #1]
   17c9c:	2b00      	cmp	r3, #0
   17c9e:	d001      	beq.n	17ca4 <obj_attributeCount+0x210>
            return 9;
   17ca0:	2309      	movs	r3, #9
   17ca2:	e065      	b.n	17d70 <obj_attributeCount+0x2dc>
        return 8;
   17ca4:	2308      	movs	r3, #8
   17ca6:	e063      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
    {
        return 4;
   17ca8:	2304      	movs	r3, #4
   17caa:	e061      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
    {
        return 6;
   17cac:	2306      	movs	r3, #6
   17cae:	e05f      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
    {
        return 6;
   17cb0:	2306      	movs	r3, #6
   17cb2:	e05d      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_CLOCK:
    {
        return 9;
   17cb4:	2309      	movs	r3, #9
   17cb6:	e05b      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
    {
        return 9;
   17cb8:	2309      	movs	r3, #9
   17cba:	e059      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
    {
        return 2;
   17cbc:	2302      	movs	r3, #2
   17cbe:	e057      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
    {
        return 5;
   17cc0:	2305      	movs	r3, #5
   17cc2:	e055      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
    {
        return 4;
   17cc4:	2304      	movs	r3, #4
   17cc6:	e053      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
    {
        if (object->version == 0)
   17cc8:	687b      	ldr	r3, [r7, #4]
   17cca:	785b      	ldrb	r3, [r3, #1]
   17ccc:	2b00      	cmp	r3, #0
   17cce:	d101      	bne.n	17cd4 <obj_attributeCount+0x240>
        {
            return 3;
   17cd0:	2303      	movs	r3, #3
   17cd2:	e04d      	b.n	17d70 <obj_attributeCount+0x2dc>
        }
        return 6;
   17cd4:	2306      	movs	r3, #6
   17cd6:	e04b      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
    {
        return 9;
   17cd8:	2309      	movs	r3, #9
   17cda:	e049      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
    {
        return 9;
   17cdc:	2309      	movs	r3, #9
   17cde:	e047      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
    {
        return 1;
   17ce0:	2301      	movs	r3, #1
   17ce2:	e045      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_IP4_SETUP:
    {
        return 10;
   17ce4:	230a      	movs	r3, #10
   17ce6:	e043      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
    {
        return 5;
   17ce8:	2305      	movs	r3, #5
   17cea:	e041      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
    {
        return 7;
   17cec:	2307      	movs	r3, #7
   17cee:	e03f      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
    {
        return 4;
   17cf0:	2304      	movs	r3, #4
   17cf2:	e03d      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_LIMITER:
    {
        return 11;
   17cf4:	230b      	movs	r3, #11
   17cf6:	e03b      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
    {
        return 12;
   17cf8:	230c      	movs	r3, #12
   17cfa:	e039      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
    {
        return 4;
   17cfc:	2304      	movs	r3, #4
   17cfe:	e037      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_PPP_SETUP:
    {
        return 5;
   17d00:	2305      	movs	r3, #5
   17d02:	e035      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
    {
        return 8;
   17d04:	2308      	movs	r3, #8
   17d06:	e033      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
    {
        return 4;
   17d08:	2304      	movs	r3, #4
   17d0a:	e031      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
    {
        return 4;
   17d0c:	2304      	movs	r3, #4
   17d0e:	e02f      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
    {
        return 1;
   17d10:	2301      	movs	r3, #1
   17d12:	e02d      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_STARTUP:
    {
        return 12;
   17d14:	230c      	movs	r3, #12
   17d16:	e02b      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_JOIN:
    {
        return 5;
   17d18:	2305      	movs	r3, #5
   17d1a:	e029      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_APS_FRAGMENTATION:
    {
        return 3;
   17d1c:	2303      	movs	r3, #3
   17d1e:	e027      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
    {
        return 4;
   17d20:	2304      	movs	r3, #4
   17d22:	e025      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
    {
        return 2;
   17d24:	2302      	movs	r3, #2
   17d26:	e023      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SCHEDULE:
    {
        return 2;
   17d28:	2302      	movs	r3, #2
   17d2a:	e021      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
    {
        return 2;
   17d2c:	2302      	movs	r3, #2
   17d2e:	e01f      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SMTP_SETUP:
    {
        return 1;
   17d30:	2301      	movs	r3, #1
   17d32:	e01d      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
    {
        return 2;
   17d34:	2302      	movs	r3, #2
   17d36:	e01b      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
    {
        return 1;
   17d38:	2301      	movs	r3, #1
   17d3a:	e019      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
    {
        return 6;
   17d3c:	2306      	movs	r3, #6
   17d3e:	e017      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_UTILITY_TABLES:
    {
        return 1;
   17d40:	2301      	movs	r3, #1
   17d42:	e015      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
    {
        return 2;
   17d44:	2302      	movs	r3, #2
   17d46:	e013      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
    {
        return 4;
   17d48:	2304      	movs	r3, #4
   17d4a:	e011      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
    {
        return 7;
   17d4c:	2307      	movs	r3, #7
   17d4e:	e00f      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
    {
        return 6;
   17d50:	2306      	movs	r3, #6
   17d52:	e00d      	b.n	17d70 <obj_attributeCount+0x2dc>
    }
    case DLMS_OBJECT_TYPE_ACCOUNT:
        return 19;
   17d54:	2313      	movs	r3, #19
   17d56:	e00b      	b.n	17d70 <obj_attributeCount+0x2dc>
    case DLMS_OBJECT_TYPE_CREDIT:
        return 11;
   17d58:	230b      	movs	r3, #11
   17d5a:	e009      	b.n	17d70 <obj_attributeCount+0x2dc>
    case DLMS_OBJECT_TYPE_CHARGE:
        return 13;
   17d5c:	230d      	movs	r3, #13
   17d5e:	e007      	b.n	17d70 <obj_attributeCount+0x2dc>
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        return 6;
   17d60:	2306      	movs	r3, #6
   17d62:	e005      	b.n	17d70 <obj_attributeCount+0x2dc>
    case DLMS_OBJECT_TYPE_COMPACT_DATA:
        return 6;
   17d64:	2306      	movs	r3, #6
   17d66:	e003      	b.n	17d70 <obj_attributeCount+0x2dc>
#ifdef DLMS_ITALIAN_STANDARD
    case DLMS_OBJECT_TYPE_TARIFF_PLAN:
        return 5;
#endif //DLMS_ITALIAN_STANDARD
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        return 8;
   17d68:	2308      	movs	r3, #8
   17d6a:	e001      	b.n	17d70 <obj_attributeCount+0x2dc>
    default:
        //Unknown type.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        break;
   17d6c:	bf00      	nop
    }
    return 1;
   17d6e:	2301      	movs	r3, #1
}
   17d70:	4618      	mov	r0, r3
   17d72:	370c      	adds	r7, #12
   17d74:	46bd      	mov	sp, r7
   17d76:	bc80      	pop	{r7}
   17d78:	4770      	bx	lr
   17d7a:	bf00      	nop

00017d7c <obj_methodCount>:
    return 0;
}


unsigned char obj_methodCount(gxObject* object)
{
   17d7c:	b480      	push	{r7}
   17d7e:	b083      	sub	sp, #12
   17d80:	af00      	add	r7, sp, #0
   17d82:	6078      	str	r0, [r7, #4]
    switch (object->objectType)
   17d84:	687b      	ldr	r3, [r7, #4]
   17d86:	781b      	ldrb	r3, [r3, #0]
   17d88:	3b01      	subs	r3, #1
   17d8a:	2b72      	cmp	r3, #114	; 0x72
   17d8c:	f200 8156 	bhi.w	1803c <obj_methodCount+0x2c0>
   17d90:	a201      	add	r2, pc, #4	; (adr r2, 17d98 <obj_methodCount+0x1c>)
   17d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d96:	bf00      	nop
   17d98:	00017f65 	.word	0x00017f65
   17d9c:	0001803d 	.word	0x0001803d
   17da0:	00017f69 	.word	0x00017f69
   17da4:	00017f9d 	.word	0x00017f9d
   17da8:	00017f95 	.word	0x00017f95
   17dac:	00017fd9 	.word	0x00017fd9
   17db0:	00017fd5 	.word	0x00017fd5
   17db4:	00017f91 	.word	0x00017f91
   17db8:	00017ff9 	.word	0x00017ff9
   17dbc:	00017ff5 	.word	0x00017ff5
   17dc0:	00018001 	.word	0x00018001
   17dc4:	00017f85 	.word	0x00017f85
   17dc8:	0001803d 	.word	0x0001803d
   17dcc:	0001803d 	.word	0x0001803d
   17dd0:	00017f75 	.word	0x00017f75
   17dd4:	0001803d 	.word	0x0001803d
   17dd8:	00017ff1 	.word	0x00017ff1
   17ddc:	00017fbd 	.word	0x00017fbd
   17de0:	00017fad 	.word	0x00017fad
   17de4:	00017f71 	.word	0x00017f71
   17de8:	00017fdd 	.word	0x00017fdd
   17dec:	00017f6d 	.word	0x00017f6d
   17df0:	00017fa9 	.word	0x00017fa9
   17df4:	00017fb1 	.word	0x00017fb1
   17df8:	00017fb9 	.word	0x00017fb9
   17dfc:	0001800d 	.word	0x0001800d
   17e00:	00017fcd 	.word	0x00017fcd
   17e04:	00017f89 	.word	0x00017f89
   17e08:	00017f8d 	.word	0x00017f8d
   17e0c:	0001801d 	.word	0x0001801d
   17e10:	0001803d 	.word	0x0001803d
   17e14:	0001803d 	.word	0x0001803d
   17e18:	0001803d 	.word	0x0001803d
   17e1c:	0001803d 	.word	0x0001803d
   17e20:	0001803d 	.word	0x0001803d
   17e24:	0001803d 	.word	0x0001803d
   17e28:	0001803d 	.word	0x0001803d
   17e2c:	0001803d 	.word	0x0001803d
   17e30:	0001803d 	.word	0x0001803d
   17e34:	00018019 	.word	0x00018019
   17e38:	00018009 	.word	0x00018009
   17e3c:	00017fb5 	.word	0x00017fb5
   17e40:	00017f99 	.word	0x00017f99
   17e44:	00017fd1 	.word	0x00017fd1
   17e48:	00017fa1 	.word	0x00017fa1
   17e4c:	00017ffd 	.word	0x00017ffd
   17e50:	00018035 	.word	0x00018035
   17e54:	0001803d 	.word	0x0001803d
   17e58:	0001803d 	.word	0x0001803d
   17e5c:	0001803d 	.word	0x0001803d
   17e60:	0001803d 	.word	0x0001803d
   17e64:	0001803d 	.word	0x0001803d
   17e68:	0001803d 	.word	0x0001803d
   17e6c:	0001803d 	.word	0x0001803d
   17e70:	0001803d 	.word	0x0001803d
   17e74:	0001803d 	.word	0x0001803d
   17e78:	0001803d 	.word	0x0001803d
   17e7c:	0001803d 	.word	0x0001803d
   17e80:	0001803d 	.word	0x0001803d
   17e84:	00018015 	.word	0x00018015
   17e88:	00017fe1 	.word	0x00017fe1
   17e8c:	00018039 	.word	0x00018039
   17e90:	00018005 	.word	0x00018005
   17e94:	00017fa5 	.word	0x00017fa5
   17e98:	0001803d 	.word	0x0001803d
   17e9c:	0001803d 	.word	0x0001803d
   17ea0:	0001803d 	.word	0x0001803d
   17ea4:	0001803d 	.word	0x0001803d
   17ea8:	0001803d 	.word	0x0001803d
   17eac:	00017fc1 	.word	0x00017fc1
   17eb0:	00017fc5 	.word	0x00017fc5
   17eb4:	00017fc9 	.word	0x00017fc9
   17eb8:	0001803d 	.word	0x0001803d
   17ebc:	00018011 	.word	0x00018011
   17ec0:	0001803d 	.word	0x0001803d
   17ec4:	0001803d 	.word	0x0001803d
   17ec8:	0001803d 	.word	0x0001803d
   17ecc:	0001803d 	.word	0x0001803d
   17ed0:	0001803d 	.word	0x0001803d
   17ed4:	0001803d 	.word	0x0001803d
   17ed8:	0001803d 	.word	0x0001803d
   17edc:	0001803d 	.word	0x0001803d
   17ee0:	0001803d 	.word	0x0001803d
   17ee4:	0001803d 	.word	0x0001803d
   17ee8:	0001803d 	.word	0x0001803d
   17eec:	0001803d 	.word	0x0001803d
   17ef0:	0001803d 	.word	0x0001803d
   17ef4:	0001803d 	.word	0x0001803d
   17ef8:	0001803d 	.word	0x0001803d
   17efc:	0001803d 	.word	0x0001803d
   17f00:	0001803d 	.word	0x0001803d
   17f04:	0001803d 	.word	0x0001803d
   17f08:	0001803d 	.word	0x0001803d
   17f0c:	0001803d 	.word	0x0001803d
   17f10:	0001803d 	.word	0x0001803d
   17f14:	0001803d 	.word	0x0001803d
   17f18:	0001803d 	.word	0x0001803d
   17f1c:	0001803d 	.word	0x0001803d
   17f20:	0001803d 	.word	0x0001803d
   17f24:	0001803d 	.word	0x0001803d
   17f28:	00017fe5 	.word	0x00017fe5
   17f2c:	00017fe9 	.word	0x00017fe9
   17f30:	00017fed 	.word	0x00017fed
   17f34:	00018031 	.word	0x00018031
   17f38:	0001803d 	.word	0x0001803d
   17f3c:	0001803d 	.word	0x0001803d
   17f40:	0001803d 	.word	0x0001803d
   17f44:	0001803d 	.word	0x0001803d
   17f48:	0001803d 	.word	0x0001803d
   17f4c:	0001803d 	.word	0x0001803d
   17f50:	00018021 	.word	0x00018021
   17f54:	00018025 	.word	0x00018025
   17f58:	00018029 	.word	0x00018029
   17f5c:	0001803d 	.word	0x0001803d
   17f60:	0001802d 	.word	0x0001802d
    {
    case DLMS_OBJECT_TYPE_DATA:
    {
        return 0;
   17f64:	2300      	movs	r3, #0
   17f66:	e06a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_REGISTER:
    {
        return 1;
   17f68:	2301      	movs	r3, #1
   17f6a:	e068      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
    {
        return 0;
   17f6c:	2300      	movs	r3, #0
   17f6e:	e066      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
    {
        return 1;
   17f70:	2301      	movs	r3, #1
   17f72:	e064      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        if (object->version > 1)
   17f74:	687b      	ldr	r3, [r7, #4]
   17f76:	785b      	ldrb	r3, [r3, #1]
   17f78:	2b01      	cmp	r3, #1
   17f7a:	d901      	bls.n	17f80 <obj_methodCount+0x204>
        {
            return 6;
   17f7c:	2306      	movs	r3, #6
   17f7e:	e05e      	b.n	1803e <obj_methodCount+0x2c2>
        }
        return 4;
   17f80:	2304      	movs	r3, #4
   17f82:	e05c      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
    {
        return 8;
   17f84:	2308      	movs	r3, #8
   17f86:	e05a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
    {
        return 0;
   17f88:	2300      	movs	r3, #0
   17f8a:	e058      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
    {
        return 1;
   17f8c:	2301      	movs	r3, #1
   17f8e:	e056      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_CLOCK:
    {
        return 6;
   17f90:	2306      	movs	r3, #6
   17f92:	e054      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
    {
        return 2;
   17f94:	2302      	movs	r3, #2
   17f96:	e052      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
    {
        return 0;
   17f98:	2300      	movs	r3, #0
   17f9a:	e050      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
    {
        return 1;
   17f9c:	2301      	movs	r3, #1
   17f9e:	e04e      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
    {
        return 0;
   17fa0:	2300      	movs	r3, #0
   17fa2:	e04c      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
    {
        return 2;
   17fa4:	2302      	movs	r3, #2
   17fa6:	e04a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
    {
        return 0;
   17fa8:	2300      	movs	r3, #0
   17faa:	e048      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
    {
        return 0;
   17fac:	2300      	movs	r3, #0
   17fae:	e046      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
    {
        return 1;
   17fb0:	2301      	movs	r3, #1
   17fb2:	e044      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_IP4_SETUP:
    {
        return 3;
   17fb4:	2303      	movs	r3, #3
   17fb6:	e042      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
    {
        return 0;
   17fb8:	2300      	movs	r3, #0
   17fba:	e040      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
    {
        return 4;
   17fbc:	2304      	movs	r3, #4
   17fbe:	e03e      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
    {
        return 2;
   17fc0:	2302      	movs	r3, #2
   17fc2:	e03c      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_LIMITER:
    {
        return 0;
   17fc4:	2300      	movs	r3, #0
   17fc6:	e03a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
    {
        return 8;
   17fc8:	2308      	movs	r3, #8
   17fca:	e038      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
    {
        return 0;
   17fcc:	2300      	movs	r3, #0
   17fce:	e036      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_PPP_SETUP:
    {
        return 0;
   17fd0:	2300      	movs	r3, #0
   17fd2:	e034      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
    {
        return 2;
   17fd4:	2302      	movs	r3, #2
   17fd6:	e032      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
    {
        return 3;
   17fd8:	2303      	movs	r3, #3
   17fda:	e030      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
    {
        return 0;
   17fdc:	2300      	movs	r3, #0
   17fde:	e02e      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
    {
        return 1;
   17fe0:	2301      	movs	r3, #1
   17fe2:	e02c      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_STARTUP:
    {
        return 0;
   17fe4:	2300      	movs	r3, #0
   17fe6:	e02a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_JOIN:
    {
        return 0;
   17fe8:	2300      	movs	r3, #0
   17fea:	e028      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ZIG_BEE_SAS_APS_FRAGMENTATION:
    {
        return 0;
   17fec:	2300      	movs	r3, #0
   17fee:	e026      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
    {
        return 1;
   17ff0:	2301      	movs	r3, #1
   17ff2:	e024      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SCHEDULE:
    {
        return 3;
   17ff4:	2303      	movs	r3, #3
   17ff6:	e022      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
    {
        return 1;
   17ff8:	2301      	movs	r3, #1
   17ffa:	e020      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SMTP_SETUP:
    {
        return 1;
   17ffc:	2301      	movs	r3, #1
   17ffe:	e01e      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
    {
        return 2;
   18000:	2302      	movs	r3, #2
   18002:	e01c      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
    {
        return 1;
   18004:	2301      	movs	r3, #1
   18006:	e01a      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
    {
        return 0;
   18008:	2300      	movs	r3, #0
   1800a:	e018      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_UTILITY_TABLES:
    {
        return 1;
   1800c:	2301      	movs	r3, #1
   1800e:	e016      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
    {
        return 0;
   18010:	2300      	movs	r3, #0
   18012:	e014      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
    {
        return 0;
   18014:	2300      	movs	r3, #0
   18016:	e012      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
    {
        return 1;
   18018:	2301      	movs	r3, #1
   1801a:	e010      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
    {
        return 3;
   1801c:	2303      	movs	r3, #3
   1801e:	e00e      	b.n	1803e <obj_methodCount+0x2c2>
    }
    case DLMS_OBJECT_TYPE_ACCOUNT:
        return 3;
   18020:	2303      	movs	r3, #3
   18022:	e00c      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_CREDIT:
        return 3;
   18024:	2303      	movs	r3, #3
   18026:	e00a      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_CHARGE:
        return 5;
   18028:	2305      	movs	r3, #5
   1802a:	e008      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        return 1;
   1802c:	2301      	movs	r3, #1
   1802e:	e006      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        return 11;
   18030:	230b      	movs	r3, #11
   18032:	e004      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        return 0;
   18034:	2300      	movs	r3, #0
   18036:	e002      	b.n	1803e <obj_methodCount+0x2c2>
    case DLMS_OBJECT_TYPE_COMPACT_DATA:
        return 2;
   18038:	2302      	movs	r3, #2
   1803a:	e000      	b.n	1803e <obj_methodCount+0x2c2>
    default:
        //Unknown type.
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        return 1;
   1803c:	2301      	movs	r3, #1
    }
}
   1803e:	4618      	mov	r0, r3
   18040:	370c      	adds	r7, #12
   18042:	46bd      	mov	sp, r7
   18044:	bc80      	pop	{r7}
   18046:	4770      	bx	lr

00018048 <obj_updateAttributeAccessModes>:

int obj_updateAttributeAccessModes(gxObject* object, variantArray *arr)
{
   18048:	b590      	push	{r4, r7, lr}
   1804a:	b089      	sub	sp, #36	; 0x24
   1804c:	af00      	add	r7, sp, #0
   1804e:	6078      	str	r0, [r7, #4]
   18050:	6039      	str	r1, [r7, #0]
    unsigned char id;
    int ret;
    unsigned short pos, cnt;
    dlmsVARIANT* tmp, *it, *value;
    //If accessmodes are not returned. Some meters do not return them.
    if (arr->size != 2)
   18052:	683b      	ldr	r3, [r7, #0]
   18054:	88db      	ldrh	r3, [r3, #6]
   18056:	2b02      	cmp	r3, #2
   18058:	d001      	beq.n	1805e <obj_updateAttributeAccessModes+0x16>
    {
        return 0;
   1805a:	2300      	movs	r3, #0
   1805c:	e10b      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
    }
    ret = va_get(arr, &tmp);
   1805e:	f107 0310 	add.w	r3, r7, #16
   18062:	4619      	mov	r1, r3
   18064:	6838      	ldr	r0, [r7, #0]
   18066:	f00e fedb 	bl	26e20 <va_get>
   1806a:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1806c:	69fb      	ldr	r3, [r7, #28]
   1806e:	2b00      	cmp	r3, #0
   18070:	d001      	beq.n	18076 <obj_updateAttributeAccessModes+0x2e>
    {
        return ret;
   18072:	69fb      	ldr	r3, [r7, #28]
   18074:	e0ff      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
    }
    //If access modes are not retreaved yet.
    if (object->access == NULL || object->access->attributeAccessModes.size == 0)
   18076:	687b      	ldr	r3, [r7, #4]
   18078:	68db      	ldr	r3, [r3, #12]
   1807a:	2b00      	cmp	r3, #0
   1807c:	d004      	beq.n	18088 <obj_updateAttributeAccessModes+0x40>
   1807e:	687b      	ldr	r3, [r7, #4]
   18080:	68db      	ldr	r3, [r3, #12]
   18082:	88db      	ldrh	r3, [r3, #6]
   18084:	2b00      	cmp	r3, #0
   18086:	d131      	bne.n	180ec <obj_updateAttributeAccessModes+0xa4>
    {
        if (object->access == NULL)
   18088:	687b      	ldr	r3, [r7, #4]
   1808a:	68db      	ldr	r3, [r3, #12]
   1808c:	2b00      	cmp	r3, #0
   1808e:	d107      	bne.n	180a0 <obj_updateAttributeAccessModes+0x58>
        {
            object->access = (gxAccess*)gxcalloc(1, sizeof(gxAccess));
   18090:	2118      	movs	r1, #24
   18092:	2001      	movs	r0, #1
   18094:	f011 fbb0 	bl	297f8 <calloc>
   18098:	4603      	mov	r3, r0
   1809a:	461a      	mov	r2, r3
   1809c:	687b      	ldr	r3, [r7, #4]
   1809e:	60da      	str	r2, [r3, #12]
        }
        cnt = obj_attributeCount(object);
   180a0:	6878      	ldr	r0, [r7, #4]
   180a2:	f7ff fcf7 	bl	17a94 <obj_attributeCount>
   180a6:	4603      	mov	r3, r0
   180a8:	833b      	strh	r3, [r7, #24]
        bb_capacity(&object->access->attributeAccessModes, cnt);
   180aa:	687b      	ldr	r3, [r7, #4]
   180ac:	68db      	ldr	r3, [r3, #12]
   180ae:	461a      	mov	r2, r3
   180b0:	8b3b      	ldrh	r3, [r7, #24]
   180b2:	4619      	mov	r1, r3
   180b4:	4610      	mov	r0, r2
   180b6:	f7ea fe2d 	bl	2d14 <bb_capacity>
        object->access->attributeAccessModes.size = object->access->attributeAccessModes.capacity;
   180ba:	687b      	ldr	r3, [r7, #4]
   180bc:	68db      	ldr	r3, [r3, #12]
   180be:	687a      	ldr	r2, [r7, #4]
   180c0:	68d2      	ldr	r2, [r2, #12]
   180c2:	8892      	ldrh	r2, [r2, #4]
   180c4:	80da      	strh	r2, [r3, #6]

        cnt = obj_methodCount(object);
   180c6:	6878      	ldr	r0, [r7, #4]
   180c8:	f7ff fe58 	bl	17d7c <obj_methodCount>
   180cc:	4603      	mov	r3, r0
   180ce:	833b      	strh	r3, [r7, #24]
        bb_capacity(&object->access->methodAccessModes, cnt);
   180d0:	687b      	ldr	r3, [r7, #4]
   180d2:	68db      	ldr	r3, [r3, #12]
   180d4:	330c      	adds	r3, #12
   180d6:	8b3a      	ldrh	r2, [r7, #24]
   180d8:	4611      	mov	r1, r2
   180da:	4618      	mov	r0, r3
   180dc:	f7ea fe1a 	bl	2d14 <bb_capacity>
        object->access->methodAccessModes.size = object->access->methodAccessModes.capacity;
   180e0:	687b      	ldr	r3, [r7, #4]
   180e2:	68db      	ldr	r3, [r3, #12]
   180e4:	687a      	ldr	r2, [r7, #4]
   180e6:	68d2      	ldr	r2, [r2, #12]
   180e8:	8a12      	ldrh	r2, [r2, #16]
   180ea:	825a      	strh	r2, [r3, #18]
    }
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   180ec:	2300      	movs	r3, #0
   180ee:	837b      	strh	r3, [r7, #26]
   180f0:	e052      	b.n	18198 <obj_updateAttributeAccessModes+0x150>
    {
        ret = va_getByIndex(tmp->Arr, pos, &it);
   180f2:	693b      	ldr	r3, [r7, #16]
   180f4:	689b      	ldr	r3, [r3, #8]
   180f6:	8b79      	ldrh	r1, [r7, #26]
   180f8:	f107 020c 	add.w	r2, r7, #12
   180fc:	4618      	mov	r0, r3
   180fe:	f00e feb5 	bl	26e6c <va_getByIndex>
   18102:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   18104:	69fb      	ldr	r3, [r7, #28]
   18106:	2b00      	cmp	r3, #0
   18108:	d001      	beq.n	1810e <obj_updateAttributeAccessModes+0xc6>
        {
            return ret;
   1810a:	69fb      	ldr	r3, [r7, #28]
   1810c:	e0b3      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   1810e:	68fb      	ldr	r3, [r7, #12]
   18110:	781b      	ldrb	r3, [r3, #0]
   18112:	2b02      	cmp	r3, #2
   18114:	d104      	bne.n	18120 <obj_updateAttributeAccessModes+0xd8>
            it->Arr->size != 3)
   18116:	68fb      	ldr	r3, [r7, #12]
   18118:	689b      	ldr	r3, [r3, #8]
   1811a:	88db      	ldrh	r3, [r3, #6]
        ret = va_getByIndex(tmp->Arr, pos, &it);
        if (ret != 0)
        {
            return ret;
        }
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   1811c:	2b03      	cmp	r3, #3
   1811e:	d002      	beq.n	18126 <obj_updateAttributeAccessModes+0xde>
            it->Arr->size != 3)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18120:	f44f 7381 	mov.w	r3, #258	; 0x102
   18124:	e0a7      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }

        //Get ID.
        ret = va_get(it->Arr, &value);
   18126:	68fb      	ldr	r3, [r7, #12]
   18128:	689b      	ldr	r3, [r3, #8]
   1812a:	f107 0208 	add.w	r2, r7, #8
   1812e:	4611      	mov	r1, r2
   18130:	4618      	mov	r0, r3
   18132:	f00e fe75 	bl	26e20 <va_get>
   18136:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   18138:	69fb      	ldr	r3, [r7, #28]
   1813a:	2b00      	cmp	r3, #0
   1813c:	d001      	beq.n	18142 <obj_updateAttributeAccessModes+0xfa>
        {
            return ret;
   1813e:	69fb      	ldr	r3, [r7, #28]
   18140:	e099      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }

        id = (unsigned char)var_toInteger(value);
   18142:	68bb      	ldr	r3, [r7, #8]
   18144:	4618      	mov	r0, r3
   18146:	f00e fcc1 	bl	26acc <var_toInteger>
   1814a:	4603      	mov	r3, r0
   1814c:	75fb      	strb	r3, [r7, #23]
        if (!(id > object->access->attributeAccessModes.size))
   1814e:	7dfb      	ldrb	r3, [r7, #23]
   18150:	b29a      	uxth	r2, r3
   18152:	687b      	ldr	r3, [r7, #4]
   18154:	68db      	ldr	r3, [r3, #12]
   18156:	88db      	ldrh	r3, [r3, #6]
   18158:	429a      	cmp	r2, r3
   1815a:	d81a      	bhi.n	18192 <obj_updateAttributeAccessModes+0x14a>
        {
            ret = va_get(it->Arr, &value);
   1815c:	68fb      	ldr	r3, [r7, #12]
   1815e:	689b      	ldr	r3, [r3, #8]
   18160:	f107 0208 	add.w	r2, r7, #8
   18164:	4611      	mov	r1, r2
   18166:	4618      	mov	r0, r3
   18168:	f00e fe5a 	bl	26e20 <va_get>
   1816c:	61f8      	str	r0, [r7, #28]
            if (ret != 0)
   1816e:	69fb      	ldr	r3, [r7, #28]
   18170:	2b00      	cmp	r3, #0
   18172:	d001      	beq.n	18178 <obj_updateAttributeAccessModes+0x130>
            {
                return ret;
   18174:	69fb      	ldr	r3, [r7, #28]
   18176:	e07e      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
            }
            //DLMS_ACCESS_MODE
            object->access->attributeAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   18178:	687b      	ldr	r3, [r7, #4]
   1817a:	68db      	ldr	r3, [r3, #12]
   1817c:	681a      	ldr	r2, [r3, #0]
   1817e:	7dfb      	ldrb	r3, [r7, #23]
   18180:	3b01      	subs	r3, #1
   18182:	18d4      	adds	r4, r2, r3
   18184:	68bb      	ldr	r3, [r7, #8]
   18186:	4618      	mov	r0, r3
   18188:	f00e fca0 	bl	26acc <var_toInteger>
   1818c:	4603      	mov	r3, r0
   1818e:	b2db      	uxtb	r3, r3
   18190:	7023      	strb	r3, [r4, #0]

        cnt = obj_methodCount(object);
        bb_capacity(&object->access->methodAccessModes, cnt);
        object->access->methodAccessModes.size = object->access->methodAccessModes.capacity;
    }
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   18192:	8b7b      	ldrh	r3, [r7, #26]
   18194:	3301      	adds	r3, #1
   18196:	837b      	strh	r3, [r7, #26]
   18198:	693b      	ldr	r3, [r7, #16]
   1819a:	689b      	ldr	r3, [r3, #8]
   1819c:	88db      	ldrh	r3, [r3, #6]
   1819e:	8b7a      	ldrh	r2, [r7, #26]
   181a0:	429a      	cmp	r2, r3
   181a2:	d1a6      	bne.n	180f2 <obj_updateAttributeAccessModes+0xaa>
            object->access->attributeAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
        }
    }

    //Get method access modes.
    ret = va_get(arr, &tmp);
   181a4:	f107 0310 	add.w	r3, r7, #16
   181a8:	4619      	mov	r1, r3
   181aa:	6838      	ldr	r0, [r7, #0]
   181ac:	f00e fe38 	bl	26e20 <va_get>
   181b0:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   181b2:	69fb      	ldr	r3, [r7, #28]
   181b4:	2b00      	cmp	r3, #0
   181b6:	d001      	beq.n	181bc <obj_updateAttributeAccessModes+0x174>
    {
        return ret;
   181b8:	69fb      	ldr	r3, [r7, #28]
   181ba:	e05c      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
    }
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   181bc:	2300      	movs	r3, #0
   181be:	837b      	strh	r3, [r7, #26]
   181c0:	e052      	b.n	18268 <obj_updateAttributeAccessModes+0x220>
    {
        ret = va_getByIndex(tmp->Arr, pos, &it);
   181c2:	693b      	ldr	r3, [r7, #16]
   181c4:	689b      	ldr	r3, [r3, #8]
   181c6:	8b79      	ldrh	r1, [r7, #26]
   181c8:	f107 020c 	add.w	r2, r7, #12
   181cc:	4618      	mov	r0, r3
   181ce:	f00e fe4d 	bl	26e6c <va_getByIndex>
   181d2:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   181d4:	69fb      	ldr	r3, [r7, #28]
   181d6:	2b00      	cmp	r3, #0
   181d8:	d001      	beq.n	181de <obj_updateAttributeAccessModes+0x196>
        {
            return ret;
   181da:	69fb      	ldr	r3, [r7, #28]
   181dc:	e04b      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   181de:	68fb      	ldr	r3, [r7, #12]
   181e0:	781b      	ldrb	r3, [r3, #0]
   181e2:	2b02      	cmp	r3, #2
   181e4:	d104      	bne.n	181f0 <obj_updateAttributeAccessModes+0x1a8>
            it->Arr->size != 2)
   181e6:	68fb      	ldr	r3, [r7, #12]
   181e8:	689b      	ldr	r3, [r3, #8]
   181ea:	88db      	ldrh	r3, [r3, #6]
        ret = va_getByIndex(tmp->Arr, pos, &it);
        if (ret != 0)
        {
            return ret;
        }
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   181ec:	2b02      	cmp	r3, #2
   181ee:	d002      	beq.n	181f6 <obj_updateAttributeAccessModes+0x1ae>
            it->Arr->size != 2)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   181f0:	f44f 7381 	mov.w	r3, #258	; 0x102
   181f4:	e03f      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }

        //Get ID.
        ret = va_get(it->Arr, &value);
   181f6:	68fb      	ldr	r3, [r7, #12]
   181f8:	689b      	ldr	r3, [r3, #8]
   181fa:	f107 0208 	add.w	r2, r7, #8
   181fe:	4611      	mov	r1, r2
   18200:	4618      	mov	r0, r3
   18202:	f00e fe0d 	bl	26e20 <va_get>
   18206:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   18208:	69fb      	ldr	r3, [r7, #28]
   1820a:	2b00      	cmp	r3, #0
   1820c:	d001      	beq.n	18212 <obj_updateAttributeAccessModes+0x1ca>
        {
            return ret;
   1820e:	69fb      	ldr	r3, [r7, #28]
   18210:	e031      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
        }

        id = (unsigned char)var_toInteger(value);
   18212:	68bb      	ldr	r3, [r7, #8]
   18214:	4618      	mov	r0, r3
   18216:	f00e fc59 	bl	26acc <var_toInteger>
   1821a:	4603      	mov	r3, r0
   1821c:	75fb      	strb	r3, [r7, #23]
        if (!(id > object->access->methodAccessModes.size))
   1821e:	7dfb      	ldrb	r3, [r7, #23]
   18220:	b29a      	uxth	r2, r3
   18222:	687b      	ldr	r3, [r7, #4]
   18224:	68db      	ldr	r3, [r3, #12]
   18226:	8a5b      	ldrh	r3, [r3, #18]
   18228:	429a      	cmp	r2, r3
   1822a:	d81a      	bhi.n	18262 <obj_updateAttributeAccessModes+0x21a>
        {
            ret = va_get(it->Arr, &value);
   1822c:	68fb      	ldr	r3, [r7, #12]
   1822e:	689b      	ldr	r3, [r3, #8]
   18230:	f107 0208 	add.w	r2, r7, #8
   18234:	4611      	mov	r1, r2
   18236:	4618      	mov	r0, r3
   18238:	f00e fdf2 	bl	26e20 <va_get>
   1823c:	61f8      	str	r0, [r7, #28]
            if (ret != 0)
   1823e:	69fb      	ldr	r3, [r7, #28]
   18240:	2b00      	cmp	r3, #0
   18242:	d001      	beq.n	18248 <obj_updateAttributeAccessModes+0x200>
            {
                return ret;
   18244:	69fb      	ldr	r3, [r7, #28]
   18246:	e016      	b.n	18276 <obj_updateAttributeAccessModes+0x22e>
            }
            //DLMS_METHOD_ACCESS_MODE
            object->access->methodAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   18248:	687b      	ldr	r3, [r7, #4]
   1824a:	68db      	ldr	r3, [r3, #12]
   1824c:	68da      	ldr	r2, [r3, #12]
   1824e:	7dfb      	ldrb	r3, [r7, #23]
   18250:	3b01      	subs	r3, #1
   18252:	18d4      	adds	r4, r2, r3
   18254:	68bb      	ldr	r3, [r7, #8]
   18256:	4618      	mov	r0, r3
   18258:	f00e fc38 	bl	26acc <var_toInteger>
   1825c:	4603      	mov	r3, r0
   1825e:	b2db      	uxtb	r3, r3
   18260:	7023      	strb	r3, [r4, #0]
    ret = va_get(arr, &tmp);
    if (ret != 0)
    {
        return ret;
    }
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   18262:	8b7b      	ldrh	r3, [r7, #26]
   18264:	3301      	adds	r3, #1
   18266:	837b      	strh	r3, [r7, #26]
   18268:	693b      	ldr	r3, [r7, #16]
   1826a:	689b      	ldr	r3, [r3, #8]
   1826c:	88db      	ldrh	r3, [r3, #6]
   1826e:	8b7a      	ldrh	r2, [r7, #26]
   18270:	429a      	cmp	r2, r3
   18272:	d1a6      	bne.n	181c2 <obj_updateAttributeAccessModes+0x17a>
            }
            //DLMS_METHOD_ACCESS_MODE
            object->access->methodAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
        }
    }
    return ret;
   18274:	69fb      	ldr	r3, [r7, #28]
}
   18276:	4618      	mov	r0, r3
   18278:	3724      	adds	r7, #36	; 0x24
   1827a:	46bd      	mov	sp, r7
   1827c:	bd90      	pop	{r4, r7, pc}
   1827e:	bf00      	nop

00018280 <cosem_setData>:
#include "../include/server.h"

#ifndef DLMS_IGNORE_DATA

int cosem_setData(gxData* object, unsigned char index, dlmsVARIANT *value)
{
   18280:	b580      	push	{r7, lr}
   18282:	b084      	sub	sp, #16
   18284:	af00      	add	r7, sp, #0
   18286:	60f8      	str	r0, [r7, #12]
   18288:	460b      	mov	r3, r1
   1828a:	607a      	str	r2, [r7, #4]
   1828c:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1828e:	7afb      	ldrb	r3, [r7, #11]
   18290:	2b02      	cmp	r3, #2
   18292:	d107      	bne.n	182a4 <cosem_setData+0x24>
    {
        return var_copy(&object->value, value);
   18294:	68fb      	ldr	r3, [r7, #12]
   18296:	3310      	adds	r3, #16
   18298:	6879      	ldr	r1, [r7, #4]
   1829a:	4618      	mov	r0, r3
   1829c:	f00f fd6a 	bl	27d74 <var_copy>
   182a0:	4603      	mov	r3, r0
   182a2:	e001      	b.n	182a8 <cosem_setData+0x28>
    }
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   182a4:	f44f 7381 	mov.w	r3, #258	; 0x102
}
   182a8:	4618      	mov	r0, r3
   182aa:	3710      	adds	r7, #16
   182ac:	46bd      	mov	sp, r7
   182ae:	bd80      	pop	{r7, pc}

000182b0 <cosem_setRegister>:
#endif //DLMS_IGNORE_DATA

#ifndef DLMS_IGNORE_REGISTER
int cosem_setRegister(gxRegister* object, unsigned char index, dlmsVARIANT *value)
{
   182b0:	b580      	push	{r7, lr}
   182b2:	b086      	sub	sp, #24
   182b4:	af00      	add	r7, sp, #0
   182b6:	60f8      	str	r0, [r7, #12]
   182b8:	460b      	mov	r3, r1
   182ba:	607a      	str	r2, [r7, #4]
   182bc:	72fb      	strb	r3, [r7, #11]
    int ret;
    dlmsVARIANT *tmp;
    if (index == 2)
   182be:	7afb      	ldrb	r3, [r7, #11]
   182c0:	2b02      	cmp	r3, #2
   182c2:	d107      	bne.n	182d4 <cosem_setRegister+0x24>
    {
        return var_copy(&object->value, value);
   182c4:	68fb      	ldr	r3, [r7, #12]
   182c6:	3310      	adds	r3, #16
   182c8:	6879      	ldr	r1, [r7, #4]
   182ca:	4618      	mov	r0, r3
   182cc:	f00f fd52 	bl	27d74 <var_copy>
   182d0:	4603      	mov	r3, r0
   182d2:	e03f      	b.n	18354 <cosem_setRegister+0xa4>
    }
    else if (index == 3)
   182d4:	7afb      	ldrb	r3, [r7, #11]
   182d6:	2b03      	cmp	r3, #3
   182d8:	d13a      	bne.n	18350 <cosem_setRegister+0xa0>
    {
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   182da:	687b      	ldr	r3, [r7, #4]
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	2b02      	cmp	r3, #2
   182e0:	d002      	beq.n	182e8 <cosem_setRegister+0x38>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   182e2:	f44f 7381 	mov.w	r3, #258	; 0x102
   182e6:	e035      	b.n	18354 <cosem_setRegister+0xa4>
        }
        ret = va_getByIndex(value->Arr, 0, &tmp);
   182e8:	687b      	ldr	r3, [r7, #4]
   182ea:	689b      	ldr	r3, [r3, #8]
   182ec:	f107 0210 	add.w	r2, r7, #16
   182f0:	2100      	movs	r1, #0
   182f2:	4618      	mov	r0, r3
   182f4:	f00e fdba 	bl	26e6c <va_getByIndex>
   182f8:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   182fa:	697b      	ldr	r3, [r7, #20]
   182fc:	2b00      	cmp	r3, #0
   182fe:	d001      	beq.n	18304 <cosem_setRegister+0x54>
        {
            return ret;
   18300:	697b      	ldr	r3, [r7, #20]
   18302:	e027      	b.n	18354 <cosem_setRegister+0xa4>
        }
        object->scaler = (char)var_toInteger(tmp);
   18304:	693b      	ldr	r3, [r7, #16]
   18306:	4618      	mov	r0, r3
   18308:	f00e fbe0 	bl	26acc <var_toInteger>
   1830c:	4603      	mov	r3, r0
   1830e:	b25a      	sxtb	r2, r3
   18310:	68fb      	ldr	r3, [r7, #12]
   18312:	f883 2020 	strb.w	r2, [r3, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   18316:	687b      	ldr	r3, [r7, #4]
   18318:	689b      	ldr	r3, [r3, #8]
   1831a:	f107 0210 	add.w	r2, r7, #16
   1831e:	2101      	movs	r1, #1
   18320:	4618      	mov	r0, r3
   18322:	f00e fda3 	bl	26e6c <va_getByIndex>
   18326:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   18328:	697b      	ldr	r3, [r7, #20]
   1832a:	2b00      	cmp	r3, #0
   1832c:	d001      	beq.n	18332 <cosem_setRegister+0x82>
        {
            return ret;
   1832e:	697b      	ldr	r3, [r7, #20]
   18330:	e010      	b.n	18354 <cosem_setRegister+0xa4>
        }
        object->unit = (unsigned char)var_toInteger(tmp);
   18332:	693b      	ldr	r3, [r7, #16]
   18334:	4618      	mov	r0, r3
   18336:	f00e fbc9 	bl	26acc <var_toInteger>
   1833a:	4603      	mov	r3, r0
   1833c:	b2da      	uxtb	r2, r3
   1833e:	68fb      	ldr	r3, [r7, #12]
   18340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        object->unitRead = 1;
   18344:	68fb      	ldr	r3, [r7, #12]
   18346:	2201      	movs	r2, #1
   18348:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return DLMS_ERROR_CODE_OK;
   1834c:	2300      	movs	r3, #0
   1834e:	e001      	b.n	18354 <cosem_setRegister+0xa4>
        object->unit = (unsigned char)var_toInteger(tmp);
        object->unitRead = 1;
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18350:	f44f 7381 	mov.w	r3, #258	; 0x102
    }
    return DLMS_ERROR_CODE_OK;
}
   18354:	4618      	mov	r0, r3
   18356:	3718      	adds	r7, #24
   18358:	46bd      	mov	sp, r7
   1835a:	bd80      	pop	{r7, pc}

0001835c <cosem_setRegistertable>:
#endif //DLMS_IGNORE_REGISTER

#ifndef DLMS_IGNORE_REGISTER_TABLE
int cosem_setRegistertable(gxRegisterTable* object, unsigned char index, dlmsVARIANT *value)
{
   1835c:	b580      	push	{r7, lr}
   1835e:	b086      	sub	sp, #24
   18360:	af00      	add	r7, sp, #0
   18362:	60f8      	str	r0, [r7, #12]
   18364:	460b      	mov	r3, r1
   18366:	607a      	str	r2, [r7, #4]
   18368:	72fb      	strb	r3, [r7, #11]
    //TODO:
    int ret;
    dlmsVARIANT *tmp;
    if (index == 2)
   1836a:	7afb      	ldrb	r3, [r7, #11]
   1836c:	2b02      	cmp	r3, #2
   1836e:	d03f      	beq.n	183f0 <cosem_setRegistertable+0x94>
    {
        //        return var_copy(&object->value, value);
    }
    else if (index == 4)
   18370:	7afb      	ldrb	r3, [r7, #11]
   18372:	2b04      	cmp	r3, #4
   18374:	d139      	bne.n	183ea <cosem_setRegistertable+0x8e>
    {
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   18376:	687b      	ldr	r3, [r7, #4]
   18378:	781b      	ldrb	r3, [r3, #0]
   1837a:	2b02      	cmp	r3, #2
   1837c:	d002      	beq.n	18384 <cosem_setRegistertable+0x28>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1837e:	f44f 7381 	mov.w	r3, #258	; 0x102
   18382:	e036      	b.n	183f2 <cosem_setRegistertable+0x96>
        }
        ret = va_getByIndex(value->Arr, 0, &tmp);
   18384:	687b      	ldr	r3, [r7, #4]
   18386:	689b      	ldr	r3, [r3, #8]
   18388:	f107 0210 	add.w	r2, r7, #16
   1838c:	2100      	movs	r1, #0
   1838e:	4618      	mov	r0, r3
   18390:	f00e fd6c 	bl	26e6c <va_getByIndex>
   18394:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   18396:	697b      	ldr	r3, [r7, #20]
   18398:	2b00      	cmp	r3, #0
   1839a:	d001      	beq.n	183a0 <cosem_setRegistertable+0x44>
        {
            return ret;
   1839c:	697b      	ldr	r3, [r7, #20]
   1839e:	e028      	b.n	183f2 <cosem_setRegistertable+0x96>
        }
        object->scaler = (char)var_toInteger(tmp);
   183a0:	693b      	ldr	r3, [r7, #16]
   183a2:	4618      	mov	r0, r3
   183a4:	f00e fb92 	bl	26acc <var_toInteger>
   183a8:	4603      	mov	r3, r0
   183aa:	b25a      	sxtb	r2, r3
   183ac:	68fb      	ldr	r3, [r7, #12]
   183ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   183b2:	687b      	ldr	r3, [r7, #4]
   183b4:	689b      	ldr	r3, [r3, #8]
   183b6:	f107 0210 	add.w	r2, r7, #16
   183ba:	2101      	movs	r1, #1
   183bc:	4618      	mov	r0, r3
   183be:	f00e fd55 	bl	26e6c <va_getByIndex>
   183c2:	6178      	str	r0, [r7, #20]
        if (ret != DLMS_ERROR_CODE_OK)
   183c4:	697b      	ldr	r3, [r7, #20]
   183c6:	2b00      	cmp	r3, #0
   183c8:	d001      	beq.n	183ce <cosem_setRegistertable+0x72>
        {
            return ret;
   183ca:	697b      	ldr	r3, [r7, #20]
   183cc:	e011      	b.n	183f2 <cosem_setRegistertable+0x96>
        }
        object->unit = (unsigned char)var_toInteger(tmp);
   183ce:	693b      	ldr	r3, [r7, #16]
   183d0:	4618      	mov	r0, r3
   183d2:	f00e fb7b 	bl	26acc <var_toInteger>
   183d6:	4603      	mov	r3, r0
   183d8:	b2da      	uxtb	r2, r3
   183da:	68fb      	ldr	r3, [r7, #12]
   183dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        object->unitRead = 1;
   183e0:	68fb      	ldr	r3, [r7, #12]
   183e2:	2201      	movs	r2, #1
   183e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   183e8:	e002      	b.n	183f0 <cosem_setRegistertable+0x94>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   183ea:	f44f 7381 	mov.w	r3, #258	; 0x102
   183ee:	e000      	b.n	183f2 <cosem_setRegistertable+0x96>
    }
    return DLMS_ERROR_CODE_OK;
   183f0:	2300      	movs	r3, #0
}
   183f2:	4618      	mov	r0, r3
   183f4:	3718      	adds	r7, #24
   183f6:	46bd      	mov	sp, r7
   183f8:	bd80      	pop	{r7, pc}
   183fa:	bf00      	nop

000183fc <cosem_setClock>:
#endif //DLMS_IGNORE_REGISTER_TABLE

#ifndef DLMS_IGNORE_CLOCK
int cosem_setClock(gxClock* object, unsigned char index, dlmsVARIANT *value)
{
   183fc:	b580      	push	{r7, lr}
   183fe:	b08a      	sub	sp, #40	; 0x28
   18400:	af00      	add	r7, sp, #0
   18402:	60f8      	str	r0, [r7, #12]
   18404:	460b      	mov	r3, r1
   18406:	607a      	str	r2, [r7, #4]
   18408:	72fb      	strb	r3, [r7, #11]
    int ret;
    dlmsVARIANT tmp;
    if (index == 2)
   1840a:	7afb      	ldrb	r3, [r7, #11]
   1840c:	2b02      	cmp	r3, #2
   1840e:	d12c      	bne.n	1846a <cosem_setClock+0x6e>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   18410:	687b      	ldr	r3, [r7, #4]
   18412:	781b      	ldrb	r3, [r3, #0]
   18414:	2b09      	cmp	r3, #9
   18416:	d122      	bne.n	1845e <cosem_setClock+0x62>
   18418:	687b      	ldr	r3, [r7, #4]
   1841a:	689b      	ldr	r3, [r3, #8]
   1841c:	2b00      	cmp	r3, #0
   1841e:	d01e      	beq.n	1845e <cosem_setClock+0x62>
        {
            var_init(&tmp);
   18420:	f107 0310 	add.w	r3, r7, #16
   18424:	4618      	mov	r0, r3
   18426:	f00d fe7f 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1842a:	f107 0310 	add.w	r3, r7, #16
   1842e:	461a      	mov	r2, r3
   18430:	2119      	movs	r1, #25
   18432:	6878      	ldr	r0, [r7, #4]
   18434:	f7f1 f9ea 	bl	980c <dlms_changeType2>
   18438:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0)
   1843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1843c:	2b00      	cmp	r3, #0
   1843e:	d001      	beq.n	18444 <cosem_setClock+0x48>
            {
                return ret;
   18440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18442:	e0af      	b.n	185a4 <cosem_setClock+0x1a8>
            }
            time_copy(&object->time, tmp.dateTime);
   18444:	68fb      	ldr	r3, [r7, #12]
   18446:	337c      	adds	r3, #124	; 0x7c
   18448:	69ba      	ldr	r2, [r7, #24]
   1844a:	4611      	mov	r1, r2
   1844c:	4618      	mov	r0, r3
   1844e:	f7ee fa81 	bl	6954 <time_copy>
            var_clear(&tmp);
   18452:	f107 0310 	add.w	r3, r7, #16
   18456:	4618      	mov	r0, r3
   18458:	f00d fe76 	bl	26148 <var_clear>
   1845c:	e0a1      	b.n	185a2 <cosem_setClock+0x1a6>
        }
        else
        {
            time_clear(&object->time);
   1845e:	68fb      	ldr	r3, [r7, #12]
   18460:	337c      	adds	r3, #124	; 0x7c
   18462:	4618      	mov	r0, r3
   18464:	f7ed fff2 	bl	644c <time_clear>
   18468:	e09b      	b.n	185a2 <cosem_setClock+0x1a6>
        }
    }
    else if (index == 3)
   1846a:	7afb      	ldrb	r3, [r7, #11]
   1846c:	2b03      	cmp	r3, #3
   1846e:	d108      	bne.n	18482 <cosem_setClock+0x86>
    {
        object->timeZone = (unsigned short)var_toInteger(value);
   18470:	6878      	ldr	r0, [r7, #4]
   18472:	f00e fb2b 	bl	26acc <var_toInteger>
   18476:	4603      	mov	r3, r0
   18478:	b21a      	sxth	r2, r3
   1847a:	68fb      	ldr	r3, [r7, #12]
   1847c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
   18480:	e08f      	b.n	185a2 <cosem_setClock+0x1a6>
    }
    else if (index == 4)
   18482:	7afb      	ldrb	r3, [r7, #11]
   18484:	2b04      	cmp	r3, #4
   18486:	d108      	bne.n	1849a <cosem_setClock+0x9e>
    {
        object->status = (DLMS_CLOCK_STATUS)var_toInteger(value);
   18488:	6878      	ldr	r0, [r7, #4]
   1848a:	f00e fb1f 	bl	26acc <var_toInteger>
   1848e:	4603      	mov	r3, r0
   18490:	b2da      	uxtb	r2, r3
   18492:	68fb      	ldr	r3, [r7, #12]
   18494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   18498:	e083      	b.n	185a2 <cosem_setClock+0x1a6>
    }
    else if (index == 5)
   1849a:	7afb      	ldrb	r3, [r7, #11]
   1849c:	2b05      	cmp	r3, #5
   1849e:	d12c      	bne.n	184fa <cosem_setClock+0xfe>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   184a0:	687b      	ldr	r3, [r7, #4]
   184a2:	781b      	ldrb	r3, [r3, #0]
   184a4:	2b09      	cmp	r3, #9
   184a6:	d122      	bne.n	184ee <cosem_setClock+0xf2>
   184a8:	687b      	ldr	r3, [r7, #4]
   184aa:	689b      	ldr	r3, [r3, #8]
   184ac:	2b00      	cmp	r3, #0
   184ae:	d01e      	beq.n	184ee <cosem_setClock+0xf2>
        {
            var_init(&tmp);
   184b0:	f107 0310 	add.w	r3, r7, #16
   184b4:	4618      	mov	r0, r3
   184b6:	f00d fe37 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   184ba:	f107 0310 	add.w	r3, r7, #16
   184be:	461a      	mov	r2, r3
   184c0:	2119      	movs	r1, #25
   184c2:	6878      	ldr	r0, [r7, #4]
   184c4:	f7f1 f9a2 	bl	980c <dlms_changeType2>
   184c8:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0)
   184ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   184cc:	2b00      	cmp	r3, #0
   184ce:	d001      	beq.n	184d4 <cosem_setClock+0xd8>
            {
                return ret;
   184d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   184d2:	e067      	b.n	185a4 <cosem_setClock+0x1a8>
            }
            time_copy(&object->begin, tmp.dateTime);
   184d4:	68fb      	ldr	r3, [r7, #12]
   184d6:	3348      	adds	r3, #72	; 0x48
   184d8:	69ba      	ldr	r2, [r7, #24]
   184da:	4611      	mov	r1, r2
   184dc:	4618      	mov	r0, r3
   184de:	f7ee fa39 	bl	6954 <time_copy>
            var_clear(&tmp);
   184e2:	f107 0310 	add.w	r3, r7, #16
   184e6:	4618      	mov	r0, r3
   184e8:	f00d fe2e 	bl	26148 <var_clear>
   184ec:	e059      	b.n	185a2 <cosem_setClock+0x1a6>
        }
        else
        {
            time_clear(&object->begin);
   184ee:	68fb      	ldr	r3, [r7, #12]
   184f0:	3348      	adds	r3, #72	; 0x48
   184f2:	4618      	mov	r0, r3
   184f4:	f7ed ffaa 	bl	644c <time_clear>
   184f8:	e053      	b.n	185a2 <cosem_setClock+0x1a6>
        }
    }
    else if (index == 6)
   184fa:	7afb      	ldrb	r3, [r7, #11]
   184fc:	2b06      	cmp	r3, #6
   184fe:	d12c      	bne.n	1855a <cosem_setClock+0x15e>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   18500:	687b      	ldr	r3, [r7, #4]
   18502:	781b      	ldrb	r3, [r3, #0]
   18504:	2b09      	cmp	r3, #9
   18506:	d122      	bne.n	1854e <cosem_setClock+0x152>
   18508:	687b      	ldr	r3, [r7, #4]
   1850a:	689b      	ldr	r3, [r3, #8]
   1850c:	2b00      	cmp	r3, #0
   1850e:	d01e      	beq.n	1854e <cosem_setClock+0x152>
        {
            var_init(&tmp);
   18510:	f107 0310 	add.w	r3, r7, #16
   18514:	4618      	mov	r0, r3
   18516:	f00d fe07 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1851a:	f107 0310 	add.w	r3, r7, #16
   1851e:	461a      	mov	r2, r3
   18520:	2119      	movs	r1, #25
   18522:	6878      	ldr	r0, [r7, #4]
   18524:	f7f1 f972 	bl	980c <dlms_changeType2>
   18528:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0)
   1852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1852c:	2b00      	cmp	r3, #0
   1852e:	d001      	beq.n	18534 <cosem_setClock+0x138>
            {
                return ret;
   18530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18532:	e037      	b.n	185a4 <cosem_setClock+0x1a8>
            }
            time_copy(&object->end, tmp.dateTime);
   18534:	68fb      	ldr	r3, [r7, #12]
   18536:	3314      	adds	r3, #20
   18538:	69ba      	ldr	r2, [r7, #24]
   1853a:	4611      	mov	r1, r2
   1853c:	4618      	mov	r0, r3
   1853e:	f7ee fa09 	bl	6954 <time_copy>
            var_clear(&tmp);
   18542:	f107 0310 	add.w	r3, r7, #16
   18546:	4618      	mov	r0, r3
   18548:	f00d fdfe 	bl	26148 <var_clear>
   1854c:	e029      	b.n	185a2 <cosem_setClock+0x1a6>
        }
        else
        {
            time_clear(&object->end);
   1854e:	68fb      	ldr	r3, [r7, #12]
   18550:	3314      	adds	r3, #20
   18552:	4618      	mov	r0, r3
   18554:	f7ed ff7a 	bl	644c <time_clear>
   18558:	e023      	b.n	185a2 <cosem_setClock+0x1a6>
        }
    }
    else if (index == 7)
   1855a:	7afb      	ldrb	r3, [r7, #11]
   1855c:	2b07      	cmp	r3, #7
   1855e:	d107      	bne.n	18570 <cosem_setClock+0x174>
    {
        object->deviation = (char)var_toInteger(value);
   18560:	6878      	ldr	r0, [r7, #4]
   18562:	f00e fab3 	bl	26acc <var_toInteger>
   18566:	4603      	mov	r3, r0
   18568:	b25a      	sxtb	r2, r3
   1856a:	68fb      	ldr	r3, [r7, #12]
   1856c:	745a      	strb	r2, [r3, #17]
   1856e:	e018      	b.n	185a2 <cosem_setClock+0x1a6>
    }
    else if (index == 8)
   18570:	7afb      	ldrb	r3, [r7, #11]
   18572:	2b08      	cmp	r3, #8
   18574:	d107      	bne.n	18586 <cosem_setClock+0x18a>
    {
        object->enabled = (unsigned char)var_toInteger(value);
   18576:	6878      	ldr	r0, [r7, #4]
   18578:	f00e faa8 	bl	26acc <var_toInteger>
   1857c:	4603      	mov	r3, r0
   1857e:	b2da      	uxtb	r2, r3
   18580:	68fb      	ldr	r3, [r7, #12]
   18582:	749a      	strb	r2, [r3, #18]
   18584:	e00d      	b.n	185a2 <cosem_setClock+0x1a6>
    }
    else if (index == 9)
   18586:	7afb      	ldrb	r3, [r7, #11]
   18588:	2b09      	cmp	r3, #9
   1858a:	d107      	bne.n	1859c <cosem_setClock+0x1a0>
    {
        object->clockBase = (DLMS_CLOCK_BASE)var_toInteger(value);
   1858c:	6878      	ldr	r0, [r7, #4]
   1858e:	f00e fa9d 	bl	26acc <var_toInteger>
   18592:	4603      	mov	r3, r0
   18594:	b2da      	uxtb	r2, r3
   18596:	68fb      	ldr	r3, [r7, #12]
   18598:	741a      	strb	r2, [r3, #16]
   1859a:	e002      	b.n	185a2 <cosem_setClock+0x1a6>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1859c:	f44f 7381 	mov.w	r3, #258	; 0x102
   185a0:	e000      	b.n	185a4 <cosem_setClock+0x1a8>
    }
    return DLMS_ERROR_CODE_OK;
   185a2:	2300      	movs	r3, #0
}
   185a4:	4618      	mov	r0, r3
   185a6:	3728      	adds	r7, #40	; 0x28
   185a8:	46bd      	mov	sp, r7
   185aa:	bd80      	pop	{r7, pc}

000185ac <updateSeasonProfile>:
#endif //DLMS_IGNORE_CLOCK

#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR

int updateSeasonProfile(gxArray* profile, variantArray* data)
{
   185ac:	b5b0      	push	{r4, r5, r7, lr}
   185ae:	b08c      	sub	sp, #48	; 0x30
   185b0:	af00      	add	r7, sp, #0
   185b2:	6078      	str	r0, [r7, #4]
   185b4:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK, pos;
   185b6:	2300      	movs	r3, #0
   185b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    gxSeasonProfile* sp;
    dlmsVARIANT tm;
    dlmsVARIANT *tmp, *it;
    obj_clearSeasonProfile(profile);
   185ba:	6878      	ldr	r0, [r7, #4]
   185bc:	f7fe fc88 	bl	16ed0 <obj_clearSeasonProfile>
    var_init(&tm);
   185c0:	f107 0310 	add.w	r3, r7, #16
   185c4:	4618      	mov	r0, r3
   185c6:	f00d fdaf 	bl	26128 <var_init>
    for (pos = 0; pos != data->size; ++pos)
   185ca:	2300      	movs	r3, #0
   185cc:	62bb      	str	r3, [r7, #40]	; 0x28
   185ce:	e090      	b.n	186f2 <updateSeasonProfile+0x146>
    {
        sp = (gxSeasonProfile*)gxmalloc(sizeof(gxSeasonProfile));
   185d0:	2048      	movs	r0, #72	; 0x48
   185d2:	f011 fa37 	bl	29a44 <malloc>
   185d6:	4603      	mov	r3, r0
   185d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = va_get(data, &it);
   185da:	f107 0308 	add.w	r3, r7, #8
   185de:	4619      	mov	r1, r3
   185e0:	6838      	ldr	r0, [r7, #0]
   185e2:	f00e fc1d 	bl	26e20 <va_get>
   185e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret != DLMS_ERROR_CODE_OK)
   185e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   185ea:	2b00      	cmp	r3, #0
   185ec:	d004      	beq.n	185f8 <updateSeasonProfile+0x4c>
        {
            gxfree(sp);
   185ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
   185f0:	f011 fa30 	bl	29a54 <free>
            return ret;
   185f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   185f6:	e084      	b.n	18702 <updateSeasonProfile+0x156>
        }
        ret = va_get(it->Arr, &tmp);
   185f8:	68bb      	ldr	r3, [r7, #8]
   185fa:	689b      	ldr	r3, [r3, #8]
   185fc:	f107 020c 	add.w	r2, r7, #12
   18600:	4611      	mov	r1, r2
   18602:	4618      	mov	r0, r3
   18604:	f00e fc0c 	bl	26e20 <va_get>
   18608:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret != DLMS_ERROR_CODE_OK)
   1860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1860c:	2b00      	cmp	r3, #0
   1860e:	d004      	beq.n	1861a <updateSeasonProfile+0x6e>
        {
            gxfree(sp);
   18610:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18612:	f011 fa1f 	bl	29a54 <free>
            return ret;
   18616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18618:	e073      	b.n	18702 <updateSeasonProfile+0x156>
        }
        bb_init(&sp->name);
   1861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1861c:	4618      	mov	r0, r3
   1861e:	f7ea fb63 	bl	2ce8 <bb_init>
        bb_set2(&sp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   18622:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   18624:	68fb      	ldr	r3, [r7, #12]
   18626:	689d      	ldr	r5, [r3, #8]
   18628:	68fb      	ldr	r3, [r7, #12]
   1862a:	689b      	ldr	r3, [r3, #8]
   1862c:	4618      	mov	r0, r3
   1862e:	f7ea fb4b 	bl	2cc8 <bb_size>
   18632:	4603      	mov	r3, r0
   18634:	2200      	movs	r2, #0
   18636:	4629      	mov	r1, r5
   18638:	4620      	mov	r0, r4
   1863a:	f7ea fff1 	bl	3620 <bb_set2>

        ret = va_get(it->Arr, &tmp);
   1863e:	68bb      	ldr	r3, [r7, #8]
   18640:	689b      	ldr	r3, [r3, #8]
   18642:	f107 020c 	add.w	r2, r7, #12
   18646:	4611      	mov	r1, r2
   18648:	4618      	mov	r0, r3
   1864a:	f00e fbe9 	bl	26e20 <va_get>
   1864e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret != DLMS_ERROR_CODE_OK)
   18650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18652:	2b00      	cmp	r3, #0
   18654:	d004      	beq.n	18660 <updateSeasonProfile+0xb4>
        {
            gxfree(sp);
   18656:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18658:	f011 f9fc 	bl	29a54 <free>
            return ret;
   1865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1865e:	e050      	b.n	18702 <updateSeasonProfile+0x156>
        }
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tm);
   18660:	68fb      	ldr	r3, [r7, #12]
   18662:	f107 0210 	add.w	r2, r7, #16
   18666:	2119      	movs	r1, #25
   18668:	4618      	mov	r0, r3
   1866a:	f7f1 f8cf 	bl	980c <dlms_changeType2>
   1866e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret != DLMS_ERROR_CODE_OK)
   18670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18672:	2b00      	cmp	r3, #0
   18674:	d004      	beq.n	18680 <updateSeasonProfile+0xd4>
        {
            gxfree(sp);
   18676:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18678:	f011 f9ec 	bl	29a54 <free>
            return ret;
   1867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1867e:	e040      	b.n	18702 <updateSeasonProfile+0x156>
        }
        time_copy(&sp->start, tm.dateTime);
   18680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18682:	330c      	adds	r3, #12
   18684:	69ba      	ldr	r2, [r7, #24]
   18686:	4611      	mov	r1, r2
   18688:	4618      	mov	r0, r3
   1868a:	f7ee f963 	bl	6954 <time_copy>
        var_clear(&tm);
   1868e:	f107 0310 	add.w	r3, r7, #16
   18692:	4618      	mov	r0, r3
   18694:	f00d fd58 	bl	26148 <var_clear>

        ret = va_get(it->Arr, &tmp);
   18698:	68bb      	ldr	r3, [r7, #8]
   1869a:	689b      	ldr	r3, [r3, #8]
   1869c:	f107 020c 	add.w	r2, r7, #12
   186a0:	4611      	mov	r1, r2
   186a2:	4618      	mov	r0, r3
   186a4:	f00e fbbc 	bl	26e20 <va_get>
   186a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (ret != DLMS_ERROR_CODE_OK)
   186aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186ac:	2b00      	cmp	r3, #0
   186ae:	d004      	beq.n	186ba <updateSeasonProfile+0x10e>
        {
            gxfree(sp);
   186b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   186b2:	f011 f9cf 	bl	29a54 <free>
            return ret;
   186b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186b8:	e023      	b.n	18702 <updateSeasonProfile+0x156>
        }
        bb_init(&sp->weekName);
   186ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186bc:	333c      	adds	r3, #60	; 0x3c
   186be:	4618      	mov	r0, r3
   186c0:	f7ea fb12 	bl	2ce8 <bb_init>
        bb_set2(&sp->weekName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   186c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186c6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
   186ca:	68fb      	ldr	r3, [r7, #12]
   186cc:	689d      	ldr	r5, [r3, #8]
   186ce:	68fb      	ldr	r3, [r7, #12]
   186d0:	689b      	ldr	r3, [r3, #8]
   186d2:	4618      	mov	r0, r3
   186d4:	f7ea faf8 	bl	2cc8 <bb_size>
   186d8:	4603      	mov	r3, r0
   186da:	2200      	movs	r2, #0
   186dc:	4629      	mov	r1, r5
   186de:	4620      	mov	r0, r4
   186e0:	f7ea ff9e 	bl	3620 <bb_set2>
        arr_push(profile, sp);
   186e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   186e6:	6878      	ldr	r0, [r7, #4]
   186e8:	f7f3 ffca 	bl	c680 <arr_push>
    gxSeasonProfile* sp;
    dlmsVARIANT tm;
    dlmsVARIANT *tmp, *it;
    obj_clearSeasonProfile(profile);
    var_init(&tm);
    for (pos = 0; pos != data->size; ++pos)
   186ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186ee:	3301      	adds	r3, #1
   186f0:	62bb      	str	r3, [r7, #40]	; 0x28
   186f2:	683b      	ldr	r3, [r7, #0]
   186f4:	88db      	ldrh	r3, [r3, #6]
   186f6:	461a      	mov	r2, r3
   186f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   186fa:	429a      	cmp	r2, r3
   186fc:	f47f af68 	bne.w	185d0 <updateSeasonProfile+0x24>
        }
        bb_init(&sp->weekName);
        bb_set2(&sp->weekName, tmp->byteArr, 0, bb_size(tmp->byteArr));
        arr_push(profile, sp);
    }
    return ret;
   18700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   18702:	4618      	mov	r0, r3
   18704:	3730      	adds	r7, #48	; 0x30
   18706:	46bd      	mov	sp, r7
   18708:	bdb0      	pop	{r4, r5, r7, pc}
   1870a:	bf00      	nop

0001870c <updateWeekProfileTable>:

int updateWeekProfileTable(gxArray* profile, variantArray* data)
{
   1870c:	b5b0      	push	{r4, r5, r7, lr}
   1870e:	b088      	sub	sp, #32
   18710:	af00      	add	r7, sp, #0
   18712:	6078      	str	r0, [r7, #4]
   18714:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK, pos;
   18716:	2300      	movs	r3, #0
   18718:	61fb      	str	r3, [r7, #28]
    gxWeekProfile* wp;
    dlmsVARIANT *tmp, *it;
    obj_clearWeekProfileTable(profile);
   1871a:	6878      	ldr	r0, [r7, #4]
   1871c:	f7fe fc08 	bl	16f30 <obj_clearWeekProfileTable>
    for (pos = 0; pos != data->size; ++pos)
   18720:	2300      	movs	r3, #0
   18722:	61bb      	str	r3, [r7, #24]
   18724:	e0ec      	b.n	18900 <updateWeekProfileTable+0x1f4>
    {
        wp = (gxWeekProfile*)gxmalloc(sizeof(gxWeekProfile));
   18726:	2014      	movs	r0, #20
   18728:	f011 f98c 	bl	29a44 <malloc>
   1872c:	4603      	mov	r3, r0
   1872e:	617b      	str	r3, [r7, #20]
        ret = va_get(data, &it);
   18730:	f107 030c 	add.w	r3, r7, #12
   18734:	4619      	mov	r1, r3
   18736:	6838      	ldr	r0, [r7, #0]
   18738:	f00e fb72 	bl	26e20 <va_get>
   1873c:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1873e:	69fb      	ldr	r3, [r7, #28]
   18740:	2b00      	cmp	r3, #0
   18742:	d004      	beq.n	1874e <updateWeekProfileTable+0x42>
        {
            gxfree(wp);
   18744:	6978      	ldr	r0, [r7, #20]
   18746:	f011 f985 	bl	29a54 <free>
            return ret;
   1874a:	69fb      	ldr	r3, [r7, #28]
   1874c:	e0e0      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        ret = va_get(it->Arr, &tmp);
   1874e:	68fb      	ldr	r3, [r7, #12]
   18750:	689b      	ldr	r3, [r3, #8]
   18752:	f107 0210 	add.w	r2, r7, #16
   18756:	4611      	mov	r1, r2
   18758:	4618      	mov	r0, r3
   1875a:	f00e fb61 	bl	26e20 <va_get>
   1875e:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   18760:	69fb      	ldr	r3, [r7, #28]
   18762:	2b00      	cmp	r3, #0
   18764:	d004      	beq.n	18770 <updateWeekProfileTable+0x64>
        {
            gxfree(wp);
   18766:	6978      	ldr	r0, [r7, #20]
   18768:	f011 f974 	bl	29a54 <free>
            return ret;
   1876c:	69fb      	ldr	r3, [r7, #28]
   1876e:	e0cf      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        bb_init(&wp->name);
   18770:	697b      	ldr	r3, [r7, #20]
   18772:	4618      	mov	r0, r3
   18774:	f7ea fab8 	bl	2ce8 <bb_init>
        bb_set2(&wp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   18778:	697c      	ldr	r4, [r7, #20]
   1877a:	693b      	ldr	r3, [r7, #16]
   1877c:	689d      	ldr	r5, [r3, #8]
   1877e:	693b      	ldr	r3, [r7, #16]
   18780:	689b      	ldr	r3, [r3, #8]
   18782:	4618      	mov	r0, r3
   18784:	f7ea faa0 	bl	2cc8 <bb_size>
   18788:	4603      	mov	r3, r0
   1878a:	2200      	movs	r2, #0
   1878c:	4629      	mov	r1, r5
   1878e:	4620      	mov	r0, r4
   18790:	f7ea ff46 	bl	3620 <bb_set2>

        ret = va_get(it->Arr, &tmp);
   18794:	68fb      	ldr	r3, [r7, #12]
   18796:	689b      	ldr	r3, [r3, #8]
   18798:	f107 0210 	add.w	r2, r7, #16
   1879c:	4611      	mov	r1, r2
   1879e:	4618      	mov	r0, r3
   187a0:	f00e fb3e 	bl	26e20 <va_get>
   187a4:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   187a6:	69fb      	ldr	r3, [r7, #28]
   187a8:	2b00      	cmp	r3, #0
   187aa:	d004      	beq.n	187b6 <updateWeekProfileTable+0xaa>
        {
            gxfree(wp);
   187ac:	6978      	ldr	r0, [r7, #20]
   187ae:	f011 f951 	bl	29a54 <free>
            return ret;
   187b2:	69fb      	ldr	r3, [r7, #28]
   187b4:	e0ac      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->monday = (unsigned char)var_toInteger(tmp);
   187b6:	693b      	ldr	r3, [r7, #16]
   187b8:	4618      	mov	r0, r3
   187ba:	f00e f987 	bl	26acc <var_toInteger>
   187be:	4603      	mov	r3, r0
   187c0:	b2da      	uxtb	r2, r3
   187c2:	697b      	ldr	r3, [r7, #20]
   187c4:	731a      	strb	r2, [r3, #12]

        ret = va_get(it->Arr, &tmp);
   187c6:	68fb      	ldr	r3, [r7, #12]
   187c8:	689b      	ldr	r3, [r3, #8]
   187ca:	f107 0210 	add.w	r2, r7, #16
   187ce:	4611      	mov	r1, r2
   187d0:	4618      	mov	r0, r3
   187d2:	f00e fb25 	bl	26e20 <va_get>
   187d6:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   187d8:	69fb      	ldr	r3, [r7, #28]
   187da:	2b00      	cmp	r3, #0
   187dc:	d004      	beq.n	187e8 <updateWeekProfileTable+0xdc>
        {
            gxfree(wp);
   187de:	6978      	ldr	r0, [r7, #20]
   187e0:	f011 f938 	bl	29a54 <free>
            return ret;
   187e4:	69fb      	ldr	r3, [r7, #28]
   187e6:	e093      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   187e8:	693b      	ldr	r3, [r7, #16]
   187ea:	4618      	mov	r0, r3
   187ec:	f00e f96e 	bl	26acc <var_toInteger>
   187f0:	4603      	mov	r3, r0
   187f2:	b2da      	uxtb	r2, r3
   187f4:	697b      	ldr	r3, [r7, #20]
   187f6:	735a      	strb	r2, [r3, #13]

        ret = va_get(it->Arr, &tmp);
   187f8:	68fb      	ldr	r3, [r7, #12]
   187fa:	689b      	ldr	r3, [r3, #8]
   187fc:	f107 0210 	add.w	r2, r7, #16
   18800:	4611      	mov	r1, r2
   18802:	4618      	mov	r0, r3
   18804:	f00e fb0c 	bl	26e20 <va_get>
   18808:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1880a:	69fb      	ldr	r3, [r7, #28]
   1880c:	2b00      	cmp	r3, #0
   1880e:	d004      	beq.n	1881a <updateWeekProfileTable+0x10e>
        {
            gxfree(wp);
   18810:	6978      	ldr	r0, [r7, #20]
   18812:	f011 f91f 	bl	29a54 <free>
            return ret;
   18816:	69fb      	ldr	r3, [r7, #28]
   18818:	e07a      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   1881a:	693b      	ldr	r3, [r7, #16]
   1881c:	4618      	mov	r0, r3
   1881e:	f00e f955 	bl	26acc <var_toInteger>
   18822:	4603      	mov	r3, r0
   18824:	b2da      	uxtb	r2, r3
   18826:	697b      	ldr	r3, [r7, #20]
   18828:	739a      	strb	r2, [r3, #14]

        ret = va_get(it->Arr, &tmp);
   1882a:	68fb      	ldr	r3, [r7, #12]
   1882c:	689b      	ldr	r3, [r3, #8]
   1882e:	f107 0210 	add.w	r2, r7, #16
   18832:	4611      	mov	r1, r2
   18834:	4618      	mov	r0, r3
   18836:	f00e faf3 	bl	26e20 <va_get>
   1883a:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1883c:	69fb      	ldr	r3, [r7, #28]
   1883e:	2b00      	cmp	r3, #0
   18840:	d004      	beq.n	1884c <updateWeekProfileTable+0x140>
        {
            gxfree(wp);
   18842:	6978      	ldr	r0, [r7, #20]
   18844:	f011 f906 	bl	29a54 <free>
            return ret;
   18848:	69fb      	ldr	r3, [r7, #28]
   1884a:	e061      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->thursday = (unsigned char)var_toInteger(tmp);
   1884c:	693b      	ldr	r3, [r7, #16]
   1884e:	4618      	mov	r0, r3
   18850:	f00e f93c 	bl	26acc <var_toInteger>
   18854:	4603      	mov	r3, r0
   18856:	b2da      	uxtb	r2, r3
   18858:	697b      	ldr	r3, [r7, #20]
   1885a:	73da      	strb	r2, [r3, #15]

        ret = va_get(it->Arr, &tmp);
   1885c:	68fb      	ldr	r3, [r7, #12]
   1885e:	689b      	ldr	r3, [r3, #8]
   18860:	f107 0210 	add.w	r2, r7, #16
   18864:	4611      	mov	r1, r2
   18866:	4618      	mov	r0, r3
   18868:	f00e fada 	bl	26e20 <va_get>
   1886c:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1886e:	69fb      	ldr	r3, [r7, #28]
   18870:	2b00      	cmp	r3, #0
   18872:	d004      	beq.n	1887e <updateWeekProfileTable+0x172>
        {
            gxfree(wp);
   18874:	6978      	ldr	r0, [r7, #20]
   18876:	f011 f8ed 	bl	29a54 <free>
            return ret;
   1887a:	69fb      	ldr	r3, [r7, #28]
   1887c:	e048      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->friday = (unsigned char)var_toInteger(tmp);
   1887e:	693b      	ldr	r3, [r7, #16]
   18880:	4618      	mov	r0, r3
   18882:	f00e f923 	bl	26acc <var_toInteger>
   18886:	4603      	mov	r3, r0
   18888:	b2da      	uxtb	r2, r3
   1888a:	697b      	ldr	r3, [r7, #20]
   1888c:	741a      	strb	r2, [r3, #16]

        ret = va_get(it->Arr, &tmp);
   1888e:	68fb      	ldr	r3, [r7, #12]
   18890:	689b      	ldr	r3, [r3, #8]
   18892:	f107 0210 	add.w	r2, r7, #16
   18896:	4611      	mov	r1, r2
   18898:	4618      	mov	r0, r3
   1889a:	f00e fac1 	bl	26e20 <va_get>
   1889e:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   188a0:	69fb      	ldr	r3, [r7, #28]
   188a2:	2b00      	cmp	r3, #0
   188a4:	d004      	beq.n	188b0 <updateWeekProfileTable+0x1a4>
        {
            gxfree(wp);
   188a6:	6978      	ldr	r0, [r7, #20]
   188a8:	f011 f8d4 	bl	29a54 <free>
            return ret;
   188ac:	69fb      	ldr	r3, [r7, #28]
   188ae:	e02f      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->saturday = (unsigned char)var_toInteger(tmp);
   188b0:	693b      	ldr	r3, [r7, #16]
   188b2:	4618      	mov	r0, r3
   188b4:	f00e f90a 	bl	26acc <var_toInteger>
   188b8:	4603      	mov	r3, r0
   188ba:	b2da      	uxtb	r2, r3
   188bc:	697b      	ldr	r3, [r7, #20]
   188be:	745a      	strb	r2, [r3, #17]

        ret = va_get(it->Arr, &tmp);
   188c0:	68fb      	ldr	r3, [r7, #12]
   188c2:	689b      	ldr	r3, [r3, #8]
   188c4:	f107 0210 	add.w	r2, r7, #16
   188c8:	4611      	mov	r1, r2
   188ca:	4618      	mov	r0, r3
   188cc:	f00e faa8 	bl	26e20 <va_get>
   188d0:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   188d2:	69fb      	ldr	r3, [r7, #28]
   188d4:	2b00      	cmp	r3, #0
   188d6:	d004      	beq.n	188e2 <updateWeekProfileTable+0x1d6>
        {
            gxfree(wp);
   188d8:	6978      	ldr	r0, [r7, #20]
   188da:	f011 f8bb 	bl	29a54 <free>
            return ret;
   188de:	69fb      	ldr	r3, [r7, #28]
   188e0:	e016      	b.n	18910 <updateWeekProfileTable+0x204>
        }
        wp->sunday = (unsigned char)var_toInteger(tmp);
   188e2:	693b      	ldr	r3, [r7, #16]
   188e4:	4618      	mov	r0, r3
   188e6:	f00e f8f1 	bl	26acc <var_toInteger>
   188ea:	4603      	mov	r3, r0
   188ec:	b2da      	uxtb	r2, r3
   188ee:	697b      	ldr	r3, [r7, #20]
   188f0:	749a      	strb	r2, [r3, #18]
        arr_push(profile, wp);
   188f2:	6979      	ldr	r1, [r7, #20]
   188f4:	6878      	ldr	r0, [r7, #4]
   188f6:	f7f3 fec3 	bl	c680 <arr_push>
{
    int ret = DLMS_ERROR_CODE_OK, pos;
    gxWeekProfile* wp;
    dlmsVARIANT *tmp, *it;
    obj_clearWeekProfileTable(profile);
    for (pos = 0; pos != data->size; ++pos)
   188fa:	69bb      	ldr	r3, [r7, #24]
   188fc:	3301      	adds	r3, #1
   188fe:	61bb      	str	r3, [r7, #24]
   18900:	683b      	ldr	r3, [r7, #0]
   18902:	88db      	ldrh	r3, [r3, #6]
   18904:	461a      	mov	r2, r3
   18906:	69bb      	ldr	r3, [r7, #24]
   18908:	429a      	cmp	r2, r3
   1890a:	f47f af0c 	bne.w	18726 <updateWeekProfileTable+0x1a>
            return ret;
        }
        wp->sunday = (unsigned char)var_toInteger(tmp);
        arr_push(profile, wp);
    }
    return ret;
   1890e:	69fb      	ldr	r3, [r7, #28]
}
   18910:	4618      	mov	r0, r3
   18912:	3720      	adds	r7, #32
   18914:	46bd      	mov	sp, r7
   18916:	bdb0      	pop	{r4, r5, r7, pc}

00018918 <updateDayProfileTableActive>:

int updateDayProfileTableActive(gxArray* profile, variantArray* data)
{
   18918:	b580      	push	{r7, lr}
   1891a:	b090      	sub	sp, #64	; 0x40
   1891c:	af00      	add	r7, sp, #0
   1891e:	6078      	str	r0, [r7, #4]
   18920:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK, pos, pos2;
   18922:	2300      	movs	r3, #0
   18924:	63fb      	str	r3, [r7, #60]	; 0x3c
    dlmsVARIANT *tmp, *tmp2, *it, *it2;
    dlmsVARIANT tm;
    gxDayProfile* dp;
    gxDayProfileAction* ac;

    obj_clearDayProfileTable(profile);
   18926:	6878      	ldr	r0, [r7, #4]
   18928:	f7fe fb2e 	bl	16f88 <obj_clearDayProfileTable>
    for (pos = 0; pos != data->size; ++pos)
   1892c:	2300      	movs	r3, #0
   1892e:	63bb      	str	r3, [r7, #56]	; 0x38
   18930:	e0e7      	b.n	18b02 <updateDayProfileTableActive+0x1ea>
    {
        dp = (gxDayProfile*)gxmalloc(sizeof(gxDayProfile));
   18932:	2014      	movs	r0, #20
   18934:	f011 f886 	bl	29a44 <malloc>
   18938:	4603      	mov	r3, r0
   1893a:	633b      	str	r3, [r7, #48]	; 0x30
        arr_init(&dp->daySchedules);
   1893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1893e:	3304      	adds	r3, #4
   18940:	4618      	mov	r0, r3
   18942:	f7f3 fe53 	bl	c5ec <arr_init>
        ret = va_get(data, &it);
   18946:	f107 0320 	add.w	r3, r7, #32
   1894a:	4619      	mov	r1, r3
   1894c:	6838      	ldr	r0, [r7, #0]
   1894e:	f00e fa67 	bl	26e20 <va_get>
   18952:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != DLMS_ERROR_CODE_OK)
   18954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18956:	2b00      	cmp	r3, #0
   18958:	d004      	beq.n	18964 <updateDayProfileTableActive+0x4c>
        {
            gxfree(dp);
   1895a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1895c:	f011 f87a 	bl	29a54 <free>
            return ret;
   18960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18962:	e0d6      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
        }
        ret = va_get(it->Arr, &tmp);
   18964:	6a3b      	ldr	r3, [r7, #32]
   18966:	689b      	ldr	r3, [r3, #8]
   18968:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1896c:	4611      	mov	r1, r2
   1896e:	4618      	mov	r0, r3
   18970:	f00e fa56 	bl	26e20 <va_get>
   18974:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != DLMS_ERROR_CODE_OK)
   18976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18978:	2b00      	cmp	r3, #0
   1897a:	d004      	beq.n	18986 <updateDayProfileTableActive+0x6e>
        {
            gxfree(dp);
   1897c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1897e:	f011 f869 	bl	29a54 <free>
            return ret;
   18982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18984:	e0c5      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
        }
        dp->dayId = (unsigned char)var_toInteger(tmp);
   18986:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18988:	4618      	mov	r0, r3
   1898a:	f00e f89f 	bl	26acc <var_toInteger>
   1898e:	4603      	mov	r3, r0
   18990:	b2da      	uxtb	r2, r3
   18992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18994:	701a      	strb	r2, [r3, #0]
        ret = va_get(it->Arr, &tmp);
   18996:	6a3b      	ldr	r3, [r7, #32]
   18998:	689b      	ldr	r3, [r3, #8]
   1899a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1899e:	4611      	mov	r1, r2
   189a0:	4618      	mov	r0, r3
   189a2:	f00e fa3d 	bl	26e20 <va_get>
   189a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != DLMS_ERROR_CODE_OK)
   189a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189aa:	2b00      	cmp	r3, #0
   189ac:	d004      	beq.n	189b8 <updateDayProfileTableActive+0xa0>
        {
            gxfree(dp);
   189ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
   189b0:	f011 f850 	bl	29a54 <free>
            return ret;
   189b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189b6:	e0ac      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
        }
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   189b8:	2300      	movs	r3, #0
   189ba:	637b      	str	r3, [r7, #52]	; 0x34
   189bc:	e092      	b.n	18ae4 <updateDayProfileTableActive+0x1cc>
        {
            ac = (gxDayProfileAction*)gxmalloc(sizeof(gxDayProfileAction));
   189be:	2038      	movs	r0, #56	; 0x38
   189c0:	f011 f840 	bl	29a44 <malloc>
   189c4:	4603      	mov	r3, r0
   189c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            ret = va_get(tmp->Arr, &it2);
   189c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   189ca:	689b      	ldr	r3, [r3, #8]
   189cc:	f107 021c 	add.w	r2, r7, #28
   189d0:	4611      	mov	r1, r2
   189d2:	4618      	mov	r0, r3
   189d4:	f00e fa24 	bl	26e20 <va_get>
   189d8:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (ret != DLMS_ERROR_CODE_OK)
   189da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189dc:	2b00      	cmp	r3, #0
   189de:	d007      	beq.n	189f0 <updateDayProfileTableActive+0xd8>
            {
                gxfree(dp);
   189e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
   189e2:	f011 f837 	bl	29a54 <free>
                gxfree(ac);
   189e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   189e8:	f011 f834 	bl	29a54 <free>
                return ret;
   189ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   189ee:	e090      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
            }
            //Get start time.
            ret = va_get(it2->Arr, &tmp2);
   189f0:	69fb      	ldr	r3, [r7, #28]
   189f2:	689b      	ldr	r3, [r3, #8]
   189f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
   189f8:	4611      	mov	r1, r2
   189fa:	4618      	mov	r0, r3
   189fc:	f00e fa10 	bl	26e20 <va_get>
   18a00:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (ret != DLMS_ERROR_CODE_OK)
   18a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a04:	2b00      	cmp	r3, #0
   18a06:	d007      	beq.n	18a18 <updateDayProfileTableActive+0x100>
            {
                gxfree(dp);
   18a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
   18a0a:	f011 f823 	bl	29a54 <free>
                gxfree(ac);
   18a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18a10:	f011 f820 	bl	29a54 <free>
                return ret;
   18a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a16:	e07c      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
            }
            var_init(&tm);
   18a18:	f107 0308 	add.w	r3, r7, #8
   18a1c:	4618      	mov	r0, r3
   18a1e:	f00d fb83 	bl	26128 <var_init>
            ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &tm);
   18a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a24:	f107 0208 	add.w	r2, r7, #8
   18a28:	211b      	movs	r1, #27
   18a2a:	4618      	mov	r0, r3
   18a2c:	f7f0 feee 	bl	980c <dlms_changeType2>
   18a30:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (ret != DLMS_ERROR_CODE_OK)
   18a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a34:	2b00      	cmp	r3, #0
   18a36:	d007      	beq.n	18a48 <updateDayProfileTableActive+0x130>
            {
                gxfree(dp);
   18a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
   18a3a:	f011 f80b 	bl	29a54 <free>
                gxfree(ac);
   18a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18a40:	f011 f808 	bl	29a54 <free>
                return ret;
   18a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a46:	e064      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
            }
            time_copy(&ac->startTime, tm.dateTime);
   18a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18a4a:	693a      	ldr	r2, [r7, #16]
   18a4c:	4611      	mov	r1, r2
   18a4e:	4618      	mov	r0, r3
   18a50:	f7ed ff80 	bl	6954 <time_copy>
            var_clear(&tm);
   18a54:	f107 0308 	add.w	r3, r7, #8
   18a58:	4618      	mov	r0, r3
   18a5a:	f00d fb75 	bl	26148 <var_clear>
            //Get script logical name.
            ret = va_get(it2->Arr, &tmp2);
   18a5e:	69fb      	ldr	r3, [r7, #28]
   18a60:	689b      	ldr	r3, [r3, #8]
   18a62:	f107 0224 	add.w	r2, r7, #36	; 0x24
   18a66:	4611      	mov	r1, r2
   18a68:	4618      	mov	r0, r3
   18a6a:	f00e f9d9 	bl	26e20 <va_get>
   18a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (ret != DLMS_ERROR_CODE_OK)
   18a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a72:	2b00      	cmp	r3, #0
   18a74:	d007      	beq.n	18a86 <updateDayProfileTableActive+0x16e>
            {
                gxfree(dp);
   18a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
   18a78:	f010 ffec 	bl	29a54 <free>
                gxfree(ac);
   18a7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18a7e:	f010 ffe9 	bl	29a54 <free>
                return ret;
   18a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18a84:	e045      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
            }
            memcpy(ac->scriptLogicalName, tmp2->byteArr->data, 6);
   18a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18a88:	f103 0030 	add.w	r0, r3, #48	; 0x30
   18a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a8e:	689b      	ldr	r3, [r3, #8]
   18a90:	681b      	ldr	r3, [r3, #0]
   18a92:	2206      	movs	r2, #6
   18a94:	4619      	mov	r1, r3
   18a96:	f010 fff4 	bl	29a82 <memcpy>
            ret = va_get(it2->Arr, &tmp2);
   18a9a:	69fb      	ldr	r3, [r7, #28]
   18a9c:	689b      	ldr	r3, [r3, #8]
   18a9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
   18aa2:	4611      	mov	r1, r2
   18aa4:	4618      	mov	r0, r3
   18aa6:	f00e f9bb 	bl	26e20 <va_get>
   18aaa:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (ret != DLMS_ERROR_CODE_OK)
   18aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18aae:	2b00      	cmp	r3, #0
   18ab0:	d007      	beq.n	18ac2 <updateDayProfileTableActive+0x1aa>
            {
                gxfree(dp);
   18ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   18ab4:	f010 ffce 	bl	29a54 <free>
                gxfree(ac);
   18ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18aba:	f010 ffcb 	bl	29a54 <free>
                return ret;
   18abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18ac0:	e027      	b.n	18b12 <updateDayProfileTableActive+0x1fa>
            }
            ac->scriptSelector = (unsigned short)var_toInteger(tmp2);
   18ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ac4:	4618      	mov	r0, r3
   18ac6:	f00e f801 	bl	26acc <var_toInteger>
   18aca:	4603      	mov	r3, r0
   18acc:	b29a      	uxth	r2, r3
   18ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18ad0:	86da      	strh	r2, [r3, #54]	; 0x36
            arr_push(&dp->daySchedules, ac);
   18ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ad4:	3304      	adds	r3, #4
   18ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   18ad8:	4618      	mov	r0, r3
   18ada:	f7f3 fdd1 	bl	c680 <arr_push>
        if (ret != DLMS_ERROR_CODE_OK)
        {
            gxfree(dp);
            return ret;
        }
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   18ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18ae0:	3301      	adds	r3, #1
   18ae2:	637b      	str	r3, [r7, #52]	; 0x34
   18ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18ae6:	689b      	ldr	r3, [r3, #8]
   18ae8:	88db      	ldrh	r3, [r3, #6]
   18aea:	461a      	mov	r2, r3
   18aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18aee:	429a      	cmp	r2, r3
   18af0:	f47f af65 	bne.w	189be <updateDayProfileTableActive+0xa6>
                return ret;
            }
            ac->scriptSelector = (unsigned short)var_toInteger(tmp2);
            arr_push(&dp->daySchedules, ac);
        }
        arr_push(profile, dp);
   18af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   18af6:	6878      	ldr	r0, [r7, #4]
   18af8:	f7f3 fdc2 	bl	c680 <arr_push>
    dlmsVARIANT tm;
    gxDayProfile* dp;
    gxDayProfileAction* ac;

    obj_clearDayProfileTable(profile);
    for (pos = 0; pos != data->size; ++pos)
   18afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18afe:	3301      	adds	r3, #1
   18b00:	63bb      	str	r3, [r7, #56]	; 0x38
   18b02:	683b      	ldr	r3, [r7, #0]
   18b04:	88db      	ldrh	r3, [r3, #6]
   18b06:	461a      	mov	r2, r3
   18b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18b0a:	429a      	cmp	r2, r3
   18b0c:	f47f af11 	bne.w	18932 <updateDayProfileTableActive+0x1a>
            ac->scriptSelector = (unsigned short)var_toInteger(tmp2);
            arr_push(&dp->daySchedules, ac);
        }
        arr_push(profile, dp);
    }
    return ret;
   18b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   18b12:	4618      	mov	r0, r3
   18b14:	3740      	adds	r7, #64	; 0x40
   18b16:	46bd      	mov	sp, r7
   18b18:	bd80      	pop	{r7, pc}
   18b1a:	bf00      	nop

00018b1c <cosem_setActivityCalendar>:

int cosem_setActivityCalendar(gxActivityCalendar* object, unsigned char index, dlmsVARIANT *value)
{
   18b1c:	b5b0      	push	{r4, r5, r7, lr}
   18b1e:	b08a      	sub	sp, #40	; 0x28
   18b20:	af00      	add	r7, sp, #0
   18b22:	60f8      	str	r0, [r7, #12]
   18b24:	460b      	mov	r3, r1
   18b26:	607a      	str	r2, [r7, #4]
   18b28:	72fb      	strb	r3, [r7, #11]
    int ret = DLMS_ERROR_CODE_OK;
   18b2a:	2300      	movs	r3, #0
   18b2c:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT tm;
    if (index == 2)
   18b2e:	7afb      	ldrb	r3, [r7, #11]
   18b30:	2b02      	cmp	r3, #2
   18b32:	d115      	bne.n	18b60 <cosem_setActivityCalendar+0x44>
    {
        bb_clear(&object->calendarNameActive);
   18b34:	68fb      	ldr	r3, [r7, #12]
   18b36:	3310      	adds	r3, #16
   18b38:	4618      	mov	r0, r3
   18b3a:	f7ea fe13 	bl	3764 <bb_clear>
        bb_set2(&object->calendarNameActive, value->byteArr, 0, bb_size(value->byteArr));
   18b3e:	68fb      	ldr	r3, [r7, #12]
   18b40:	f103 0410 	add.w	r4, r3, #16
   18b44:	687b      	ldr	r3, [r7, #4]
   18b46:	689d      	ldr	r5, [r3, #8]
   18b48:	687b      	ldr	r3, [r7, #4]
   18b4a:	689b      	ldr	r3, [r3, #8]
   18b4c:	4618      	mov	r0, r3
   18b4e:	f7ea f8bb 	bl	2cc8 <bb_size>
   18b52:	4603      	mov	r3, r0
   18b54:	2200      	movs	r2, #0
   18b56:	4629      	mov	r1, r5
   18b58:	4620      	mov	r0, r4
   18b5a:	f7ea fd61 	bl	3620 <bb_set2>
   18b5e:	e09f      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 3)
   18b60:	7afb      	ldrb	r3, [r7, #11]
   18b62:	2b03      	cmp	r3, #3
   18b64:	d10a      	bne.n	18b7c <cosem_setActivityCalendar+0x60>
    {
        ret = updateSeasonProfile(&object->seasonProfileActive, value->Arr);
   18b66:	68fb      	ldr	r3, [r7, #12]
   18b68:	f103 0228 	add.w	r2, r3, #40	; 0x28
   18b6c:	687b      	ldr	r3, [r7, #4]
   18b6e:	689b      	ldr	r3, [r3, #8]
   18b70:	4619      	mov	r1, r3
   18b72:	4610      	mov	r0, r2
   18b74:	f7ff fd1a 	bl	185ac <updateSeasonProfile>
   18b78:	6278      	str	r0, [r7, #36]	; 0x24
   18b7a:	e091      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 4)
   18b7c:	7afb      	ldrb	r3, [r7, #11]
   18b7e:	2b04      	cmp	r3, #4
   18b80:	d10a      	bne.n	18b98 <cosem_setActivityCalendar+0x7c>
    {
        ret = updateWeekProfileTable(&object->weekProfileTableActive, value->Arr);
   18b82:	68fb      	ldr	r3, [r7, #12]
   18b84:	f103 0238 	add.w	r2, r3, #56	; 0x38
   18b88:	687b      	ldr	r3, [r7, #4]
   18b8a:	689b      	ldr	r3, [r3, #8]
   18b8c:	4619      	mov	r1, r3
   18b8e:	4610      	mov	r0, r2
   18b90:	f7ff fdbc 	bl	1870c <updateWeekProfileTable>
   18b94:	6278      	str	r0, [r7, #36]	; 0x24
   18b96:	e083      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 5)
   18b98:	7afb      	ldrb	r3, [r7, #11]
   18b9a:	2b05      	cmp	r3, #5
   18b9c:	d10a      	bne.n	18bb4 <cosem_setActivityCalendar+0x98>
    {
        ret = updateDayProfileTableActive(&object->dayProfileTableActive, value->Arr);
   18b9e:	68fb      	ldr	r3, [r7, #12]
   18ba0:	f103 0248 	add.w	r2, r3, #72	; 0x48
   18ba4:	687b      	ldr	r3, [r7, #4]
   18ba6:	689b      	ldr	r3, [r3, #8]
   18ba8:	4619      	mov	r1, r3
   18baa:	4610      	mov	r0, r2
   18bac:	f7ff feb4 	bl	18918 <updateDayProfileTableActive>
   18bb0:	6278      	str	r0, [r7, #36]	; 0x24
   18bb2:	e075      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 6)
   18bb4:	7afb      	ldrb	r3, [r7, #11]
   18bb6:	2b06      	cmp	r3, #6
   18bb8:	d115      	bne.n	18be6 <cosem_setActivityCalendar+0xca>
    {
        bb_clear(&object->calendarNamePassive);
   18bba:	68fb      	ldr	r3, [r7, #12]
   18bbc:	331c      	adds	r3, #28
   18bbe:	4618      	mov	r0, r3
   18bc0:	f7ea fdd0 	bl	3764 <bb_clear>
        bb_set2(&object->calendarNamePassive, value->byteArr, 0, bb_size(value->byteArr));
   18bc4:	68fb      	ldr	r3, [r7, #12]
   18bc6:	f103 041c 	add.w	r4, r3, #28
   18bca:	687b      	ldr	r3, [r7, #4]
   18bcc:	689d      	ldr	r5, [r3, #8]
   18bce:	687b      	ldr	r3, [r7, #4]
   18bd0:	689b      	ldr	r3, [r3, #8]
   18bd2:	4618      	mov	r0, r3
   18bd4:	f7ea f878 	bl	2cc8 <bb_size>
   18bd8:	4603      	mov	r3, r0
   18bda:	2200      	movs	r2, #0
   18bdc:	4629      	mov	r1, r5
   18bde:	4620      	mov	r0, r4
   18be0:	f7ea fd1e 	bl	3620 <bb_set2>
   18be4:	e05c      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 7)
   18be6:	7afb      	ldrb	r3, [r7, #11]
   18be8:	2b07      	cmp	r3, #7
   18bea:	d10a      	bne.n	18c02 <cosem_setActivityCalendar+0xe6>
    {
        ret = updateSeasonProfile(&object->seasonProfilePassive, value->Arr);
   18bec:	68fb      	ldr	r3, [r7, #12]
   18bee:	f103 0258 	add.w	r2, r3, #88	; 0x58
   18bf2:	687b      	ldr	r3, [r7, #4]
   18bf4:	689b      	ldr	r3, [r3, #8]
   18bf6:	4619      	mov	r1, r3
   18bf8:	4610      	mov	r0, r2
   18bfa:	f7ff fcd7 	bl	185ac <updateSeasonProfile>
   18bfe:	6278      	str	r0, [r7, #36]	; 0x24
   18c00:	e04e      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 8)
   18c02:	7afb      	ldrb	r3, [r7, #11]
   18c04:	2b08      	cmp	r3, #8
   18c06:	d10a      	bne.n	18c1e <cosem_setActivityCalendar+0x102>
    {
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value->Arr);
   18c08:	68fb      	ldr	r3, [r7, #12]
   18c0a:	f103 0278 	add.w	r2, r3, #120	; 0x78
   18c0e:	687b      	ldr	r3, [r7, #4]
   18c10:	689b      	ldr	r3, [r3, #8]
   18c12:	4619      	mov	r1, r3
   18c14:	4610      	mov	r0, r2
   18c16:	f7ff fd79 	bl	1870c <updateWeekProfileTable>
   18c1a:	6278      	str	r0, [r7, #36]	; 0x24
   18c1c:	e040      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 9)
   18c1e:	7afb      	ldrb	r3, [r7, #11]
   18c20:	2b09      	cmp	r3, #9
   18c22:	d10a      	bne.n	18c3a <cosem_setActivityCalendar+0x11e>
    {
        ret = updateDayProfileTableActive(&object->dayProfileTablePassive, value->Arr);
   18c24:	68fb      	ldr	r3, [r7, #12]
   18c26:	f103 0268 	add.w	r2, r3, #104	; 0x68
   18c2a:	687b      	ldr	r3, [r7, #4]
   18c2c:	689b      	ldr	r3, [r3, #8]
   18c2e:	4619      	mov	r1, r3
   18c30:	4610      	mov	r0, r2
   18c32:	f7ff fe71 	bl	18918 <updateDayProfileTableActive>
   18c36:	6278      	str	r0, [r7, #36]	; 0x24
   18c38:	e032      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
    }
    else if (index == 10)
   18c3a:	7afb      	ldrb	r3, [r7, #11]
   18c3c:	2b0a      	cmp	r3, #10
   18c3e:	d12c      	bne.n	18c9a <cosem_setActivityCalendar+0x17e>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   18c40:	687b      	ldr	r3, [r7, #4]
   18c42:	781b      	ldrb	r3, [r3, #0]
   18c44:	2b09      	cmp	r3, #9
   18c46:	d122      	bne.n	18c8e <cosem_setActivityCalendar+0x172>
   18c48:	687b      	ldr	r3, [r7, #4]
   18c4a:	689b      	ldr	r3, [r3, #8]
   18c4c:	2b00      	cmp	r3, #0
   18c4e:	d01e      	beq.n	18c8e <cosem_setActivityCalendar+0x172>
        {
            var_init(&tm);
   18c50:	f107 0310 	add.w	r3, r7, #16
   18c54:	4618      	mov	r0, r3
   18c56:	f00d fa67 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tm);
   18c5a:	f107 0310 	add.w	r3, r7, #16
   18c5e:	461a      	mov	r2, r3
   18c60:	2119      	movs	r1, #25
   18c62:	6878      	ldr	r0, [r7, #4]
   18c64:	f7f0 fdd2 	bl	980c <dlms_changeType2>
   18c68:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   18c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18c6c:	2b00      	cmp	r3, #0
   18c6e:	d001      	beq.n	18c74 <cosem_setActivityCalendar+0x158>
            {
                return ret;
   18c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18c72:	e016      	b.n	18ca2 <cosem_setActivityCalendar+0x186>
            }
            time_copy(&object->time, tm.dateTime);
   18c74:	68fb      	ldr	r3, [r7, #12]
   18c76:	3388      	adds	r3, #136	; 0x88
   18c78:	69ba      	ldr	r2, [r7, #24]
   18c7a:	4611      	mov	r1, r2
   18c7c:	4618      	mov	r0, r3
   18c7e:	f7ed fe69 	bl	6954 <time_copy>
            var_clear(&tm);
   18c82:	f107 0310 	add.w	r3, r7, #16
   18c86:	4618      	mov	r0, r3
   18c88:	f00d fa5e 	bl	26148 <var_clear>
   18c8c:	e008      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
        }
        else
        {
            time_clear(&object->time);
   18c8e:	68fb      	ldr	r3, [r7, #12]
   18c90:	3388      	adds	r3, #136	; 0x88
   18c92:	4618      	mov	r0, r3
   18c94:	f7ed fbda 	bl	644c <time_clear>
   18c98:	e002      	b.n	18ca0 <cosem_setActivityCalendar+0x184>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18c9a:	f44f 7381 	mov.w	r3, #258	; 0x102
   18c9e:	e000      	b.n	18ca2 <cosem_setActivityCalendar+0x186>
    }
    return ret;
   18ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   18ca2:	4618      	mov	r0, r3
   18ca4:	3728      	adds	r7, #40	; 0x28
   18ca6:	46bd      	mov	sp, r7
   18ca8:	bdb0      	pop	{r4, r5, r7, pc}
   18caa:	bf00      	nop

00018cac <cosem_setActionSchedule>:
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
int cosem_setActionSchedule(
    gxActionSchedule* object,
    unsigned char index,
    dlmsVARIANT *value)
{
   18cac:	b580      	push	{r7, lr}
   18cae:	b092      	sub	sp, #72	; 0x48
   18cb0:	af00      	add	r7, sp, #0
   18cb2:	60f8      	str	r0, [r7, #12]
   18cb4:	460b      	mov	r3, r1
   18cb6:	607a      	str	r2, [r7, #4]
   18cb8:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp2;
    dlmsVARIANT time, date;
    gxtime* tm;
    if (index == 2)
   18cba:	7afb      	ldrb	r3, [r7, #11]
   18cbc:	2b02      	cmp	r3, #2
   18cbe:	d12e      	bne.n	18d1e <cosem_setActionSchedule+0x72>
    {
        ret = va_get(value->Arr, &tmp);
   18cc0:	687b      	ldr	r3, [r7, #4]
   18cc2:	689b      	ldr	r3, [r3, #8]
   18cc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   18cc8:	4611      	mov	r1, r2
   18cca:	4618      	mov	r0, r3
   18ccc:	f00e f8a8 	bl	26e20 <va_get>
   18cd0:	6438      	str	r0, [r7, #64]	; 0x40
        if (ret != DLMS_ERROR_CODE_OK)
   18cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18cd4:	2b00      	cmp	r3, #0
   18cd6:	d001      	beq.n	18cdc <cosem_setActionSchedule+0x30>
        {
            return ret;
   18cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18cda:	e0c7      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
        }
        memcpy(object->executedScriptLogicalName, tmp->byteArr->data, 6);
   18cdc:	68fb      	ldr	r3, [r7, #12]
   18cde:	f103 0010 	add.w	r0, r3, #16
   18ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18ce4:	689b      	ldr	r3, [r3, #8]
   18ce6:	681b      	ldr	r3, [r3, #0]
   18ce8:	2206      	movs	r2, #6
   18cea:	4619      	mov	r1, r3
   18cec:	f010 fec9 	bl	29a82 <memcpy>
        ret = va_get(value->Arr, &tmp);
   18cf0:	687b      	ldr	r3, [r7, #4]
   18cf2:	689b      	ldr	r3, [r3, #8]
   18cf4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   18cf8:	4611      	mov	r1, r2
   18cfa:	4618      	mov	r0, r3
   18cfc:	f00e f890 	bl	26e20 <va_get>
   18d00:	6438      	str	r0, [r7, #64]	; 0x40
        if (ret != DLMS_ERROR_CODE_OK)
   18d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d04:	2b00      	cmp	r3, #0
   18d06:	d001      	beq.n	18d0c <cosem_setActionSchedule+0x60>
        {
            return ret;
   18d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d0a:	e0af      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
        }
        object->executedScriptSelector = (unsigned short)var_toInteger(tmp);
   18d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18d0e:	4618      	mov	r0, r3
   18d10:	f00d fedc 	bl	26acc <var_toInteger>
   18d14:	4603      	mov	r3, r0
   18d16:	b29a      	uxth	r2, r3
   18d18:	68fb      	ldr	r3, [r7, #12]
   18d1a:	82da      	strh	r2, [r3, #22]
   18d1c:	e0a5      	b.n	18e6a <cosem_setActionSchedule+0x1be>
    }
    else if (index == 3)
   18d1e:	7afb      	ldrb	r3, [r7, #11]
   18d20:	2b03      	cmp	r3, #3
   18d22:	d107      	bne.n	18d34 <cosem_setActionSchedule+0x88>
    {
        object->type = (DLMS_SINGLE_ACTION_SCHEDULE_TYPE)var_toInteger(value);
   18d24:	6878      	ldr	r0, [r7, #4]
   18d26:	f00d fed1 	bl	26acc <var_toInteger>
   18d2a:	4603      	mov	r3, r0
   18d2c:	b2da      	uxtb	r2, r3
   18d2e:	68fb      	ldr	r3, [r7, #12]
   18d30:	761a      	strb	r2, [r3, #24]
   18d32:	e09a      	b.n	18e6a <cosem_setActionSchedule+0x1be>
    }
    else if (index == 4)
   18d34:	7afb      	ldrb	r3, [r7, #11]
   18d36:	2b04      	cmp	r3, #4
   18d38:	f040 8094 	bne.w	18e64 <cosem_setActionSchedule+0x1b8>
    {
        arr_clear(&object->executionTime);
   18d3c:	68fb      	ldr	r3, [r7, #12]
   18d3e:	331c      	adds	r3, #28
   18d40:	4618      	mov	r0, r3
   18d42:	f7f3 fce5 	bl	c710 <arr_clear>
        var_init(&time);
   18d46:	f107 0320 	add.w	r3, r7, #32
   18d4a:	4618      	mov	r0, r3
   18d4c:	f00d f9ec 	bl	26128 <var_init>
        var_init(&date);
   18d50:	f107 0310 	add.w	r3, r7, #16
   18d54:	4618      	mov	r0, r3
   18d56:	f00d f9e7 	bl	26128 <var_init>
        if (value->Arr != NULL)
   18d5a:	687b      	ldr	r3, [r7, #4]
   18d5c:	689b      	ldr	r3, [r3, #8]
   18d5e:	2b00      	cmp	r3, #0
   18d60:	f000 8083 	beq.w	18e6a <cosem_setActionSchedule+0x1be>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   18d64:	2300      	movs	r3, #0
   18d66:	647b      	str	r3, [r7, #68]	; 0x44
   18d68:	e074      	b.n	18e54 <cosem_setActionSchedule+0x1a8>
            {
                ret = va_get(value->Arr, &tmp);
   18d6a:	687b      	ldr	r3, [r7, #4]
   18d6c:	689b      	ldr	r3, [r3, #8]
   18d6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
   18d72:	4611      	mov	r1, r2
   18d74:	4618      	mov	r0, r3
   18d76:	f00e f853 	bl	26e20 <va_get>
   18d7a:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   18d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d7e:	2b00      	cmp	r3, #0
   18d80:	d001      	beq.n	18d86 <cosem_setActionSchedule+0xda>
                {
                    return ret;
   18d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d84:	e072      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
                }
                ret = va_get(tmp->Arr, &tmp2);
   18d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18d88:	689b      	ldr	r3, [r3, #8]
   18d8a:	f107 0234 	add.w	r2, r7, #52	; 0x34
   18d8e:	4611      	mov	r1, r2
   18d90:	4618      	mov	r0, r3
   18d92:	f00e f845 	bl	26e20 <va_get>
   18d96:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   18d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18d9a:	2b00      	cmp	r3, #0
   18d9c:	d001      	beq.n	18da2 <cosem_setActionSchedule+0xf6>
                {
                    return ret;
   18d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18da0:	e064      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
                }

                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &time);
   18da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18da4:	f107 0220 	add.w	r2, r7, #32
   18da8:	211b      	movs	r1, #27
   18daa:	4618      	mov	r0, r3
   18dac:	f7f0 fd2e 	bl	980c <dlms_changeType2>
   18db0:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   18db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18db4:	2b00      	cmp	r3, #0
   18db6:	d001      	beq.n	18dbc <cosem_setActionSchedule+0x110>
                {
                    return ret;
   18db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18dba:	e057      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
                }
                ret = va_get(tmp->Arr, &tmp2);
   18dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18dbe:	689b      	ldr	r3, [r3, #8]
   18dc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
   18dc4:	4611      	mov	r1, r2
   18dc6:	4618      	mov	r0, r3
   18dc8:	f00e f82a 	bl	26e20 <va_get>
   18dcc:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   18dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18dd0:	2b00      	cmp	r3, #0
   18dd2:	d001      	beq.n	18dd8 <cosem_setActionSchedule+0x12c>
                {
                    return ret;
   18dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18dd6:	e049      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
                }
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_DATE, &date);
   18dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18dda:	f107 0210 	add.w	r2, r7, #16
   18dde:	211a      	movs	r1, #26
   18de0:	4618      	mov	r0, r3
   18de2:	f7f0 fd13 	bl	980c <dlms_changeType2>
   18de6:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   18de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18dea:	2b00      	cmp	r3, #0
   18dec:	d001      	beq.n	18df2 <cosem_setActionSchedule+0x146>
                {
                    return ret;
   18dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18df0:	e03c      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
                }
                date.dateTime->value.tm_hour = time.dateTime->value.tm_hour;
   18df2:	69bb      	ldr	r3, [r7, #24]
   18df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18df6:	68d2      	ldr	r2, [r2, #12]
   18df8:	60da      	str	r2, [r3, #12]
                date.dateTime->value.tm_min = time.dateTime->value.tm_min;
   18dfa:	69bb      	ldr	r3, [r7, #24]
   18dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18dfe:	6892      	ldr	r2, [r2, #8]
   18e00:	609a      	str	r2, [r3, #8]
                date.dateTime->value.tm_sec = time.dateTime->value.tm_sec;
   18e02:	69bb      	ldr	r3, [r7, #24]
   18e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18e06:	6852      	ldr	r2, [r2, #4]
   18e08:	605a      	str	r2, [r3, #4]
                date.dateTime->skip = (DATETIME_SKIPS)(date.dateTime->skip & time.dateTime->skip);
   18e0a:	69bb      	ldr	r3, [r7, #24]
   18e0c:	69ba      	ldr	r2, [r7, #24]
   18e0e:	7811      	ldrb	r1, [r2, #0]
   18e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18e12:	7812      	ldrb	r2, [r2, #0]
   18e14:	400a      	ands	r2, r1
   18e16:	b2d2      	uxtb	r2, r2
   18e18:	701a      	strb	r2, [r3, #0]
                tm = (gxtime*)gxmalloc(sizeof(gxtime));
   18e1a:	2030      	movs	r0, #48	; 0x30
   18e1c:	f010 fe12 	bl	29a44 <malloc>
   18e20:	4603      	mov	r3, r0
   18e22:	63fb      	str	r3, [r7, #60]	; 0x3c
                time_copy(tm, date.dateTime);
   18e24:	69bb      	ldr	r3, [r7, #24]
   18e26:	4619      	mov	r1, r3
   18e28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   18e2a:	f7ed fd93 	bl	6954 <time_copy>
                arr_push(&object->executionTime, tm);
   18e2e:	68fb      	ldr	r3, [r7, #12]
   18e30:	331c      	adds	r3, #28
   18e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   18e34:	4618      	mov	r0, r3
   18e36:	f7f3 fc23 	bl	c680 <arr_push>
                var_clear(&time);
   18e3a:	f107 0320 	add.w	r3, r7, #32
   18e3e:	4618      	mov	r0, r3
   18e40:	f00d f982 	bl	26148 <var_clear>
                var_clear(&date);
   18e44:	f107 0310 	add.w	r3, r7, #16
   18e48:	4618      	mov	r0, r3
   18e4a:	f00d f97d 	bl	26148 <var_clear>
        arr_clear(&object->executionTime);
        var_init(&time);
        var_init(&date);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   18e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18e50:	3301      	adds	r3, #1
   18e52:	647b      	str	r3, [r7, #68]	; 0x44
   18e54:	687b      	ldr	r3, [r7, #4]
   18e56:	689b      	ldr	r3, [r3, #8]
   18e58:	88db      	ldrh	r3, [r3, #6]
   18e5a:	461a      	mov	r2, r3
   18e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18e5e:	429a      	cmp	r2, r3
   18e60:	d183      	bne.n	18d6a <cosem_setActionSchedule+0xbe>
   18e62:	e002      	b.n	18e6a <cosem_setActionSchedule+0x1be>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18e64:	f44f 7381 	mov.w	r3, #258	; 0x102
   18e68:	e000      	b.n	18e6c <cosem_setActionSchedule+0x1c0>
    }
    return DLMS_ERROR_CODE_OK;
   18e6a:	2300      	movs	r3, #0
}
   18e6c:	4618      	mov	r0, r3
   18e6e:	3748      	adds	r7, #72	; 0x48
   18e70:	46bd      	mov	sp, r7
   18e72:	bd80      	pop	{r7, pc}

00018e74 <cosem_setAssociationLogicalName>:
int cosem_setAssociationLogicalName(
    dlmsSettings* settings,
    gxAssociationLogicalName* object,
    unsigned char index,
    dlmsVARIANT *value)
{
   18e74:	b580      	push	{r7, lr}
   18e76:	b08e      	sub	sp, #56	; 0x38
   18e78:	af00      	add	r7, sp, #0
   18e7a:	60f8      	str	r0, [r7, #12]
   18e7c:	60b9      	str	r1, [r7, #8]
   18e7e:	603b      	str	r3, [r7, #0]
   18e80:	4613      	mov	r3, r2
   18e82:	71fb      	strb	r3, [r7, #7]
    int ret, pos = 0, version;
   18e84:	2300      	movs	r3, #0
   18e86:	637b      	str	r3, [r7, #52]	; 0x34
    dlmsVARIANT *tmp, *tmp2;
    //gxByteBuffer bb;
    DLMS_OBJECT_TYPE type;
    gxObject* obj = NULL;
   18e88:	2300      	movs	r3, #0
   18e8a:	61bb      	str	r3, [r7, #24]
    unsigned char ch;
    if (index == 2)
   18e8c:	79fb      	ldrb	r3, [r7, #7]
   18e8e:	2b02      	cmp	r3, #2
   18e90:	f040 80c1 	bne.w	19016 <cosem_setAssociationLogicalName+0x1a2>
    {
        oa_empty(&object->objectList);
   18e94:	68bb      	ldr	r3, [r7, #8]
   18e96:	3314      	adds	r3, #20
   18e98:	4618      	mov	r0, r3
   18e9a:	f009 f9ad 	bl	221f8 <oa_empty>
        if (value->Arr != NULL)
   18e9e:	683b      	ldr	r3, [r7, #0]
   18ea0:	689b      	ldr	r3, [r3, #8]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	f000 86da 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   18ea8:	2300      	movs	r3, #0
   18eaa:	637b      	str	r3, [r7, #52]	; 0x34
   18eac:	e0a9      	b.n	19002 <cosem_setAssociationLogicalName+0x18e>
            {
                ret = va_get(value->Arr, &tmp);
   18eae:	683b      	ldr	r3, [r7, #0]
   18eb0:	689b      	ldr	r3, [r3, #8]
   18eb2:	f107 0220 	add.w	r2, r7, #32
   18eb6:	4611      	mov	r1, r2
   18eb8:	4618      	mov	r0, r3
   18eba:	f00d ffb1 	bl	26e20 <va_get>
   18ebe:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ec2:	2b00      	cmp	r3, #0
   18ec4:	d002      	beq.n	18ecc <cosem_setAssociationLogicalName+0x58>
                {
                    return ret;
   18ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ec8:	f000 bec9 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = va_get(tmp->Arr, &tmp2);
   18ecc:	6a3b      	ldr	r3, [r7, #32]
   18ece:	689b      	ldr	r3, [r3, #8]
   18ed0:	f107 021c 	add.w	r2, r7, #28
   18ed4:	4611      	mov	r1, r2
   18ed6:	4618      	mov	r0, r3
   18ed8:	f00d ffa2 	bl	26e20 <va_get>
   18edc:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ee0:	2b00      	cmp	r3, #0
   18ee2:	d002      	beq.n	18eea <cosem_setAssociationLogicalName+0x76>
                {
                    return ret;
   18ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18ee6:	f000 beba 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   18eea:	69fb      	ldr	r3, [r7, #28]
   18eec:	4618      	mov	r0, r3
   18eee:	f00d fded 	bl	26acc <var_toInteger>
   18ef2:	4603      	mov	r3, r0
   18ef4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                ret = va_get(tmp->Arr, &tmp2);
   18ef6:	6a3b      	ldr	r3, [r7, #32]
   18ef8:	689b      	ldr	r3, [r3, #8]
   18efa:	f107 021c 	add.w	r2, r7, #28
   18efe:	4611      	mov	r1, r2
   18f00:	4618      	mov	r0, r3
   18f02:	f00d ff8d 	bl	26e20 <va_get>
   18f06:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f0a:	2b00      	cmp	r3, #0
   18f0c:	d002      	beq.n	18f14 <cosem_setAssociationLogicalName+0xa0>
                {
                    return ret;
   18f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f10:	f000 bea5 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                version = var_toInteger(tmp2);
   18f14:	69fb      	ldr	r3, [r7, #28]
   18f16:	4618      	mov	r0, r3
   18f18:	f00d fdd8 	bl	26acc <var_toInteger>
   18f1c:	62b8      	str	r0, [r7, #40]	; 0x28

                //Get Logical name.
                ret = va_get(tmp->Arr, &tmp2);
   18f1e:	6a3b      	ldr	r3, [r7, #32]
   18f20:	689b      	ldr	r3, [r3, #8]
   18f22:	f107 021c 	add.w	r2, r7, #28
   18f26:	4611      	mov	r1, r2
   18f28:	4618      	mov	r0, r3
   18f2a:	f00d ff79 	bl	26e20 <va_get>
   18f2e:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f32:	2b00      	cmp	r3, #0
   18f34:	d002      	beq.n	18f3c <cosem_setAssociationLogicalName+0xc8>
                {
                    return ret;
   18f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f38:	f000 be91 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   18f3c:	68fb      	ldr	r3, [r7, #12]
   18f3e:	f103 0074 	add.w	r0, r3, #116	; 0x74
   18f42:	69fb      	ldr	r3, [r7, #28]
   18f44:	689b      	ldr	r3, [r3, #8]
   18f46:	681a      	ldr	r2, [r3, #0]
   18f48:	f107 0318 	add.w	r3, r7, #24
   18f4c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
   18f4e:	f009 f9cb 	bl	222e8 <oa_findByLN>
   18f52:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f56:	2b00      	cmp	r3, #0
   18f58:	d002      	beq.n	18f60 <cosem_setAssociationLogicalName+0xec>
                {
                    return ret;
   18f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f5c:	f000 be7f 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                if (obj == NULL)
   18f60:	69bb      	ldr	r3, [r7, #24]
   18f62:	2b00      	cmp	r3, #0
   18f64:	d124      	bne.n	18fb0 <cosem_setAssociationLogicalName+0x13c>
                {
                    ret = cosem_createObject(type, &obj);
   18f66:	f107 0218 	add.w	r2, r7, #24
   18f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   18f6c:	4611      	mov	r1, r2
   18f6e:	4618      	mov	r0, r3
   18f70:	f7ec ff0a 	bl	5d88 <cosem_createObject>
   18f74:	6338      	str	r0, [r7, #48]	; 0x30
                    if (ret != DLMS_ERROR_CODE_OK)
   18f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f78:	2b00      	cmp	r3, #0
   18f7a:	d006      	beq.n	18f8a <cosem_setAssociationLogicalName+0x116>
                    {
                        //If unknown object.
                        if (ret == DLMS_ERROR_CODE_INVALID_PARAMETER)
   18f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f7e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   18f82:	d03a      	beq.n	18ffa <cosem_setAssociationLogicalName+0x186>
                        {
                            continue;
                        }
                        return ret;
   18f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f86:	f000 be6a 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                    }
                    ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   18f8a:	69ba      	ldr	r2, [r7, #24]
   18f8c:	69fb      	ldr	r3, [r7, #28]
   18f8e:	689b      	ldr	r3, [r3, #8]
   18f90:	681b      	ldr	r3, [r3, #0]
   18f92:	4619      	mov	r1, r3
   18f94:	4610      	mov	r0, r2
   18f96:	f7ec ff45 	bl	5e24 <cosem_setLogicalName>
   18f9a:	6338      	str	r0, [r7, #48]	; 0x30
                    if (ret != DLMS_ERROR_CODE_OK)
   18f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18f9e:	2b00      	cmp	r3, #0
   18fa0:	d002      	beq.n	18fa8 <cosem_setAssociationLogicalName+0x134>
                    {
                        return ret;
   18fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fa4:	f000 be5b 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                    }
                    obj->version = version;
   18fa8:	69bb      	ldr	r3, [r7, #24]
   18faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18fac:	b2d2      	uxtb	r2, r2
   18fae:	705a      	strb	r2, [r3, #1]
                }
                ret = va_get(tmp->Arr, &tmp2);
   18fb0:	6a3b      	ldr	r3, [r7, #32]
   18fb2:	689b      	ldr	r3, [r3, #8]
   18fb4:	f107 021c 	add.w	r2, r7, #28
   18fb8:	4611      	mov	r1, r2
   18fba:	4618      	mov	r0, r3
   18fbc:	f00d ff30 	bl	26e20 <va_get>
   18fc0:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fc4:	2b00      	cmp	r3, #0
   18fc6:	d002      	beq.n	18fce <cosem_setAssociationLogicalName+0x15a>
                {
                    return ret;
   18fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fca:	f000 be48 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = obj_updateAttributeAccessModes(obj, tmp2->Arr);
   18fce:	69ba      	ldr	r2, [r7, #24]
   18fd0:	69fb      	ldr	r3, [r7, #28]
   18fd2:	689b      	ldr	r3, [r3, #8]
   18fd4:	4619      	mov	r1, r3
   18fd6:	4610      	mov	r0, r2
   18fd8:	f7ff f836 	bl	18048 <obj_updateAttributeAccessModes>
   18fdc:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   18fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	d002      	beq.n	18fea <cosem_setAssociationLogicalName+0x176>
                {
                    return ret;
   18fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   18fe6:	f000 be3a 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                oa_push(&object->objectList, obj);
   18fea:	68bb      	ldr	r3, [r7, #8]
   18fec:	3314      	adds	r3, #20
   18fee:	69ba      	ldr	r2, [r7, #24]
   18ff0:	4611      	mov	r1, r2
   18ff2:	4618      	mov	r0, r3
   18ff4:	f009 f82c 	bl	22050 <oa_push>
   18ff8:	e000      	b.n	18ffc <cosem_setAssociationLogicalName+0x188>
                    if (ret != DLMS_ERROR_CODE_OK)
                    {
                        //If unknown object.
                        if (ret == DLMS_ERROR_CODE_INVALID_PARAMETER)
                        {
                            continue;
   18ffa:	bf00      	nop
    if (index == 2)
    {
        oa_empty(&object->objectList);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   18ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18ffe:	3301      	adds	r3, #1
   19000:	637b      	str	r3, [r7, #52]	; 0x34
   19002:	683b      	ldr	r3, [r7, #0]
   19004:	689b      	ldr	r3, [r3, #8]
   19006:	88db      	ldrh	r3, [r3, #6]
   19008:	461a      	mov	r2, r3
   1900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1900c:	429a      	cmp	r2, r3
   1900e:	f47f af4e 	bne.w	18eae <cosem_setAssociationLogicalName+0x3a>
   19012:	f000 be23 	b.w	19c5c <cosem_setAssociationLogicalName+0xde8>
                }
                oa_push(&object->objectList, obj);
            }
        }
    }
    else if (index == 3)
   19016:	79fb      	ldrb	r3, [r7, #7]
   19018:	2b03      	cmp	r3, #3
   1901a:	d130      	bne.n	1907e <cosem_setAssociationLogicalName+0x20a>
    {
        ret = va_get(value->Arr, &tmp);
   1901c:	683b      	ldr	r3, [r7, #0]
   1901e:	689b      	ldr	r3, [r3, #8]
   19020:	f107 0220 	add.w	r2, r7, #32
   19024:	4611      	mov	r1, r2
   19026:	4618      	mov	r0, r3
   19028:	f00d fefa 	bl	26e20 <va_get>
   1902c:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19030:	2b00      	cmp	r3, #0
   19032:	d002      	beq.n	1903a <cosem_setAssociationLogicalName+0x1c6>
        {
            return ret;
   19034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19036:	f000 be12 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->clientSAP = (unsigned char)var_toInteger(tmp);
   1903a:	6a3b      	ldr	r3, [r7, #32]
   1903c:	4618      	mov	r0, r3
   1903e:	f00d fd45 	bl	26acc <var_toInteger>
   19042:	4603      	mov	r3, r0
   19044:	b2da      	uxtb	r2, r3
   19046:	68bb      	ldr	r3, [r7, #8]
   19048:	f883 2020 	strb.w	r2, [r3, #32]
        ret = va_get(value->Arr, &tmp);
   1904c:	683b      	ldr	r3, [r7, #0]
   1904e:	689b      	ldr	r3, [r3, #8]
   19050:	f107 0220 	add.w	r2, r7, #32
   19054:	4611      	mov	r1, r2
   19056:	4618      	mov	r0, r3
   19058:	f00d fee2 	bl	26e20 <va_get>
   1905c:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19060:	2b00      	cmp	r3, #0
   19062:	d002      	beq.n	1906a <cosem_setAssociationLogicalName+0x1f6>
        {
            return ret;
   19064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19066:	f000 bdfa 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->serverSAP = (unsigned short)var_toInteger(tmp);
   1906a:	6a3b      	ldr	r3, [r7, #32]
   1906c:	4618      	mov	r0, r3
   1906e:	f00d fd2d 	bl	26acc <var_toInteger>
   19072:	4603      	mov	r3, r0
   19074:	b29a      	uxth	r2, r3
   19076:	68bb      	ldr	r3, [r7, #8]
   19078:	845a      	strh	r2, [r3, #34]	; 0x22
   1907a:	f000 bdef 	b.w	19c5c <cosem_setAssociationLogicalName+0xde8>
    }
    else if (index == 4)
   1907e:	79fb      	ldrb	r3, [r7, #7]
   19080:	2b04      	cmp	r3, #4
   19082:	f040 821d 	bne.w	194c0 <cosem_setAssociationLogicalName+0x64c>
    {
        //Value of the object identifier encoded in BER
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   19086:	683b      	ldr	r3, [r7, #0]
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	2b09      	cmp	r3, #9
   1908c:	f040 816d 	bne.w	1936a <cosem_setAssociationLogicalName+0x4f6>
        {
            if (value->byteArr->data[0] == 0x60)
   19090:	683b      	ldr	r3, [r7, #0]
   19092:	689b      	ldr	r3, [r3, #8]
   19094:	681b      	ldr	r3, [r3, #0]
   19096:	781b      	ldrb	r3, [r3, #0]
   19098:	2b60      	cmp	r3, #96	; 0x60
   1909a:	d147      	bne.n	1912c <cosem_setAssociationLogicalName+0x2b8>
            {
                object->applicationContextName.jointIsoCtt = 0;
   1909c:	68bb      	ldr	r3, [r7, #8]
   1909e:	2200      	movs	r2, #0
   190a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                object->applicationContextName.country = 0;
   190a4:	68bb      	ldr	r3, [r7, #8]
   190a6:	2200      	movs	r2, #0
   190a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                object->applicationContextName.countryName = 0;
   190ac:	68bb      	ldr	r3, [r7, #8]
   190ae:	2200      	movs	r2, #0
   190b0:	859a      	strh	r2, [r3, #44]	; 0x2c
                ret = bb_getUInt8ByIndex(value->byteArr, 3, &object->applicationContextName.identifiedOrganization);
   190b2:	683b      	ldr	r3, [r7, #0]
   190b4:	6898      	ldr	r0, [r3, #8]
   190b6:	68bb      	ldr	r3, [r7, #8]
   190b8:	332e      	adds	r3, #46	; 0x2e
   190ba:	461a      	mov	r2, r3
   190bc:	2103      	movs	r1, #3
   190be:	f7ea fbbb 	bl	3838 <bb_getUInt8ByIndex>
   190c2:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   190c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   190c6:	2b00      	cmp	r3, #0
   190c8:	d002      	beq.n	190d0 <cosem_setAssociationLogicalName+0x25c>
                {
                    return ret;
   190ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   190cc:	f000 bdc7 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8ByIndex(value->byteArr, 4, &object->applicationContextName.dlmsUA);
   190d0:	683b      	ldr	r3, [r7, #0]
   190d2:	6898      	ldr	r0, [r3, #8]
   190d4:	68bb      	ldr	r3, [r7, #8]
   190d6:	332f      	adds	r3, #47	; 0x2f
   190d8:	461a      	mov	r2, r3
   190da:	2104      	movs	r1, #4
   190dc:	f7ea fbac 	bl	3838 <bb_getUInt8ByIndex>
   190e0:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   190e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   190e4:	2b00      	cmp	r3, #0
   190e6:	d002      	beq.n	190ee <cosem_setAssociationLogicalName+0x27a>
                {
                    return ret;
   190e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   190ea:	f000 bdb8 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8ByIndex(value->byteArr, 5, &object->applicationContextName.applicationContext);
   190ee:	683b      	ldr	r3, [r7, #0]
   190f0:	6898      	ldr	r0, [r3, #8]
   190f2:	68bb      	ldr	r3, [r7, #8]
   190f4:	3330      	adds	r3, #48	; 0x30
   190f6:	461a      	mov	r2, r3
   190f8:	2105      	movs	r1, #5
   190fa:	f7ea fb9d 	bl	3838 <bb_getUInt8ByIndex>
   190fe:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19102:	2b00      	cmp	r3, #0
   19104:	d002      	beq.n	1910c <cosem_setAssociationLogicalName+0x298>
                {
                    return ret;
   19106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19108:	f000 bda9 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8ByIndex(value->byteArr, 6, &object->applicationContextName.contextId);
   1910c:	683b      	ldr	r3, [r7, #0]
   1910e:	6898      	ldr	r0, [r3, #8]
   19110:	68bb      	ldr	r3, [r7, #8]
   19112:	3331      	adds	r3, #49	; 0x31
   19114:	461a      	mov	r2, r3
   19116:	2106      	movs	r1, #6
   19118:	f7ea fb8e 	bl	3838 <bb_getUInt8ByIndex>
   1911c:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19120:	2b00      	cmp	r3, #0
   19122:	f000 859b 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
                {
                    return ret;
   19126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19128:	f000 bd99 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
            }
            else
            {
                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   1912c:	683b      	ldr	r3, [r7, #0]
   1912e:	689b      	ldr	r3, [r3, #8]
   19130:	f107 0217 	add.w	r2, r7, #23
   19134:	4611      	mov	r1, r2
   19136:	4618      	mov	r0, r3
   19138:	f7ea fb38 	bl	37ac <bb_getUInt8>
   1913c:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   1913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19140:	2b00      	cmp	r3, #0
   19142:	d102      	bne.n	1914a <cosem_setAssociationLogicalName+0x2d6>
   19144:	7dfb      	ldrb	r3, [r7, #23]
   19146:	2b02      	cmp	r3, #2
   19148:	d003      	beq.n	19152 <cosem_setAssociationLogicalName+0x2de>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1914a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1914e:	f000 bd86 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                //Get Len.
                ret = bb_getUInt8(value->byteArr, &ch);
   19152:	683b      	ldr	r3, [r7, #0]
   19154:	689b      	ldr	r3, [r3, #8]
   19156:	f107 0217 	add.w	r2, r7, #23
   1915a:	4611      	mov	r1, r2
   1915c:	4618      	mov	r0, r3
   1915e:	f7ea fb25 	bl	37ac <bb_getUInt8>
   19162:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 7)
   19164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19166:	2b00      	cmp	r3, #0
   19168:	d102      	bne.n	19170 <cosem_setAssociationLogicalName+0x2fc>
   1916a:	7dfb      	ldrb	r3, [r7, #23]
   1916c:	2b07      	cmp	r3, #7
   1916e:	d003      	beq.n	19178 <cosem_setAssociationLogicalName+0x304>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19170:	f44f 7381 	mov.w	r3, #258	; 0x102
   19174:	f000 bd73 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   19178:	683b      	ldr	r3, [r7, #0]
   1917a:	689b      	ldr	r3, [r3, #8]
   1917c:	f107 0217 	add.w	r2, r7, #23
   19180:	4611      	mov	r1, r2
   19182:	4618      	mov	r0, r3
   19184:	f7ea fb12 	bl	37ac <bb_getUInt8>
   19188:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1918c:	2b00      	cmp	r3, #0
   1918e:	d102      	bne.n	19196 <cosem_setAssociationLogicalName+0x322>
   19190:	7dfb      	ldrb	r3, [r7, #23]
   19192:	2b11      	cmp	r3, #17
   19194:	d003      	beq.n	1919e <cosem_setAssociationLogicalName+0x32a>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19196:	f44f 7381 	mov.w	r3, #258	; 0x102
   1919a:	f000 bd60 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.jointIsoCtt);
   1919e:	683b      	ldr	r3, [r7, #0]
   191a0:	689a      	ldr	r2, [r3, #8]
   191a2:	68bb      	ldr	r3, [r7, #8]
   191a4:	332a      	adds	r3, #42	; 0x2a
   191a6:	4619      	mov	r1, r3
   191a8:	4610      	mov	r0, r2
   191aa:	f7ea faff 	bl	37ac <bb_getUInt8>
   191ae:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   191b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   191b2:	2b00      	cmp	r3, #0
   191b4:	d003      	beq.n	191be <cosem_setAssociationLogicalName+0x34a>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   191b6:	f44f 7381 	mov.w	r3, #258	; 0x102
   191ba:	f000 bd50 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   191be:	683b      	ldr	r3, [r7, #0]
   191c0:	689b      	ldr	r3, [r3, #8]
   191c2:	f107 0217 	add.w	r2, r7, #23
   191c6:	4611      	mov	r1, r2
   191c8:	4618      	mov	r0, r3
   191ca:	f7ea faef 	bl	37ac <bb_getUInt8>
   191ce:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   191d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   191d2:	2b00      	cmp	r3, #0
   191d4:	d102      	bne.n	191dc <cosem_setAssociationLogicalName+0x368>
   191d6:	7dfb      	ldrb	r3, [r7, #23]
   191d8:	2b11      	cmp	r3, #17
   191da:	d003      	beq.n	191e4 <cosem_setAssociationLogicalName+0x370>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   191dc:	f44f 7381 	mov.w	r3, #258	; 0x102
   191e0:	f000 bd3d 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.country);
   191e4:	683b      	ldr	r3, [r7, #0]
   191e6:	689a      	ldr	r2, [r3, #8]
   191e8:	68bb      	ldr	r3, [r7, #8]
   191ea:	332b      	adds	r3, #43	; 0x2b
   191ec:	4619      	mov	r1, r3
   191ee:	4610      	mov	r0, r2
   191f0:	f7ea fadc 	bl	37ac <bb_getUInt8>
   191f4:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   191f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   191f8:	2b00      	cmp	r3, #0
   191fa:	d003      	beq.n	19204 <cosem_setAssociationLogicalName+0x390>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   191fc:	f44f 7381 	mov.w	r3, #258	; 0x102
   19200:	f000 bd2d 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   19204:	683b      	ldr	r3, [r7, #0]
   19206:	689b      	ldr	r3, [r3, #8]
   19208:	f107 0217 	add.w	r2, r7, #23
   1920c:	4611      	mov	r1, r2
   1920e:	4618      	mov	r0, r3
   19210:	f7ea facc 	bl	37ac <bb_getUInt8>
   19214:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   19216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19218:	2b00      	cmp	r3, #0
   1921a:	d102      	bne.n	19222 <cosem_setAssociationLogicalName+0x3ae>
   1921c:	7dfb      	ldrb	r3, [r7, #23]
   1921e:	2b12      	cmp	r3, #18
   19220:	d003      	beq.n	1922a <cosem_setAssociationLogicalName+0x3b6>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19222:	f44f 7381 	mov.w	r3, #258	; 0x102
   19226:	f000 bd1a 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt16(value->byteArr, &object->applicationContextName.countryName);
   1922a:	683b      	ldr	r3, [r7, #0]
   1922c:	689a      	ldr	r2, [r3, #8]
   1922e:	68bb      	ldr	r3, [r7, #8]
   19230:	332c      	adds	r3, #44	; 0x2c
   19232:	4619      	mov	r1, r3
   19234:	4610      	mov	r0, r2
   19236:	f7ea fb1b 	bl	3870 <bb_getUInt16>
   1923a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   1923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1923e:	2b00      	cmp	r3, #0
   19240:	d102      	bne.n	19248 <cosem_setAssociationLogicalName+0x3d4>
   19242:	7dfb      	ldrb	r3, [r7, #23]
   19244:	2b12      	cmp	r3, #18
   19246:	d003      	beq.n	19250 <cosem_setAssociationLogicalName+0x3dc>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19248:	f44f 7381 	mov.w	r3, #258	; 0x102
   1924c:	f000 bd07 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   19250:	683b      	ldr	r3, [r7, #0]
   19252:	689b      	ldr	r3, [r3, #8]
   19254:	f107 0217 	add.w	r2, r7, #23
   19258:	4611      	mov	r1, r2
   1925a:	4618      	mov	r0, r3
   1925c:	f7ea faa6 	bl	37ac <bb_getUInt8>
   19260:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   19262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19264:	2b00      	cmp	r3, #0
   19266:	d102      	bne.n	1926e <cosem_setAssociationLogicalName+0x3fa>
   19268:	7dfb      	ldrb	r3, [r7, #23]
   1926a:	2b11      	cmp	r3, #17
   1926c:	d003      	beq.n	19276 <cosem_setAssociationLogicalName+0x402>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1926e:	f44f 7381 	mov.w	r3, #258	; 0x102
   19272:	f000 bcf4 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.identifiedOrganization);
   19276:	683b      	ldr	r3, [r7, #0]
   19278:	689a      	ldr	r2, [r3, #8]
   1927a:	68bb      	ldr	r3, [r7, #8]
   1927c:	332e      	adds	r3, #46	; 0x2e
   1927e:	4619      	mov	r1, r3
   19280:	4610      	mov	r0, r2
   19282:	f7ea fa93 	bl	37ac <bb_getUInt8>
   19286:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1928a:	2b00      	cmp	r3, #0
   1928c:	d003      	beq.n	19296 <cosem_setAssociationLogicalName+0x422>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1928e:	f44f 7381 	mov.w	r3, #258	; 0x102
   19292:	f000 bce4 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   19296:	683b      	ldr	r3, [r7, #0]
   19298:	689b      	ldr	r3, [r3, #8]
   1929a:	f107 0217 	add.w	r2, r7, #23
   1929e:	4611      	mov	r1, r2
   192a0:	4618      	mov	r0, r3
   192a2:	f7ea fa83 	bl	37ac <bb_getUInt8>
   192a6:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   192a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   192aa:	2b00      	cmp	r3, #0
   192ac:	d102      	bne.n	192b4 <cosem_setAssociationLogicalName+0x440>
   192ae:	7dfb      	ldrb	r3, [r7, #23]
   192b0:	2b11      	cmp	r3, #17
   192b2:	d003      	beq.n	192bc <cosem_setAssociationLogicalName+0x448>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   192b4:	f44f 7381 	mov.w	r3, #258	; 0x102
   192b8:	f000 bcd1 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.dlmsUA);
   192bc:	683b      	ldr	r3, [r7, #0]
   192be:	689a      	ldr	r2, [r3, #8]
   192c0:	68bb      	ldr	r3, [r7, #8]
   192c2:	332f      	adds	r3, #47	; 0x2f
   192c4:	4619      	mov	r1, r3
   192c6:	4610      	mov	r0, r2
   192c8:	f7ea fa70 	bl	37ac <bb_getUInt8>
   192cc:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   192ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   192d0:	2b00      	cmp	r3, #0
   192d2:	d003      	beq.n	192dc <cosem_setAssociationLogicalName+0x468>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   192d4:	f44f 7381 	mov.w	r3, #258	; 0x102
   192d8:	f000 bcc1 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   192dc:	683b      	ldr	r3, [r7, #0]
   192de:	689b      	ldr	r3, [r3, #8]
   192e0:	f107 0217 	add.w	r2, r7, #23
   192e4:	4611      	mov	r1, r2
   192e6:	4618      	mov	r0, r3
   192e8:	f7ea fa60 	bl	37ac <bb_getUInt8>
   192ec:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   192ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   192f0:	2b00      	cmp	r3, #0
   192f2:	d102      	bne.n	192fa <cosem_setAssociationLogicalName+0x486>
   192f4:	7dfb      	ldrb	r3, [r7, #23]
   192f6:	2b11      	cmp	r3, #17
   192f8:	d003      	beq.n	19302 <cosem_setAssociationLogicalName+0x48e>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   192fa:	f44f 7381 	mov.w	r3, #258	; 0x102
   192fe:	f000 bcae 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.applicationContext);
   19302:	683b      	ldr	r3, [r7, #0]
   19304:	689a      	ldr	r2, [r3, #8]
   19306:	68bb      	ldr	r3, [r7, #8]
   19308:	3330      	adds	r3, #48	; 0x30
   1930a:	4619      	mov	r1, r3
   1930c:	4610      	mov	r0, r2
   1930e:	f7ea fa4d 	bl	37ac <bb_getUInt8>
   19312:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19316:	2b00      	cmp	r3, #0
   19318:	d003      	beq.n	19322 <cosem_setAssociationLogicalName+0x4ae>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1931a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1931e:	f000 bc9e 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                //Get tag
                ret = bb_getUInt8(value->byteArr, &ch);
   19322:	683b      	ldr	r3, [r7, #0]
   19324:	689b      	ldr	r3, [r3, #8]
   19326:	f107 0217 	add.w	r2, r7, #23
   1932a:	4611      	mov	r1, r2
   1932c:	4618      	mov	r0, r3
   1932e:	f7ea fa3d 	bl	37ac <bb_getUInt8>
   19332:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   19334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19336:	2b00      	cmp	r3, #0
   19338:	d102      	bne.n	19340 <cosem_setAssociationLogicalName+0x4cc>
   1933a:	7dfb      	ldrb	r3, [r7, #23]
   1933c:	2b11      	cmp	r3, #17
   1933e:	d003      	beq.n	19348 <cosem_setAssociationLogicalName+0x4d4>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19340:	f44f 7381 	mov.w	r3, #258	; 0x102
   19344:	f000 bc8b 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.contextId);
   19348:	683b      	ldr	r3, [r7, #0]
   1934a:	689a      	ldr	r2, [r3, #8]
   1934c:	68bb      	ldr	r3, [r7, #8]
   1934e:	3331      	adds	r3, #49	; 0x31
   19350:	4619      	mov	r1, r3
   19352:	4610      	mov	r0, r2
   19354:	f7ea fa2a 	bl	37ac <bb_getUInt8>
   19358:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1935c:	2b00      	cmp	r3, #0
   1935e:	f000 847d 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19362:	f44f 7381 	mov.w	r3, #258	; 0x102
   19366:	f000 bc7a 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
            }
        }
        else if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1936a:	683b      	ldr	r3, [r7, #0]
   1936c:	781b      	ldrb	r3, [r3, #0]
   1936e:	2b02      	cmp	r3, #2
   19370:	f040 8474 	bne.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            ret = va_get(value->Arr, &tmp);
   19374:	683b      	ldr	r3, [r7, #0]
   19376:	689b      	ldr	r3, [r3, #8]
   19378:	f107 0220 	add.w	r2, r7, #32
   1937c:	4611      	mov	r1, r2
   1937e:	4618      	mov	r0, r3
   19380:	f00d fd4e 	bl	26e20 <va_get>
   19384:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19388:	2b00      	cmp	r3, #0
   1938a:	d002      	beq.n	19392 <cosem_setAssociationLogicalName+0x51e>
            {
                return ret;
   1938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1938e:	f000 bc66 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   19392:	6a3b      	ldr	r3, [r7, #32]
   19394:	4618      	mov	r0, r3
   19396:	f00d fb99 	bl	26acc <var_toInteger>
   1939a:	4603      	mov	r3, r0
   1939c:	b2da      	uxtb	r2, r3
   1939e:	68bb      	ldr	r3, [r7, #8]
   193a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            ret = va_get(value->Arr, &tmp);
   193a4:	683b      	ldr	r3, [r7, #0]
   193a6:	689b      	ldr	r3, [r3, #8]
   193a8:	f107 0220 	add.w	r2, r7, #32
   193ac:	4611      	mov	r1, r2
   193ae:	4618      	mov	r0, r3
   193b0:	f00d fd36 	bl	26e20 <va_get>
   193b4:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   193b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   193b8:	2b00      	cmp	r3, #0
   193ba:	d002      	beq.n	193c2 <cosem_setAssociationLogicalName+0x54e>
            {
                return ret;
   193bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   193be:	f000 bc4e 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.country = (unsigned char)var_toInteger(tmp);
   193c2:	6a3b      	ldr	r3, [r7, #32]
   193c4:	4618      	mov	r0, r3
   193c6:	f00d fb81 	bl	26acc <var_toInteger>
   193ca:	4603      	mov	r3, r0
   193cc:	b2da      	uxtb	r2, r3
   193ce:	68bb      	ldr	r3, [r7, #8]
   193d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            ret = va_get(value->Arr, &tmp);
   193d4:	683b      	ldr	r3, [r7, #0]
   193d6:	689b      	ldr	r3, [r3, #8]
   193d8:	f107 0220 	add.w	r2, r7, #32
   193dc:	4611      	mov	r1, r2
   193de:	4618      	mov	r0, r3
   193e0:	f00d fd1e 	bl	26e20 <va_get>
   193e4:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   193e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   193e8:	2b00      	cmp	r3, #0
   193ea:	d002      	beq.n	193f2 <cosem_setAssociationLogicalName+0x57e>
            {
                return ret;
   193ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   193ee:	f000 bc36 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.countryName = (unsigned short)var_toInteger(tmp);
   193f2:	6a3b      	ldr	r3, [r7, #32]
   193f4:	4618      	mov	r0, r3
   193f6:	f00d fb69 	bl	26acc <var_toInteger>
   193fa:	4603      	mov	r3, r0
   193fc:	b29a      	uxth	r2, r3
   193fe:	68bb      	ldr	r3, [r7, #8]
   19400:	859a      	strh	r2, [r3, #44]	; 0x2c
            ret = va_get(value->Arr, &tmp);
   19402:	683b      	ldr	r3, [r7, #0]
   19404:	689b      	ldr	r3, [r3, #8]
   19406:	f107 0220 	add.w	r2, r7, #32
   1940a:	4611      	mov	r1, r2
   1940c:	4618      	mov	r0, r3
   1940e:	f00d fd07 	bl	26e20 <va_get>
   19412:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19416:	2b00      	cmp	r3, #0
   19418:	d002      	beq.n	19420 <cosem_setAssociationLogicalName+0x5ac>
            {
                return ret;
   1941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1941c:	f000 bc1f 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   19420:	6a3b      	ldr	r3, [r7, #32]
   19422:	4618      	mov	r0, r3
   19424:	f00d fb52 	bl	26acc <var_toInteger>
   19428:	4603      	mov	r3, r0
   1942a:	b2da      	uxtb	r2, r3
   1942c:	68bb      	ldr	r3, [r7, #8]
   1942e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            ret = va_get(value->Arr, &tmp);
   19432:	683b      	ldr	r3, [r7, #0]
   19434:	689b      	ldr	r3, [r3, #8]
   19436:	f107 0220 	add.w	r2, r7, #32
   1943a:	4611      	mov	r1, r2
   1943c:	4618      	mov	r0, r3
   1943e:	f00d fcef 	bl	26e20 <va_get>
   19442:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19446:	2b00      	cmp	r3, #0
   19448:	d002      	beq.n	19450 <cosem_setAssociationLogicalName+0x5dc>
            {
                return ret;
   1944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1944c:	f000 bc07 	b.w	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.dlmsUA = (unsigned char)var_toInteger(tmp);
   19450:	6a3b      	ldr	r3, [r7, #32]
   19452:	4618      	mov	r0, r3
   19454:	f00d fb3a 	bl	26acc <var_toInteger>
   19458:	4603      	mov	r3, r0
   1945a:	b2da      	uxtb	r2, r3
   1945c:	68bb      	ldr	r3, [r7, #8]
   1945e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            ret = va_get(value->Arr, &tmp);
   19462:	683b      	ldr	r3, [r7, #0]
   19464:	689b      	ldr	r3, [r3, #8]
   19466:	f107 0220 	add.w	r2, r7, #32
   1946a:	4611      	mov	r1, r2
   1946c:	4618      	mov	r0, r3
   1946e:	f00d fcd7 	bl	26e20 <va_get>
   19472:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19476:	2b00      	cmp	r3, #0
   19478:	d001      	beq.n	1947e <cosem_setAssociationLogicalName+0x60a>
            {
                return ret;
   1947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1947c:	e3ef      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.applicationContext = (unsigned char)var_toInteger(tmp);
   1947e:	6a3b      	ldr	r3, [r7, #32]
   19480:	4618      	mov	r0, r3
   19482:	f00d fb23 	bl	26acc <var_toInteger>
   19486:	4603      	mov	r3, r0
   19488:	b2da      	uxtb	r2, r3
   1948a:	68bb      	ldr	r3, [r7, #8]
   1948c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ret = va_get(value->Arr, &tmp);
   19490:	683b      	ldr	r3, [r7, #0]
   19492:	689b      	ldr	r3, [r3, #8]
   19494:	f107 0220 	add.w	r2, r7, #32
   19498:	4611      	mov	r1, r2
   1949a:	4618      	mov	r0, r3
   1949c:	f00d fcc0 	bl	26e20 <va_get>
   194a0:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   194a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194a4:	2b00      	cmp	r3, #0
   194a6:	d001      	beq.n	194ac <cosem_setAssociationLogicalName+0x638>
            {
                return ret;
   194a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194aa:	e3d8      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->applicationContextName.contextId = (unsigned char)var_toInteger(tmp);
   194ac:	6a3b      	ldr	r3, [r7, #32]
   194ae:	4618      	mov	r0, r3
   194b0:	f00d fb0c 	bl	26acc <var_toInteger>
   194b4:	4603      	mov	r3, r0
   194b6:	b2da      	uxtb	r2, r3
   194b8:	68bb      	ldr	r3, [r7, #8]
   194ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   194be:	e3cd      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
    }
    else if (index == 5)
   194c0:	79fb      	ldrb	r3, [r7, #7]
   194c2:	2b05      	cmp	r3, #5
   194c4:	f040 809e 	bne.w	19604 <cosem_setAssociationLogicalName+0x790>
    {
        int val;
        ret = va_get(value->Arr, &tmp);
   194c8:	683b      	ldr	r3, [r7, #0]
   194ca:	689b      	ldr	r3, [r3, #8]
   194cc:	f107 0220 	add.w	r2, r7, #32
   194d0:	4611      	mov	r1, r2
   194d2:	4618      	mov	r0, r3
   194d4:	f00d fca4 	bl	26e20 <va_get>
   194d8:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   194da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194dc:	2b00      	cmp	r3, #0
   194de:	d001      	beq.n	194e4 <cosem_setAssociationLogicalName+0x670>
        {
            return ret;
   194e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194e2:	e3bc      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        if ((ret = ba_toInteger(tmp->bitArr, &val)) != 0)
   194e4:	6a3b      	ldr	r3, [r7, #32]
   194e6:	689b      	ldr	r3, [r3, #8]
   194e8:	f107 0210 	add.w	r2, r7, #16
   194ec:	4611      	mov	r1, r2
   194ee:	4618      	mov	r0, r3
   194f0:	f7e9 fb60 	bl	2bb4 <ba_toInteger>
   194f4:	6338      	str	r0, [r7, #48]	; 0x30
   194f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194f8:	2b00      	cmp	r3, #0
   194fa:	d001      	beq.n	19500 <cosem_setAssociationLogicalName+0x68c>
        {
            return ret;
   194fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   194fe:	e3ae      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)val;
   19500:	693b      	ldr	r3, [r7, #16]
   19502:	461a      	mov	r2, r3
   19504:	68bb      	ldr	r3, [r7, #8]
   19506:	635a      	str	r2, [r3, #52]	; 0x34
        ret = va_get(value->Arr, &tmp);
   19508:	683b      	ldr	r3, [r7, #0]
   1950a:	689b      	ldr	r3, [r3, #8]
   1950c:	f107 0220 	add.w	r2, r7, #32
   19510:	4611      	mov	r1, r2
   19512:	4618      	mov	r0, r3
   19514:	f00d fc84 	bl	26e20 <va_get>
   19518:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1951c:	2b00      	cmp	r3, #0
   1951e:	d001      	beq.n	19524 <cosem_setAssociationLogicalName+0x6b0>
        {
            return ret;
   19520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19522:	e39c      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->xDLMSContextInfo.maxReceivePduSize = (unsigned short)var_toInteger(tmp);
   19524:	6a3b      	ldr	r3, [r7, #32]
   19526:	4618      	mov	r0, r3
   19528:	f00d fad0 	bl	26acc <var_toInteger>
   1952c:	4603      	mov	r3, r0
   1952e:	b29a      	uxth	r2, r3
   19530:	68bb      	ldr	r3, [r7, #8]
   19532:	871a      	strh	r2, [r3, #56]	; 0x38

        ret = va_get(value->Arr, &tmp);
   19534:	683b      	ldr	r3, [r7, #0]
   19536:	689b      	ldr	r3, [r3, #8]
   19538:	f107 0220 	add.w	r2, r7, #32
   1953c:	4611      	mov	r1, r2
   1953e:	4618      	mov	r0, r3
   19540:	f00d fc6e 	bl	26e20 <va_get>
   19544:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   19546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19548:	2b00      	cmp	r3, #0
   1954a:	d001      	beq.n	19550 <cosem_setAssociationLogicalName+0x6dc>
        {
            return ret;
   1954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1954e:	e386      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->xDLMSContextInfo.maxSendPpuSize = (unsigned short)var_toInteger(tmp);
   19550:	6a3b      	ldr	r3, [r7, #32]
   19552:	4618      	mov	r0, r3
   19554:	f00d faba 	bl	26acc <var_toInteger>
   19558:	4603      	mov	r3, r0
   1955a:	b29a      	uxth	r2, r3
   1955c:	68bb      	ldr	r3, [r7, #8]
   1955e:	875a      	strh	r2, [r3, #58]	; 0x3a

        ret = va_get(value->Arr, &tmp);
   19560:	683b      	ldr	r3, [r7, #0]
   19562:	689b      	ldr	r3, [r3, #8]
   19564:	f107 0220 	add.w	r2, r7, #32
   19568:	4611      	mov	r1, r2
   1956a:	4618      	mov	r0, r3
   1956c:	f00d fc58 	bl	26e20 <va_get>
   19570:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   19572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19574:	2b00      	cmp	r3, #0
   19576:	d001      	beq.n	1957c <cosem_setAssociationLogicalName+0x708>
        {
            return ret;
   19578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1957a:	e370      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->xDLMSContextInfo.dlmsVersionNumber = (unsigned char)var_toInteger(tmp);
   1957c:	6a3b      	ldr	r3, [r7, #32]
   1957e:	4618      	mov	r0, r3
   19580:	f00d faa4 	bl	26acc <var_toInteger>
   19584:	4603      	mov	r3, r0
   19586:	b2da      	uxtb	r2, r3
   19588:	68bb      	ldr	r3, [r7, #8]
   1958a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        ret = va_get(value->Arr, &tmp);
   1958e:	683b      	ldr	r3, [r7, #0]
   19590:	689b      	ldr	r3, [r3, #8]
   19592:	f107 0220 	add.w	r2, r7, #32
   19596:	4611      	mov	r1, r2
   19598:	4618      	mov	r0, r3
   1959a:	f00d fc41 	bl	26e20 <va_get>
   1959e:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   195a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   195a2:	2b00      	cmp	r3, #0
   195a4:	d001      	beq.n	195aa <cosem_setAssociationLogicalName+0x736>
        {
            return ret;
   195a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   195a8:	e359      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        object->xDLMSContextInfo.qualityOfService = (unsigned char)var_toInteger(tmp);
   195aa:	6a3b      	ldr	r3, [r7, #32]
   195ac:	4618      	mov	r0, r3
   195ae:	f00d fa8d 	bl	26acc <var_toInteger>
   195b2:	4603      	mov	r3, r0
   195b4:	b2da      	uxtb	r2, r3
   195b6:	68bb      	ldr	r3, [r7, #8]
   195b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        ret = va_get(value->Arr, &tmp);
   195bc:	683b      	ldr	r3, [r7, #0]
   195be:	689b      	ldr	r3, [r3, #8]
   195c0:	f107 0220 	add.w	r2, r7, #32
   195c4:	4611      	mov	r1, r2
   195c6:	4618      	mov	r0, r3
   195c8:	f00d fc2a 	bl	26e20 <va_get>
   195cc:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   195ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   195d0:	2b00      	cmp	r3, #0
   195d2:	d001      	beq.n	195d8 <cosem_setAssociationLogicalName+0x764>
        {
            return ret;
   195d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   195d6:	e342      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
        bb_clear(&object->xDLMSContextInfo.cypheringInfo);
   195d8:	68bb      	ldr	r3, [r7, #8]
   195da:	3340      	adds	r3, #64	; 0x40
   195dc:	4618      	mov	r0, r3
   195de:	f7ea f8c1 	bl	3764 <bb_clear>
        if (tmp->byteArr != NULL)
   195e2:	6a3b      	ldr	r3, [r7, #32]
   195e4:	689b      	ldr	r3, [r3, #8]
   195e6:	2b00      	cmp	r3, #0
   195e8:	f000 8338 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            bb_set2(&object->xDLMSContextInfo.cypheringInfo, tmp->byteArr, 0, tmp->byteArr->size);
   195ec:	68bb      	ldr	r3, [r7, #8]
   195ee:	f103 0040 	add.w	r0, r3, #64	; 0x40
   195f2:	6a3b      	ldr	r3, [r7, #32]
   195f4:	6899      	ldr	r1, [r3, #8]
   195f6:	6a3b      	ldr	r3, [r7, #32]
   195f8:	689b      	ldr	r3, [r3, #8]
   195fa:	88db      	ldrh	r3, [r3, #6]
   195fc:	2200      	movs	r2, #0
   195fe:	f7ea f80f 	bl	3620 <bb_set2>
   19602:	e32b      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
    }
    else if (index == 6)
   19604:	79fb      	ldrb	r3, [r7, #7]
   19606:	2b06      	cmp	r3, #6
   19608:	f040 8219 	bne.w	19a3e <cosem_setAssociationLogicalName+0xbca>
    {
        //Value of the object identifier encoded in BER
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1960c:	683b      	ldr	r3, [r7, #0]
   1960e:	781b      	ldrb	r3, [r3, #0]
   19610:	2b09      	cmp	r3, #9
   19612:	f040 816d 	bne.w	198f0 <cosem_setAssociationLogicalName+0xa7c>
        {
            if (value->byteArr->data[0] == 0x60)
   19616:	683b      	ldr	r3, [r7, #0]
   19618:	689b      	ldr	r3, [r3, #8]
   1961a:	681b      	ldr	r3, [r3, #0]
   1961c:	781b      	ldrb	r3, [r3, #0]
   1961e:	2b60      	cmp	r3, #96	; 0x60
   19620:	d142      	bne.n	196a8 <cosem_setAssociationLogicalName+0x834>
            {
                object->authenticationMechanismName.jointIsoCtt = 0;
   19622:	68bb      	ldr	r3, [r7, #8]
   19624:	2200      	movs	r2, #0
   19626:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                ++pos;
   1962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1962c:	3301      	adds	r3, #1
   1962e:	637b      	str	r3, [r7, #52]	; 0x34
                object->authenticationMechanismName.country = 0;
   19630:	68bb      	ldr	r3, [r7, #8]
   19632:	2200      	movs	r2, #0
   19634:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                ++pos;
   19638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1963a:	3301      	adds	r3, #1
   1963c:	637b      	str	r3, [r7, #52]	; 0x34
                object->authenticationMechanismName.countryName = 0;
   1963e:	68bb      	ldr	r3, [r7, #8]
   19640:	2200      	movs	r2, #0
   19642:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                //                    ++pos;
                object->authenticationMechanismName.identifiedOrganization = value->byteArr->data[++pos];
   19646:	683b      	ldr	r3, [r7, #0]
   19648:	689b      	ldr	r3, [r3, #8]
   1964a:	681a      	ldr	r2, [r3, #0]
   1964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1964e:	3301      	adds	r3, #1
   19650:	637b      	str	r3, [r7, #52]	; 0x34
   19652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19654:	4413      	add	r3, r2
   19656:	781a      	ldrb	r2, [r3, #0]
   19658:	68bb      	ldr	r3, [r7, #8]
   1965a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                object->authenticationMechanismName.dlmsUA = value->byteArr->data[++pos];
   1965e:	683b      	ldr	r3, [r7, #0]
   19660:	689b      	ldr	r3, [r3, #8]
   19662:	681a      	ldr	r2, [r3, #0]
   19664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19666:	3301      	adds	r3, #1
   19668:	637b      	str	r3, [r7, #52]	; 0x34
   1966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1966c:	4413      	add	r3, r2
   1966e:	781a      	ldrb	r2, [r3, #0]
   19670:	68bb      	ldr	r3, [r7, #8]
   19672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                object->authenticationMechanismName.authenticationMechanismName = value->byteArr->data[++pos];
   19676:	683b      	ldr	r3, [r7, #0]
   19678:	689b      	ldr	r3, [r3, #8]
   1967a:	681a      	ldr	r2, [r3, #0]
   1967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1967e:	3301      	adds	r3, #1
   19680:	637b      	str	r3, [r7, #52]	; 0x34
   19682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19684:	4413      	add	r3, r2
   19686:	781a      	ldrb	r2, [r3, #0]
   19688:	68bb      	ldr	r3, [r7, #8]
   1968a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
                object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)value->byteArr->data[++pos];
   1968e:	683b      	ldr	r3, [r7, #0]
   19690:	689b      	ldr	r3, [r3, #8]
   19692:	681a      	ldr	r2, [r3, #0]
   19694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19696:	3301      	adds	r3, #1
   19698:	637b      	str	r3, [r7, #52]	; 0x34
   1969a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1969c:	4413      	add	r3, r2
   1969e:	781a      	ldrb	r2, [r3, #0]
   196a0:	68bb      	ldr	r3, [r7, #8]
   196a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   196a6:	e2d9      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
            }
            else
            {
                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   196a8:	683b      	ldr	r3, [r7, #0]
   196aa:	689b      	ldr	r3, [r3, #8]
   196ac:	f107 0217 	add.w	r2, r7, #23
   196b0:	4611      	mov	r1, r2
   196b2:	4618      	mov	r0, r3
   196b4:	f7ea f87a 	bl	37ac <bb_getUInt8>
   196b8:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   196ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   196bc:	2b00      	cmp	r3, #0
   196be:	d102      	bne.n	196c6 <cosem_setAssociationLogicalName+0x852>
   196c0:	7dfb      	ldrb	r3, [r7, #23]
   196c2:	2b02      	cmp	r3, #2
   196c4:	d002      	beq.n	196cc <cosem_setAssociationLogicalName+0x858>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   196c6:	f44f 7381 	mov.w	r3, #258	; 0x102
   196ca:	e2c8      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                //Get Len.
                ret = bb_getUInt8(value->byteArr, &ch);
   196cc:	683b      	ldr	r3, [r7, #0]
   196ce:	689b      	ldr	r3, [r3, #8]
   196d0:	f107 0217 	add.w	r2, r7, #23
   196d4:	4611      	mov	r1, r2
   196d6:	4618      	mov	r0, r3
   196d8:	f7ea f868 	bl	37ac <bb_getUInt8>
   196dc:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 7)
   196de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   196e0:	2b00      	cmp	r3, #0
   196e2:	d102      	bne.n	196ea <cosem_setAssociationLogicalName+0x876>
   196e4:	7dfb      	ldrb	r3, [r7, #23]
   196e6:	2b07      	cmp	r3, #7
   196e8:	d002      	beq.n	196f0 <cosem_setAssociationLogicalName+0x87c>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   196ea:	f44f 7381 	mov.w	r3, #258	; 0x102
   196ee:	e2b6      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   196f0:	683b      	ldr	r3, [r7, #0]
   196f2:	689b      	ldr	r3, [r3, #8]
   196f4:	f107 0217 	add.w	r2, r7, #23
   196f8:	4611      	mov	r1, r2
   196fa:	4618      	mov	r0, r3
   196fc:	f7ea f856 	bl	37ac <bb_getUInt8>
   19700:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   19702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19704:	2b00      	cmp	r3, #0
   19706:	d102      	bne.n	1970e <cosem_setAssociationLogicalName+0x89a>
   19708:	7dfb      	ldrb	r3, [r7, #23]
   1970a:	2b11      	cmp	r3, #17
   1970c:	d002      	beq.n	19714 <cosem_setAssociationLogicalName+0x8a0>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1970e:	f44f 7381 	mov.w	r3, #258	; 0x102
   19712:	e2a4      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = bb_getUInt8(value->byteArr, &ch);
   19714:	683b      	ldr	r3, [r7, #0]
   19716:	689b      	ldr	r3, [r3, #8]
   19718:	f107 0217 	add.w	r2, r7, #23
   1971c:	4611      	mov	r1, r2
   1971e:	4618      	mov	r0, r3
   19720:	f7ea f844 	bl	37ac <bb_getUInt8>
   19724:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19728:	2b00      	cmp	r3, #0
   1972a:	d002      	beq.n	19732 <cosem_setAssociationLogicalName+0x8be>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1972c:	f44f 7381 	mov.w	r3, #258	; 0x102
   19730:	e295      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                object->authenticationMechanismName.jointIsoCtt = ch;
   19732:	7dfa      	ldrb	r2, [r7, #23]
   19734:	68bb      	ldr	r3, [r7, #8]
   19736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   1973a:	683b      	ldr	r3, [r7, #0]
   1973c:	689b      	ldr	r3, [r3, #8]
   1973e:	f107 0217 	add.w	r2, r7, #23
   19742:	4611      	mov	r1, r2
   19744:	4618      	mov	r0, r3
   19746:	f7ea f831 	bl	37ac <bb_getUInt8>
   1974a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1974e:	2b00      	cmp	r3, #0
   19750:	d102      	bne.n	19758 <cosem_setAssociationLogicalName+0x8e4>
   19752:	7dfb      	ldrb	r3, [r7, #23]
   19754:	2b11      	cmp	r3, #17
   19756:	d002      	beq.n	1975e <cosem_setAssociationLogicalName+0x8ea>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19758:	f44f 7381 	mov.w	r3, #258	; 0x102
   1975c:	e27f      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = bb_getUInt8(value->byteArr, &ch);
   1975e:	683b      	ldr	r3, [r7, #0]
   19760:	689b      	ldr	r3, [r3, #8]
   19762:	f107 0217 	add.w	r2, r7, #23
   19766:	4611      	mov	r1, r2
   19768:	4618      	mov	r0, r3
   1976a:	f7ea f81f 	bl	37ac <bb_getUInt8>
   1976e:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19772:	2b00      	cmp	r3, #0
   19774:	d002      	beq.n	1977c <cosem_setAssociationLogicalName+0x908>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19776:	f44f 7381 	mov.w	r3, #258	; 0x102
   1977a:	e270      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                object->authenticationMechanismName.country = ch;
   1977c:	7dfa      	ldrb	r2, [r7, #23]
   1977e:	68bb      	ldr	r3, [r7, #8]
   19780:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   19784:	683b      	ldr	r3, [r7, #0]
   19786:	689b      	ldr	r3, [r3, #8]
   19788:	f107 0217 	add.w	r2, r7, #23
   1978c:	4611      	mov	r1, r2
   1978e:	4618      	mov	r0, r3
   19790:	f7ea f80c 	bl	37ac <bb_getUInt8>
   19794:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   19796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19798:	2b00      	cmp	r3, #0
   1979a:	d102      	bne.n	197a2 <cosem_setAssociationLogicalName+0x92e>
   1979c:	7dfb      	ldrb	r3, [r7, #23]
   1979e:	2b12      	cmp	r3, #18
   197a0:	d002      	beq.n	197a8 <cosem_setAssociationLogicalName+0x934>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   197a2:	f44f 7381 	mov.w	r3, #258	; 0x102
   197a6:	e25a      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName);
   197a8:	683b      	ldr	r3, [r7, #0]
   197aa:	689a      	ldr	r2, [r3, #8]
   197ac:	68bb      	ldr	r3, [r7, #8]
   197ae:	334e      	adds	r3, #78	; 0x4e
   197b0:	4619      	mov	r1, r3
   197b2:	4610      	mov	r0, r2
   197b4:	f7ea f85c 	bl	3870 <bb_getUInt16>
   197b8:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   197ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   197bc:	2b00      	cmp	r3, #0
   197be:	d002      	beq.n	197c6 <cosem_setAssociationLogicalName+0x952>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   197c0:	f44f 7381 	mov.w	r3, #258	; 0x102
   197c4:	e24b      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   197c6:	683b      	ldr	r3, [r7, #0]
   197c8:	689b      	ldr	r3, [r3, #8]
   197ca:	f107 0217 	add.w	r2, r7, #23
   197ce:	4611      	mov	r1, r2
   197d0:	4618      	mov	r0, r3
   197d2:	f7e9 ffeb 	bl	37ac <bb_getUInt8>
   197d6:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   197d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   197da:	2b00      	cmp	r3, #0
   197dc:	d102      	bne.n	197e4 <cosem_setAssociationLogicalName+0x970>
   197de:	7dfb      	ldrb	r3, [r7, #23]
   197e0:	2b11      	cmp	r3, #17
   197e2:	d002      	beq.n	197ea <cosem_setAssociationLogicalName+0x976>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   197e4:	f44f 7381 	mov.w	r3, #258	; 0x102
   197e8:	e239      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = bb_getUInt8(value->byteArr, &ch);
   197ea:	683b      	ldr	r3, [r7, #0]
   197ec:	689b      	ldr	r3, [r3, #8]
   197ee:	f107 0217 	add.w	r2, r7, #23
   197f2:	4611      	mov	r1, r2
   197f4:	4618      	mov	r0, r3
   197f6:	f7e9 ffd9 	bl	37ac <bb_getUInt8>
   197fa:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   197fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   197fe:	2b00      	cmp	r3, #0
   19800:	d002      	beq.n	19808 <cosem_setAssociationLogicalName+0x994>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19802:	f44f 7381 	mov.w	r3, #258	; 0x102
   19806:	e22a      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                object->authenticationMechanismName.identifiedOrganization = ch;
   19808:	7dfa      	ldrb	r2, [r7, #23]
   1980a:	68bb      	ldr	r3, [r7, #8]
   1980c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   19810:	683b      	ldr	r3, [r7, #0]
   19812:	689b      	ldr	r3, [r3, #8]
   19814:	f107 0217 	add.w	r2, r7, #23
   19818:	4611      	mov	r1, r2
   1981a:	4618      	mov	r0, r3
   1981c:	f7e9 ffc6 	bl	37ac <bb_getUInt8>
   19820:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   19822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19824:	2b00      	cmp	r3, #0
   19826:	d102      	bne.n	1982e <cosem_setAssociationLogicalName+0x9ba>
   19828:	7dfb      	ldrb	r3, [r7, #23]
   1982a:	2b11      	cmp	r3, #17
   1982c:	d002      	beq.n	19834 <cosem_setAssociationLogicalName+0x9c0>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1982e:	f44f 7381 	mov.w	r3, #258	; 0x102
   19832:	e214      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                ret = bb_getUInt8(value->byteArr, &ch);
   19834:	683b      	ldr	r3, [r7, #0]
   19836:	689b      	ldr	r3, [r3, #8]
   19838:	f107 0217 	add.w	r2, r7, #23
   1983c:	4611      	mov	r1, r2
   1983e:	4618      	mov	r0, r3
   19840:	f7e9 ffb4 	bl	37ac <bb_getUInt8>
   19844:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19848:	2b00      	cmp	r3, #0
   1984a:	d002      	beq.n	19852 <cosem_setAssociationLogicalName+0x9de>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1984c:	f44f 7381 	mov.w	r3, #258	; 0x102
   19850:	e205      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }

                object->authenticationMechanismName.dlmsUA = ch;
   19852:	7dfa      	ldrb	r2, [r7, #23]
   19854:	68bb      	ldr	r3, [r7, #8]
   19856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   1985a:	683b      	ldr	r3, [r7, #0]
   1985c:	689b      	ldr	r3, [r3, #8]
   1985e:	f107 0217 	add.w	r2, r7, #23
   19862:	4611      	mov	r1, r2
   19864:	4618      	mov	r0, r3
   19866:	f7e9 ffa1 	bl	37ac <bb_getUInt8>
   1986a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1986e:	2b00      	cmp	r3, #0
   19870:	d102      	bne.n	19878 <cosem_setAssociationLogicalName+0xa04>
   19872:	7dfb      	ldrb	r3, [r7, #23]
   19874:	2b11      	cmp	r3, #17
   19876:	d002      	beq.n	1987e <cosem_setAssociationLogicalName+0xa0a>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19878:	f44f 7381 	mov.w	r3, #258	; 0x102
   1987c:	e1ef      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &ch);
   1987e:	683b      	ldr	r3, [r7, #0]
   19880:	689b      	ldr	r3, [r3, #8]
   19882:	f107 0217 	add.w	r2, r7, #23
   19886:	4611      	mov	r1, r2
   19888:	4618      	mov	r0, r3
   1988a:	f7e9 ff8f 	bl	37ac <bb_getUInt8>
   1988e:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19892:	2b00      	cmp	r3, #0
   19894:	d002      	beq.n	1989c <cosem_setAssociationLogicalName+0xa28>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19896:	f44f 7381 	mov.w	r3, #258	; 0x102
   1989a:	e1e0      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                object->authenticationMechanismName.authenticationMechanismName = ch;
   1989c:	7dfa      	ldrb	r2, [r7, #23]
   1989e:	68bb      	ldr	r3, [r7, #8]
   198a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
                //Get Tag.
                ret = bb_getUInt8(value->byteArr, &ch);
   198a4:	683b      	ldr	r3, [r7, #0]
   198a6:	689b      	ldr	r3, [r3, #8]
   198a8:	f107 0217 	add.w	r2, r7, #23
   198ac:	4611      	mov	r1, r2
   198ae:	4618      	mov	r0, r3
   198b0:	f7e9 ff7c 	bl	37ac <bb_getUInt8>
   198b4:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   198b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   198b8:	2b00      	cmp	r3, #0
   198ba:	d102      	bne.n	198c2 <cosem_setAssociationLogicalName+0xa4e>
   198bc:	7dfb      	ldrb	r3, [r7, #23]
   198be:	2b11      	cmp	r3, #17
   198c0:	d002      	beq.n	198c8 <cosem_setAssociationLogicalName+0xa54>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   198c2:	f44f 7381 	mov.w	r3, #258	; 0x102
   198c6:	e1ca      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = bb_getUInt8(value->byteArr, &ch);
   198c8:	683b      	ldr	r3, [r7, #0]
   198ca:	689b      	ldr	r3, [r3, #8]
   198cc:	f107 0217 	add.w	r2, r7, #23
   198d0:	4611      	mov	r1, r2
   198d2:	4618      	mov	r0, r3
   198d4:	f7e9 ff6a 	bl	37ac <bb_getUInt8>
   198d8:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   198da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   198dc:	2b00      	cmp	r3, #0
   198de:	d002      	beq.n	198e6 <cosem_setAssociationLogicalName+0xa72>
                {
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   198e0:	f44f 7381 	mov.w	r3, #258	; 0x102
   198e4:	e1bb      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   198e6:	7dfa      	ldrb	r2, [r7, #23]
   198e8:	68bb      	ldr	r3, [r7, #8]
   198ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   198ee:	e1b5      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
            }
        }
        else  if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   198f0:	683b      	ldr	r3, [r7, #0]
   198f2:	781b      	ldrb	r3, [r3, #0]
   198f4:	2b02      	cmp	r3, #2
   198f6:	f040 81b1 	bne.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            ret = va_get(value->Arr, &tmp);
   198fa:	683b      	ldr	r3, [r7, #0]
   198fc:	689b      	ldr	r3, [r3, #8]
   198fe:	f107 0220 	add.w	r2, r7, #32
   19902:	4611      	mov	r1, r2
   19904:	4618      	mov	r0, r3
   19906:	f00d fa8b 	bl	26e20 <va_get>
   1990a:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   1990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1990e:	2b00      	cmp	r3, #0
   19910:	d001      	beq.n	19916 <cosem_setAssociationLogicalName+0xaa2>
            {
                return ret;
   19912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19914:	e1a3      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.jointIsoCtt = var_toInteger(tmp);
   19916:	6a3b      	ldr	r3, [r7, #32]
   19918:	4618      	mov	r0, r3
   1991a:	f00d f8d7 	bl	26acc <var_toInteger>
   1991e:	4603      	mov	r3, r0
   19920:	b2da      	uxtb	r2, r3
   19922:	68bb      	ldr	r3, [r7, #8]
   19924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            ret = va_get(value->Arr, &tmp);
   19928:	683b      	ldr	r3, [r7, #0]
   1992a:	689b      	ldr	r3, [r3, #8]
   1992c:	f107 0220 	add.w	r2, r7, #32
   19930:	4611      	mov	r1, r2
   19932:	4618      	mov	r0, r3
   19934:	f00d fa74 	bl	26e20 <va_get>
   19938:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   1993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1993c:	2b00      	cmp	r3, #0
   1993e:	d001      	beq.n	19944 <cosem_setAssociationLogicalName+0xad0>
            {
                return ret;
   19940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19942:	e18c      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.country = var_toInteger(tmp);
   19944:	6a3b      	ldr	r3, [r7, #32]
   19946:	4618      	mov	r0, r3
   19948:	f00d f8c0 	bl	26acc <var_toInteger>
   1994c:	4603      	mov	r3, r0
   1994e:	b2da      	uxtb	r2, r3
   19950:	68bb      	ldr	r3, [r7, #8]
   19952:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            ret = va_get(value->Arr, &tmp);
   19956:	683b      	ldr	r3, [r7, #0]
   19958:	689b      	ldr	r3, [r3, #8]
   1995a:	f107 0220 	add.w	r2, r7, #32
   1995e:	4611      	mov	r1, r2
   19960:	4618      	mov	r0, r3
   19962:	f00d fa5d 	bl	26e20 <va_get>
   19966:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1996a:	2b00      	cmp	r3, #0
   1996c:	d001      	beq.n	19972 <cosem_setAssociationLogicalName+0xafe>
            {
                return ret;
   1996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19970:	e175      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.countryName = (unsigned short)var_toInteger(tmp);
   19972:	6a3b      	ldr	r3, [r7, #32]
   19974:	4618      	mov	r0, r3
   19976:	f00d f8a9 	bl	26acc <var_toInteger>
   1997a:	4603      	mov	r3, r0
   1997c:	b29a      	uxth	r2, r3
   1997e:	68bb      	ldr	r3, [r7, #8]
   19980:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
            ret = va_get(value->Arr, &tmp);
   19984:	683b      	ldr	r3, [r7, #0]
   19986:	689b      	ldr	r3, [r3, #8]
   19988:	f107 0220 	add.w	r2, r7, #32
   1998c:	4611      	mov	r1, r2
   1998e:	4618      	mov	r0, r3
   19990:	f00d fa46 	bl	26e20 <va_get>
   19994:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19998:	2b00      	cmp	r3, #0
   1999a:	d001      	beq.n	199a0 <cosem_setAssociationLogicalName+0xb2c>
            {
                return ret;
   1999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1999e:	e15e      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   199a0:	6a3b      	ldr	r3, [r7, #32]
   199a2:	4618      	mov	r0, r3
   199a4:	f00d f892 	bl	26acc <var_toInteger>
   199a8:	4603      	mov	r3, r0
   199aa:	b2da      	uxtb	r2, r3
   199ac:	68bb      	ldr	r3, [r7, #8]
   199ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            ret = va_get(value->Arr, &tmp);
   199b2:	683b      	ldr	r3, [r7, #0]
   199b4:	689b      	ldr	r3, [r3, #8]
   199b6:	f107 0220 	add.w	r2, r7, #32
   199ba:	4611      	mov	r1, r2
   199bc:	4618      	mov	r0, r3
   199be:	f00d fa2f 	bl	26e20 <va_get>
   199c2:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   199c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   199c6:	2b00      	cmp	r3, #0
   199c8:	d001      	beq.n	199ce <cosem_setAssociationLogicalName+0xb5a>
            {
                return ret;
   199ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   199cc:	e147      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.dlmsUA = (unsigned char)var_toInteger(tmp);
   199ce:	6a3b      	ldr	r3, [r7, #32]
   199d0:	4618      	mov	r0, r3
   199d2:	f00d f87b 	bl	26acc <var_toInteger>
   199d6:	4603      	mov	r3, r0
   199d8:	b2da      	uxtb	r2, r3
   199da:	68bb      	ldr	r3, [r7, #8]
   199dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            ret = va_get(value->Arr, &tmp);
   199e0:	683b      	ldr	r3, [r7, #0]
   199e2:	689b      	ldr	r3, [r3, #8]
   199e4:	f107 0220 	add.w	r2, r7, #32
   199e8:	4611      	mov	r1, r2
   199ea:	4618      	mov	r0, r3
   199ec:	f00d fa18 	bl	26e20 <va_get>
   199f0:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   199f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   199f4:	2b00      	cmp	r3, #0
   199f6:	d001      	beq.n	199fc <cosem_setAssociationLogicalName+0xb88>
            {
                return ret;
   199f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   199fa:	e130      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.authenticationMechanismName = (unsigned char)var_toInteger(tmp);
   199fc:	6a3b      	ldr	r3, [r7, #32]
   199fe:	4618      	mov	r0, r3
   19a00:	f00d f864 	bl	26acc <var_toInteger>
   19a04:	4603      	mov	r3, r0
   19a06:	b2da      	uxtb	r2, r3
   19a08:	68bb      	ldr	r3, [r7, #8]
   19a0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            ret = va_get(value->Arr, &tmp);
   19a0e:	683b      	ldr	r3, [r7, #0]
   19a10:	689b      	ldr	r3, [r3, #8]
   19a12:	f107 0220 	add.w	r2, r7, #32
   19a16:	4611      	mov	r1, r2
   19a18:	4618      	mov	r0, r3
   19a1a:	f00d fa01 	bl	26e20 <va_get>
   19a1e:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19a22:	2b00      	cmp	r3, #0
   19a24:	d001      	beq.n	19a2a <cosem_setAssociationLogicalName+0xbb6>
            {
                return ret;
   19a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19a28:	e119      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)var_toInteger(tmp);
   19a2a:	6a3b      	ldr	r3, [r7, #32]
   19a2c:	4618      	mov	r0, r3
   19a2e:	f00d f84d 	bl	26acc <var_toInteger>
   19a32:	4603      	mov	r3, r0
   19a34:	b2da      	uxtb	r2, r3
   19a36:	68bb      	ldr	r3, [r7, #8]
   19a38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   19a3c:	e10e      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
    }
    else if (index == 7)
   19a3e:	79fb      	ldrb	r3, [r7, #7]
   19a40:	2b07      	cmp	r3, #7
   19a42:	d115      	bne.n	19a70 <cosem_setAssociationLogicalName+0xbfc>
    {
        bb_clear(&object->secret);
   19a44:	68bb      	ldr	r3, [r7, #8]
   19a46:	3354      	adds	r3, #84	; 0x54
   19a48:	4618      	mov	r0, r3
   19a4a:	f7e9 fe8b 	bl	3764 <bb_clear>
        if (value->byteArr != NULL)
   19a4e:	683b      	ldr	r3, [r7, #0]
   19a50:	689b      	ldr	r3, [r3, #8]
   19a52:	2b00      	cmp	r3, #0
   19a54:	f000 8102 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            bb_set2(&object->secret, value->byteArr, 0, value->byteArr->size);
   19a58:	68bb      	ldr	r3, [r7, #8]
   19a5a:	f103 0054 	add.w	r0, r3, #84	; 0x54
   19a5e:	683b      	ldr	r3, [r7, #0]
   19a60:	6899      	ldr	r1, [r3, #8]
   19a62:	683b      	ldr	r3, [r7, #0]
   19a64:	689b      	ldr	r3, [r3, #8]
   19a66:	88db      	ldrh	r3, [r3, #6]
   19a68:	2200      	movs	r2, #0
   19a6a:	f7e9 fdd9 	bl	3620 <bb_set2>
   19a6e:	e0f5      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
    }
    else if (index == 8)
   19a70:	79fb      	ldrb	r3, [r7, #7]
   19a72:	2b08      	cmp	r3, #8
   19a74:	d107      	bne.n	19a86 <cosem_setAssociationLogicalName+0xc12>
    {
        object->associationStatus = (DLMS_ASSOCIATION_STATUS)var_toInteger(value);
   19a76:	6838      	ldr	r0, [r7, #0]
   19a78:	f00d f828 	bl	26acc <var_toInteger>
   19a7c:	4603      	mov	r3, r0
   19a7e:	b2da      	uxtb	r2, r3
   19a80:	68bb      	ldr	r3, [r7, #8]
   19a82:	741a      	strb	r2, [r3, #16]
   19a84:	e0ea      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
    }
    else if (index == 9)
   19a86:	79fb      	ldrb	r3, [r7, #7]
   19a88:	2b09      	cmp	r3, #9
   19a8a:	d116      	bne.n	19aba <cosem_setAssociationLogicalName+0xc46>
    {
        if (value->byteArr == NULL || value->byteArr->size != 6)
   19a8c:	683b      	ldr	r3, [r7, #0]
   19a8e:	689b      	ldr	r3, [r3, #8]
   19a90:	2b00      	cmp	r3, #0
   19a92:	d004      	beq.n	19a9e <cosem_setAssociationLogicalName+0xc2a>
   19a94:	683b      	ldr	r3, [r7, #0]
   19a96:	689b      	ldr	r3, [r3, #8]
   19a98:	88db      	ldrh	r3, [r3, #6]
   19a9a:	2b06      	cmp	r3, #6
   19a9c:	d002      	beq.n	19aa4 <cosem_setAssociationLogicalName+0xc30>
        {
            ret = DLMS_ERROR_CODE_UNMATCH_TYPE;
   19a9e:	230c      	movs	r3, #12
   19aa0:	633b      	str	r3, [r7, #48]	; 0x30
   19aa2:	e0db      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
        else
        {
            memcpy(object->securitySetupReference, value->byteArr->data, 6);
   19aa4:	68bb      	ldr	r3, [r7, #8]
   19aa6:	f103 0060 	add.w	r0, r3, #96	; 0x60
   19aaa:	683b      	ldr	r3, [r7, #0]
   19aac:	689b      	ldr	r3, [r3, #8]
   19aae:	681b      	ldr	r3, [r3, #0]
   19ab0:	2206      	movs	r2, #6
   19ab2:	4619      	mov	r1, r3
   19ab4:	f00f ffe5 	bl	29a82 <memcpy>
   19ab8:	e0d0      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
        }
    }
    else if (index == 10)
   19aba:	79fb      	ldrb	r3, [r7, #7]
   19abc:	2b0a      	cmp	r3, #10
   19abe:	d172      	bne.n	19ba6 <cosem_setAssociationLogicalName+0xd32>
    {
        obj_clearUserList(&object->userList);
   19ac0:	68bb      	ldr	r3, [r7, #8]
   19ac2:	3368      	adds	r3, #104	; 0x68
   19ac4:	4618      	mov	r0, r3
   19ac6:	f7fd fc4b 	bl	17360 <obj_clearUserList>
        if (value->Arr != NULL)
   19aca:	683b      	ldr	r3, [r7, #0]
   19acc:	689b      	ldr	r3, [r3, #8]
   19ace:	2b00      	cmp	r3, #0
   19ad0:	f000 80c4 	beq.w	19c5c <cosem_setAssociationLogicalName+0xde8>
        {
            gxKey2* it;
            for (pos = 0; pos != value->Arr->size; ++pos)
   19ad4:	2300      	movs	r3, #0
   19ad6:	637b      	str	r3, [r7, #52]	; 0x34
   19ad8:	e05d      	b.n	19b96 <cosem_setAssociationLogicalName+0xd22>
            {
                ret = va_get(value->Arr, &tmp);
   19ada:	683b      	ldr	r3, [r7, #0]
   19adc:	689b      	ldr	r3, [r3, #8]
   19ade:	f107 0220 	add.w	r2, r7, #32
   19ae2:	4611      	mov	r1, r2
   19ae4:	4618      	mov	r0, r3
   19ae6:	f00d f99b 	bl	26e20 <va_get>
   19aea:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19aee:	2b00      	cmp	r3, #0
   19af0:	d001      	beq.n	19af6 <cosem_setAssociationLogicalName+0xc82>
                {
                    return ret;
   19af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19af4:	e0b3      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                ret = va_get(tmp->Arr, &tmp2);
   19af6:	6a3b      	ldr	r3, [r7, #32]
   19af8:	689b      	ldr	r3, [r3, #8]
   19afa:	f107 021c 	add.w	r2, r7, #28
   19afe:	4611      	mov	r1, r2
   19b00:	4618      	mov	r0, r3
   19b02:	f00d f98d 	bl	26e20 <va_get>
   19b06:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19b0a:	2b00      	cmp	r3, #0
   19b0c:	d001      	beq.n	19b12 <cosem_setAssociationLogicalName+0xc9e>
                {
                    return ret;
   19b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19b10:	e0a5      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                it = (gxKey2*)gxmalloc(sizeof(gxKey2));
   19b12:	2008      	movs	r0, #8
   19b14:	f00f ff96 	bl	29a44 <malloc>
   19b18:	4603      	mov	r3, r0
   19b1a:	627b      	str	r3, [r7, #36]	; 0x24
                it->key = (unsigned char)var_toInteger(tmp2);
   19b1c:	69fb      	ldr	r3, [r7, #28]
   19b1e:	4618      	mov	r0, r3
   19b20:	f00c ffd4 	bl	26acc <var_toInteger>
   19b24:	4603      	mov	r3, r0
   19b26:	b2da      	uxtb	r2, r3
   19b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b2a:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp2);
   19b2c:	6a3b      	ldr	r3, [r7, #32]
   19b2e:	689b      	ldr	r3, [r3, #8]
   19b30:	f107 021c 	add.w	r2, r7, #28
   19b34:	4611      	mov	r1, r2
   19b36:	4618      	mov	r0, r3
   19b38:	f00d f972 	bl	26e20 <va_get>
   19b3c:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   19b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19b40:	2b00      	cmp	r3, #0
   19b42:	d001      	beq.n	19b48 <cosem_setAssociationLogicalName+0xcd4>
                {
                    return ret;
   19b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19b46:	e08a      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
                }
                it->value = gxmalloc(tmp->strVal->size + 1);
   19b48:	6a3b      	ldr	r3, [r7, #32]
   19b4a:	689b      	ldr	r3, [r3, #8]
   19b4c:	88db      	ldrh	r3, [r3, #6]
   19b4e:	3301      	adds	r3, #1
   19b50:	4618      	mov	r0, r3
   19b52:	f00f ff77 	bl	29a44 <malloc>
   19b56:	4603      	mov	r3, r0
   19b58:	461a      	mov	r2, r3
   19b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b5c:	605a      	str	r2, [r3, #4]
                ((char*)it->value)[tmp->strVal->size] = 0;
   19b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b60:	685b      	ldr	r3, [r3, #4]
   19b62:	6a3a      	ldr	r2, [r7, #32]
   19b64:	6892      	ldr	r2, [r2, #8]
   19b66:	88d2      	ldrh	r2, [r2, #6]
   19b68:	4413      	add	r3, r2
   19b6a:	2200      	movs	r2, #0
   19b6c:	701a      	strb	r2, [r3, #0]
                memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
   19b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b70:	6858      	ldr	r0, [r3, #4]
   19b72:	6a3b      	ldr	r3, [r7, #32]
   19b74:	689b      	ldr	r3, [r3, #8]
   19b76:	6819      	ldr	r1, [r3, #0]
   19b78:	6a3b      	ldr	r3, [r7, #32]
   19b7a:	689b      	ldr	r3, [r3, #8]
   19b7c:	88db      	ldrh	r3, [r3, #6]
   19b7e:	461a      	mov	r2, r3
   19b80:	f00f ff7f 	bl	29a82 <memcpy>
                arr_push(&object->userList, it);
   19b84:	68bb      	ldr	r3, [r7, #8]
   19b86:	3368      	adds	r3, #104	; 0x68
   19b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19b8a:	4618      	mov	r0, r3
   19b8c:	f7f2 fd78 	bl	c680 <arr_push>
    {
        obj_clearUserList(&object->userList);
        if (value->Arr != NULL)
        {
            gxKey2* it;
            for (pos = 0; pos != value->Arr->size; ++pos)
   19b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b92:	3301      	adds	r3, #1
   19b94:	637b      	str	r3, [r7, #52]	; 0x34
   19b96:	683b      	ldr	r3, [r7, #0]
   19b98:	689b      	ldr	r3, [r3, #8]
   19b9a:	88db      	ldrh	r3, [r3, #6]
   19b9c:	461a      	mov	r2, r3
   19b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19ba0:	429a      	cmp	r2, r3
   19ba2:	d19a      	bne.n	19ada <cosem_setAssociationLogicalName+0xc66>
   19ba4:	e05a      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
                memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
                arr_push(&object->userList, it);
            }
        }
    }
    else if (index == 11)
   19ba6:	79fb      	ldrb	r3, [r7, #7]
   19ba8:	2b0b      	cmp	r3, #11
   19baa:	d154      	bne.n	19c56 <cosem_setAssociationLogicalName+0xde2>
    {
        if (object->currentUser.value != NULL)
   19bac:	68bb      	ldr	r3, [r7, #8]
   19bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   19bb0:	2b00      	cmp	r3, #0
   19bb2:	d004      	beq.n	19bbe <cosem_setAssociationLogicalName+0xd4a>
        {
            gxfree(object->currentUser.value);
   19bb4:	68bb      	ldr	r3, [r7, #8]
   19bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   19bb8:	4618      	mov	r0, r3
   19bba:	f00f ff4b 	bl	29a54 <free>
        }
        if (value->Arr->size == 2)
   19bbe:	683b      	ldr	r3, [r7, #0]
   19bc0:	689b      	ldr	r3, [r3, #8]
   19bc2:	88db      	ldrh	r3, [r3, #6]
   19bc4:	2b02      	cmp	r3, #2
   19bc6:	d143      	bne.n	19c50 <cosem_setAssociationLogicalName+0xddc>
        {
            ret = va_get(value->Arr, &tmp);
   19bc8:	683b      	ldr	r3, [r7, #0]
   19bca:	689b      	ldr	r3, [r3, #8]
   19bcc:	f107 0220 	add.w	r2, r7, #32
   19bd0:	4611      	mov	r1, r2
   19bd2:	4618      	mov	r0, r3
   19bd4:	f00d f924 	bl	26e20 <va_get>
   19bd8:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19bdc:	2b00      	cmp	r3, #0
   19bde:	d001      	beq.n	19be4 <cosem_setAssociationLogicalName+0xd70>
            {
                return ret;
   19be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19be2:	e03c      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            object->currentUser.key = (unsigned char)var_toInteger(tmp);
   19be4:	6a3b      	ldr	r3, [r7, #32]
   19be6:	4618      	mov	r0, r3
   19be8:	f00c ff70 	bl	26acc <var_toInteger>
   19bec:	4603      	mov	r3, r0
   19bee:	b2da      	uxtb	r2, r3
   19bf0:	68bb      	ldr	r3, [r7, #8]
   19bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            ret = va_get(value->Arr, &tmp);
   19bf6:	683b      	ldr	r3, [r7, #0]
   19bf8:	689b      	ldr	r3, [r3, #8]
   19bfa:	f107 0220 	add.w	r2, r7, #32
   19bfe:	4611      	mov	r1, r2
   19c00:	4618      	mov	r0, r3
   19c02:	f00d f90d 	bl	26e20 <va_get>
   19c06:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != DLMS_ERROR_CODE_OK)
   19c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19c0a:	2b00      	cmp	r3, #0
   19c0c:	d001      	beq.n	19c12 <cosem_setAssociationLogicalName+0xd9e>
            {
                return ret;
   19c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19c10:	e025      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
            }
            if (tmp->strVal != NULL && tmp->strVal->size != 0)
   19c12:	6a3b      	ldr	r3, [r7, #32]
   19c14:	689b      	ldr	r3, [r3, #8]
   19c16:	2b00      	cmp	r3, #0
   19c18:	d020      	beq.n	19c5c <cosem_setAssociationLogicalName+0xde8>
   19c1a:	6a3b      	ldr	r3, [r7, #32]
   19c1c:	689b      	ldr	r3, [r3, #8]
   19c1e:	88db      	ldrh	r3, [r3, #6]
   19c20:	2b00      	cmp	r3, #0
   19c22:	d01b      	beq.n	19c5c <cosem_setAssociationLogicalName+0xde8>
            {
                object->currentUser.value = gxmalloc(tmp->strVal->size + 1);
   19c24:	6a3b      	ldr	r3, [r7, #32]
   19c26:	689b      	ldr	r3, [r3, #8]
   19c28:	88db      	ldrh	r3, [r3, #6]
   19c2a:	3301      	adds	r3, #1
   19c2c:	4618      	mov	r0, r3
   19c2e:	f00f ff09 	bl	29a44 <malloc>
   19c32:	4603      	mov	r3, r0
   19c34:	461a      	mov	r2, r3
   19c36:	68bb      	ldr	r3, [r7, #8]
   19c38:	67da      	str	r2, [r3, #124]	; 0x7c
                memcpy(object->currentUser.value, tmp->strVal, tmp->strVal->size);
   19c3a:	68bb      	ldr	r3, [r7, #8]
   19c3c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   19c3e:	6a3b      	ldr	r3, [r7, #32]
   19c40:	6899      	ldr	r1, [r3, #8]
   19c42:	6a3b      	ldr	r3, [r7, #32]
   19c44:	689b      	ldr	r3, [r3, #8]
   19c46:	88db      	ldrh	r3, [r3, #6]
   19c48:	461a      	mov	r2, r3
   19c4a:	f00f ff1a 	bl	29a82 <memcpy>
   19c4e:	e005      	b.n	19c5c <cosem_setAssociationLogicalName+0xde8>
            }
        }
        else
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19c50:	f44f 7381 	mov.w	r3, #258	; 0x102
   19c54:	e003      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19c56:	f44f 7381 	mov.w	r3, #258	; 0x102
   19c5a:	e000      	b.n	19c5e <cosem_setAssociationLogicalName+0xdea>
    }
    return DLMS_ERROR_CODE_OK;
   19c5c:	2300      	movs	r3, #0
}
   19c5e:	4618      	mov	r0, r3
   19c60:	3738      	adds	r7, #56	; 0x38
   19c62:	46bd      	mov	sp, r7
   19c64:	bd80      	pop	{r7, pc}
   19c66:	bf00      	nop

00019c68 <updateSNAccessRights>:

#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int updateSNAccessRights(
    objectArray* objectList,
    variantArray* data)
{
   19c68:	b580      	push	{r7, lr}
   19c6a:	b088      	sub	sp, #32
   19c6c:	af00      	add	r7, sp, #0
   19c6e:	6078      	str	r0, [r7, #4]
   19c70:	6039      	str	r1, [r7, #0]
    unsigned short sn;
    int pos, ret;
    dlmsVARIANT *it, *tmp;
    gxObject* obj = NULL;
   19c72:	2300      	movs	r3, #0
   19c74:	60bb      	str	r3, [r7, #8]
    for (pos = 0; pos != data->size; ++pos)
   19c76:	2300      	movs	r3, #0
   19c78:	61fb      	str	r3, [r7, #28]
   19c7a:	e03f      	b.n	19cfc <updateSNAccessRights+0x94>
    {
        ret = va_get(data, &it);
   19c7c:	f107 0310 	add.w	r3, r7, #16
   19c80:	4619      	mov	r1, r3
   19c82:	6838      	ldr	r0, [r7, #0]
   19c84:	f00d f8cc 	bl	26e20 <va_get>
   19c88:	61b8      	str	r0, [r7, #24]
        if (ret != DLMS_ERROR_CODE_OK)
   19c8a:	69bb      	ldr	r3, [r7, #24]
   19c8c:	2b00      	cmp	r3, #0
   19c8e:	d001      	beq.n	19c94 <updateSNAccessRights+0x2c>
        {
            return ret;
   19c90:	69bb      	ldr	r3, [r7, #24]
   19c92:	e03a      	b.n	19d0a <updateSNAccessRights+0xa2>
        }
        ret = va_get(it->Arr, &tmp);
   19c94:	693b      	ldr	r3, [r7, #16]
   19c96:	689b      	ldr	r3, [r3, #8]
   19c98:	f107 020c 	add.w	r2, r7, #12
   19c9c:	4611      	mov	r1, r2
   19c9e:	4618      	mov	r0, r3
   19ca0:	f00d f8be 	bl	26e20 <va_get>
   19ca4:	61b8      	str	r0, [r7, #24]
        if (ret != DLMS_ERROR_CODE_OK)
   19ca6:	69bb      	ldr	r3, [r7, #24]
   19ca8:	2b00      	cmp	r3, #0
   19caa:	d001      	beq.n	19cb0 <updateSNAccessRights+0x48>
        {
            return ret;
   19cac:	69bb      	ldr	r3, [r7, #24]
   19cae:	e02c      	b.n	19d0a <updateSNAccessRights+0xa2>
        }
        sn = (unsigned short)var_toInteger(tmp);
   19cb0:	68fb      	ldr	r3, [r7, #12]
   19cb2:	4618      	mov	r0, r3
   19cb4:	f00c ff0a 	bl	26acc <var_toInteger>
   19cb8:	4603      	mov	r3, r0
   19cba:	82fb      	strh	r3, [r7, #22]

        ret = oa_findBySN(objectList, sn, &obj);
   19cbc:	f107 0208 	add.w	r2, r7, #8
   19cc0:	8afb      	ldrh	r3, [r7, #22]
   19cc2:	4619      	mov	r1, r3
   19cc4:	6878      	ldr	r0, [r7, #4]
   19cc6:	f008 fad9 	bl	2227c <oa_findBySN>
   19cca:	61b8      	str	r0, [r7, #24]
        if (ret != DLMS_ERROR_CODE_OK)
   19ccc:	69bb      	ldr	r3, [r7, #24]
   19cce:	2b00      	cmp	r3, #0
   19cd0:	d001      	beq.n	19cd6 <updateSNAccessRights+0x6e>
        {
            return ret;
   19cd2:	69bb      	ldr	r3, [r7, #24]
   19cd4:	e019      	b.n	19d0a <updateSNAccessRights+0xa2>
        }
        if (obj != NULL)
   19cd6:	68bb      	ldr	r3, [r7, #8]
   19cd8:	2b00      	cmp	r3, #0
   19cda:	d00c      	beq.n	19cf6 <updateSNAccessRights+0x8e>
        {
            ret = obj_updateAttributeAccessModes(obj, it->Arr);
   19cdc:	68ba      	ldr	r2, [r7, #8]
   19cde:	693b      	ldr	r3, [r7, #16]
   19ce0:	689b      	ldr	r3, [r3, #8]
   19ce2:	4619      	mov	r1, r3
   19ce4:	4610      	mov	r0, r2
   19ce6:	f7fe f9af 	bl	18048 <obj_updateAttributeAccessModes>
   19cea:	61b8      	str	r0, [r7, #24]
            if (ret != DLMS_ERROR_CODE_OK)
   19cec:	69bb      	ldr	r3, [r7, #24]
   19cee:	2b00      	cmp	r3, #0
   19cf0:	d001      	beq.n	19cf6 <updateSNAccessRights+0x8e>
            {
                return ret;
   19cf2:	69bb      	ldr	r3, [r7, #24]
   19cf4:	e009      	b.n	19d0a <updateSNAccessRights+0xa2>
{
    unsigned short sn;
    int pos, ret;
    dlmsVARIANT *it, *tmp;
    gxObject* obj = NULL;
    for (pos = 0; pos != data->size; ++pos)
   19cf6:	69fb      	ldr	r3, [r7, #28]
   19cf8:	3301      	adds	r3, #1
   19cfa:	61fb      	str	r3, [r7, #28]
   19cfc:	683b      	ldr	r3, [r7, #0]
   19cfe:	88db      	ldrh	r3, [r3, #6]
   19d00:	461a      	mov	r2, r3
   19d02:	69fb      	ldr	r3, [r7, #28]
   19d04:	429a      	cmp	r2, r3
   19d06:	d1b9      	bne.n	19c7c <updateSNAccessRights+0x14>
            //TODO: obj->SetMethodAccess(id, (DLMS_ACCESS_MODE) var_toInteger(tmp2));
            }
            */
        }
    }
    return DLMS_ERROR_CODE_OK;
   19d08:	2300      	movs	r3, #0
}
   19d0a:	4618      	mov	r0, r3
   19d0c:	3720      	adds	r7, #32
   19d0e:	46bd      	mov	sp, r7
   19d10:	bd80      	pop	{r7, pc}
   19d12:	bf00      	nop

00019d14 <cosem_setAssociationShortName>:
int cosem_setAssociationShortName(
    dlmsSettings* settings,
    gxAssociationShortName* object,
    unsigned char index,
    dlmsVARIANT *value)
{
   19d14:	b580      	push	{r7, lr}
   19d16:	b08c      	sub	sp, #48	; 0x30
   19d18:	af00      	add	r7, sp, #0
   19d1a:	60f8      	str	r0, [r7, #12]
   19d1c:	60b9      	str	r1, [r7, #8]
   19d1e:	603b      	str	r3, [r7, #0]
   19d20:	4613      	mov	r3, r2
   19d22:	71fb      	strb	r3, [r7, #7]
    unsigned short sn;
    DLMS_OBJECT_TYPE type;
    int pos, ret, version;
    dlmsVARIANT *tmp, *tmp2;
    gxObject* obj = NULL;
   19d24:	2300      	movs	r3, #0
   19d26:	617b      	str	r3, [r7, #20]
    if (index == 2)
   19d28:	79fb      	ldrb	r3, [r7, #7]
   19d2a:	2b02      	cmp	r3, #2
   19d2c:	f040 80aa 	bne.w	19e84 <cosem_setAssociationShortName+0x170>
    {
        oa_empty(&object->objectList);
   19d30:	68bb      	ldr	r3, [r7, #8]
   19d32:	3310      	adds	r3, #16
   19d34:	4618      	mov	r0, r3
   19d36:	f008 fa5f 	bl	221f8 <oa_empty>
        if (value->Arr != NULL)
   19d3a:	683b      	ldr	r3, [r7, #0]
   19d3c:	689b      	ldr	r3, [r3, #8]
   19d3e:	2b00      	cmp	r3, #0
   19d40:	f000 80cb 	beq.w	19eda <cosem_setAssociationShortName+0x1c6>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   19d44:	2300      	movs	r3, #0
   19d46:	62fb      	str	r3, [r7, #44]	; 0x2c
   19d48:	e093      	b.n	19e72 <cosem_setAssociationShortName+0x15e>
            {
                ret = va_get(value->Arr, &tmp);
   19d4a:	683b      	ldr	r3, [r7, #0]
   19d4c:	689b      	ldr	r3, [r3, #8]
   19d4e:	f107 021c 	add.w	r2, r7, #28
   19d52:	4611      	mov	r1, r2
   19d54:	4618      	mov	r0, r3
   19d56:	f00d f863 	bl	26e20 <va_get>
   19d5a:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != DLMS_ERROR_CODE_OK)
   19d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d001      	beq.n	19d66 <cosem_setAssociationShortName+0x52>
                {
                    return ret;
   19d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d64:	e0ba      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                }

                ret = va_get(tmp->Arr, &tmp2);
   19d66:	69fb      	ldr	r3, [r7, #28]
   19d68:	689b      	ldr	r3, [r3, #8]
   19d6a:	f107 0218 	add.w	r2, r7, #24
   19d6e:	4611      	mov	r1, r2
   19d70:	4618      	mov	r0, r3
   19d72:	f00d f855 	bl	26e20 <va_get>
   19d76:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != DLMS_ERROR_CODE_OK)
   19d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d001      	beq.n	19d82 <cosem_setAssociationShortName+0x6e>
                {
                    return ret;
   19d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d80:	e0ac      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                }

                sn = (unsigned short)var_toInteger(tmp2);
   19d82:	69bb      	ldr	r3, [r7, #24]
   19d84:	4618      	mov	r0, r3
   19d86:	f00c fea1 	bl	26acc <var_toInteger>
   19d8a:	4603      	mov	r3, r0
   19d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
                ret = oa_findBySN(&settings->objects, sn, &obj);
   19d8e:	68fb      	ldr	r3, [r7, #12]
   19d90:	3374      	adds	r3, #116	; 0x74
   19d92:	f107 0214 	add.w	r2, r7, #20
   19d96:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   19d98:	4618      	mov	r0, r3
   19d9a:	f008 fa6f 	bl	2227c <oa_findBySN>
   19d9e:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != DLMS_ERROR_CODE_OK)
   19da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19da2:	2b00      	cmp	r3, #0
   19da4:	d001      	beq.n	19daa <cosem_setAssociationShortName+0x96>
                {
                    return ret;
   19da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19da8:	e098      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                }
                if (obj == NULL)
   19daa:	697b      	ldr	r3, [r7, #20]
   19dac:	2b00      	cmp	r3, #0
   19dae:	d154      	bne.n	19e5a <cosem_setAssociationShortName+0x146>
                {
                    ret = va_get(tmp->Arr, &tmp2);
   19db0:	69fb      	ldr	r3, [r7, #28]
   19db2:	689b      	ldr	r3, [r3, #8]
   19db4:	f107 0218 	add.w	r2, r7, #24
   19db8:	4611      	mov	r1, r2
   19dba:	4618      	mov	r0, r3
   19dbc:	f00d f830 	bl	26e20 <va_get>
   19dc0:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (ret != DLMS_ERROR_CODE_OK)
   19dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	d001      	beq.n	19dcc <cosem_setAssociationShortName+0xb8>
                    {
                        return ret;
   19dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dca:	e087      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                    }

                    type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   19dcc:	69bb      	ldr	r3, [r7, #24]
   19dce:	4618      	mov	r0, r3
   19dd0:	f00c fe7c 	bl	26acc <var_toInteger>
   19dd4:	4603      	mov	r3, r0
   19dd6:	84bb      	strh	r3, [r7, #36]	; 0x24

                    ret = va_get(tmp->Arr, &tmp2);
   19dd8:	69fb      	ldr	r3, [r7, #28]
   19dda:	689b      	ldr	r3, [r3, #8]
   19ddc:	f107 0218 	add.w	r2, r7, #24
   19de0:	4611      	mov	r1, r2
   19de2:	4618      	mov	r0, r3
   19de4:	f00d f81c 	bl	26e20 <va_get>
   19de8:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (ret != DLMS_ERROR_CODE_OK)
   19dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19dec:	2b00      	cmp	r3, #0
   19dee:	d001      	beq.n	19df4 <cosem_setAssociationShortName+0xe0>
                    {
                        return ret;
   19df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19df2:	e073      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                    }

                    version = var_toInteger(tmp2);
   19df4:	69bb      	ldr	r3, [r7, #24]
   19df6:	4618      	mov	r0, r3
   19df8:	f00c fe68 	bl	26acc <var_toInteger>
   19dfc:	6238      	str	r0, [r7, #32]
                    ret = va_get(tmp->Arr, &tmp2);
   19dfe:	69fb      	ldr	r3, [r7, #28]
   19e00:	689b      	ldr	r3, [r3, #8]
   19e02:	f107 0218 	add.w	r2, r7, #24
   19e06:	4611      	mov	r1, r2
   19e08:	4618      	mov	r0, r3
   19e0a:	f00d f809 	bl	26e20 <va_get>
   19e0e:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (ret != DLMS_ERROR_CODE_OK)
   19e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e12:	2b00      	cmp	r3, #0
   19e14:	d001      	beq.n	19e1a <cosem_setAssociationShortName+0x106>
                    {
                        return ret;
   19e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e18:	e060      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                    }

                    ret = cosem_createObject(type, &obj);
   19e1a:	f107 0214 	add.w	r2, r7, #20
   19e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   19e20:	4611      	mov	r1, r2
   19e22:	4618      	mov	r0, r3
   19e24:	f7eb ffb0 	bl	5d88 <cosem_createObject>
   19e28:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (ret != DLMS_ERROR_CODE_OK)
   19e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e2c:	2b00      	cmp	r3, #0
   19e2e:	d11c      	bne.n	19e6a <cosem_setAssociationShortName+0x156>
                    {
                        //If unknown object.
                        continue;
                    }
                    ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   19e30:	697a      	ldr	r2, [r7, #20]
   19e32:	69bb      	ldr	r3, [r7, #24]
   19e34:	689b      	ldr	r3, [r3, #8]
   19e36:	681b      	ldr	r3, [r3, #0]
   19e38:	4619      	mov	r1, r3
   19e3a:	4610      	mov	r0, r2
   19e3c:	f7eb fff2 	bl	5e24 <cosem_setLogicalName>
   19e40:	62b8      	str	r0, [r7, #40]	; 0x28
                    if (ret != DLMS_ERROR_CODE_OK)
   19e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e44:	2b00      	cmp	r3, #0
   19e46:	d001      	beq.n	19e4c <cosem_setAssociationShortName+0x138>
                    {
                        return ret;
   19e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e4a:	e047      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
                    }
                    obj->shortName = sn;
   19e4c:	697b      	ldr	r3, [r7, #20]
   19e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   19e50:	809a      	strh	r2, [r3, #4]
                    obj->version = version;
   19e52:	697b      	ldr	r3, [r7, #20]
   19e54:	6a3a      	ldr	r2, [r7, #32]
   19e56:	b2d2      	uxtb	r2, r2
   19e58:	705a      	strb	r2, [r3, #1]
                }
                oa_push(&object->objectList, obj);
   19e5a:	68bb      	ldr	r3, [r7, #8]
   19e5c:	3310      	adds	r3, #16
   19e5e:	697a      	ldr	r2, [r7, #20]
   19e60:	4611      	mov	r1, r2
   19e62:	4618      	mov	r0, r3
   19e64:	f008 f8f4 	bl	22050 <oa_push>
   19e68:	e000      	b.n	19e6c <cosem_setAssociationShortName+0x158>

                    ret = cosem_createObject(type, &obj);
                    if (ret != DLMS_ERROR_CODE_OK)
                    {
                        //If unknown object.
                        continue;
   19e6a:	bf00      	nop
    if (index == 2)
    {
        oa_empty(&object->objectList);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   19e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e6e:	3301      	adds	r3, #1
   19e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   19e72:	683b      	ldr	r3, [r7, #0]
   19e74:	689b      	ldr	r3, [r3, #8]
   19e76:	88db      	ldrh	r3, [r3, #6]
   19e78:	461a      	mov	r2, r3
   19e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e7c:	429a      	cmp	r2, r3
   19e7e:	f47f af64 	bne.w	19d4a <cosem_setAssociationShortName+0x36>
   19e82:	e02a      	b.n	19eda <cosem_setAssociationShortName+0x1c6>
                }
                oa_push(&object->objectList, obj);
            }
        }
    }
    else if (index == 3)
   19e84:	79fb      	ldrb	r3, [r7, #7]
   19e86:	2b03      	cmp	r3, #3
   19e88:	d10a      	bne.n	19ea0 <cosem_setAssociationShortName+0x18c>
    {
        return updateSNAccessRights(&object->objectList, value->Arr);
   19e8a:	68bb      	ldr	r3, [r7, #8]
   19e8c:	f103 0210 	add.w	r2, r3, #16
   19e90:	683b      	ldr	r3, [r7, #0]
   19e92:	689b      	ldr	r3, [r3, #8]
   19e94:	4619      	mov	r1, r3
   19e96:	4610      	mov	r0, r2
   19e98:	f7ff fee6 	bl	19c68 <updateSNAccessRights>
   19e9c:	4603      	mov	r3, r0
   19e9e:	e01d      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
    }
    else if (index == 4)
   19ea0:	79fb      	ldrb	r3, [r7, #7]
   19ea2:	2b04      	cmp	r3, #4
   19ea4:	d116      	bne.n	19ed4 <cosem_setAssociationShortName+0x1c0>
    {
        if (value->byteArr == NULL || value->byteArr->size != 6)
   19ea6:	683b      	ldr	r3, [r7, #0]
   19ea8:	689b      	ldr	r3, [r3, #8]
   19eaa:	2b00      	cmp	r3, #0
   19eac:	d004      	beq.n	19eb8 <cosem_setAssociationShortName+0x1a4>
   19eae:	683b      	ldr	r3, [r7, #0]
   19eb0:	689b      	ldr	r3, [r3, #8]
   19eb2:	88db      	ldrh	r3, [r3, #6]
   19eb4:	2b06      	cmp	r3, #6
   19eb6:	d002      	beq.n	19ebe <cosem_setAssociationShortName+0x1aa>
        {
            ret = DLMS_ERROR_CODE_UNMATCH_TYPE;
   19eb8:	230c      	movs	r3, #12
   19eba:	62bb      	str	r3, [r7, #40]	; 0x28
   19ebc:	e00d      	b.n	19eda <cosem_setAssociationShortName+0x1c6>
        }
        else
        {
            memcpy(object->securitySetupReference, value->byteArr->data, 6);
   19ebe:	68bb      	ldr	r3, [r7, #8]
   19ec0:	f103 001c 	add.w	r0, r3, #28
   19ec4:	683b      	ldr	r3, [r7, #0]
   19ec6:	689b      	ldr	r3, [r3, #8]
   19ec8:	681b      	ldr	r3, [r3, #0]
   19eca:	2206      	movs	r2, #6
   19ecc:	4619      	mov	r1, r3
   19ece:	f00f fdd8 	bl	29a82 <memcpy>
   19ed2:	e002      	b.n	19eda <cosem_setAssociationShortName+0x1c6>
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19ed4:	f44f 7381 	mov.w	r3, #258	; 0x102
   19ed8:	e000      	b.n	19edc <cosem_setAssociationShortName+0x1c8>
    }
    return DLMS_ERROR_CODE_OK;
   19eda:	2300      	movs	r3, #0
}
   19edc:	4618      	mov	r0, r3
   19ede:	3730      	adds	r7, #48	; 0x30
   19ee0:	46bd      	mov	sp, r7
   19ee2:	bd80      	pop	{r7, pc}

00019ee4 <cosem_setAutoAnswer>:
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME

#ifndef DLMS_IGNORE_AUTO_ANSWER
int cosem_setAutoAnswer(gxAutoAnswer* object, unsigned char index, dlmsVARIANT *value)
{
   19ee4:	b590      	push	{r4, r7, lr}
   19ee6:	b093      	sub	sp, #76	; 0x4c
   19ee8:	af00      	add	r7, sp, #0
   19eea:	60f8      	str	r0, [r7, #12]
   19eec:	460b      	mov	r3, r1
   19eee:	607a      	str	r2, [r7, #4]
   19ef0:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    dlmsVARIANT start, end;
    gxtime* s, *e;
    if (index == 2)
   19ef2:	7afb      	ldrb	r3, [r7, #11]
   19ef4:	2b02      	cmp	r3, #2
   19ef6:	d107      	bne.n	19f08 <cosem_setAutoAnswer+0x24>
    {
        object->mode = (DLMS_AUTO_CONNECT_MODE)var_toInteger(value);
   19ef8:	6878      	ldr	r0, [r7, #4]
   19efa:	f00c fde7 	bl	26acc <var_toInteger>
   19efe:	4603      	mov	r3, r0
   19f00:	b2da      	uxtb	r2, r3
   19f02:	68fb      	ldr	r3, [r7, #12]
   19f04:	749a      	strb	r2, [r3, #18]
   19f06:	e0df      	b.n	1a0c8 <cosem_setAutoAnswer+0x1e4>
    }
    else if (index == 3)
   19f08:	7afb      	ldrb	r3, [r7, #11]
   19f0a:	2b03      	cmp	r3, #3
   19f0c:	f040 8091 	bne.w	1a032 <cosem_setAutoAnswer+0x14e>
    {
        arr_clearKeyValuePair(&object->listeningWindow);
   19f10:	68fb      	ldr	r3, [r7, #12]
   19f12:	3314      	adds	r3, #20
   19f14:	4618      	mov	r0, r3
   19f16:	f7f2 fc8f 	bl	c838 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   19f1a:	687b      	ldr	r3, [r7, #4]
   19f1c:	689b      	ldr	r3, [r3, #8]
   19f1e:	2b00      	cmp	r3, #0
   19f20:	f000 80d2 	beq.w	1a0c8 <cosem_setAutoAnswer+0x1e4>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   19f24:	2300      	movs	r3, #0
   19f26:	647b      	str	r3, [r7, #68]	; 0x44
   19f28:	e07a      	b.n	1a020 <cosem_setAutoAnswer+0x13c>
            {
                ret = va_get(value->Arr, &tmp);
   19f2a:	687b      	ldr	r3, [r7, #4]
   19f2c:	689b      	ldr	r3, [r3, #8]
   19f2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
   19f32:	4611      	mov	r1, r2
   19f34:	4618      	mov	r0, r3
   19f36:	f00c ff73 	bl	26e20 <va_get>
   19f3a:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   19f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f3e:	2b00      	cmp	r3, #0
   19f40:	d001      	beq.n	19f46 <cosem_setAutoAnswer+0x62>
                {
                    return ret;
   19f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f44:	e0c1      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
                }
                ret = va_get(tmp->Arr, &tmp3);
   19f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19f48:	689b      	ldr	r3, [r3, #8]
   19f4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19f4e:	4611      	mov	r1, r2
   19f50:	4618      	mov	r0, r3
   19f52:	f00c ff65 	bl	26e20 <va_get>
   19f56:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   19f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f5a:	2b00      	cmp	r3, #0
   19f5c:	d001      	beq.n	19f62 <cosem_setAutoAnswer+0x7e>
                {
                    return ret;
   19f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f60:	e0b3      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
                }
                var_init(&start);
   19f62:	f107 0320 	add.w	r3, r7, #32
   19f66:	4618      	mov	r0, r3
   19f68:	f00c f8de 	bl	26128 <var_init>
                var_init(&end);
   19f6c:	f107 0310 	add.w	r3, r7, #16
   19f70:	4618      	mov	r0, r3
   19f72:	f00c f8d9 	bl	26128 <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   19f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19f78:	f107 0220 	add.w	r2, r7, #32
   19f7c:	2119      	movs	r1, #25
   19f7e:	4618      	mov	r0, r3
   19f80:	f7ef fc44 	bl	980c <dlms_changeType2>
   19f84:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   19f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f88:	2b00      	cmp	r3, #0
   19f8a:	d001      	beq.n	19f90 <cosem_setAutoAnswer+0xac>
                {
                    return ret;
   19f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f8e:	e09c      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
                }
                ret = va_get(tmp->Arr, &tmp3);
   19f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19f92:	689b      	ldr	r3, [r3, #8]
   19f94:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19f98:	4611      	mov	r1, r2
   19f9a:	4618      	mov	r0, r3
   19f9c:	f00c ff40 	bl	26e20 <va_get>
   19fa0:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   19fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19fa4:	2b00      	cmp	r3, #0
   19fa6:	d001      	beq.n	19fac <cosem_setAutoAnswer+0xc8>
                {
                    return ret;
   19fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19faa:	e08e      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
                }
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   19fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19fae:	f107 0210 	add.w	r2, r7, #16
   19fb2:	2119      	movs	r1, #25
   19fb4:	4618      	mov	r0, r3
   19fb6:	f7ef fc29 	bl	980c <dlms_changeType2>
   19fba:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   19fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19fbe:	2b00      	cmp	r3, #0
   19fc0:	d001      	beq.n	19fc6 <cosem_setAutoAnswer+0xe2>
                {
                    return ret;
   19fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19fc4:	e081      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
                }
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   19fc6:	2030      	movs	r0, #48	; 0x30
   19fc8:	f00f fd3c 	bl	29a44 <malloc>
   19fcc:	4603      	mov	r3, r0
   19fce:	63fb      	str	r3, [r7, #60]	; 0x3c
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   19fd0:	2030      	movs	r0, #48	; 0x30
   19fd2:	f00f fd37 	bl	29a44 <malloc>
   19fd6:	4603      	mov	r3, r0
   19fd8:	63bb      	str	r3, [r7, #56]	; 0x38
                time_copy(s, start.dateTime);
   19fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19fdc:	4619      	mov	r1, r3
   19fde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   19fe0:	f7ec fcb8 	bl	6954 <time_copy>
                time_copy(e, end.dateTime);
   19fe4:	69bb      	ldr	r3, [r7, #24]
   19fe6:	4619      	mov	r1, r3
   19fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19fea:	f7ec fcb3 	bl	6954 <time_copy>
                arr_push(&object->listeningWindow, key_init(s, e));
   19fee:	68fb      	ldr	r3, [r7, #12]
   19ff0:	f103 0414 	add.w	r4, r3, #20
   19ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   19ff6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   19ff8:	f7fb ff90 	bl	15f1c <key_init>
   19ffc:	4603      	mov	r3, r0
   19ffe:	4619      	mov	r1, r3
   1a000:	4620      	mov	r0, r4
   1a002:	f7f2 fb3d 	bl	c680 <arr_push>
                var_clear(&start);
   1a006:	f107 0320 	add.w	r3, r7, #32
   1a00a:	4618      	mov	r0, r3
   1a00c:	f00c f89c 	bl	26148 <var_clear>
                var_clear(&end);
   1a010:	f107 0310 	add.w	r3, r7, #16
   1a014:	4618      	mov	r0, r3
   1a016:	f00c f897 	bl	26148 <var_clear>
    else if (index == 3)
    {
        arr_clearKeyValuePair(&object->listeningWindow);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a01c:	3301      	adds	r3, #1
   1a01e:	647b      	str	r3, [r7, #68]	; 0x44
   1a020:	687b      	ldr	r3, [r7, #4]
   1a022:	689b      	ldr	r3, [r3, #8]
   1a024:	88db      	ldrh	r3, [r3, #6]
   1a026:	461a      	mov	r2, r3
   1a028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a02a:	429a      	cmp	r2, r3
   1a02c:	f47f af7d 	bne.w	19f2a <cosem_setAutoAnswer+0x46>
   1a030:	e04a      	b.n	1a0c8 <cosem_setAutoAnswer+0x1e4>
                var_clear(&start);
                var_clear(&end);
            }
        }
    }
    else if (index == 4)
   1a032:	7afb      	ldrb	r3, [r7, #11]
   1a034:	2b04      	cmp	r3, #4
   1a036:	d108      	bne.n	1a04a <cosem_setAutoAnswer+0x166>
    {
        object->status = (DLMS_AUTO_ANSWER_STATUS)var_toInteger(value);
   1a038:	6878      	ldr	r0, [r7, #4]
   1a03a:	f00c fd47 	bl	26acc <var_toInteger>
   1a03e:	4603      	mov	r3, r0
   1a040:	b2da      	uxtb	r2, r3
   1a042:	68fb      	ldr	r3, [r7, #12]
   1a044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   1a048:	e03e      	b.n	1a0c8 <cosem_setAutoAnswer+0x1e4>
    }
    else if (index == 5)
   1a04a:	7afb      	ldrb	r3, [r7, #11]
   1a04c:	2b05      	cmp	r3, #5
   1a04e:	d108      	bne.n	1a062 <cosem_setAutoAnswer+0x17e>
    {
        object->numberOfCalls = (unsigned char)var_toInteger(value);
   1a050:	6878      	ldr	r0, [r7, #4]
   1a052:	f00c fd3b 	bl	26acc <var_toInteger>
   1a056:	4603      	mov	r3, r0
   1a058:	b2da      	uxtb	r2, r3
   1a05a:	68fb      	ldr	r3, [r7, #12]
   1a05c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   1a060:	e032      	b.n	1a0c8 <cosem_setAutoAnswer+0x1e4>
    }
    else if (index == 6)
   1a062:	7afb      	ldrb	r3, [r7, #11]
   1a064:	2b06      	cmp	r3, #6
   1a066:	d12c      	bne.n	1a0c2 <cosem_setAutoAnswer+0x1de>
    {
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1a068:	687b      	ldr	r3, [r7, #4]
   1a06a:	689b      	ldr	r3, [r3, #8]
   1a06c:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1a070:	2100      	movs	r1, #0
   1a072:	4618      	mov	r0, r3
   1a074:	f00c fefa 	bl	26e6c <va_getByIndex>
   1a078:	6438      	str	r0, [r7, #64]	; 0x40
        if (ret != DLMS_ERROR_CODE_OK)
   1a07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a07c:	2b00      	cmp	r3, #0
   1a07e:	d001      	beq.n	1a084 <cosem_setAutoAnswer+0x1a0>
        {
            return ret;
   1a080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a082:	e022      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
        }
        object->numberOfRingsInListeningWindow = (unsigned char)var_toInteger(tmp);
   1a084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a086:	4618      	mov	r0, r3
   1a088:	f00c fd20 	bl	26acc <var_toInteger>
   1a08c:	4603      	mov	r3, r0
   1a08e:	b2da      	uxtb	r2, r3
   1a090:	68fb      	ldr	r3, [r7, #12]
   1a092:	741a      	strb	r2, [r3, #16]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1a094:	687b      	ldr	r3, [r7, #4]
   1a096:	689b      	ldr	r3, [r3, #8]
   1a098:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1a09c:	2101      	movs	r1, #1
   1a09e:	4618      	mov	r0, r3
   1a0a0:	f00c fee4 	bl	26e6c <va_getByIndex>
   1a0a4:	6438      	str	r0, [r7, #64]	; 0x40
        if (ret != DLMS_ERROR_CODE_OK)
   1a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d001      	beq.n	1a0b0 <cosem_setAutoAnswer+0x1cc>
        {
            return ret;
   1a0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a0ae:	e00c      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
        }
        object->numberOfRingsOutListeningWindow = (unsigned char)var_toInteger(tmp);
   1a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a0b2:	4618      	mov	r0, r3
   1a0b4:	f00c fd0a 	bl	26acc <var_toInteger>
   1a0b8:	4603      	mov	r3, r0
   1a0ba:	b2da      	uxtb	r2, r3
   1a0bc:	68fb      	ldr	r3, [r7, #12]
   1a0be:	745a      	strb	r2, [r3, #17]
   1a0c0:	e002      	b.n	1a0c8 <cosem_setAutoAnswer+0x1e4>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a0c2:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a0c6:	e000      	b.n	1a0ca <cosem_setAutoAnswer+0x1e6>
    }
    return DLMS_ERROR_CODE_OK;
   1a0c8:	2300      	movs	r3, #0
}
   1a0ca:	4618      	mov	r0, r3
   1a0cc:	374c      	adds	r7, #76	; 0x4c
   1a0ce:	46bd      	mov	sp, r7
   1a0d0:	bd90      	pop	{r4, r7, pc}
   1a0d2:	bf00      	nop

0001a0d4 <cosem_setAutoConnect>:
#endif //DLMS_IGNORE_AUTO_ANSWER

#ifndef DLMS_IGNORE_AUTO_CONNECT
int cosem_setAutoConnect(gxAutoConnect* object, unsigned char index, dlmsVARIANT *value)
{
   1a0d4:	b590      	push	{r4, r7, lr}
   1a0d6:	b095      	sub	sp, #84	; 0x54
   1a0d8:	af00      	add	r7, sp, #0
   1a0da:	60f8      	str	r0, [r7, #12]
   1a0dc:	460b      	mov	r3, r1
   1a0de:	607a      	str	r2, [r7, #4]
   1a0e0:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    dlmsVARIANT start, end;
    gxByteBuffer* str;
    gxtime* s, *e;
    if (index == 2)
   1a0e2:	7afb      	ldrb	r3, [r7, #11]
   1a0e4:	2b02      	cmp	r3, #2
   1a0e6:	d107      	bne.n	1a0f8 <cosem_setAutoConnect+0x24>
    {
        object->mode = (DLMS_AUTO_CONNECT_MODE)var_toInteger(value);
   1a0e8:	6878      	ldr	r0, [r7, #4]
   1a0ea:	f00c fcef 	bl	26acc <var_toInteger>
   1a0ee:	4603      	mov	r3, r0
   1a0f0:	b2da      	uxtb	r2, r3
   1a0f2:	68fb      	ldr	r3, [r7, #12]
   1a0f4:	741a      	strb	r2, [r3, #16]
   1a0f6:	e0fb      	b.n	1a2f0 <cosem_setAutoConnect+0x21c>
    }
    else if (index == 3)
   1a0f8:	7afb      	ldrb	r3, [r7, #11]
   1a0fa:	2b03      	cmp	r3, #3
   1a0fc:	d108      	bne.n	1a110 <cosem_setAutoConnect+0x3c>
    {
        object->repetitions = (unsigned char)var_toInteger(value);
   1a0fe:	6878      	ldr	r0, [r7, #4]
   1a100:	f00c fce4 	bl	26acc <var_toInteger>
   1a104:	4603      	mov	r3, r0
   1a106:	b2da      	uxtb	r2, r3
   1a108:	68fb      	ldr	r3, [r7, #12]
   1a10a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   1a10e:	e0ef      	b.n	1a2f0 <cosem_setAutoConnect+0x21c>
    }
    else if (index == 4)
   1a110:	7afb      	ldrb	r3, [r7, #11]
   1a112:	2b04      	cmp	r3, #4
   1a114:	d107      	bne.n	1a126 <cosem_setAutoConnect+0x52>
    {
        object->repetitionDelay = (unsigned short)var_toInteger(value);
   1a116:	6878      	ldr	r0, [r7, #4]
   1a118:	f00c fcd8 	bl	26acc <var_toInteger>
   1a11c:	4603      	mov	r3, r0
   1a11e:	b29a      	uxth	r2, r3
   1a120:	68fb      	ldr	r3, [r7, #12]
   1a122:	869a      	strh	r2, [r3, #52]	; 0x34
   1a124:	e0e4      	b.n	1a2f0 <cosem_setAutoConnect+0x21c>
    }
    else if (index == 5)
   1a126:	7afb      	ldrb	r3, [r7, #11]
   1a128:	2b05      	cmp	r3, #5
   1a12a:	f040 809b 	bne.w	1a264 <cosem_setAutoConnect+0x190>
    {
        arr_clearKeyValuePair(&object->callingWindow);
   1a12e:	68fb      	ldr	r3, [r7, #12]
   1a130:	3314      	adds	r3, #20
   1a132:	4618      	mov	r0, r3
   1a134:	f7f2 fb80 	bl	c838 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1a138:	687b      	ldr	r3, [r7, #4]
   1a13a:	689b      	ldr	r3, [r3, #8]
   1a13c:	2b00      	cmp	r3, #0
   1a13e:	f000 80d7 	beq.w	1a2f0 <cosem_setAutoConnect+0x21c>
        {
            arr_capacity(&object->callingWindow, value->Arr->size);
   1a142:	68fb      	ldr	r3, [r7, #12]
   1a144:	f103 0214 	add.w	r2, r3, #20
   1a148:	687b      	ldr	r3, [r7, #4]
   1a14a:	689b      	ldr	r3, [r3, #8]
   1a14c:	88db      	ldrh	r3, [r3, #6]
   1a14e:	4619      	mov	r1, r3
   1a150:	4610      	mov	r0, r2
   1a152:	f7f2 fa61 	bl	c618 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a156:	2300      	movs	r3, #0
   1a158:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a15a:	e07a      	b.n	1a252 <cosem_setAutoConnect+0x17e>
            {
                ret = va_get(value->Arr, &tmp);
   1a15c:	687b      	ldr	r3, [r7, #4]
   1a15e:	689b      	ldr	r3, [r3, #8]
   1a160:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1a164:	4611      	mov	r1, r2
   1a166:	4618      	mov	r0, r3
   1a168:	f00c fe5a 	bl	26e20 <va_get>
   1a16c:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a170:	2b00      	cmp	r3, #0
   1a172:	d001      	beq.n	1a178 <cosem_setAutoConnect+0xa4>
                {
                    return ret;
   1a174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a176:	e0bc      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a17a:	689b      	ldr	r3, [r3, #8]
   1a17c:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1a180:	4611      	mov	r1, r2
   1a182:	4618      	mov	r0, r3
   1a184:	f00c fe4c 	bl	26e20 <va_get>
   1a188:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a18c:	2b00      	cmp	r3, #0
   1a18e:	d001      	beq.n	1a194 <cosem_setAutoConnect+0xc0>
                {
                    return ret;
   1a190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a192:	e0ae      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                var_init(&start);
   1a194:	f107 0320 	add.w	r3, r7, #32
   1a198:	4618      	mov	r0, r3
   1a19a:	f00b ffc5 	bl	26128 <var_init>
                var_init(&end);
   1a19e:	f107 0310 	add.w	r3, r7, #16
   1a1a2:	4618      	mov	r0, r3
   1a1a4:	f00b ffc0 	bl	26128 <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   1a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1aa:	f107 0220 	add.w	r2, r7, #32
   1a1ae:	2119      	movs	r1, #25
   1a1b0:	4618      	mov	r0, r3
   1a1b2:	f7ef fb2b 	bl	980c <dlms_changeType2>
   1a1b6:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	d001      	beq.n	1a1c2 <cosem_setAutoConnect+0xee>
                {
                    return ret;
   1a1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1c0:	e097      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a1c4:	689b      	ldr	r3, [r3, #8]
   1a1c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1a1ca:	4611      	mov	r1, r2
   1a1cc:	4618      	mov	r0, r3
   1a1ce:	f00c fe27 	bl	26e20 <va_get>
   1a1d2:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1d6:	2b00      	cmp	r3, #0
   1a1d8:	d001      	beq.n	1a1de <cosem_setAutoConnect+0x10a>
                {
                    return ret;
   1a1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1dc:	e089      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   1a1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1e0:	f107 0210 	add.w	r2, r7, #16
   1a1e4:	2119      	movs	r1, #25
   1a1e6:	4618      	mov	r0, r3
   1a1e8:	f7ef fb10 	bl	980c <dlms_changeType2>
   1a1ec:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1f0:	2b00      	cmp	r3, #0
   1a1f2:	d001      	beq.n	1a1f8 <cosem_setAutoConnect+0x124>
                {
                    return ret;
   1a1f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a1f6:	e07c      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   1a1f8:	2030      	movs	r0, #48	; 0x30
   1a1fa:	f00f fc23 	bl	29a44 <malloc>
   1a1fe:	4603      	mov	r3, r0
   1a200:	647b      	str	r3, [r7, #68]	; 0x44
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1a202:	2030      	movs	r0, #48	; 0x30
   1a204:	f00f fc1e 	bl	29a44 <malloc>
   1a208:	4603      	mov	r3, r0
   1a20a:	643b      	str	r3, [r7, #64]	; 0x40
                time_copy(s, start.dateTime);
   1a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a20e:	4619      	mov	r1, r3
   1a210:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1a212:	f7ec fb9f 	bl	6954 <time_copy>
                time_copy(e, end.dateTime);
   1a216:	69bb      	ldr	r3, [r7, #24]
   1a218:	4619      	mov	r1, r3
   1a21a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a21c:	f7ec fb9a 	bl	6954 <time_copy>
                arr_push(&object->callingWindow, key_init(s, e));
   1a220:	68fb      	ldr	r3, [r7, #12]
   1a222:	f103 0414 	add.w	r4, r3, #20
   1a226:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1a228:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1a22a:	f7fb fe77 	bl	15f1c <key_init>
   1a22e:	4603      	mov	r3, r0
   1a230:	4619      	mov	r1, r3
   1a232:	4620      	mov	r0, r4
   1a234:	f7f2 fa24 	bl	c680 <arr_push>
                var_clear(&start);
   1a238:	f107 0320 	add.w	r3, r7, #32
   1a23c:	4618      	mov	r0, r3
   1a23e:	f00b ff83 	bl	26148 <var_clear>
                var_clear(&end);
   1a242:	f107 0310 	add.w	r3, r7, #16
   1a246:	4618      	mov	r0, r3
   1a248:	f00b ff7e 	bl	26148 <var_clear>
    {
        arr_clearKeyValuePair(&object->callingWindow);
        if (value->Arr != NULL)
        {
            arr_capacity(&object->callingWindow, value->Arr->size);
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a24e:	3301      	adds	r3, #1
   1a250:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a252:	687b      	ldr	r3, [r7, #4]
   1a254:	689b      	ldr	r3, [r3, #8]
   1a256:	88db      	ldrh	r3, [r3, #6]
   1a258:	461a      	mov	r2, r3
   1a25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a25c:	429a      	cmp	r2, r3
   1a25e:	f47f af7d 	bne.w	1a15c <cosem_setAutoConnect+0x88>
   1a262:	e045      	b.n	1a2f0 <cosem_setAutoConnect+0x21c>
                var_clear(&start);
                var_clear(&end);
            }
        }
    }
    else if (index == 6)
   1a264:	7afb      	ldrb	r3, [r7, #11]
   1a266:	2b06      	cmp	r3, #6
   1a268:	d13f      	bne.n	1a2ea <cosem_setAutoConnect+0x216>
    {
        arr_clearStrings(&object->destinations);
   1a26a:	68fb      	ldr	r3, [r7, #12]
   1a26c:	3324      	adds	r3, #36	; 0x24
   1a26e:	4618      	mov	r0, r3
   1a270:	f7f2 fb20 	bl	c8b4 <arr_clearStrings>
        if (value->Arr != NULL)
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	689b      	ldr	r3, [r3, #8]
   1a278:	2b00      	cmp	r3, #0
   1a27a:	d039      	beq.n	1a2f0 <cosem_setAutoConnect+0x21c>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a27c:	2300      	movs	r3, #0
   1a27e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a280:	e02b      	b.n	1a2da <cosem_setAutoConnect+0x206>
            {
                ret = va_get(value->Arr, &tmp);
   1a282:	687b      	ldr	r3, [r7, #4]
   1a284:	689b      	ldr	r3, [r3, #8]
   1a286:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1a28a:	4611      	mov	r1, r2
   1a28c:	4618      	mov	r0, r3
   1a28e:	f00c fdc7 	bl	26e20 <va_get>
   1a292:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != DLMS_ERROR_CODE_OK)
   1a294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a296:	2b00      	cmp	r3, #0
   1a298:	d001      	beq.n	1a29e <cosem_setAutoConnect+0x1ca>
                {
                    return ret;
   1a29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a29c:	e029      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
                }
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a29e:	200c      	movs	r0, #12
   1a2a0:	f00f fbd0 	bl	29a44 <malloc>
   1a2a4:	4603      	mov	r3, r0
   1a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                bb_init(str);
   1a2a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a2aa:	f7e8 fd1d 	bl	2ce8 <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a2b0:	689c      	ldr	r4, [r3, #8]
   1a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a2b4:	689b      	ldr	r3, [r3, #8]
   1a2b6:	4618      	mov	r0, r3
   1a2b8:	f7e8 fd06 	bl	2cc8 <bb_size>
   1a2bc:	4603      	mov	r3, r0
   1a2be:	2200      	movs	r2, #0
   1a2c0:	4621      	mov	r1, r4
   1a2c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a2c4:	f7e9 f9ac 	bl	3620 <bb_set2>
                arr_push(&object->destinations, str);
   1a2c8:	68fb      	ldr	r3, [r7, #12]
   1a2ca:	3324      	adds	r3, #36	; 0x24
   1a2cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1a2ce:	4618      	mov	r0, r3
   1a2d0:	f7f2 f9d6 	bl	c680 <arr_push>
    else if (index == 6)
    {
        arr_clearStrings(&object->destinations);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a2d6:	3301      	adds	r3, #1
   1a2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a2da:	687b      	ldr	r3, [r7, #4]
   1a2dc:	689b      	ldr	r3, [r3, #8]
   1a2de:	88db      	ldrh	r3, [r3, #6]
   1a2e0:	461a      	mov	r2, r3
   1a2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a2e4:	429a      	cmp	r2, r3
   1a2e6:	d1cc      	bne.n	1a282 <cosem_setAutoConnect+0x1ae>
   1a2e8:	e002      	b.n	1a2f0 <cosem_setAutoConnect+0x21c>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a2ea:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a2ee:	e000      	b.n	1a2f2 <cosem_setAutoConnect+0x21e>
    }
    return DLMS_ERROR_CODE_OK;
   1a2f0:	2300      	movs	r3, #0
}
   1a2f2:	4618      	mov	r0, r3
   1a2f4:	3754      	adds	r7, #84	; 0x54
   1a2f6:	46bd      	mov	sp, r7
   1a2f8:	bd90      	pop	{r4, r7, pc}
   1a2fa:	bf00      	nop

0001a2fc <cosem_setDemandRegister>:
#endif //DLMS_IGNORE_AUTO_CONNECT

#ifndef DLMS_IGNORE_DEMAND_REGISTER
int cosem_setDemandRegister(gxDemandRegister* object, unsigned char index, dlmsVARIANT *value)
{
   1a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2fe:	b08b      	sub	sp, #44	; 0x2c
   1a300:	af00      	add	r7, sp, #0
   1a302:	60f8      	str	r0, [r7, #12]
   1a304:	460b      	mov	r3, r1
   1a306:	607a      	str	r2, [r7, #4]
   1a308:	72fb      	strb	r3, [r7, #11]
    int ret;
    dlmsVARIANT *tmp;
    dlmsVARIANT tmp2;
    if (index == 2)
   1a30a:	7afb      	ldrb	r3, [r7, #11]
   1a30c:	2b02      	cmp	r3, #2
   1a30e:	d127      	bne.n	1a360 <cosem_setDemandRegister+0x64>
    {
        if (object->scaler != 0)
   1a310:	68fb      	ldr	r3, [r7, #12]
   1a312:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
   1a316:	2b00      	cmp	r3, #0
   1a318:	d01a      	beq.n	1a350 <cosem_setDemandRegister+0x54>
        {
            ret = var_setDouble(&object->currentAvarageValue, var_toDouble(value) * hlp_getScaler(object->scaler));
   1a31a:	68fb      	ldr	r3, [r7, #12]
   1a31c:	f103 0410 	add.w	r4, r3, #16
   1a320:	6878      	ldr	r0, [r7, #4]
   1a322:	f00d ff9b 	bl	2825c <var_toDouble>
   1a326:	4605      	mov	r5, r0
   1a328:	460e      	mov	r6, r1
   1a32a:	68fb      	ldr	r3, [r7, #12]
   1a32c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
   1a330:	4618      	mov	r0, r3
   1a332:	f007 fc57 	bl	21be4 <hlp_getScaler>
   1a336:	4602      	mov	r2, r0
   1a338:	460b      	mov	r3, r1
   1a33a:	4628      	mov	r0, r5
   1a33c:	4631      	mov	r1, r6
   1a33e:	f7e6 f8af 	bl	4a0 <__aeabi_dmul>
   1a342:	4602      	mov	r2, r0
   1a344:	460b      	mov	r3, r1
   1a346:	4620      	mov	r0, r4
   1a348:	f00b fe60 	bl	2600c <var_setDouble>
   1a34c:	6278      	str	r0, [r7, #36]	; 0x24
   1a34e:	e101      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
        else
        {
            ret = var_copy(&object->currentAvarageValue, value);
   1a350:	68fb      	ldr	r3, [r7, #12]
   1a352:	3310      	adds	r3, #16
   1a354:	6879      	ldr	r1, [r7, #4]
   1a356:	4618      	mov	r0, r3
   1a358:	f00d fd0c 	bl	27d74 <var_copy>
   1a35c:	6278      	str	r0, [r7, #36]	; 0x24
   1a35e:	e0f9      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
    }
    else if (index == 3)
   1a360:	7afb      	ldrb	r3, [r7, #11]
   1a362:	2b03      	cmp	r3, #3
   1a364:	d127      	bne.n	1a3b6 <cosem_setDemandRegister+0xba>
    {
        if (object->scaler != 0)
   1a366:	68fb      	ldr	r3, [r7, #12]
   1a368:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
   1a36c:	2b00      	cmp	r3, #0
   1a36e:	d01a      	beq.n	1a3a6 <cosem_setDemandRegister+0xaa>
        {
            ret = var_setDouble(&object->lastAvarageValue, var_toDouble(value) * hlp_getScaler(object->scaler));
   1a370:	68fb      	ldr	r3, [r7, #12]
   1a372:	f103 0420 	add.w	r4, r3, #32
   1a376:	6878      	ldr	r0, [r7, #4]
   1a378:	f00d ff70 	bl	2825c <var_toDouble>
   1a37c:	4605      	mov	r5, r0
   1a37e:	460e      	mov	r6, r1
   1a380:	68fb      	ldr	r3, [r7, #12]
   1a382:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
   1a386:	4618      	mov	r0, r3
   1a388:	f007 fc2c 	bl	21be4 <hlp_getScaler>
   1a38c:	4602      	mov	r2, r0
   1a38e:	460b      	mov	r3, r1
   1a390:	4628      	mov	r0, r5
   1a392:	4631      	mov	r1, r6
   1a394:	f7e6 f884 	bl	4a0 <__aeabi_dmul>
   1a398:	4602      	mov	r2, r0
   1a39a:	460b      	mov	r3, r1
   1a39c:	4620      	mov	r0, r4
   1a39e:	f00b fe35 	bl	2600c <var_setDouble>
   1a3a2:	6278      	str	r0, [r7, #36]	; 0x24
   1a3a4:	e0d6      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
        else
        {
            ret = var_copy(&object->lastAvarageValue, value);
   1a3a6:	68fb      	ldr	r3, [r7, #12]
   1a3a8:	3320      	adds	r3, #32
   1a3aa:	6879      	ldr	r1, [r7, #4]
   1a3ac:	4618      	mov	r0, r3
   1a3ae:	f00d fce1 	bl	27d74 <var_copy>
   1a3b2:	6278      	str	r0, [r7, #36]	; 0x24
   1a3b4:	e0ce      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
    }
    else if (index == 4)
   1a3b6:	7afb      	ldrb	r3, [r7, #11]
   1a3b8:	2b04      	cmp	r3, #4
   1a3ba:	d139      	bne.n	1a430 <cosem_setDemandRegister+0x134>
    {
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   1a3bc:	687b      	ldr	r3, [r7, #4]
   1a3be:	781b      	ldrb	r3, [r3, #0]
   1a3c0:	2b02      	cmp	r3, #2
   1a3c2:	d002      	beq.n	1a3ca <cosem_setDemandRegister+0xce>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a3c4:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a3c8:	e0c5      	b.n	1a556 <cosem_setDemandRegister+0x25a>
        }
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1a3ca:	687b      	ldr	r3, [r7, #4]
   1a3cc:	689b      	ldr	r3, [r3, #8]
   1a3ce:	f107 0220 	add.w	r2, r7, #32
   1a3d2:	2100      	movs	r1, #0
   1a3d4:	4618      	mov	r0, r3
   1a3d6:	f00c fd49 	bl	26e6c <va_getByIndex>
   1a3da:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a3de:	2b00      	cmp	r3, #0
   1a3e0:	d001      	beq.n	1a3e6 <cosem_setDemandRegister+0xea>
        {
            return ret;
   1a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a3e4:	e0b7      	b.n	1a556 <cosem_setDemandRegister+0x25a>
        }
        object->scaler = (char)var_toInteger(tmp);
   1a3e6:	6a3b      	ldr	r3, [r7, #32]
   1a3e8:	4618      	mov	r0, r3
   1a3ea:	f00c fb6f 	bl	26acc <var_toInteger>
   1a3ee:	4603      	mov	r3, r0
   1a3f0:	b25a      	sxtb	r2, r3
   1a3f2:	68fb      	ldr	r3, [r7, #12]
   1a3f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1a3f8:	687b      	ldr	r3, [r7, #4]
   1a3fa:	689b      	ldr	r3, [r3, #8]
   1a3fc:	f107 0220 	add.w	r2, r7, #32
   1a400:	2101      	movs	r1, #1
   1a402:	4618      	mov	r0, r3
   1a404:	f00c fd32 	bl	26e6c <va_getByIndex>
   1a408:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a40c:	2b00      	cmp	r3, #0
   1a40e:	d001      	beq.n	1a414 <cosem_setDemandRegister+0x118>
        {
            return ret;
   1a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a412:	e0a0      	b.n	1a556 <cosem_setDemandRegister+0x25a>
        }
        object->unit = (unsigned char)var_toInteger(tmp);
   1a414:	6a3b      	ldr	r3, [r7, #32]
   1a416:	4618      	mov	r0, r3
   1a418:	f00c fb58 	bl	26acc <var_toInteger>
   1a41c:	4603      	mov	r3, r0
   1a41e:	b2da      	uxtb	r2, r3
   1a420:	68fb      	ldr	r3, [r7, #12]
   1a422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        object->unitRead = 1;
   1a426:	68fb      	ldr	r3, [r7, #12]
   1a428:	2201      	movs	r2, #1
   1a42a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   1a42e:	e091      	b.n	1a554 <cosem_setDemandRegister+0x258>
    }
    else if (index == 5)
   1a430:	7afb      	ldrb	r3, [r7, #11]
   1a432:	2b05      	cmp	r3, #5
   1a434:	d107      	bne.n	1a446 <cosem_setDemandRegister+0x14a>
    {
        ret = var_copy(&object->status, value);
   1a436:	68fb      	ldr	r3, [r7, #12]
   1a438:	3338      	adds	r3, #56	; 0x38
   1a43a:	6879      	ldr	r1, [r7, #4]
   1a43c:	4618      	mov	r0, r3
   1a43e:	f00d fc99 	bl	27d74 <var_copy>
   1a442:	6278      	str	r0, [r7, #36]	; 0x24
   1a444:	e086      	b.n	1a554 <cosem_setDemandRegister+0x258>
    }
    else if (index == 6)
   1a446:	7afb      	ldrb	r3, [r7, #11]
   1a448:	2b06      	cmp	r3, #6
   1a44a:	d132      	bne.n	1a4b2 <cosem_setDemandRegister+0x1b6>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1a44c:	687b      	ldr	r3, [r7, #4]
   1a44e:	781b      	ldrb	r3, [r3, #0]
   1a450:	2b09      	cmp	r3, #9
   1a452:	d128      	bne.n	1a4a6 <cosem_setDemandRegister+0x1aa>
   1a454:	687b      	ldr	r3, [r7, #4]
   1a456:	689b      	ldr	r3, [r3, #8]
   1a458:	2b00      	cmp	r3, #0
   1a45a:	d024      	beq.n	1a4a6 <cosem_setDemandRegister+0x1aa>
        {
            ret = var_init(&tmp2);
   1a45c:	f107 0310 	add.w	r3, r7, #16
   1a460:	4618      	mov	r0, r3
   1a462:	f00b fe61 	bl	26128 <var_init>
   1a466:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   1a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a46a:	2b00      	cmp	r3, #0
   1a46c:	d001      	beq.n	1a472 <cosem_setDemandRegister+0x176>
            {
                return ret;
   1a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a470:	e071      	b.n	1a556 <cosem_setDemandRegister+0x25a>
            }
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a472:	f107 0310 	add.w	r3, r7, #16
   1a476:	461a      	mov	r2, r3
   1a478:	2119      	movs	r1, #25
   1a47a:	6878      	ldr	r0, [r7, #4]
   1a47c:	f7ef f9c6 	bl	980c <dlms_changeType2>
   1a480:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   1a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a484:	2b00      	cmp	r3, #0
   1a486:	d001      	beq.n	1a48c <cosem_setDemandRegister+0x190>
            {
                return ret;
   1a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a48a:	e064      	b.n	1a556 <cosem_setDemandRegister+0x25a>
            }
            time_copy(&object->captureTime, tmp2.dateTime);
   1a48c:	68fb      	ldr	r3, [r7, #12]
   1a48e:	3348      	adds	r3, #72	; 0x48
   1a490:	69ba      	ldr	r2, [r7, #24]
   1a492:	4611      	mov	r1, r2
   1a494:	4618      	mov	r0, r3
   1a496:	f7ec fa5d 	bl	6954 <time_copy>
            var_clear(&tmp2);
   1a49a:	f107 0310 	add.w	r3, r7, #16
   1a49e:	4618      	mov	r0, r3
   1a4a0:	f00b fe52 	bl	26148 <var_clear>
   1a4a4:	e056      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
        else
        {
            time_clear(&object->captureTime);
   1a4a6:	68fb      	ldr	r3, [r7, #12]
   1a4a8:	3348      	adds	r3, #72	; 0x48
   1a4aa:	4618      	mov	r0, r3
   1a4ac:	f7eb ffce 	bl	644c <time_clear>
   1a4b0:	e050      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
    }
    else if (index == 7)
   1a4b2:	7afb      	ldrb	r3, [r7, #11]
   1a4b4:	2b07      	cmp	r3, #7
   1a4b6:	d132      	bne.n	1a51e <cosem_setDemandRegister+0x222>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1a4b8:	687b      	ldr	r3, [r7, #4]
   1a4ba:	781b      	ldrb	r3, [r3, #0]
   1a4bc:	2b09      	cmp	r3, #9
   1a4be:	d128      	bne.n	1a512 <cosem_setDemandRegister+0x216>
   1a4c0:	687b      	ldr	r3, [r7, #4]
   1a4c2:	689b      	ldr	r3, [r3, #8]
   1a4c4:	2b00      	cmp	r3, #0
   1a4c6:	d024      	beq.n	1a512 <cosem_setDemandRegister+0x216>
        {
            ret = var_init(&tmp2);
   1a4c8:	f107 0310 	add.w	r3, r7, #16
   1a4cc:	4618      	mov	r0, r3
   1a4ce:	f00b fe2b 	bl	26128 <var_init>
   1a4d2:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   1a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4d6:	2b00      	cmp	r3, #0
   1a4d8:	d001      	beq.n	1a4de <cosem_setDemandRegister+0x1e2>
            {
                return ret;
   1a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4dc:	e03b      	b.n	1a556 <cosem_setDemandRegister+0x25a>
            }
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a4de:	f107 0310 	add.w	r3, r7, #16
   1a4e2:	461a      	mov	r2, r3
   1a4e4:	2119      	movs	r1, #25
   1a4e6:	6878      	ldr	r0, [r7, #4]
   1a4e8:	f7ef f990 	bl	980c <dlms_changeType2>
   1a4ec:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   1a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4f0:	2b00      	cmp	r3, #0
   1a4f2:	d001      	beq.n	1a4f8 <cosem_setDemandRegister+0x1fc>
            {
                return ret;
   1a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4f6:	e02e      	b.n	1a556 <cosem_setDemandRegister+0x25a>
            }
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   1a4f8:	68fb      	ldr	r3, [r7, #12]
   1a4fa:	3378      	adds	r3, #120	; 0x78
   1a4fc:	69ba      	ldr	r2, [r7, #24]
   1a4fe:	4611      	mov	r1, r2
   1a500:	4618      	mov	r0, r3
   1a502:	f7ec fa27 	bl	6954 <time_copy>
            var_clear(&tmp2);
   1a506:	f107 0310 	add.w	r3, r7, #16
   1a50a:	4618      	mov	r0, r3
   1a50c:	f00b fe1c 	bl	26148 <var_clear>
   1a510:	e020      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
        else
        {
            time_clear(&object->captureTime);
   1a512:	68fb      	ldr	r3, [r7, #12]
   1a514:	3348      	adds	r3, #72	; 0x48
   1a516:	4618      	mov	r0, r3
   1a518:	f7eb ff98 	bl	644c <time_clear>
   1a51c:	e01a      	b.n	1a554 <cosem_setDemandRegister+0x258>
        }
    }
    else if (index == 8)
   1a51e:	7afb      	ldrb	r3, [r7, #11]
   1a520:	2b08      	cmp	r3, #8
   1a522:	d108      	bne.n	1a536 <cosem_setDemandRegister+0x23a>
    {
        object->period = var_toInteger(value);
   1a524:	6878      	ldr	r0, [r7, #4]
   1a526:	f00c fad1 	bl	26acc <var_toInteger>
   1a52a:	4603      	mov	r3, r0
   1a52c:	461a      	mov	r2, r3
   1a52e:	68fb      	ldr	r3, [r7, #12]
   1a530:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
   1a534:	e00e      	b.n	1a554 <cosem_setDemandRegister+0x258>
    }
    else if (index == 9)
   1a536:	7afb      	ldrb	r3, [r7, #11]
   1a538:	2b09      	cmp	r3, #9
   1a53a:	d108      	bne.n	1a54e <cosem_setDemandRegister+0x252>
    {
        object->numberOfPeriods = (unsigned short)var_toInteger(value);
   1a53c:	6878      	ldr	r0, [r7, #4]
   1a53e:	f00c fac5 	bl	26acc <var_toInteger>
   1a542:	4603      	mov	r3, r0
   1a544:	b29a      	uxth	r2, r3
   1a546:	68fb      	ldr	r3, [r7, #12]
   1a548:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
   1a54c:	e002      	b.n	1a554 <cosem_setDemandRegister+0x258>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a54e:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a552:	e000      	b.n	1a556 <cosem_setDemandRegister+0x25a>
    }
    return DLMS_ERROR_CODE_OK;
   1a554:	2300      	movs	r3, #0
}
   1a556:	4618      	mov	r0, r3
   1a558:	372c      	adds	r7, #44	; 0x2c
   1a55a:	46bd      	mov	sp, r7
   1a55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a55e:	bf00      	nop

0001a560 <cosem_setMacAddressSetup>:
#endif //DLMS_IGNORE_DEMAND_REGISTER

#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
int cosem_setMacAddressSetup(gxMacAddressSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1a560:	b5b0      	push	{r4, r5, r7, lr}
   1a562:	b084      	sub	sp, #16
   1a564:	af00      	add	r7, sp, #0
   1a566:	60f8      	str	r0, [r7, #12]
   1a568:	460b      	mov	r3, r1
   1a56a:	607a      	str	r2, [r7, #4]
   1a56c:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1a56e:	7afb      	ldrb	r3, [r7, #11]
   1a570:	2b02      	cmp	r3, #2
   1a572:	d116      	bne.n	1a5a2 <cosem_setMacAddressSetup+0x42>
    {
        bb_clear(&object->macAddress);
   1a574:	68fb      	ldr	r3, [r7, #12]
   1a576:	3310      	adds	r3, #16
   1a578:	4618      	mov	r0, r3
   1a57a:	f7e9 f8f3 	bl	3764 <bb_clear>
        bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   1a57e:	68fb      	ldr	r3, [r7, #12]
   1a580:	f103 0410 	add.w	r4, r3, #16
   1a584:	687b      	ldr	r3, [r7, #4]
   1a586:	689d      	ldr	r5, [r3, #8]
   1a588:	687b      	ldr	r3, [r7, #4]
   1a58a:	689b      	ldr	r3, [r3, #8]
   1a58c:	4618      	mov	r0, r3
   1a58e:	f7e8 fb9b 	bl	2cc8 <bb_size>
   1a592:	4603      	mov	r3, r0
   1a594:	2200      	movs	r2, #0
   1a596:	4629      	mov	r1, r5
   1a598:	4620      	mov	r0, r4
   1a59a:	f7e9 f841 	bl	3620 <bb_set2>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return DLMS_ERROR_CODE_OK;
   1a59e:	2300      	movs	r3, #0
   1a5a0:	e001      	b.n	1a5a6 <cosem_setMacAddressSetup+0x46>
        bb_clear(&object->macAddress);
        bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a5a2:	f44f 7381 	mov.w	r3, #258	; 0x102
    }
    return DLMS_ERROR_CODE_OK;
}
   1a5a6:	4618      	mov	r0, r3
   1a5a8:	3710      	adds	r7, #16
   1a5aa:	46bd      	mov	sp, r7
   1a5ac:	bdb0      	pop	{r4, r5, r7, pc}
   1a5ae:	bf00      	nop

0001a5b0 <cosem_setExtendedRegister>:
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP

#ifndef DLMS_IGNORE_EXTENDED_REGISTER
int cosem_setExtendedRegister(gxExtendedRegister* object, unsigned char index, dlmsVARIANT *value)
{
   1a5b0:	b580      	push	{r7, lr}
   1a5b2:	b08a      	sub	sp, #40	; 0x28
   1a5b4:	af00      	add	r7, sp, #0
   1a5b6:	60f8      	str	r0, [r7, #12]
   1a5b8:	460b      	mov	r3, r1
   1a5ba:	607a      	str	r2, [r7, #4]
   1a5bc:	72fb      	strb	r3, [r7, #11]
    int ret = DLMS_ERROR_CODE_OK;
   1a5be:	2300      	movs	r3, #0
   1a5c0:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT *tmp;
    dlmsVARIANT tmp2;
    if (index == 2)
   1a5c2:	7afb      	ldrb	r3, [r7, #11]
   1a5c4:	2b02      	cmp	r3, #2
   1a5c6:	d107      	bne.n	1a5d8 <cosem_setExtendedRegister+0x28>
    {
        ret = var_copy(&object->base.value, value);
   1a5c8:	68fb      	ldr	r3, [r7, #12]
   1a5ca:	3310      	adds	r3, #16
   1a5cc:	6879      	ldr	r1, [r7, #4]
   1a5ce:	4618      	mov	r0, r3
   1a5d0:	f00d fbd0 	bl	27d74 <var_copy>
   1a5d4:	6278      	str	r0, [r7, #36]	; 0x24
   1a5d6:	e075      	b.n	1a6c4 <cosem_setExtendedRegister+0x114>
    }
    else if (index == 3)
   1a5d8:	7afb      	ldrb	r3, [r7, #11]
   1a5da:	2b03      	cmp	r3, #3
   1a5dc:	d139      	bne.n	1a652 <cosem_setExtendedRegister+0xa2>
    {
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	781b      	ldrb	r3, [r3, #0]
   1a5e2:	2b02      	cmp	r3, #2
   1a5e4:	d002      	beq.n	1a5ec <cosem_setExtendedRegister+0x3c>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a5e6:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a5ea:	e06c      	b.n	1a6c6 <cosem_setExtendedRegister+0x116>
        }
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1a5ec:	687b      	ldr	r3, [r7, #4]
   1a5ee:	689b      	ldr	r3, [r3, #8]
   1a5f0:	f107 0220 	add.w	r2, r7, #32
   1a5f4:	2100      	movs	r1, #0
   1a5f6:	4618      	mov	r0, r3
   1a5f8:	f00c fc38 	bl	26e6c <va_getByIndex>
   1a5fc:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a600:	2b00      	cmp	r3, #0
   1a602:	d001      	beq.n	1a608 <cosem_setExtendedRegister+0x58>
        {
            return ret;
   1a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a606:	e05e      	b.n	1a6c6 <cosem_setExtendedRegister+0x116>
        }
        object->base.scaler = (char)var_toInteger(tmp);
   1a608:	6a3b      	ldr	r3, [r7, #32]
   1a60a:	4618      	mov	r0, r3
   1a60c:	f00c fa5e 	bl	26acc <var_toInteger>
   1a610:	4603      	mov	r3, r0
   1a612:	b25a      	sxtb	r2, r3
   1a614:	68fb      	ldr	r3, [r7, #12]
   1a616:	f883 2020 	strb.w	r2, [r3, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1a61a:	687b      	ldr	r3, [r7, #4]
   1a61c:	689b      	ldr	r3, [r3, #8]
   1a61e:	f107 0220 	add.w	r2, r7, #32
   1a622:	2101      	movs	r1, #1
   1a624:	4618      	mov	r0, r3
   1a626:	f00c fc21 	bl	26e6c <va_getByIndex>
   1a62a:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a62e:	2b00      	cmp	r3, #0
   1a630:	d001      	beq.n	1a636 <cosem_setExtendedRegister+0x86>
        {
            return ret;
   1a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a634:	e047      	b.n	1a6c6 <cosem_setExtendedRegister+0x116>
        }
        object->base.unit = (unsigned char)var_toInteger(tmp);
   1a636:	6a3b      	ldr	r3, [r7, #32]
   1a638:	4618      	mov	r0, r3
   1a63a:	f00c fa47 	bl	26acc <var_toInteger>
   1a63e:	4603      	mov	r3, r0
   1a640:	b2da      	uxtb	r2, r3
   1a642:	68fb      	ldr	r3, [r7, #12]
   1a644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        object->base.unitRead = 1;
   1a648:	68fb      	ldr	r3, [r7, #12]
   1a64a:	2201      	movs	r2, #1
   1a64c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1a650:	e038      	b.n	1a6c4 <cosem_setExtendedRegister+0x114>
    }
    else if (index == 4)
   1a652:	7afb      	ldrb	r3, [r7, #11]
   1a654:	2b04      	cmp	r3, #4
   1a656:	d107      	bne.n	1a668 <cosem_setExtendedRegister+0xb8>
    {
        ret = var_copy(&object->status, value);
   1a658:	68fb      	ldr	r3, [r7, #12]
   1a65a:	3358      	adds	r3, #88	; 0x58
   1a65c:	6879      	ldr	r1, [r7, #4]
   1a65e:	4618      	mov	r0, r3
   1a660:	f00d fb88 	bl	27d74 <var_copy>
   1a664:	6278      	str	r0, [r7, #36]	; 0x24
   1a666:	e02d      	b.n	1a6c4 <cosem_setExtendedRegister+0x114>
    }
    else if (index == 5)
   1a668:	7afb      	ldrb	r3, [r7, #11]
   1a66a:	2b05      	cmp	r3, #5
   1a66c:	d127      	bne.n	1a6be <cosem_setExtendedRegister+0x10e>
    {
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1a66e:	687b      	ldr	r3, [r7, #4]
   1a670:	781b      	ldrb	r3, [r3, #0]
   1a672:	2b09      	cmp	r3, #9
   1a674:	d119      	bne.n	1a6aa <cosem_setExtendedRegister+0xfa>
        {
            var_init(&tmp2);
   1a676:	f107 0310 	add.w	r3, r7, #16
   1a67a:	4618      	mov	r0, r3
   1a67c:	f00b fd54 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a680:	f107 0310 	add.w	r3, r7, #16
   1a684:	461a      	mov	r2, r3
   1a686:	2119      	movs	r1, #25
   1a688:	6878      	ldr	r0, [r7, #4]
   1a68a:	f7ef f8bf 	bl	980c <dlms_changeType2>
   1a68e:	6278      	str	r0, [r7, #36]	; 0x24
            time_copy(&object->captureTime, tmp2.dateTime);
   1a690:	68fb      	ldr	r3, [r7, #12]
   1a692:	3328      	adds	r3, #40	; 0x28
   1a694:	69ba      	ldr	r2, [r7, #24]
   1a696:	4611      	mov	r1, r2
   1a698:	4618      	mov	r0, r3
   1a69a:	f7ec f95b 	bl	6954 <time_copy>
            var_clear(&tmp2);
   1a69e:	f107 0310 	add.w	r3, r7, #16
   1a6a2:	4618      	mov	r0, r3
   1a6a4:	f00b fd50 	bl	26148 <var_clear>
   1a6a8:	e00c      	b.n	1a6c4 <cosem_setExtendedRegister+0x114>
        }
        else
        {
            time_copy(&object->captureTime, value->dateTime);
   1a6aa:	68fb      	ldr	r3, [r7, #12]
   1a6ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1a6b0:	687b      	ldr	r3, [r7, #4]
   1a6b2:	689b      	ldr	r3, [r3, #8]
   1a6b4:	4619      	mov	r1, r3
   1a6b6:	4610      	mov	r0, r2
   1a6b8:	f7ec f94c 	bl	6954 <time_copy>
   1a6bc:	e002      	b.n	1a6c4 <cosem_setExtendedRegister+0x114>
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a6be:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a6c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   1a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a6c6:	4618      	mov	r0, r3
   1a6c8:	3728      	adds	r7, #40	; 0x28
   1a6ca:	46bd      	mov	sp, r7
   1a6cc:	bd80      	pop	{r7, pc}
   1a6ce:	bf00      	nop

0001a6d0 <cosem_setGprsSetup>:
#endif //DLMS_IGNORE_EXTENDED_REGISTER

#ifndef DLMS_IGNORE_GPRS_SETUP
int cosem_setGprsSetup(gxGPRSSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1a6d0:	b5b0      	push	{r4, r5, r7, lr}
   1a6d2:	b088      	sub	sp, #32
   1a6d4:	af00      	add	r7, sp, #0
   1a6d6:	60f8      	str	r0, [r7, #12]
   1a6d8:	460b      	mov	r3, r1
   1a6da:	607a      	str	r2, [r7, #4]
   1a6dc:	72fb      	strb	r3, [r7, #11]
    int ret;
    dlmsVARIANT *tmp, *tmp3;
    if (index == 2)
   1a6de:	7afb      	ldrb	r3, [r7, #11]
   1a6e0:	2b02      	cmp	r3, #2
   1a6e2:	d126      	bne.n	1a732 <cosem_setGprsSetup+0x62>
    {
        bb_clear(&object->apn);
   1a6e4:	68fb      	ldr	r3, [r7, #12]
   1a6e6:	3310      	adds	r3, #16
   1a6e8:	4618      	mov	r0, r3
   1a6ea:	f7e9 f83b 	bl	3764 <bb_clear>
        if (value->vt == DLMS_DATA_TYPE_STRING)
   1a6ee:	687b      	ldr	r3, [r7, #4]
   1a6f0:	781b      	ldrb	r3, [r3, #0]
   1a6f2:	2b0a      	cmp	r3, #10
   1a6f4:	d10c      	bne.n	1a710 <cosem_setGprsSetup+0x40>
        {
            bb_set(&object->apn, (unsigned char*)value->strVal->data, value->strVal->size);
   1a6f6:	68fb      	ldr	r3, [r7, #12]
   1a6f8:	f103 0010 	add.w	r0, r3, #16
   1a6fc:	687b      	ldr	r3, [r7, #4]
   1a6fe:	689b      	ldr	r3, [r3, #8]
   1a700:	6819      	ldr	r1, [r3, #0]
   1a702:	687b      	ldr	r3, [r7, #4]
   1a704:	689b      	ldr	r3, [r3, #8]
   1a706:	88db      	ldrh	r3, [r3, #6]
   1a708:	461a      	mov	r2, r3
   1a70a:	f7e8 ff29 	bl	3560 <bb_set>
   1a70e:	e120      	b.n	1a952 <cosem_setGprsSetup+0x282>
        }
        else
        {
            bb_set2(&object->apn, value->byteArr, 0, bb_size(value->byteArr));
   1a710:	68fb      	ldr	r3, [r7, #12]
   1a712:	f103 0410 	add.w	r4, r3, #16
   1a716:	687b      	ldr	r3, [r7, #4]
   1a718:	689d      	ldr	r5, [r3, #8]
   1a71a:	687b      	ldr	r3, [r7, #4]
   1a71c:	689b      	ldr	r3, [r3, #8]
   1a71e:	4618      	mov	r0, r3
   1a720:	f7e8 fad2 	bl	2cc8 <bb_size>
   1a724:	4603      	mov	r3, r0
   1a726:	2200      	movs	r2, #0
   1a728:	4629      	mov	r1, r5
   1a72a:	4620      	mov	r0, r4
   1a72c:	f7e8 ff78 	bl	3620 <bb_set2>
   1a730:	e10f      	b.n	1a952 <cosem_setGprsSetup+0x282>
        }
    }
    else if (index == 3)
   1a732:	7afb      	ldrb	r3, [r7, #11]
   1a734:	2b03      	cmp	r3, #3
   1a736:	d104      	bne.n	1a742 <cosem_setGprsSetup+0x72>
    {
        object->pinCode = value->uiVal;
   1a738:	687b      	ldr	r3, [r7, #4]
   1a73a:	891a      	ldrh	r2, [r3, #8]
   1a73c:	68fb      	ldr	r3, [r7, #12]
   1a73e:	839a      	strh	r2, [r3, #28]
   1a740:	e107      	b.n	1a952 <cosem_setGprsSetup+0x282>
    }
    else if (index == 4)
   1a742:	7afb      	ldrb	r3, [r7, #11]
   1a744:	2b04      	cmp	r3, #4
   1a746:	f040 8101 	bne.w	1a94c <cosem_setGprsSetup+0x27c>
    {
        ret = va_get(value->Arr, &tmp);
   1a74a:	687b      	ldr	r3, [r7, #4]
   1a74c:	689b      	ldr	r3, [r3, #8]
   1a74e:	f107 0218 	add.w	r2, r7, #24
   1a752:	4611      	mov	r1, r2
   1a754:	4618      	mov	r0, r3
   1a756:	f00c fb63 	bl	26e20 <va_get>
   1a75a:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a75c:	69fb      	ldr	r3, [r7, #28]
   1a75e:	2b00      	cmp	r3, #0
   1a760:	d001      	beq.n	1a766 <cosem_setGprsSetup+0x96>
        {
            return ret;
   1a762:	69fb      	ldr	r3, [r7, #28]
   1a764:	e0f6      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        ret = va_get(tmp->Arr, &tmp3);
   1a766:	69bb      	ldr	r3, [r7, #24]
   1a768:	689b      	ldr	r3, [r3, #8]
   1a76a:	f107 0214 	add.w	r2, r7, #20
   1a76e:	4611      	mov	r1, r2
   1a770:	4618      	mov	r0, r3
   1a772:	f00c fb55 	bl	26e20 <va_get>
   1a776:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a778:	69fb      	ldr	r3, [r7, #28]
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d001      	beq.n	1a782 <cosem_setGprsSetup+0xb2>
        {
            return ret;
   1a77e:	69fb      	ldr	r3, [r7, #28]
   1a780:	e0e8      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   1a782:	697b      	ldr	r3, [r7, #20]
   1a784:	4618      	mov	r0, r3
   1a786:	f00c f9a1 	bl	26acc <var_toInteger>
   1a78a:	4603      	mov	r3, r0
   1a78c:	b2da      	uxtb	r2, r3
   1a78e:	68fb      	ldr	r3, [r7, #12]
   1a790:	779a      	strb	r2, [r3, #30]
        ret = va_get(tmp->Arr, &tmp3);
   1a792:	69bb      	ldr	r3, [r7, #24]
   1a794:	689b      	ldr	r3, [r3, #8]
   1a796:	f107 0214 	add.w	r2, r7, #20
   1a79a:	4611      	mov	r1, r2
   1a79c:	4618      	mov	r0, r3
   1a79e:	f00c fb3f 	bl	26e20 <va_get>
   1a7a2:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a7a4:	69fb      	ldr	r3, [r7, #28]
   1a7a6:	2b00      	cmp	r3, #0
   1a7a8:	d001      	beq.n	1a7ae <cosem_setGprsSetup+0xde>
        {
            return ret;
   1a7aa:	69fb      	ldr	r3, [r7, #28]
   1a7ac:	e0d2      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   1a7ae:	697b      	ldr	r3, [r7, #20]
   1a7b0:	4618      	mov	r0, r3
   1a7b2:	f00c f98b 	bl	26acc <var_toInteger>
   1a7b6:	4603      	mov	r3, r0
   1a7b8:	b2da      	uxtb	r2, r3
   1a7ba:	68fb      	ldr	r3, [r7, #12]
   1a7bc:	77da      	strb	r2, [r3, #31]
        ret = va_get(tmp->Arr, &tmp3);
   1a7be:	69bb      	ldr	r3, [r7, #24]
   1a7c0:	689b      	ldr	r3, [r3, #8]
   1a7c2:	f107 0214 	add.w	r2, r7, #20
   1a7c6:	4611      	mov	r1, r2
   1a7c8:	4618      	mov	r0, r3
   1a7ca:	f00c fb29 	bl	26e20 <va_get>
   1a7ce:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a7d0:	69fb      	ldr	r3, [r7, #28]
   1a7d2:	2b00      	cmp	r3, #0
   1a7d4:	d001      	beq.n	1a7da <cosem_setGprsSetup+0x10a>
        {
            return ret;
   1a7d6:	69fb      	ldr	r3, [r7, #28]
   1a7d8:	e0bc      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   1a7da:	697b      	ldr	r3, [r7, #20]
   1a7dc:	4618      	mov	r0, r3
   1a7de:	f00c f975 	bl	26acc <var_toInteger>
   1a7e2:	4603      	mov	r3, r0
   1a7e4:	b2da      	uxtb	r2, r3
   1a7e6:	68fb      	ldr	r3, [r7, #12]
   1a7e8:	f883 2020 	strb.w	r2, [r3, #32]
        ret = va_get(tmp->Arr, &tmp3);
   1a7ec:	69bb      	ldr	r3, [r7, #24]
   1a7ee:	689b      	ldr	r3, [r3, #8]
   1a7f0:	f107 0214 	add.w	r2, r7, #20
   1a7f4:	4611      	mov	r1, r2
   1a7f6:	4618      	mov	r0, r3
   1a7f8:	f00c fb12 	bl	26e20 <va_get>
   1a7fc:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a7fe:	69fb      	ldr	r3, [r7, #28]
   1a800:	2b00      	cmp	r3, #0
   1a802:	d001      	beq.n	1a808 <cosem_setGprsSetup+0x138>
        {
            return ret;
   1a804:	69fb      	ldr	r3, [r7, #28]
   1a806:	e0a5      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   1a808:	697b      	ldr	r3, [r7, #20]
   1a80a:	4618      	mov	r0, r3
   1a80c:	f00c f95e 	bl	26acc <var_toInteger>
   1a810:	4603      	mov	r3, r0
   1a812:	b2da      	uxtb	r2, r3
   1a814:	68fb      	ldr	r3, [r7, #12]
   1a816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ret = va_get(tmp->Arr, &tmp3);
   1a81a:	69bb      	ldr	r3, [r7, #24]
   1a81c:	689b      	ldr	r3, [r3, #8]
   1a81e:	f107 0214 	add.w	r2, r7, #20
   1a822:	4611      	mov	r1, r2
   1a824:	4618      	mov	r0, r3
   1a826:	f00c fafb 	bl	26e20 <va_get>
   1a82a:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a82c:	69fb      	ldr	r3, [r7, #28]
   1a82e:	2b00      	cmp	r3, #0
   1a830:	d001      	beq.n	1a836 <cosem_setGprsSetup+0x166>
        {
            return ret;
   1a832:	69fb      	ldr	r3, [r7, #28]
   1a834:	e08e      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->defaultQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   1a836:	697b      	ldr	r3, [r7, #20]
   1a838:	4618      	mov	r0, r3
   1a83a:	f00c f947 	bl	26acc <var_toInteger>
   1a83e:	4603      	mov	r3, r0
   1a840:	b2da      	uxtb	r2, r3
   1a842:	68fb      	ldr	r3, [r7, #12]
   1a844:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        ret = va_get(value->Arr, &tmp);
   1a848:	687b      	ldr	r3, [r7, #4]
   1a84a:	689b      	ldr	r3, [r3, #8]
   1a84c:	f107 0218 	add.w	r2, r7, #24
   1a850:	4611      	mov	r1, r2
   1a852:	4618      	mov	r0, r3
   1a854:	f00c fae4 	bl	26e20 <va_get>
   1a858:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a85a:	69fb      	ldr	r3, [r7, #28]
   1a85c:	2b00      	cmp	r3, #0
   1a85e:	d001      	beq.n	1a864 <cosem_setGprsSetup+0x194>
        {
            return ret;
   1a860:	69fb      	ldr	r3, [r7, #28]
   1a862:	e077      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        ret = va_get(tmp->Arr, &tmp3);
   1a864:	69bb      	ldr	r3, [r7, #24]
   1a866:	689b      	ldr	r3, [r3, #8]
   1a868:	f107 0214 	add.w	r2, r7, #20
   1a86c:	4611      	mov	r1, r2
   1a86e:	4618      	mov	r0, r3
   1a870:	f00c fad6 	bl	26e20 <va_get>
   1a874:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a876:	69fb      	ldr	r3, [r7, #28]
   1a878:	2b00      	cmp	r3, #0
   1a87a:	d001      	beq.n	1a880 <cosem_setGprsSetup+0x1b0>
        {
            return ret;
   1a87c:	69fb      	ldr	r3, [r7, #28]
   1a87e:	e069      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   1a880:	697b      	ldr	r3, [r7, #20]
   1a882:	4618      	mov	r0, r3
   1a884:	f00c f922 	bl	26acc <var_toInteger>
   1a888:	4603      	mov	r3, r0
   1a88a:	b2da      	uxtb	r2, r3
   1a88c:	68fb      	ldr	r3, [r7, #12]
   1a88e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        ret = va_get(tmp->Arr, &tmp3);
   1a892:	69bb      	ldr	r3, [r7, #24]
   1a894:	689b      	ldr	r3, [r3, #8]
   1a896:	f107 0214 	add.w	r2, r7, #20
   1a89a:	4611      	mov	r1, r2
   1a89c:	4618      	mov	r0, r3
   1a89e:	f00c fabf 	bl	26e20 <va_get>
   1a8a2:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a8a4:	69fb      	ldr	r3, [r7, #28]
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	d001      	beq.n	1a8ae <cosem_setGprsSetup+0x1de>
        {
            return ret;
   1a8aa:	69fb      	ldr	r3, [r7, #28]
   1a8ac:	e052      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   1a8ae:	697b      	ldr	r3, [r7, #20]
   1a8b0:	4618      	mov	r0, r3
   1a8b2:	f00c f90b 	bl	26acc <var_toInteger>
   1a8b6:	4603      	mov	r3, r0
   1a8b8:	b2da      	uxtb	r2, r3
   1a8ba:	68fb      	ldr	r3, [r7, #12]
   1a8bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        ret = va_get(tmp->Arr, &tmp3);
   1a8c0:	69bb      	ldr	r3, [r7, #24]
   1a8c2:	689b      	ldr	r3, [r3, #8]
   1a8c4:	f107 0214 	add.w	r2, r7, #20
   1a8c8:	4611      	mov	r1, r2
   1a8ca:	4618      	mov	r0, r3
   1a8cc:	f00c faa8 	bl	26e20 <va_get>
   1a8d0:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a8d2:	69fb      	ldr	r3, [r7, #28]
   1a8d4:	2b00      	cmp	r3, #0
   1a8d6:	d001      	beq.n	1a8dc <cosem_setGprsSetup+0x20c>
        {
            return ret;
   1a8d8:	69fb      	ldr	r3, [r7, #28]
   1a8da:	e03b      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   1a8dc:	697b      	ldr	r3, [r7, #20]
   1a8de:	4618      	mov	r0, r3
   1a8e0:	f00c f8f4 	bl	26acc <var_toInteger>
   1a8e4:	4603      	mov	r3, r0
   1a8e6:	b2da      	uxtb	r2, r3
   1a8e8:	68fb      	ldr	r3, [r7, #12]
   1a8ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ret = va_get(tmp->Arr, &tmp3);
   1a8ee:	69bb      	ldr	r3, [r7, #24]
   1a8f0:	689b      	ldr	r3, [r3, #8]
   1a8f2:	f107 0214 	add.w	r2, r7, #20
   1a8f6:	4611      	mov	r1, r2
   1a8f8:	4618      	mov	r0, r3
   1a8fa:	f00c fa91 	bl	26e20 <va_get>
   1a8fe:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a900:	69fb      	ldr	r3, [r7, #28]
   1a902:	2b00      	cmp	r3, #0
   1a904:	d001      	beq.n	1a90a <cosem_setGprsSetup+0x23a>
        {
            return ret;
   1a906:	69fb      	ldr	r3, [r7, #28]
   1a908:	e024      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   1a90a:	697b      	ldr	r3, [r7, #20]
   1a90c:	4618      	mov	r0, r3
   1a90e:	f00c f8dd 	bl	26acc <var_toInteger>
   1a912:	4603      	mov	r3, r0
   1a914:	b2da      	uxtb	r2, r3
   1a916:	68fb      	ldr	r3, [r7, #12]
   1a918:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        ret = va_get(tmp->Arr, &tmp3);
   1a91c:	69bb      	ldr	r3, [r7, #24]
   1a91e:	689b      	ldr	r3, [r3, #8]
   1a920:	f107 0214 	add.w	r2, r7, #20
   1a924:	4611      	mov	r1, r2
   1a926:	4618      	mov	r0, r3
   1a928:	f00c fa7a 	bl	26e20 <va_get>
   1a92c:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   1a92e:	69fb      	ldr	r3, [r7, #28]
   1a930:	2b00      	cmp	r3, #0
   1a932:	d001      	beq.n	1a938 <cosem_setGprsSetup+0x268>
        {
            return ret;
   1a934:	69fb      	ldr	r3, [r7, #28]
   1a936:	e00d      	b.n	1a954 <cosem_setGprsSetup+0x284>
        }
        object->requestedQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   1a938:	697b      	ldr	r3, [r7, #20]
   1a93a:	4618      	mov	r0, r3
   1a93c:	f00c f8c6 	bl	26acc <var_toInteger>
   1a940:	4603      	mov	r3, r0
   1a942:	b2da      	uxtb	r2, r3
   1a944:	68fb      	ldr	r3, [r7, #12]
   1a946:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   1a94a:	e002      	b.n	1a952 <cosem_setGprsSetup+0x282>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a94c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a950:	e000      	b.n	1a954 <cosem_setGprsSetup+0x284>
    }
    return DLMS_ERROR_CODE_OK;
   1a952:	2300      	movs	r3, #0
}
   1a954:	4618      	mov	r0, r3
   1a956:	3720      	adds	r7, #32
   1a958:	46bd      	mov	sp, r7
   1a95a:	bdb0      	pop	{r4, r5, r7, pc}

0001a95c <cosem_setSecuritySetup>:
#endif //DLMS_IGNORE_GPRS_SETUP

#ifndef DLMS_IGNORE_SECURITY_SETUP
int cosem_setSecuritySetup(gxSecuritySetup* object, unsigned char index, dlmsVARIANT *value)
{
   1a95c:	b5b0      	push	{r4, r5, r7, lr}
   1a95e:	b08a      	sub	sp, #40	; 0x28
   1a960:	af00      	add	r7, sp, #0
   1a962:	60f8      	str	r0, [r7, #12]
   1a964:	460b      	mov	r3, r1
   1a966:	607a      	str	r2, [r7, #4]
   1a968:	72fb      	strb	r3, [r7, #11]
    int pos, ret;
    gxCertificateInfo *it;
    dlmsVARIANT *tmp, *tmp3;
    switch (index)
   1a96a:	7afb      	ldrb	r3, [r7, #11]
   1a96c:	3b02      	subs	r3, #2
   1a96e:	2b04      	cmp	r3, #4
   1a970:	f200 81bc 	bhi.w	1acec <cosem_setSecuritySetup+0x390>
   1a974:	a201      	add	r2, pc, #4	; (adr r2, 1a97c <cosem_setSecuritySetup+0x20>)
   1a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a97a:	bf00      	nop
   1a97c:	0001a991 	.word	0x0001a991
   1a980:	0001a9a1 	.word	0x0001a9a1
   1a984:	0001a9b1 	.word	0x0001a9b1
   1a988:	0001a9dd 	.word	0x0001a9dd
   1a98c:	0001aa09 	.word	0x0001aa09
    {
    case 2:
        object->securityPolicy = (unsigned char)var_toInteger(value);
   1a990:	6878      	ldr	r0, [r7, #4]
   1a992:	f00c f89b 	bl	26acc <var_toInteger>
   1a996:	4603      	mov	r3, r0
   1a998:	b2da      	uxtb	r2, r3
   1a99a:	68fb      	ldr	r3, [r7, #12]
   1a99c:	741a      	strb	r2, [r3, #16]
        break;
   1a99e:	e1a8      	b.n	1acf2 <cosem_setSecuritySetup+0x396>
    case 3:
        object->securitySuite = (DLMS_SECURITY_SUITE)var_toInteger(value);
   1a9a0:	6878      	ldr	r0, [r7, #4]
   1a9a2:	f00c f893 	bl	26acc <var_toInteger>
   1a9a6:	4603      	mov	r3, r0
   1a9a8:	b2da      	uxtb	r2, r3
   1a9aa:	68fb      	ldr	r3, [r7, #12]
   1a9ac:	745a      	strb	r2, [r3, #17]
        break;
   1a9ae:	e1a0      	b.n	1acf2 <cosem_setSecuritySetup+0x396>
    case 4:
        bb_clear(&object->clientSystemTitle);
   1a9b0:	68fb      	ldr	r3, [r7, #12]
   1a9b2:	3320      	adds	r3, #32
   1a9b4:	4618      	mov	r0, r3
   1a9b6:	f7e8 fed5 	bl	3764 <bb_clear>
        bb_set2(&object->clientSystemTitle, value->byteArr, 0, bb_size(value->byteArr));
   1a9ba:	68fb      	ldr	r3, [r7, #12]
   1a9bc:	f103 0420 	add.w	r4, r3, #32
   1a9c0:	687b      	ldr	r3, [r7, #4]
   1a9c2:	689d      	ldr	r5, [r3, #8]
   1a9c4:	687b      	ldr	r3, [r7, #4]
   1a9c6:	689b      	ldr	r3, [r3, #8]
   1a9c8:	4618      	mov	r0, r3
   1a9ca:	f7e8 f97d 	bl	2cc8 <bb_size>
   1a9ce:	4603      	mov	r3, r0
   1a9d0:	2200      	movs	r2, #0
   1a9d2:	4629      	mov	r1, r5
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	f7e8 fe23 	bl	3620 <bb_set2>
        break;
   1a9da:	e18a      	b.n	1acf2 <cosem_setSecuritySetup+0x396>
    case 5:
        bb_clear(&object->serverSystemTitle);
   1a9dc:	68fb      	ldr	r3, [r7, #12]
   1a9de:	3314      	adds	r3, #20
   1a9e0:	4618      	mov	r0, r3
   1a9e2:	f7e8 febf 	bl	3764 <bb_clear>
        bb_set2(&object->serverSystemTitle, value->byteArr, 0, bb_size(value->byteArr));
   1a9e6:	68fb      	ldr	r3, [r7, #12]
   1a9e8:	f103 0414 	add.w	r4, r3, #20
   1a9ec:	687b      	ldr	r3, [r7, #4]
   1a9ee:	689d      	ldr	r5, [r3, #8]
   1a9f0:	687b      	ldr	r3, [r7, #4]
   1a9f2:	689b      	ldr	r3, [r3, #8]
   1a9f4:	4618      	mov	r0, r3
   1a9f6:	f7e8 f967 	bl	2cc8 <bb_size>
   1a9fa:	4603      	mov	r3, r0
   1a9fc:	2200      	movs	r2, #0
   1a9fe:	4629      	mov	r1, r5
   1aa00:	4620      	mov	r0, r4
   1aa02:	f7e8 fe0d 	bl	3620 <bb_set2>
        break;
   1aa06:	e174      	b.n	1acf2 <cosem_setSecuritySetup+0x396>
    case 6:
        obj_clearCertificateInfo(&object->certificates);
   1aa08:	68fb      	ldr	r3, [r7, #12]
   1aa0a:	332c      	adds	r3, #44	; 0x2c
   1aa0c:	4618      	mov	r0, r3
   1aa0e:	f7fc fcd3 	bl	173b8 <obj_clearCertificateInfo>
        if (value->Arr != NULL)
   1aa12:	687b      	ldr	r3, [r7, #4]
   1aa14:	689b      	ldr	r3, [r3, #8]
   1aa16:	2b00      	cmp	r3, #0
   1aa18:	f000 816a 	beq.w	1acf0 <cosem_setSecuritySetup+0x394>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1aa1c:	2300      	movs	r3, #0
   1aa1e:	627b      	str	r3, [r7, #36]	; 0x24
   1aa20:	e15b      	b.n	1acda <cosem_setSecuritySetup+0x37e>
            {
                if ((ret = va_get(value->Arr, &tmp)) != DLMS_ERROR_CODE_OK)
   1aa22:	687b      	ldr	r3, [r7, #4]
   1aa24:	689b      	ldr	r3, [r3, #8]
   1aa26:	f107 0218 	add.w	r2, r7, #24
   1aa2a:	4611      	mov	r1, r2
   1aa2c:	4618      	mov	r0, r3
   1aa2e:	f00c f9f7 	bl	26e20 <va_get>
   1aa32:	6238      	str	r0, [r7, #32]
   1aa34:	6a3b      	ldr	r3, [r7, #32]
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d001      	beq.n	1aa3e <cosem_setSecuritySetup+0xe2>
                {
                    return ret;
   1aa3a:	6a3b      	ldr	r3, [r7, #32]
   1aa3c:	e15a      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                it = (gxCertificateInfo*)gxmalloc(sizeof(gxCertificateInfo));
   1aa3e:	2014      	movs	r0, #20
   1aa40:	f00f f800 	bl	29a44 <malloc>
   1aa44:	4603      	mov	r3, r0
   1aa46:	61fb      	str	r3, [r7, #28]
                //entity
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != DLMS_ERROR_CODE_OK)
   1aa48:	69bb      	ldr	r3, [r7, #24]
   1aa4a:	689b      	ldr	r3, [r3, #8]
   1aa4c:	f107 0214 	add.w	r2, r7, #20
   1aa50:	2100      	movs	r1, #0
   1aa52:	4618      	mov	r0, r3
   1aa54:	f00c fa0a 	bl	26e6c <va_getByIndex>
   1aa58:	6238      	str	r0, [r7, #32]
   1aa5a:	6a3b      	ldr	r3, [r7, #32]
   1aa5c:	2b00      	cmp	r3, #0
   1aa5e:	d004      	beq.n	1aa6a <cosem_setSecuritySetup+0x10e>
                {
                    gxfree(it);
   1aa60:	69f8      	ldr	r0, [r7, #28]
   1aa62:	f00e fff7 	bl	29a54 <free>
                    return ret;
   1aa66:	6a3b      	ldr	r3, [r7, #32]
   1aa68:	e144      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   1aa6a:	697b      	ldr	r3, [r7, #20]
   1aa6c:	4618      	mov	r0, r3
   1aa6e:	f00c f82d 	bl	26acc <var_toInteger>
   1aa72:	4603      	mov	r3, r0
   1aa74:	b2da      	uxtb	r2, r3
   1aa76:	69fb      	ldr	r3, [r7, #28]
   1aa78:	701a      	strb	r2, [r3, #0]
                //type
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   1aa7a:	69bb      	ldr	r3, [r7, #24]
   1aa7c:	689b      	ldr	r3, [r3, #8]
   1aa7e:	f107 0214 	add.w	r2, r7, #20
   1aa82:	2101      	movs	r1, #1
   1aa84:	4618      	mov	r0, r3
   1aa86:	f00c f9f1 	bl	26e6c <va_getByIndex>
   1aa8a:	6238      	str	r0, [r7, #32]
   1aa8c:	6a3b      	ldr	r3, [r7, #32]
   1aa8e:	2b00      	cmp	r3, #0
   1aa90:	d004      	beq.n	1aa9c <cosem_setSecuritySetup+0x140>
                {
                    gxfree(it);
   1aa92:	69f8      	ldr	r0, [r7, #28]
   1aa94:	f00e ffde 	bl	29a54 <free>
                    return ret;
   1aa98:	6a3b      	ldr	r3, [r7, #32]
   1aa9a:	e12b      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   1aa9c:	697b      	ldr	r3, [r7, #20]
   1aa9e:	4618      	mov	r0, r3
   1aaa0:	f00c f814 	bl	26acc <var_toInteger>
   1aaa4:	4603      	mov	r3, r0
   1aaa6:	b2da      	uxtb	r2, r3
   1aaa8:	69fb      	ldr	r3, [r7, #28]
   1aaaa:	705a      	strb	r2, [r3, #1]
                //serialNumber
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   1aaac:	69bb      	ldr	r3, [r7, #24]
   1aaae:	689b      	ldr	r3, [r3, #8]
   1aab0:	f107 0214 	add.w	r2, r7, #20
   1aab4:	2102      	movs	r1, #2
   1aab6:	4618      	mov	r0, r3
   1aab8:	f00c f9d8 	bl	26e6c <va_getByIndex>
   1aabc:	6238      	str	r0, [r7, #32]
   1aabe:	6a3b      	ldr	r3, [r7, #32]
   1aac0:	2b00      	cmp	r3, #0
   1aac2:	d004      	beq.n	1aace <cosem_setSecuritySetup+0x172>
                {
                    gxfree(it);
   1aac4:	69f8      	ldr	r0, [r7, #28]
   1aac6:	f00e ffc5 	bl	29a54 <free>
                    return ret;
   1aaca:	6a3b      	ldr	r3, [r7, #32]
   1aacc:	e112      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   1aace:	697b      	ldr	r3, [r7, #20]
   1aad0:	689b      	ldr	r3, [r3, #8]
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	d023      	beq.n	1ab1e <cosem_setSecuritySetup+0x1c2>
   1aad6:	697b      	ldr	r3, [r7, #20]
   1aad8:	689b      	ldr	r3, [r3, #8]
   1aada:	88db      	ldrh	r3, [r3, #6]
   1aadc:	2b00      	cmp	r3, #0
   1aade:	d01e      	beq.n	1ab1e <cosem_setSecuritySetup+0x1c2>
                {
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   1aae0:	697b      	ldr	r3, [r7, #20]
   1aae2:	689b      	ldr	r3, [r3, #8]
   1aae4:	88db      	ldrh	r3, [r3, #6]
   1aae6:	3301      	adds	r3, #1
   1aae8:	4618      	mov	r0, r3
   1aaea:	f00e ffab 	bl	29a44 <malloc>
   1aaee:	4603      	mov	r3, r0
   1aaf0:	461a      	mov	r2, r3
   1aaf2:	69fb      	ldr	r3, [r7, #28]
   1aaf4:	605a      	str	r2, [r3, #4]
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   1aaf6:	69fb      	ldr	r3, [r7, #28]
   1aaf8:	6858      	ldr	r0, [r3, #4]
   1aafa:	697b      	ldr	r3, [r7, #20]
   1aafc:	689b      	ldr	r3, [r3, #8]
   1aafe:	6819      	ldr	r1, [r3, #0]
   1ab00:	697b      	ldr	r3, [r7, #20]
   1ab02:	689b      	ldr	r3, [r3, #8]
   1ab04:	88db      	ldrh	r3, [r3, #6]
   1ab06:	461a      	mov	r2, r3
   1ab08:	f00e ffbb 	bl	29a82 <memcpy>
                    it->serialNumber[tmp3->byteArr->size] = 0;
   1ab0c:	69fb      	ldr	r3, [r7, #28]
   1ab0e:	685b      	ldr	r3, [r3, #4]
   1ab10:	697a      	ldr	r2, [r7, #20]
   1ab12:	6892      	ldr	r2, [r2, #8]
   1ab14:	88d2      	ldrh	r2, [r2, #6]
   1ab16:	4413      	add	r3, r2
   1ab18:	2200      	movs	r2, #0
   1ab1a:	701a      	strb	r2, [r3, #0]
   1ab1c:	e002      	b.n	1ab24 <cosem_setSecuritySetup+0x1c8>
                }
                else
                {
                    it->serialNumber = NULL;
   1ab1e:	69fb      	ldr	r3, [r7, #28]
   1ab20:	2200      	movs	r2, #0
   1ab22:	605a      	str	r2, [r3, #4]
                }
                //issuer
                if ((ret = va_getByIndex(tmp->Arr, 3, &tmp3)) != DLMS_ERROR_CODE_OK)
   1ab24:	69bb      	ldr	r3, [r7, #24]
   1ab26:	689b      	ldr	r3, [r3, #8]
   1ab28:	f107 0214 	add.w	r2, r7, #20
   1ab2c:	2103      	movs	r1, #3
   1ab2e:	4618      	mov	r0, r3
   1ab30:	f00c f99c 	bl	26e6c <va_getByIndex>
   1ab34:	6238      	str	r0, [r7, #32]
   1ab36:	6a3b      	ldr	r3, [r7, #32]
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	d009      	beq.n	1ab50 <cosem_setSecuritySetup+0x1f4>
                {
                    gxfree(it->serialNumber);
   1ab3c:	69fb      	ldr	r3, [r7, #28]
   1ab3e:	685b      	ldr	r3, [r3, #4]
   1ab40:	4618      	mov	r0, r3
   1ab42:	f00e ff87 	bl	29a54 <free>
                    gxfree(it);
   1ab46:	69f8      	ldr	r0, [r7, #28]
   1ab48:	f00e ff84 	bl	29a54 <free>
                    return ret;
   1ab4c:	6a3b      	ldr	r3, [r7, #32]
   1ab4e:	e0d1      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   1ab50:	697b      	ldr	r3, [r7, #20]
   1ab52:	689b      	ldr	r3, [r3, #8]
   1ab54:	2b00      	cmp	r3, #0
   1ab56:	d023      	beq.n	1aba0 <cosem_setSecuritySetup+0x244>
   1ab58:	697b      	ldr	r3, [r7, #20]
   1ab5a:	689b      	ldr	r3, [r3, #8]
   1ab5c:	88db      	ldrh	r3, [r3, #6]
   1ab5e:	2b00      	cmp	r3, #0
   1ab60:	d01e      	beq.n	1aba0 <cosem_setSecuritySetup+0x244>
                {
                    it->issuer = gxmalloc(tmp3->byteArr->size + 1);
   1ab62:	697b      	ldr	r3, [r7, #20]
   1ab64:	689b      	ldr	r3, [r3, #8]
   1ab66:	88db      	ldrh	r3, [r3, #6]
   1ab68:	3301      	adds	r3, #1
   1ab6a:	4618      	mov	r0, r3
   1ab6c:	f00e ff6a 	bl	29a44 <malloc>
   1ab70:	4603      	mov	r3, r0
   1ab72:	461a      	mov	r2, r3
   1ab74:	69fb      	ldr	r3, [r7, #28]
   1ab76:	609a      	str	r2, [r3, #8]
                    memcpy(it->issuer, tmp3->byteArr->data, tmp3->byteArr->size);
   1ab78:	69fb      	ldr	r3, [r7, #28]
   1ab7a:	6898      	ldr	r0, [r3, #8]
   1ab7c:	697b      	ldr	r3, [r7, #20]
   1ab7e:	689b      	ldr	r3, [r3, #8]
   1ab80:	6819      	ldr	r1, [r3, #0]
   1ab82:	697b      	ldr	r3, [r7, #20]
   1ab84:	689b      	ldr	r3, [r3, #8]
   1ab86:	88db      	ldrh	r3, [r3, #6]
   1ab88:	461a      	mov	r2, r3
   1ab8a:	f00e ff7a 	bl	29a82 <memcpy>
                    it->issuer[tmp3->byteArr->size] = 0;
   1ab8e:	69fb      	ldr	r3, [r7, #28]
   1ab90:	689b      	ldr	r3, [r3, #8]
   1ab92:	697a      	ldr	r2, [r7, #20]
   1ab94:	6892      	ldr	r2, [r2, #8]
   1ab96:	88d2      	ldrh	r2, [r2, #6]
   1ab98:	4413      	add	r3, r2
   1ab9a:	2200      	movs	r2, #0
   1ab9c:	701a      	strb	r2, [r3, #0]
   1ab9e:	e002      	b.n	1aba6 <cosem_setSecuritySetup+0x24a>
                }
                else
                {
                    it->issuer = NULL;
   1aba0:	69fb      	ldr	r3, [r7, #28]
   1aba2:	2200      	movs	r2, #0
   1aba4:	609a      	str	r2, [r3, #8]
                }
                //subject
                if ((ret = va_getByIndex(tmp->Arr, 4, &tmp3)) != DLMS_ERROR_CODE_OK)
   1aba6:	69bb      	ldr	r3, [r7, #24]
   1aba8:	689b      	ldr	r3, [r3, #8]
   1abaa:	f107 0214 	add.w	r2, r7, #20
   1abae:	2104      	movs	r1, #4
   1abb0:	4618      	mov	r0, r3
   1abb2:	f00c f95b 	bl	26e6c <va_getByIndex>
   1abb6:	6238      	str	r0, [r7, #32]
   1abb8:	6a3b      	ldr	r3, [r7, #32]
   1abba:	2b00      	cmp	r3, #0
   1abbc:	d00e      	beq.n	1abdc <cosem_setSecuritySetup+0x280>
                {
                    gxfree(it->issuer);
   1abbe:	69fb      	ldr	r3, [r7, #28]
   1abc0:	689b      	ldr	r3, [r3, #8]
   1abc2:	4618      	mov	r0, r3
   1abc4:	f00e ff46 	bl	29a54 <free>
                    gxfree(it->serialNumber);
   1abc8:	69fb      	ldr	r3, [r7, #28]
   1abca:	685b      	ldr	r3, [r3, #4]
   1abcc:	4618      	mov	r0, r3
   1abce:	f00e ff41 	bl	29a54 <free>
                    gxfree(it);
   1abd2:	69f8      	ldr	r0, [r7, #28]
   1abd4:	f00e ff3e 	bl	29a54 <free>
                    return ret;
   1abd8:	6a3b      	ldr	r3, [r7, #32]
   1abda:	e08b      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   1abdc:	697b      	ldr	r3, [r7, #20]
   1abde:	689b      	ldr	r3, [r3, #8]
   1abe0:	2b00      	cmp	r3, #0
   1abe2:	d023      	beq.n	1ac2c <cosem_setSecuritySetup+0x2d0>
   1abe4:	697b      	ldr	r3, [r7, #20]
   1abe6:	689b      	ldr	r3, [r3, #8]
   1abe8:	88db      	ldrh	r3, [r3, #6]
   1abea:	2b00      	cmp	r3, #0
   1abec:	d01e      	beq.n	1ac2c <cosem_setSecuritySetup+0x2d0>
                {
                    it->subject = gxmalloc(tmp3->byteArr->size + 1);
   1abee:	697b      	ldr	r3, [r7, #20]
   1abf0:	689b      	ldr	r3, [r3, #8]
   1abf2:	88db      	ldrh	r3, [r3, #6]
   1abf4:	3301      	adds	r3, #1
   1abf6:	4618      	mov	r0, r3
   1abf8:	f00e ff24 	bl	29a44 <malloc>
   1abfc:	4603      	mov	r3, r0
   1abfe:	461a      	mov	r2, r3
   1ac00:	69fb      	ldr	r3, [r7, #28]
   1ac02:	60da      	str	r2, [r3, #12]
                    memcpy(it->subject, tmp3->byteArr->data, tmp3->byteArr->size);
   1ac04:	69fb      	ldr	r3, [r7, #28]
   1ac06:	68d8      	ldr	r0, [r3, #12]
   1ac08:	697b      	ldr	r3, [r7, #20]
   1ac0a:	689b      	ldr	r3, [r3, #8]
   1ac0c:	6819      	ldr	r1, [r3, #0]
   1ac0e:	697b      	ldr	r3, [r7, #20]
   1ac10:	689b      	ldr	r3, [r3, #8]
   1ac12:	88db      	ldrh	r3, [r3, #6]
   1ac14:	461a      	mov	r2, r3
   1ac16:	f00e ff34 	bl	29a82 <memcpy>
                    it->subject[tmp3->byteArr->size] = 0;
   1ac1a:	69fb      	ldr	r3, [r7, #28]
   1ac1c:	68db      	ldr	r3, [r3, #12]
   1ac1e:	697a      	ldr	r2, [r7, #20]
   1ac20:	6892      	ldr	r2, [r2, #8]
   1ac22:	88d2      	ldrh	r2, [r2, #6]
   1ac24:	4413      	add	r3, r2
   1ac26:	2200      	movs	r2, #0
   1ac28:	701a      	strb	r2, [r3, #0]
   1ac2a:	e002      	b.n	1ac32 <cosem_setSecuritySetup+0x2d6>
                }
                else
                {
                    it->subject = NULL;
   1ac2c:	69fb      	ldr	r3, [r7, #28]
   1ac2e:	2200      	movs	r2, #0
   1ac30:	60da      	str	r2, [r3, #12]
                }
                //subjectAltName.
                if ((ret = va_getByIndex(tmp->Arr, 5, &tmp3)) != DLMS_ERROR_CODE_OK)
   1ac32:	69bb      	ldr	r3, [r7, #24]
   1ac34:	689b      	ldr	r3, [r3, #8]
   1ac36:	f107 0214 	add.w	r2, r7, #20
   1ac3a:	2105      	movs	r1, #5
   1ac3c:	4618      	mov	r0, r3
   1ac3e:	f00c f915 	bl	26e6c <va_getByIndex>
   1ac42:	6238      	str	r0, [r7, #32]
   1ac44:	6a3b      	ldr	r3, [r7, #32]
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d013      	beq.n	1ac72 <cosem_setSecuritySetup+0x316>
                {
                    gxfree(it->subject);
   1ac4a:	69fb      	ldr	r3, [r7, #28]
   1ac4c:	68db      	ldr	r3, [r3, #12]
   1ac4e:	4618      	mov	r0, r3
   1ac50:	f00e ff00 	bl	29a54 <free>
                    gxfree(it->issuer);
   1ac54:	69fb      	ldr	r3, [r7, #28]
   1ac56:	689b      	ldr	r3, [r3, #8]
   1ac58:	4618      	mov	r0, r3
   1ac5a:	f00e fefb 	bl	29a54 <free>
                    gxfree(it->serialNumber);
   1ac5e:	69fb      	ldr	r3, [r7, #28]
   1ac60:	685b      	ldr	r3, [r3, #4]
   1ac62:	4618      	mov	r0, r3
   1ac64:	f00e fef6 	bl	29a54 <free>
                    gxfree(it);
   1ac68:	69f8      	ldr	r0, [r7, #28]
   1ac6a:	f00e fef3 	bl	29a54 <free>
                    return ret;
   1ac6e:	6a3b      	ldr	r3, [r7, #32]
   1ac70:	e040      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                }
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   1ac72:	697b      	ldr	r3, [r7, #20]
   1ac74:	689b      	ldr	r3, [r3, #8]
   1ac76:	2b00      	cmp	r3, #0
   1ac78:	d023      	beq.n	1acc2 <cosem_setSecuritySetup+0x366>
   1ac7a:	697b      	ldr	r3, [r7, #20]
   1ac7c:	689b      	ldr	r3, [r3, #8]
   1ac7e:	88db      	ldrh	r3, [r3, #6]
   1ac80:	2b00      	cmp	r3, #0
   1ac82:	d01e      	beq.n	1acc2 <cosem_setSecuritySetup+0x366>
                {
                    it->subjectAltName = gxmalloc(tmp3->byteArr->size + 1);
   1ac84:	697b      	ldr	r3, [r7, #20]
   1ac86:	689b      	ldr	r3, [r3, #8]
   1ac88:	88db      	ldrh	r3, [r3, #6]
   1ac8a:	3301      	adds	r3, #1
   1ac8c:	4618      	mov	r0, r3
   1ac8e:	f00e fed9 	bl	29a44 <malloc>
   1ac92:	4603      	mov	r3, r0
   1ac94:	461a      	mov	r2, r3
   1ac96:	69fb      	ldr	r3, [r7, #28]
   1ac98:	611a      	str	r2, [r3, #16]
                    memcpy(it->subjectAltName, tmp3->byteArr->data, tmp3->byteArr->size);
   1ac9a:	69fb      	ldr	r3, [r7, #28]
   1ac9c:	6918      	ldr	r0, [r3, #16]
   1ac9e:	697b      	ldr	r3, [r7, #20]
   1aca0:	689b      	ldr	r3, [r3, #8]
   1aca2:	6819      	ldr	r1, [r3, #0]
   1aca4:	697b      	ldr	r3, [r7, #20]
   1aca6:	689b      	ldr	r3, [r3, #8]
   1aca8:	88db      	ldrh	r3, [r3, #6]
   1acaa:	461a      	mov	r2, r3
   1acac:	f00e fee9 	bl	29a82 <memcpy>
                    it->subjectAltName[tmp3->byteArr->size] = 0;
   1acb0:	69fb      	ldr	r3, [r7, #28]
   1acb2:	691b      	ldr	r3, [r3, #16]
   1acb4:	697a      	ldr	r2, [r7, #20]
   1acb6:	6892      	ldr	r2, [r2, #8]
   1acb8:	88d2      	ldrh	r2, [r2, #6]
   1acba:	4413      	add	r3, r2
   1acbc:	2200      	movs	r2, #0
   1acbe:	701a      	strb	r2, [r3, #0]
   1acc0:	e002      	b.n	1acc8 <cosem_setSecuritySetup+0x36c>
                }
                else
                {
                    it->subjectAltName = NULL;
   1acc2:	69fb      	ldr	r3, [r7, #28]
   1acc4:	2200      	movs	r2, #0
   1acc6:	611a      	str	r2, [r3, #16]
                }
                arr_push(&object->certificates, it);
   1acc8:	68fb      	ldr	r3, [r7, #12]
   1acca:	332c      	adds	r3, #44	; 0x2c
   1accc:	69f9      	ldr	r1, [r7, #28]
   1acce:	4618      	mov	r0, r3
   1acd0:	f7f1 fcd6 	bl	c680 <arr_push>
        break;
    case 6:
        obj_clearCertificateInfo(&object->certificates);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1acd6:	3301      	adds	r3, #1
   1acd8:	627b      	str	r3, [r7, #36]	; 0x24
   1acda:	687b      	ldr	r3, [r7, #4]
   1acdc:	689b      	ldr	r3, [r3, #8]
   1acde:	88db      	ldrh	r3, [r3, #6]
   1ace0:	461a      	mov	r2, r3
   1ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ace4:	429a      	cmp	r2, r3
   1ace6:	f47f ae9c 	bne.w	1aa22 <cosem_setSecuritySetup+0xc6>
                    it->subjectAltName = NULL;
                }
                arr_push(&object->certificates, it);
            }
        }
        break;
   1acea:	e001      	b.n	1acf0 <cosem_setSecuritySetup+0x394>
    default:
        return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1acec:	2303      	movs	r3, #3
   1acee:	e001      	b.n	1acf4 <cosem_setSecuritySetup+0x398>
                    it->subjectAltName = NULL;
                }
                arr_push(&object->certificates, it);
            }
        }
        break;
   1acf0:	bf00      	nop
    default:
        return DLMS_ERROR_CODE_READ_WRITE_DENIED;
    }
    return DLMS_ERROR_CODE_OK;
   1acf2:	2300      	movs	r3, #0
}
   1acf4:	4618      	mov	r0, r3
   1acf6:	3728      	adds	r7, #40	; 0x28
   1acf8:	46bd      	mov	sp, r7
   1acfa:	bdb0      	pop	{r4, r5, r7, pc}

0001acfc <cosem_setIecHdlcSetup>:
#endif //DLMS_IGNORE_SECURITY_SETUP

#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
int cosem_setIecHdlcSetup(gxIecHdlcSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1acfc:	b580      	push	{r7, lr}
   1acfe:	b084      	sub	sp, #16
   1ad00:	af00      	add	r7, sp, #0
   1ad02:	60f8      	str	r0, [r7, #12]
   1ad04:	460b      	mov	r3, r1
   1ad06:	607a      	str	r2, [r7, #4]
   1ad08:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1ad0a:	7afb      	ldrb	r3, [r7, #11]
   1ad0c:	2b02      	cmp	r3, #2
   1ad0e:	d107      	bne.n	1ad20 <cosem_setIecHdlcSetup+0x24>
    {
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1ad10:	6878      	ldr	r0, [r7, #4]
   1ad12:	f00b fedb 	bl	26acc <var_toInteger>
   1ad16:	4603      	mov	r3, r0
   1ad18:	b2da      	uxtb	r2, r3
   1ad1a:	68fb      	ldr	r3, [r7, #12]
   1ad1c:	759a      	strb	r2, [r3, #22]
   1ad1e:	e04f      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 3)
   1ad20:	7afb      	ldrb	r3, [r7, #11]
   1ad22:	2b03      	cmp	r3, #3
   1ad24:	d107      	bne.n	1ad36 <cosem_setIecHdlcSetup+0x3a>
    {
        object->windowSizeTransmit = (unsigned char)var_toInteger(value);
   1ad26:	6878      	ldr	r0, [r7, #4]
   1ad28:	f00b fed0 	bl	26acc <var_toInteger>
   1ad2c:	4603      	mov	r3, r0
   1ad2e:	b2da      	uxtb	r2, r3
   1ad30:	68fb      	ldr	r3, [r7, #12]
   1ad32:	75da      	strb	r2, [r3, #23]
   1ad34:	e044      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 4)
   1ad36:	7afb      	ldrb	r3, [r7, #11]
   1ad38:	2b04      	cmp	r3, #4
   1ad3a:	d107      	bne.n	1ad4c <cosem_setIecHdlcSetup+0x50>
    {
        object->windowSizeReceive = (unsigned char)var_toInteger(value);
   1ad3c:	6878      	ldr	r0, [r7, #4]
   1ad3e:	f00b fec5 	bl	26acc <var_toInteger>
   1ad42:	4603      	mov	r3, r0
   1ad44:	b2da      	uxtb	r2, r3
   1ad46:	68fb      	ldr	r3, [r7, #12]
   1ad48:	761a      	strb	r2, [r3, #24]
   1ad4a:	e039      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 5)
   1ad4c:	7afb      	ldrb	r3, [r7, #11]
   1ad4e:	2b05      	cmp	r3, #5
   1ad50:	d107      	bne.n	1ad62 <cosem_setIecHdlcSetup+0x66>
    {
        object->maximumInfoLengthTransmit = (unsigned short)var_toInteger(value);
   1ad52:	6878      	ldr	r0, [r7, #4]
   1ad54:	f00b feba 	bl	26acc <var_toInteger>
   1ad58:	4603      	mov	r3, r0
   1ad5a:	b29a      	uxth	r2, r3
   1ad5c:	68fb      	ldr	r3, [r7, #12]
   1ad5e:	829a      	strh	r2, [r3, #20]
   1ad60:	e02e      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 6)
   1ad62:	7afb      	ldrb	r3, [r7, #11]
   1ad64:	2b06      	cmp	r3, #6
   1ad66:	d107      	bne.n	1ad78 <cosem_setIecHdlcSetup+0x7c>
    {
        object->maximumInfoLengthReceive = (unsigned short)var_toInteger(value);
   1ad68:	6878      	ldr	r0, [r7, #4]
   1ad6a:	f00b feaf 	bl	26acc <var_toInteger>
   1ad6e:	4603      	mov	r3, r0
   1ad70:	b29a      	uxth	r2, r3
   1ad72:	68fb      	ldr	r3, [r7, #12]
   1ad74:	839a      	strh	r2, [r3, #28]
   1ad76:	e023      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 7)
   1ad78:	7afb      	ldrb	r3, [r7, #11]
   1ad7a:	2b07      	cmp	r3, #7
   1ad7c:	d107      	bne.n	1ad8e <cosem_setIecHdlcSetup+0x92>
    {
        object->interCharachterTimeout = (unsigned short)var_toInteger(value);
   1ad7e:	6878      	ldr	r0, [r7, #4]
   1ad80:	f00b fea4 	bl	26acc <var_toInteger>
   1ad84:	4603      	mov	r3, r0
   1ad86:	b29a      	uxth	r2, r3
   1ad88:	68fb      	ldr	r3, [r7, #12]
   1ad8a:	835a      	strh	r2, [r3, #26]
   1ad8c:	e018      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 8)
   1ad8e:	7afb      	ldrb	r3, [r7, #11]
   1ad90:	2b08      	cmp	r3, #8
   1ad92:	d107      	bne.n	1ada4 <cosem_setIecHdlcSetup+0xa8>
    {
        object->inactivityTimeout = (unsigned short)var_toInteger(value);
   1ad94:	6878      	ldr	r0, [r7, #4]
   1ad96:	f00b fe99 	bl	26acc <var_toInteger>
   1ad9a:	4603      	mov	r3, r0
   1ad9c:	b29a      	uxth	r2, r3
   1ad9e:	68fb      	ldr	r3, [r7, #12]
   1ada0:	821a      	strh	r2, [r3, #16]
   1ada2:	e00d      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else if (index == 9)
   1ada4:	7afb      	ldrb	r3, [r7, #11]
   1ada6:	2b09      	cmp	r3, #9
   1ada8:	d107      	bne.n	1adba <cosem_setIecHdlcSetup+0xbe>
    {
        object->deviceAddress = (unsigned short)var_toInteger(value);
   1adaa:	6878      	ldr	r0, [r7, #4]
   1adac:	f00b fe8e 	bl	26acc <var_toInteger>
   1adb0:	4603      	mov	r3, r0
   1adb2:	b29a      	uxth	r2, r3
   1adb4:	68fb      	ldr	r3, [r7, #12]
   1adb6:	825a      	strh	r2, [r3, #18]
   1adb8:	e002      	b.n	1adc0 <cosem_setIecHdlcSetup+0xc4>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1adba:	f44f 7381 	mov.w	r3, #258	; 0x102
   1adbe:	e000      	b.n	1adc2 <cosem_setIecHdlcSetup+0xc6>
    }
    return DLMS_ERROR_CODE_OK;
   1adc0:	2300      	movs	r3, #0
}
   1adc2:	4618      	mov	r0, r3
   1adc4:	3710      	adds	r7, #16
   1adc6:	46bd      	mov	sp, r7
   1adc8:	bd80      	pop	{r7, pc}
   1adca:	bf00      	nop

0001adcc <cosem_setIecLocalPortSetup>:
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
int cosem_setIecLocalPortSetup(gxLocalPortSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1adcc:	b5b0      	push	{r4, r5, r7, lr}
   1adce:	b084      	sub	sp, #16
   1add0:	af00      	add	r7, sp, #0
   1add2:	60f8      	str	r0, [r7, #12]
   1add4:	460b      	mov	r3, r1
   1add6:	607a      	str	r2, [r7, #4]
   1add8:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1adda:	7afb      	ldrb	r3, [r7, #11]
   1addc:	2b02      	cmp	r3, #2
   1adde:	d108      	bne.n	1adf2 <cosem_setIecLocalPortSetup+0x26>
    {
        object->defaultMode = (DLMS_OPTICAL_PROTOCOL_MODE)var_toInteger(value);
   1ade0:	6878      	ldr	r0, [r7, #4]
   1ade2:	f00b fe73 	bl	26acc <var_toInteger>
   1ade6:	4603      	mov	r3, r0
   1ade8:	b2da      	uxtb	r2, r3
   1adea:	68fb      	ldr	r3, [r7, #12]
   1adec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   1adf0:	e08a      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 3)
   1adf2:	7afb      	ldrb	r3, [r7, #11]
   1adf4:	2b03      	cmp	r3, #3
   1adf6:	d108      	bne.n	1ae0a <cosem_setIecLocalPortSetup+0x3e>
    {
        object->defaultBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   1adf8:	6878      	ldr	r0, [r7, #4]
   1adfa:	f00b fe67 	bl	26acc <var_toInteger>
   1adfe:	4603      	mov	r3, r0
   1ae00:	b2da      	uxtb	r2, r3
   1ae02:	68fb      	ldr	r3, [r7, #12]
   1ae04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   1ae08:	e07e      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 4)
   1ae0a:	7afb      	ldrb	r3, [r7, #11]
   1ae0c:	2b04      	cmp	r3, #4
   1ae0e:	d108      	bne.n	1ae22 <cosem_setIecLocalPortSetup+0x56>
    {
        object->proposedBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   1ae10:	6878      	ldr	r0, [r7, #4]
   1ae12:	f00b fe5b 	bl	26acc <var_toInteger>
   1ae16:	4603      	mov	r3, r0
   1ae18:	b2da      	uxtb	r2, r3
   1ae1a:	68fb      	ldr	r3, [r7, #12]
   1ae1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   1ae20:	e072      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 5)
   1ae22:	7afb      	ldrb	r3, [r7, #11]
   1ae24:	2b05      	cmp	r3, #5
   1ae26:	d108      	bne.n	1ae3a <cosem_setIecLocalPortSetup+0x6e>
    {
        object->responseTime = (DLMS_LOCAL_PORT_RESPONSE_TIME)var_toInteger(value);
   1ae28:	6878      	ldr	r0, [r7, #4]
   1ae2a:	f00b fe4f 	bl	26acc <var_toInteger>
   1ae2e:	4603      	mov	r3, r0
   1ae30:	b2da      	uxtb	r2, r3
   1ae32:	68fb      	ldr	r3, [r7, #12]
   1ae34:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1ae38:	e066      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 6)
   1ae3a:	7afb      	ldrb	r3, [r7, #11]
   1ae3c:	2b06      	cmp	r3, #6
   1ae3e:	d115      	bne.n	1ae6c <cosem_setIecLocalPortSetup+0xa0>
    {
        bb_clear(&object->deviceAddress);
   1ae40:	68fb      	ldr	r3, [r7, #12]
   1ae42:	3338      	adds	r3, #56	; 0x38
   1ae44:	4618      	mov	r0, r3
   1ae46:	f7e8 fc8d 	bl	3764 <bb_clear>
        bb_set2(&object->deviceAddress, value->byteArr, 0, bb_size(value->byteArr));
   1ae4a:	68fb      	ldr	r3, [r7, #12]
   1ae4c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   1ae50:	687b      	ldr	r3, [r7, #4]
   1ae52:	689d      	ldr	r5, [r3, #8]
   1ae54:	687b      	ldr	r3, [r7, #4]
   1ae56:	689b      	ldr	r3, [r3, #8]
   1ae58:	4618      	mov	r0, r3
   1ae5a:	f7e7 ff35 	bl	2cc8 <bb_size>
   1ae5e:	4603      	mov	r3, r0
   1ae60:	2200      	movs	r2, #0
   1ae62:	4629      	mov	r1, r5
   1ae64:	4620      	mov	r0, r4
   1ae66:	f7e8 fbdb 	bl	3620 <bb_set2>
   1ae6a:	e04d      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 7)
   1ae6c:	7afb      	ldrb	r3, [r7, #11]
   1ae6e:	2b07      	cmp	r3, #7
   1ae70:	d115      	bne.n	1ae9e <cosem_setIecLocalPortSetup+0xd2>
    {
        bb_clear(&object->password1);
   1ae72:	68fb      	ldr	r3, [r7, #12]
   1ae74:	3310      	adds	r3, #16
   1ae76:	4618      	mov	r0, r3
   1ae78:	f7e8 fc74 	bl	3764 <bb_clear>
        bb_set2(&object->password1, value->byteArr, 0, bb_size(value->byteArr));
   1ae7c:	68fb      	ldr	r3, [r7, #12]
   1ae7e:	f103 0410 	add.w	r4, r3, #16
   1ae82:	687b      	ldr	r3, [r7, #4]
   1ae84:	689d      	ldr	r5, [r3, #8]
   1ae86:	687b      	ldr	r3, [r7, #4]
   1ae88:	689b      	ldr	r3, [r3, #8]
   1ae8a:	4618      	mov	r0, r3
   1ae8c:	f7e7 ff1c 	bl	2cc8 <bb_size>
   1ae90:	4603      	mov	r3, r0
   1ae92:	2200      	movs	r2, #0
   1ae94:	4629      	mov	r1, r5
   1ae96:	4620      	mov	r0, r4
   1ae98:	f7e8 fbc2 	bl	3620 <bb_set2>
   1ae9c:	e034      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 8)
   1ae9e:	7afb      	ldrb	r3, [r7, #11]
   1aea0:	2b08      	cmp	r3, #8
   1aea2:	d115      	bne.n	1aed0 <cosem_setIecLocalPortSetup+0x104>
    {
        bb_clear(&object->password2);
   1aea4:	68fb      	ldr	r3, [r7, #12]
   1aea6:	331c      	adds	r3, #28
   1aea8:	4618      	mov	r0, r3
   1aeaa:	f7e8 fc5b 	bl	3764 <bb_clear>
        bb_set2(&object->password2, value->byteArr, 0, bb_size(value->byteArr));
   1aeae:	68fb      	ldr	r3, [r7, #12]
   1aeb0:	f103 041c 	add.w	r4, r3, #28
   1aeb4:	687b      	ldr	r3, [r7, #4]
   1aeb6:	689d      	ldr	r5, [r3, #8]
   1aeb8:	687b      	ldr	r3, [r7, #4]
   1aeba:	689b      	ldr	r3, [r3, #8]
   1aebc:	4618      	mov	r0, r3
   1aebe:	f7e7 ff03 	bl	2cc8 <bb_size>
   1aec2:	4603      	mov	r3, r0
   1aec4:	2200      	movs	r2, #0
   1aec6:	4629      	mov	r1, r5
   1aec8:	4620      	mov	r0, r4
   1aeca:	f7e8 fba9 	bl	3620 <bb_set2>
   1aece:	e01b      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else if (index == 9)
   1aed0:	7afb      	ldrb	r3, [r7, #11]
   1aed2:	2b09      	cmp	r3, #9
   1aed4:	d115      	bne.n	1af02 <cosem_setIecLocalPortSetup+0x136>
    {
        bb_clear(&object->password5);
   1aed6:	68fb      	ldr	r3, [r7, #12]
   1aed8:	3328      	adds	r3, #40	; 0x28
   1aeda:	4618      	mov	r0, r3
   1aedc:	f7e8 fc42 	bl	3764 <bb_clear>
        bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   1aee0:	68fb      	ldr	r3, [r7, #12]
   1aee2:	f103 0428 	add.w	r4, r3, #40	; 0x28
   1aee6:	687b      	ldr	r3, [r7, #4]
   1aee8:	689d      	ldr	r5, [r3, #8]
   1aeea:	687b      	ldr	r3, [r7, #4]
   1aeec:	689b      	ldr	r3, [r3, #8]
   1aeee:	4618      	mov	r0, r3
   1aef0:	f7e7 feea 	bl	2cc8 <bb_size>
   1aef4:	4603      	mov	r3, r0
   1aef6:	2200      	movs	r2, #0
   1aef8:	4629      	mov	r1, r5
   1aefa:	4620      	mov	r0, r4
   1aefc:	f7e8 fb90 	bl	3620 <bb_set2>
   1af00:	e002      	b.n	1af08 <cosem_setIecLocalPortSetup+0x13c>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1af02:	f44f 7381 	mov.w	r3, #258	; 0x102
   1af06:	e000      	b.n	1af0a <cosem_setIecLocalPortSetup+0x13e>
    }
    return DLMS_ERROR_CODE_OK;
   1af08:	2300      	movs	r3, #0
}
   1af0a:	4618      	mov	r0, r3
   1af0c:	3710      	adds	r7, #16
   1af0e:	46bd      	mov	sp, r7
   1af10:	bdb0      	pop	{r4, r5, r7, pc}
   1af12:	bf00      	nop

0001af14 <cosem_setIP4Setup>:
#endif //DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
int cosem_setIP4Setup(gxIp4Setup* object, unsigned char index, dlmsVARIANT *value)
{
   1af14:	b5b0      	push	{r4, r5, r7, lr}
   1af16:	b08a      	sub	sp, #40	; 0x28
   1af18:	af00      	add	r7, sp, #0
   1af1a:	60f8      	str	r0, [r7, #12]
   1af1c:	460b      	mov	r3, r1
   1af1e:	607a      	str	r2, [r7, #4]
   1af20:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    gxip4SetupIpOption* ipItem;

    if (index == 2)
   1af22:	7afb      	ldrb	r3, [r7, #11]
   1af24:	2b02      	cmp	r3, #2
   1af26:	d115      	bne.n	1af54 <cosem_setIP4Setup+0x40>
    {
        bb_clear(&object->dataLinkLayerReference);
   1af28:	68fb      	ldr	r3, [r7, #12]
   1af2a:	3310      	adds	r3, #16
   1af2c:	4618      	mov	r0, r3
   1af2e:	f7e8 fc19 	bl	3764 <bb_clear>
        bb_set2(&object->dataLinkLayerReference, value->byteArr, 0, bb_size(value->byteArr));
   1af32:	68fb      	ldr	r3, [r7, #12]
   1af34:	f103 0410 	add.w	r4, r3, #16
   1af38:	687b      	ldr	r3, [r7, #4]
   1af3a:	689d      	ldr	r5, [r3, #8]
   1af3c:	687b      	ldr	r3, [r7, #4]
   1af3e:	689b      	ldr	r3, [r3, #8]
   1af40:	4618      	mov	r0, r3
   1af42:	f7e7 fec1 	bl	2cc8 <bb_size>
   1af46:	4603      	mov	r3, r0
   1af48:	2200      	movs	r2, #0
   1af4a:	4629      	mov	r1, r5
   1af4c:	4620      	mov	r0, r4
   1af4e:	f7e8 fb67 	bl	3620 <bb_set2>
   1af52:	e0fb      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 3)
   1af54:	7afb      	ldrb	r3, [r7, #11]
   1af56:	2b03      	cmp	r3, #3
   1af58:	d107      	bne.n	1af6a <cosem_setIP4Setup+0x56>
    {
        object->ipAddress = var_toInteger(value);
   1af5a:	6878      	ldr	r0, [r7, #4]
   1af5c:	f00b fdb6 	bl	26acc <var_toInteger>
   1af60:	4603      	mov	r3, r0
   1af62:	461a      	mov	r2, r3
   1af64:	68fb      	ldr	r3, [r7, #12]
   1af66:	61da      	str	r2, [r3, #28]
   1af68:	e0f0      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 4)
   1af6a:	7afb      	ldrb	r3, [r7, #11]
   1af6c:	2b04      	cmp	r3, #4
   1af6e:	d137      	bne.n	1afe0 <cosem_setIP4Setup+0xcc>
    {
        va_clear(&object->multicastIPAddress);
   1af70:	68fb      	ldr	r3, [r7, #12]
   1af72:	3320      	adds	r3, #32
   1af74:	4618      	mov	r0, r3
   1af76:	f00b fee5 	bl	26d44 <va_clear>
        if (value->Arr != NULL)
   1af7a:	687b      	ldr	r3, [r7, #4]
   1af7c:	689b      	ldr	r3, [r3, #8]
   1af7e:	2b00      	cmp	r3, #0
   1af80:	f000 80e4 	beq.w	1b14c <cosem_setIP4Setup+0x238>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1af84:	2300      	movs	r3, #0
   1af86:	627b      	str	r3, [r7, #36]	; 0x24
   1af88:	e022      	b.n	1afd0 <cosem_setIP4Setup+0xbc>
            {
                ret = va_get(value->Arr, &tmp);
   1af8a:	687b      	ldr	r3, [r7, #4]
   1af8c:	689b      	ldr	r3, [r3, #8]
   1af8e:	f107 0218 	add.w	r2, r7, #24
   1af92:	4611      	mov	r1, r2
   1af94:	4618      	mov	r0, r3
   1af96:	f00b ff43 	bl	26e20 <va_get>
   1af9a:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1af9c:	6a3b      	ldr	r3, [r7, #32]
   1af9e:	2b00      	cmp	r3, #0
   1afa0:	d001      	beq.n	1afa6 <cosem_setIP4Setup+0x92>
                {
                    return ret;
   1afa2:	6a3b      	ldr	r3, [r7, #32]
   1afa4:	e0d3      	b.n	1b14e <cosem_setIP4Setup+0x23a>
                }
                tmp3 = (dlmsVARIANT *)gxmalloc(sizeof(dlmsVARIANT));
   1afa6:	2010      	movs	r0, #16
   1afa8:	f00e fd4c 	bl	29a44 <malloc>
   1afac:	4603      	mov	r3, r0
   1afae:	617b      	str	r3, [r7, #20]
                var_copy(tmp, tmp3);
   1afb0:	69bb      	ldr	r3, [r7, #24]
   1afb2:	697a      	ldr	r2, [r7, #20]
   1afb4:	4611      	mov	r1, r2
   1afb6:	4618      	mov	r0, r3
   1afb8:	f00c fedc 	bl	27d74 <var_copy>
                va_push(&object->multicastIPAddress, tmp3);
   1afbc:	68fb      	ldr	r3, [r7, #12]
   1afbe:	3320      	adds	r3, #32
   1afc0:	697a      	ldr	r2, [r7, #20]
   1afc2:	4611      	mov	r1, r2
   1afc4:	4618      	mov	r0, r3
   1afc6:	f00b fe69 	bl	26c9c <va_push>
    else if (index == 4)
    {
        va_clear(&object->multicastIPAddress);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afcc:	3301      	adds	r3, #1
   1afce:	627b      	str	r3, [r7, #36]	; 0x24
   1afd0:	687b      	ldr	r3, [r7, #4]
   1afd2:	689b      	ldr	r3, [r3, #8]
   1afd4:	88db      	ldrh	r3, [r3, #6]
   1afd6:	461a      	mov	r2, r3
   1afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afda:	429a      	cmp	r2, r3
   1afdc:	d1d5      	bne.n	1af8a <cosem_setIP4Setup+0x76>
   1afde:	e0b5      	b.n	1b14c <cosem_setIP4Setup+0x238>
                var_copy(tmp, tmp3);
                va_push(&object->multicastIPAddress, tmp3);
            }
        }
    }
    else if (index == 5)
   1afe0:	7afb      	ldrb	r3, [r7, #11]
   1afe2:	2b05      	cmp	r3, #5
   1afe4:	d17a      	bne.n	1b0dc <cosem_setIP4Setup+0x1c8>
    {
        arr_clear(&object->ipOptions);
   1afe6:	68fb      	ldr	r3, [r7, #12]
   1afe8:	332c      	adds	r3, #44	; 0x2c
   1afea:	4618      	mov	r0, r3
   1afec:	f7f1 fb90 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1aff0:	687b      	ldr	r3, [r7, #4]
   1aff2:	689b      	ldr	r3, [r3, #8]
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	f000 80a9 	beq.w	1b14c <cosem_setIP4Setup+0x238>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1affa:	2300      	movs	r3, #0
   1affc:	627b      	str	r3, [r7, #36]	; 0x24
   1affe:	e065      	b.n	1b0cc <cosem_setIP4Setup+0x1b8>
            {
                ret = va_get(value->Arr, &tmp);
   1b000:	687b      	ldr	r3, [r7, #4]
   1b002:	689b      	ldr	r3, [r3, #8]
   1b004:	f107 0218 	add.w	r2, r7, #24
   1b008:	4611      	mov	r1, r2
   1b00a:	4618      	mov	r0, r3
   1b00c:	f00b ff08 	bl	26e20 <va_get>
   1b010:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b012:	6a3b      	ldr	r3, [r7, #32]
   1b014:	2b00      	cmp	r3, #0
   1b016:	d001      	beq.n	1b01c <cosem_setIP4Setup+0x108>
                {
                    return ret;
   1b018:	6a3b      	ldr	r3, [r7, #32]
   1b01a:	e098      	b.n	1b14e <cosem_setIP4Setup+0x23a>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1b01c:	69bb      	ldr	r3, [r7, #24]
   1b01e:	689b      	ldr	r3, [r3, #8]
   1b020:	f107 0214 	add.w	r2, r7, #20
   1b024:	4611      	mov	r1, r2
   1b026:	4618      	mov	r0, r3
   1b028:	f00b fefa 	bl	26e20 <va_get>
   1b02c:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b02e:	6a3b      	ldr	r3, [r7, #32]
   1b030:	2b00      	cmp	r3, #0
   1b032:	d001      	beq.n	1b038 <cosem_setIP4Setup+0x124>
                {
                    return ret;
   1b034:	6a3b      	ldr	r3, [r7, #32]
   1b036:	e08a      	b.n	1b14e <cosem_setIP4Setup+0x23a>
                }
                ipItem = (gxip4SetupIpOption*)gxmalloc(sizeof(gxip4SetupIpOption));
   1b038:	2010      	movs	r0, #16
   1b03a:	f00e fd03 	bl	29a44 <malloc>
   1b03e:	4603      	mov	r3, r0
   1b040:	61fb      	str	r3, [r7, #28]
                bb_init(&ipItem->data);
   1b042:	69fb      	ldr	r3, [r7, #28]
   1b044:	3304      	adds	r3, #4
   1b046:	4618      	mov	r0, r3
   1b048:	f7e7 fe4e 	bl	2ce8 <bb_init>
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   1b04c:	697b      	ldr	r3, [r7, #20]
   1b04e:	4618      	mov	r0, r3
   1b050:	f00b fd3c 	bl	26acc <var_toInteger>
   1b054:	4603      	mov	r3, r0
   1b056:	b2da      	uxtb	r2, r3
   1b058:	69fb      	ldr	r3, [r7, #28]
   1b05a:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp3);
   1b05c:	69bb      	ldr	r3, [r7, #24]
   1b05e:	689b      	ldr	r3, [r3, #8]
   1b060:	f107 0214 	add.w	r2, r7, #20
   1b064:	4611      	mov	r1, r2
   1b066:	4618      	mov	r0, r3
   1b068:	f00b feda 	bl	26e20 <va_get>
   1b06c:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b06e:	6a3b      	ldr	r3, [r7, #32]
   1b070:	2b00      	cmp	r3, #0
   1b072:	d001      	beq.n	1b078 <cosem_setIP4Setup+0x164>
                {
                    return ret;
   1b074:	6a3b      	ldr	r3, [r7, #32]
   1b076:	e06a      	b.n	1b14e <cosem_setIP4Setup+0x23a>
                }
                ipItem->length = (short)var_toInteger(tmp3);
   1b078:	697b      	ldr	r3, [r7, #20]
   1b07a:	4618      	mov	r0, r3
   1b07c:	f00b fd26 	bl	26acc <var_toInteger>
   1b080:	4603      	mov	r3, r0
   1b082:	b21a      	sxth	r2, r3
   1b084:	69fb      	ldr	r3, [r7, #28]
   1b086:	805a      	strh	r2, [r3, #2]
                ret = va_get(tmp->Arr, &tmp3);
   1b088:	69bb      	ldr	r3, [r7, #24]
   1b08a:	689b      	ldr	r3, [r3, #8]
   1b08c:	f107 0214 	add.w	r2, r7, #20
   1b090:	4611      	mov	r1, r2
   1b092:	4618      	mov	r0, r3
   1b094:	f00b fec4 	bl	26e20 <va_get>
   1b098:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b09a:	6a3b      	ldr	r3, [r7, #32]
   1b09c:	2b00      	cmp	r3, #0
   1b09e:	d001      	beq.n	1b0a4 <cosem_setIP4Setup+0x190>
                {
                    return ret;
   1b0a0:	6a3b      	ldr	r3, [r7, #32]
   1b0a2:	e054      	b.n	1b14e <cosem_setIP4Setup+0x23a>
                }
                bb_set(&ipItem->data, tmp3->byteArr->data, tmp3->byteArr->size);
   1b0a4:	69fb      	ldr	r3, [r7, #28]
   1b0a6:	1d18      	adds	r0, r3, #4
   1b0a8:	697b      	ldr	r3, [r7, #20]
   1b0aa:	689b      	ldr	r3, [r3, #8]
   1b0ac:	6819      	ldr	r1, [r3, #0]
   1b0ae:	697b      	ldr	r3, [r7, #20]
   1b0b0:	689b      	ldr	r3, [r3, #8]
   1b0b2:	88db      	ldrh	r3, [r3, #6]
   1b0b4:	461a      	mov	r2, r3
   1b0b6:	f7e8 fa53 	bl	3560 <bb_set>
                arr_push(&object->ipOptions, ipItem);
   1b0ba:	68fb      	ldr	r3, [r7, #12]
   1b0bc:	332c      	adds	r3, #44	; 0x2c
   1b0be:	69f9      	ldr	r1, [r7, #28]
   1b0c0:	4618      	mov	r0, r3
   1b0c2:	f7f1 fadd 	bl	c680 <arr_push>
    else if (index == 5)
    {
        arr_clear(&object->ipOptions);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0c8:	3301      	adds	r3, #1
   1b0ca:	627b      	str	r3, [r7, #36]	; 0x24
   1b0cc:	687b      	ldr	r3, [r7, #4]
   1b0ce:	689b      	ldr	r3, [r3, #8]
   1b0d0:	88db      	ldrh	r3, [r3, #6]
   1b0d2:	461a      	mov	r2, r3
   1b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0d6:	429a      	cmp	r2, r3
   1b0d8:	d192      	bne.n	1b000 <cosem_setIP4Setup+0xec>
   1b0da:	e037      	b.n	1b14c <cosem_setIP4Setup+0x238>
                bb_set(&ipItem->data, tmp3->byteArr->data, tmp3->byteArr->size);
                arr_push(&object->ipOptions, ipItem);
            }
        }
    }
    else if (index == 6)
   1b0dc:	7afb      	ldrb	r3, [r7, #11]
   1b0de:	2b06      	cmp	r3, #6
   1b0e0:	d107      	bne.n	1b0f2 <cosem_setIP4Setup+0x1de>
    {
        object->subnetMask = var_toInteger(value);
   1b0e2:	6878      	ldr	r0, [r7, #4]
   1b0e4:	f00b fcf2 	bl	26acc <var_toInteger>
   1b0e8:	4603      	mov	r3, r0
   1b0ea:	461a      	mov	r2, r3
   1b0ec:	68fb      	ldr	r3, [r7, #12]
   1b0ee:	63da      	str	r2, [r3, #60]	; 0x3c
   1b0f0:	e02c      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 7)
   1b0f2:	7afb      	ldrb	r3, [r7, #11]
   1b0f4:	2b07      	cmp	r3, #7
   1b0f6:	d107      	bne.n	1b108 <cosem_setIP4Setup+0x1f4>
    {
        object->gatewayIPAddress = var_toInteger(value);
   1b0f8:	6878      	ldr	r0, [r7, #4]
   1b0fa:	f00b fce7 	bl	26acc <var_toInteger>
   1b0fe:	4603      	mov	r3, r0
   1b100:	461a      	mov	r2, r3
   1b102:	68fb      	ldr	r3, [r7, #12]
   1b104:	641a      	str	r2, [r3, #64]	; 0x40
   1b106:	e021      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 8)
   1b108:	7afb      	ldrb	r3, [r7, #11]
   1b10a:	2b08      	cmp	r3, #8
   1b10c:	d105      	bne.n	1b11a <cosem_setIP4Setup+0x206>
    {
        object->useDHCP = value->boolVal;
   1b10e:	687b      	ldr	r3, [r7, #4]
   1b110:	7a1a      	ldrb	r2, [r3, #8]
   1b112:	68fb      	ldr	r3, [r7, #12]
   1b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1b118:	e018      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 9)
   1b11a:	7afb      	ldrb	r3, [r7, #11]
   1b11c:	2b09      	cmp	r3, #9
   1b11e:	d107      	bne.n	1b130 <cosem_setIP4Setup+0x21c>
    {
        object->primaryDNSAddress = var_toInteger(value);
   1b120:	6878      	ldr	r0, [r7, #4]
   1b122:	f00b fcd3 	bl	26acc <var_toInteger>
   1b126:	4603      	mov	r3, r0
   1b128:	461a      	mov	r2, r3
   1b12a:	68fb      	ldr	r3, [r7, #12]
   1b12c:	649a      	str	r2, [r3, #72]	; 0x48
   1b12e:	e00d      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else if (index == 10)
   1b130:	7afb      	ldrb	r3, [r7, #11]
   1b132:	2b0a      	cmp	r3, #10
   1b134:	d107      	bne.n	1b146 <cosem_setIP4Setup+0x232>
    {
        object->secondaryDNSAddress = var_toInteger(value);
   1b136:	6878      	ldr	r0, [r7, #4]
   1b138:	f00b fcc8 	bl	26acc <var_toInteger>
   1b13c:	4603      	mov	r3, r0
   1b13e:	461a      	mov	r2, r3
   1b140:	68fb      	ldr	r3, [r7, #12]
   1b142:	64da      	str	r2, [r3, #76]	; 0x4c
   1b144:	e002      	b.n	1b14c <cosem_setIP4Setup+0x238>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b146:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b14a:	e000      	b.n	1b14e <cosem_setIP4Setup+0x23a>
    }
    return DLMS_ERROR_CODE_OK;
   1b14c:	2300      	movs	r3, #0
}
   1b14e:	4618      	mov	r0, r3
   1b150:	3728      	adds	r7, #40	; 0x28
   1b152:	46bd      	mov	sp, r7
   1b154:	bdb0      	pop	{r4, r5, r7, pc}
   1b156:	bf00      	nop

0001b158 <cosem_setMbusSlavePortSetup>:
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
int cosem_setMbusSlavePortSetup(gxMbusSlavePortSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1b158:	b580      	push	{r7, lr}
   1b15a:	b084      	sub	sp, #16
   1b15c:	af00      	add	r7, sp, #0
   1b15e:	60f8      	str	r0, [r7, #12]
   1b160:	460b      	mov	r3, r1
   1b162:	607a      	str	r2, [r7, #4]
   1b164:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1b166:	7afb      	ldrb	r3, [r7, #11]
   1b168:	2b02      	cmp	r3, #2
   1b16a:	d107      	bne.n	1b17c <cosem_setMbusSlavePortSetup+0x24>
    {
        object->defaultBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   1b16c:	6878      	ldr	r0, [r7, #4]
   1b16e:	f00b fcad 	bl	26acc <var_toInteger>
   1b172:	4603      	mov	r3, r0
   1b174:	b2da      	uxtb	r2, r3
   1b176:	68fb      	ldr	r3, [r7, #12]
   1b178:	741a      	strb	r2, [r3, #16]
   1b17a:	e023      	b.n	1b1c4 <cosem_setMbusSlavePortSetup+0x6c>
    }
    else if (index == 3)
   1b17c:	7afb      	ldrb	r3, [r7, #11]
   1b17e:	2b03      	cmp	r3, #3
   1b180:	d107      	bne.n	1b192 <cosem_setMbusSlavePortSetup+0x3a>
    {
        object->availableBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   1b182:	6878      	ldr	r0, [r7, #4]
   1b184:	f00b fca2 	bl	26acc <var_toInteger>
   1b188:	4603      	mov	r3, r0
   1b18a:	b2da      	uxtb	r2, r3
   1b18c:	68fb      	ldr	r3, [r7, #12]
   1b18e:	745a      	strb	r2, [r3, #17]
   1b190:	e018      	b.n	1b1c4 <cosem_setMbusSlavePortSetup+0x6c>
    }
    else if (index == 4)
   1b192:	7afb      	ldrb	r3, [r7, #11]
   1b194:	2b04      	cmp	r3, #4
   1b196:	d107      	bne.n	1b1a8 <cosem_setMbusSlavePortSetup+0x50>
    {
        object->addressState = (DLMS_ADDRESS_STATE)var_toInteger(value);
   1b198:	6878      	ldr	r0, [r7, #4]
   1b19a:	f00b fc97 	bl	26acc <var_toInteger>
   1b19e:	4603      	mov	r3, r0
   1b1a0:	b2da      	uxtb	r2, r3
   1b1a2:	68fb      	ldr	r3, [r7, #12]
   1b1a4:	749a      	strb	r2, [r3, #18]
   1b1a6:	e00d      	b.n	1b1c4 <cosem_setMbusSlavePortSetup+0x6c>
    }
    else if (index == 5)
   1b1a8:	7afb      	ldrb	r3, [r7, #11]
   1b1aa:	2b05      	cmp	r3, #5
   1b1ac:	d107      	bne.n	1b1be <cosem_setMbusSlavePortSetup+0x66>
    {
        object->busAddress = (unsigned char)var_toInteger(value);
   1b1ae:	6878      	ldr	r0, [r7, #4]
   1b1b0:	f00b fc8c 	bl	26acc <var_toInteger>
   1b1b4:	4603      	mov	r3, r0
   1b1b6:	b2da      	uxtb	r2, r3
   1b1b8:	68fb      	ldr	r3, [r7, #12]
   1b1ba:	74da      	strb	r2, [r3, #19]
   1b1bc:	e002      	b.n	1b1c4 <cosem_setMbusSlavePortSetup+0x6c>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b1be:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b1c2:	e000      	b.n	1b1c6 <cosem_setMbusSlavePortSetup+0x6e>
    }
    return DLMS_ERROR_CODE_OK;
   1b1c4:	2300      	movs	r3, #0
}
   1b1c6:	4618      	mov	r0, r3
   1b1c8:	3710      	adds	r7, #16
   1b1ca:	46bd      	mov	sp, r7
   1b1cc:	bd80      	pop	{r7, pc}
   1b1ce:	bf00      	nop

0001b1d0 <cosem_setDisconnectControl>:
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_DISCONNECT_CONTROL
int cosem_setDisconnectControl(gxDisconnectControl* object, unsigned char index, dlmsVARIANT *value)
{
   1b1d0:	b580      	push	{r7, lr}
   1b1d2:	b084      	sub	sp, #16
   1b1d4:	af00      	add	r7, sp, #0
   1b1d6:	60f8      	str	r0, [r7, #12]
   1b1d8:	460b      	mov	r3, r1
   1b1da:	607a      	str	r2, [r7, #4]
   1b1dc:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1b1de:	7afb      	ldrb	r3, [r7, #11]
   1b1e0:	2b02      	cmp	r3, #2
   1b1e2:	d104      	bne.n	1b1ee <cosem_setDisconnectControl+0x1e>
    {
        object->outputState = value->boolVal;
   1b1e4:	687b      	ldr	r3, [r7, #4]
   1b1e6:	7a1a      	ldrb	r2, [r3, #8]
   1b1e8:	68fb      	ldr	r3, [r7, #12]
   1b1ea:	741a      	strb	r2, [r3, #16]
   1b1ec:	e018      	b.n	1b220 <cosem_setDisconnectControl+0x50>
    }
    else if (index == 3)
   1b1ee:	7afb      	ldrb	r3, [r7, #11]
   1b1f0:	2b03      	cmp	r3, #3
   1b1f2:	d107      	bne.n	1b204 <cosem_setDisconnectControl+0x34>
    {
        object->controlState = (DLMS_CONTROL_STATE)var_toInteger(value);
   1b1f4:	6878      	ldr	r0, [r7, #4]
   1b1f6:	f00b fc69 	bl	26acc <var_toInteger>
   1b1fa:	4603      	mov	r3, r0
   1b1fc:	b2da      	uxtb	r2, r3
   1b1fe:	68fb      	ldr	r3, [r7, #12]
   1b200:	745a      	strb	r2, [r3, #17]
   1b202:	e00d      	b.n	1b220 <cosem_setDisconnectControl+0x50>
    }
    else if (index == 4)
   1b204:	7afb      	ldrb	r3, [r7, #11]
   1b206:	2b04      	cmp	r3, #4
   1b208:	d107      	bne.n	1b21a <cosem_setDisconnectControl+0x4a>
    {
        object->controlMode = (DLMS_CONTROL_MODE)var_toInteger(value);
   1b20a:	6878      	ldr	r0, [r7, #4]
   1b20c:	f00b fc5e 	bl	26acc <var_toInteger>
   1b210:	4603      	mov	r3, r0
   1b212:	b2da      	uxtb	r2, r3
   1b214:	68fb      	ldr	r3, [r7, #12]
   1b216:	749a      	strb	r2, [r3, #18]
   1b218:	e002      	b.n	1b220 <cosem_setDisconnectControl+0x50>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b21a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b21e:	e000      	b.n	1b222 <cosem_setDisconnectControl+0x52>
    }
    return DLMS_ERROR_CODE_OK;
   1b220:	2300      	movs	r3, #0
}
   1b222:	4618      	mov	r0, r3
   1b224:	3710      	adds	r7, #16
   1b226:	46bd      	mov	sp, r7
   1b228:	bd80      	pop	{r7, pc}
   1b22a:	bf00      	nop

0001b22c <cosem_setLimiter>:
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
int cosem_setLimiter(dlmsSettings* settings, gxLimiter* object, unsigned char index, dlmsVARIANT *value)
{
   1b22c:	b580      	push	{r7, lr}
   1b22e:	b08e      	sub	sp, #56	; 0x38
   1b230:	af00      	add	r7, sp, #0
   1b232:	60f8      	str	r0, [r7, #12]
   1b234:	60b9      	str	r1, [r7, #8]
   1b236:	603b      	str	r3, [r7, #0]
   1b238:	4613      	mov	r3, r2
   1b23a:	71fb      	strb	r3, [r7, #7]
    DLMS_OBJECT_TYPE ot;
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    dlmsVARIANT tmp2;
    if (index == 2)
   1b23c:	79fb      	ldrb	r3, [r7, #7]
   1b23e:	2b02      	cmp	r3, #2
   1b240:	d14a      	bne.n	1b2d8 <cosem_setLimiter+0xac>
    {
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   1b242:	683b      	ldr	r3, [r7, #0]
   1b244:	781b      	ldrb	r3, [r3, #0]
   1b246:	2b02      	cmp	r3, #2
   1b248:	d002      	beq.n	1b250 <cosem_setLimiter+0x24>
        {
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
            assert(0);
#endif
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b24a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b24e:	e1a5      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        ret = va_get(value->Arr, &tmp);
   1b250:	683b      	ldr	r3, [r7, #0]
   1b252:	689b      	ldr	r3, [r3, #8]
   1b254:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b258:	4611      	mov	r1, r2
   1b25a:	4618      	mov	r0, r3
   1b25c:	f00b fde0 	bl	26e20 <va_get>
   1b260:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b264:	2b00      	cmp	r3, #0
   1b266:	d001      	beq.n	1b26c <cosem_setLimiter+0x40>
        {
            return ret;
   1b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b26a:	e197      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b26e:	4618      	mov	r0, r3
   1b270:	f00b fc2c 	bl	26acc <var_toInteger>
   1b274:	4603      	mov	r3, r0
   1b276:	85fb      	strh	r3, [r7, #46]	; 0x2e
        //Get LN.
        ret = va_get(value->Arr, &tmp3);
   1b278:	683b      	ldr	r3, [r7, #0]
   1b27a:	689b      	ldr	r3, [r3, #8]
   1b27c:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1b280:	4611      	mov	r1, r2
   1b282:	4618      	mov	r0, r3
   1b284:	f00b fdcc 	bl	26e20 <va_get>
   1b288:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b28c:	2b00      	cmp	r3, #0
   1b28e:	d001      	beq.n	1b294 <cosem_setLimiter+0x68>
        {
            return ret;
   1b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b292:	e183      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        //Get attribute index.
        ret = va_get(value->Arr, &tmp);
   1b294:	683b      	ldr	r3, [r7, #0]
   1b296:	689b      	ldr	r3, [r3, #8]
   1b298:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b29c:	4611      	mov	r1, r2
   1b29e:	4618      	mov	r0, r3
   1b2a0:	f00b fdbe 	bl	26e20 <va_get>
   1b2a4:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b2a8:	2b00      	cmp	r3, #0
   1b2aa:	d001      	beq.n	1b2b0 <cosem_setLimiter+0x84>
        {
            return ret;
   1b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b2ae:	e175      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   1b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2b2:	4618      	mov	r0, r3
   1b2b4:	f00b fc0a 	bl	26acc <var_toInteger>
   1b2b8:	4603      	mov	r3, r0
   1b2ba:	b2da      	uxtb	r2, r3
   1b2bc:	68bb      	ldr	r3, [r7, #8]
   1b2be:	751a      	strb	r2, [r3, #20]
        oa_findByLN(&settings->objects, ot, tmp3->byteArr->data, &object->monitoredValue);
   1b2c0:	68fb      	ldr	r3, [r7, #12]
   1b2c2:	f103 0074 	add.w	r0, r3, #116	; 0x74
   1b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2c8:	689b      	ldr	r3, [r3, #8]
   1b2ca:	681a      	ldr	r2, [r3, #0]
   1b2cc:	68bb      	ldr	r3, [r7, #8]
   1b2ce:	3310      	adds	r3, #16
   1b2d0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
   1b2d2:	f007 f809 	bl	222e8 <oa_findByLN>
   1b2d6:	e160      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 3)
   1b2d8:	79fb      	ldrb	r3, [r7, #7]
   1b2da:	2b03      	cmp	r3, #3
   1b2dc:	d107      	bne.n	1b2ee <cosem_setLimiter+0xc2>
    {
        ret = var_copy(&object->thresholdActive, value);
   1b2de:	68bb      	ldr	r3, [r7, #8]
   1b2e0:	3318      	adds	r3, #24
   1b2e2:	6839      	ldr	r1, [r7, #0]
   1b2e4:	4618      	mov	r0, r3
   1b2e6:	f00c fd45 	bl	27d74 <var_copy>
   1b2ea:	6338      	str	r0, [r7, #48]	; 0x30
   1b2ec:	e155      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 4)
   1b2ee:	79fb      	ldrb	r3, [r7, #7]
   1b2f0:	2b04      	cmp	r3, #4
   1b2f2:	d107      	bne.n	1b304 <cosem_setLimiter+0xd8>
    {
        ret = var_copy(&object->thresholdNormal, value);
   1b2f4:	68bb      	ldr	r3, [r7, #8]
   1b2f6:	3328      	adds	r3, #40	; 0x28
   1b2f8:	6839      	ldr	r1, [r7, #0]
   1b2fa:	4618      	mov	r0, r3
   1b2fc:	f00c fd3a 	bl	27d74 <var_copy>
   1b300:	6338      	str	r0, [r7, #48]	; 0x30
   1b302:	e14a      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 5)
   1b304:	79fb      	ldrb	r3, [r7, #7]
   1b306:	2b05      	cmp	r3, #5
   1b308:	d107      	bne.n	1b31a <cosem_setLimiter+0xee>
    {
        ret = var_copy(&object->thresholdEmergency, value);
   1b30a:	68bb      	ldr	r3, [r7, #8]
   1b30c:	3338      	adds	r3, #56	; 0x38
   1b30e:	6839      	ldr	r1, [r7, #0]
   1b310:	4618      	mov	r0, r3
   1b312:	f00c fd2f 	bl	27d74 <var_copy>
   1b316:	6338      	str	r0, [r7, #48]	; 0x30
   1b318:	e13f      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 6)
   1b31a:	79fb      	ldrb	r3, [r7, #7]
   1b31c:	2b06      	cmp	r3, #6
   1b31e:	d106      	bne.n	1b32e <cosem_setLimiter+0x102>
    {
        object->minOverThresholdDuration = var_toInteger(value);
   1b320:	6838      	ldr	r0, [r7, #0]
   1b322:	f00b fbd3 	bl	26acc <var_toInteger>
   1b326:	4602      	mov	r2, r0
   1b328:	68bb      	ldr	r3, [r7, #8]
   1b32a:	649a      	str	r2, [r3, #72]	; 0x48
   1b32c:	e135      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 7)
   1b32e:	79fb      	ldrb	r3, [r7, #7]
   1b330:	2b07      	cmp	r3, #7
   1b332:	d106      	bne.n	1b342 <cosem_setLimiter+0x116>
    {
        object->minUnderThresholdDuration = var_toInteger(value);
   1b334:	6838      	ldr	r0, [r7, #0]
   1b336:	f00b fbc9 	bl	26acc <var_toInteger>
   1b33a:	4602      	mov	r2, r0
   1b33c:	68bb      	ldr	r3, [r7, #8]
   1b33e:	64da      	str	r2, [r3, #76]	; 0x4c
   1b340:	e12b      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 8)
   1b342:	79fb      	ldrb	r3, [r7, #7]
   1b344:	2b08      	cmp	r3, #8
   1b346:	d159      	bne.n	1b3fc <cosem_setLimiter+0x1d0>
    {
        ret = va_get(value->Arr, &tmp);
   1b348:	683b      	ldr	r3, [r7, #0]
   1b34a:	689b      	ldr	r3, [r3, #8]
   1b34c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b350:	4611      	mov	r1, r2
   1b352:	4618      	mov	r0, r3
   1b354:	f00b fd64 	bl	26e20 <va_get>
   1b358:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b35c:	2b00      	cmp	r3, #0
   1b35e:	d001      	beq.n	1b364 <cosem_setLimiter+0x138>
        {
            return ret;
   1b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b362:	e11b      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        object->emergencyProfile.id = (unsigned short)var_toInteger(tmp);
   1b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b366:	4618      	mov	r0, r3
   1b368:	f00b fbb0 	bl	26acc <var_toInteger>
   1b36c:	4603      	mov	r3, r0
   1b36e:	b29a      	uxth	r2, r3
   1b370:	68bb      	ldr	r3, [r7, #8]
   1b372:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        ret = va_get(value->Arr, &tmp);
   1b376:	683b      	ldr	r3, [r7, #0]
   1b378:	689b      	ldr	r3, [r3, #8]
   1b37a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b37e:	4611      	mov	r1, r2
   1b380:	4618      	mov	r0, r3
   1b382:	f00b fd4d 	bl	26e20 <va_get>
   1b386:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b38a:	2b00      	cmp	r3, #0
   1b38c:	d001      	beq.n	1b392 <cosem_setLimiter+0x166>
        {
            return ret;
   1b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b390:	e104      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        var_init(&tmp2);
   1b392:	f107 0310 	add.w	r3, r7, #16
   1b396:	4618      	mov	r0, r3
   1b398:	f00a fec6 	bl	26128 <var_init>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b39e:	f107 0210 	add.w	r2, r7, #16
   1b3a2:	2119      	movs	r1, #25
   1b3a4:	4618      	mov	r0, r3
   1b3a6:	f7ee fa31 	bl	980c <dlms_changeType2>
   1b3aa:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b3ae:	2b00      	cmp	r3, #0
   1b3b0:	d001      	beq.n	1b3b6 <cosem_setLimiter+0x18a>
        {
            return ret;
   1b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b3b4:	e0f2      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        time_copy(&object->emergencyProfile.activationTime, tmp2.dateTime);
   1b3b6:	68bb      	ldr	r3, [r7, #8]
   1b3b8:	3354      	adds	r3, #84	; 0x54
   1b3ba:	69ba      	ldr	r2, [r7, #24]
   1b3bc:	4611      	mov	r1, r2
   1b3be:	4618      	mov	r0, r3
   1b3c0:	f7eb fac8 	bl	6954 <time_copy>
        var_clear(&tmp2);
   1b3c4:	f107 0310 	add.w	r3, r7, #16
   1b3c8:	4618      	mov	r0, r3
   1b3ca:	f00a febd 	bl	26148 <var_clear>
        ret = va_get(value->Arr, &tmp);
   1b3ce:	683b      	ldr	r3, [r7, #0]
   1b3d0:	689b      	ldr	r3, [r3, #8]
   1b3d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b3d6:	4611      	mov	r1, r2
   1b3d8:	4618      	mov	r0, r3
   1b3da:	f00b fd21 	bl	26e20 <va_get>
   1b3de:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d001      	beq.n	1b3ea <cosem_setLimiter+0x1be>
        {
            return ret;
   1b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b3e8:	e0d8      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        object->emergencyProfile.duration = var_toInteger(tmp);
   1b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3ec:	4618      	mov	r0, r3
   1b3ee:	f00b fb6d 	bl	26acc <var_toInteger>
   1b3f2:	4602      	mov	r2, r0
   1b3f4:	68bb      	ldr	r3, [r7, #8]
   1b3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1b3fa:	e0ce      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 9)
   1b3fc:	79fb      	ldrb	r3, [r7, #7]
   1b3fe:	2b09      	cmp	r3, #9
   1b400:	d141      	bne.n	1b486 <cosem_setLimiter+0x25a>
    {
        va_clear(&object->emergencyProfileGroupIDs);
   1b402:	68bb      	ldr	r3, [r7, #8]
   1b404:	3388      	adds	r3, #136	; 0x88
   1b406:	4618      	mov	r0, r3
   1b408:	f00b fc9c 	bl	26d44 <va_clear>
        if (value->Arr != NULL)
   1b40c:	683b      	ldr	r3, [r7, #0]
   1b40e:	689b      	ldr	r3, [r3, #8]
   1b410:	2b00      	cmp	r3, #0
   1b412:	f000 80c2 	beq.w	1b59a <cosem_setLimiter+0x36e>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b416:	2300      	movs	r3, #0
   1b418:	637b      	str	r3, [r7, #52]	; 0x34
   1b41a:	e02c      	b.n	1b476 <cosem_setLimiter+0x24a>
            {
                ret = va_get(value->Arr, &tmp);
   1b41c:	683b      	ldr	r3, [r7, #0]
   1b41e:	689b      	ldr	r3, [r3, #8]
   1b420:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b424:	4611      	mov	r1, r2
   1b426:	4618      	mov	r0, r3
   1b428:	f00b fcfa 	bl	26e20 <va_get>
   1b42c:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b430:	2b00      	cmp	r3, #0
   1b432:	d001      	beq.n	1b438 <cosem_setLimiter+0x20c>
                {
                    return ret;
   1b434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b436:	e0b1      	b.n	1b59c <cosem_setLimiter+0x370>
                }
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1b438:	2010      	movs	r0, #16
   1b43a:	f00e fb03 	bl	29a44 <malloc>
   1b43e:	4603      	mov	r3, r0
   1b440:	627b      	str	r3, [r7, #36]	; 0x24
                var_init(tmp3);
   1b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b444:	4618      	mov	r0, r3
   1b446:	f00a fe6f 	bl	26128 <var_init>
                ret = var_copy(tmp3, tmp);
   1b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b44c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b44e:	4611      	mov	r1, r2
   1b450:	4618      	mov	r0, r3
   1b452:	f00c fc8f 	bl	27d74 <var_copy>
   1b456:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d001      	beq.n	1b462 <cosem_setLimiter+0x236>
                {
                    return ret;
   1b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b460:	e09c      	b.n	1b59c <cosem_setLimiter+0x370>
                }
                va_push(&object->emergencyProfileGroupIDs, tmp3);
   1b462:	68bb      	ldr	r3, [r7, #8]
   1b464:	3388      	adds	r3, #136	; 0x88
   1b466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b468:	4611      	mov	r1, r2
   1b46a:	4618      	mov	r0, r3
   1b46c:	f00b fc16 	bl	26c9c <va_push>
    else if (index == 9)
    {
        va_clear(&object->emergencyProfileGroupIDs);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b472:	3301      	adds	r3, #1
   1b474:	637b      	str	r3, [r7, #52]	; 0x34
   1b476:	683b      	ldr	r3, [r7, #0]
   1b478:	689b      	ldr	r3, [r3, #8]
   1b47a:	88db      	ldrh	r3, [r3, #6]
   1b47c:	461a      	mov	r2, r3
   1b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b480:	429a      	cmp	r2, r3
   1b482:	d1cb      	bne.n	1b41c <cosem_setLimiter+0x1f0>
   1b484:	e089      	b.n	1b59a <cosem_setLimiter+0x36e>
                }
                va_push(&object->emergencyProfileGroupIDs, tmp3);
            }
        }
    }
    else if (index == 10)
   1b486:	79fb      	ldrb	r3, [r7, #7]
   1b488:	2b0a      	cmp	r3, #10
   1b48a:	d105      	bne.n	1b498 <cosem_setLimiter+0x26c>
    {
        object->emergencyProfileActive = value->boolVal;
   1b48c:	683b      	ldr	r3, [r7, #0]
   1b48e:	7a1a      	ldrb	r2, [r3, #8]
   1b490:	68bb      	ldr	r3, [r7, #8]
   1b492:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1b496:	e080      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else if (index == 11)
   1b498:	79fb      	ldrb	r3, [r7, #7]
   1b49a:	2b0b      	cmp	r3, #11
   1b49c:	d17a      	bne.n	1b594 <cosem_setLimiter+0x368>
    {
        ret = va_get(value->Arr, &tmp);
   1b49e:	683b      	ldr	r3, [r7, #0]
   1b4a0:	689b      	ldr	r3, [r3, #8]
   1b4a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b4a6:	4611      	mov	r1, r2
   1b4a8:	4618      	mov	r0, r3
   1b4aa:	f00b fcb9 	bl	26e20 <va_get>
   1b4ae:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4b2:	2b00      	cmp	r3, #0
   1b4b4:	d001      	beq.n	1b4ba <cosem_setLimiter+0x28e>
        {
            return ret;
   1b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4b8:	e070      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        ret = va_get(tmp->Arr, &tmp3);
   1b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b4bc:	689b      	ldr	r3, [r3, #8]
   1b4be:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1b4c2:	4611      	mov	r1, r2
   1b4c4:	4618      	mov	r0, r3
   1b4c6:	f00b fcab 	bl	26e20 <va_get>
   1b4ca:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4ce:	2b00      	cmp	r3, #0
   1b4d0:	d001      	beq.n	1b4d6 <cosem_setLimiter+0x2aa>
        {
            return ret;
   1b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4d4:	e062      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        memcpy(object->actionOverThreshold.logicalName, tmp3->byteArr->data, 6);
   1b4d6:	68bb      	ldr	r3, [r7, #8]
   1b4d8:	f103 0096 	add.w	r0, r3, #150	; 0x96
   1b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b4de:	689b      	ldr	r3, [r3, #8]
   1b4e0:	681b      	ldr	r3, [r3, #0]
   1b4e2:	2206      	movs	r2, #6
   1b4e4:	4619      	mov	r1, r3
   1b4e6:	f00e facc 	bl	29a82 <memcpy>
        ret = va_get(tmp->Arr, &tmp3);
   1b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b4ec:	689b      	ldr	r3, [r3, #8]
   1b4ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1b4f2:	4611      	mov	r1, r2
   1b4f4:	4618      	mov	r0, r3
   1b4f6:	f00b fc93 	bl	26e20 <va_get>
   1b4fa:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4fe:	2b00      	cmp	r3, #0
   1b500:	d001      	beq.n	1b506 <cosem_setLimiter+0x2da>
        {
            return ret;
   1b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b504:	e04a      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        object->actionOverThreshold.scriptSelector = (unsigned short)var_toInteger(tmp3);
   1b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b508:	4618      	mov	r0, r3
   1b50a:	f00b fadf 	bl	26acc <var_toInteger>
   1b50e:	4603      	mov	r3, r0
   1b510:	b29a      	uxth	r2, r3
   1b512:	68bb      	ldr	r3, [r7, #8]
   1b514:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

        ret = va_get(value->Arr, &tmp);
   1b518:	683b      	ldr	r3, [r7, #0]
   1b51a:	689b      	ldr	r3, [r3, #8]
   1b51c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b520:	4611      	mov	r1, r2
   1b522:	4618      	mov	r0, r3
   1b524:	f00b fc7c 	bl	26e20 <va_get>
   1b528:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	d001      	beq.n	1b534 <cosem_setLimiter+0x308>
        {
            return ret;
   1b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b532:	e033      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        ret = va_get(tmp->Arr, &tmp3);
   1b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b536:	689b      	ldr	r3, [r3, #8]
   1b538:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1b53c:	4611      	mov	r1, r2
   1b53e:	4618      	mov	r0, r3
   1b540:	f00b fc6e 	bl	26e20 <va_get>
   1b544:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b548:	2b00      	cmp	r3, #0
   1b54a:	d001      	beq.n	1b550 <cosem_setLimiter+0x324>
        {
            return ret;
   1b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b54e:	e025      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        memcpy(object->actionUnderThreshold.logicalName, tmp3->byteArr->data, 6);
   1b550:	68bb      	ldr	r3, [r7, #8]
   1b552:	f103 009e 	add.w	r0, r3, #158	; 0x9e
   1b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b558:	689b      	ldr	r3, [r3, #8]
   1b55a:	681b      	ldr	r3, [r3, #0]
   1b55c:	2206      	movs	r2, #6
   1b55e:	4619      	mov	r1, r3
   1b560:	f00e fa8f 	bl	29a82 <memcpy>
        ret = va_get(tmp->Arr, &tmp3);
   1b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b566:	689b      	ldr	r3, [r3, #8]
   1b568:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1b56c:	4611      	mov	r1, r2
   1b56e:	4618      	mov	r0, r3
   1b570:	f00b fc56 	bl	26e20 <va_get>
   1b574:	6338      	str	r0, [r7, #48]	; 0x30
        if (ret != DLMS_ERROR_CODE_OK)
   1b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b578:	2b00      	cmp	r3, #0
   1b57a:	d001      	beq.n	1b580 <cosem_setLimiter+0x354>
        {
            return ret;
   1b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b57e:	e00d      	b.n	1b59c <cosem_setLimiter+0x370>
        }
        object->actionUnderThreshold.scriptSelector = (unsigned short)var_toInteger(tmp3);
   1b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b582:	4618      	mov	r0, r3
   1b584:	f00b faa2 	bl	26acc <var_toInteger>
   1b588:	4603      	mov	r3, r0
   1b58a:	b29a      	uxth	r2, r3
   1b58c:	68bb      	ldr	r3, [r7, #8]
   1b58e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   1b592:	e002      	b.n	1b59a <cosem_setLimiter+0x36e>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b594:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b598:	e000      	b.n	1b59c <cosem_setLimiter+0x370>
    }
    return DLMS_ERROR_CODE_OK;
   1b59a:	2300      	movs	r3, #0
}
   1b59c:	4618      	mov	r0, r3
   1b59e:	3738      	adds	r7, #56	; 0x38
   1b5a0:	46bd      	mov	sp, r7
   1b5a2:	bd80      	pop	{r7, pc}

0001b5a4 <cosem_setmMbusClient>:
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
int cosem_setmMbusClient(gxMBusClient* object, unsigned char index, dlmsVARIANT *value)
{
   1b5a4:	b5b0      	push	{r4, r5, r7, lr}
   1b5a6:	b08a      	sub	sp, #40	; 0x28
   1b5a8:	af00      	add	r7, sp, #0
   1b5aa:	60f8      	str	r0, [r7, #12]
   1b5ac:	460b      	mov	r3, r1
   1b5ae:	607a      	str	r2, [r7, #4]
   1b5b0:	72fb      	strb	r3, [r7, #11]
    int ret = DLMS_ERROR_CODE_OK, pos;
   1b5b2:	2300      	movs	r3, #0
   1b5b4:	623b      	str	r3, [r7, #32]
    dlmsVARIANT *tmp, *tmp3;
    gxByteBuffer *start, *end;
    if (index == 2)
   1b5b6:	7afb      	ldrb	r3, [r7, #11]
   1b5b8:	2b02      	cmp	r3, #2
   1b5ba:	d115      	bne.n	1b5e8 <cosem_setmMbusClient+0x44>
    {
        bb_clear(&object->mBusPortReference);
   1b5bc:	68fb      	ldr	r3, [r7, #12]
   1b5be:	3318      	adds	r3, #24
   1b5c0:	4618      	mov	r0, r3
   1b5c2:	f7e8 f8cf 	bl	3764 <bb_clear>
        bb_set2(&object->mBusPortReference, value->byteArr, 0, bb_size(value->byteArr));
   1b5c6:	68fb      	ldr	r3, [r7, #12]
   1b5c8:	f103 0418 	add.w	r4, r3, #24
   1b5cc:	687b      	ldr	r3, [r7, #4]
   1b5ce:	689d      	ldr	r5, [r3, #8]
   1b5d0:	687b      	ldr	r3, [r7, #4]
   1b5d2:	689b      	ldr	r3, [r3, #8]
   1b5d4:	4618      	mov	r0, r3
   1b5d6:	f7e7 fb77 	bl	2cc8 <bb_size>
   1b5da:	4603      	mov	r3, r0
   1b5dc:	2200      	movs	r2, #0
   1b5de:	4629      	mov	r1, r5
   1b5e0:	4620      	mov	r0, r4
   1b5e2:	f7e8 f81d 	bl	3620 <bb_set2>
   1b5e6:	e0e5      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 3)
   1b5e8:	7afb      	ldrb	r3, [r7, #11]
   1b5ea:	2b03      	cmp	r3, #3
   1b5ec:	d177      	bne.n	1b6de <cosem_setmMbusClient+0x13a>
    {
        arr_clearKeyValuePair(&object->captureDefinition);
   1b5ee:	68fb      	ldr	r3, [r7, #12]
   1b5f0:	3324      	adds	r3, #36	; 0x24
   1b5f2:	4618      	mov	r0, r3
   1b5f4:	f7f1 f920 	bl	c838 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1b5f8:	687b      	ldr	r3, [r7, #4]
   1b5fa:	689b      	ldr	r3, [r3, #8]
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	f000 80d9 	beq.w	1b7b4 <cosem_setmMbusClient+0x210>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b602:	2300      	movs	r3, #0
   1b604:	627b      	str	r3, [r7, #36]	; 0x24
   1b606:	e062      	b.n	1b6ce <cosem_setmMbusClient+0x12a>
            {
                ret = va_get(value->Arr, &tmp);
   1b608:	687b      	ldr	r3, [r7, #4]
   1b60a:	689b      	ldr	r3, [r3, #8]
   1b60c:	f107 0214 	add.w	r2, r7, #20
   1b610:	4611      	mov	r1, r2
   1b612:	4618      	mov	r0, r3
   1b614:	f00b fc04 	bl	26e20 <va_get>
   1b618:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b61a:	6a3b      	ldr	r3, [r7, #32]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d001      	beq.n	1b624 <cosem_setmMbusClient+0x80>
                {
                    return ret;
   1b620:	6a3b      	ldr	r3, [r7, #32]
   1b622:	e0c8      	b.n	1b7b6 <cosem_setmMbusClient+0x212>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1b624:	697b      	ldr	r3, [r7, #20]
   1b626:	689b      	ldr	r3, [r3, #8]
   1b628:	f107 0210 	add.w	r2, r7, #16
   1b62c:	4611      	mov	r1, r2
   1b62e:	4618      	mov	r0, r3
   1b630:	f00b fbf6 	bl	26e20 <va_get>
   1b634:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b636:	6a3b      	ldr	r3, [r7, #32]
   1b638:	2b00      	cmp	r3, #0
   1b63a:	d001      	beq.n	1b640 <cosem_setmMbusClient+0x9c>
                {
                    return ret;
   1b63c:	6a3b      	ldr	r3, [r7, #32]
   1b63e:	e0ba      	b.n	1b7b6 <cosem_setmMbusClient+0x212>
                }
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1b640:	200c      	movs	r0, #12
   1b642:	f00e f9ff 	bl	29a44 <malloc>
   1b646:	4603      	mov	r3, r0
   1b648:	61fb      	str	r3, [r7, #28]
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1b64a:	200c      	movs	r0, #12
   1b64c:	f00e f9fa 	bl	29a44 <malloc>
   1b650:	4603      	mov	r3, r0
   1b652:	61bb      	str	r3, [r7, #24]
                bb_init(start);
   1b654:	69f8      	ldr	r0, [r7, #28]
   1b656:	f7e7 fb47 	bl	2ce8 <bb_init>
                bb_init(end);
   1b65a:	69b8      	ldr	r0, [r7, #24]
   1b65c:	f7e7 fb44 	bl	2ce8 <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   1b660:	693b      	ldr	r3, [r7, #16]
   1b662:	689b      	ldr	r3, [r3, #8]
   1b664:	6819      	ldr	r1, [r3, #0]
   1b666:	693b      	ldr	r3, [r7, #16]
   1b668:	689b      	ldr	r3, [r3, #8]
   1b66a:	88db      	ldrh	r3, [r3, #6]
   1b66c:	461a      	mov	r2, r3
   1b66e:	69f8      	ldr	r0, [r7, #28]
   1b670:	f7e7 ff76 	bl	3560 <bb_set>
                ret = va_get(tmp->Arr, &tmp3);
   1b674:	697b      	ldr	r3, [r7, #20]
   1b676:	689b      	ldr	r3, [r3, #8]
   1b678:	f107 0210 	add.w	r2, r7, #16
   1b67c:	4611      	mov	r1, r2
   1b67e:	4618      	mov	r0, r3
   1b680:	f00b fbce 	bl	26e20 <va_get>
   1b684:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b686:	6a3b      	ldr	r3, [r7, #32]
   1b688:	2b00      	cmp	r3, #0
   1b68a:	d007      	beq.n	1b69c <cosem_setmMbusClient+0xf8>
                {
                    gxfree(start);
   1b68c:	69f8      	ldr	r0, [r7, #28]
   1b68e:	f00e f9e1 	bl	29a54 <free>
                    gxfree(end);
   1b692:	69b8      	ldr	r0, [r7, #24]
   1b694:	f00e f9de 	bl	29a54 <free>
                    return ret;
   1b698:	6a3b      	ldr	r3, [r7, #32]
   1b69a:	e08c      	b.n	1b7b6 <cosem_setmMbusClient+0x212>
                }
                bb_set(end, tmp3->byteArr->data, tmp3->byteArr->size);
   1b69c:	693b      	ldr	r3, [r7, #16]
   1b69e:	689b      	ldr	r3, [r3, #8]
   1b6a0:	6819      	ldr	r1, [r3, #0]
   1b6a2:	693b      	ldr	r3, [r7, #16]
   1b6a4:	689b      	ldr	r3, [r3, #8]
   1b6a6:	88db      	ldrh	r3, [r3, #6]
   1b6a8:	461a      	mov	r2, r3
   1b6aa:	69b8      	ldr	r0, [r7, #24]
   1b6ac:	f7e7 ff58 	bl	3560 <bb_set>
                arr_push(&object->captureDefinition, key_init(start, end));
   1b6b0:	68fb      	ldr	r3, [r7, #12]
   1b6b2:	f103 0424 	add.w	r4, r3, #36	; 0x24
   1b6b6:	69b9      	ldr	r1, [r7, #24]
   1b6b8:	69f8      	ldr	r0, [r7, #28]
   1b6ba:	f7fa fc2f 	bl	15f1c <key_init>
   1b6be:	4603      	mov	r3, r0
   1b6c0:	4619      	mov	r1, r3
   1b6c2:	4620      	mov	r0, r4
   1b6c4:	f7f0 ffdc 	bl	c680 <arr_push>
    else if (index == 3)
    {
        arr_clearKeyValuePair(&object->captureDefinition);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b6ca:	3301      	adds	r3, #1
   1b6cc:	627b      	str	r3, [r7, #36]	; 0x24
   1b6ce:	687b      	ldr	r3, [r7, #4]
   1b6d0:	689b      	ldr	r3, [r3, #8]
   1b6d2:	88db      	ldrh	r3, [r3, #6]
   1b6d4:	461a      	mov	r2, r3
   1b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b6d8:	429a      	cmp	r2, r3
   1b6da:	d195      	bne.n	1b608 <cosem_setmMbusClient+0x64>
   1b6dc:	e06a      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
                bb_set(end, tmp3->byteArr->data, tmp3->byteArr->size);
                arr_push(&object->captureDefinition, key_init(start, end));
            }
        }
    }
    else if (index == 4)
   1b6de:	7afb      	ldrb	r3, [r7, #11]
   1b6e0:	2b04      	cmp	r3, #4
   1b6e2:	d107      	bne.n	1b6f4 <cosem_setmMbusClient+0x150>
    {
        object->capturePeriod = var_toInteger(value);
   1b6e4:	6878      	ldr	r0, [r7, #4]
   1b6e6:	f00b f9f1 	bl	26acc <var_toInteger>
   1b6ea:	4603      	mov	r3, r0
   1b6ec:	461a      	mov	r2, r3
   1b6ee:	68fb      	ldr	r3, [r7, #12]
   1b6f0:	611a      	str	r2, [r3, #16]
   1b6f2:	e05f      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 5)
   1b6f4:	7afb      	ldrb	r3, [r7, #11]
   1b6f6:	2b05      	cmp	r3, #5
   1b6f8:	d107      	bne.n	1b70a <cosem_setmMbusClient+0x166>
    {
        object->primaryAddress = (unsigned char)var_toInteger(value);
   1b6fa:	6878      	ldr	r0, [r7, #4]
   1b6fc:	f00b f9e6 	bl	26acc <var_toInteger>
   1b700:	4603      	mov	r3, r0
   1b702:	b2da      	uxtb	r2, r3
   1b704:	68fb      	ldr	r3, [r7, #12]
   1b706:	751a      	strb	r2, [r3, #20]
   1b708:	e054      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 6)
   1b70a:	7afb      	ldrb	r3, [r7, #11]
   1b70c:	2b06      	cmp	r3, #6
   1b70e:	d107      	bne.n	1b720 <cosem_setmMbusClient+0x17c>
    {
        object->identificationNumber = var_toInteger(value);
   1b710:	6878      	ldr	r0, [r7, #4]
   1b712:	f00b f9db 	bl	26acc <var_toInteger>
   1b716:	4603      	mov	r3, r0
   1b718:	461a      	mov	r2, r3
   1b71a:	68fb      	ldr	r3, [r7, #12]
   1b71c:	635a      	str	r2, [r3, #52]	; 0x34
   1b71e:	e049      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 7)
   1b720:	7afb      	ldrb	r3, [r7, #11]
   1b722:	2b07      	cmp	r3, #7
   1b724:	d107      	bne.n	1b736 <cosem_setmMbusClient+0x192>
    {
        object->manufacturerID = (unsigned short)var_toInteger(value);
   1b726:	6878      	ldr	r0, [r7, #4]
   1b728:	f00b f9d0 	bl	26acc <var_toInteger>
   1b72c:	4603      	mov	r3, r0
   1b72e:	b29a      	uxth	r2, r3
   1b730:	68fb      	ldr	r3, [r7, #12]
   1b732:	871a      	strh	r2, [r3, #56]	; 0x38
   1b734:	e03e      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 8)
   1b736:	7afb      	ldrb	r3, [r7, #11]
   1b738:	2b08      	cmp	r3, #8
   1b73a:	d108      	bne.n	1b74e <cosem_setmMbusClient+0x1aa>
    {
        object->dataHeaderVersion = (unsigned char)var_toInteger(value);
   1b73c:	6878      	ldr	r0, [r7, #4]
   1b73e:	f00b f9c5 	bl	26acc <var_toInteger>
   1b742:	4603      	mov	r3, r0
   1b744:	b2da      	uxtb	r2, r3
   1b746:	68fb      	ldr	r3, [r7, #12]
   1b748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   1b74c:	e032      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 9)
   1b74e:	7afb      	ldrb	r3, [r7, #11]
   1b750:	2b09      	cmp	r3, #9
   1b752:	d108      	bne.n	1b766 <cosem_setmMbusClient+0x1c2>
    {
        object->deviceType = (unsigned char)var_toInteger(value);
   1b754:	6878      	ldr	r0, [r7, #4]
   1b756:	f00b f9b9 	bl	26acc <var_toInteger>
   1b75a:	4603      	mov	r3, r0
   1b75c:	b2da      	uxtb	r2, r3
   1b75e:	68fb      	ldr	r3, [r7, #12]
   1b760:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   1b764:	e026      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 10)
   1b766:	7afb      	ldrb	r3, [r7, #11]
   1b768:	2b0a      	cmp	r3, #10
   1b76a:	d108      	bne.n	1b77e <cosem_setmMbusClient+0x1da>
    {
        object->accessNumber = (unsigned char)var_toInteger(value);
   1b76c:	6878      	ldr	r0, [r7, #4]
   1b76e:	f00b f9ad 	bl	26acc <var_toInteger>
   1b772:	4603      	mov	r3, r0
   1b774:	b2da      	uxtb	r2, r3
   1b776:	68fb      	ldr	r3, [r7, #12]
   1b778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   1b77c:	e01a      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 11)
   1b77e:	7afb      	ldrb	r3, [r7, #11]
   1b780:	2b0b      	cmp	r3, #11
   1b782:	d108      	bne.n	1b796 <cosem_setmMbusClient+0x1f2>
    {
        object->status = (unsigned char)var_toInteger(value);
   1b784:	6878      	ldr	r0, [r7, #4]
   1b786:	f00b f9a1 	bl	26acc <var_toInteger>
   1b78a:	4603      	mov	r3, r0
   1b78c:	b2da      	uxtb	r2, r3
   1b78e:	68fb      	ldr	r3, [r7, #12]
   1b790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   1b794:	e00e      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else if (index == 12)
   1b796:	7afb      	ldrb	r3, [r7, #11]
   1b798:	2b0c      	cmp	r3, #12
   1b79a:	d108      	bne.n	1b7ae <cosem_setmMbusClient+0x20a>
    {
        object->alarm = (unsigned char)var_toInteger(value);
   1b79c:	6878      	ldr	r0, [r7, #4]
   1b79e:	f00b f995 	bl	26acc <var_toInteger>
   1b7a2:	4603      	mov	r3, r0
   1b7a4:	b2da      	uxtb	r2, r3
   1b7a6:	68fb      	ldr	r3, [r7, #12]
   1b7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   1b7ac:	e002      	b.n	1b7b4 <cosem_setmMbusClient+0x210>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b7ae:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b7b2:	e000      	b.n	1b7b6 <cosem_setmMbusClient+0x212>
    }
    return DLMS_ERROR_CODE_OK;
   1b7b4:	2300      	movs	r3, #0
}
   1b7b6:	4618      	mov	r0, r3
   1b7b8:	3728      	adds	r7, #40	; 0x28
   1b7ba:	46bd      	mov	sp, r7
   1b7bc:	bdb0      	pop	{r4, r5, r7, pc}
   1b7be:	bf00      	nop

0001b7c0 <cosem_setModemConfiguration>:
#endif //DLMS_IGNORE_MBUS_CLIENT
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int cosem_setModemConfiguration(gxModemConfiguration* object, unsigned char index, dlmsVARIANT *value)
{
   1b7c0:	b590      	push	{r4, r7, lr}
   1b7c2:	b08b      	sub	sp, #44	; 0x2c
   1b7c4:	af00      	add	r7, sp, #0
   1b7c6:	60f8      	str	r0, [r7, #12]
   1b7c8:	460b      	mov	r3, r1
   1b7ca:	607a      	str	r2, [r7, #4]
   1b7cc:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    gxModemInitialisation* modemInit;
    gxByteBuffer* str;

    if (index == 2)
   1b7ce:	7afb      	ldrb	r3, [r7, #11]
   1b7d0:	2b02      	cmp	r3, #2
   1b7d2:	d108      	bne.n	1b7e6 <cosem_setModemConfiguration+0x26>
    {
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1b7d4:	6878      	ldr	r0, [r7, #4]
   1b7d6:	f00b f979 	bl	26acc <var_toInteger>
   1b7da:	4603      	mov	r3, r0
   1b7dc:	b2da      	uxtb	r2, r3
   1b7de:	68fb      	ldr	r3, [r7, #12]
   1b7e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   1b7e4:	e0cc      	b.n	1b980 <cosem_setModemConfiguration+0x1c0>
    }
    else if (index == 3)
   1b7e6:	7afb      	ldrb	r3, [r7, #11]
   1b7e8:	2b03      	cmp	r3, #3
   1b7ea:	f040 8083 	bne.w	1b8f4 <cosem_setModemConfiguration+0x134>
    {
        obj_clearModemConfigurationInitialisationStrings(&object->initialisationStrings);
   1b7ee:	68fb      	ldr	r3, [r7, #12]
   1b7f0:	3310      	adds	r3, #16
   1b7f2:	4618      	mov	r0, r3
   1b7f4:	f7fb fc1a 	bl	1702c <obj_clearModemConfigurationInitialisationStrings>
        if (value->Arr != NULL)
   1b7f8:	687b      	ldr	r3, [r7, #4]
   1b7fa:	689b      	ldr	r3, [r3, #8]
   1b7fc:	2b00      	cmp	r3, #0
   1b7fe:	f000 80bf 	beq.w	1b980 <cosem_setModemConfiguration+0x1c0>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b802:	2300      	movs	r3, #0
   1b804:	627b      	str	r3, [r7, #36]	; 0x24
   1b806:	e06d      	b.n	1b8e4 <cosem_setModemConfiguration+0x124>
            {
                ret = va_get(value->Arr, &tmp);
   1b808:	687b      	ldr	r3, [r7, #4]
   1b80a:	689b      	ldr	r3, [r3, #8]
   1b80c:	f107 0214 	add.w	r2, r7, #20
   1b810:	4611      	mov	r1, r2
   1b812:	4618      	mov	r0, r3
   1b814:	f00b fb04 	bl	26e20 <va_get>
   1b818:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b81a:	6a3b      	ldr	r3, [r7, #32]
   1b81c:	2b00      	cmp	r3, #0
   1b81e:	d001      	beq.n	1b824 <cosem_setModemConfiguration+0x64>
                {
                    return ret;
   1b820:	6a3b      	ldr	r3, [r7, #32]
   1b822:	e0ae      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1b824:	697b      	ldr	r3, [r7, #20]
   1b826:	689b      	ldr	r3, [r3, #8]
   1b828:	f107 0210 	add.w	r2, r7, #16
   1b82c:	4611      	mov	r1, r2
   1b82e:	4618      	mov	r0, r3
   1b830:	f00b faf6 	bl	26e20 <va_get>
   1b834:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b836:	6a3b      	ldr	r3, [r7, #32]
   1b838:	2b00      	cmp	r3, #0
   1b83a:	d001      	beq.n	1b840 <cosem_setModemConfiguration+0x80>
                {
                    return ret;
   1b83c:	6a3b      	ldr	r3, [r7, #32]
   1b83e:	e0a0      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
                }
                modemInit = (gxModemInitialisation*)gxmalloc(sizeof(gxModemInitialisation));
   1b840:	201c      	movs	r0, #28
   1b842:	f00e f8ff 	bl	29a44 <malloc>
   1b846:	4603      	mov	r3, r0
   1b848:	61fb      	str	r3, [r7, #28]
                bb_init(&modemInit->request);
   1b84a:	69fb      	ldr	r3, [r7, #28]
   1b84c:	4618      	mov	r0, r3
   1b84e:	f7e7 fa4b 	bl	2ce8 <bb_init>
                bb_init(&modemInit->response);
   1b852:	69fb      	ldr	r3, [r7, #28]
   1b854:	330c      	adds	r3, #12
   1b856:	4618      	mov	r0, r3
   1b858:	f7e7 fa46 	bl	2ce8 <bb_init>
                bb_set(&modemInit->request, tmp3->byteArr->data, tmp3->byteArr->size);
   1b85c:	69f8      	ldr	r0, [r7, #28]
   1b85e:	693b      	ldr	r3, [r7, #16]
   1b860:	689b      	ldr	r3, [r3, #8]
   1b862:	6819      	ldr	r1, [r3, #0]
   1b864:	693b      	ldr	r3, [r7, #16]
   1b866:	689b      	ldr	r3, [r3, #8]
   1b868:	88db      	ldrh	r3, [r3, #6]
   1b86a:	461a      	mov	r2, r3
   1b86c:	f7e7 fe78 	bl	3560 <bb_set>
                ret = va_get(tmp->Arr, &tmp3);
   1b870:	697b      	ldr	r3, [r7, #20]
   1b872:	689b      	ldr	r3, [r3, #8]
   1b874:	f107 0210 	add.w	r2, r7, #16
   1b878:	4611      	mov	r1, r2
   1b87a:	4618      	mov	r0, r3
   1b87c:	f00b fad0 	bl	26e20 <va_get>
   1b880:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b882:	6a3b      	ldr	r3, [r7, #32]
   1b884:	2b00      	cmp	r3, #0
   1b886:	d001      	beq.n	1b88c <cosem_setModemConfiguration+0xcc>
                {
                    return ret;
   1b888:	6a3b      	ldr	r3, [r7, #32]
   1b88a:	e07a      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
                }
                bb_set(&modemInit->response, tmp3->byteArr->data, tmp3->byteArr->size);
   1b88c:	69fb      	ldr	r3, [r7, #28]
   1b88e:	f103 000c 	add.w	r0, r3, #12
   1b892:	693b      	ldr	r3, [r7, #16]
   1b894:	689b      	ldr	r3, [r3, #8]
   1b896:	6819      	ldr	r1, [r3, #0]
   1b898:	693b      	ldr	r3, [r7, #16]
   1b89a:	689b      	ldr	r3, [r3, #8]
   1b89c:	88db      	ldrh	r3, [r3, #6]
   1b89e:	461a      	mov	r2, r3
   1b8a0:	f7e7 fe5e 	bl	3560 <bb_set>
                if (tmp->Arr->size > 2)
   1b8a4:	697b      	ldr	r3, [r7, #20]
   1b8a6:	689b      	ldr	r3, [r3, #8]
   1b8a8:	88db      	ldrh	r3, [r3, #6]
   1b8aa:	2b02      	cmp	r3, #2
   1b8ac:	d911      	bls.n	1b8d2 <cosem_setModemConfiguration+0x112>
                {
                    ret = va_get(tmp->Arr, &tmp3);
   1b8ae:	697b      	ldr	r3, [r7, #20]
   1b8b0:	689b      	ldr	r3, [r3, #8]
   1b8b2:	f107 0210 	add.w	r2, r7, #16
   1b8b6:	4611      	mov	r1, r2
   1b8b8:	4618      	mov	r0, r3
   1b8ba:	f00b fab1 	bl	26e20 <va_get>
   1b8be:	6238      	str	r0, [r7, #32]
                    if (ret != DLMS_ERROR_CODE_OK)
   1b8c0:	6a3b      	ldr	r3, [r7, #32]
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	d001      	beq.n	1b8ca <cosem_setModemConfiguration+0x10a>
                    {
                        return ret;
   1b8c6:	6a3b      	ldr	r3, [r7, #32]
   1b8c8:	e05b      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
                    }
                    modemInit->delay = tmp3->uiVal;
   1b8ca:	693b      	ldr	r3, [r7, #16]
   1b8cc:	891a      	ldrh	r2, [r3, #8]
   1b8ce:	69fb      	ldr	r3, [r7, #28]
   1b8d0:	831a      	strh	r2, [r3, #24]
                }
                arr_push(&object->initialisationStrings, modemInit);
   1b8d2:	68fb      	ldr	r3, [r7, #12]
   1b8d4:	3310      	adds	r3, #16
   1b8d6:	69f9      	ldr	r1, [r7, #28]
   1b8d8:	4618      	mov	r0, r3
   1b8da:	f7f0 fed1 	bl	c680 <arr_push>
    else if (index == 3)
    {
        obj_clearModemConfigurationInitialisationStrings(&object->initialisationStrings);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b8e0:	3301      	adds	r3, #1
   1b8e2:	627b      	str	r3, [r7, #36]	; 0x24
   1b8e4:	687b      	ldr	r3, [r7, #4]
   1b8e6:	689b      	ldr	r3, [r3, #8]
   1b8e8:	88db      	ldrh	r3, [r3, #6]
   1b8ea:	461a      	mov	r2, r3
   1b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b8ee:	429a      	cmp	r2, r3
   1b8f0:	d18a      	bne.n	1b808 <cosem_setModemConfiguration+0x48>
   1b8f2:	e045      	b.n	1b980 <cosem_setModemConfiguration+0x1c0>
                }
                arr_push(&object->initialisationStrings, modemInit);
            }
        }
    }
    else if (index == 4)
   1b8f4:	7afb      	ldrb	r3, [r7, #11]
   1b8f6:	2b04      	cmp	r3, #4
   1b8f8:	d13f      	bne.n	1b97a <cosem_setModemConfiguration+0x1ba>
    {
        arr_clearStrings(&object->modemProfile);
   1b8fa:	68fb      	ldr	r3, [r7, #12]
   1b8fc:	3320      	adds	r3, #32
   1b8fe:	4618      	mov	r0, r3
   1b900:	f7f0 ffd8 	bl	c8b4 <arr_clearStrings>
        if (value->Arr != NULL)
   1b904:	687b      	ldr	r3, [r7, #4]
   1b906:	689b      	ldr	r3, [r3, #8]
   1b908:	2b00      	cmp	r3, #0
   1b90a:	d039      	beq.n	1b980 <cosem_setModemConfiguration+0x1c0>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b90c:	2300      	movs	r3, #0
   1b90e:	627b      	str	r3, [r7, #36]	; 0x24
   1b910:	e02b      	b.n	1b96a <cosem_setModemConfiguration+0x1aa>
            {
                ret = va_get(value->Arr, &tmp);
   1b912:	687b      	ldr	r3, [r7, #4]
   1b914:	689b      	ldr	r3, [r3, #8]
   1b916:	f107 0214 	add.w	r2, r7, #20
   1b91a:	4611      	mov	r1, r2
   1b91c:	4618      	mov	r0, r3
   1b91e:	f00b fa7f 	bl	26e20 <va_get>
   1b922:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1b924:	6a3b      	ldr	r3, [r7, #32]
   1b926:	2b00      	cmp	r3, #0
   1b928:	d001      	beq.n	1b92e <cosem_setModemConfiguration+0x16e>
                {
                    return ret;
   1b92a:	6a3b      	ldr	r3, [r7, #32]
   1b92c:	e029      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
                }
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1b92e:	200c      	movs	r0, #12
   1b930:	f00e f888 	bl	29a44 <malloc>
   1b934:	4603      	mov	r3, r0
   1b936:	61bb      	str	r3, [r7, #24]
                bb_init(str);
   1b938:	69b8      	ldr	r0, [r7, #24]
   1b93a:	f7e7 f9d5 	bl	2ce8 <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1b93e:	697b      	ldr	r3, [r7, #20]
   1b940:	689c      	ldr	r4, [r3, #8]
   1b942:	697b      	ldr	r3, [r7, #20]
   1b944:	689b      	ldr	r3, [r3, #8]
   1b946:	4618      	mov	r0, r3
   1b948:	f7e7 f9be 	bl	2cc8 <bb_size>
   1b94c:	4603      	mov	r3, r0
   1b94e:	2200      	movs	r2, #0
   1b950:	4621      	mov	r1, r4
   1b952:	69b8      	ldr	r0, [r7, #24]
   1b954:	f7e7 fe64 	bl	3620 <bb_set2>
                arr_push(&object->modemProfile, str);
   1b958:	68fb      	ldr	r3, [r7, #12]
   1b95a:	3320      	adds	r3, #32
   1b95c:	69b9      	ldr	r1, [r7, #24]
   1b95e:	4618      	mov	r0, r3
   1b960:	f7f0 fe8e 	bl	c680 <arr_push>
    else if (index == 4)
    {
        arr_clearStrings(&object->modemProfile);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b966:	3301      	adds	r3, #1
   1b968:	627b      	str	r3, [r7, #36]	; 0x24
   1b96a:	687b      	ldr	r3, [r7, #4]
   1b96c:	689b      	ldr	r3, [r3, #8]
   1b96e:	88db      	ldrh	r3, [r3, #6]
   1b970:	461a      	mov	r2, r3
   1b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b974:	429a      	cmp	r2, r3
   1b976:	d1cc      	bne.n	1b912 <cosem_setModemConfiguration+0x152>
   1b978:	e002      	b.n	1b980 <cosem_setModemConfiguration+0x1c0>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b97a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b97e:	e000      	b.n	1b982 <cosem_setModemConfiguration+0x1c2>
    }
    return DLMS_ERROR_CODE_OK;
   1b980:	2300      	movs	r3, #0
}
   1b982:	4618      	mov	r0, r3
   1b984:	372c      	adds	r7, #44	; 0x2c
   1b986:	46bd      	mov	sp, r7
   1b988:	bd90      	pop	{r4, r7, pc}
   1b98a:	bf00      	nop

0001b98c <cosem_setPppSetup>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
int cosem_setPppSetup(gxPppSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1b98c:	b5b0      	push	{r4, r5, r7, lr}
   1b98e:	b08a      	sub	sp, #40	; 0x28
   1b990:	af00      	add	r7, sp, #0
   1b992:	60f8      	str	r0, [r7, #12]
   1b994:	460b      	mov	r3, r1
   1b996:	607a      	str	r2, [r7, #4]
   1b998:	72fb      	strb	r3, [r7, #11]
    int ret = DLMS_ERROR_CODE_OK, pos;
   1b99a:	2300      	movs	r3, #0
   1b99c:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT *tmp, *tmp3;
    gxpppSetupLcpOption* lcpItem;
    gxpppSetupIPCPOption* ipcpItem;

    if (index == 2)
   1b99e:	7afb      	ldrb	r3, [r7, #11]
   1b9a0:	2b02      	cmp	r3, #2
   1b9a2:	d115      	bne.n	1b9d0 <cosem_setPppSetup+0x44>
    {
        bb_clear(&object->PHYReference);
   1b9a4:	68fb      	ldr	r3, [r7, #12]
   1b9a6:	3320      	adds	r3, #32
   1b9a8:	4618      	mov	r0, r3
   1b9aa:	f7e7 fedb 	bl	3764 <bb_clear>
        bb_set2(&object->PHYReference, value->byteArr, 0, bb_size(value->byteArr));
   1b9ae:	68fb      	ldr	r3, [r7, #12]
   1b9b0:	f103 0420 	add.w	r4, r3, #32
   1b9b4:	687b      	ldr	r3, [r7, #4]
   1b9b6:	689d      	ldr	r5, [r3, #8]
   1b9b8:	687b      	ldr	r3, [r7, #4]
   1b9ba:	689b      	ldr	r3, [r3, #8]
   1b9bc:	4618      	mov	r0, r3
   1b9be:	f7e7 f983 	bl	2cc8 <bb_size>
   1b9c2:	4603      	mov	r3, r0
   1b9c4:	2200      	movs	r2, #0
   1b9c6:	4629      	mov	r1, r5
   1b9c8:	4620      	mov	r0, r4
   1b9ca:	f7e7 fe29 	bl	3620 <bb_set2>
   1b9ce:	e15e      	b.n	1bc8e <cosem_setPppSetup+0x302>
    }
    else if (index == 3)
   1b9d0:	7afb      	ldrb	r3, [r7, #11]
   1b9d2:	2b03      	cmp	r3, #3
   1b9d4:	f040 8085 	bne.w	1bae2 <cosem_setPppSetup+0x156>
    {
        arr_clear(&object->lcpOptions);
   1b9d8:	68fb      	ldr	r3, [r7, #12]
   1b9da:	332c      	adds	r3, #44	; 0x2c
   1b9dc:	4618      	mov	r0, r3
   1b9de:	f7f0 fe97 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1b9e2:	687b      	ldr	r3, [r7, #4]
   1b9e4:	689b      	ldr	r3, [r3, #8]
   1b9e6:	2b00      	cmp	r3, #0
   1b9e8:	f000 8151 	beq.w	1bc8e <cosem_setPppSetup+0x302>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b9ec:	2300      	movs	r3, #0
   1b9ee:	623b      	str	r3, [r7, #32]
   1b9f0:	e06f      	b.n	1bad2 <cosem_setPppSetup+0x146>
            {
                ret = va_get(value->Arr, &tmp);
   1b9f2:	687b      	ldr	r3, [r7, #4]
   1b9f4:	689b      	ldr	r3, [r3, #8]
   1b9f6:	f107 0214 	add.w	r2, r7, #20
   1b9fa:	4611      	mov	r1, r2
   1b9fc:	4618      	mov	r0, r3
   1b9fe:	f00b fa0f 	bl	26e20 <va_get>
   1ba02:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba06:	2b00      	cmp	r3, #0
   1ba08:	d001      	beq.n	1ba0e <cosem_setPppSetup+0x82>
                {
                    return ret;
   1ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba0c:	e140      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1ba0e:	697b      	ldr	r3, [r7, #20]
   1ba10:	689b      	ldr	r3, [r3, #8]
   1ba12:	f107 0210 	add.w	r2, r7, #16
   1ba16:	4611      	mov	r1, r2
   1ba18:	4618      	mov	r0, r3
   1ba1a:	f00b fa01 	bl	26e20 <va_get>
   1ba1e:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d001      	beq.n	1ba2a <cosem_setPppSetup+0x9e>
                {
                    return ret;
   1ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba28:	e132      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }

                lcpItem = (gxpppSetupLcpOption*)gxmalloc(sizeof(gxpppSetupLcpOption));
   1ba2a:	2020      	movs	r0, #32
   1ba2c:	f00e f80a 	bl	29a44 <malloc>
   1ba30:	4603      	mov	r3, r0
   1ba32:	61fb      	str	r3, [r7, #28]
                var_init(&lcpItem->data);
   1ba34:	69fb      	ldr	r3, [r7, #28]
   1ba36:	3308      	adds	r3, #8
   1ba38:	4618      	mov	r0, r3
   1ba3a:	f00a fb75 	bl	26128 <var_init>
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   1ba3e:	693b      	ldr	r3, [r7, #16]
   1ba40:	4618      	mov	r0, r3
   1ba42:	f00b f843 	bl	26acc <var_toInteger>
   1ba46:	4603      	mov	r3, r0
   1ba48:	b2da      	uxtb	r2, r3
   1ba4a:	69fb      	ldr	r3, [r7, #28]
   1ba4c:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp3);
   1ba4e:	697b      	ldr	r3, [r7, #20]
   1ba50:	689b      	ldr	r3, [r3, #8]
   1ba52:	f107 0210 	add.w	r2, r7, #16
   1ba56:	4611      	mov	r1, r2
   1ba58:	4618      	mov	r0, r3
   1ba5a:	f00b f9e1 	bl	26e20 <va_get>
   1ba5e:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba62:	2b00      	cmp	r3, #0
   1ba64:	d004      	beq.n	1ba70 <cosem_setPppSetup+0xe4>
                {
                    gxfree(lcpItem);
   1ba66:	69f8      	ldr	r0, [r7, #28]
   1ba68:	f00d fff4 	bl	29a54 <free>
                    return ret;
   1ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba6e:	e10f      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }

                lcpItem->length = var_toInteger(tmp3);
   1ba70:	693b      	ldr	r3, [r7, #16]
   1ba72:	4618      	mov	r0, r3
   1ba74:	f00b f82a 	bl	26acc <var_toInteger>
   1ba78:	4602      	mov	r2, r0
   1ba7a:	69fb      	ldr	r3, [r7, #28]
   1ba7c:	619a      	str	r2, [r3, #24]
                ret = va_get(tmp->Arr, &tmp3);
   1ba7e:	697b      	ldr	r3, [r7, #20]
   1ba80:	689b      	ldr	r3, [r3, #8]
   1ba82:	f107 0210 	add.w	r2, r7, #16
   1ba86:	4611      	mov	r1, r2
   1ba88:	4618      	mov	r0, r3
   1ba8a:	f00b f9c9 	bl	26e20 <va_get>
   1ba8e:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	d004      	beq.n	1baa0 <cosem_setPppSetup+0x114>
                {
                    gxfree(lcpItem);
   1ba96:	69f8      	ldr	r0, [r7, #28]
   1ba98:	f00d ffdc 	bl	29a54 <free>
                    return ret;
   1ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba9e:	e0f7      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ret = var_copy(&lcpItem->data, tmp3);
   1baa0:	69fb      	ldr	r3, [r7, #28]
   1baa2:	3308      	adds	r3, #8
   1baa4:	693a      	ldr	r2, [r7, #16]
   1baa6:	4611      	mov	r1, r2
   1baa8:	4618      	mov	r0, r3
   1baaa:	f00c f963 	bl	27d74 <var_copy>
   1baae:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bab2:	2b00      	cmp	r3, #0
   1bab4:	d004      	beq.n	1bac0 <cosem_setPppSetup+0x134>
                {
                    gxfree(lcpItem);
   1bab6:	69f8      	ldr	r0, [r7, #28]
   1bab8:	f00d ffcc 	bl	29a54 <free>
                    return ret;
   1babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1babe:	e0e7      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                arr_push(&object->lcpOptions, lcpItem);
   1bac0:	68fb      	ldr	r3, [r7, #12]
   1bac2:	332c      	adds	r3, #44	; 0x2c
   1bac4:	69f9      	ldr	r1, [r7, #28]
   1bac6:	4618      	mov	r0, r3
   1bac8:	f7f0 fdda 	bl	c680 <arr_push>
    else if (index == 3)
    {
        arr_clear(&object->lcpOptions);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bacc:	6a3b      	ldr	r3, [r7, #32]
   1bace:	3301      	adds	r3, #1
   1bad0:	623b      	str	r3, [r7, #32]
   1bad2:	687b      	ldr	r3, [r7, #4]
   1bad4:	689b      	ldr	r3, [r3, #8]
   1bad6:	88db      	ldrh	r3, [r3, #6]
   1bad8:	461a      	mov	r2, r3
   1bada:	6a3b      	ldr	r3, [r7, #32]
   1badc:	429a      	cmp	r2, r3
   1bade:	d188      	bne.n	1b9f2 <cosem_setPppSetup+0x66>
   1bae0:	e0d5      	b.n	1bc8e <cosem_setPppSetup+0x302>
                }
                arr_push(&object->lcpOptions, lcpItem);
            }
        }
    }
    else if (index == 4)
   1bae2:	7afb      	ldrb	r3, [r7, #11]
   1bae4:	2b04      	cmp	r3, #4
   1bae6:	f040 8085 	bne.w	1bbf4 <cosem_setPppSetup+0x268>
    {
        arr_clear(&object->ipcpOptions);
   1baea:	68fb      	ldr	r3, [r7, #12]
   1baec:	3310      	adds	r3, #16
   1baee:	4618      	mov	r0, r3
   1baf0:	f7f0 fe0e 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1baf4:	687b      	ldr	r3, [r7, #4]
   1baf6:	689b      	ldr	r3, [r3, #8]
   1baf8:	2b00      	cmp	r3, #0
   1bafa:	f000 80c8 	beq.w	1bc8e <cosem_setPppSetup+0x302>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bafe:	2300      	movs	r3, #0
   1bb00:	623b      	str	r3, [r7, #32]
   1bb02:	e06f      	b.n	1bbe4 <cosem_setPppSetup+0x258>
            {
                ret = va_get(value->Arr, &tmp);
   1bb04:	687b      	ldr	r3, [r7, #4]
   1bb06:	689b      	ldr	r3, [r3, #8]
   1bb08:	f107 0214 	add.w	r2, r7, #20
   1bb0c:	4611      	mov	r1, r2
   1bb0e:	4618      	mov	r0, r3
   1bb10:	f00b f986 	bl	26e20 <va_get>
   1bb14:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb18:	2b00      	cmp	r3, #0
   1bb1a:	d001      	beq.n	1bb20 <cosem_setPppSetup+0x194>
                {
                    return ret;
   1bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb1e:	e0b7      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1bb20:	697b      	ldr	r3, [r7, #20]
   1bb22:	689b      	ldr	r3, [r3, #8]
   1bb24:	f107 0210 	add.w	r2, r7, #16
   1bb28:	4611      	mov	r1, r2
   1bb2a:	4618      	mov	r0, r3
   1bb2c:	f00b f978 	bl	26e20 <va_get>
   1bb30:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d001      	beq.n	1bb3c <cosem_setPppSetup+0x1b0>
                {
                    return ret;
   1bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb3a:	e0a9      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ipcpItem = (gxpppSetupIPCPOption*)gxmalloc(sizeof(gxpppSetupIPCPOption));
   1bb3c:	2020      	movs	r0, #32
   1bb3e:	f00d ff81 	bl	29a44 <malloc>
   1bb42:	4603      	mov	r3, r0
   1bb44:	61bb      	str	r3, [r7, #24]
                var_init(&ipcpItem->data);
   1bb46:	69bb      	ldr	r3, [r7, #24]
   1bb48:	3308      	adds	r3, #8
   1bb4a:	4618      	mov	r0, r3
   1bb4c:	f00a faec 	bl	26128 <var_init>
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   1bb50:	693b      	ldr	r3, [r7, #16]
   1bb52:	4618      	mov	r0, r3
   1bb54:	f00a ffba 	bl	26acc <var_toInteger>
   1bb58:	4603      	mov	r3, r0
   1bb5a:	b2da      	uxtb	r2, r3
   1bb5c:	69bb      	ldr	r3, [r7, #24]
   1bb5e:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp3);
   1bb60:	697b      	ldr	r3, [r7, #20]
   1bb62:	689b      	ldr	r3, [r3, #8]
   1bb64:	f107 0210 	add.w	r2, r7, #16
   1bb68:	4611      	mov	r1, r2
   1bb6a:	4618      	mov	r0, r3
   1bb6c:	f00b f958 	bl	26e20 <va_get>
   1bb70:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb74:	2b00      	cmp	r3, #0
   1bb76:	d004      	beq.n	1bb82 <cosem_setPppSetup+0x1f6>
                {
                    gxfree(ipcpItem);
   1bb78:	69b8      	ldr	r0, [r7, #24]
   1bb7a:	f00d ff6b 	bl	29a54 <free>
                    return ret;
   1bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb80:	e086      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ipcpItem->length = var_toInteger(tmp3);
   1bb82:	693b      	ldr	r3, [r7, #16]
   1bb84:	4618      	mov	r0, r3
   1bb86:	f00a ffa1 	bl	26acc <var_toInteger>
   1bb8a:	4602      	mov	r2, r0
   1bb8c:	69bb      	ldr	r3, [r7, #24]
   1bb8e:	619a      	str	r2, [r3, #24]
                ret = va_get(tmp->Arr, &tmp3);
   1bb90:	697b      	ldr	r3, [r7, #20]
   1bb92:	689b      	ldr	r3, [r3, #8]
   1bb94:	f107 0210 	add.w	r2, r7, #16
   1bb98:	4611      	mov	r1, r2
   1bb9a:	4618      	mov	r0, r3
   1bb9c:	f00b f940 	bl	26e20 <va_get>
   1bba0:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bba4:	2b00      	cmp	r3, #0
   1bba6:	d004      	beq.n	1bbb2 <cosem_setPppSetup+0x226>
                {
                    gxfree(ipcpItem);
   1bba8:	69b8      	ldr	r0, [r7, #24]
   1bbaa:	f00d ff53 	bl	29a54 <free>
                    return ret;
   1bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbb0:	e06e      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                ret = var_copy(&ipcpItem->data, tmp3);
   1bbb2:	69bb      	ldr	r3, [r7, #24]
   1bbb4:	3308      	adds	r3, #8
   1bbb6:	693a      	ldr	r2, [r7, #16]
   1bbb8:	4611      	mov	r1, r2
   1bbba:	4618      	mov	r0, r3
   1bbbc:	f00c f8da 	bl	27d74 <var_copy>
   1bbc0:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	d004      	beq.n	1bbd2 <cosem_setPppSetup+0x246>
                {
                    gxfree(ipcpItem);
   1bbc8:	69b8      	ldr	r0, [r7, #24]
   1bbca:	f00d ff43 	bl	29a54 <free>
                    return ret;
   1bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbd0:	e05e      	b.n	1bc90 <cosem_setPppSetup+0x304>
                }
                arr_push(&object->ipcpOptions, ipcpItem);
   1bbd2:	68fb      	ldr	r3, [r7, #12]
   1bbd4:	3310      	adds	r3, #16
   1bbd6:	69b9      	ldr	r1, [r7, #24]
   1bbd8:	4618      	mov	r0, r3
   1bbda:	f7f0 fd51 	bl	c680 <arr_push>
    else if (index == 4)
    {
        arr_clear(&object->ipcpOptions);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bbde:	6a3b      	ldr	r3, [r7, #32]
   1bbe0:	3301      	adds	r3, #1
   1bbe2:	623b      	str	r3, [r7, #32]
   1bbe4:	687b      	ldr	r3, [r7, #4]
   1bbe6:	689b      	ldr	r3, [r3, #8]
   1bbe8:	88db      	ldrh	r3, [r3, #6]
   1bbea:	461a      	mov	r2, r3
   1bbec:	6a3b      	ldr	r3, [r7, #32]
   1bbee:	429a      	cmp	r2, r3
   1bbf0:	d188      	bne.n	1bb04 <cosem_setPppSetup+0x178>
   1bbf2:	e04c      	b.n	1bc8e <cosem_setPppSetup+0x302>
                }
                arr_push(&object->ipcpOptions, ipcpItem);
            }
        }
    }
    else if (index == 5)
   1bbf4:	7afb      	ldrb	r3, [r7, #11]
   1bbf6:	2b05      	cmp	r3, #5
   1bbf8:	d146      	bne.n	1bc88 <cosem_setPppSetup+0x2fc>
    {
        //Get user name.
        ret = va_get(value->Arr, &tmp);
   1bbfa:	687b      	ldr	r3, [r7, #4]
   1bbfc:	689b      	ldr	r3, [r3, #8]
   1bbfe:	f107 0214 	add.w	r2, r7, #20
   1bc02:	4611      	mov	r1, r2
   1bc04:	4618      	mov	r0, r3
   1bc06:	f00b f90b 	bl	26e20 <va_get>
   1bc0a:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d001      	beq.n	1bc16 <cosem_setPppSetup+0x28a>
        {
            return ret;
   1bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc14:	e03c      	b.n	1bc90 <cosem_setPppSetup+0x304>
        }
        bb_clear(&object->userName);
   1bc16:	68fb      	ldr	r3, [r7, #12]
   1bc18:	333c      	adds	r3, #60	; 0x3c
   1bc1a:	4618      	mov	r0, r3
   1bc1c:	f7e7 fda2 	bl	3764 <bb_clear>
        bb_set2(&object->userName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1bc20:	68fb      	ldr	r3, [r7, #12]
   1bc22:	f103 043c 	add.w	r4, r3, #60	; 0x3c
   1bc26:	697b      	ldr	r3, [r7, #20]
   1bc28:	689d      	ldr	r5, [r3, #8]
   1bc2a:	697b      	ldr	r3, [r7, #20]
   1bc2c:	689b      	ldr	r3, [r3, #8]
   1bc2e:	4618      	mov	r0, r3
   1bc30:	f7e7 f84a 	bl	2cc8 <bb_size>
   1bc34:	4603      	mov	r3, r0
   1bc36:	2200      	movs	r2, #0
   1bc38:	4629      	mov	r1, r5
   1bc3a:	4620      	mov	r0, r4
   1bc3c:	f7e7 fcf0 	bl	3620 <bb_set2>
        //Get password.
        ret = va_get(value->Arr, &tmp);
   1bc40:	687b      	ldr	r3, [r7, #4]
   1bc42:	689b      	ldr	r3, [r3, #8]
   1bc44:	f107 0214 	add.w	r2, r7, #20
   1bc48:	4611      	mov	r1, r2
   1bc4a:	4618      	mov	r0, r3
   1bc4c:	f00b f8e8 	bl	26e20 <va_get>
   1bc50:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret != DLMS_ERROR_CODE_OK)
   1bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc54:	2b00      	cmp	r3, #0
   1bc56:	d001      	beq.n	1bc5c <cosem_setPppSetup+0x2d0>
        {
            return ret;
   1bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc5a:	e019      	b.n	1bc90 <cosem_setPppSetup+0x304>
        }
        bb_clear(&object->password);
   1bc5c:	68fb      	ldr	r3, [r7, #12]
   1bc5e:	3348      	adds	r3, #72	; 0x48
   1bc60:	4618      	mov	r0, r3
   1bc62:	f7e7 fd7f 	bl	3764 <bb_clear>
        bb_set2(&object->password, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1bc66:	68fb      	ldr	r3, [r7, #12]
   1bc68:	f103 0448 	add.w	r4, r3, #72	; 0x48
   1bc6c:	697b      	ldr	r3, [r7, #20]
   1bc6e:	689d      	ldr	r5, [r3, #8]
   1bc70:	697b      	ldr	r3, [r7, #20]
   1bc72:	689b      	ldr	r3, [r3, #8]
   1bc74:	4618      	mov	r0, r3
   1bc76:	f7e7 f827 	bl	2cc8 <bb_size>
   1bc7a:	4603      	mov	r3, r0
   1bc7c:	2200      	movs	r2, #0
   1bc7e:	4629      	mov	r1, r5
   1bc80:	4620      	mov	r0, r4
   1bc82:	f7e7 fccd 	bl	3620 <bb_set2>
   1bc86:	e002      	b.n	1bc8e <cosem_setPppSetup+0x302>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1bc88:	f44f 7381 	mov.w	r3, #258	; 0x102
   1bc8c:	e000      	b.n	1bc90 <cosem_setPppSetup+0x304>
    }
    return ret;
   1bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bc90:	4618      	mov	r0, r3
   1bc92:	3728      	adds	r7, #40	; 0x28
   1bc94:	46bd      	mov	sp, r7
   1bc96:	bdb0      	pop	{r4, r5, r7, pc}

0001bc98 <cosem_setRegisterActivation>:
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
int cosem_setRegisterActivation(gxRegisterActivation* object, unsigned char index, dlmsVARIANT *value)
{
   1bc98:	b5b0      	push	{r4, r5, r7, lr}
   1bc9a:	b08c      	sub	sp, #48	; 0x30
   1bc9c:	af00      	add	r7, sp, #0
   1bc9e:	60f8      	str	r0, [r7, #12]
   1bca0:	460b      	mov	r3, r1
   1bca2:	607a      	str	r2, [r7, #4]
   1bca4:	72fb      	strb	r3, [r7, #11]
    int ret, pos, pos2;
    dlmsVARIANT *tmp, *tmp3;
    gxByteBuffer *start, *end;
    gxObjectDefinition* objectDefinition;

    if (index == 2)
   1bca6:	7afb      	ldrb	r3, [r7, #11]
   1bca8:	2b02      	cmp	r3, #2
   1bcaa:	d15d      	bne.n	1bd68 <cosem_setRegisterActivation+0xd0>
    {
        obj_clearRegisterActivationAssignment(&object->registerAssignment);
   1bcac:	68fb      	ldr	r3, [r7, #12]
   1bcae:	3310      	adds	r3, #16
   1bcb0:	4618      	mov	r0, r3
   1bcb2:	f7fb fa37 	bl	17124 <obj_clearRegisterActivationAssignment>
        if (value->Arr != NULL)
   1bcb6:	687b      	ldr	r3, [r7, #4]
   1bcb8:	689b      	ldr	r3, [r3, #8]
   1bcba:	2b00      	cmp	r3, #0
   1bcbc:	f000 8101 	beq.w	1bec2 <cosem_setRegisterActivation+0x22a>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bcc0:	2300      	movs	r3, #0
   1bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bcc4:	e048      	b.n	1bd58 <cosem_setRegisterActivation+0xc0>
            {
                ret = va_get(value->Arr, &tmp);
   1bcc6:	687b      	ldr	r3, [r7, #4]
   1bcc8:	689b      	ldr	r3, [r3, #8]
   1bcca:	f107 0214 	add.w	r2, r7, #20
   1bcce:	4611      	mov	r1, r2
   1bcd0:	4618      	mov	r0, r3
   1bcd2:	f00b f8a5 	bl	26e20 <va_get>
   1bcd6:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d001      	beq.n	1bce2 <cosem_setRegisterActivation+0x4a>
                {
                    return ret;
   1bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bce0:	e0f0      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1bce2:	697b      	ldr	r3, [r7, #20]
   1bce4:	689b      	ldr	r3, [r3, #8]
   1bce6:	f107 0210 	add.w	r2, r7, #16
   1bcea:	4611      	mov	r1, r2
   1bcec:	4618      	mov	r0, r3
   1bcee:	f00b f897 	bl	26e20 <va_get>
   1bcf2:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcf6:	2b00      	cmp	r3, #0
   1bcf8:	d001      	beq.n	1bcfe <cosem_setRegisterActivation+0x66>
                {
                    return ret;
   1bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcfc:	e0e2      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                objectDefinition = (gxObjectDefinition*)gxmalloc(sizeof(gxObjectDefinition));
   1bcfe:	2008      	movs	r0, #8
   1bd00:	f00d fea0 	bl	29a44 <malloc>
   1bd04:	4603      	mov	r3, r0
   1bd06:	623b      	str	r3, [r7, #32]
                objectDefinition->classId = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1bd08:	693b      	ldr	r3, [r7, #16]
   1bd0a:	4618      	mov	r0, r3
   1bd0c:	f00a fede 	bl	26acc <var_toInteger>
   1bd10:	4603      	mov	r3, r0
   1bd12:	b29a      	uxth	r2, r3
   1bd14:	6a3b      	ldr	r3, [r7, #32]
   1bd16:	801a      	strh	r2, [r3, #0]

                ret = va_get(tmp->Arr, &tmp3);
   1bd18:	697b      	ldr	r3, [r7, #20]
   1bd1a:	689b      	ldr	r3, [r3, #8]
   1bd1c:	f107 0210 	add.w	r2, r7, #16
   1bd20:	4611      	mov	r1, r2
   1bd22:	4618      	mov	r0, r3
   1bd24:	f00b f87c 	bl	26e20 <va_get>
   1bd28:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd2c:	2b00      	cmp	r3, #0
   1bd2e:	d001      	beq.n	1bd34 <cosem_setRegisterActivation+0x9c>
                {
                    return ret;
   1bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd32:	e0c7      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                memcpy(objectDefinition->logicalName, tmp3->byteArr->data, 6);
   1bd34:	6a3b      	ldr	r3, [r7, #32]
   1bd36:	1c98      	adds	r0, r3, #2
   1bd38:	693b      	ldr	r3, [r7, #16]
   1bd3a:	689b      	ldr	r3, [r3, #8]
   1bd3c:	681b      	ldr	r3, [r3, #0]
   1bd3e:	2206      	movs	r2, #6
   1bd40:	4619      	mov	r1, r3
   1bd42:	f00d fe9e 	bl	29a82 <memcpy>
                arr_push(&object->registerAssignment, objectDefinition);
   1bd46:	68fb      	ldr	r3, [r7, #12]
   1bd48:	3310      	adds	r3, #16
   1bd4a:	6a39      	ldr	r1, [r7, #32]
   1bd4c:	4618      	mov	r0, r3
   1bd4e:	f7f0 fc97 	bl	c680 <arr_push>
    if (index == 2)
    {
        obj_clearRegisterActivationAssignment(&object->registerAssignment);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bd54:	3301      	adds	r3, #1
   1bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bd58:	687b      	ldr	r3, [r7, #4]
   1bd5a:	689b      	ldr	r3, [r3, #8]
   1bd5c:	88db      	ldrh	r3, [r3, #6]
   1bd5e:	461a      	mov	r2, r3
   1bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bd62:	429a      	cmp	r2, r3
   1bd64:	d1af      	bne.n	1bcc6 <cosem_setRegisterActivation+0x2e>
   1bd66:	e0ac      	b.n	1bec2 <cosem_setRegisterActivation+0x22a>
                memcpy(objectDefinition->logicalName, tmp3->byteArr->data, 6);
                arr_push(&object->registerAssignment, objectDefinition);
            }
        }
    }
    else if (index == 3)
   1bd68:	7afb      	ldrb	r3, [r7, #11]
   1bd6a:	2b03      	cmp	r3, #3
   1bd6c:	f040 808d 	bne.w	1be8a <cosem_setRegisterActivation+0x1f2>
    {
        obj_clearRegisterActivationMaskList(&object->maskList);
   1bd70:	68fb      	ldr	r3, [r7, #12]
   1bd72:	3320      	adds	r3, #32
   1bd74:	4618      	mov	r0, r3
   1bd76:	f7fb f9e1 	bl	1713c <obj_clearRegisterActivationMaskList>
        if (value->Arr != NULL)
   1bd7a:	687b      	ldr	r3, [r7, #4]
   1bd7c:	689b      	ldr	r3, [r3, #8]
   1bd7e:	2b00      	cmp	r3, #0
   1bd80:	f000 809f 	beq.w	1bec2 <cosem_setRegisterActivation+0x22a>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bd84:	2300      	movs	r3, #0
   1bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bd88:	e077      	b.n	1be7a <cosem_setRegisterActivation+0x1e2>
            {
                ret = va_get(value->Arr, &tmp);
   1bd8a:	687b      	ldr	r3, [r7, #4]
   1bd8c:	689b      	ldr	r3, [r3, #8]
   1bd8e:	f107 0214 	add.w	r2, r7, #20
   1bd92:	4611      	mov	r1, r2
   1bd94:	4618      	mov	r0, r3
   1bd96:	f00b f843 	bl	26e20 <va_get>
   1bd9a:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d001      	beq.n	1bda6 <cosem_setRegisterActivation+0x10e>
                {
                    return ret;
   1bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bda4:	e08e      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1bda6:	697b      	ldr	r3, [r7, #20]
   1bda8:	689b      	ldr	r3, [r3, #8]
   1bdaa:	f107 0210 	add.w	r2, r7, #16
   1bdae:	4611      	mov	r1, r2
   1bdb0:	4618      	mov	r0, r3
   1bdb2:	f00b f835 	bl	26e20 <va_get>
   1bdb6:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bdba:	2b00      	cmp	r3, #0
   1bdbc:	d001      	beq.n	1bdc2 <cosem_setRegisterActivation+0x12a>
                {
                    return ret;
   1bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bdc0:	e080      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1bdc2:	200c      	movs	r0, #12
   1bdc4:	f00d fe3e 	bl	29a44 <malloc>
   1bdc8:	4603      	mov	r3, r0
   1bdca:	61fb      	str	r3, [r7, #28]
                bb_init(start);
   1bdcc:	69f8      	ldr	r0, [r7, #28]
   1bdce:	f7e6 ff8b 	bl	2ce8 <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   1bdd2:	693b      	ldr	r3, [r7, #16]
   1bdd4:	689b      	ldr	r3, [r3, #8]
   1bdd6:	6819      	ldr	r1, [r3, #0]
   1bdd8:	693b      	ldr	r3, [r7, #16]
   1bdda:	689b      	ldr	r3, [r3, #8]
   1bddc:	88db      	ldrh	r3, [r3, #6]
   1bdde:	461a      	mov	r2, r3
   1bde0:	69f8      	ldr	r0, [r7, #28]
   1bde2:	f7e7 fbbd 	bl	3560 <bb_set>
                ret = va_get(tmp->Arr, &tmp3);
   1bde6:	697b      	ldr	r3, [r7, #20]
   1bde8:	689b      	ldr	r3, [r3, #8]
   1bdea:	f107 0210 	add.w	r2, r7, #16
   1bdee:	4611      	mov	r1, r2
   1bdf0:	4618      	mov	r0, r3
   1bdf2:	f00b f815 	bl	26e20 <va_get>
   1bdf6:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	d001      	beq.n	1be02 <cosem_setRegisterActivation+0x16a>
                {
                    return ret;
   1bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be00:	e060      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                }
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1be02:	200c      	movs	r0, #12
   1be04:	f00d fe1e 	bl	29a44 <malloc>
   1be08:	4603      	mov	r3, r0
   1be0a:	61bb      	str	r3, [r7, #24]
                bb_init(end);
   1be0c:	69b8      	ldr	r0, [r7, #24]
   1be0e:	f7e6 ff6b 	bl	2ce8 <bb_init>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1be12:	2300      	movs	r3, #0
   1be14:	62bb      	str	r3, [r7, #40]	; 0x28
   1be16:	e01a      	b.n	1be4e <cosem_setRegisterActivation+0x1b6>
                {
                    ret = va_get(tmp3->Arr, &tmp);
   1be18:	693b      	ldr	r3, [r7, #16]
   1be1a:	689b      	ldr	r3, [r3, #8]
   1be1c:	f107 0214 	add.w	r2, r7, #20
   1be20:	4611      	mov	r1, r2
   1be22:	4618      	mov	r0, r3
   1be24:	f00a fffc 	bl	26e20 <va_get>
   1be28:	6278      	str	r0, [r7, #36]	; 0x24
                    if (ret != DLMS_ERROR_CODE_OK)
   1be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be2c:	2b00      	cmp	r3, #0
   1be2e:	d001      	beq.n	1be34 <cosem_setRegisterActivation+0x19c>
                    {
                        return ret;
   1be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be32:	e047      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
                    }
                    bb_setUInt8(end, (unsigned char)var_toInteger(tmp));
   1be34:	697b      	ldr	r3, [r7, #20]
   1be36:	4618      	mov	r0, r3
   1be38:	f00a fe48 	bl	26acc <var_toInteger>
   1be3c:	4603      	mov	r3, r0
   1be3e:	b2db      	uxtb	r3, r3
   1be40:	4619      	mov	r1, r3
   1be42:	69b8      	ldr	r0, [r7, #24]
   1be44:	f7e6 ffe6 	bl	2e14 <bb_setUInt8>
                {
                    return ret;
                }
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
                bb_init(end);
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be4a:	3301      	adds	r3, #1
   1be4c:	62bb      	str	r3, [r7, #40]	; 0x28
   1be4e:	693b      	ldr	r3, [r7, #16]
   1be50:	689b      	ldr	r3, [r3, #8]
   1be52:	88db      	ldrh	r3, [r3, #6]
   1be54:	461a      	mov	r2, r3
   1be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be58:	429a      	cmp	r2, r3
   1be5a:	d1dd      	bne.n	1be18 <cosem_setRegisterActivation+0x180>
                    {
                        return ret;
                    }
                    bb_setUInt8(end, (unsigned char)var_toInteger(tmp));
                }
                arr_push(&object->maskList, key_init(start, end));
   1be5c:	68fb      	ldr	r3, [r7, #12]
   1be5e:	f103 0420 	add.w	r4, r3, #32
   1be62:	69b9      	ldr	r1, [r7, #24]
   1be64:	69f8      	ldr	r0, [r7, #28]
   1be66:	f7fa f859 	bl	15f1c <key_init>
   1be6a:	4603      	mov	r3, r0
   1be6c:	4619      	mov	r1, r3
   1be6e:	4620      	mov	r0, r4
   1be70:	f7f0 fc06 	bl	c680 <arr_push>
    else if (index == 3)
    {
        obj_clearRegisterActivationMaskList(&object->maskList);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1be76:	3301      	adds	r3, #1
   1be78:	62fb      	str	r3, [r7, #44]	; 0x2c
   1be7a:	687b      	ldr	r3, [r7, #4]
   1be7c:	689b      	ldr	r3, [r3, #8]
   1be7e:	88db      	ldrh	r3, [r3, #6]
   1be80:	461a      	mov	r2, r3
   1be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1be84:	429a      	cmp	r2, r3
   1be86:	d180      	bne.n	1bd8a <cosem_setRegisterActivation+0xf2>
   1be88:	e01b      	b.n	1bec2 <cosem_setRegisterActivation+0x22a>
                }
                arr_push(&object->maskList, key_init(start, end));
            }
        }
    }
    else if (index == 4)
   1be8a:	7afb      	ldrb	r3, [r7, #11]
   1be8c:	2b04      	cmp	r3, #4
   1be8e:	d115      	bne.n	1bebc <cosem_setRegisterActivation+0x224>
    {
        bb_clear(&object->activeMask);
   1be90:	68fb      	ldr	r3, [r7, #12]
   1be92:	3330      	adds	r3, #48	; 0x30
   1be94:	4618      	mov	r0, r3
   1be96:	f7e7 fc65 	bl	3764 <bb_clear>
        bb_set2(&object->activeMask, value->byteArr, 0, bb_size(value->byteArr));
   1be9a:	68fb      	ldr	r3, [r7, #12]
   1be9c:	f103 0430 	add.w	r4, r3, #48	; 0x30
   1bea0:	687b      	ldr	r3, [r7, #4]
   1bea2:	689d      	ldr	r5, [r3, #8]
   1bea4:	687b      	ldr	r3, [r7, #4]
   1bea6:	689b      	ldr	r3, [r3, #8]
   1bea8:	4618      	mov	r0, r3
   1beaa:	f7e6 ff0d 	bl	2cc8 <bb_size>
   1beae:	4603      	mov	r3, r0
   1beb0:	2200      	movs	r2, #0
   1beb2:	4629      	mov	r1, r5
   1beb4:	4620      	mov	r0, r4
   1beb6:	f7e7 fbb3 	bl	3620 <bb_set2>
   1beba:	e002      	b.n	1bec2 <cosem_setRegisterActivation+0x22a>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1bebc:	f44f 7381 	mov.w	r3, #258	; 0x102
   1bec0:	e000      	b.n	1bec4 <cosem_setRegisterActivation+0x22c>
    }
    return DLMS_ERROR_CODE_OK;
   1bec2:	2300      	movs	r3, #0
}
   1bec4:	4618      	mov	r0, r3
   1bec6:	3730      	adds	r7, #48	; 0x30
   1bec8:	46bd      	mov	sp, r7
   1beca:	bdb0      	pop	{r4, r5, r7, pc}

0001becc <cosem_setRegisterMonitor>:
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int cosem_setRegisterMonitor(gxRegisterMonitor* object, unsigned char index, dlmsVARIANT *value)
{
   1becc:	b580      	push	{r7, lr}
   1bece:	b08a      	sub	sp, #40	; 0x28
   1bed0:	af00      	add	r7, sp, #0
   1bed2:	60f8      	str	r0, [r7, #12]
   1bed4:	460b      	mov	r3, r1
   1bed6:	607a      	str	r2, [r7, #4]
   1bed8:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3, *tmp4;
    gxActionSet* actionSet;

    if (index == 2)
   1beda:	7afb      	ldrb	r3, [r7, #11]
   1bedc:	2b02      	cmp	r3, #2
   1bede:	d14b      	bne.n	1bf78 <cosem_setRegisterMonitor+0xac>
    {
        va_clear(&object->thresholds);
   1bee0:	68fb      	ldr	r3, [r7, #12]
   1bee2:	332c      	adds	r3, #44	; 0x2c
   1bee4:	4618      	mov	r0, r3
   1bee6:	f00a ff2d 	bl	26d44 <va_clear>
        if (value->Arr != NULL)
   1beea:	687b      	ldr	r3, [r7, #4]
   1beec:	689b      	ldr	r3, [r3, #8]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	f000 813a 	beq.w	1c168 <cosem_setRegisterMonitor+0x29c>
        {
            va_capacity(&object->thresholds, value->Arr->size);
   1bef4:	68fb      	ldr	r3, [r7, #12]
   1bef6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1befa:	687b      	ldr	r3, [r7, #4]
   1befc:	689b      	ldr	r3, [r3, #8]
   1befe:	88db      	ldrh	r3, [r3, #6]
   1bf00:	4619      	mov	r1, r3
   1bf02:	4610      	mov	r0, r2
   1bf04:	f00a fe8a 	bl	26c1c <va_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bf08:	2300      	movs	r3, #0
   1bf0a:	627b      	str	r3, [r7, #36]	; 0x24
   1bf0c:	e02c      	b.n	1bf68 <cosem_setRegisterMonitor+0x9c>
            {
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1bf0e:	687b      	ldr	r3, [r7, #4]
   1bf10:	689b      	ldr	r3, [r3, #8]
   1bf12:	f107 0218 	add.w	r2, r7, #24
   1bf16:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1bf18:	4618      	mov	r0, r3
   1bf1a:	f00a ffa7 	bl	26e6c <va_getByIndex>
   1bf1e:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1bf20:	6a3b      	ldr	r3, [r7, #32]
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d001      	beq.n	1bf2a <cosem_setRegisterMonitor+0x5e>
                {
                    return ret;
   1bf26:	6a3b      	ldr	r3, [r7, #32]
   1bf28:	e11f      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                tmp3 = (dlmsVARIANT *)gxmalloc(sizeof(dlmsVARIANT));
   1bf2a:	2010      	movs	r0, #16
   1bf2c:	f00d fd8a 	bl	29a44 <malloc>
   1bf30:	4603      	mov	r3, r0
   1bf32:	617b      	str	r3, [r7, #20]
                var_init(tmp3);
   1bf34:	697b      	ldr	r3, [r7, #20]
   1bf36:	4618      	mov	r0, r3
   1bf38:	f00a f8f6 	bl	26128 <var_init>
                ret = var_copy(tmp3, tmp);
   1bf3c:	697b      	ldr	r3, [r7, #20]
   1bf3e:	69ba      	ldr	r2, [r7, #24]
   1bf40:	4611      	mov	r1, r2
   1bf42:	4618      	mov	r0, r3
   1bf44:	f00b ff16 	bl	27d74 <var_copy>
   1bf48:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1bf4a:	6a3b      	ldr	r3, [r7, #32]
   1bf4c:	2b00      	cmp	r3, #0
   1bf4e:	d001      	beq.n	1bf54 <cosem_setRegisterMonitor+0x88>
                {
                    return ret;
   1bf50:	6a3b      	ldr	r3, [r7, #32]
   1bf52:	e10a      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                va_push(&object->thresholds, tmp3);
   1bf54:	68fb      	ldr	r3, [r7, #12]
   1bf56:	332c      	adds	r3, #44	; 0x2c
   1bf58:	697a      	ldr	r2, [r7, #20]
   1bf5a:	4611      	mov	r1, r2
   1bf5c:	4618      	mov	r0, r3
   1bf5e:	f00a fe9d 	bl	26c9c <va_push>
    {
        va_clear(&object->thresholds);
        if (value->Arr != NULL)
        {
            va_capacity(&object->thresholds, value->Arr->size);
            for (pos = 0; pos != value->Arr->size; ++pos)
   1bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf64:	3301      	adds	r3, #1
   1bf66:	627b      	str	r3, [r7, #36]	; 0x24
   1bf68:	687b      	ldr	r3, [r7, #4]
   1bf6a:	689b      	ldr	r3, [r3, #8]
   1bf6c:	88db      	ldrh	r3, [r3, #6]
   1bf6e:	461a      	mov	r2, r3
   1bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf72:	429a      	cmp	r2, r3
   1bf74:	d1cb      	bne.n	1bf0e <cosem_setRegisterMonitor+0x42>
   1bf76:	e0f7      	b.n	1c168 <cosem_setRegisterMonitor+0x29c>
                }
                va_push(&object->thresholds, tmp3);
            }
        }
    }
    else if (index == 3)
   1bf78:	7afb      	ldrb	r3, [r7, #11]
   1bf7a:	2b03      	cmp	r3, #3
   1bf7c:	d145      	bne.n	1c00a <cosem_setRegisterMonitor+0x13e>
    {
        ret = va_get(value->Arr, &tmp);
   1bf7e:	687b      	ldr	r3, [r7, #4]
   1bf80:	689b      	ldr	r3, [r3, #8]
   1bf82:	f107 0218 	add.w	r2, r7, #24
   1bf86:	4611      	mov	r1, r2
   1bf88:	4618      	mov	r0, r3
   1bf8a:	f00a ff49 	bl	26e20 <va_get>
   1bf8e:	6238      	str	r0, [r7, #32]
        if (ret != DLMS_ERROR_CODE_OK)
   1bf90:	6a3b      	ldr	r3, [r7, #32]
   1bf92:	2b00      	cmp	r3, #0
   1bf94:	d001      	beq.n	1bf9a <cosem_setRegisterMonitor+0xce>
        {
            return ret;
   1bf96:	6a3b      	ldr	r3, [r7, #32]
   1bf98:	e0e7      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
        }
        object->monitoredValue.objectType = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1bf9a:	69bb      	ldr	r3, [r7, #24]
   1bf9c:	4618      	mov	r0, r3
   1bf9e:	f00a fd95 	bl	26acc <var_toInteger>
   1bfa2:	4603      	mov	r3, r0
   1bfa4:	b29a      	uxth	r2, r3
   1bfa6:	68fb      	ldr	r3, [r7, #12]
   1bfa8:	841a      	strh	r2, [r3, #32]
        ret = va_get(value->Arr, &tmp);
   1bfaa:	687b      	ldr	r3, [r7, #4]
   1bfac:	689b      	ldr	r3, [r3, #8]
   1bfae:	f107 0218 	add.w	r2, r7, #24
   1bfb2:	4611      	mov	r1, r2
   1bfb4:	4618      	mov	r0, r3
   1bfb6:	f00a ff33 	bl	26e20 <va_get>
   1bfba:	6238      	str	r0, [r7, #32]
        if (ret != DLMS_ERROR_CODE_OK)
   1bfbc:	6a3b      	ldr	r3, [r7, #32]
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	d001      	beq.n	1bfc6 <cosem_setRegisterMonitor+0xfa>
        {
            return ret;
   1bfc2:	6a3b      	ldr	r3, [r7, #32]
   1bfc4:	e0d1      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
        }
        memcpy(object->monitoredValue.logicalName, tmp->byteArr->data, 6);
   1bfc6:	68fb      	ldr	r3, [r7, #12]
   1bfc8:	f103 0022 	add.w	r0, r3, #34	; 0x22
   1bfcc:	69bb      	ldr	r3, [r7, #24]
   1bfce:	689b      	ldr	r3, [r3, #8]
   1bfd0:	681b      	ldr	r3, [r3, #0]
   1bfd2:	2206      	movs	r2, #6
   1bfd4:	4619      	mov	r1, r3
   1bfd6:	f00d fd54 	bl	29a82 <memcpy>
        ret = va_get(value->Arr, &tmp);
   1bfda:	687b      	ldr	r3, [r7, #4]
   1bfdc:	689b      	ldr	r3, [r3, #8]
   1bfde:	f107 0218 	add.w	r2, r7, #24
   1bfe2:	4611      	mov	r1, r2
   1bfe4:	4618      	mov	r0, r3
   1bfe6:	f00a ff1b 	bl	26e20 <va_get>
   1bfea:	6238      	str	r0, [r7, #32]
        if (ret != DLMS_ERROR_CODE_OK)
   1bfec:	6a3b      	ldr	r3, [r7, #32]
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d001      	beq.n	1bff6 <cosem_setRegisterMonitor+0x12a>
        {
            return ret;
   1bff2:	6a3b      	ldr	r3, [r7, #32]
   1bff4:	e0b9      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
        }
        object->monitoredValue.attributeIndex = (unsigned char)var_toInteger(tmp);
   1bff6:	69bb      	ldr	r3, [r7, #24]
   1bff8:	4618      	mov	r0, r3
   1bffa:	f00a fd67 	bl	26acc <var_toInteger>
   1bffe:	4603      	mov	r3, r0
   1c000:	b2da      	uxtb	r2, r3
   1c002:	68fb      	ldr	r3, [r7, #12]
   1c004:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1c008:	e0ae      	b.n	1c168 <cosem_setRegisterMonitor+0x29c>
    }
    else if (index == 4)
   1c00a:	7afb      	ldrb	r3, [r7, #11]
   1c00c:	2b04      	cmp	r3, #4
   1c00e:	f040 80a8 	bne.w	1c162 <cosem_setRegisterMonitor+0x296>
    {
        obj_clearRegisterMonitorActions(&object->actions);
   1c012:	68fb      	ldr	r3, [r7, #12]
   1c014:	3310      	adds	r3, #16
   1c016:	4618      	mov	r0, r3
   1c018:	f7fa fffc 	bl	17014 <obj_clearRegisterMonitorActions>
        if (value->Arr != NULL)
   1c01c:	687b      	ldr	r3, [r7, #4]
   1c01e:	689b      	ldr	r3, [r3, #8]
   1c020:	2b00      	cmp	r3, #0
   1c022:	f000 80a1 	beq.w	1c168 <cosem_setRegisterMonitor+0x29c>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c026:	2300      	movs	r3, #0
   1c028:	627b      	str	r3, [r7, #36]	; 0x24
   1c02a:	e091      	b.n	1c150 <cosem_setRegisterMonitor+0x284>
            {
                ret = va_get(value->Arr, &tmp4);
   1c02c:	687b      	ldr	r3, [r7, #4]
   1c02e:	689b      	ldr	r3, [r3, #8]
   1c030:	f107 0210 	add.w	r2, r7, #16
   1c034:	4611      	mov	r1, r2
   1c036:	4618      	mov	r0, r3
   1c038:	f00a fef2 	bl	26e20 <va_get>
   1c03c:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c03e:	6a3b      	ldr	r3, [r7, #32]
   1c040:	2b00      	cmp	r3, #0
   1c042:	d001      	beq.n	1c048 <cosem_setRegisterMonitor+0x17c>
                {
                    return ret;
   1c044:	6a3b      	ldr	r3, [r7, #32]
   1c046:	e090      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }

                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   1c048:	2010      	movs	r0, #16
   1c04a:	f00d fcfb 	bl	29a44 <malloc>
   1c04e:	4603      	mov	r3, r0
   1c050:	61fb      	str	r3, [r7, #28]
                //Update action up.
                ret = va_get(tmp4->Arr, &tmp3);
   1c052:	693b      	ldr	r3, [r7, #16]
   1c054:	689b      	ldr	r3, [r3, #8]
   1c056:	f107 0214 	add.w	r2, r7, #20
   1c05a:	4611      	mov	r1, r2
   1c05c:	4618      	mov	r0, r3
   1c05e:	f00a fedf 	bl	26e20 <va_get>
   1c062:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c064:	6a3b      	ldr	r3, [r7, #32]
   1c066:	2b00      	cmp	r3, #0
   1c068:	d001      	beq.n	1c06e <cosem_setRegisterMonitor+0x1a2>
                {
                    return ret;
   1c06a:	6a3b      	ldr	r3, [r7, #32]
   1c06c:	e07d      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                ret = va_get(tmp3->Arr, &tmp);
   1c06e:	697b      	ldr	r3, [r7, #20]
   1c070:	689b      	ldr	r3, [r3, #8]
   1c072:	f107 0218 	add.w	r2, r7, #24
   1c076:	4611      	mov	r1, r2
   1c078:	4618      	mov	r0, r3
   1c07a:	f00a fed1 	bl	26e20 <va_get>
   1c07e:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c080:	6a3b      	ldr	r3, [r7, #32]
   1c082:	2b00      	cmp	r3, #0
   1c084:	d001      	beq.n	1c08a <cosem_setRegisterMonitor+0x1be>
                {
                    return ret;
   1c086:	6a3b      	ldr	r3, [r7, #32]
   1c088:	e06f      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                memcpy(actionSet->actionUp.logicalName, tmp->byteArr->data, 6);
   1c08a:	69f8      	ldr	r0, [r7, #28]
   1c08c:	69bb      	ldr	r3, [r7, #24]
   1c08e:	689b      	ldr	r3, [r3, #8]
   1c090:	681b      	ldr	r3, [r3, #0]
   1c092:	2206      	movs	r2, #6
   1c094:	4619      	mov	r1, r3
   1c096:	f00d fcf4 	bl	29a82 <memcpy>

                ret = va_get(tmp3->Arr, &tmp);
   1c09a:	697b      	ldr	r3, [r7, #20]
   1c09c:	689b      	ldr	r3, [r3, #8]
   1c09e:	f107 0218 	add.w	r2, r7, #24
   1c0a2:	4611      	mov	r1, r2
   1c0a4:	4618      	mov	r0, r3
   1c0a6:	f00a febb 	bl	26e20 <va_get>
   1c0aa:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c0ac:	6a3b      	ldr	r3, [r7, #32]
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d001      	beq.n	1c0b6 <cosem_setRegisterMonitor+0x1ea>
                {
                    return ret;
   1c0b2:	6a3b      	ldr	r3, [r7, #32]
   1c0b4:	e059      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                actionSet->actionUp.scriptSelector = (unsigned short)var_toInteger(tmp);
   1c0b6:	69bb      	ldr	r3, [r7, #24]
   1c0b8:	4618      	mov	r0, r3
   1c0ba:	f00a fd07 	bl	26acc <var_toInteger>
   1c0be:	4603      	mov	r3, r0
   1c0c0:	b29a      	uxth	r2, r3
   1c0c2:	69fb      	ldr	r3, [r7, #28]
   1c0c4:	80da      	strh	r2, [r3, #6]
                //Update action down.
                ret = va_get(tmp4->Arr, &tmp3);
   1c0c6:	693b      	ldr	r3, [r7, #16]
   1c0c8:	689b      	ldr	r3, [r3, #8]
   1c0ca:	f107 0214 	add.w	r2, r7, #20
   1c0ce:	4611      	mov	r1, r2
   1c0d0:	4618      	mov	r0, r3
   1c0d2:	f00a fea5 	bl	26e20 <va_get>
   1c0d6:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c0d8:	6a3b      	ldr	r3, [r7, #32]
   1c0da:	2b00      	cmp	r3, #0
   1c0dc:	d001      	beq.n	1c0e2 <cosem_setRegisterMonitor+0x216>
                {
                    return ret;
   1c0de:	6a3b      	ldr	r3, [r7, #32]
   1c0e0:	e043      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                ret = va_get(tmp3->Arr, &tmp);
   1c0e2:	697b      	ldr	r3, [r7, #20]
   1c0e4:	689b      	ldr	r3, [r3, #8]
   1c0e6:	f107 0218 	add.w	r2, r7, #24
   1c0ea:	4611      	mov	r1, r2
   1c0ec:	4618      	mov	r0, r3
   1c0ee:	f00a fe97 	bl	26e20 <va_get>
   1c0f2:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c0f4:	6a3b      	ldr	r3, [r7, #32]
   1c0f6:	2b00      	cmp	r3, #0
   1c0f8:	d001      	beq.n	1c0fe <cosem_setRegisterMonitor+0x232>
                {
                    return ret;
   1c0fa:	6a3b      	ldr	r3, [r7, #32]
   1c0fc:	e035      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }

                memcpy(actionSet->actionDown.logicalName, tmp->byteArr->data, 6);
   1c0fe:	69fb      	ldr	r3, [r7, #28]
   1c100:	f103 0008 	add.w	r0, r3, #8
   1c104:	69bb      	ldr	r3, [r7, #24]
   1c106:	689b      	ldr	r3, [r3, #8]
   1c108:	681b      	ldr	r3, [r3, #0]
   1c10a:	2206      	movs	r2, #6
   1c10c:	4619      	mov	r1, r3
   1c10e:	f00d fcb8 	bl	29a82 <memcpy>
                ret = va_get(tmp3->Arr, &tmp);
   1c112:	697b      	ldr	r3, [r7, #20]
   1c114:	689b      	ldr	r3, [r3, #8]
   1c116:	f107 0218 	add.w	r2, r7, #24
   1c11a:	4611      	mov	r1, r2
   1c11c:	4618      	mov	r0, r3
   1c11e:	f00a fe7f 	bl	26e20 <va_get>
   1c122:	6238      	str	r0, [r7, #32]
                if (ret != DLMS_ERROR_CODE_OK)
   1c124:	6a3b      	ldr	r3, [r7, #32]
   1c126:	2b00      	cmp	r3, #0
   1c128:	d001      	beq.n	1c12e <cosem_setRegisterMonitor+0x262>
                {
                    return ret;
   1c12a:	6a3b      	ldr	r3, [r7, #32]
   1c12c:	e01d      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
                }
                actionSet->actionDown.scriptSelector = (unsigned short)var_toInteger(tmp);
   1c12e:	69bb      	ldr	r3, [r7, #24]
   1c130:	4618      	mov	r0, r3
   1c132:	f00a fccb 	bl	26acc <var_toInteger>
   1c136:	4603      	mov	r3, r0
   1c138:	b29a      	uxth	r2, r3
   1c13a:	69fb      	ldr	r3, [r7, #28]
   1c13c:	81da      	strh	r2, [r3, #14]
                arr_push(&object->actions, actionSet);
   1c13e:	68fb      	ldr	r3, [r7, #12]
   1c140:	3310      	adds	r3, #16
   1c142:	69f9      	ldr	r1, [r7, #28]
   1c144:	4618      	mov	r0, r3
   1c146:	f7f0 fa9b 	bl	c680 <arr_push>
    else if (index == 4)
    {
        obj_clearRegisterMonitorActions(&object->actions);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c14c:	3301      	adds	r3, #1
   1c14e:	627b      	str	r3, [r7, #36]	; 0x24
   1c150:	687b      	ldr	r3, [r7, #4]
   1c152:	689b      	ldr	r3, [r3, #8]
   1c154:	88db      	ldrh	r3, [r3, #6]
   1c156:	461a      	mov	r2, r3
   1c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c15a:	429a      	cmp	r2, r3
   1c15c:	f47f af66 	bne.w	1c02c <cosem_setRegisterMonitor+0x160>
   1c160:	e002      	b.n	1c168 <cosem_setRegisterMonitor+0x29c>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1c162:	f44f 7381 	mov.w	r3, #258	; 0x102
   1c166:	e000      	b.n	1c16a <cosem_setRegisterMonitor+0x29e>
    }
    return DLMS_ERROR_CODE_OK;
   1c168:	2300      	movs	r3, #0
}
   1c16a:	4618      	mov	r0, r3
   1c16c:	3728      	adds	r7, #40	; 0x28
   1c16e:	46bd      	mov	sp, r7
   1c170:	bd80      	pop	{r7, pc}
   1c172:	bf00      	nop

0001c174 <cosem_setSapAssignment>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int cosem_setSapAssignment(gxSapAssignment* object, unsigned char index, dlmsVARIANT *value)
{
   1c174:	b580      	push	{r7, lr}
   1c176:	b08a      	sub	sp, #40	; 0x28
   1c178:	af00      	add	r7, sp, #0
   1c17a:	60f8      	str	r0, [r7, #12]
   1c17c:	460b      	mov	r3, r1
   1c17e:	607a      	str	r2, [r7, #4]
   1c180:	72fb      	strb	r3, [r7, #11]
    int ret = DLMS_ERROR_CODE_OK, pos;
   1c182:	2300      	movs	r3, #0
   1c184:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT *tmp, *tmp2;
    gxSapItem* it;
    if (index == 2)
   1c186:	7afb      	ldrb	r3, [r7, #11]
   1c188:	2b02      	cmp	r3, #2
   1c18a:	d163      	bne.n	1c254 <cosem_setSapAssignment+0xe0>
    {
        obj_clearSapList(&object->sapAssignmentList);
   1c18c:	68fb      	ldr	r3, [r7, #12]
   1c18e:	3310      	adds	r3, #16
   1c190:	4618      	mov	r0, r3
   1c192:	f7fa fe45 	bl	16e20 <obj_clearSapList>
        if (value->Arr != NULL)
   1c196:	687b      	ldr	r3, [r7, #4]
   1c198:	689b      	ldr	r3, [r3, #8]
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d05d      	beq.n	1c25a <cosem_setSapAssignment+0xe6>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c19e:	2300      	movs	r3, #0
   1c1a0:	623b      	str	r3, [r7, #32]
   1c1a2:	e04f      	b.n	1c244 <cosem_setSapAssignment+0xd0>
            {
                ret = va_get(value->Arr, &tmp);
   1c1a4:	687b      	ldr	r3, [r7, #4]
   1c1a6:	689b      	ldr	r3, [r3, #8]
   1c1a8:	f107 0218 	add.w	r2, r7, #24
   1c1ac:	4611      	mov	r1, r2
   1c1ae:	4618      	mov	r0, r3
   1c1b0:	f00a fe36 	bl	26e20 <va_get>
   1c1b4:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1b8:	2b00      	cmp	r3, #0
   1c1ba:	d001      	beq.n	1c1c0 <cosem_setSapAssignment+0x4c>
                {
                    return ret;
   1c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1be:	e04d      	b.n	1c25c <cosem_setSapAssignment+0xe8>
                }
                ret = va_get(tmp->Arr, &tmp2);
   1c1c0:	69bb      	ldr	r3, [r7, #24]
   1c1c2:	689b      	ldr	r3, [r3, #8]
   1c1c4:	f107 0214 	add.w	r2, r7, #20
   1c1c8:	4611      	mov	r1, r2
   1c1ca:	4618      	mov	r0, r3
   1c1cc:	f00a fe28 	bl	26e20 <va_get>
   1c1d0:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1d4:	2b00      	cmp	r3, #0
   1c1d6:	d001      	beq.n	1c1dc <cosem_setSapAssignment+0x68>
                {
                    return ret;
   1c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1da:	e03f      	b.n	1c25c <cosem_setSapAssignment+0xe8>
                }
                it = (gxSapItem*)gxmalloc(sizeof(gxSapItem));
   1c1dc:	2010      	movs	r0, #16
   1c1de:	f00d fc31 	bl	29a44 <malloc>
   1c1e2:	4603      	mov	r3, r0
   1c1e4:	61fb      	str	r3, [r7, #28]
                bb_init(&it->name);
   1c1e6:	69fb      	ldr	r3, [r7, #28]
   1c1e8:	3304      	adds	r3, #4
   1c1ea:	4618      	mov	r0, r3
   1c1ec:	f7e6 fd7c 	bl	2ce8 <bb_init>
                it->id = (unsigned short)var_toInteger(tmp2);
   1c1f0:	697b      	ldr	r3, [r7, #20]
   1c1f2:	4618      	mov	r0, r3
   1c1f4:	f00a fc6a 	bl	26acc <var_toInteger>
   1c1f8:	4603      	mov	r3, r0
   1c1fa:	b29a      	uxth	r2, r3
   1c1fc:	69fb      	ldr	r3, [r7, #28]
   1c1fe:	801a      	strh	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp2);
   1c200:	69bb      	ldr	r3, [r7, #24]
   1c202:	689b      	ldr	r3, [r3, #8]
   1c204:	f107 0214 	add.w	r2, r7, #20
   1c208:	4611      	mov	r1, r2
   1c20a:	4618      	mov	r0, r3
   1c20c:	f00a fe08 	bl	26e20 <va_get>
   1c210:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c214:	2b00      	cmp	r3, #0
   1c216:	d001      	beq.n	1c21c <cosem_setSapAssignment+0xa8>
                {
                    return ret;
   1c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c21a:	e01f      	b.n	1c25c <cosem_setSapAssignment+0xe8>
                }
                bb_set(&it->name, tmp2->byteArr->data, tmp2->byteArr->size);
   1c21c:	69fb      	ldr	r3, [r7, #28]
   1c21e:	1d18      	adds	r0, r3, #4
   1c220:	697b      	ldr	r3, [r7, #20]
   1c222:	689b      	ldr	r3, [r3, #8]
   1c224:	6819      	ldr	r1, [r3, #0]
   1c226:	697b      	ldr	r3, [r7, #20]
   1c228:	689b      	ldr	r3, [r3, #8]
   1c22a:	88db      	ldrh	r3, [r3, #6]
   1c22c:	461a      	mov	r2, r3
   1c22e:	f7e7 f997 	bl	3560 <bb_set>
                arr_push(&object->sapAssignmentList, it);
   1c232:	68fb      	ldr	r3, [r7, #12]
   1c234:	3310      	adds	r3, #16
   1c236:	69f9      	ldr	r1, [r7, #28]
   1c238:	4618      	mov	r0, r3
   1c23a:	f7f0 fa21 	bl	c680 <arr_push>
    if (index == 2)
    {
        obj_clearSapList(&object->sapAssignmentList);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c23e:	6a3b      	ldr	r3, [r7, #32]
   1c240:	3301      	adds	r3, #1
   1c242:	623b      	str	r3, [r7, #32]
   1c244:	687b      	ldr	r3, [r7, #4]
   1c246:	689b      	ldr	r3, [r3, #8]
   1c248:	88db      	ldrh	r3, [r3, #6]
   1c24a:	461a      	mov	r2, r3
   1c24c:	6a3b      	ldr	r3, [r7, #32]
   1c24e:	429a      	cmp	r2, r3
   1c250:	d1a8      	bne.n	1c1a4 <cosem_setSapAssignment+0x30>
   1c252:	e002      	b.n	1c25a <cosem_setSapAssignment+0xe6>
            }
        }
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1c254:	f44f 7381 	mov.w	r3, #258	; 0x102
   1c258:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   1c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c25c:	4618      	mov	r0, r3
   1c25e:	3728      	adds	r7, #40	; 0x28
   1c260:	46bd      	mov	sp, r7
   1c262:	bd80      	pop	{r7, pc}

0001c264 <cosem_setSchedule>:
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_SCHEDULE
int cosem_setSchedule(gxSchedule* object, unsigned char index, dlmsVARIANT *value)
{
   1c264:	b580      	push	{r7, lr}
   1c266:	b08e      	sub	sp, #56	; 0x38
   1c268:	af00      	add	r7, sp, #0
   1c26a:	60f8      	str	r0, [r7, #12]
   1c26c:	460b      	mov	r3, r1
   1c26e:	607a      	str	r2, [r7, #4]
   1c270:	72fb      	strb	r3, [r7, #11]
    gxScheduleEntry* se;
    int ret, pos;
    dlmsVARIANT *tmp, *it;
    dlmsVARIANT tmp3;
    if (index == 2)
   1c272:	7afb      	ldrb	r3, [r7, #11]
   1c274:	2b02      	cmp	r3, #2
   1c276:	f040 814e 	bne.w	1c516 <cosem_setSchedule+0x2b2>
    {
        arr_clear(&object->entries);
   1c27a:	68fb      	ldr	r3, [r7, #12]
   1c27c:	3310      	adds	r3, #16
   1c27e:	4618      	mov	r0, r3
   1c280:	f7f0 fa46 	bl	c710 <arr_clear>
        var_init(&tmp3);
   1c284:	f107 0310 	add.w	r3, r7, #16
   1c288:	4618      	mov	r0, r3
   1c28a:	f009 ff4d 	bl	26128 <var_init>
        if (value->Arr != NULL)
   1c28e:	687b      	ldr	r3, [r7, #4]
   1c290:	689b      	ldr	r3, [r3, #8]
   1c292:	2b00      	cmp	r3, #0
   1c294:	f000 8142 	beq.w	1c51c <cosem_setSchedule+0x2b8>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c298:	2300      	movs	r3, #0
   1c29a:	637b      	str	r3, [r7, #52]	; 0x34
   1c29c:	e132      	b.n	1c504 <cosem_setSchedule+0x2a0>
            {
                ret = va_get(value->Arr, &tmp);
   1c29e:	687b      	ldr	r3, [r7, #4]
   1c2a0:	689b      	ldr	r3, [r3, #8]
   1c2a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c2a6:	4611      	mov	r1, r2
   1c2a8:	4618      	mov	r0, r3
   1c2aa:	f00a fdb9 	bl	26e20 <va_get>
   1c2ae:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2b2:	2b00      	cmp	r3, #0
   1c2b4:	d001      	beq.n	1c2ba <cosem_setSchedule+0x56>
                {
                    return ret;
   1c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2b8:	e131      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                se = (gxScheduleEntry*)gxmalloc(sizeof(gxScheduleEntry));
   1c2ba:	20b8      	movs	r0, #184	; 0xb8
   1c2bc:	f00d fbc2 	bl	29a44 <malloc>
   1c2c0:	4603      	mov	r3, r0
   1c2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                ba_init(&se->execWeekdays);
   1c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c2c6:	3340      	adds	r3, #64	; 0x40
   1c2c8:	4618      	mov	r0, r3
   1c2ca:	f7e6 fa95 	bl	27f8 <ba_init>
                ba_init(&se->execSpecDays);
   1c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c2d0:	334c      	adds	r3, #76	; 0x4c
   1c2d2:	4618      	mov	r0, r3
   1c2d4:	f7e6 fa90 	bl	27f8 <ba_init>
                ret = va_get(tmp->Arr, &it);
   1c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c2da:	689b      	ldr	r3, [r3, #8]
   1c2dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c2e0:	4611      	mov	r1, r2
   1c2e2:	4618      	mov	r0, r3
   1c2e4:	f00a fd9c 	bl	26e20 <va_get>
   1c2e8:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	d001      	beq.n	1c2f4 <cosem_setSchedule+0x90>
                {
                    return ret;
   1c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c2f2:	e114      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                se->index = (unsigned short)var_toInteger(it);
   1c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c2f6:	4618      	mov	r0, r3
   1c2f8:	f00a fbe8 	bl	26acc <var_toInteger>
   1c2fc:	4603      	mov	r3, r0
   1c2fe:	b29a      	uxth	r2, r3
   1c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c302:	801a      	strh	r2, [r3, #0]
                ret = va_get(tmp->Arr, &it);
   1c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c306:	689b      	ldr	r3, [r3, #8]
   1c308:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c30c:	4611      	mov	r1, r2
   1c30e:	4618      	mov	r0, r3
   1c310:	f00a fd86 	bl	26e20 <va_get>
   1c314:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d001      	beq.n	1c320 <cosem_setSchedule+0xbc>
                {
                    return ret;
   1c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c31e:	e0fe      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                se->enable = (unsigned char)var_toInteger(it);
   1c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c322:	4618      	mov	r0, r3
   1c324:	f00a fbd2 	bl	26acc <var_toInteger>
   1c328:	4603      	mov	r3, r0
   1c32a:	b2da      	uxtb	r2, r3
   1c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c32e:	709a      	strb	r2, [r3, #2]

                ret = va_get(tmp->Arr, &it);
   1c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c332:	689b      	ldr	r3, [r3, #8]
   1c334:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c338:	4611      	mov	r1, r2
   1c33a:	4618      	mov	r0, r3
   1c33c:	f00a fd70 	bl	26e20 <va_get>
   1c340:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c344:	2b00      	cmp	r3, #0
   1c346:	d001      	beq.n	1c34c <cosem_setSchedule+0xe8>
                {
                    return ret;
   1c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c34a:	e0e8      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                memcpy(se->logicalName, it->byteArr->data, it->byteArr->size);
   1c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c34e:	1cd8      	adds	r0, r3, #3
   1c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c352:	689b      	ldr	r3, [r3, #8]
   1c354:	6819      	ldr	r1, [r3, #0]
   1c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c358:	689b      	ldr	r3, [r3, #8]
   1c35a:	88db      	ldrh	r3, [r3, #6]
   1c35c:	461a      	mov	r2, r3
   1c35e:	f00d fb90 	bl	29a82 <memcpy>

                ret = va_get(tmp->Arr, &it);
   1c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c364:	689b      	ldr	r3, [r3, #8]
   1c366:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c36a:	4611      	mov	r1, r2
   1c36c:	4618      	mov	r0, r3
   1c36e:	f00a fd57 	bl	26e20 <va_get>
   1c372:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c376:	2b00      	cmp	r3, #0
   1c378:	d001      	beq.n	1c37e <cosem_setSchedule+0x11a>
                {
                    return ret;
   1c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c37c:	e0cf      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                se->scriptSelector = (unsigned short)var_toInteger(it);
   1c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c380:	4618      	mov	r0, r3
   1c382:	f00a fba3 	bl	26acc <var_toInteger>
   1c386:	4603      	mov	r3, r0
   1c388:	b29a      	uxth	r2, r3
   1c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c38c:	815a      	strh	r2, [r3, #10]

                ret = va_get(tmp->Arr, &it);
   1c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c390:	689b      	ldr	r3, [r3, #8]
   1c392:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c396:	4611      	mov	r1, r2
   1c398:	4618      	mov	r0, r3
   1c39a:	f00a fd41 	bl	26e20 <va_get>
   1c39e:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3a2:	2b00      	cmp	r3, #0
   1c3a4:	d001      	beq.n	1c3aa <cosem_setSchedule+0x146>
                {
                    return ret;
   1c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3a8:	e0b9      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   1c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3ac:	f107 0210 	add.w	r2, r7, #16
   1c3b0:	211a      	movs	r1, #26
   1c3b2:	4618      	mov	r0, r3
   1c3b4:	f7ed fa2a 	bl	980c <dlms_changeType2>
   1c3b8:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3bc:	2b00      	cmp	r3, #0
   1c3be:	d001      	beq.n	1c3c4 <cosem_setSchedule+0x160>
                {
                    return ret;
   1c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3c2:	e0ac      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                time_copy(&se->switchTime, tmp3.dateTime);
   1c3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3c6:	330c      	adds	r3, #12
   1c3c8:	69ba      	ldr	r2, [r7, #24]
   1c3ca:	4611      	mov	r1, r2
   1c3cc:	4618      	mov	r0, r3
   1c3ce:	f7ea fac1 	bl	6954 <time_copy>

                ret = va_get(tmp->Arr, &it);
   1c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3d4:	689b      	ldr	r3, [r3, #8]
   1c3d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c3da:	4611      	mov	r1, r2
   1c3dc:	4618      	mov	r0, r3
   1c3de:	f00a fd1f 	bl	26e20 <va_get>
   1c3e2:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3e6:	2b00      	cmp	r3, #0
   1c3e8:	d001      	beq.n	1c3ee <cosem_setSchedule+0x18a>
                {
                    return ret;
   1c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3ec:	e097      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                se->validityWindow = (unsigned short)var_toInteger(it);
   1c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3f0:	4618      	mov	r0, r3
   1c3f2:	f00a fb6b 	bl	26acc <var_toInteger>
   1c3f6:	4603      	mov	r3, r0
   1c3f8:	b29a      	uxth	r2, r3
   1c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3fc:	879a      	strh	r2, [r3, #60]	; 0x3c

                ret = va_get(tmp->Arr, &it);
   1c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c400:	689b      	ldr	r3, [r3, #8]
   1c402:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c406:	4611      	mov	r1, r2
   1c408:	4618      	mov	r0, r3
   1c40a:	f00a fd09 	bl	26e20 <va_get>
   1c40e:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c412:	2b00      	cmp	r3, #0
   1c414:	d001      	beq.n	1c41a <cosem_setSchedule+0x1b6>
                {
                    return ret;
   1c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c418:	e081      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                if (it->bitArr != NULL)
   1c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c41c:	689b      	ldr	r3, [r3, #8]
   1c41e:	2b00      	cmp	r3, #0
   1c420:	d00b      	beq.n	1c43a <cosem_setSchedule+0x1d6>
                {
                    ba_copy(&se->execWeekdays, it->bitArr->data, (unsigned short)it->bitArr->size);
   1c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c424:	f103 0040 	add.w	r0, r3, #64	; 0x40
   1c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c42a:	689b      	ldr	r3, [r3, #8]
   1c42c:	6819      	ldr	r1, [r3, #0]
   1c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c430:	689b      	ldr	r3, [r3, #8]
   1c432:	88db      	ldrh	r3, [r3, #6]
   1c434:	461a      	mov	r2, r3
   1c436:	f7e6 fb3d 	bl	2ab4 <ba_copy>
                }
                ret = va_get(tmp->Arr, &it);
   1c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c43c:	689b      	ldr	r3, [r3, #8]
   1c43e:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c442:	4611      	mov	r1, r2
   1c444:	4618      	mov	r0, r3
   1c446:	f00a fceb 	bl	26e20 <va_get>
   1c44a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c44e:	2b00      	cmp	r3, #0
   1c450:	d001      	beq.n	1c456 <cosem_setSchedule+0x1f2>
                {
                    return ret;
   1c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c454:	e063      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                if (it->bitArr != NULL)
   1c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c458:	689b      	ldr	r3, [r3, #8]
   1c45a:	2b00      	cmp	r3, #0
   1c45c:	d00b      	beq.n	1c476 <cosem_setSchedule+0x212>
                {
                    ba_copy(&se->execSpecDays, it->bitArr->data, (unsigned short)it->bitArr->size);
   1c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c460:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   1c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c466:	689b      	ldr	r3, [r3, #8]
   1c468:	6819      	ldr	r1, [r3, #0]
   1c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c46c:	689b      	ldr	r3, [r3, #8]
   1c46e:	88db      	ldrh	r3, [r3, #6]
   1c470:	461a      	mov	r2, r3
   1c472:	f7e6 fb1f 	bl	2ab4 <ba_copy>
                }
                ret = va_get(tmp->Arr, &it);
   1c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c478:	689b      	ldr	r3, [r3, #8]
   1c47a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c47e:	4611      	mov	r1, r2
   1c480:	4618      	mov	r0, r3
   1c482:	f00a fccd 	bl	26e20 <va_get>
   1c486:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d001      	beq.n	1c492 <cosem_setSchedule+0x22e>
                {
                    return ret;
   1c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c490:	e045      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   1c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c494:	f107 0210 	add.w	r2, r7, #16
   1c498:	211a      	movs	r1, #26
   1c49a:	4618      	mov	r0, r3
   1c49c:	f7ed f9b6 	bl	980c <dlms_changeType2>
   1c4a0:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4a4:	2b00      	cmp	r3, #0
   1c4a6:	d001      	beq.n	1c4ac <cosem_setSchedule+0x248>
                {
                    return ret;
   1c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4aa:	e038      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                time_copy(&se->beginDate, tmp3.dateTime);
   1c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c4ae:	3358      	adds	r3, #88	; 0x58
   1c4b0:	69ba      	ldr	r2, [r7, #24]
   1c4b2:	4611      	mov	r1, r2
   1c4b4:	4618      	mov	r0, r3
   1c4b6:	f7ea fa4d 	bl	6954 <time_copy>

                ret = va_get(tmp->Arr, &it);
   1c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c4bc:	689b      	ldr	r3, [r3, #8]
   1c4be:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c4c2:	4611      	mov	r1, r2
   1c4c4:	4618      	mov	r0, r3
   1c4c6:	f00a fcab 	bl	26e20 <va_get>
   1c4ca:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4ce:	2b00      	cmp	r3, #0
   1c4d0:	d001      	beq.n	1c4d6 <cosem_setSchedule+0x272>
                {
                    return ret;
   1c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4d4:	e023      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   1c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c4d8:	f107 0210 	add.w	r2, r7, #16
   1c4dc:	211a      	movs	r1, #26
   1c4de:	4618      	mov	r0, r3
   1c4e0:	f7ed f994 	bl	980c <dlms_changeType2>
   1c4e4:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4e8:	2b00      	cmp	r3, #0
   1c4ea:	d001      	beq.n	1c4f0 <cosem_setSchedule+0x28c>
                {
                    return ret;
   1c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4ee:	e016      	b.n	1c51e <cosem_setSchedule+0x2ba>
                }
                time_copy(&se->endDate, tmp3.dateTime);
   1c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c4f2:	3388      	adds	r3, #136	; 0x88
   1c4f4:	69ba      	ldr	r2, [r7, #24]
   1c4f6:	4611      	mov	r1, r2
   1c4f8:	4618      	mov	r0, r3
   1c4fa:	f7ea fa2b 	bl	6954 <time_copy>
    {
        arr_clear(&object->entries);
        var_init(&tmp3);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c500:	3301      	adds	r3, #1
   1c502:	637b      	str	r3, [r7, #52]	; 0x34
   1c504:	687b      	ldr	r3, [r7, #4]
   1c506:	689b      	ldr	r3, [r3, #8]
   1c508:	88db      	ldrh	r3, [r3, #6]
   1c50a:	461a      	mov	r2, r3
   1c50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c50e:	429a      	cmp	r2, r3
   1c510:	f47f aec5 	bne.w	1c29e <cosem_setSchedule+0x3a>
   1c514:	e002      	b.n	1c51c <cosem_setSchedule+0x2b8>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1c516:	f44f 7381 	mov.w	r3, #258	; 0x102
   1c51a:	e000      	b.n	1c51e <cosem_setSchedule+0x2ba>
    }
    return DLMS_ERROR_CODE_OK;
   1c51c:	2300      	movs	r3, #0
}
   1c51e:	4618      	mov	r0, r3
   1c520:	3738      	adds	r7, #56	; 0x38
   1c522:	46bd      	mov	sp, r7
   1c524:	bd80      	pop	{r7, pc}
   1c526:	bf00      	nop

0001c528 <cosem_setScriptTable>:
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
int cosem_setScriptTable(gxScriptTable* object, unsigned char index, dlmsVARIANT *value)
{
   1c528:	b580      	push	{r7, lr}
   1c52a:	b08c      	sub	sp, #48	; 0x30
   1c52c:	af00      	add	r7, sp, #0
   1c52e:	60f8      	str	r0, [r7, #12]
   1c530:	460b      	mov	r3, r1
   1c532:	607a      	str	r2, [r7, #4]
   1c534:	72fb      	strb	r3, [r7, #11]
    int ret, pos, pos2;
    dlmsVARIANT *tmp, *tmp2, *tmp3;
    gxScriptAction* scriptAction;
    gxScript* script;

    if (index == 2)
   1c536:	7afb      	ldrb	r3, [r7, #11]
   1c538:	2b02      	cmp	r3, #2
   1c53a:	f040 81cb 	bne.w	1c8d4 <cosem_setScriptTable+0x3ac>
    {
        obj_clearScriptTable(&object->scripts);
   1c53e:	68fb      	ldr	r3, [r7, #12]
   1c540:	3310      	adds	r3, #16
   1c542:	4618      	mov	r0, r3
   1c544:	f7fa fda2 	bl	1708c <obj_clearScriptTable>
        if (value->Arr->size != 0)
   1c548:	687b      	ldr	r3, [r7, #4]
   1c54a:	689b      	ldr	r3, [r3, #8]
   1c54c:	88db      	ldrh	r3, [r3, #6]
   1c54e:	2b00      	cmp	r3, #0
   1c550:	f000 81c3 	beq.w	1c8da <cosem_setScriptTable+0x3b2>
        {
            ret = va_getByIndex(value->Arr, 0, &tmp);
   1c554:	687b      	ldr	r3, [r7, #4]
   1c556:	689b      	ldr	r3, [r3, #8]
   1c558:	f107 0218 	add.w	r2, r7, #24
   1c55c:	2100      	movs	r1, #0
   1c55e:	4618      	mov	r0, r3
   1c560:	f00a fc84 	bl	26e6c <va_getByIndex>
   1c564:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != DLMS_ERROR_CODE_OK)
   1c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c568:	2b00      	cmp	r3, #0
   1c56a:	d001      	beq.n	1c570 <cosem_setScriptTable+0x48>
            {
                return ret;
   1c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c56e:	e1b5      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
            }
            //Fix Xemex bug here.
            //Xemex meters do not return array as they should be according standard.
            if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1c570:	687b      	ldr	r3, [r7, #4]
   1c572:	781b      	ldrb	r3, [r3, #0]
   1c574:	2b01      	cmp	r3, #1
   1c576:	f040 80eb 	bne.w	1c750 <cosem_setScriptTable+0x228>
            {
                for (pos = 0; pos != value->Arr->size; ++pos)
   1c57a:	2300      	movs	r3, #0
   1c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c57e:	e0de      	b.n	1c73e <cosem_setScriptTable+0x216>
                {
                    ret = va_get(value->Arr, &tmp);
   1c580:	687b      	ldr	r3, [r7, #4]
   1c582:	689b      	ldr	r3, [r3, #8]
   1c584:	f107 0218 	add.w	r2, r7, #24
   1c588:	4611      	mov	r1, r2
   1c58a:	4618      	mov	r0, r3
   1c58c:	f00a fc48 	bl	26e20 <va_get>
   1c590:	6278      	str	r0, [r7, #36]	; 0x24
                    if (ret != DLMS_ERROR_CODE_OK)
   1c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c594:	2b00      	cmp	r3, #0
   1c596:	d001      	beq.n	1c59c <cosem_setScriptTable+0x74>
                    {
                        return ret;
   1c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c59a:	e19f      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                    }
                    ret = va_get(tmp->Arr, &tmp3);
   1c59c:	69bb      	ldr	r3, [r7, #24]
   1c59e:	689b      	ldr	r3, [r3, #8]
   1c5a0:	f107 0210 	add.w	r2, r7, #16
   1c5a4:	4611      	mov	r1, r2
   1c5a6:	4618      	mov	r0, r3
   1c5a8:	f00a fc3a 	bl	26e20 <va_get>
   1c5ac:	6278      	str	r0, [r7, #36]	; 0x24
                    if (ret != DLMS_ERROR_CODE_OK)
   1c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5b0:	2b00      	cmp	r3, #0
   1c5b2:	d001      	beq.n	1c5b8 <cosem_setScriptTable+0x90>
                    {
                        return ret;
   1c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5b6:	e191      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                    }
                    script = (gxScript*)gxmalloc(sizeof(gxScript));
   1c5b8:	2014      	movs	r0, #20
   1c5ba:	f00d fa43 	bl	29a44 <malloc>
   1c5be:	4603      	mov	r3, r0
   1c5c0:	623b      	str	r3, [r7, #32]
                    arr_init(&script->actions);
   1c5c2:	6a3b      	ldr	r3, [r7, #32]
   1c5c4:	3304      	adds	r3, #4
   1c5c6:	4618      	mov	r0, r3
   1c5c8:	f7f0 f810 	bl	c5ec <arr_init>
                    script->id = (unsigned short)var_toInteger(tmp3);
   1c5cc:	693b      	ldr	r3, [r7, #16]
   1c5ce:	4618      	mov	r0, r3
   1c5d0:	f00a fa7c 	bl	26acc <var_toInteger>
   1c5d4:	4603      	mov	r3, r0
   1c5d6:	b29a      	uxth	r2, r3
   1c5d8:	6a3b      	ldr	r3, [r7, #32]
   1c5da:	801a      	strh	r2, [r3, #0]
                    arr_push(&object->scripts, script);
   1c5dc:	68fb      	ldr	r3, [r7, #12]
   1c5de:	3310      	adds	r3, #16
   1c5e0:	6a39      	ldr	r1, [r7, #32]
   1c5e2:	4618      	mov	r0, r3
   1c5e4:	f7f0 f84c 	bl	c680 <arr_push>

                    ret = va_get(tmp->Arr, &tmp3);
   1c5e8:	69bb      	ldr	r3, [r7, #24]
   1c5ea:	689b      	ldr	r3, [r3, #8]
   1c5ec:	f107 0210 	add.w	r2, r7, #16
   1c5f0:	4611      	mov	r1, r2
   1c5f2:	4618      	mov	r0, r3
   1c5f4:	f00a fc14 	bl	26e20 <va_get>
   1c5f8:	6278      	str	r0, [r7, #36]	; 0x24
                    if (ret != DLMS_ERROR_CODE_OK)
   1c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5fc:	2b00      	cmp	r3, #0
   1c5fe:	d001      	beq.n	1c604 <cosem_setScriptTable+0xdc>
                    {
                        return ret;
   1c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c602:	e16b      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                    }
                    for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1c604:	2300      	movs	r3, #0
   1c606:	62bb      	str	r3, [r7, #40]	; 0x28
   1c608:	e08e      	b.n	1c728 <cosem_setScriptTable+0x200>
                    {
                        ret = va_get(tmp3->Arr, &tmp2);
   1c60a:	693b      	ldr	r3, [r7, #16]
   1c60c:	689b      	ldr	r3, [r3, #8]
   1c60e:	f107 0214 	add.w	r2, r7, #20
   1c612:	4611      	mov	r1, r2
   1c614:	4618      	mov	r0, r3
   1c616:	f00a fc03 	bl	26e20 <va_get>
   1c61a:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c61e:	2b00      	cmp	r3, #0
   1c620:	d001      	beq.n	1c626 <cosem_setScriptTable+0xfe>
                        {
                            return ret;
   1c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c624:	e15a      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }
                        ret = va_get(tmp2->Arr, &tmp);
   1c626:	697b      	ldr	r3, [r7, #20]
   1c628:	689b      	ldr	r3, [r3, #8]
   1c62a:	f107 0218 	add.w	r2, r7, #24
   1c62e:	4611      	mov	r1, r2
   1c630:	4618      	mov	r0, r3
   1c632:	f00a fbf5 	bl	26e20 <va_get>
   1c636:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c63a:	2b00      	cmp	r3, #0
   1c63c:	d001      	beq.n	1c642 <cosem_setScriptTable+0x11a>
                        {
                            return ret;
   1c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c640:	e14c      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }

                        scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   1c642:	2028      	movs	r0, #40	; 0x28
   1c644:	f00d f9fe 	bl	29a44 <malloc>
   1c648:	4603      	mov	r3, r0
   1c64a:	61fb      	str	r3, [r7, #28]
                        var_init(&scriptAction->parameter);
   1c64c:	69fb      	ldr	r3, [r7, #28]
   1c64e:	3310      	adds	r3, #16
   1c650:	4618      	mov	r0, r3
   1c652:	f009 fd69 	bl	26128 <var_init>
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   1c656:	69bb      	ldr	r3, [r7, #24]
   1c658:	4618      	mov	r0, r3
   1c65a:	f00a fa37 	bl	26acc <var_toInteger>
   1c65e:	4603      	mov	r3, r0
   1c660:	b2da      	uxtb	r2, r3
   1c662:	69fb      	ldr	r3, [r7, #28]
   1c664:	701a      	strb	r2, [r3, #0]
                        ret = va_get(tmp2->Arr, &tmp);
   1c666:	697b      	ldr	r3, [r7, #20]
   1c668:	689b      	ldr	r3, [r3, #8]
   1c66a:	f107 0218 	add.w	r2, r7, #24
   1c66e:	4611      	mov	r1, r2
   1c670:	4618      	mov	r0, r3
   1c672:	f00a fbd5 	bl	26e20 <va_get>
   1c676:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	d001      	beq.n	1c682 <cosem_setScriptTable+0x15a>
                        {
                            return ret;
   1c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c680:	e12c      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }

                        scriptAction->objectType = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1c682:	69bb      	ldr	r3, [r7, #24]
   1c684:	4618      	mov	r0, r3
   1c686:	f00a fa21 	bl	26acc <var_toInteger>
   1c68a:	4603      	mov	r3, r0
   1c68c:	b29a      	uxth	r2, r3
   1c68e:	69fb      	ldr	r3, [r7, #28]
   1c690:	805a      	strh	r2, [r3, #2]
                        ret = va_get(tmp2->Arr, &tmp);
   1c692:	697b      	ldr	r3, [r7, #20]
   1c694:	689b      	ldr	r3, [r3, #8]
   1c696:	f107 0218 	add.w	r2, r7, #24
   1c69a:	4611      	mov	r1, r2
   1c69c:	4618      	mov	r0, r3
   1c69e:	f00a fbbf 	bl	26e20 <va_get>
   1c6a2:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6a6:	2b00      	cmp	r3, #0
   1c6a8:	d001      	beq.n	1c6ae <cosem_setScriptTable+0x186>
                        {
                            return ret;
   1c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6ac:	e116      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }
                        memcpy(scriptAction->logicalName, tmp->byteArr, 6);
   1c6ae:	69fb      	ldr	r3, [r7, #28]
   1c6b0:	1d18      	adds	r0, r3, #4
   1c6b2:	69bb      	ldr	r3, [r7, #24]
   1c6b4:	689b      	ldr	r3, [r3, #8]
   1c6b6:	2206      	movs	r2, #6
   1c6b8:	4619      	mov	r1, r3
   1c6ba:	f00d f9e2 	bl	29a82 <memcpy>
                        ret = va_get(tmp2->Arr, &tmp);
   1c6be:	697b      	ldr	r3, [r7, #20]
   1c6c0:	689b      	ldr	r3, [r3, #8]
   1c6c2:	f107 0218 	add.w	r2, r7, #24
   1c6c6:	4611      	mov	r1, r2
   1c6c8:	4618      	mov	r0, r3
   1c6ca:	f00a fba9 	bl	26e20 <va_get>
   1c6ce:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6d2:	2b00      	cmp	r3, #0
   1c6d4:	d001      	beq.n	1c6da <cosem_setScriptTable+0x1b2>
                        {
                            return ret;
   1c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6d8:	e100      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }
                        scriptAction->index = (char)var_toInteger(tmp);
   1c6da:	69bb      	ldr	r3, [r7, #24]
   1c6dc:	4618      	mov	r0, r3
   1c6de:	f00a f9f5 	bl	26acc <var_toInteger>
   1c6e2:	4603      	mov	r3, r0
   1c6e4:	b2da      	uxtb	r2, r3
   1c6e6:	69fb      	ldr	r3, [r7, #28]
   1c6e8:	f883 2020 	strb.w	r2, [r3, #32]
                        ret = va_get(tmp2->Arr, &tmp);
   1c6ec:	697b      	ldr	r3, [r7, #20]
   1c6ee:	689b      	ldr	r3, [r3, #8]
   1c6f0:	f107 0218 	add.w	r2, r7, #24
   1c6f4:	4611      	mov	r1, r2
   1c6f6:	4618      	mov	r0, r3
   1c6f8:	f00a fb92 	bl	26e20 <va_get>
   1c6fc:	6278      	str	r0, [r7, #36]	; 0x24
                        if (ret != DLMS_ERROR_CODE_OK)
   1c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c700:	2b00      	cmp	r3, #0
   1c702:	d001      	beq.n	1c708 <cosem_setScriptTable+0x1e0>
                        {
                            return ret;
   1c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c706:	e0e9      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                        }

                        var_copy(&scriptAction->parameter, tmp);
   1c708:	69fb      	ldr	r3, [r7, #28]
   1c70a:	3310      	adds	r3, #16
   1c70c:	69ba      	ldr	r2, [r7, #24]
   1c70e:	4611      	mov	r1, r2
   1c710:	4618      	mov	r0, r3
   1c712:	f00b fb2f 	bl	27d74 <var_copy>
                        arr_push(&script->actions, scriptAction);
   1c716:	6a3b      	ldr	r3, [r7, #32]
   1c718:	3304      	adds	r3, #4
   1c71a:	69f9      	ldr	r1, [r7, #28]
   1c71c:	4618      	mov	r0, r3
   1c71e:	f7ef ffaf 	bl	c680 <arr_push>
                    ret = va_get(tmp->Arr, &tmp3);
                    if (ret != DLMS_ERROR_CODE_OK)
                    {
                        return ret;
                    }
                    for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c724:	3301      	adds	r3, #1
   1c726:	62bb      	str	r3, [r7, #40]	; 0x28
   1c728:	693b      	ldr	r3, [r7, #16]
   1c72a:	689b      	ldr	r3, [r3, #8]
   1c72c:	88db      	ldrh	r3, [r3, #6]
   1c72e:	461a      	mov	r2, r3
   1c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c732:	429a      	cmp	r2, r3
   1c734:	f47f af69 	bne.w	1c60a <cosem_setScriptTable+0xe2>
            }
            //Fix Xemex bug here.
            //Xemex meters do not return array as they should be according standard.
            if (value->vt == DLMS_DATA_TYPE_ARRAY)
            {
                for (pos = 0; pos != value->Arr->size; ++pos)
   1c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c73a:	3301      	adds	r3, #1
   1c73c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c73e:	687b      	ldr	r3, [r7, #4]
   1c740:	689b      	ldr	r3, [r3, #8]
   1c742:	88db      	ldrh	r3, [r3, #6]
   1c744:	461a      	mov	r2, r3
   1c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c748:	429a      	cmp	r2, r3
   1c74a:	f47f af19 	bne.w	1c580 <cosem_setScriptTable+0x58>
   1c74e:	e0c4      	b.n	1c8da <cosem_setScriptTable+0x3b2>
                    }
                }
            }
            else //Read Xemex meter here.
            {
                ret = va_get(value->Arr, &tmp);
   1c750:	687b      	ldr	r3, [r7, #4]
   1c752:	689b      	ldr	r3, [r3, #8]
   1c754:	f107 0218 	add.w	r2, r7, #24
   1c758:	4611      	mov	r1, r2
   1c75a:	4618      	mov	r0, r3
   1c75c:	f00a fb60 	bl	26e20 <va_get>
   1c760:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c764:	2b00      	cmp	r3, #0
   1c766:	d001      	beq.n	1c76c <cosem_setScriptTable+0x244>
                {
                    return ret;
   1c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c76a:	e0b7      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                ret = va_get(tmp->Arr, &tmp2);
   1c76c:	69bb      	ldr	r3, [r7, #24]
   1c76e:	689b      	ldr	r3, [r3, #8]
   1c770:	f107 0214 	add.w	r2, r7, #20
   1c774:	4611      	mov	r1, r2
   1c776:	4618      	mov	r0, r3
   1c778:	f00a fb52 	bl	26e20 <va_get>
   1c77c:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c780:	2b00      	cmp	r3, #0
   1c782:	d001      	beq.n	1c788 <cosem_setScriptTable+0x260>
                {
                    return ret;
   1c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c786:	e0a9      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                ret = va_get(tmp2->Arr, &tmp3);
   1c788:	697b      	ldr	r3, [r7, #20]
   1c78a:	689b      	ldr	r3, [r3, #8]
   1c78c:	f107 0210 	add.w	r2, r7, #16
   1c790:	4611      	mov	r1, r2
   1c792:	4618      	mov	r0, r3
   1c794:	f00a fb44 	bl	26e20 <va_get>
   1c798:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	d001      	beq.n	1c7a4 <cosem_setScriptTable+0x27c>
                {
                    return ret;
   1c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7a2:	e09b      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                script = (gxScript*)gxmalloc(sizeof(gxScript));
   1c7a4:	2014      	movs	r0, #20
   1c7a6:	f00d f94d 	bl	29a44 <malloc>
   1c7aa:	4603      	mov	r3, r0
   1c7ac:	623b      	str	r3, [r7, #32]
                arr_init(&script->actions);
   1c7ae:	6a3b      	ldr	r3, [r7, #32]
   1c7b0:	3304      	adds	r3, #4
   1c7b2:	4618      	mov	r0, r3
   1c7b4:	f7ef ff1a 	bl	c5ec <arr_init>
                script->id = (unsigned short)var_toInteger(tmp3);
   1c7b8:	693b      	ldr	r3, [r7, #16]
   1c7ba:	4618      	mov	r0, r3
   1c7bc:	f00a f986 	bl	26acc <var_toInteger>
   1c7c0:	4603      	mov	r3, r0
   1c7c2:	b29a      	uxth	r2, r3
   1c7c4:	6a3b      	ldr	r3, [r7, #32]
   1c7c6:	801a      	strh	r2, [r3, #0]
                arr_push(&object->scripts, script);
   1c7c8:	68fb      	ldr	r3, [r7, #12]
   1c7ca:	3310      	adds	r3, #16
   1c7cc:	6a39      	ldr	r1, [r7, #32]
   1c7ce:	4618      	mov	r0, r3
   1c7d0:	f7ef ff56 	bl	c680 <arr_push>
                ret = va_get(tmp->Arr, &tmp3);
   1c7d4:	69bb      	ldr	r3, [r7, #24]
   1c7d6:	689b      	ldr	r3, [r3, #8]
   1c7d8:	f107 0210 	add.w	r2, r7, #16
   1c7dc:	4611      	mov	r1, r2
   1c7de:	4618      	mov	r0, r3
   1c7e0:	f00a fb1e 	bl	26e20 <va_get>
   1c7e4:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7e8:	2b00      	cmp	r3, #0
   1c7ea:	d001      	beq.n	1c7f0 <cosem_setScriptTable+0x2c8>
                {
                    return ret;
   1c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7ee:	e075      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   1c7f0:	2028      	movs	r0, #40	; 0x28
   1c7f2:	f00d f927 	bl	29a44 <malloc>
   1c7f6:	4603      	mov	r3, r0
   1c7f8:	61fb      	str	r3, [r7, #28]
                var_init(&scriptAction->parameter);
   1c7fa:	69fb      	ldr	r3, [r7, #28]
   1c7fc:	3310      	adds	r3, #16
   1c7fe:	4618      	mov	r0, r3
   1c800:	f009 fc92 	bl	26128 <var_init>
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   1c804:	693b      	ldr	r3, [r7, #16]
   1c806:	4618      	mov	r0, r3
   1c808:	f00a f960 	bl	26acc <var_toInteger>
   1c80c:	4603      	mov	r3, r0
   1c80e:	b2da      	uxtb	r2, r3
   1c810:	69fb      	ldr	r3, [r7, #28]
   1c812:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp2->Arr, &tmp3);
   1c814:	697b      	ldr	r3, [r7, #20]
   1c816:	689b      	ldr	r3, [r3, #8]
   1c818:	f107 0210 	add.w	r2, r7, #16
   1c81c:	4611      	mov	r1, r2
   1c81e:	4618      	mov	r0, r3
   1c820:	f00a fafe 	bl	26e20 <va_get>
   1c824:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c828:	2b00      	cmp	r3, #0
   1c82a:	d001      	beq.n	1c830 <cosem_setScriptTable+0x308>
                {
                    return ret;
   1c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c82e:	e055      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }

                scriptAction->objectType = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1c830:	693b      	ldr	r3, [r7, #16]
   1c832:	4618      	mov	r0, r3
   1c834:	f00a f94a 	bl	26acc <var_toInteger>
   1c838:	4603      	mov	r3, r0
   1c83a:	b29a      	uxth	r2, r3
   1c83c:	69fb      	ldr	r3, [r7, #28]
   1c83e:	805a      	strh	r2, [r3, #2]
                ret = va_get(tmp2->Arr, &tmp3);
   1c840:	697b      	ldr	r3, [r7, #20]
   1c842:	689b      	ldr	r3, [r3, #8]
   1c844:	f107 0210 	add.w	r2, r7, #16
   1c848:	4611      	mov	r1, r2
   1c84a:	4618      	mov	r0, r3
   1c84c:	f00a fae8 	bl	26e20 <va_get>
   1c850:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c854:	2b00      	cmp	r3, #0
   1c856:	d001      	beq.n	1c85c <cosem_setScriptTable+0x334>
                {
                    return ret;
   1c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c85a:	e03f      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                memcpy(scriptAction->logicalName, tmp3->byteArr->data, 6);
   1c85c:	69fb      	ldr	r3, [r7, #28]
   1c85e:	1d18      	adds	r0, r3, #4
   1c860:	693b      	ldr	r3, [r7, #16]
   1c862:	689b      	ldr	r3, [r3, #8]
   1c864:	681b      	ldr	r3, [r3, #0]
   1c866:	2206      	movs	r2, #6
   1c868:	4619      	mov	r1, r3
   1c86a:	f00d f90a 	bl	29a82 <memcpy>
                ret = va_get(tmp2->Arr, &tmp3);
   1c86e:	697b      	ldr	r3, [r7, #20]
   1c870:	689b      	ldr	r3, [r3, #8]
   1c872:	f107 0210 	add.w	r2, r7, #16
   1c876:	4611      	mov	r1, r2
   1c878:	4618      	mov	r0, r3
   1c87a:	f00a fad1 	bl	26e20 <va_get>
   1c87e:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c882:	2b00      	cmp	r3, #0
   1c884:	d001      	beq.n	1c88a <cosem_setScriptTable+0x362>
                {
                    return ret;
   1c886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c888:	e028      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                scriptAction->index = (char)var_toInteger(tmp3);
   1c88a:	693b      	ldr	r3, [r7, #16]
   1c88c:	4618      	mov	r0, r3
   1c88e:	f00a f91d 	bl	26acc <var_toInteger>
   1c892:	4603      	mov	r3, r0
   1c894:	b2da      	uxtb	r2, r3
   1c896:	69fb      	ldr	r3, [r7, #28]
   1c898:	f883 2020 	strb.w	r2, [r3, #32]
                ret = va_get(tmp2->Arr, &tmp3);
   1c89c:	697b      	ldr	r3, [r7, #20]
   1c89e:	689b      	ldr	r3, [r3, #8]
   1c8a0:	f107 0210 	add.w	r2, r7, #16
   1c8a4:	4611      	mov	r1, r2
   1c8a6:	4618      	mov	r0, r3
   1c8a8:	f00a faba 	bl	26e20 <va_get>
   1c8ac:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != DLMS_ERROR_CODE_OK)
   1c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8b0:	2b00      	cmp	r3, #0
   1c8b2:	d001      	beq.n	1c8b8 <cosem_setScriptTable+0x390>
                {
                    return ret;
   1c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8b6:	e011      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
                }
                var_copy(&scriptAction->parameter, tmp);
   1c8b8:	69fb      	ldr	r3, [r7, #28]
   1c8ba:	3310      	adds	r3, #16
   1c8bc:	69ba      	ldr	r2, [r7, #24]
   1c8be:	4611      	mov	r1, r2
   1c8c0:	4618      	mov	r0, r3
   1c8c2:	f00b fa57 	bl	27d74 <var_copy>
                arr_push(&script->actions, scriptAction);
   1c8c6:	6a3b      	ldr	r3, [r7, #32]
   1c8c8:	3304      	adds	r3, #4
   1c8ca:	69f9      	ldr	r1, [r7, #28]
   1c8cc:	4618      	mov	r0, r3
   1c8ce:	f7ef fed7 	bl	c680 <arr_push>
   1c8d2:	e002      	b.n	1c8da <cosem_setScriptTable+0x3b2>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1c8d4:	f44f 7381 	mov.w	r3, #258	; 0x102
   1c8d8:	e000      	b.n	1c8dc <cosem_setScriptTable+0x3b4>
    }
    return DLMS_ERROR_CODE_OK;
   1c8da:	2300      	movs	r3, #0
}
   1c8dc:	4618      	mov	r0, r3
   1c8de:	3730      	adds	r7, #48	; 0x30
   1c8e0:	46bd      	mov	sp, r7
   1c8e2:	bd80      	pop	{r7, pc}

0001c8e4 <cosem_setSpecialDaysTable>:
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
int cosem_setSpecialDaysTable(gxSpecialDaysTable* object, unsigned char index, dlmsVARIANT *value)
{
   1c8e4:	b580      	push	{r7, lr}
   1c8e6:	b08e      	sub	sp, #56	; 0x38
   1c8e8:	af00      	add	r7, sp, #0
   1c8ea:	60f8      	str	r0, [r7, #12]
   1c8ec:	460b      	mov	r3, r1
   1c8ee:	607a      	str	r2, [r7, #4]
   1c8f0:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp3;
    dlmsVARIANT tmp2;
    gxSpecialDay* specialDay;

    if (index == 2)
   1c8f2:	7afb      	ldrb	r3, [r7, #11]
   1c8f4:	2b02      	cmp	r3, #2
   1c8f6:	f040 808a 	bne.w	1ca0e <cosem_setSpecialDaysTable+0x12a>
    {
        arr_clear(&object->entries);
   1c8fa:	68fb      	ldr	r3, [r7, #12]
   1c8fc:	3310      	adds	r3, #16
   1c8fe:	4618      	mov	r0, r3
   1c900:	f7ef ff06 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1c904:	687b      	ldr	r3, [r7, #4]
   1c906:	689b      	ldr	r3, [r3, #8]
   1c908:	2b00      	cmp	r3, #0
   1c90a:	f000 8083 	beq.w	1ca14 <cosem_setSpecialDaysTable+0x130>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c90e:	2300      	movs	r3, #0
   1c910:	637b      	str	r3, [r7, #52]	; 0x34
   1c912:	e074      	b.n	1c9fe <cosem_setSpecialDaysTable+0x11a>
            {
                ret = va_get(value->Arr, &tmp);
   1c914:	687b      	ldr	r3, [r7, #4]
   1c916:	689b      	ldr	r3, [r3, #8]
   1c918:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c91c:	4611      	mov	r1, r2
   1c91e:	4618      	mov	r0, r3
   1c920:	f00a fa7e 	bl	26e20 <va_get>
   1c924:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c928:	2b00      	cmp	r3, #0
   1c92a:	d001      	beq.n	1c930 <cosem_setSpecialDaysTable+0x4c>
                {
                    return ret;
   1c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c92e:	e072      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
                }
                specialDay = (gxSpecialDay*)gxmalloc(sizeof(gxSpecialDay));
   1c930:	2038      	movs	r0, #56	; 0x38
   1c932:	f00d f887 	bl	29a44 <malloc>
   1c936:	4603      	mov	r3, r0
   1c938:	62fb      	str	r3, [r7, #44]	; 0x2c

                ret = va_get(tmp->Arr, &tmp3);
   1c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c93c:	689b      	ldr	r3, [r3, #8]
   1c93e:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c942:	4611      	mov	r1, r2
   1c944:	4618      	mov	r0, r3
   1c946:	f00a fa6b 	bl	26e20 <va_get>
   1c94a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c94e:	2b00      	cmp	r3, #0
   1c950:	d001      	beq.n	1c956 <cosem_setSpecialDaysTable+0x72>
                {
                    return ret;
   1c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c954:	e05f      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
                }
                specialDay->index = (unsigned short)var_toInteger(tmp3);
   1c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c958:	4618      	mov	r0, r3
   1c95a:	f00a f8b7 	bl	26acc <var_toInteger>
   1c95e:	4603      	mov	r3, r0
   1c960:	b29a      	uxth	r2, r3
   1c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c964:	801a      	strh	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp3);
   1c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c968:	689b      	ldr	r3, [r3, #8]
   1c96a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c96e:	4611      	mov	r1, r2
   1c970:	4618      	mov	r0, r3
   1c972:	f00a fa55 	bl	26e20 <va_get>
   1c976:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	d001      	beq.n	1c982 <cosem_setSpecialDaysTable+0x9e>
                {
                    return ret;
   1c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c980:	e049      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
                }
                var_init(&tmp2);
   1c982:	f107 0310 	add.w	r3, r7, #16
   1c986:	4618      	mov	r0, r3
   1c988:	f009 fbce 	bl	26128 <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATE, &tmp2);
   1c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c98e:	f107 0210 	add.w	r2, r7, #16
   1c992:	211a      	movs	r1, #26
   1c994:	4618      	mov	r0, r3
   1c996:	f7ec ff39 	bl	980c <dlms_changeType2>
   1c99a:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c99e:	2b00      	cmp	r3, #0
   1c9a0:	d001      	beq.n	1c9a6 <cosem_setSpecialDaysTable+0xc2>
                {
                    return ret;
   1c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c9a4:	e037      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
                }
                time_copy(&specialDay->date, tmp2.dateTime);
   1c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c9a8:	3304      	adds	r3, #4
   1c9aa:	69ba      	ldr	r2, [r7, #24]
   1c9ac:	4611      	mov	r1, r2
   1c9ae:	4618      	mov	r0, r3
   1c9b0:	f7e9 ffd0 	bl	6954 <time_copy>
                var_clear(&tmp2);
   1c9b4:	f107 0310 	add.w	r3, r7, #16
   1c9b8:	4618      	mov	r0, r3
   1c9ba:	f009 fbc5 	bl	26148 <var_clear>

                ret = va_get(tmp->Arr, &tmp3);
   1c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9c0:	689b      	ldr	r3, [r3, #8]
   1c9c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1c9c6:	4611      	mov	r1, r2
   1c9c8:	4618      	mov	r0, r3
   1c9ca:	f00a fa29 	bl	26e20 <va_get>
   1c9ce:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1c9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c9d2:	2b00      	cmp	r3, #0
   1c9d4:	d001      	beq.n	1c9da <cosem_setSpecialDaysTable+0xf6>
                {
                    return ret;
   1c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c9d8:	e01d      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
                }
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   1c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c9dc:	4618      	mov	r0, r3
   1c9de:	f00a f875 	bl	26acc <var_toInteger>
   1c9e2:	4603      	mov	r3, r0
   1c9e4:	b2da      	uxtb	r2, r3
   1c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                arr_push(&object->entries, specialDay);
   1c9ec:	68fb      	ldr	r3, [r7, #12]
   1c9ee:	3310      	adds	r3, #16
   1c9f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c9f2:	4618      	mov	r0, r3
   1c9f4:	f7ef fe44 	bl	c680 <arr_push>
    if (index == 2)
    {
        arr_clear(&object->entries);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1c9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c9fa:	3301      	adds	r3, #1
   1c9fc:	637b      	str	r3, [r7, #52]	; 0x34
   1c9fe:	687b      	ldr	r3, [r7, #4]
   1ca00:	689b      	ldr	r3, [r3, #8]
   1ca02:	88db      	ldrh	r3, [r3, #6]
   1ca04:	461a      	mov	r2, r3
   1ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ca08:	429a      	cmp	r2, r3
   1ca0a:	d183      	bne.n	1c914 <cosem_setSpecialDaysTable+0x30>
   1ca0c:	e002      	b.n	1ca14 <cosem_setSpecialDaysTable+0x130>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1ca0e:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ca12:	e000      	b.n	1ca16 <cosem_setSpecialDaysTable+0x132>
    }
    return DLMS_ERROR_CODE_OK;
   1ca14:	2300      	movs	r3, #0
}
   1ca16:	4618      	mov	r0, r3
   1ca18:	3738      	adds	r7, #56	; 0x38
   1ca1a:	46bd      	mov	sp, r7
   1ca1c:	bd80      	pop	{r7, pc}
   1ca1e:	bf00      	nop

0001ca20 <cosem_setTcpUdpSetup>:
#endif //DLMS_IGNORE_SPECIAL_DAYS_TABLE
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
int cosem_setTcpUdpSetup(gxTcpUdpSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1ca20:	b5b0      	push	{r4, r5, r7, lr}
   1ca22:	b084      	sub	sp, #16
   1ca24:	af00      	add	r7, sp, #0
   1ca26:	60f8      	str	r0, [r7, #12]
   1ca28:	460b      	mov	r3, r1
   1ca2a:	607a      	str	r2, [r7, #4]
   1ca2c:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1ca2e:	7afb      	ldrb	r3, [r7, #11]
   1ca30:	2b02      	cmp	r3, #2
   1ca32:	d107      	bne.n	1ca44 <cosem_setTcpUdpSetup+0x24>
    {
        object->port = (unsigned short)var_toInteger(value);
   1ca34:	6878      	ldr	r0, [r7, #4]
   1ca36:	f00a f849 	bl	26acc <var_toInteger>
   1ca3a:	4603      	mov	r3, r0
   1ca3c:	b29a      	uxth	r2, r3
   1ca3e:	68fb      	ldr	r3, [r7, #12]
   1ca40:	821a      	strh	r2, [r3, #16]
   1ca42:	e03d      	b.n	1cac0 <cosem_setTcpUdpSetup+0xa0>
    }
    else if (index == 3)
   1ca44:	7afb      	ldrb	r3, [r7, #11]
   1ca46:	2b03      	cmp	r3, #3
   1ca48:	d115      	bne.n	1ca76 <cosem_setTcpUdpSetup+0x56>
    {
        bb_clear(&object->ipReference);
   1ca4a:	68fb      	ldr	r3, [r7, #12]
   1ca4c:	3314      	adds	r3, #20
   1ca4e:	4618      	mov	r0, r3
   1ca50:	f7e6 fe88 	bl	3764 <bb_clear>
        bb_set2(&object->ipReference, value->byteArr, 0, bb_size(value->byteArr));
   1ca54:	68fb      	ldr	r3, [r7, #12]
   1ca56:	f103 0414 	add.w	r4, r3, #20
   1ca5a:	687b      	ldr	r3, [r7, #4]
   1ca5c:	689d      	ldr	r5, [r3, #8]
   1ca5e:	687b      	ldr	r3, [r7, #4]
   1ca60:	689b      	ldr	r3, [r3, #8]
   1ca62:	4618      	mov	r0, r3
   1ca64:	f7e6 f930 	bl	2cc8 <bb_size>
   1ca68:	4603      	mov	r3, r0
   1ca6a:	2200      	movs	r2, #0
   1ca6c:	4629      	mov	r1, r5
   1ca6e:	4620      	mov	r0, r4
   1ca70:	f7e6 fdd6 	bl	3620 <bb_set2>
   1ca74:	e024      	b.n	1cac0 <cosem_setTcpUdpSetup+0xa0>
    }
    else if (index == 4)
   1ca76:	7afb      	ldrb	r3, [r7, #11]
   1ca78:	2b04      	cmp	r3, #4
   1ca7a:	d107      	bne.n	1ca8c <cosem_setTcpUdpSetup+0x6c>
    {
        object->maximumSegmentSize = (unsigned short)var_toInteger(value);
   1ca7c:	6878      	ldr	r0, [r7, #4]
   1ca7e:	f00a f825 	bl	26acc <var_toInteger>
   1ca82:	4603      	mov	r3, r0
   1ca84:	b29a      	uxth	r2, r3
   1ca86:	68fb      	ldr	r3, [r7, #12]
   1ca88:	849a      	strh	r2, [r3, #36]	; 0x24
   1ca8a:	e019      	b.n	1cac0 <cosem_setTcpUdpSetup+0xa0>
    }
    else if (index == 5)
   1ca8c:	7afb      	ldrb	r3, [r7, #11]
   1ca8e:	2b05      	cmp	r3, #5
   1ca90:	d108      	bne.n	1caa4 <cosem_setTcpUdpSetup+0x84>
    {
        object->maximumSimultaneousConnections = (unsigned char)var_toInteger(value);
   1ca92:	6878      	ldr	r0, [r7, #4]
   1ca94:	f00a f81a 	bl	26acc <var_toInteger>
   1ca98:	4603      	mov	r3, r0
   1ca9a:	b2da      	uxtb	r2, r3
   1ca9c:	68fb      	ldr	r3, [r7, #12]
   1ca9e:	f883 2020 	strb.w	r2, [r3, #32]
   1caa2:	e00d      	b.n	1cac0 <cosem_setTcpUdpSetup+0xa0>
    }
    else if (index == 6)
   1caa4:	7afb      	ldrb	r3, [r7, #11]
   1caa6:	2b06      	cmp	r3, #6
   1caa8:	d107      	bne.n	1caba <cosem_setTcpUdpSetup+0x9a>
    {
        object->inactivityTimeout = (unsigned short)var_toInteger(value);
   1caaa:	6878      	ldr	r0, [r7, #4]
   1caac:	f00a f80e 	bl	26acc <var_toInteger>
   1cab0:	4603      	mov	r3, r0
   1cab2:	b29a      	uxth	r2, r3
   1cab4:	68fb      	ldr	r3, [r7, #12]
   1cab6:	845a      	strh	r2, [r3, #34]	; 0x22
   1cab8:	e002      	b.n	1cac0 <cosem_setTcpUdpSetup+0xa0>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1caba:	f44f 7381 	mov.w	r3, #258	; 0x102
   1cabe:	e000      	b.n	1cac2 <cosem_setTcpUdpSetup+0xa2>
    }
    return DLMS_ERROR_CODE_OK;
   1cac0:	2300      	movs	r3, #0
}
   1cac2:	4618      	mov	r0, r3
   1cac4:	3710      	adds	r7, #16
   1cac6:	46bd      	mov	sp, r7
   1cac8:	bdb0      	pop	{r4, r5, r7, pc}
   1caca:	bf00      	nop

0001cacc <cosem_setMbusMasterPortSetup>:
#endif //DLMS_IGNORE_TCP_UDP_SETUP
#ifndef DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
int cosem_setMbusMasterPortSetup(gxMBusMasterPortSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1cacc:	b580      	push	{r7, lr}
   1cace:	b084      	sub	sp, #16
   1cad0:	af00      	add	r7, sp, #0
   1cad2:	60f8      	str	r0, [r7, #12]
   1cad4:	460b      	mov	r3, r1
   1cad6:	607a      	str	r2, [r7, #4]
   1cad8:	72fb      	strb	r3, [r7, #11]
    if (index == 2)
   1cada:	7afb      	ldrb	r3, [r7, #11]
   1cadc:	2b02      	cmp	r3, #2
   1cade:	d108      	bne.n	1caf2 <cosem_setMbusMasterPortSetup+0x26>
    {
        object->commSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1cae0:	6878      	ldr	r0, [r7, #4]
   1cae2:	f009 fff3 	bl	26acc <var_toInteger>
   1cae6:	4603      	mov	r3, r0
   1cae8:	b2da      	uxtb	r2, r3
   1caea:	68fb      	ldr	r3, [r7, #12]
   1caec:	741a      	strb	r2, [r3, #16]
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return DLMS_ERROR_CODE_OK;
   1caee:	2300      	movs	r3, #0
   1caf0:	e001      	b.n	1caf6 <cosem_setMbusMasterPortSetup+0x2a>
    {
        object->commSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1caf2:	f44f 7381 	mov.w	r3, #258	; 0x102
    }
    return DLMS_ERROR_CODE_OK;
}
   1caf6:	4618      	mov	r0, r3
   1caf8:	3710      	adds	r7, #16
   1cafa:	46bd      	mov	sp, r7
   1cafc:	bd80      	pop	{r7, pc}
   1cafe:	bf00      	nop

0001cb00 <cosem_setMessageHandler>:
#endif //DLMS_IGNORE_MBUS_MASTER_PORT_SETUP

#ifndef DLMS_IGNORE_MESSAGE_HANDLER
int cosem_setMessageHandler(gxMessageHandler* object, unsigned char index, dlmsVARIANT *value)
{
   1cb00:	b590      	push	{r4, r7, lr}
   1cb02:	b093      	sub	sp, #76	; 0x4c
   1cb04:	af00      	add	r7, sp, #0
   1cb06:	60f8      	str	r0, [r7, #12]
   1cb08:	460b      	mov	r3, r1
   1cb0a:	607a      	str	r2, [r7, #4]
   1cb0c:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT *tmp, *tmp2;
    dlmsVARIANT start, end;
    gxtime* s, *e;
    if (index == 2)
   1cb0e:	7afb      	ldrb	r3, [r7, #11]
   1cb10:	2b02      	cmp	r3, #2
   1cb12:	f040 8086 	bne.w	1cc22 <cosem_setMessageHandler+0x122>
    {
        var_init(&start);
   1cb16:	f107 0320 	add.w	r3, r7, #32
   1cb1a:	4618      	mov	r0, r3
   1cb1c:	f009 fb04 	bl	26128 <var_init>
        var_init(&end);
   1cb20:	f107 0310 	add.w	r3, r7, #16
   1cb24:	4618      	mov	r0, r3
   1cb26:	f009 faff 	bl	26128 <var_init>
        arr_clear(&object->listeningWindow);
   1cb2a:	68fb      	ldr	r3, [r7, #12]
   1cb2c:	3310      	adds	r3, #16
   1cb2e:	4618      	mov	r0, r3
   1cb30:	f7ef fdee 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1cb34:	687b      	ldr	r3, [r7, #4]
   1cb36:	689b      	ldr	r3, [r3, #8]
   1cb38:	2b00      	cmp	r3, #0
   1cb3a:	f000 80d7 	beq.w	1ccec <cosem_setMessageHandler+0x1ec>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cb3e:	2300      	movs	r3, #0
   1cb40:	647b      	str	r3, [r7, #68]	; 0x44
   1cb42:	e066      	b.n	1cc12 <cosem_setMessageHandler+0x112>
            {
                ret = va_get(value->Arr, &tmp2);
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	689b      	ldr	r3, [r3, #8]
   1cb48:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1cb4c:	4611      	mov	r1, r2
   1cb4e:	4618      	mov	r0, r3
   1cb50:	f00a f966 	bl	26e20 <va_get>
   1cb54:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	d001      	beq.n	1cb60 <cosem_setMessageHandler+0x60>
                {
                    return ret;
   1cb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb5e:	e0c6      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                ret = va_get(tmp2->Arr, &tmp);
   1cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cb62:	689b      	ldr	r3, [r3, #8]
   1cb64:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cb68:	4611      	mov	r1, r2
   1cb6a:	4618      	mov	r0, r3
   1cb6c:	f00a f958 	bl	26e20 <va_get>
   1cb70:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb74:	2b00      	cmp	r3, #0
   1cb76:	d001      	beq.n	1cb7c <cosem_setMessageHandler+0x7c>
                {
                    return ret;
   1cb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb7a:	e0b8      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &start);
   1cb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cb7e:	f107 0220 	add.w	r2, r7, #32
   1cb82:	2119      	movs	r1, #25
   1cb84:	4618      	mov	r0, r3
   1cb86:	f7ec fe41 	bl	980c <dlms_changeType2>
   1cb8a:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb8e:	2b00      	cmp	r3, #0
   1cb90:	d001      	beq.n	1cb96 <cosem_setMessageHandler+0x96>
                {
                    return ret;
   1cb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cb94:	e0ab      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }

                ret = va_get(tmp2->Arr, &tmp);
   1cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cb98:	689b      	ldr	r3, [r3, #8]
   1cb9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cb9e:	4611      	mov	r1, r2
   1cba0:	4618      	mov	r0, r3
   1cba2:	f00a f93d 	bl	26e20 <va_get>
   1cba6:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cbaa:	2b00      	cmp	r3, #0
   1cbac:	d001      	beq.n	1cbb2 <cosem_setMessageHandler+0xb2>
                {
                    return ret;
   1cbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cbb0:	e09d      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &end);
   1cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cbb4:	f107 0210 	add.w	r2, r7, #16
   1cbb8:	2119      	movs	r1, #25
   1cbba:	4618      	mov	r0, r3
   1cbbc:	f7ec fe26 	bl	980c <dlms_changeType2>
   1cbc0:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d001      	beq.n	1cbcc <cosem_setMessageHandler+0xcc>
                {
                    return ret;
   1cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cbca:	e090      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   1cbcc:	2030      	movs	r0, #48	; 0x30
   1cbce:	f00c ff39 	bl	29a44 <malloc>
   1cbd2:	4603      	mov	r3, r0
   1cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1cbd6:	2030      	movs	r0, #48	; 0x30
   1cbd8:	f00c ff34 	bl	29a44 <malloc>
   1cbdc:	4603      	mov	r3, r0
   1cbde:	63bb      	str	r3, [r7, #56]	; 0x38
                time_copy(s, start.dateTime);
   1cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbe2:	4619      	mov	r1, r3
   1cbe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1cbe6:	f7e9 feb5 	bl	6954 <time_copy>
                time_copy(e, end.dateTime);
   1cbea:	69bb      	ldr	r3, [r7, #24]
   1cbec:	4619      	mov	r1, r3
   1cbee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1cbf0:	f7e9 feb0 	bl	6954 <time_copy>
                arr_push(&object->listeningWindow, key_init(s, e));
   1cbf4:	68fb      	ldr	r3, [r7, #12]
   1cbf6:	f103 0410 	add.w	r4, r3, #16
   1cbfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1cbfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1cbfe:	f7f9 f98d 	bl	15f1c <key_init>
   1cc02:	4603      	mov	r3, r0
   1cc04:	4619      	mov	r1, r3
   1cc06:	4620      	mov	r0, r4
   1cc08:	f7ef fd3a 	bl	c680 <arr_push>
        var_init(&start);
        var_init(&end);
        arr_clear(&object->listeningWindow);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cc0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cc0e:	3301      	adds	r3, #1
   1cc10:	647b      	str	r3, [r7, #68]	; 0x44
   1cc12:	687b      	ldr	r3, [r7, #4]
   1cc14:	689b      	ldr	r3, [r3, #8]
   1cc16:	88db      	ldrh	r3, [r3, #6]
   1cc18:	461a      	mov	r2, r3
   1cc1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cc1c:	429a      	cmp	r2, r3
   1cc1e:	d191      	bne.n	1cb44 <cosem_setMessageHandler+0x44>
   1cc20:	e064      	b.n	1ccec <cosem_setMessageHandler+0x1ec>
                time_copy(e, end.dateTime);
                arr_push(&object->listeningWindow, key_init(s, e));
            }
        }
    }
    else if (index == 3)
   1cc22:	7afb      	ldrb	r3, [r7, #11]
   1cc24:	2b03      	cmp	r3, #3
   1cc26:	d144      	bne.n	1ccb2 <cosem_setMessageHandler+0x1b2>
    {
        va_clear(&object->allowedSenders);
   1cc28:	68fb      	ldr	r3, [r7, #12]
   1cc2a:	3320      	adds	r3, #32
   1cc2c:	4618      	mov	r0, r3
   1cc2e:	f00a f889 	bl	26d44 <va_clear>
        if (value->Arr != NULL)
   1cc32:	687b      	ldr	r3, [r7, #4]
   1cc34:	689b      	ldr	r3, [r3, #8]
   1cc36:	2b00      	cmp	r3, #0
   1cc38:	d058      	beq.n	1ccec <cosem_setMessageHandler+0x1ec>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cc3a:	2300      	movs	r3, #0
   1cc3c:	647b      	str	r3, [r7, #68]	; 0x44
   1cc3e:	e030      	b.n	1cca2 <cosem_setMessageHandler+0x1a2>
            {
                ret = va_get(value->Arr, &tmp);
   1cc40:	687b      	ldr	r3, [r7, #4]
   1cc42:	689b      	ldr	r3, [r3, #8]
   1cc44:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cc48:	4611      	mov	r1, r2
   1cc4a:	4618      	mov	r0, r3
   1cc4c:	f00a f8e8 	bl	26e20 <va_get>
   1cc50:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != DLMS_ERROR_CODE_OK)
   1cc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cc54:	2b00      	cmp	r3, #0
   1cc56:	d001      	beq.n	1cc5c <cosem_setMessageHandler+0x15c>
                {
                    return ret;
   1cc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cc5a:	e048      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1cc5c:	2010      	movs	r0, #16
   1cc5e:	f00c fef1 	bl	29a44 <malloc>
   1cc62:	4603      	mov	r3, r0
   1cc64:	633b      	str	r3, [r7, #48]	; 0x30
                var_init(tmp2);
   1cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc68:	4618      	mov	r0, r3
   1cc6a:	f009 fa5d 	bl	26128 <var_init>
                ret = var_copy(tmp2, tmp);
   1cc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1cc72:	4611      	mov	r1, r2
   1cc74:	4618      	mov	r0, r3
   1cc76:	f00b f87d 	bl	27d74 <var_copy>
   1cc7a:	6438      	str	r0, [r7, #64]	; 0x40
                if (ret != 0)
   1cc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cc7e:	2b00      	cmp	r3, #0
   1cc80:	d005      	beq.n	1cc8e <cosem_setMessageHandler+0x18e>
                {
                    gxfree(tmp2);
   1cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc84:	4618      	mov	r0, r3
   1cc86:	f00c fee5 	bl	29a54 <free>
                    return ret;
   1cc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cc8c:	e02f      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
                }
                va_push(&object->allowedSenders, tmp2);
   1cc8e:	68fb      	ldr	r3, [r7, #12]
   1cc90:	3320      	adds	r3, #32
   1cc92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1cc94:	4611      	mov	r1, r2
   1cc96:	4618      	mov	r0, r3
   1cc98:	f00a f800 	bl	26c9c <va_push>
    else if (index == 3)
    {
        va_clear(&object->allowedSenders);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cc9e:	3301      	adds	r3, #1
   1cca0:	647b      	str	r3, [r7, #68]	; 0x44
   1cca2:	687b      	ldr	r3, [r7, #4]
   1cca4:	689b      	ldr	r3, [r3, #8]
   1cca6:	88db      	ldrh	r3, [r3, #6]
   1cca8:	461a      	mov	r2, r3
   1ccaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ccac:	429a      	cmp	r2, r3
   1ccae:	d1c7      	bne.n	1cc40 <cosem_setMessageHandler+0x140>
   1ccb0:	e01c      	b.n	1ccec <cosem_setMessageHandler+0x1ec>
                }
                va_push(&object->allowedSenders, tmp2);
            }
        }
    }
    else if (index == 4)
   1ccb2:	7afb      	ldrb	r3, [r7, #11]
   1ccb4:	2b04      	cmp	r3, #4
   1ccb6:	d116      	bne.n	1cce6 <cosem_setMessageHandler+0x1e6>
    {
        arr_clear(&object->sendersAndActions);
   1ccb8:	68fb      	ldr	r3, [r7, #12]
   1ccba:	332c      	adds	r3, #44	; 0x2c
   1ccbc:	4618      	mov	r0, r3
   1ccbe:	f7ef fd27 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1ccc2:	687b      	ldr	r3, [r7, #4]
   1ccc4:	689b      	ldr	r3, [r3, #8]
   1ccc6:	2b00      	cmp	r3, #0
   1ccc8:	d010      	beq.n	1ccec <cosem_setMessageHandler+0x1ec>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1ccca:	2300      	movs	r3, #0
   1cccc:	647b      	str	r3, [r7, #68]	; 0x44
   1ccce:	e002      	b.n	1ccd6 <cosem_setMessageHandler+0x1d6>
   1ccd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ccd2:	3301      	adds	r3, #1
   1ccd4:	647b      	str	r3, [r7, #68]	; 0x44
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	689b      	ldr	r3, [r3, #8]
   1ccda:	88db      	ldrh	r3, [r3, #6]
   1ccdc:	461a      	mov	r2, r3
   1ccde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cce0:	429a      	cmp	r2, r3
   1cce2:	d1f5      	bne.n	1ccd0 <cosem_setMessageHandler+0x1d0>
   1cce4:	e002      	b.n	1ccec <cosem_setMessageHandler+0x1ec>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1cce6:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ccea:	e000      	b.n	1ccee <cosem_setMessageHandler+0x1ee>
    }
    return DLMS_ERROR_CODE_OK;
   1ccec:	2300      	movs	r3, #0
}
   1ccee:	4618      	mov	r0, r3
   1ccf0:	374c      	adds	r7, #76	; 0x4c
   1ccf2:	46bd      	mov	sp, r7
   1ccf4:	bd90      	pop	{r4, r7, pc}
   1ccf6:	bf00      	nop

0001ccf8 <cosem_setPushSetup>:
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
int cosem_setPushSetup(dlmsSettings* settings, gxPushSetup* object, unsigned char index, dlmsVARIANT *value)
{
   1ccf8:	b590      	push	{r4, r7, lr}
   1ccfa:	b097      	sub	sp, #92	; 0x5c
   1ccfc:	af00      	add	r7, sp, #0
   1ccfe:	60f8      	str	r0, [r7, #12]
   1cd00:	60b9      	str	r1, [r7, #8]
   1cd02:	603b      	str	r3, [r7, #0]
   1cd04:	4613      	mov	r3, r2
   1cd06:	71fb      	strb	r3, [r7, #7]
    gxCaptureObject* it;
    dlmsVARIANT *tmp, *tmp3;
    dlmsVARIANT start, end;
    gxtime *s, *e;
    DLMS_OBJECT_TYPE type;
    if (index == 2)
   1cd08:	79fb      	ldrb	r3, [r7, #7]
   1cd0a:	2b02      	cmp	r3, #2
   1cd0c:	f040 80b8 	bne.w	1ce80 <cosem_setPushSetup+0x188>
    {
        obj_clearPushObjectList(&object->pushObjectList);
   1cd10:	68bb      	ldr	r3, [r7, #8]
   1cd12:	3310      	adds	r3, #16
   1cd14:	4618      	mov	r0, r3
   1cd16:	f7f9 fff7 	bl	16d08 <obj_clearPushObjectList>
        if (value->Arr != NULL)
   1cd1a:	683b      	ldr	r3, [r7, #0]
   1cd1c:	689b      	ldr	r3, [r3, #8]
   1cd1e:	2b00      	cmp	r3, #0
   1cd20:	f000 81d1 	beq.w	1d0c6 <cosem_setPushSetup+0x3ce>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cd24:	2300      	movs	r3, #0
   1cd26:	657b      	str	r3, [r7, #84]	; 0x54
   1cd28:	e0a1      	b.n	1ce6e <cosem_setPushSetup+0x176>
            {
                ret = va_get(value->Arr, &tmp);
   1cd2a:	683b      	ldr	r3, [r7, #0]
   1cd2c:	689b      	ldr	r3, [r3, #8]
   1cd2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1cd32:	4611      	mov	r1, r2
   1cd34:	4618      	mov	r0, r3
   1cd36:	f00a f873 	bl	26e20 <va_get>
   1cd3a:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1cd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd3e:	2b00      	cmp	r3, #0
   1cd40:	d001      	beq.n	1cd46 <cosem_setPushSetup+0x4e>
                {
                    return ret;
   1cd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd44:	e1c0      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cd48:	689b      	ldr	r3, [r3, #8]
   1cd4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cd4e:	4611      	mov	r1, r2
   1cd50:	4618      	mov	r0, r3
   1cd52:	f00a f865 	bl	26e20 <va_get>
   1cd56:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1cd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd5a:	2b00      	cmp	r3, #0
   1cd5c:	d001      	beq.n	1cd62 <cosem_setPushSetup+0x6a>
                {
                    return ret;
   1cd5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd60:	e1b2      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cd64:	4618      	mov	r0, r3
   1cd66:	f009 feb1 	bl	26acc <var_toInteger>
   1cd6a:	4603      	mov	r3, r0
   1cd6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                //Get LN.

                ret = va_get(tmp->Arr, &tmp3);
   1cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cd72:	689b      	ldr	r3, [r3, #8]
   1cd74:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cd78:	4611      	mov	r1, r2
   1cd7a:	4618      	mov	r0, r3
   1cd7c:	f00a f850 	bl	26e20 <va_get>
   1cd80:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1cd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd84:	2b00      	cmp	r3, #0
   1cd86:	d001      	beq.n	1cd8c <cosem_setPushSetup+0x94>
                {
                    return ret;
   1cd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cd8a:	e19d      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                obj = NULL;
   1cd8c:	2300      	movs	r3, #0
   1cd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1cd90:	68fb      	ldr	r3, [r7, #12]
   1cd92:	f103 0074 	add.w	r0, r3, #116	; 0x74
   1cd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cd98:	689b      	ldr	r3, [r3, #8]
   1cd9a:	681a      	ldr	r2, [r3, #0]
   1cd9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1cda0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
   1cda4:	f005 faa0 	bl	222e8 <oa_findByLN>
   1cda8:	6538      	str	r0, [r7, #80]	; 0x50
   1cdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d001      	beq.n	1cdb4 <cosem_setPushSetup+0xbc>
                {
                    return ret;
   1cdb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cdb2:	e189      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                if (obj == NULL)
   1cdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	d118      	bne.n	1cdec <cosem_setPushSetup+0xf4>
                {
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   1cdba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1cdbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   1cdc2:	4611      	mov	r1, r2
   1cdc4:	4618      	mov	r0, r3
   1cdc6:	f7e8 ffdf 	bl	5d88 <cosem_createObject>
   1cdca:	6538      	str	r0, [r7, #80]	; 0x50
   1cdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cdce:	2b00      	cmp	r3, #0
   1cdd0:	d001      	beq.n	1cdd6 <cosem_setPushSetup+0xde>
                    {
                        return ret;
   1cdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cdd4:	e178      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                    }
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1cdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cdd8:	1d98      	adds	r0, r3, #6
   1cdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cddc:	689b      	ldr	r3, [r3, #8]
   1cdde:	6819      	ldr	r1, [r3, #0]
   1cde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cde2:	689b      	ldr	r3, [r3, #8]
   1cde4:	88db      	ldrh	r3, [r3, #6]
   1cde6:	461a      	mov	r2, r3
   1cde8:	f00c fe4b 	bl	29a82 <memcpy>
                }
                it = (gxCaptureObject*)gxmalloc(sizeof(gxCaptureObject));
   1cdec:	2002      	movs	r0, #2
   1cdee:	f00c fe29 	bl	29a44 <malloc>
   1cdf2:	4603      	mov	r3, r0
   1cdf4:	64bb      	str	r3, [r7, #72]	; 0x48

                ret = va_get(tmp->Arr, &tmp3);
   1cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cdf8:	689b      	ldr	r3, [r3, #8]
   1cdfa:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cdfe:	4611      	mov	r1, r2
   1ce00:	4618      	mov	r0, r3
   1ce02:	f00a f80d 	bl	26e20 <va_get>
   1ce06:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1ce08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	d001      	beq.n	1ce12 <cosem_setPushSetup+0x11a>
                {
                    return ret;
   1ce0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ce10:	e15a      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   1ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ce14:	4618      	mov	r0, r3
   1ce16:	f009 fe59 	bl	26acc <var_toInteger>
   1ce1a:	4603      	mov	r3, r0
   1ce1c:	b2da      	uxtb	r2, r3
   1ce1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ce20:	701a      	strb	r2, [r3, #0]
                ret = va_get(tmp->Arr, &tmp3);
   1ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ce24:	689b      	ldr	r3, [r3, #8]
   1ce26:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1ce2a:	4611      	mov	r1, r2
   1ce2c:	4618      	mov	r0, r3
   1ce2e:	f009 fff7 	bl	26e20 <va_get>
   1ce32:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1ce34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ce36:	2b00      	cmp	r3, #0
   1ce38:	d001      	beq.n	1ce3e <cosem_setPushSetup+0x146>
                {
                    return ret;
   1ce3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ce3c:	e144      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                it->dataIndex = (unsigned char)var_toInteger(tmp3);
   1ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ce40:	4618      	mov	r0, r3
   1ce42:	f009 fe43 	bl	26acc <var_toInteger>
   1ce46:	4603      	mov	r3, r0
   1ce48:	b2da      	uxtb	r2, r3
   1ce4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ce4c:	705a      	strb	r2, [r3, #1]
                arr_push(&object->pushObjectList, key_init(obj, it));
   1ce4e:	68bb      	ldr	r3, [r7, #8]
   1ce50:	f103 0410 	add.w	r4, r3, #16
   1ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1ce58:	4618      	mov	r0, r3
   1ce5a:	f7f9 f85f 	bl	15f1c <key_init>
   1ce5e:	4603      	mov	r3, r0
   1ce60:	4619      	mov	r1, r3
   1ce62:	4620      	mov	r0, r4
   1ce64:	f7ef fc0c 	bl	c680 <arr_push>
    if (index == 2)
    {
        obj_clearPushObjectList(&object->pushObjectList);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1ce68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ce6a:	3301      	adds	r3, #1
   1ce6c:	657b      	str	r3, [r7, #84]	; 0x54
   1ce6e:	683b      	ldr	r3, [r7, #0]
   1ce70:	689b      	ldr	r3, [r3, #8]
   1ce72:	88db      	ldrh	r3, [r3, #6]
   1ce74:	461a      	mov	r2, r3
   1ce76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ce78:	429a      	cmp	r2, r3
   1ce7a:	f47f af56 	bne.w	1cd2a <cosem_setPushSetup+0x32>
   1ce7e:	e122      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
                it->dataIndex = (unsigned char)var_toInteger(tmp3);
                arr_push(&object->pushObjectList, key_init(obj, it));
            }
        }
    }
    else if (index == 3)
   1ce80:	79fb      	ldrb	r3, [r7, #7]
   1ce82:	2b03      	cmp	r3, #3
   1ce84:	d16f      	bne.n	1cf66 <cosem_setPushSetup+0x26e>
    {
        if (object->destination != NULL)
   1ce86:	68bb      	ldr	r3, [r7, #8]
   1ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ce8a:	2b00      	cmp	r3, #0
   1ce8c:	d007      	beq.n	1ce9e <cosem_setPushSetup+0x1a6>
        {
            gxfree(object->destination);
   1ce8e:	68bb      	ldr	r3, [r7, #8]
   1ce90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ce92:	4618      	mov	r0, r3
   1ce94:	f00c fdde 	bl	29a54 <free>
            object->destination = NULL;
   1ce98:	68bb      	ldr	r3, [r7, #8]
   1ce9a:	2200      	movs	r2, #0
   1ce9c:	625a      	str	r2, [r3, #36]	; 0x24
        }
        //Get service.
        ret = va_get(value->Arr, &tmp);
   1ce9e:	683b      	ldr	r3, [r7, #0]
   1cea0:	689b      	ldr	r3, [r3, #8]
   1cea2:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1cea6:	4611      	mov	r1, r2
   1cea8:	4618      	mov	r0, r3
   1ceaa:	f009 ffb9 	bl	26e20 <va_get>
   1ceae:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != DLMS_ERROR_CODE_OK)
   1ceb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ceb2:	2b00      	cmp	r3, #0
   1ceb4:	d001      	beq.n	1ceba <cosem_setPushSetup+0x1c2>
        {
            return ret;
   1ceb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ceb8:	e106      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
        }
        object->service = (DLMS_SERVICE_TYPE)var_toInteger(tmp);
   1ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cebc:	4618      	mov	r0, r3
   1cebe:	f009 fe05 	bl	26acc <var_toInteger>
   1cec2:	4603      	mov	r3, r0
   1cec4:	b2da      	uxtb	r2, r3
   1cec6:	68bb      	ldr	r3, [r7, #8]
   1cec8:	f883 2020 	strb.w	r2, [r3, #32]
        //Destination.
        ret = va_get(value->Arr, &tmp);
   1cecc:	683b      	ldr	r3, [r7, #0]
   1cece:	689b      	ldr	r3, [r3, #8]
   1ced0:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1ced4:	4611      	mov	r1, r2
   1ced6:	4618      	mov	r0, r3
   1ced8:	f009 ffa2 	bl	26e20 <va_get>
   1cedc:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != DLMS_ERROR_CODE_OK)
   1cede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cee0:	2b00      	cmp	r3, #0
   1cee2:	d001      	beq.n	1cee8 <cosem_setPushSetup+0x1f0>
        {
            return ret;
   1cee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cee6:	e0ef      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
        }
        if (tmp->byteArr != NULL && tmp->byteArr->size != 0)
   1cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ceea:	689b      	ldr	r3, [r3, #8]
   1ceec:	2b00      	cmp	r3, #0
   1ceee:	d022      	beq.n	1cf36 <cosem_setPushSetup+0x23e>
   1cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cef2:	689b      	ldr	r3, [r3, #8]
   1cef4:	88db      	ldrh	r3, [r3, #6]
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	d01d      	beq.n	1cf36 <cosem_setPushSetup+0x23e>
        {
            object->destination = (char*)gxmalloc(tmp->byteArr->size + 1);
   1cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cefc:	689b      	ldr	r3, [r3, #8]
   1cefe:	88db      	ldrh	r3, [r3, #6]
   1cf00:	3301      	adds	r3, #1
   1cf02:	4618      	mov	r0, r3
   1cf04:	f00c fd9e 	bl	29a44 <malloc>
   1cf08:	4603      	mov	r3, r0
   1cf0a:	461a      	mov	r2, r3
   1cf0c:	68bb      	ldr	r3, [r7, #8]
   1cf0e:	625a      	str	r2, [r3, #36]	; 0x24
            memcpy(object->destination, tmp->byteArr->data, tmp->byteArr->size);
   1cf10:	68bb      	ldr	r3, [r7, #8]
   1cf12:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cf16:	689b      	ldr	r3, [r3, #8]
   1cf18:	6819      	ldr	r1, [r3, #0]
   1cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cf1c:	689b      	ldr	r3, [r3, #8]
   1cf1e:	88db      	ldrh	r3, [r3, #6]
   1cf20:	461a      	mov	r2, r3
   1cf22:	f00c fdae 	bl	29a82 <memcpy>
            object->destination[tmp->byteArr->size] = '\0';
   1cf26:	68bb      	ldr	r3, [r7, #8]
   1cf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cf2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1cf2c:	6892      	ldr	r2, [r2, #8]
   1cf2e:	88d2      	ldrh	r2, [r2, #6]
   1cf30:	4413      	add	r3, r2
   1cf32:	2200      	movs	r2, #0
   1cf34:	701a      	strb	r2, [r3, #0]
        }
        //Message.
        ret = va_get(value->Arr, &tmp);
   1cf36:	683b      	ldr	r3, [r7, #0]
   1cf38:	689b      	ldr	r3, [r3, #8]
   1cf3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1cf3e:	4611      	mov	r1, r2
   1cf40:	4618      	mov	r0, r3
   1cf42:	f009 ff6d 	bl	26e20 <va_get>
   1cf46:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != DLMS_ERROR_CODE_OK)
   1cf48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cf4a:	2b00      	cmp	r3, #0
   1cf4c:	d001      	beq.n	1cf52 <cosem_setPushSetup+0x25a>
        {
            return ret;
   1cf4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cf50:	e0ba      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
        }
        object->message = (DLMS_MESSAGE_TYPE)var_toInteger(tmp);
   1cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cf54:	4618      	mov	r0, r3
   1cf56:	f009 fdb9 	bl	26acc <var_toInteger>
   1cf5a:	4603      	mov	r3, r0
   1cf5c:	b2da      	uxtb	r2, r3
   1cf5e:	68bb      	ldr	r3, [r7, #8]
   1cf60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1cf64:	e0af      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
    }
    else if (index == 4)
   1cf66:	79fb      	ldrb	r3, [r7, #7]
   1cf68:	2b04      	cmp	r3, #4
   1cf6a:	f040 8086 	bne.w	1d07a <cosem_setPushSetup+0x382>
    {
        var_init(&start);
   1cf6e:	f107 0320 	add.w	r3, r7, #32
   1cf72:	4618      	mov	r0, r3
   1cf74:	f009 f8d8 	bl	26128 <var_init>
        var_init(&end);
   1cf78:	f107 0310 	add.w	r3, r7, #16
   1cf7c:	4618      	mov	r0, r3
   1cf7e:	f009 f8d3 	bl	26128 <var_init>
        arr_clearKeyValuePair(&object->communicationWindow);
   1cf82:	68bb      	ldr	r3, [r7, #8]
   1cf84:	332c      	adds	r3, #44	; 0x2c
   1cf86:	4618      	mov	r0, r3
   1cf88:	f7ef fc56 	bl	c838 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1cf8c:	683b      	ldr	r3, [r7, #0]
   1cf8e:	689b      	ldr	r3, [r3, #8]
   1cf90:	2b00      	cmp	r3, #0
   1cf92:	f000 8098 	beq.w	1d0c6 <cosem_setPushSetup+0x3ce>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1cf96:	2300      	movs	r3, #0
   1cf98:	657b      	str	r3, [r7, #84]	; 0x54
   1cf9a:	e066      	b.n	1d06a <cosem_setPushSetup+0x372>
            {

                ret = va_get(value->Arr, &tmp);
   1cf9c:	683b      	ldr	r3, [r7, #0]
   1cf9e:	689b      	ldr	r3, [r3, #8]
   1cfa0:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1cfa4:	4611      	mov	r1, r2
   1cfa6:	4618      	mov	r0, r3
   1cfa8:	f009 ff3a 	bl	26e20 <va_get>
   1cfac:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1cfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfb0:	2b00      	cmp	r3, #0
   1cfb2:	d001      	beq.n	1cfb8 <cosem_setPushSetup+0x2c0>
                {
                    return ret;
   1cfb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfb6:	e087      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cfba:	689b      	ldr	r3, [r3, #8]
   1cfbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cfc0:	4611      	mov	r1, r2
   1cfc2:	4618      	mov	r0, r3
   1cfc4:	f009 ff2c 	bl	26e20 <va_get>
   1cfc8:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1cfca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfcc:	2b00      	cmp	r3, #0
   1cfce:	d001      	beq.n	1cfd4 <cosem_setPushSetup+0x2dc>
                {
                    return ret;
   1cfd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfd2:	e079      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                if ((ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0)
   1cfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cfd6:	f107 0220 	add.w	r2, r7, #32
   1cfda:	2119      	movs	r1, #25
   1cfdc:	4618      	mov	r0, r3
   1cfde:	f7ec fc15 	bl	980c <dlms_changeType2>
   1cfe2:	6538      	str	r0, [r7, #80]	; 0x50
   1cfe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfe6:	2b00      	cmp	r3, #0
   1cfe8:	d001      	beq.n	1cfee <cosem_setPushSetup+0x2f6>
                {
                    return ret;
   1cfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cfec:	e06c      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                ret = va_get(tmp->Arr, &tmp3);
   1cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cff0:	689b      	ldr	r3, [r3, #8]
   1cff2:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1cff6:	4611      	mov	r1, r2
   1cff8:	4618      	mov	r0, r3
   1cffa:	f009 ff11 	bl	26e20 <va_get>
   1cffe:	6538      	str	r0, [r7, #80]	; 0x50
                if (ret != DLMS_ERROR_CODE_OK)
   1d000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1d002:	2b00      	cmp	r3, #0
   1d004:	d001      	beq.n	1d00a <cosem_setPushSetup+0x312>
                {
                    return ret;
   1d006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1d008:	e05e      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                if ((ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end)) != 0)
   1d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d00c:	f107 0210 	add.w	r2, r7, #16
   1d010:	2119      	movs	r1, #25
   1d012:	4618      	mov	r0, r3
   1d014:	f7ec fbfa 	bl	980c <dlms_changeType2>
   1d018:	6538      	str	r0, [r7, #80]	; 0x50
   1d01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1d01c:	2b00      	cmp	r3, #0
   1d01e:	d001      	beq.n	1d024 <cosem_setPushSetup+0x32c>
                {
                    return ret;
   1d020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1d022:	e051      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
                }
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   1d024:	2030      	movs	r0, #48	; 0x30
   1d026:	f00c fd0d 	bl	29a44 <malloc>
   1d02a:	4603      	mov	r3, r0
   1d02c:	647b      	str	r3, [r7, #68]	; 0x44
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1d02e:	2030      	movs	r0, #48	; 0x30
   1d030:	f00c fd08 	bl	29a44 <malloc>
   1d034:	4603      	mov	r3, r0
   1d036:	643b      	str	r3, [r7, #64]	; 0x40
                time_copy(s, start.dateTime);
   1d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d03a:	4619      	mov	r1, r3
   1d03c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1d03e:	f7e9 fc89 	bl	6954 <time_copy>
                time_copy(e, end.dateTime);
   1d042:	69bb      	ldr	r3, [r7, #24]
   1d044:	4619      	mov	r1, r3
   1d046:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1d048:	f7e9 fc84 	bl	6954 <time_copy>
                arr_push(&object->communicationWindow, key_init(s, e));
   1d04c:	68bb      	ldr	r3, [r7, #8]
   1d04e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
   1d052:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1d054:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1d056:	f7f8 ff61 	bl	15f1c <key_init>
   1d05a:	4603      	mov	r3, r0
   1d05c:	4619      	mov	r1, r3
   1d05e:	4620      	mov	r0, r4
   1d060:	f7ef fb0e 	bl	c680 <arr_push>
        var_init(&start);
        var_init(&end);
        arr_clearKeyValuePair(&object->communicationWindow);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1d064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1d066:	3301      	adds	r3, #1
   1d068:	657b      	str	r3, [r7, #84]	; 0x54
   1d06a:	683b      	ldr	r3, [r7, #0]
   1d06c:	689b      	ldr	r3, [r3, #8]
   1d06e:	88db      	ldrh	r3, [r3, #6]
   1d070:	461a      	mov	r2, r3
   1d072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1d074:	429a      	cmp	r2, r3
   1d076:	d191      	bne.n	1cf9c <cosem_setPushSetup+0x2a4>
   1d078:	e025      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
                time_copy(e, end.dateTime);
                arr_push(&object->communicationWindow, key_init(s, e));
            }
        }
    }
    else if (index == 5)
   1d07a:	79fb      	ldrb	r3, [r7, #7]
   1d07c:	2b05      	cmp	r3, #5
   1d07e:	d107      	bne.n	1d090 <cosem_setPushSetup+0x398>
    {
        object->randomisationStartInterval = (unsigned short)var_toInteger(value);
   1d080:	6838      	ldr	r0, [r7, #0]
   1d082:	f009 fd23 	bl	26acc <var_toInteger>
   1d086:	4603      	mov	r3, r0
   1d088:	b29a      	uxth	r2, r3
   1d08a:	68bb      	ldr	r3, [r7, #8]
   1d08c:	879a      	strh	r2, [r3, #60]	; 0x3c
   1d08e:	e01a      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
    }
    else if (index == 6)
   1d090:	79fb      	ldrb	r3, [r7, #7]
   1d092:	2b06      	cmp	r3, #6
   1d094:	d108      	bne.n	1d0a8 <cosem_setPushSetup+0x3b0>
    {
        object->numberOfRetries = (unsigned char)var_toInteger(value);
   1d096:	6838      	ldr	r0, [r7, #0]
   1d098:	f009 fd18 	bl	26acc <var_toInteger>
   1d09c:	4603      	mov	r3, r0
   1d09e:	b2da      	uxtb	r2, r3
   1d0a0:	68bb      	ldr	r3, [r7, #8]
   1d0a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   1d0a6:	e00e      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
    }
    else if (index == 7)
   1d0a8:	79fb      	ldrb	r3, [r7, #7]
   1d0aa:	2b07      	cmp	r3, #7
   1d0ac:	d108      	bne.n	1d0c0 <cosem_setPushSetup+0x3c8>
    {
        object->repetitionDelay = (unsigned short)var_toInteger(value);
   1d0ae:	6838      	ldr	r0, [r7, #0]
   1d0b0:	f009 fd0c 	bl	26acc <var_toInteger>
   1d0b4:	4603      	mov	r3, r0
   1d0b6:	b29a      	uxth	r2, r3
   1d0b8:	68bb      	ldr	r3, [r7, #8]
   1d0ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   1d0be:	e002      	b.n	1d0c6 <cosem_setPushSetup+0x3ce>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d0c0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d0c4:	e000      	b.n	1d0c8 <cosem_setPushSetup+0x3d0>
    }
    return DLMS_ERROR_CODE_OK;
   1d0c6:	2300      	movs	r3, #0
}
   1d0c8:	4618      	mov	r0, r3
   1d0ca:	375c      	adds	r7, #92	; 0x5c
   1d0cc:	46bd      	mov	sp, r7
   1d0ce:	bd90      	pop	{r4, r7, pc}

0001d0d0 <setUnitCharge>:
#endif //DLMS_IGNORE_PUSH_SETUP
#ifndef DLMS_IGNORE_CHARGE
int setUnitCharge(gxUnitCharge* target, dlmsVARIANT *value)
{
   1d0d0:	b5b0      	push	{r4, r5, r7, lr}
   1d0d2:	b088      	sub	sp, #32
   1d0d4:	af00      	add	r7, sp, #0
   1d0d6:	6078      	str	r0, [r7, #4]
   1d0d8:	6039      	str	r1, [r7, #0]
    gxChargeTable *ct;
    dlmsVARIANT *it, *it2, *tmp;
    int ret, pos;
    ret = obj_clearChargeTables(&target->chargeTables);
   1d0da:	687b      	ldr	r3, [r7, #4]
   1d0dc:	330c      	adds	r3, #12
   1d0de:	4618      	mov	r0, r3
   1d0e0:	f7fa f912 	bl	17308 <obj_clearChargeTables>
   1d0e4:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d0e6:	69fb      	ldr	r3, [r7, #28]
   1d0e8:	2b00      	cmp	r3, #0
   1d0ea:	d001      	beq.n	1d0f0 <setUnitCharge+0x20>
    {
        return ret;
   1d0ec:	69fb      	ldr	r3, [r7, #28]
   1d0ee:	e105      	b.n	1d2fc <setUnitCharge+0x22c>
    }

    //charge per unit scaling
    ret = va_get(value->Arr, &it);
   1d0f0:	683b      	ldr	r3, [r7, #0]
   1d0f2:	689b      	ldr	r3, [r3, #8]
   1d0f4:	f107 0210 	add.w	r2, r7, #16
   1d0f8:	4611      	mov	r1, r2
   1d0fa:	4618      	mov	r0, r3
   1d0fc:	f009 fe90 	bl	26e20 <va_get>
   1d100:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d102:	69fb      	ldr	r3, [r7, #28]
   1d104:	2b00      	cmp	r3, #0
   1d106:	d001      	beq.n	1d10c <setUnitCharge+0x3c>
    {
        return ret;
   1d108:	69fb      	ldr	r3, [r7, #28]
   1d10a:	e0f7      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    //commodity scale
    ret = va_get(it->Arr, &it2);
   1d10c:	693b      	ldr	r3, [r7, #16]
   1d10e:	689b      	ldr	r3, [r3, #8]
   1d110:	f107 020c 	add.w	r2, r7, #12
   1d114:	4611      	mov	r1, r2
   1d116:	4618      	mov	r0, r3
   1d118:	f009 fe82 	bl	26e20 <va_get>
   1d11c:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d11e:	69fb      	ldr	r3, [r7, #28]
   1d120:	2b00      	cmp	r3, #0
   1d122:	d001      	beq.n	1d128 <setUnitCharge+0x58>
    {
        return ret;
   1d124:	69fb      	ldr	r3, [r7, #28]
   1d126:	e0e9      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   1d128:	68fb      	ldr	r3, [r7, #12]
   1d12a:	4618      	mov	r0, r3
   1d12c:	f009 fcce 	bl	26acc <var_toInteger>
   1d130:	4603      	mov	r3, r0
   1d132:	b25a      	sxtb	r2, r3
   1d134:	687b      	ldr	r3, [r7, #4]
   1d136:	701a      	strb	r2, [r3, #0]
    //price scale
    ret = va_get(it->Arr, &it2);
   1d138:	693b      	ldr	r3, [r7, #16]
   1d13a:	689b      	ldr	r3, [r3, #8]
   1d13c:	f107 020c 	add.w	r2, r7, #12
   1d140:	4611      	mov	r1, r2
   1d142:	4618      	mov	r0, r3
   1d144:	f009 fe6c 	bl	26e20 <va_get>
   1d148:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d14a:	69fb      	ldr	r3, [r7, #28]
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	d001      	beq.n	1d154 <setUnitCharge+0x84>
    {
        return ret;
   1d150:	69fb      	ldr	r3, [r7, #28]
   1d152:	e0d3      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    target->chargePerUnitScaling.priceScale = (char)var_toInteger(it2);
   1d154:	68fb      	ldr	r3, [r7, #12]
   1d156:	4618      	mov	r0, r3
   1d158:	f009 fcb8 	bl	26acc <var_toInteger>
   1d15c:	4603      	mov	r3, r0
   1d15e:	b25a      	sxtb	r2, r3
   1d160:	687b      	ldr	r3, [r7, #4]
   1d162:	705a      	strb	r2, [r3, #1]
    //commodity
    ret = va_get(value->Arr, &it);
   1d164:	683b      	ldr	r3, [r7, #0]
   1d166:	689b      	ldr	r3, [r3, #8]
   1d168:	f107 0210 	add.w	r2, r7, #16
   1d16c:	4611      	mov	r1, r2
   1d16e:	4618      	mov	r0, r3
   1d170:	f009 fe56 	bl	26e20 <va_get>
   1d174:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d176:	69fb      	ldr	r3, [r7, #28]
   1d178:	2b00      	cmp	r3, #0
   1d17a:	d001      	beq.n	1d180 <setUnitCharge+0xb0>
    {
        return ret;
   1d17c:	69fb      	ldr	r3, [r7, #28]
   1d17e:	e0bd      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    //type
    ret = va_get(it->Arr, &it2);
   1d180:	693b      	ldr	r3, [r7, #16]
   1d182:	689b      	ldr	r3, [r3, #8]
   1d184:	f107 020c 	add.w	r2, r7, #12
   1d188:	4611      	mov	r1, r2
   1d18a:	4618      	mov	r0, r3
   1d18c:	f009 fe48 	bl	26e20 <va_get>
   1d190:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d192:	69fb      	ldr	r3, [r7, #28]
   1d194:	2b00      	cmp	r3, #0
   1d196:	d001      	beq.n	1d19c <setUnitCharge+0xcc>
    {
        return ret;
   1d198:	69fb      	ldr	r3, [r7, #28]
   1d19a:	e0af      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    target->commodity.type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   1d19c:	68fb      	ldr	r3, [r7, #12]
   1d19e:	4618      	mov	r0, r3
   1d1a0:	f009 fc94 	bl	26acc <var_toInteger>
   1d1a4:	4603      	mov	r3, r0
   1d1a6:	b29a      	uxth	r2, r3
   1d1a8:	687b      	ldr	r3, [r7, #4]
   1d1aa:	805a      	strh	r2, [r3, #2]
    //LN
    ret = va_get(it->Arr, &it2);
   1d1ac:	693b      	ldr	r3, [r7, #16]
   1d1ae:	689b      	ldr	r3, [r3, #8]
   1d1b0:	f107 020c 	add.w	r2, r7, #12
   1d1b4:	4611      	mov	r1, r2
   1d1b6:	4618      	mov	r0, r3
   1d1b8:	f009 fe32 	bl	26e20 <va_get>
   1d1bc:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d1be:	69fb      	ldr	r3, [r7, #28]
   1d1c0:	2b00      	cmp	r3, #0
   1d1c2:	d001      	beq.n	1d1c8 <setUnitCharge+0xf8>
    {
        return ret;
   1d1c4:	69fb      	ldr	r3, [r7, #28]
   1d1c6:	e099      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    memset(target->commodity.logicalName, 0, 6);
   1d1c8:	687b      	ldr	r3, [r7, #4]
   1d1ca:	3304      	adds	r3, #4
   1d1cc:	2206      	movs	r2, #6
   1d1ce:	2100      	movs	r1, #0
   1d1d0:	4618      	mov	r0, r3
   1d1d2:	f00c fc7c 	bl	29ace <memset>
    if (it2->byteArr != NULL && it2->byteArr->size == 6)
   1d1d6:	68fb      	ldr	r3, [r7, #12]
   1d1d8:	689b      	ldr	r3, [r3, #8]
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d00d      	beq.n	1d1fa <setUnitCharge+0x12a>
   1d1de:	68fb      	ldr	r3, [r7, #12]
   1d1e0:	689b      	ldr	r3, [r3, #8]
   1d1e2:	88db      	ldrh	r3, [r3, #6]
   1d1e4:	2b06      	cmp	r3, #6
   1d1e6:	d108      	bne.n	1d1fa <setUnitCharge+0x12a>
    {
        memcpy(target->commodity.logicalName, it2->byteArr->data, 6);
   1d1e8:	687b      	ldr	r3, [r7, #4]
   1d1ea:	1d18      	adds	r0, r3, #4
   1d1ec:	68fb      	ldr	r3, [r7, #12]
   1d1ee:	689b      	ldr	r3, [r3, #8]
   1d1f0:	681b      	ldr	r3, [r3, #0]
   1d1f2:	2206      	movs	r2, #6
   1d1f4:	4619      	mov	r1, r3
   1d1f6:	f00c fc44 	bl	29a82 <memcpy>
    }
    //attribute index
    ret = va_get(it->Arr, &it2);
   1d1fa:	693b      	ldr	r3, [r7, #16]
   1d1fc:	689b      	ldr	r3, [r3, #8]
   1d1fe:	f107 020c 	add.w	r2, r7, #12
   1d202:	4611      	mov	r1, r2
   1d204:	4618      	mov	r0, r3
   1d206:	f009 fe0b 	bl	26e20 <va_get>
   1d20a:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d20c:	69fb      	ldr	r3, [r7, #28]
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d001      	beq.n	1d216 <setUnitCharge+0x146>
    {
        return ret;
   1d212:	69fb      	ldr	r3, [r7, #28]
   1d214:	e072      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    target->commodity.attributeIndex = (unsigned char)var_toInteger(it2);
   1d216:	68fb      	ldr	r3, [r7, #12]
   1d218:	4618      	mov	r0, r3
   1d21a:	f009 fc57 	bl	26acc <var_toInteger>
   1d21e:	4603      	mov	r3, r0
   1d220:	b2da      	uxtb	r2, r3
   1d222:	687b      	ldr	r3, [r7, #4]
   1d224:	729a      	strb	r2, [r3, #10]
    //chargeTables
    ret = va_get(value->Arr, &it);
   1d226:	683b      	ldr	r3, [r7, #0]
   1d228:	689b      	ldr	r3, [r3, #8]
   1d22a:	f107 0210 	add.w	r2, r7, #16
   1d22e:	4611      	mov	r1, r2
   1d230:	4618      	mov	r0, r3
   1d232:	f009 fdf5 	bl	26e20 <va_get>
   1d236:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
   1d238:	69fb      	ldr	r3, [r7, #28]
   1d23a:	2b00      	cmp	r3, #0
   1d23c:	d001      	beq.n	1d242 <setUnitCharge+0x172>
    {
        return ret;
   1d23e:	69fb      	ldr	r3, [r7, #28]
   1d240:	e05c      	b.n	1d2fc <setUnitCharge+0x22c>
    }
    for (pos = 0; pos != it->Arr->size; ++pos)
   1d242:	2300      	movs	r3, #0
   1d244:	61bb      	str	r3, [r7, #24]
   1d246:	e051      	b.n	1d2ec <setUnitCharge+0x21c>
    {
        ret = va_get(it->Arr, &it2);
   1d248:	693b      	ldr	r3, [r7, #16]
   1d24a:	689b      	ldr	r3, [r3, #8]
   1d24c:	f107 020c 	add.w	r2, r7, #12
   1d250:	4611      	mov	r1, r2
   1d252:	4618      	mov	r0, r3
   1d254:	f009 fde4 	bl	26e20 <va_get>
   1d258:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   1d25a:	69fb      	ldr	r3, [r7, #28]
   1d25c:	2b00      	cmp	r3, #0
   1d25e:	d001      	beq.n	1d264 <setUnitCharge+0x194>
        {
            return ret;
   1d260:	69fb      	ldr	r3, [r7, #28]
   1d262:	e04b      	b.n	1d2fc <setUnitCharge+0x22c>
        }
        ct = (gxChargeTable*)gxmalloc(sizeof(gxChargeTable));
   1d264:	2010      	movs	r0, #16
   1d266:	f00c fbed 	bl	29a44 <malloc>
   1d26a:	4603      	mov	r3, r0
   1d26c:	617b      	str	r3, [r7, #20]
        bb_init(&ct->index);
   1d26e:	697b      	ldr	r3, [r7, #20]
   1d270:	4618      	mov	r0, r3
   1d272:	f7e5 fd39 	bl	2ce8 <bb_init>
        //index
        ret = va_get(it2->Arr, &tmp);
   1d276:	68fb      	ldr	r3, [r7, #12]
   1d278:	689b      	ldr	r3, [r3, #8]
   1d27a:	f107 0208 	add.w	r2, r7, #8
   1d27e:	4611      	mov	r1, r2
   1d280:	4618      	mov	r0, r3
   1d282:	f009 fdcd 	bl	26e20 <va_get>
   1d286:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   1d288:	69fb      	ldr	r3, [r7, #28]
   1d28a:	2b00      	cmp	r3, #0
   1d28c:	d001      	beq.n	1d292 <setUnitCharge+0x1c2>
        {
            return ret;
   1d28e:	69fb      	ldr	r3, [r7, #28]
   1d290:	e034      	b.n	1d2fc <setUnitCharge+0x22c>
        }
        bb_set2(&ct->index, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1d292:	697c      	ldr	r4, [r7, #20]
   1d294:	68bb      	ldr	r3, [r7, #8]
   1d296:	689d      	ldr	r5, [r3, #8]
   1d298:	68bb      	ldr	r3, [r7, #8]
   1d29a:	689b      	ldr	r3, [r3, #8]
   1d29c:	4618      	mov	r0, r3
   1d29e:	f7e5 fd13 	bl	2cc8 <bb_size>
   1d2a2:	4603      	mov	r3, r0
   1d2a4:	2200      	movs	r2, #0
   1d2a6:	4629      	mov	r1, r5
   1d2a8:	4620      	mov	r0, r4
   1d2aa:	f7e6 f9b9 	bl	3620 <bb_set2>
        //chargePerUnit
        ret = va_get(it2->Arr, &tmp);
   1d2ae:	68fb      	ldr	r3, [r7, #12]
   1d2b0:	689b      	ldr	r3, [r3, #8]
   1d2b2:	f107 0208 	add.w	r2, r7, #8
   1d2b6:	4611      	mov	r1, r2
   1d2b8:	4618      	mov	r0, r3
   1d2ba:	f009 fdb1 	bl	26e20 <va_get>
   1d2be:	61f8      	str	r0, [r7, #28]
        if (ret != 0)
   1d2c0:	69fb      	ldr	r3, [r7, #28]
   1d2c2:	2b00      	cmp	r3, #0
   1d2c4:	d001      	beq.n	1d2ca <setUnitCharge+0x1fa>
        {
            return ret;
   1d2c6:	69fb      	ldr	r3, [r7, #28]
   1d2c8:	e018      	b.n	1d2fc <setUnitCharge+0x22c>
        }
        ct->chargePerUnit = (short)var_toInteger(tmp);
   1d2ca:	68bb      	ldr	r3, [r7, #8]
   1d2cc:	4618      	mov	r0, r3
   1d2ce:	f009 fbfd 	bl	26acc <var_toInteger>
   1d2d2:	4603      	mov	r3, r0
   1d2d4:	b21a      	sxth	r2, r3
   1d2d6:	697b      	ldr	r3, [r7, #20]
   1d2d8:	819a      	strh	r2, [r3, #12]
        arr_push(&target->chargeTables, ct);
   1d2da:	687b      	ldr	r3, [r7, #4]
   1d2dc:	330c      	adds	r3, #12
   1d2de:	6979      	ldr	r1, [r7, #20]
   1d2e0:	4618      	mov	r0, r3
   1d2e2:	f7ef f9cd 	bl	c680 <arr_push>
    ret = va_get(value->Arr, &it);
    if (ret != 0)
    {
        return ret;
    }
    for (pos = 0; pos != it->Arr->size; ++pos)
   1d2e6:	69bb      	ldr	r3, [r7, #24]
   1d2e8:	3301      	adds	r3, #1
   1d2ea:	61bb      	str	r3, [r7, #24]
   1d2ec:	693b      	ldr	r3, [r7, #16]
   1d2ee:	689b      	ldr	r3, [r3, #8]
   1d2f0:	88db      	ldrh	r3, [r3, #6]
   1d2f2:	461a      	mov	r2, r3
   1d2f4:	69bb      	ldr	r3, [r7, #24]
   1d2f6:	429a      	cmp	r2, r3
   1d2f8:	d1a6      	bne.n	1d248 <setUnitCharge+0x178>
            return ret;
        }
        ct->chargePerUnit = (short)var_toInteger(tmp);
        arr_push(&target->chargeTables, ct);
    }
    return ret;
   1d2fa:	69fb      	ldr	r3, [r7, #28]
}
   1d2fc:	4618      	mov	r0, r3
   1d2fe:	3720      	adds	r7, #32
   1d300:	46bd      	mov	sp, r7
   1d302:	bdb0      	pop	{r4, r5, r7, pc}

0001d304 <cosem_setCharge>:

int cosem_setCharge(gxCharge* object, unsigned char index, dlmsVARIANT *value)
{
   1d304:	b580      	push	{r7, lr}
   1d306:	b08a      	sub	sp, #40	; 0x28
   1d308:	af00      	add	r7, sp, #0
   1d30a:	60f8      	str	r0, [r7, #12]
   1d30c:	460b      	mov	r3, r1
   1d30e:	607a      	str	r2, [r7, #4]
   1d310:	72fb      	strb	r3, [r7, #11]
    int ret = 0;
   1d312:	2300      	movs	r3, #0
   1d314:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT tmp;
    if (index == 2)
   1d316:	7afb      	ldrb	r3, [r7, #11]
   1d318:	2b02      	cmp	r3, #2
   1d31a:	d107      	bne.n	1d32c <cosem_setCharge+0x28>
    {
        object->totalAmountPaid = (short)var_toInteger(value);
   1d31c:	6878      	ldr	r0, [r7, #4]
   1d31e:	f009 fbd5 	bl	26acc <var_toInteger>
   1d322:	4603      	mov	r3, r0
   1d324:	b21a      	sxth	r2, r3
   1d326:	68fb      	ldr	r3, [r7, #12]
   1d328:	821a      	strh	r2, [r3, #16]
   1d32a:	e0cc      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 3)
   1d32c:	7afb      	ldrb	r3, [r7, #11]
   1d32e:	2b03      	cmp	r3, #3
   1d330:	d107      	bne.n	1d342 <cosem_setCharge+0x3e>
    {
        object->chargeType = (unsigned char)var_toInteger(value);
   1d332:	6878      	ldr	r0, [r7, #4]
   1d334:	f009 fbca 	bl	26acc <var_toInteger>
   1d338:	4603      	mov	r3, r0
   1d33a:	b2da      	uxtb	r2, r3
   1d33c:	68fb      	ldr	r3, [r7, #12]
   1d33e:	749a      	strb	r2, [r3, #18]
   1d340:	e0c1      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 4)
   1d342:	7afb      	ldrb	r3, [r7, #11]
   1d344:	2b04      	cmp	r3, #4
   1d346:	d107      	bne.n	1d358 <cosem_setCharge+0x54>
    {
        object->priority = (unsigned char)var_toInteger(value);
   1d348:	6878      	ldr	r0, [r7, #4]
   1d34a:	f009 fbbf 	bl	26acc <var_toInteger>
   1d34e:	4603      	mov	r3, r0
   1d350:	b2da      	uxtb	r2, r3
   1d352:	68fb      	ldr	r3, [r7, #12]
   1d354:	74da      	strb	r2, [r3, #19]
   1d356:	e0b6      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 5)
   1d358:	7afb      	ldrb	r3, [r7, #11]
   1d35a:	2b05      	cmp	r3, #5
   1d35c:	d107      	bne.n	1d36e <cosem_setCharge+0x6a>
    {
        ret = setUnitCharge(&object->unitChargeActive, value);
   1d35e:	68fb      	ldr	r3, [r7, #12]
   1d360:	3314      	adds	r3, #20
   1d362:	6879      	ldr	r1, [r7, #4]
   1d364:	4618      	mov	r0, r3
   1d366:	f7ff feb3 	bl	1d0d0 <setUnitCharge>
   1d36a:	6278      	str	r0, [r7, #36]	; 0x24
   1d36c:	e0ab      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 6)
   1d36e:	7afb      	ldrb	r3, [r7, #11]
   1d370:	2b06      	cmp	r3, #6
   1d372:	d107      	bne.n	1d384 <cosem_setCharge+0x80>
    {
        ret = setUnitCharge(&object->unitChargePassive, value);
   1d374:	68fb      	ldr	r3, [r7, #12]
   1d376:	3330      	adds	r3, #48	; 0x30
   1d378:	6879      	ldr	r1, [r7, #4]
   1d37a:	4618      	mov	r0, r3
   1d37c:	f7ff fea8 	bl	1d0d0 <setUnitCharge>
   1d380:	6278      	str	r0, [r7, #36]	; 0x24
   1d382:	e0a0      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 7)
   1d384:	7afb      	ldrb	r3, [r7, #11]
   1d386:	2b07      	cmp	r3, #7
   1d388:	d12c      	bne.n	1d3e4 <cosem_setCharge+0xe0>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1d38a:	687b      	ldr	r3, [r7, #4]
   1d38c:	781b      	ldrb	r3, [r3, #0]
   1d38e:	2b09      	cmp	r3, #9
   1d390:	d122      	bne.n	1d3d8 <cosem_setCharge+0xd4>
   1d392:	687b      	ldr	r3, [r7, #4]
   1d394:	689b      	ldr	r3, [r3, #8]
   1d396:	2b00      	cmp	r3, #0
   1d398:	d01e      	beq.n	1d3d8 <cosem_setCharge+0xd4>
        {
            var_init(&tmp);
   1d39a:	f107 0310 	add.w	r3, r7, #16
   1d39e:	4618      	mov	r0, r3
   1d3a0:	f008 fec2 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1d3a4:	f107 0310 	add.w	r3, r7, #16
   1d3a8:	461a      	mov	r2, r3
   1d3aa:	2119      	movs	r1, #25
   1d3ac:	6878      	ldr	r0, [r7, #4]
   1d3ae:	f7ec fa2d 	bl	980c <dlms_changeType2>
   1d3b2:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0)
   1d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3b6:	2b00      	cmp	r3, #0
   1d3b8:	d001      	beq.n	1d3be <cosem_setCharge+0xba>
            {
                return ret;
   1d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d3bc:	e084      	b.n	1d4c8 <cosem_setCharge+0x1c4>
            }
            time_copy(&object->unitChargeActivationTime, tmp.dateTime);
   1d3be:	68fb      	ldr	r3, [r7, #12]
   1d3c0:	334c      	adds	r3, #76	; 0x4c
   1d3c2:	69ba      	ldr	r2, [r7, #24]
   1d3c4:	4611      	mov	r1, r2
   1d3c6:	4618      	mov	r0, r3
   1d3c8:	f7e9 fac4 	bl	6954 <time_copy>
            var_clear(&tmp);
   1d3cc:	f107 0310 	add.w	r3, r7, #16
   1d3d0:	4618      	mov	r0, r3
   1d3d2:	f008 feb9 	bl	26148 <var_clear>
   1d3d6:	e076      	b.n	1d4c6 <cosem_setCharge+0x1c2>
        }
        else
        {
            time_clear(&object->unitChargeActivationTime);
   1d3d8:	68fb      	ldr	r3, [r7, #12]
   1d3da:	334c      	adds	r3, #76	; 0x4c
   1d3dc:	4618      	mov	r0, r3
   1d3de:	f7e9 f835 	bl	644c <time_clear>
   1d3e2:	e070      	b.n	1d4c6 <cosem_setCharge+0x1c2>
        }
    }
    else if (index == 8)
   1d3e4:	7afb      	ldrb	r3, [r7, #11]
   1d3e6:	2b08      	cmp	r3, #8
   1d3e8:	d107      	bne.n	1d3fa <cosem_setCharge+0xf6>
    {
        object->period = var_toInteger(value);
   1d3ea:	6878      	ldr	r0, [r7, #4]
   1d3ec:	f009 fb6e 	bl	26acc <var_toInteger>
   1d3f0:	4603      	mov	r3, r0
   1d3f2:	461a      	mov	r2, r3
   1d3f4:	68fb      	ldr	r3, [r7, #12]
   1d3f6:	67da      	str	r2, [r3, #124]	; 0x7c
   1d3f8:	e065      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 9)
   1d3fa:	7afb      	ldrb	r3, [r7, #11]
   1d3fc:	2b09      	cmp	r3, #9
   1d3fe:	d10d      	bne.n	1d41c <cosem_setCharge+0x118>
    {
        ret = ba_copy(&object->chargeConfiguration, value->bitArr->data, (unsigned short)value->bitArr->size);
   1d400:	68fb      	ldr	r3, [r7, #12]
   1d402:	f103 0080 	add.w	r0, r3, #128	; 0x80
   1d406:	687b      	ldr	r3, [r7, #4]
   1d408:	689b      	ldr	r3, [r3, #8]
   1d40a:	6819      	ldr	r1, [r3, #0]
   1d40c:	687b      	ldr	r3, [r7, #4]
   1d40e:	689b      	ldr	r3, [r3, #8]
   1d410:	88db      	ldrh	r3, [r3, #6]
   1d412:	461a      	mov	r2, r3
   1d414:	f7e5 fb4e 	bl	2ab4 <ba_copy>
   1d418:	6278      	str	r0, [r7, #36]	; 0x24
   1d41a:	e054      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 10)
   1d41c:	7afb      	ldrb	r3, [r7, #11]
   1d41e:	2b0a      	cmp	r3, #10
   1d420:	d12c      	bne.n	1d47c <cosem_setCharge+0x178>
    {
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1d422:	687b      	ldr	r3, [r7, #4]
   1d424:	781b      	ldrb	r3, [r3, #0]
   1d426:	2b09      	cmp	r3, #9
   1d428:	d122      	bne.n	1d470 <cosem_setCharge+0x16c>
   1d42a:	687b      	ldr	r3, [r7, #4]
   1d42c:	689b      	ldr	r3, [r3, #8]
   1d42e:	2b00      	cmp	r3, #0
   1d430:	d01e      	beq.n	1d470 <cosem_setCharge+0x16c>
        {
            var_init(&tmp);
   1d432:	f107 0310 	add.w	r3, r7, #16
   1d436:	4618      	mov	r0, r3
   1d438:	f008 fe76 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1d43c:	f107 0310 	add.w	r3, r7, #16
   1d440:	461a      	mov	r2, r3
   1d442:	2119      	movs	r1, #25
   1d444:	6878      	ldr	r0, [r7, #4]
   1d446:	f7ec f9e1 	bl	980c <dlms_changeType2>
   1d44a:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0)
   1d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d44e:	2b00      	cmp	r3, #0
   1d450:	d001      	beq.n	1d456 <cosem_setCharge+0x152>
            {
                return ret;
   1d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d454:	e038      	b.n	1d4c8 <cosem_setCharge+0x1c4>
            }
            time_copy(&object->lastCollectionTime, tmp.dateTime);
   1d456:	68fb      	ldr	r3, [r7, #12]
   1d458:	338c      	adds	r3, #140	; 0x8c
   1d45a:	69ba      	ldr	r2, [r7, #24]
   1d45c:	4611      	mov	r1, r2
   1d45e:	4618      	mov	r0, r3
   1d460:	f7e9 fa78 	bl	6954 <time_copy>
            var_clear(&tmp);
   1d464:	f107 0310 	add.w	r3, r7, #16
   1d468:	4618      	mov	r0, r3
   1d46a:	f008 fe6d 	bl	26148 <var_clear>
   1d46e:	e02a      	b.n	1d4c6 <cosem_setCharge+0x1c2>
        }
        else
        {
            time_clear(&object->lastCollectionTime);
   1d470:	68fb      	ldr	r3, [r7, #12]
   1d472:	338c      	adds	r3, #140	; 0x8c
   1d474:	4618      	mov	r0, r3
   1d476:	f7e8 ffe9 	bl	644c <time_clear>
   1d47a:	e024      	b.n	1d4c6 <cosem_setCharge+0x1c2>
        }
    }
    else if (index == 11)
   1d47c:	7afb      	ldrb	r3, [r7, #11]
   1d47e:	2b0b      	cmp	r3, #11
   1d480:	d107      	bne.n	1d492 <cosem_setCharge+0x18e>
    {
        object->lastCollectionAmount = var_toInteger(value);
   1d482:	6878      	ldr	r0, [r7, #4]
   1d484:	f009 fb22 	bl	26acc <var_toInteger>
   1d488:	4602      	mov	r2, r0
   1d48a:	68fb      	ldr	r3, [r7, #12]
   1d48c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
   1d490:	e019      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 12)
   1d492:	7afb      	ldrb	r3, [r7, #11]
   1d494:	2b0c      	cmp	r3, #12
   1d496:	d107      	bne.n	1d4a8 <cosem_setCharge+0x1a4>
    {
        object->totalAmountRemaining = var_toInteger(value);
   1d498:	6878      	ldr	r0, [r7, #4]
   1d49a:	f009 fb17 	bl	26acc <var_toInteger>
   1d49e:	4602      	mov	r2, r0
   1d4a0:	68fb      	ldr	r3, [r7, #12]
   1d4a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   1d4a6:	e00e      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else if (index == 13)
   1d4a8:	7afb      	ldrb	r3, [r7, #11]
   1d4aa:	2b0d      	cmp	r3, #13
   1d4ac:	d108      	bne.n	1d4c0 <cosem_setCharge+0x1bc>
    {
        object->proportion = (unsigned short)var_toInteger(value);
   1d4ae:	6878      	ldr	r0, [r7, #4]
   1d4b0:	f009 fb0c 	bl	26acc <var_toInteger>
   1d4b4:	4603      	mov	r3, r0
   1d4b6:	b29a      	uxth	r2, r3
   1d4b8:	68fb      	ldr	r3, [r7, #12]
   1d4ba:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
   1d4be:	e002      	b.n	1d4c6 <cosem_setCharge+0x1c2>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d4c0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d4c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   1d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d4c8:	4618      	mov	r0, r3
   1d4ca:	3728      	adds	r7, #40	; 0x28
   1d4cc:	46bd      	mov	sp, r7
   1d4ce:	bd80      	pop	{r7, pc}

0001d4d0 <cosem_setCredit>:
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_CREDIT
int cosem_setCredit(gxCredit* object, unsigned char index, dlmsVARIANT *value)
{
   1d4d0:	b580      	push	{r7, lr}
   1d4d2:	b08a      	sub	sp, #40	; 0x28
   1d4d4:	af00      	add	r7, sp, #0
   1d4d6:	60f8      	str	r0, [r7, #12]
   1d4d8:	460b      	mov	r3, r1
   1d4da:	607a      	str	r2, [r7, #4]
   1d4dc:	72fb      	strb	r3, [r7, #11]
    int ret = 0;
   1d4de:	2300      	movs	r3, #0
   1d4e0:	627b      	str	r3, [r7, #36]	; 0x24
    dlmsVARIANT tmp;
    if (index == 2)
   1d4e2:	7afb      	ldrb	r3, [r7, #11]
   1d4e4:	2b02      	cmp	r3, #2
   1d4e6:	d106      	bne.n	1d4f6 <cosem_setCredit+0x26>
    {
        object->currentCreditAmount = var_toInteger(value);
   1d4e8:	6878      	ldr	r0, [r7, #4]
   1d4ea:	f009 faef 	bl	26acc <var_toInteger>
   1d4ee:	4602      	mov	r2, r0
   1d4f0:	68fb      	ldr	r3, [r7, #12]
   1d4f2:	611a      	str	r2, [r3, #16]
   1d4f4:	e07e      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 3)
   1d4f6:	7afb      	ldrb	r3, [r7, #11]
   1d4f8:	2b03      	cmp	r3, #3
   1d4fa:	d107      	bne.n	1d50c <cosem_setCredit+0x3c>
    {
        object->type = (unsigned char)var_toInteger(value);
   1d4fc:	6878      	ldr	r0, [r7, #4]
   1d4fe:	f009 fae5 	bl	26acc <var_toInteger>
   1d502:	4603      	mov	r3, r0
   1d504:	b2da      	uxtb	r2, r3
   1d506:	68fb      	ldr	r3, [r7, #12]
   1d508:	751a      	strb	r2, [r3, #20]
   1d50a:	e073      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 4)
   1d50c:	7afb      	ldrb	r3, [r7, #11]
   1d50e:	2b04      	cmp	r3, #4
   1d510:	d107      	bne.n	1d522 <cosem_setCredit+0x52>
    {
        object->priority = (unsigned char)var_toInteger(value);
   1d512:	6878      	ldr	r0, [r7, #4]
   1d514:	f009 fada 	bl	26acc <var_toInteger>
   1d518:	4603      	mov	r3, r0
   1d51a:	b2da      	uxtb	r2, r3
   1d51c:	68fb      	ldr	r3, [r7, #12]
   1d51e:	755a      	strb	r2, [r3, #21]
   1d520:	e068      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 5)
   1d522:	7afb      	ldrb	r3, [r7, #11]
   1d524:	2b05      	cmp	r3, #5
   1d526:	d106      	bne.n	1d536 <cosem_setCredit+0x66>
    {
        object->warningThreshold = var_toInteger(value);
   1d528:	6878      	ldr	r0, [r7, #4]
   1d52a:	f009 facf 	bl	26acc <var_toInteger>
   1d52e:	4602      	mov	r2, r0
   1d530:	68fb      	ldr	r3, [r7, #12]
   1d532:	619a      	str	r2, [r3, #24]
   1d534:	e05e      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 6)
   1d536:	7afb      	ldrb	r3, [r7, #11]
   1d538:	2b06      	cmp	r3, #6
   1d53a:	d106      	bne.n	1d54a <cosem_setCredit+0x7a>
    {
        object->limit = var_toInteger(value);
   1d53c:	6878      	ldr	r0, [r7, #4]
   1d53e:	f009 fac5 	bl	26acc <var_toInteger>
   1d542:	4602      	mov	r2, r0
   1d544:	68fb      	ldr	r3, [r7, #12]
   1d546:	61da      	str	r2, [r3, #28]
   1d548:	e054      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 7)
   1d54a:	7afb      	ldrb	r3, [r7, #11]
   1d54c:	2b07      	cmp	r3, #7
   1d54e:	d10d      	bne.n	1d56c <cosem_setCredit+0x9c>
    {
        ret = ba_copy(&object->creditConfiguration, value->bitArr->data, value->bitArr->size);
   1d550:	68fb      	ldr	r3, [r7, #12]
   1d552:	f103 0020 	add.w	r0, r3, #32
   1d556:	687b      	ldr	r3, [r7, #4]
   1d558:	689b      	ldr	r3, [r3, #8]
   1d55a:	6819      	ldr	r1, [r3, #0]
   1d55c:	687b      	ldr	r3, [r7, #4]
   1d55e:	689b      	ldr	r3, [r3, #8]
   1d560:	88db      	ldrh	r3, [r3, #6]
   1d562:	461a      	mov	r2, r3
   1d564:	f7e5 faa6 	bl	2ab4 <ba_copy>
   1d568:	6278      	str	r0, [r7, #36]	; 0x24
   1d56a:	e043      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 8)
   1d56c:	7afb      	ldrb	r3, [r7, #11]
   1d56e:	2b08      	cmp	r3, #8
   1d570:	d108      	bne.n	1d584 <cosem_setCredit+0xb4>
    {
        object->status = (unsigned char)var_toInteger(value);
   1d572:	6878      	ldr	r0, [r7, #4]
   1d574:	f009 faaa 	bl	26acc <var_toInteger>
   1d578:	4603      	mov	r3, r0
   1d57a:	b2da      	uxtb	r2, r3
   1d57c:	68fb      	ldr	r3, [r7, #12]
   1d57e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   1d582:	e037      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 9)
   1d584:	7afb      	ldrb	r3, [r7, #11]
   1d586:	2b09      	cmp	r3, #9
   1d588:	d106      	bne.n	1d598 <cosem_setCredit+0xc8>
    {
        object->presetCreditAmount = var_toInteger(value);
   1d58a:	6878      	ldr	r0, [r7, #4]
   1d58c:	f009 fa9e 	bl	26acc <var_toInteger>
   1d590:	4602      	mov	r2, r0
   1d592:	68fb      	ldr	r3, [r7, #12]
   1d594:	631a      	str	r2, [r3, #48]	; 0x30
   1d596:	e02d      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 10)
   1d598:	7afb      	ldrb	r3, [r7, #11]
   1d59a:	2b0a      	cmp	r3, #10
   1d59c:	d106      	bne.n	1d5ac <cosem_setCredit+0xdc>
    {
        object->creditAvailableThreshold = var_toInteger(value);
   1d59e:	6878      	ldr	r0, [r7, #4]
   1d5a0:	f009 fa94 	bl	26acc <var_toInteger>
   1d5a4:	4602      	mov	r2, r0
   1d5a6:	68fb      	ldr	r3, [r7, #12]
   1d5a8:	635a      	str	r2, [r3, #52]	; 0x34
   1d5aa:	e023      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else if (index == 11)
   1d5ac:	7afb      	ldrb	r3, [r7, #11]
   1d5ae:	2b0b      	cmp	r3, #11
   1d5b0:	d11d      	bne.n	1d5ee <cosem_setCredit+0x11e>
    {
        var_init(&tmp);
   1d5b2:	f107 0310 	add.w	r3, r7, #16
   1d5b6:	4618      	mov	r0, r3
   1d5b8:	f008 fdb6 	bl	26128 <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   1d5bc:	687b      	ldr	r3, [r7, #4]
   1d5be:	689b      	ldr	r3, [r3, #8]
   1d5c0:	f107 0210 	add.w	r2, r7, #16
   1d5c4:	2119      	movs	r1, #25
   1d5c6:	4618      	mov	r0, r3
   1d5c8:	f7ec f944 	bl	9854 <dlms_changeType>
   1d5cc:	6278      	str	r0, [r7, #36]	; 0x24
        if (ret == 0)
   1d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5d0:	2b00      	cmp	r3, #0
   1d5d2:	d106      	bne.n	1d5e2 <cosem_setCredit+0x112>
        {
            time_copy(&object->period, tmp.dateTime);
   1d5d4:	68fb      	ldr	r3, [r7, #12]
   1d5d6:	3338      	adds	r3, #56	; 0x38
   1d5d8:	69ba      	ldr	r2, [r7, #24]
   1d5da:	4611      	mov	r1, r2
   1d5dc:	4618      	mov	r0, r3
   1d5de:	f7e9 f9b9 	bl	6954 <time_copy>
        }
        var_clear(&tmp);
   1d5e2:	f107 0310 	add.w	r3, r7, #16
   1d5e6:	4618      	mov	r0, r3
   1d5e8:	f008 fdae 	bl	26148 <var_clear>
   1d5ec:	e002      	b.n	1d5f4 <cosem_setCredit+0x124>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d5ee:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d5f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return ret;
   1d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d5f6:	4618      	mov	r0, r3
   1d5f8:	3728      	adds	r7, #40	; 0x28
   1d5fa:	46bd      	mov	sp, r7
   1d5fc:	bd80      	pop	{r7, pc}
   1d5fe:	bf00      	nop

0001d600 <cosem_setAccount>:
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_ACCOUNT
int cosem_setAccount(gxAccount* object, unsigned char index, dlmsVARIANT *value)
{
   1d600:	b580      	push	{r7, lr}
   1d602:	b092      	sub	sp, #72	; 0x48
   1d604:	af00      	add	r7, sp, #0
   1d606:	60f8      	str	r0, [r7, #12]
   1d608:	460b      	mov	r3, r1
   1d60a:	607a      	str	r2, [r7, #4]
   1d60c:	72fb      	strb	r3, [r7, #11]
    int ret = 0, pos;
   1d60e:	2300      	movs	r3, #0
   1d610:	647b      	str	r3, [r7, #68]	; 0x44
    dlmsVARIANT *it, *tmp2;
    dlmsVARIANT tmp;
    gxCreditChargeConfiguration *ccc;
    gxTokenGatewayConfiguration *gwc;

    if (index == 2)
   1d612:	7afb      	ldrb	r3, [r7, #11]
   1d614:	2b02      	cmp	r3, #2
   1d616:	d12c      	bne.n	1d672 <cosem_setAccount+0x72>
    {
        //payment mode
        ret = va_get(value->Arr, &it);
   1d618:	687b      	ldr	r3, [r7, #4]
   1d61a:	689b      	ldr	r3, [r3, #8]
   1d61c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d620:	4611      	mov	r1, r2
   1d622:	4618      	mov	r0, r3
   1d624:	f009 fbfc 	bl	26e20 <va_get>
   1d628:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret != 0)
   1d62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d62c:	2b00      	cmp	r3, #0
   1d62e:	d001      	beq.n	1d634 <cosem_setAccount+0x34>
        {
            return ret;
   1d630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d632:	e2dd      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        object->paymentMode = (DLMS_ACCOUNT_PAYMENT_MODE)var_toInteger(it);
   1d634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d636:	4618      	mov	r0, r3
   1d638:	f009 fa48 	bl	26acc <var_toInteger>
   1d63c:	4603      	mov	r3, r0
   1d63e:	b2da      	uxtb	r2, r3
   1d640:	68fb      	ldr	r3, [r7, #12]
   1d642:	741a      	strb	r2, [r3, #16]
        //account status
        ret = va_get(value->Arr, &it);
   1d644:	687b      	ldr	r3, [r7, #4]
   1d646:	689b      	ldr	r3, [r3, #8]
   1d648:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d64c:	4611      	mov	r1, r2
   1d64e:	4618      	mov	r0, r3
   1d650:	f009 fbe6 	bl	26e20 <va_get>
   1d654:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret != 0)
   1d656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d658:	2b00      	cmp	r3, #0
   1d65a:	d001      	beq.n	1d660 <cosem_setAccount+0x60>
        {
            return ret;
   1d65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d65e:	e2c7      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        object->accountStatus = (DLMS_ACCOUNT_STATUS)var_toInteger(it);
   1d660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d662:	4618      	mov	r0, r3
   1d664:	f009 fa32 	bl	26acc <var_toInteger>
   1d668:	4603      	mov	r3, r0
   1d66a:	b2da      	uxtb	r2, r3
   1d66c:	68fb      	ldr	r3, [r7, #12]
   1d66e:	745a      	strb	r2, [r3, #17]
   1d670:	e2bd      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 3)
   1d672:	7afb      	ldrb	r3, [r7, #11]
   1d674:	2b03      	cmp	r3, #3
   1d676:	d107      	bne.n	1d688 <cosem_setAccount+0x88>
    {
        object->currentCreditInUse = (unsigned char)var_toInteger(value);
   1d678:	6878      	ldr	r0, [r7, #4]
   1d67a:	f009 fa27 	bl	26acc <var_toInteger>
   1d67e:	4603      	mov	r3, r0
   1d680:	b2da      	uxtb	r2, r3
   1d682:	68fb      	ldr	r3, [r7, #12]
   1d684:	749a      	strb	r2, [r3, #18]
   1d686:	e2b2      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 4)
   1d688:	7afb      	ldrb	r3, [r7, #11]
   1d68a:	2b04      	cmp	r3, #4
   1d68c:	d11d      	bne.n	1d6ca <cosem_setAccount+0xca>
    {
        if (value->bitArr == NULL || value->bitArr->size == 0)
   1d68e:	687b      	ldr	r3, [r7, #4]
   1d690:	689b      	ldr	r3, [r3, #8]
   1d692:	2b00      	cmp	r3, #0
   1d694:	d004      	beq.n	1d6a0 <cosem_setAccount+0xa0>
   1d696:	687b      	ldr	r3, [r7, #4]
   1d698:	689b      	ldr	r3, [r3, #8]
   1d69a:	88db      	ldrh	r3, [r3, #6]
   1d69c:	2b00      	cmp	r3, #0
   1d69e:	d101      	bne.n	1d6a4 <cosem_setAccount+0xa4>
        {
            return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1d6a0:	2303      	movs	r3, #3
   1d6a2:	e2a5      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        else
        {
            int v;
            if ((ret = ba_toInteger(value->bitArr, &v)) != 0)
   1d6a4:	687b      	ldr	r3, [r7, #4]
   1d6a6:	689b      	ldr	r3, [r3, #8]
   1d6a8:	f107 0214 	add.w	r2, r7, #20
   1d6ac:	4611      	mov	r1, r2
   1d6ae:	4618      	mov	r0, r3
   1d6b0:	f7e5 fa80 	bl	2bb4 <ba_toInteger>
   1d6b4:	6478      	str	r0, [r7, #68]	; 0x44
   1d6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d6b8:	2b00      	cmp	r3, #0
   1d6ba:	d001      	beq.n	1d6c0 <cosem_setAccount+0xc0>
            {
                return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1d6bc:	2303      	movs	r3, #3
   1d6be:	e297      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            object->currentCreditStatus = (DLMS_ACCOUNT_CREDIT_STATUS)v;
   1d6c0:	697b      	ldr	r3, [r7, #20]
   1d6c2:	b2da      	uxtb	r2, r3
   1d6c4:	68fb      	ldr	r3, [r7, #12]
   1d6c6:	74da      	strb	r2, [r3, #19]
   1d6c8:	e291      	b.n	1dbee <cosem_setAccount+0x5ee>
        }
    }
    else if (index == 5)
   1d6ca:	7afb      	ldrb	r3, [r7, #11]
   1d6cc:	2b05      	cmp	r3, #5
   1d6ce:	d106      	bne.n	1d6de <cosem_setAccount+0xde>
    {
        object->availableCredit = var_toInteger(value);
   1d6d0:	6878      	ldr	r0, [r7, #4]
   1d6d2:	f009 f9fb 	bl	26acc <var_toInteger>
   1d6d6:	4602      	mov	r2, r0
   1d6d8:	68fb      	ldr	r3, [r7, #12]
   1d6da:	615a      	str	r2, [r3, #20]
   1d6dc:	e287      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 6)
   1d6de:	7afb      	ldrb	r3, [r7, #11]
   1d6e0:	2b06      	cmp	r3, #6
   1d6e2:	d106      	bne.n	1d6f2 <cosem_setAccount+0xf2>
    {
        object->amountToClear = var_toInteger(value);
   1d6e4:	6878      	ldr	r0, [r7, #4]
   1d6e6:	f009 f9f1 	bl	26acc <var_toInteger>
   1d6ea:	4602      	mov	r2, r0
   1d6ec:	68fb      	ldr	r3, [r7, #12]
   1d6ee:	619a      	str	r2, [r3, #24]
   1d6f0:	e27d      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 7)
   1d6f2:	7afb      	ldrb	r3, [r7, #11]
   1d6f4:	2b07      	cmp	r3, #7
   1d6f6:	d106      	bne.n	1d706 <cosem_setAccount+0x106>
    {
        object->clearanceThreshold = var_toInteger(value);
   1d6f8:	6878      	ldr	r0, [r7, #4]
   1d6fa:	f009 f9e7 	bl	26acc <var_toInteger>
   1d6fe:	4602      	mov	r2, r0
   1d700:	68fb      	ldr	r3, [r7, #12]
   1d702:	61da      	str	r2, [r3, #28]
   1d704:	e273      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 8)
   1d706:	7afb      	ldrb	r3, [r7, #11]
   1d708:	2b08      	cmp	r3, #8
   1d70a:	d106      	bne.n	1d71a <cosem_setAccount+0x11a>
    {
        object->aggregatedDebt = var_toInteger(value);
   1d70c:	6878      	ldr	r0, [r7, #4]
   1d70e:	f009 f9dd 	bl	26acc <var_toInteger>
   1d712:	4602      	mov	r2, r0
   1d714:	68fb      	ldr	r3, [r7, #12]
   1d716:	621a      	str	r2, [r3, #32]
   1d718:	e269      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 9)
   1d71a:	7afb      	ldrb	r3, [r7, #11]
   1d71c:	2b09      	cmp	r3, #9
   1d71e:	d13f      	bne.n	1d7a0 <cosem_setAccount+0x1a0>
    {
        arr_clear(&object->creditReferences);
   1d720:	68fb      	ldr	r3, [r7, #12]
   1d722:	3324      	adds	r3, #36	; 0x24
   1d724:	4618      	mov	r0, r3
   1d726:	f7ee fff3 	bl	c710 <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d72a:	2300      	movs	r3, #0
   1d72c:	643b      	str	r3, [r7, #64]	; 0x40
   1d72e:	e02f      	b.n	1d790 <cosem_setAccount+0x190>
        {
            ret = va_get(value->Arr, &it);
   1d730:	687b      	ldr	r3, [r7, #4]
   1d732:	689b      	ldr	r3, [r3, #8]
   1d734:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d738:	4611      	mov	r1, r2
   1d73a:	4618      	mov	r0, r3
   1d73c:	f009 fb70 	bl	26e20 <va_get>
   1d740:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d744:	2b00      	cmp	r3, #0
   1d746:	d001      	beq.n	1d74c <cosem_setAccount+0x14c>
            {
                return ret;
   1d748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d74a:	e251      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            if (it->byteArr == NULL || it->byteArr->size != 6)
   1d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d74e:	689b      	ldr	r3, [r3, #8]
   1d750:	2b00      	cmp	r3, #0
   1d752:	d004      	beq.n	1d75e <cosem_setAccount+0x15e>
   1d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d756:	689b      	ldr	r3, [r3, #8]
   1d758:	88db      	ldrh	r3, [r3, #6]
   1d75a:	2b06      	cmp	r3, #6
   1d75c:	d002      	beq.n	1d764 <cosem_setAccount+0x164>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d75e:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d762:	e245      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            ba = (unsigned char*)gxmalloc(6);
   1d764:	2006      	movs	r0, #6
   1d766:	f00c f96d 	bl	29a44 <malloc>
   1d76a:	4603      	mov	r3, r0
   1d76c:	63fb      	str	r3, [r7, #60]	; 0x3c
            memcpy(ba, it->byteArr->data, 6);
   1d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d770:	689b      	ldr	r3, [r3, #8]
   1d772:	681b      	ldr	r3, [r3, #0]
   1d774:	2206      	movs	r2, #6
   1d776:	4619      	mov	r1, r3
   1d778:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1d77a:	f00c f982 	bl	29a82 <memcpy>
            arr_push(&object->creditReferences, ba);
   1d77e:	68fb      	ldr	r3, [r7, #12]
   1d780:	3324      	adds	r3, #36	; 0x24
   1d782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1d784:	4618      	mov	r0, r3
   1d786:	f7ee ff7b 	bl	c680 <arr_push>
        object->aggregatedDebt = var_toInteger(value);
    }
    else if (index == 9)
    {
        arr_clear(&object->creditReferences);
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d78c:	3301      	adds	r3, #1
   1d78e:	643b      	str	r3, [r7, #64]	; 0x40
   1d790:	687b      	ldr	r3, [r7, #4]
   1d792:	689b      	ldr	r3, [r3, #8]
   1d794:	88db      	ldrh	r3, [r3, #6]
   1d796:	461a      	mov	r2, r3
   1d798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d79a:	429a      	cmp	r2, r3
   1d79c:	d1c8      	bne.n	1d730 <cosem_setAccount+0x130>
   1d79e:	e226      	b.n	1dbee <cosem_setAccount+0x5ee>
            ba = (unsigned char*)gxmalloc(6);
            memcpy(ba, it->byteArr->data, 6);
            arr_push(&object->creditReferences, ba);
        }
    }
    else if (index == 10)
   1d7a0:	7afb      	ldrb	r3, [r7, #11]
   1d7a2:	2b0a      	cmp	r3, #10
   1d7a4:	d13f      	bne.n	1d826 <cosem_setAccount+0x226>
    {
        arr_clear(&object->chargeReferences);
   1d7a6:	68fb      	ldr	r3, [r7, #12]
   1d7a8:	3334      	adds	r3, #52	; 0x34
   1d7aa:	4618      	mov	r0, r3
   1d7ac:	f7ee ffb0 	bl	c710 <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d7b0:	2300      	movs	r3, #0
   1d7b2:	643b      	str	r3, [r7, #64]	; 0x40
   1d7b4:	e02f      	b.n	1d816 <cosem_setAccount+0x216>
        {
            ret = va_get(value->Arr, &it);
   1d7b6:	687b      	ldr	r3, [r7, #4]
   1d7b8:	689b      	ldr	r3, [r3, #8]
   1d7ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d7be:	4611      	mov	r1, r2
   1d7c0:	4618      	mov	r0, r3
   1d7c2:	f009 fb2d 	bl	26e20 <va_get>
   1d7c6:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d7ca:	2b00      	cmp	r3, #0
   1d7cc:	d001      	beq.n	1d7d2 <cosem_setAccount+0x1d2>
            {
                return ret;
   1d7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d7d0:	e20e      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            if (it->byteArr == NULL || it->byteArr->size != 6)
   1d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d7d4:	689b      	ldr	r3, [r3, #8]
   1d7d6:	2b00      	cmp	r3, #0
   1d7d8:	d004      	beq.n	1d7e4 <cosem_setAccount+0x1e4>
   1d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d7dc:	689b      	ldr	r3, [r3, #8]
   1d7de:	88db      	ldrh	r3, [r3, #6]
   1d7e0:	2b06      	cmp	r3, #6
   1d7e2:	d002      	beq.n	1d7ea <cosem_setAccount+0x1ea>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d7e4:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d7e8:	e202      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            ba = (unsigned char*)gxmalloc(6);
   1d7ea:	2006      	movs	r0, #6
   1d7ec:	f00c f92a 	bl	29a44 <malloc>
   1d7f0:	4603      	mov	r3, r0
   1d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
            memcpy(ba, it->byteArr->data, 6);
   1d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d7f6:	689b      	ldr	r3, [r3, #8]
   1d7f8:	681b      	ldr	r3, [r3, #0]
   1d7fa:	2206      	movs	r2, #6
   1d7fc:	4619      	mov	r1, r3
   1d7fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1d800:	f00c f93f 	bl	29a82 <memcpy>
            arr_push(&object->chargeReferences, ba);
   1d804:	68fb      	ldr	r3, [r7, #12]
   1d806:	3334      	adds	r3, #52	; 0x34
   1d808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1d80a:	4618      	mov	r0, r3
   1d80c:	f7ee ff38 	bl	c680 <arr_push>
        }
    }
    else if (index == 10)
    {
        arr_clear(&object->chargeReferences);
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d812:	3301      	adds	r3, #1
   1d814:	643b      	str	r3, [r7, #64]	; 0x40
   1d816:	687b      	ldr	r3, [r7, #4]
   1d818:	689b      	ldr	r3, [r3, #8]
   1d81a:	88db      	ldrh	r3, [r3, #6]
   1d81c:	461a      	mov	r2, r3
   1d81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d820:	429a      	cmp	r2, r3
   1d822:	d1c8      	bne.n	1d7b6 <cosem_setAccount+0x1b6>
   1d824:	e1e3      	b.n	1dbee <cosem_setAccount+0x5ee>
            ba = (unsigned char*)gxmalloc(6);
            memcpy(ba, it->byteArr->data, 6);
            arr_push(&object->chargeReferences, ba);
        }
    }
    else if (index == 11)
   1d826:	7afb      	ldrb	r3, [r7, #11]
   1d828:	2b0b      	cmp	r3, #11
   1d82a:	f040 8096 	bne.w	1d95a <cosem_setAccount+0x35a>
    {
        obj_clearCreditChargeConfigurations(&object->creditChargeConfigurations);
   1d82e:	68fb      	ldr	r3, [r7, #12]
   1d830:	3344      	adds	r3, #68	; 0x44
   1d832:	4618      	mov	r0, r3
   1d834:	f7f9 fa92 	bl	16d5c <obj_clearCreditChargeConfigurations>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d838:	2300      	movs	r3, #0
   1d83a:	643b      	str	r3, [r7, #64]	; 0x40
   1d83c:	e084      	b.n	1d948 <cosem_setAccount+0x348>
        {
            ret = va_get(value->Arr, &it);
   1d83e:	687b      	ldr	r3, [r7, #4]
   1d840:	689b      	ldr	r3, [r3, #8]
   1d842:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d846:	4611      	mov	r1, r2
   1d848:	4618      	mov	r0, r3
   1d84a:	f009 fae9 	bl	26e20 <va_get>
   1d84e:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d852:	2b00      	cmp	r3, #0
   1d854:	d001      	beq.n	1d85a <cosem_setAccount+0x25a>
            {
                return ret;
   1d856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d858:	e1ca      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            ccc = (gxCreditChargeConfiguration*)gxmalloc(sizeof(gxCreditChargeConfiguration));
   1d85a:	200d      	movs	r0, #13
   1d85c:	f00c f8f2 	bl	29a44 <malloc>
   1d860:	4603      	mov	r3, r0
   1d862:	63bb      	str	r3, [r7, #56]	; 0x38
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)0;
   1d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d866:	2200      	movs	r2, #0
   1d868:	731a      	strb	r2, [r3, #12]

            //credit reference
            ret = va_get(it->Arr, &tmp2);
   1d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d86c:	689b      	ldr	r3, [r3, #8]
   1d86e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1d872:	4611      	mov	r1, r2
   1d874:	4618      	mov	r0, r3
   1d876:	f009 fad3 	bl	26e20 <va_get>
   1d87a:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d87c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d87e:	2b00      	cmp	r3, #0
   1d880:	d004      	beq.n	1d88c <cosem_setAccount+0x28c>
            {
                gxfree(ccc);
   1d882:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1d884:	f00c f8e6 	bl	29a54 <free>
                return ret;
   1d888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d88a:	e1b1      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            memcpy(ccc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   1d88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d890:	689b      	ldr	r3, [r3, #8]
   1d892:	6819      	ldr	r1, [r3, #0]
   1d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d896:	689b      	ldr	r3, [r3, #8]
   1d898:	88db      	ldrh	r3, [r3, #6]
   1d89a:	461a      	mov	r2, r3
   1d89c:	f00c f8f1 	bl	29a82 <memcpy>
            //charge reference
            ret = va_get(it->Arr, &tmp2);
   1d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d8a2:	689b      	ldr	r3, [r3, #8]
   1d8a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1d8a8:	4611      	mov	r1, r2
   1d8aa:	4618      	mov	r0, r3
   1d8ac:	f009 fab8 	bl	26e20 <va_get>
   1d8b0:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d8b4:	2b00      	cmp	r3, #0
   1d8b6:	d004      	beq.n	1d8c2 <cosem_setAccount+0x2c2>
            {
                gxfree(ccc);
   1d8b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1d8ba:	f00c f8cb 	bl	29a54 <free>
                return ret;
   1d8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d8c0:	e196      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            memcpy(ccc->chargeReference, tmp2->byteArr->data, tmp2->byteArr->size);
   1d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d8c4:	1d98      	adds	r0, r3, #6
   1d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d8c8:	689b      	ldr	r3, [r3, #8]
   1d8ca:	6819      	ldr	r1, [r3, #0]
   1d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d8ce:	689b      	ldr	r3, [r3, #8]
   1d8d0:	88db      	ldrh	r3, [r3, #6]
   1d8d2:	461a      	mov	r2, r3
   1d8d4:	f00c f8d5 	bl	29a82 <memcpy>
            //collection configuration
            ret = va_get(it->Arr, &tmp2);
   1d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d8da:	689b      	ldr	r3, [r3, #8]
   1d8dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1d8e0:	4611      	mov	r1, r2
   1d8e2:	4618      	mov	r0, r3
   1d8e4:	f009 fa9c 	bl	26e20 <va_get>
   1d8e8:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d8ec:	2b00      	cmp	r3, #0
   1d8ee:	d004      	beq.n	1d8fa <cosem_setAccount+0x2fa>
            {
                gxfree(ccc);
   1d8f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1d8f2:	f00c f8af 	bl	29a54 <free>
                return ret;
   1d8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d8f8:	e17a      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            if (tmp2->bitArr == NULL || tmp2->bitArr->size == 0)
   1d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d8fc:	689b      	ldr	r3, [r3, #8]
   1d8fe:	2b00      	cmp	r3, #0
   1d900:	d004      	beq.n	1d90c <cosem_setAccount+0x30c>
   1d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d904:	689b      	ldr	r3, [r3, #8]
   1d906:	88db      	ldrh	r3, [r3, #6]
   1d908:	2b00      	cmp	r3, #0
   1d90a:	d102      	bne.n	1d912 <cosem_setAccount+0x312>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1d90c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1d910:	e16e      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            int v;
            if ((ret = ba_toInteger(tmp2->bitArr, &v)) != 0)
   1d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d914:	689b      	ldr	r3, [r3, #8]
   1d916:	f107 0210 	add.w	r2, r7, #16
   1d91a:	4611      	mov	r1, r2
   1d91c:	4618      	mov	r0, r3
   1d91e:	f7e5 f949 	bl	2bb4 <ba_toInteger>
   1d922:	6478      	str	r0, [r7, #68]	; 0x44
   1d924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d926:	2b00      	cmp	r3, #0
   1d928:	d001      	beq.n	1d92e <cosem_setAccount+0x32e>
            {
                return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1d92a:	2303      	movs	r3, #3
   1d92c:	e160      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)v;
   1d92e:	693b      	ldr	r3, [r7, #16]
   1d930:	b2da      	uxtb	r2, r3
   1d932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d934:	731a      	strb	r2, [r3, #12]
            arr_push(&object->creditChargeConfigurations, ccc);
   1d936:	68fb      	ldr	r3, [r7, #12]
   1d938:	3344      	adds	r3, #68	; 0x44
   1d93a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1d93c:	4618      	mov	r0, r3
   1d93e:	f7ee fe9f 	bl	c680 <arr_push>
        }
    }
    else if (index == 11)
    {
        obj_clearCreditChargeConfigurations(&object->creditChargeConfigurations);
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d944:	3301      	adds	r3, #1
   1d946:	643b      	str	r3, [r7, #64]	; 0x40
   1d948:	687b      	ldr	r3, [r7, #4]
   1d94a:	689b      	ldr	r3, [r3, #8]
   1d94c:	88db      	ldrh	r3, [r3, #6]
   1d94e:	461a      	mov	r2, r3
   1d950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d952:	429a      	cmp	r2, r3
   1d954:	f47f af73 	bne.w	1d83e <cosem_setAccount+0x23e>
   1d958:	e149      	b.n	1dbee <cosem_setAccount+0x5ee>
            }
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)v;
            arr_push(&object->creditChargeConfigurations, ccc);
        }
    }
    else if (index == 12)
   1d95a:	7afb      	ldrb	r3, [r7, #11]
   1d95c:	2b0c      	cmp	r3, #12
   1d95e:	d164      	bne.n	1da2a <cosem_setAccount+0x42a>
    {
        obj_clearTokenGatewayConfigurations(&object->tokenGatewayConfigurations);
   1d960:	68fb      	ldr	r3, [r7, #12]
   1d962:	3354      	adds	r3, #84	; 0x54
   1d964:	4618      	mov	r0, r3
   1d966:	f7f9 fa2f 	bl	16dc8 <obj_clearTokenGatewayConfigurations>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1d96a:	2300      	movs	r3, #0
   1d96c:	643b      	str	r3, [r7, #64]	; 0x40
   1d96e:	e054      	b.n	1da1a <cosem_setAccount+0x41a>
        {
            ret = va_get(value->Arr, &it);
   1d970:	687b      	ldr	r3, [r7, #4]
   1d972:	689b      	ldr	r3, [r3, #8]
   1d974:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d978:	4611      	mov	r1, r2
   1d97a:	4618      	mov	r0, r3
   1d97c:	f009 fa50 	bl	26e20 <va_get>
   1d980:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d984:	2b00      	cmp	r3, #0
   1d986:	d001      	beq.n	1d98c <cosem_setAccount+0x38c>
            {
                return ret;
   1d988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d98a:	e131      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            gwc = (gxTokenGatewayConfiguration*)gxmalloc(sizeof(gxTokenGatewayConfiguration));
   1d98c:	2007      	movs	r0, #7
   1d98e:	f00c f859 	bl	29a44 <malloc>
   1d992:	4603      	mov	r3, r0
   1d994:	637b      	str	r3, [r7, #52]	; 0x34
            memset(gwc->creditReference, 0, 6);
   1d996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d998:	2206      	movs	r2, #6
   1d99a:	2100      	movs	r1, #0
   1d99c:	4618      	mov	r0, r3
   1d99e:	f00c f896 	bl	29ace <memset>
            //credit reference
            ret = va_get(it->Arr, &tmp2);
   1d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d9a4:	689b      	ldr	r3, [r3, #8]
   1d9a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1d9aa:	4611      	mov	r1, r2
   1d9ac:	4618      	mov	r0, r3
   1d9ae:	f009 fa37 	bl	26e20 <va_get>
   1d9b2:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d9b6:	2b00      	cmp	r3, #0
   1d9b8:	d001      	beq.n	1d9be <cosem_setAccount+0x3be>
            {
                return ret;
   1d9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d9bc:	e118      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            if (tmp2->byteArr->size == 6)
   1d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9c0:	689b      	ldr	r3, [r3, #8]
   1d9c2:	88db      	ldrh	r3, [r3, #6]
   1d9c4:	2b06      	cmp	r3, #6
   1d9c6:	d109      	bne.n	1d9dc <cosem_setAccount+0x3dc>
            {
                memcpy(gwc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   1d9c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9cc:	689b      	ldr	r3, [r3, #8]
   1d9ce:	6819      	ldr	r1, [r3, #0]
   1d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9d2:	689b      	ldr	r3, [r3, #8]
   1d9d4:	88db      	ldrh	r3, [r3, #6]
   1d9d6:	461a      	mov	r2, r3
   1d9d8:	f00c f853 	bl	29a82 <memcpy>
            }
            //token proportion
            ret = va_get(it->Arr, &tmp2);
   1d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d9de:	689b      	ldr	r3, [r3, #8]
   1d9e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1d9e4:	4611      	mov	r1, r2
   1d9e6:	4618      	mov	r0, r3
   1d9e8:	f009 fa1a 	bl	26e20 <va_get>
   1d9ec:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret != 0)
   1d9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d9f0:	2b00      	cmp	r3, #0
   1d9f2:	d001      	beq.n	1d9f8 <cosem_setAccount+0x3f8>
            {
                return ret;
   1d9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d9f6:	e0fb      	b.n	1dbf0 <cosem_setAccount+0x5f0>
            }
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   1d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9fa:	4618      	mov	r0, r3
   1d9fc:	f009 f866 	bl	26acc <var_toInteger>
   1da00:	4603      	mov	r3, r0
   1da02:	b2da      	uxtb	r2, r3
   1da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1da06:	719a      	strb	r2, [r3, #6]
            arr_push(&object->tokenGatewayConfigurations, gwc);
   1da08:	68fb      	ldr	r3, [r7, #12]
   1da0a:	3354      	adds	r3, #84	; 0x54
   1da0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1da0e:	4618      	mov	r0, r3
   1da10:	f7ee fe36 	bl	c680 <arr_push>
        }
    }
    else if (index == 12)
    {
        obj_clearTokenGatewayConfigurations(&object->tokenGatewayConfigurations);
        for (pos = 0; pos != value->Arr->size; ++pos)
   1da14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da16:	3301      	adds	r3, #1
   1da18:	643b      	str	r3, [r7, #64]	; 0x40
   1da1a:	687b      	ldr	r3, [r7, #4]
   1da1c:	689b      	ldr	r3, [r3, #8]
   1da1e:	88db      	ldrh	r3, [r3, #6]
   1da20:	461a      	mov	r2, r3
   1da22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da24:	429a      	cmp	r2, r3
   1da26:	d1a3      	bne.n	1d970 <cosem_setAccount+0x370>
   1da28:	e0e1      	b.n	1dbee <cosem_setAccount+0x5ee>
            }
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
            arr_push(&object->tokenGatewayConfigurations, gwc);
        }
    }
    else if (index == 13)
   1da2a:	7afb      	ldrb	r3, [r7, #11]
   1da2c:	2b0d      	cmp	r3, #13
   1da2e:	d11d      	bne.n	1da6c <cosem_setAccount+0x46c>
    {
        var_init(&tmp);
   1da30:	f107 0318 	add.w	r3, r7, #24
   1da34:	4618      	mov	r0, r3
   1da36:	f008 fb77 	bl	26128 <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   1da3a:	687b      	ldr	r3, [r7, #4]
   1da3c:	689b      	ldr	r3, [r3, #8]
   1da3e:	f107 0218 	add.w	r2, r7, #24
   1da42:	2119      	movs	r1, #25
   1da44:	4618      	mov	r0, r3
   1da46:	f7eb ff05 	bl	9854 <dlms_changeType>
   1da4a:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret == 0)
   1da4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1da4e:	2b00      	cmp	r3, #0
   1da50:	d106      	bne.n	1da60 <cosem_setAccount+0x460>
        {
            time_copy(&object->accountActivationTime, tmp.dateTime);
   1da52:	68fb      	ldr	r3, [r7, #12]
   1da54:	3364      	adds	r3, #100	; 0x64
   1da56:	6a3a      	ldr	r2, [r7, #32]
   1da58:	4611      	mov	r1, r2
   1da5a:	4618      	mov	r0, r3
   1da5c:	f7e8 ff7a 	bl	6954 <time_copy>
        }
        var_clear(&tmp);
   1da60:	f107 0318 	add.w	r3, r7, #24
   1da64:	4618      	mov	r0, r3
   1da66:	f008 fb6f 	bl	26148 <var_clear>
   1da6a:	e0c0      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 14)
   1da6c:	7afb      	ldrb	r3, [r7, #11]
   1da6e:	2b0e      	cmp	r3, #14
   1da70:	d11d      	bne.n	1daae <cosem_setAccount+0x4ae>
    {
        var_init(&tmp);
   1da72:	f107 0318 	add.w	r3, r7, #24
   1da76:	4618      	mov	r0, r3
   1da78:	f008 fb56 	bl	26128 <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   1da7c:	687b      	ldr	r3, [r7, #4]
   1da7e:	689b      	ldr	r3, [r3, #8]
   1da80:	f107 0218 	add.w	r2, r7, #24
   1da84:	2119      	movs	r1, #25
   1da86:	4618      	mov	r0, r3
   1da88:	f7eb fee4 	bl	9854 <dlms_changeType>
   1da8c:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret == 0)
   1da8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1da90:	2b00      	cmp	r3, #0
   1da92:	d106      	bne.n	1daa2 <cosem_setAccount+0x4a2>
        {
            time_copy(&object->accountClosureTime, tmp.dateTime);
   1da94:	68fb      	ldr	r3, [r7, #12]
   1da96:	3394      	adds	r3, #148	; 0x94
   1da98:	6a3a      	ldr	r2, [r7, #32]
   1da9a:	4611      	mov	r1, r2
   1da9c:	4618      	mov	r0, r3
   1da9e:	f7e8 ff59 	bl	6954 <time_copy>
        }
        var_clear(&tmp);
   1daa2:	f107 0318 	add.w	r3, r7, #24
   1daa6:	4618      	mov	r0, r3
   1daa8:	f008 fb4e 	bl	26148 <var_clear>
   1daac:	e09f      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 15)
   1daae:	7afb      	ldrb	r3, [r7, #11]
   1dab0:	2b0f      	cmp	r3, #15
   1dab2:	d16c      	bne.n	1db8e <cosem_setAccount+0x58e>
    {
        gxfree(object->currency.name);
   1dab4:	68fb      	ldr	r3, [r7, #12]
   1dab6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   1daba:	4618      	mov	r0, r3
   1dabc:	f00b ffca 	bl	29a54 <free>
        //Name
        ret = va_get(value->Arr, &it);
   1dac0:	687b      	ldr	r3, [r7, #4]
   1dac2:	689b      	ldr	r3, [r3, #8]
   1dac4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1dac8:	4611      	mov	r1, r2
   1daca:	4618      	mov	r0, r3
   1dacc:	f009 f9a8 	bl	26e20 <va_get>
   1dad0:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret != 0)
   1dad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dad4:	2b00      	cmp	r3, #0
   1dad6:	d001      	beq.n	1dadc <cosem_setAccount+0x4dc>
        {
            return ret;
   1dad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dada:	e089      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        if (it->strVal != NULL && it->strVal->size != 0)
   1dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dade:	689b      	ldr	r3, [r3, #8]
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	d025      	beq.n	1db30 <cosem_setAccount+0x530>
   1dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dae6:	689b      	ldr	r3, [r3, #8]
   1dae8:	88db      	ldrh	r3, [r3, #6]
   1daea:	2b00      	cmp	r3, #0
   1daec:	d020      	beq.n	1db30 <cosem_setAccount+0x530>
        {
            object->currency.name = gxmalloc(it->strVal->size + 1);
   1daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1daf0:	689b      	ldr	r3, [r3, #8]
   1daf2:	88db      	ldrh	r3, [r3, #6]
   1daf4:	3301      	adds	r3, #1
   1daf6:	4618      	mov	r0, r3
   1daf8:	f00b ffa4 	bl	29a44 <malloc>
   1dafc:	4603      	mov	r3, r0
   1dafe:	461a      	mov	r2, r3
   1db00:	68fb      	ldr	r3, [r7, #12]
   1db02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            memcpy(object->currency.name, it->strVal->data, it->strVal->size);
   1db06:	68fb      	ldr	r3, [r7, #12]
   1db08:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
   1db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db0e:	689b      	ldr	r3, [r3, #8]
   1db10:	6819      	ldr	r1, [r3, #0]
   1db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db14:	689b      	ldr	r3, [r3, #8]
   1db16:	88db      	ldrh	r3, [r3, #6]
   1db18:	461a      	mov	r2, r3
   1db1a:	f00b ffb2 	bl	29a82 <memcpy>
            object->currency.name[it->strVal->size] = '\0';
   1db1e:	68fb      	ldr	r3, [r7, #12]
   1db20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   1db24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1db26:	6892      	ldr	r2, [r2, #8]
   1db28:	88d2      	ldrh	r2, [r2, #6]
   1db2a:	4413      	add	r3, r2
   1db2c:	2200      	movs	r2, #0
   1db2e:	701a      	strb	r2, [r3, #0]
        }
        //scale
        ret = va_get(value->Arr, &it);
   1db30:	687b      	ldr	r3, [r7, #4]
   1db32:	689b      	ldr	r3, [r3, #8]
   1db34:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1db38:	4611      	mov	r1, r2
   1db3a:	4618      	mov	r0, r3
   1db3c:	f009 f970 	bl	26e20 <va_get>
   1db40:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret != 0)
   1db42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1db44:	2b00      	cmp	r3, #0
   1db46:	d001      	beq.n	1db4c <cosem_setAccount+0x54c>
        {
            return ret;
   1db48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1db4a:	e051      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        object->currency.scale = (char)var_toInteger(it);
   1db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db4e:	4618      	mov	r0, r3
   1db50:	f008 ffbc 	bl	26acc <var_toInteger>
   1db54:	4603      	mov	r3, r0
   1db56:	b2da      	uxtb	r2, r3
   1db58:	68fb      	ldr	r3, [r7, #12]
   1db5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
        //unit
        ret = va_get(value->Arr, &it);
   1db5e:	687b      	ldr	r3, [r7, #4]
   1db60:	689b      	ldr	r3, [r3, #8]
   1db62:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1db66:	4611      	mov	r1, r2
   1db68:	4618      	mov	r0, r3
   1db6a:	f009 f959 	bl	26e20 <va_get>
   1db6e:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret != 0)
   1db70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1db72:	2b00      	cmp	r3, #0
   1db74:	d001      	beq.n	1db7a <cosem_setAccount+0x57a>
        {
            return ret;
   1db76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1db78:	e03a      	b.n	1dbf0 <cosem_setAccount+0x5f0>
        }
        object->currency.unit = (DLMS_CURRENCY)var_toInteger(it);
   1db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db7c:	4618      	mov	r0, r3
   1db7e:	f008 ffa5 	bl	26acc <var_toInteger>
   1db82:	4603      	mov	r3, r0
   1db84:	b2da      	uxtb	r2, r3
   1db86:	68fb      	ldr	r3, [r7, #12]
   1db88:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   1db8c:	e02f      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 16)
   1db8e:	7afb      	ldrb	r3, [r7, #11]
   1db90:	2b10      	cmp	r3, #16
   1db92:	d107      	bne.n	1dba4 <cosem_setAccount+0x5a4>
    {
        object->lowCreditThreshold = var_toInteger(value);
   1db94:	6878      	ldr	r0, [r7, #4]
   1db96:	f008 ff99 	bl	26acc <var_toInteger>
   1db9a:	4602      	mov	r2, r0
   1db9c:	68fb      	ldr	r3, [r7, #12]
   1db9e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   1dba2:	e024      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 17)
   1dba4:	7afb      	ldrb	r3, [r7, #11]
   1dba6:	2b11      	cmp	r3, #17
   1dba8:	d107      	bne.n	1dbba <cosem_setAccount+0x5ba>
    {
        object->nextCreditAvailableThreshold = var_toInteger(value);
   1dbaa:	6878      	ldr	r0, [r7, #4]
   1dbac:	f008 ff8e 	bl	26acc <var_toInteger>
   1dbb0:	4602      	mov	r2, r0
   1dbb2:	68fb      	ldr	r3, [r7, #12]
   1dbb4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   1dbb8:	e019      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 18)
   1dbba:	7afb      	ldrb	r3, [r7, #11]
   1dbbc:	2b12      	cmp	r3, #18
   1dbbe:	d108      	bne.n	1dbd2 <cosem_setAccount+0x5d2>
    {
        object->maxProvision = (unsigned short)var_toInteger(value);
   1dbc0:	6878      	ldr	r0, [r7, #4]
   1dbc2:	f008 ff83 	bl	26acc <var_toInteger>
   1dbc6:	4603      	mov	r3, r0
   1dbc8:	b29a      	uxth	r2, r3
   1dbca:	68fb      	ldr	r3, [r7, #12]
   1dbcc:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
   1dbd0:	e00d      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else if (index == 19)
   1dbd2:	7afb      	ldrb	r3, [r7, #11]
   1dbd4:	2b13      	cmp	r3, #19
   1dbd6:	d107      	bne.n	1dbe8 <cosem_setAccount+0x5e8>
    {
        object->maxProvisionPeriod = var_toInteger(value);
   1dbd8:	6878      	ldr	r0, [r7, #4]
   1dbda:	f008 ff77 	bl	26acc <var_toInteger>
   1dbde:	4602      	mov	r2, r0
   1dbe0:	68fb      	ldr	r3, [r7, #12]
   1dbe2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   1dbe6:	e002      	b.n	1dbee <cosem_setAccount+0x5ee>
    }
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1dbe8:	f44f 7381 	mov.w	r3, #258	; 0x102
   1dbec:	647b      	str	r3, [r7, #68]	; 0x44
    }
    return ret;
   1dbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1dbf0:	4618      	mov	r0, r3
   1dbf2:	3748      	adds	r7, #72	; 0x48
   1dbf4:	46bd      	mov	sp, r7
   1dbf6:	bd80      	pop	{r7, pc}

0001dbf8 <cosem_setImageTransfer>:
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
int cosem_setImageTransfer(gxImageTransfer* object, unsigned char index, dlmsVARIANT *value)
{
   1dbf8:	b5b0      	push	{r4, r5, r7, lr}
   1dbfa:	b08a      	sub	sp, #40	; 0x28
   1dbfc:	af00      	add	r7, sp, #0
   1dbfe:	60f8      	str	r0, [r7, #12]
   1dc00:	460b      	mov	r3, r1
   1dc02:	607a      	str	r2, [r7, #4]
   1dc04:	72fb      	strb	r3, [r7, #11]
    int pos, ret;
    dlmsVARIANT *it, *tmp;
    gxImageActivateInfo* item;
    if (index == 2)
   1dc06:	7afb      	ldrb	r3, [r7, #11]
   1dc08:	2b02      	cmp	r3, #2
   1dc0a:	d107      	bne.n	1dc1c <cosem_setImageTransfer+0x24>
    {
        object->imageBlockSize = var_toInteger(value);
   1dc0c:	6878      	ldr	r0, [r7, #4]
   1dc0e:	f008 ff5d 	bl	26acc <var_toInteger>
   1dc12:	4603      	mov	r3, r0
   1dc14:	461a      	mov	r2, r3
   1dc16:	68fb      	ldr	r3, [r7, #12]
   1dc18:	611a      	str	r2, [r3, #16]
   1dc1a:	e0dd      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
    }
    else if (index == 3)
   1dc1c:	7afb      	ldrb	r3, [r7, #11]
   1dc1e:	2b03      	cmp	r3, #3
   1dc20:	d116      	bne.n	1dc50 <cosem_setImageTransfer+0x58>
    {
        ba_clear(&object->imageTransferredBlocksStatus);
   1dc22:	68fb      	ldr	r3, [r7, #12]
   1dc24:	3314      	adds	r3, #20
   1dc26:	4618      	mov	r0, r3
   1dc28:	f7e4 ff6e 	bl	2b08 <ba_clear>
        if (value->bitArr != NULL)
   1dc2c:	687b      	ldr	r3, [r7, #4]
   1dc2e:	689b      	ldr	r3, [r3, #8]
   1dc30:	2b00      	cmp	r3, #0
   1dc32:	f000 80d1 	beq.w	1ddd8 <cosem_setImageTransfer+0x1e0>
        {
            ba_copy(&object->imageTransferredBlocksStatus, value->bitArr->data, (unsigned short)value->bitArr->size);
   1dc36:	68fb      	ldr	r3, [r7, #12]
   1dc38:	f103 0014 	add.w	r0, r3, #20
   1dc3c:	687b      	ldr	r3, [r7, #4]
   1dc3e:	689b      	ldr	r3, [r3, #8]
   1dc40:	6819      	ldr	r1, [r3, #0]
   1dc42:	687b      	ldr	r3, [r7, #4]
   1dc44:	689b      	ldr	r3, [r3, #8]
   1dc46:	88db      	ldrh	r3, [r3, #6]
   1dc48:	461a      	mov	r2, r3
   1dc4a:	f7e4 ff33 	bl	2ab4 <ba_copy>
   1dc4e:	e0c3      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
        }
    }
    else if (index == 4)
   1dc50:	7afb      	ldrb	r3, [r7, #11]
   1dc52:	2b04      	cmp	r3, #4
   1dc54:	d107      	bne.n	1dc66 <cosem_setImageTransfer+0x6e>
    {
        object->imageFirstNotTransferredBlockNumber = var_toInteger(value);
   1dc56:	6878      	ldr	r0, [r7, #4]
   1dc58:	f008 ff38 	bl	26acc <var_toInteger>
   1dc5c:	4603      	mov	r3, r0
   1dc5e:	461a      	mov	r2, r3
   1dc60:	68fb      	ldr	r3, [r7, #12]
   1dc62:	621a      	str	r2, [r3, #32]
   1dc64:	e0b8      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
    }
    else if (index == 5)
   1dc66:	7afb      	ldrb	r3, [r7, #11]
   1dc68:	2b05      	cmp	r3, #5
   1dc6a:	d10d      	bne.n	1dc88 <cosem_setImageTransfer+0x90>
    {
        object->imageTransferEnabled = var_toInteger(value) == 0 ? 0 : 1;
   1dc6c:	6878      	ldr	r0, [r7, #4]
   1dc6e:	f008 ff2d 	bl	26acc <var_toInteger>
   1dc72:	4603      	mov	r3, r0
   1dc74:	2b00      	cmp	r3, #0
   1dc76:	bf14      	ite	ne
   1dc78:	2301      	movne	r3, #1
   1dc7a:	2300      	moveq	r3, #0
   1dc7c:	b2db      	uxtb	r3, r3
   1dc7e:	461a      	mov	r2, r3
   1dc80:	68fb      	ldr	r3, [r7, #12]
   1dc82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   1dc86:	e0a7      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
    }
    else if (index == 6)
   1dc88:	7afb      	ldrb	r3, [r7, #11]
   1dc8a:	2b06      	cmp	r3, #6
   1dc8c:	d108      	bne.n	1dca0 <cosem_setImageTransfer+0xa8>
    {
        object->imageTransferStatus = (DLMS_IMAGE_TRANSFER_STATUS)var_toInteger(value);
   1dc8e:	6878      	ldr	r0, [r7, #4]
   1dc90:	f008 ff1c 	bl	26acc <var_toInteger>
   1dc94:	4603      	mov	r3, r0
   1dc96:	b2da      	uxtb	r2, r3
   1dc98:	68fb      	ldr	r3, [r7, #12]
   1dc9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   1dc9e:	e09b      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
    }
    else if (index == 7)
   1dca0:	7afb      	ldrb	r3, [r7, #11]
   1dca2:	2b07      	cmp	r3, #7
   1dca4:	f040 8095 	bne.w	1ddd2 <cosem_setImageTransfer+0x1da>
    {
        arr_clear(&object->imageActivateInfo);
   1dca8:	68fb      	ldr	r3, [r7, #12]
   1dcaa:	3328      	adds	r3, #40	; 0x28
   1dcac:	4618      	mov	r0, r3
   1dcae:	f7ee fd2f 	bl	c710 <arr_clear>
        if (value->Arr != NULL)
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	689b      	ldr	r3, [r3, #8]
   1dcb6:	2b00      	cmp	r3, #0
   1dcb8:	f000 808e 	beq.w	1ddd8 <cosem_setImageTransfer+0x1e0>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1dcbc:	2300      	movs	r3, #0
   1dcbe:	627b      	str	r3, [r7, #36]	; 0x24
   1dcc0:	e07e      	b.n	1ddc0 <cosem_setImageTransfer+0x1c8>
            {
                ret = va_getByIndex(value->Arr, pos, &it);
   1dcc2:	687b      	ldr	r3, [r7, #4]
   1dcc4:	689b      	ldr	r3, [r3, #8]
   1dcc6:	f107 0218 	add.w	r2, r7, #24
   1dcca:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1dccc:	4618      	mov	r0, r3
   1dcce:	f009 f8cd 	bl	26e6c <va_getByIndex>
   1dcd2:	6238      	str	r0, [r7, #32]
                if (ret != 0)
   1dcd4:	6a3b      	ldr	r3, [r7, #32]
   1dcd6:	2b00      	cmp	r3, #0
   1dcd8:	d001      	beq.n	1dcde <cosem_setImageTransfer+0xe6>
                {
                    return ret;
   1dcda:	6a3b      	ldr	r3, [r7, #32]
   1dcdc:	e07d      	b.n	1ddda <cosem_setImageTransfer+0x1e2>
                }
                item = (gxImageActivateInfo*)gxmalloc(sizeof(gxImageActivateInfo));
   1dcde:	201c      	movs	r0, #28
   1dce0:	f00b feb0 	bl	29a44 <malloc>
   1dce4:	4603      	mov	r3, r0
   1dce6:	61fb      	str	r3, [r7, #28]
                bb_init(&item->identification);
   1dce8:	69fb      	ldr	r3, [r7, #28]
   1dcea:	3304      	adds	r3, #4
   1dcec:	4618      	mov	r0, r3
   1dcee:	f7e4 fffb 	bl	2ce8 <bb_init>
                bb_init(&item->signature);
   1dcf2:	69fb      	ldr	r3, [r7, #28]
   1dcf4:	3310      	adds	r3, #16
   1dcf6:	4618      	mov	r0, r3
   1dcf8:	f7e4 fff6 	bl	2ce8 <bb_init>
                ret = va_get(it->Arr, &tmp);
   1dcfc:	69bb      	ldr	r3, [r7, #24]
   1dcfe:	689b      	ldr	r3, [r3, #8]
   1dd00:	f107 0214 	add.w	r2, r7, #20
   1dd04:	4611      	mov	r1, r2
   1dd06:	4618      	mov	r0, r3
   1dd08:	f009 f88a 	bl	26e20 <va_get>
   1dd0c:	6238      	str	r0, [r7, #32]
                if (ret != 0)
   1dd0e:	6a3b      	ldr	r3, [r7, #32]
   1dd10:	2b00      	cmp	r3, #0
   1dd12:	d004      	beq.n	1dd1e <cosem_setImageTransfer+0x126>
                {
                    gxfree(item);
   1dd14:	69f8      	ldr	r0, [r7, #28]
   1dd16:	f00b fe9d 	bl	29a54 <free>
                    return ret;
   1dd1a:	6a3b      	ldr	r3, [r7, #32]
   1dd1c:	e05d      	b.n	1ddda <cosem_setImageTransfer+0x1e2>
                }
                item->size = var_toInteger(tmp);
   1dd1e:	697b      	ldr	r3, [r7, #20]
   1dd20:	4618      	mov	r0, r3
   1dd22:	f008 fed3 	bl	26acc <var_toInteger>
   1dd26:	4602      	mov	r2, r0
   1dd28:	69fb      	ldr	r3, [r7, #28]
   1dd2a:	601a      	str	r2, [r3, #0]
                ret = va_get(it->Arr, &tmp);
   1dd2c:	69bb      	ldr	r3, [r7, #24]
   1dd2e:	689b      	ldr	r3, [r3, #8]
   1dd30:	f107 0214 	add.w	r2, r7, #20
   1dd34:	4611      	mov	r1, r2
   1dd36:	4618      	mov	r0, r3
   1dd38:	f009 f872 	bl	26e20 <va_get>
   1dd3c:	6238      	str	r0, [r7, #32]
                if (ret != 0)
   1dd3e:	6a3b      	ldr	r3, [r7, #32]
   1dd40:	2b00      	cmp	r3, #0
   1dd42:	d004      	beq.n	1dd4e <cosem_setImageTransfer+0x156>
                {
                    gxfree(item);
   1dd44:	69f8      	ldr	r0, [r7, #28]
   1dd46:	f00b fe85 	bl	29a54 <free>
                    return ret;
   1dd4a:	6a3b      	ldr	r3, [r7, #32]
   1dd4c:	e045      	b.n	1ddda <cosem_setImageTransfer+0x1e2>
                }
                bb_set2(&item->identification, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1dd4e:	69fb      	ldr	r3, [r7, #28]
   1dd50:	1d1c      	adds	r4, r3, #4
   1dd52:	697b      	ldr	r3, [r7, #20]
   1dd54:	689d      	ldr	r5, [r3, #8]
   1dd56:	697b      	ldr	r3, [r7, #20]
   1dd58:	689b      	ldr	r3, [r3, #8]
   1dd5a:	4618      	mov	r0, r3
   1dd5c:	f7e4 ffb4 	bl	2cc8 <bb_size>
   1dd60:	4603      	mov	r3, r0
   1dd62:	2200      	movs	r2, #0
   1dd64:	4629      	mov	r1, r5
   1dd66:	4620      	mov	r0, r4
   1dd68:	f7e5 fc5a 	bl	3620 <bb_set2>
                ret = va_get(it->Arr, &tmp);
   1dd6c:	69bb      	ldr	r3, [r7, #24]
   1dd6e:	689b      	ldr	r3, [r3, #8]
   1dd70:	f107 0214 	add.w	r2, r7, #20
   1dd74:	4611      	mov	r1, r2
   1dd76:	4618      	mov	r0, r3
   1dd78:	f009 f852 	bl	26e20 <va_get>
   1dd7c:	6238      	str	r0, [r7, #32]
                if (ret != 0)
   1dd7e:	6a3b      	ldr	r3, [r7, #32]
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	d004      	beq.n	1dd8e <cosem_setImageTransfer+0x196>
                {
                    gxfree(item);
   1dd84:	69f8      	ldr	r0, [r7, #28]
   1dd86:	f00b fe65 	bl	29a54 <free>
                    return ret;
   1dd8a:	6a3b      	ldr	r3, [r7, #32]
   1dd8c:	e025      	b.n	1ddda <cosem_setImageTransfer+0x1e2>
                }
                bb_set2(&item->signature, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1dd8e:	69fb      	ldr	r3, [r7, #28]
   1dd90:	f103 0410 	add.w	r4, r3, #16
   1dd94:	697b      	ldr	r3, [r7, #20]
   1dd96:	689d      	ldr	r5, [r3, #8]
   1dd98:	697b      	ldr	r3, [r7, #20]
   1dd9a:	689b      	ldr	r3, [r3, #8]
   1dd9c:	4618      	mov	r0, r3
   1dd9e:	f7e4 ff93 	bl	2cc8 <bb_size>
   1dda2:	4603      	mov	r3, r0
   1dda4:	2200      	movs	r2, #0
   1dda6:	4629      	mov	r1, r5
   1dda8:	4620      	mov	r0, r4
   1ddaa:	f7e5 fc39 	bl	3620 <bb_set2>
                arr_push(&object->imageActivateInfo, item);
   1ddae:	68fb      	ldr	r3, [r7, #12]
   1ddb0:	3328      	adds	r3, #40	; 0x28
   1ddb2:	69f9      	ldr	r1, [r7, #28]
   1ddb4:	4618      	mov	r0, r3
   1ddb6:	f7ee fc63 	bl	c680 <arr_push>
    else if (index == 7)
    {
        arr_clear(&object->imageActivateInfo);
        if (value->Arr != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ddbc:	3301      	adds	r3, #1
   1ddbe:	627b      	str	r3, [r7, #36]	; 0x24
   1ddc0:	687b      	ldr	r3, [r7, #4]
   1ddc2:	689b      	ldr	r3, [r3, #8]
   1ddc4:	88db      	ldrh	r3, [r3, #6]
   1ddc6:	461a      	mov	r2, r3
   1ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ddca:	429a      	cmp	r2, r3
   1ddcc:	f47f af79 	bne.w	1dcc2 <cosem_setImageTransfer+0xca>
   1ddd0:	e002      	b.n	1ddd8 <cosem_setImageTransfer+0x1e0>
            }
        }
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1ddd2:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ddd6:	e000      	b.n	1ddda <cosem_setImageTransfer+0x1e2>
    }
    return DLMS_ERROR_CODE_OK;
   1ddd8:	2300      	movs	r3, #0
}
   1ddda:	4618      	mov	r0, r3
   1dddc:	3728      	adds	r7, #40	; 0x28
   1ddde:	46bd      	mov	sp, r7
   1dde0:	bdb0      	pop	{r4, r5, r7, pc}
   1dde2:	bf00      	nop

0001dde4 <setCaptureObjects>:
#if !defined(DLMS_IGNORE_PROFILE_GENERIC) && !defined(DLMS_IGNORE_CONPACT_DATA)
int setCaptureObjects(
    dlmsSettings* settings,
    gxArray* objects,
    dlmsVARIANT *value)
{
   1dde4:	b580      	push	{r7, lr}
   1dde6:	b08c      	sub	sp, #48	; 0x30
   1dde8:	af00      	add	r7, sp, #0
   1ddea:	60f8      	str	r0, [r7, #12]
   1ddec:	60b9      	str	r1, [r7, #8]
   1ddee:	607a      	str	r2, [r7, #4]
    DLMS_OBJECT_TYPE type;
    dlmsVARIANT *tmp, *tmp2;
    gxObject *obj;
    gxCaptureObject *co;
    int pos, ret;
    ret = obj_clearProfileGenericCaptureObjects(objects);
   1ddf0:	68b8      	ldr	r0, [r7, #8]
   1ddf2:	f7f9 f841 	bl	16e78 <obj_clearProfileGenericCaptureObjects>
   1ddf6:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret != DLMS_ERROR_CODE_OK)
   1ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ddfa:	2b00      	cmp	r3, #0
   1ddfc:	d001      	beq.n	1de02 <setCaptureObjects+0x1e>
    {
        return ret;
   1ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de00:	e0c2      	b.n	1df88 <setCaptureObjects+0x1a4>
    }
    arr_capacity(objects, value->Arr->size);
   1de02:	687b      	ldr	r3, [r7, #4]
   1de04:	689b      	ldr	r3, [r3, #8]
   1de06:	88db      	ldrh	r3, [r3, #6]
   1de08:	4619      	mov	r1, r3
   1de0a:	68b8      	ldr	r0, [r7, #8]
   1de0c:	f7ee fc04 	bl	c618 <arr_capacity>
    if (value->Arr != NULL)
   1de10:	687b      	ldr	r3, [r7, #4]
   1de12:	689b      	ldr	r3, [r3, #8]
   1de14:	2b00      	cmp	r3, #0
   1de16:	f000 80b0 	beq.w	1df7a <setCaptureObjects+0x196>
    {
        for (pos = 0; pos != value->Arr->size; ++pos)
   1de1a:	2300      	movs	r3, #0
   1de1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1de1e:	e0a4      	b.n	1df6a <setCaptureObjects+0x186>
        {
            ret = va_get(value->Arr, &tmp);
   1de20:	687b      	ldr	r3, [r7, #4]
   1de22:	689b      	ldr	r3, [r3, #8]
   1de24:	f107 021c 	add.w	r2, r7, #28
   1de28:	4611      	mov	r1, r2
   1de2a:	4618      	mov	r0, r3
   1de2c:	f008 fff8 	bl	26e20 <va_get>
   1de30:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1de32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de34:	2b00      	cmp	r3, #0
   1de36:	d001      	beq.n	1de3c <setCaptureObjects+0x58>
            {
                return ret;
   1de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de3a:	e0a5      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            if (tmp->Arr->size != 4)
   1de3c:	69fb      	ldr	r3, [r7, #28]
   1de3e:	689b      	ldr	r3, [r3, #8]
   1de40:	88db      	ldrh	r3, [r3, #6]
   1de42:	2b04      	cmp	r3, #4
   1de44:	d002      	beq.n	1de4c <setCaptureObjects+0x68>
            {
                //Invalid structure format.
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1de46:	f44f 7381 	mov.w	r3, #258	; 0x102
   1de4a:	e09d      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            ret = va_get(tmp->Arr, &tmp2);
   1de4c:	69fb      	ldr	r3, [r7, #28]
   1de4e:	689b      	ldr	r3, [r3, #8]
   1de50:	f107 0218 	add.w	r2, r7, #24
   1de54:	4611      	mov	r1, r2
   1de56:	4618      	mov	r0, r3
   1de58:	f008 ffe2 	bl	26e20 <va_get>
   1de5c:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de60:	2b00      	cmp	r3, #0
   1de62:	d001      	beq.n	1de68 <setCaptureObjects+0x84>
            {
                return ret;
   1de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de66:	e08f      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   1de68:	69bb      	ldr	r3, [r7, #24]
   1de6a:	4618      	mov	r0, r3
   1de6c:	f008 fe2e 	bl	26acc <var_toInteger>
   1de70:	4603      	mov	r3, r0
   1de72:	84fb      	strh	r3, [r7, #38]	; 0x26
            //Get LN.
            ret = va_get(tmp->Arr, &tmp2);
   1de74:	69fb      	ldr	r3, [r7, #28]
   1de76:	689b      	ldr	r3, [r3, #8]
   1de78:	f107 0218 	add.w	r2, r7, #24
   1de7c:	4611      	mov	r1, r2
   1de7e:	4618      	mov	r0, r3
   1de80:	f008 ffce 	bl	26e20 <va_get>
   1de84:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de88:	2b00      	cmp	r3, #0
   1de8a:	d001      	beq.n	1de90 <setCaptureObjects+0xac>
            {
                return ret;
   1de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1de8e:	e07b      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   1de90:	68fb      	ldr	r3, [r7, #12]
   1de92:	f103 0074 	add.w	r0, r3, #116	; 0x74
   1de96:	69bb      	ldr	r3, [r7, #24]
   1de98:	689b      	ldr	r3, [r3, #8]
   1de9a:	681a      	ldr	r2, [r3, #0]
   1de9c:	f107 0314 	add.w	r3, r7, #20
   1dea0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   1dea2:	f004 fa21 	bl	222e8 <oa_findByLN>
   1dea6:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1deaa:	2b00      	cmp	r3, #0
   1deac:	d001      	beq.n	1deb2 <setCaptureObjects+0xce>
            {
                return ret;
   1deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1deb0:	e06a      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            if (obj == NULL)
   1deb2:	697b      	ldr	r3, [r7, #20]
   1deb4:	2b00      	cmp	r3, #0
   1deb6:	d11a      	bne.n	1deee <setCaptureObjects+0x10a>
            {
                ret = cosem_createObject(type, &obj);
   1deb8:	f107 0214 	add.w	r2, r7, #20
   1debc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1debe:	4611      	mov	r1, r2
   1dec0:	4618      	mov	r0, r3
   1dec2:	f7e7 ff61 	bl	5d88 <cosem_createObject>
   1dec6:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != DLMS_ERROR_CODE_OK)
   1dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1deca:	2b00      	cmp	r3, #0
   1decc:	d001      	beq.n	1ded2 <setCaptureObjects+0xee>
                {
                    return ret;
   1dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ded0:	e05a      	b.n	1df88 <setCaptureObjects+0x1a4>
                }
                ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   1ded2:	697a      	ldr	r2, [r7, #20]
   1ded4:	69bb      	ldr	r3, [r7, #24]
   1ded6:	689b      	ldr	r3, [r3, #8]
   1ded8:	681b      	ldr	r3, [r3, #0]
   1deda:	4619      	mov	r1, r3
   1dedc:	4610      	mov	r0, r2
   1dede:	f7e7 ffa1 	bl	5e24 <cosem_setLogicalName>
   1dee2:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != DLMS_ERROR_CODE_OK)
   1dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dee6:	2b00      	cmp	r3, #0
   1dee8:	d001      	beq.n	1deee <setCaptureObjects+0x10a>
                {
                    return ret;
   1deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1deec:	e04c      	b.n	1df88 <setCaptureObjects+0x1a4>
                }
            }
            co = (gxCaptureObject*)gxmalloc(sizeof(gxCaptureObject));
   1deee:	2002      	movs	r0, #2
   1def0:	f00b fda8 	bl	29a44 <malloc>
   1def4:	4603      	mov	r3, r0
   1def6:	623b      	str	r3, [r7, #32]
            ret = va_get(tmp->Arr, &tmp2);
   1def8:	69fb      	ldr	r3, [r7, #28]
   1defa:	689b      	ldr	r3, [r3, #8]
   1defc:	f107 0218 	add.w	r2, r7, #24
   1df00:	4611      	mov	r1, r2
   1df02:	4618      	mov	r0, r3
   1df04:	f008 ff8c 	bl	26e20 <va_get>
   1df08:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df0c:	2b00      	cmp	r3, #0
   1df0e:	d001      	beq.n	1df14 <setCaptureObjects+0x130>
            {
                return ret;
   1df10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df12:	e039      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   1df14:	69bb      	ldr	r3, [r7, #24]
   1df16:	4618      	mov	r0, r3
   1df18:	f008 fdd8 	bl	26acc <var_toInteger>
   1df1c:	4603      	mov	r3, r0
   1df1e:	b2da      	uxtb	r2, r3
   1df20:	6a3b      	ldr	r3, [r7, #32]
   1df22:	701a      	strb	r2, [r3, #0]
            ret = va_get(tmp->Arr, &tmp2);
   1df24:	69fb      	ldr	r3, [r7, #28]
   1df26:	689b      	ldr	r3, [r3, #8]
   1df28:	f107 0218 	add.w	r2, r7, #24
   1df2c:	4611      	mov	r1, r2
   1df2e:	4618      	mov	r0, r3
   1df30:	f008 ff76 	bl	26e20 <va_get>
   1df34:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != DLMS_ERROR_CODE_OK)
   1df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df38:	2b00      	cmp	r3, #0
   1df3a:	d001      	beq.n	1df40 <setCaptureObjects+0x15c>
            {
                return ret;
   1df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df3e:	e023      	b.n	1df88 <setCaptureObjects+0x1a4>
            }
            co->dataIndex = (unsigned char)var_toInteger(tmp2);
   1df40:	69bb      	ldr	r3, [r7, #24]
   1df42:	4618      	mov	r0, r3
   1df44:	f008 fdc2 	bl	26acc <var_toInteger>
   1df48:	4603      	mov	r3, r0
   1df4a:	b2da      	uxtb	r2, r3
   1df4c:	6a3b      	ldr	r3, [r7, #32]
   1df4e:	705a      	strb	r2, [r3, #1]
            arr_push(objects, key_init(obj, co));
   1df50:	697b      	ldr	r3, [r7, #20]
   1df52:	6a39      	ldr	r1, [r7, #32]
   1df54:	4618      	mov	r0, r3
   1df56:	f7f7 ffe1 	bl	15f1c <key_init>
   1df5a:	4603      	mov	r3, r0
   1df5c:	4619      	mov	r1, r3
   1df5e:	68b8      	ldr	r0, [r7, #8]
   1df60:	f7ee fb8e 	bl	c680 <arr_push>
        return ret;
    }
    arr_capacity(objects, value->Arr->size);
    if (value->Arr != NULL)
    {
        for (pos = 0; pos != value->Arr->size; ++pos)
   1df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df66:	3301      	adds	r3, #1
   1df68:	62fb      	str	r3, [r7, #44]	; 0x2c
   1df6a:	687b      	ldr	r3, [r7, #4]
   1df6c:	689b      	ldr	r3, [r3, #8]
   1df6e:	88db      	ldrh	r3, [r3, #6]
   1df70:	461a      	mov	r2, r3
   1df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df74:	429a      	cmp	r2, r3
   1df76:	f47f af53 	bne.w	1de20 <setCaptureObjects+0x3c>
            co->dataIndex = (unsigned char)var_toInteger(tmp2);
            arr_push(objects, key_init(obj, co));
        }
    }
    //Trim array.
    arr_capacity(objects, objects->size);
   1df7a:	68bb      	ldr	r3, [r7, #8]
   1df7c:	891b      	ldrh	r3, [r3, #8]
   1df7e:	4619      	mov	r1, r3
   1df80:	68b8      	ldr	r0, [r7, #8]
   1df82:	f7ee fb49 	bl	c618 <arr_capacity>
    return 0;
   1df86:	2300      	movs	r3, #0
}
   1df88:	4618      	mov	r0, r3
   1df8a:	3730      	adds	r7, #48	; 0x30
   1df8c:	46bd      	mov	sp, r7
   1df8e:	bd80      	pop	{r7, pc}

0001df90 <cosem_setProfileGeneric>:
int cosem_setProfileGeneric(
    dlmsSettings* settings,
    gxProfileGeneric* object,
    unsigned char index,
    dlmsVARIANT *value)
{
   1df90:	b580      	push	{r7, lr}
   1df92:	b0a8      	sub	sp, #160	; 0xa0
   1df94:	af00      	add	r7, sp, #0
   1df96:	60f8      	str	r0, [r7, #12]
   1df98:	60b9      	str	r1, [r7, #8]
   1df9a:	603b      	str	r3, [r7, #0]
   1df9c:	4613      	mov	r3, r2
   1df9e:	71fb      	strb	r3, [r7, #7]

    int ret, pos, pos2;
    DLMS_OBJECT_TYPE type;
    dlmsVARIANT *tmp, *row, *data;
    variantArray *va;
    if (index == 2)
   1dfa0:	79fb      	ldrb	r3, [r7, #7]
   1dfa2:	2b02      	cmp	r3, #2
   1dfa4:	f040 8127 	bne.w	1e1f6 <cosem_setProfileGeneric+0x266>
    {
        if (object->captureObjects.size == 0)
   1dfa8:	68bb      	ldr	r3, [r7, #8]
   1dfaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   1dfac:	2b00      	cmp	r3, #0
   1dfae:	d102      	bne.n	1dfb6 <cosem_setProfileGeneric+0x26>
        {
            //Read capture objects first.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1dfb0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1dfb4:	e228      	b.n	1e408 <cosem_setProfileGeneric+0x478>
        }
        ret = obj_clearProfileGenericBuffer(&object->buffer);
   1dfb6:	68bb      	ldr	r3, [r7, #8]
   1dfb8:	3310      	adds	r3, #16
   1dfba:	4618      	mov	r0, r3
   1dfbc:	f7f8 fe7a 	bl	16cb4 <obj_clearProfileGenericBuffer>
   1dfc0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        if (ret != 0)
   1dfc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1dfc8:	2b00      	cmp	r3, #0
   1dfca:	d002      	beq.n	1dfd2 <cosem_setProfileGeneric+0x42>
        {
            return ret;
   1dfcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1dfd0:	e21a      	b.n	1e408 <cosem_setProfileGeneric+0x478>
        }
        if (value->Arr != NULL)
   1dfd2:	683b      	ldr	r3, [r7, #0]
   1dfd4:	689b      	ldr	r3, [r3, #8]
   1dfd6:	2b00      	cmp	r3, #0
   1dfd8:	f000 80fe 	beq.w	1e1d8 <cosem_setProfileGeneric+0x248>
        {
            //Allocate array.
            arr_capacity(&object->buffer, value->Arr->size);
   1dfdc:	68bb      	ldr	r3, [r7, #8]
   1dfde:	f103 0210 	add.w	r2, r3, #16
   1dfe2:	683b      	ldr	r3, [r7, #0]
   1dfe4:	689b      	ldr	r3, [r3, #8]
   1dfe6:	88db      	ldrh	r3, [r3, #6]
   1dfe8:	4619      	mov	r1, r3
   1dfea:	4610      	mov	r0, r2
   1dfec:	f7ee fb14 	bl	c618 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1dff0:	2300      	movs	r3, #0
   1dff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1dff6:	e0e6      	b.n	1e1c6 <cosem_setProfileGeneric+0x236>
            {
                ret = va_get(value->Arr, &row);
   1dff8:	683b      	ldr	r3, [r7, #0]
   1dffa:	689b      	ldr	r3, [r3, #8]
   1dffc:	f107 0284 	add.w	r2, r7, #132	; 0x84
   1e000:	4611      	mov	r1, r2
   1e002:	4618      	mov	r0, r3
   1e004:	f008 ff0c 	bl	26e20 <va_get>
   1e008:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                if (ret != DLMS_ERROR_CODE_OK)
   1e00c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e010:	2b00      	cmp	r3, #0
   1e012:	d002      	beq.n	1e01a <cosem_setProfileGeneric+0x8a>
                {
                    return ret;
   1e014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e018:	e1f6      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                }

                if (row->Arr->size != object->captureObjects.size)
   1e01a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1e01e:	689b      	ldr	r3, [r3, #8]
   1e020:	88da      	ldrh	r2, [r3, #6]
   1e022:	68bb      	ldr	r3, [r7, #8]
   1e024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   1e026:	429a      	cmp	r2, r3
   1e028:	d002      	beq.n	1e030 <cosem_setProfileGeneric+0xa0>
                {
                    //Number of columns do not match.
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e02a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e02e:	e1eb      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                }
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
   1e030:	2300      	movs	r3, #0
   1e032:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1e036:	e09a      	b.n	1e16e <cosem_setProfileGeneric+0x1de>
                {
                    ret = va_get(row->Arr, &data);
   1e038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1e03c:	689b      	ldr	r3, [r3, #8]
   1e03e:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1e042:	4611      	mov	r1, r2
   1e044:	4618      	mov	r0, r3
   1e046:	f008 feeb 	bl	26e20 <va_get>
   1e04a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                    if (ret != DLMS_ERROR_CODE_OK)
   1e04e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e052:	2b00      	cmp	r3, #0
   1e054:	d002      	beq.n	1e05c <cosem_setProfileGeneric+0xcc>
                    {
                        return ret;
   1e056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e05a:	e1d5      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                    }
                    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING || data->vt == DLMS_DATA_TYPE_UINT32)
   1e05c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e060:	781b      	ldrb	r3, [r3, #0]
   1e062:	2b09      	cmp	r3, #9
   1e064:	d004      	beq.n	1e070 <cosem_setProfileGeneric+0xe0>
   1e066:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e06a:	781b      	ldrb	r3, [r3, #0]
   1e06c:	2b06      	cmp	r3, #6
   1e06e:	d179      	bne.n	1e164 <cosem_setProfileGeneric+0x1d4>
                    {
                        gxKey* k;
                        if ((ret = arr_getByIndex(&object->captureObjects, pos2, (void**)&k)) != 0)
   1e070:	68bb      	ldr	r3, [r7, #8]
   1e072:	3320      	adds	r3, #32
   1e074:	f107 027c 	add.w	r2, r7, #124	; 0x7c
   1e078:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   1e07c:	4618      	mov	r0, r3
   1e07e:	f7ee fbbd 	bl	c7fc <arr_getByIndex>
   1e082:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
   1e086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e08a:	2b00      	cmp	r3, #0
   1e08c:	d002      	beq.n	1e094 <cosem_setProfileGeneric+0x104>
                        {
                            return ret;
   1e08e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e092:	e1b9      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                        }
                        //Some meters return NULL date time string.
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && ((gxObject*)k->key)->objectType == DLMS_OBJECT_TYPE_CLOCK && ((gxCaptureObject*)k->value)->attributeIndex == 2)
   1e094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e098:	781b      	ldrb	r3, [r3, #0]
   1e09a:	2b09      	cmp	r3, #9
   1e09c:	d12c      	bne.n	1e0f8 <cosem_setProfileGeneric+0x168>
   1e09e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e0a0:	681b      	ldr	r3, [r3, #0]
   1e0a2:	781b      	ldrb	r3, [r3, #0]
   1e0a4:	2b08      	cmp	r3, #8
   1e0a6:	d127      	bne.n	1e0f8 <cosem_setProfileGeneric+0x168>
   1e0a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e0aa:	685b      	ldr	r3, [r3, #4]
   1e0ac:	781b      	ldrb	r3, [r3, #0]
   1e0ae:	2b02      	cmp	r3, #2
   1e0b0:	d122      	bne.n	1e0f8 <cosem_setProfileGeneric+0x168>
                        {
                            dlmsVARIANT tmp3;
                            var_init(&tmp3);
   1e0b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1e0b6:	4618      	mov	r0, r3
   1e0b8:	f008 f836 	bl	26128 <var_init>
                            var_attach(&tmp3, data->byteArr);
   1e0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e0c0:	689a      	ldr	r2, [r3, #8]
   1e0c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1e0c6:	4611      	mov	r1, r2
   1e0c8:	4618      	mov	r0, r3
   1e0ca:	f00a f891 	bl	281f0 <var_attach>
                            ret = dlms_changeType(tmp3.byteArr, DLMS_DATA_TYPE_DATETIME, data);
   1e0ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e0d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   1e0d4:	2119      	movs	r1, #25
   1e0d6:	4618      	mov	r0, r3
   1e0d8:	f7eb fbbc 	bl	9854 <dlms_changeType>
   1e0dc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                            var_clear(&tmp3);
   1e0e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1e0e4:	4618      	mov	r0, r3
   1e0e6:	f008 f82f 	bl	26148 <var_clear>
                            if (ret != 0)
   1e0ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e0ee:	2b00      	cmp	r3, #0
   1e0f0:	d037      	beq.n	1e162 <cosem_setProfileGeneric+0x1d2>
                            {
                                return ret;
   1e0f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
                    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING || data->vt == DLMS_DATA_TYPE_UINT32)
                    {
                        gxKey* k;
                        if ((ret = arr_getByIndex(&object->captureObjects, pos2, (void**)&k)) != 0)
                        {
                            return ret;
   1e0f6:	e187      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                            if (ret != 0)
                            {
                                return ret;
                            }
                        }
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && ((gxObject*)k->key)->objectType == DLMS_OBJECT_TYPE_DATA && ((gxCaptureObject*)k->value)->attributeIndex == 2 &&
   1e0f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e0fc:	781b      	ldrb	r3, [r3, #0]
   1e0fe:	2b06      	cmp	r3, #6
   1e100:	d130      	bne.n	1e164 <cosem_setProfileGeneric+0x1d4>
   1e102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e104:	681b      	ldr	r3, [r3, #0]
   1e106:	781b      	ldrb	r3, [r3, #0]
   1e108:	2b01      	cmp	r3, #1
   1e10a:	d12b      	bne.n	1e164 <cosem_setProfileGeneric+0x1d4>
   1e10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e10e:	685b      	ldr	r3, [r3, #4]
   1e110:	781b      	ldrb	r3, [r3, #0]
   1e112:	2b02      	cmp	r3, #2
   1e114:	d126      	bne.n	1e164 <cosem_setProfileGeneric+0x1d4>
                            memcmp(((gxObject*)k->key)->logicalName, UNIX_TIME, 6) == 0)
   1e116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1e118:	681b      	ldr	r3, [r3, #0]
   1e11a:	3306      	adds	r3, #6
   1e11c:	2206      	movs	r2, #6
   1e11e:	49bc      	ldr	r1, [pc, #752]	; (1e410 <cosem_setProfileGeneric+0x480>)
   1e120:	4618      	mov	r0, r3
   1e122:	f00b fc9f 	bl	29a64 <memcmp>
   1e126:	4603      	mov	r3, r0
                            if (ret != 0)
                            {
                                return ret;
                            }
                        }
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && ((gxObject*)k->key)->objectType == DLMS_OBJECT_TYPE_DATA && ((gxCaptureObject*)k->value)->attributeIndex == 2 &&
   1e128:	2b00      	cmp	r3, #0
   1e12a:	d11b      	bne.n	1e164 <cosem_setProfileGeneric+0x1d4>
                            memcmp(((gxObject*)k->key)->logicalName, UNIX_TIME, 6) == 0)
                        {
                            gxtime tmp4;
                            struct tm tmp5;
                            time_fromUnixTime((time_t)data->ulVal, &tmp5);
   1e12c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e130:	689b      	ldr	r3, [r3, #8]
   1e132:	461a      	mov	r2, r3
   1e134:	f107 0314 	add.w	r3, r7, #20
   1e138:	4619      	mov	r1, r3
   1e13a:	4610      	mov	r0, r2
   1e13c:	f7e8 fca8 	bl	6a90 <time_fromUnixTime>
                            time_init2(&tmp4, &tmp5);
   1e140:	f107 0214 	add.w	r2, r7, #20
   1e144:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1e148:	4611      	mov	r1, r2
   1e14a:	4618      	mov	r0, r3
   1e14c:	f7e8 f91e 	bl	638c <time_init2>
                            var_setDateTime(data, &tmp4);
   1e150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1e154:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1e158:	4611      	mov	r1, r2
   1e15a:	4618      	mov	r0, r3
   1e15c:	f009 ff5a 	bl	28014 <var_setDateTime>
   1e160:	e000      	b.n	1e164 <cosem_setProfileGeneric+0x1d4>
                        {
                            return ret;
                        }
                        //Some meters return NULL date time string.
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && ((gxObject*)k->key)->objectType == DLMS_OBJECT_TYPE_CLOCK && ((gxCaptureObject*)k->value)->attributeIndex == 2)
                        {
   1e162:	bf00      	nop
                if (row->Arr->size != object->captureObjects.size)
                {
                    //Number of columns do not match.
                    return DLMS_ERROR_CODE_INVALID_PARAMETER;
                }
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
   1e164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1e168:	3301      	adds	r3, #1
   1e16a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1e16e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1e172:	689b      	ldr	r3, [r3, #8]
   1e174:	88db      	ldrh	r3, [r3, #6]
   1e176:	461a      	mov	r2, r3
   1e178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1e17c:	429a      	cmp	r2, r3
   1e17e:	f73f af5b 	bgt.w	1e038 <cosem_setProfileGeneric+0xa8>
                            var_setDateTime(data, &tmp4);
                        }
                    }
                }
                //Attach rows from parser.
                va = (variantArray *)gxmalloc(sizeof(variantArray));
   1e182:	200c      	movs	r0, #12
   1e184:	f00b fc5e 	bl	29a44 <malloc>
   1e188:	4603      	mov	r3, r0
   1e18a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                va_init(va);
   1e18e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
   1e192:	f008 fd2d 	bl	26bf0 <va_init>
                va_attach(va, row->Arr);
   1e196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1e19a:	689b      	ldr	r3, [r3, #8]
   1e19c:	4619      	mov	r1, r3
   1e19e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
   1e1a2:	f008 fe15 	bl	26dd0 <va_attach>
                va->position = 0;
   1e1a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1e1aa:	2200      	movs	r2, #0
   1e1ac:	811a      	strh	r2, [r3, #8]
                arr_push(&object->buffer, va);
   1e1ae:	68bb      	ldr	r3, [r7, #8]
   1e1b0:	3310      	adds	r3, #16
   1e1b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   1e1b6:	4618      	mov	r0, r3
   1e1b8:	f7ee fa62 	bl	c680 <arr_push>
        }
        if (value->Arr != NULL)
        {
            //Allocate array.
            arr_capacity(&object->buffer, value->Arr->size);
            for (pos = 0; pos != value->Arr->size; ++pos)
   1e1bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1e1c0:	3301      	adds	r3, #1
   1e1c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1e1c6:	683b      	ldr	r3, [r7, #0]
   1e1c8:	689b      	ldr	r3, [r3, #8]
   1e1ca:	88db      	ldrh	r3, [r3, #6]
   1e1cc:	461a      	mov	r2, r3
   1e1ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1e1d2:	429a      	cmp	r2, r3
   1e1d4:	f47f af10 	bne.w	1dff8 <cosem_setProfileGeneric+0x68>
                va_attach(va, row->Arr);
                va->position = 0;
                arr_push(&object->buffer, va);
            }
        }
        object->entriesInUse = object->buffer.size;
   1e1d8:	68bb      	ldr	r3, [r7, #8]
   1e1da:	8b1b      	ldrh	r3, [r3, #24]
   1e1dc:	461a      	mov	r2, r3
   1e1de:	68bb      	ldr	r3, [r7, #8]
   1e1e0:	641a      	str	r2, [r3, #64]	; 0x40
        //Trim array.
        arr_capacity(&object->buffer, object->buffer.size);
   1e1e2:	68bb      	ldr	r3, [r7, #8]
   1e1e4:	f103 0210 	add.w	r2, r3, #16
   1e1e8:	68bb      	ldr	r3, [r7, #8]
   1e1ea:	8b1b      	ldrh	r3, [r3, #24]
   1e1ec:	4619      	mov	r1, r3
   1e1ee:	4610      	mov	r0, r2
   1e1f0:	f7ee fa12 	bl	c618 <arr_capacity>
   1e1f4:	e107      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else if (index == 3)
   1e1f6:	79fb      	ldrb	r3, [r7, #7]
   1e1f8:	2b03      	cmp	r3, #3
   1e1fa:	d11a      	bne.n	1e232 <cosem_setProfileGeneric+0x2a2>
    {
        object->entriesInUse = 0;
   1e1fc:	68bb      	ldr	r3, [r7, #8]
   1e1fe:	2200      	movs	r2, #0
   1e200:	641a      	str	r2, [r3, #64]	; 0x40
        ret = obj_clearProfileGenericBuffer(&object->buffer);
   1e202:	68bb      	ldr	r3, [r7, #8]
   1e204:	3310      	adds	r3, #16
   1e206:	4618      	mov	r0, r3
   1e208:	f7f8 fd54 	bl	16cb4 <obj_clearProfileGenericBuffer>
   1e20c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        if (ret != DLMS_ERROR_CODE_OK)
   1e210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e214:	2b00      	cmp	r3, #0
   1e216:	d002      	beq.n	1e21e <cosem_setProfileGeneric+0x28e>
        {
            return ret;
   1e218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e21c:	e0f4      	b.n	1e408 <cosem_setProfileGeneric+0x478>
        }
        ret = setCaptureObjects(settings, &object->captureObjects, value);
   1e21e:	68bb      	ldr	r3, [r7, #8]
   1e220:	3320      	adds	r3, #32
   1e222:	683a      	ldr	r2, [r7, #0]
   1e224:	4619      	mov	r1, r3
   1e226:	68f8      	ldr	r0, [r7, #12]
   1e228:	f7ff fddc 	bl	1dde4 <setCaptureObjects>
   1e22c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
   1e230:	e0e9      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else if (index == 4)
   1e232:	79fb      	ldrb	r3, [r7, #7]
   1e234:	2b04      	cmp	r3, #4
   1e236:	d106      	bne.n	1e246 <cosem_setProfileGeneric+0x2b6>
    {
        object->capturePeriod = var_toInteger(value);
   1e238:	6838      	ldr	r0, [r7, #0]
   1e23a:	f008 fc47 	bl	26acc <var_toInteger>
   1e23e:	4602      	mov	r2, r0
   1e240:	68bb      	ldr	r3, [r7, #8]
   1e242:	631a      	str	r2, [r3, #48]	; 0x30
   1e244:	e0df      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else if (index == 5)
   1e246:	79fb      	ldrb	r3, [r7, #7]
   1e248:	2b05      	cmp	r3, #5
   1e24a:	d108      	bne.n	1e25e <cosem_setProfileGeneric+0x2ce>
    {
        object->sortMethod = (DLMS_SORT_METHOD)var_toInteger(value);
   1e24c:	6838      	ldr	r0, [r7, #0]
   1e24e:	f008 fc3d 	bl	26acc <var_toInteger>
   1e252:	4603      	mov	r3, r0
   1e254:	b2da      	uxtb	r2, r3
   1e256:	68bb      	ldr	r3, [r7, #8]
   1e258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   1e25c:	e0d3      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else if (index == 6)
   1e25e:	79fb      	ldrb	r3, [r7, #7]
   1e260:	2b06      	cmp	r3, #6
   1e262:	f040 80b7 	bne.w	1e3d4 <cosem_setProfileGeneric+0x444>
    {
        if (value->vt == DLMS_DATA_TYPE_NONE)
   1e266:	683b      	ldr	r3, [r7, #0]
   1e268:	781b      	ldrb	r3, [r3, #0]
   1e26a:	2b00      	cmp	r3, #0
   1e26c:	d103      	bne.n	1e276 <cosem_setProfileGeneric+0x2e6>
        {
            object->sortObject = NULL;
   1e26e:	68bb      	ldr	r3, [r7, #8]
   1e270:	2200      	movs	r2, #0
   1e272:	639a      	str	r2, [r3, #56]	; 0x38
   1e274:	e0c7      	b.n	1e406 <cosem_setProfileGeneric+0x476>
        }
        else
        {
            if (value->Arr == NULL || value->Arr->size != 4)
   1e276:	683b      	ldr	r3, [r7, #0]
   1e278:	689b      	ldr	r3, [r3, #8]
   1e27a:	2b00      	cmp	r3, #0
   1e27c:	d004      	beq.n	1e288 <cosem_setProfileGeneric+0x2f8>
   1e27e:	683b      	ldr	r3, [r7, #0]
   1e280:	689b      	ldr	r3, [r3, #8]
   1e282:	88db      	ldrh	r3, [r3, #6]
   1e284:	2b04      	cmp	r3, #4
   1e286:	d002      	beq.n	1e28e <cosem_setProfileGeneric+0x2fe>
            {
                //Invalid structure format.
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e288:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e28c:	e0bc      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }
            ret = va_get(value->Arr, &tmp);
   1e28e:	683b      	ldr	r3, [r7, #0]
   1e290:	689b      	ldr	r3, [r3, #8]
   1e292:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1e296:	4611      	mov	r1, r2
   1e298:	4618      	mov	r0, r3
   1e29a:	f008 fdc1 	bl	26e20 <va_get>
   1e29e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != DLMS_ERROR_CODE_OK)
   1e2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e2a6:	2b00      	cmp	r3, #0
   1e2a8:	d002      	beq.n	1e2b0 <cosem_setProfileGeneric+0x320>
            {
                return ret;
   1e2aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e2ae:	e0ab      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1e2b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1e2b4:	4618      	mov	r0, r3
   1e2b6:	f008 fc09 	bl	26acc <var_toInteger>
   1e2ba:	4603      	mov	r3, r0
   1e2bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

            ret = va_get(value->Arr, &tmp);
   1e2c0:	683b      	ldr	r3, [r7, #0]
   1e2c2:	689b      	ldr	r3, [r3, #8]
   1e2c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1e2c8:	4611      	mov	r1, r2
   1e2ca:	4618      	mov	r0, r3
   1e2cc:	f008 fda8 	bl	26e20 <va_get>
   1e2d0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != DLMS_ERROR_CODE_OK)
   1e2d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e2d8:	2b00      	cmp	r3, #0
   1e2da:	d002      	beq.n	1e2e2 <cosem_setProfileGeneric+0x352>
            {
                return ret;
   1e2dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e2e0:	e092      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }

            object->sortObject = NULL;
   1e2e2:	68bb      	ldr	r3, [r7, #8]
   1e2e4:	2200      	movs	r2, #0
   1e2e6:	639a      	str	r2, [r3, #56]	; 0x38
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
   1e2e8:	68fb      	ldr	r3, [r7, #12]
   1e2ea:	f103 0074 	add.w	r0, r3, #116	; 0x74
   1e2ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1e2f2:	689b      	ldr	r3, [r3, #8]
   1e2f4:	681a      	ldr	r2, [r3, #0]
   1e2f6:	68bb      	ldr	r3, [r7, #8]
   1e2f8:	3338      	adds	r3, #56	; 0x38
   1e2fa:	f8b7 108e 	ldrh.w	r1, [r7, #142]	; 0x8e
   1e2fe:	f003 fff3 	bl	222e8 <oa_findByLN>
   1e302:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != DLMS_ERROR_CODE_OK)
   1e306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e30a:	2b00      	cmp	r3, #0
   1e30c:	d002      	beq.n	1e314 <cosem_setProfileGeneric+0x384>
            {
                return ret;
   1e30e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e312:	e079      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }
            if (object->sortObject == NULL)
   1e314:	68bb      	ldr	r3, [r7, #8]
   1e316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e318:	2b00      	cmp	r3, #0
   1e31a:	d124      	bne.n	1e366 <cosem_setProfileGeneric+0x3d6>
            {
                ret = cosem_createObject(type, &object->sortObject);
   1e31c:	68bb      	ldr	r3, [r7, #8]
   1e31e:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1e322:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
   1e326:	4611      	mov	r1, r2
   1e328:	4618      	mov	r0, r3
   1e32a:	f7e7 fd2d 	bl	5d88 <cosem_createObject>
   1e32e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                if (ret != DLMS_ERROR_CODE_OK)
   1e332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e336:	2b00      	cmp	r3, #0
   1e338:	d002      	beq.n	1e340 <cosem_setProfileGeneric+0x3b0>
                {
                    return ret;
   1e33a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e33e:	e063      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                }
                ret = cosem_setLogicalName(object->sortObject, tmp->byteArr->data);
   1e340:	68bb      	ldr	r3, [r7, #8]
   1e342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1e348:	689b      	ldr	r3, [r3, #8]
   1e34a:	681b      	ldr	r3, [r3, #0]
   1e34c:	4619      	mov	r1, r3
   1e34e:	4610      	mov	r0, r2
   1e350:	f7e7 fd68 	bl	5e24 <cosem_setLogicalName>
   1e354:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                if (ret != DLMS_ERROR_CODE_OK)
   1e358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e35c:	2b00      	cmp	r3, #0
   1e35e:	d002      	beq.n	1e366 <cosem_setProfileGeneric+0x3d6>
                {
                    return ret;
   1e360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e364:	e050      	b.n	1e408 <cosem_setProfileGeneric+0x478>
                }
            }
            ret = va_get(value->Arr, &tmp);
   1e366:	683b      	ldr	r3, [r7, #0]
   1e368:	689b      	ldr	r3, [r3, #8]
   1e36a:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1e36e:	4611      	mov	r1, r2
   1e370:	4618      	mov	r0, r3
   1e372:	f008 fd55 	bl	26e20 <va_get>
   1e376:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != DLMS_ERROR_CODE_OK)
   1e37a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e37e:	2b00      	cmp	r3, #0
   1e380:	d002      	beq.n	1e388 <cosem_setProfileGeneric+0x3f8>
            {
                return ret;
   1e382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e386:	e03f      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }
            object->sortObjectAttributeIndex = (char)var_toInteger(tmp);
   1e388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1e38c:	4618      	mov	r0, r3
   1e38e:	f008 fb9d 	bl	26acc <var_toInteger>
   1e392:	4603      	mov	r3, r0
   1e394:	b2da      	uxtb	r2, r3
   1e396:	68bb      	ldr	r3, [r7, #8]
   1e398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            ret = va_get(value->Arr, &tmp);
   1e39c:	683b      	ldr	r3, [r7, #0]
   1e39e:	689b      	ldr	r3, [r3, #8]
   1e3a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1e3a4:	4611      	mov	r1, r2
   1e3a6:	4618      	mov	r0, r3
   1e3a8:	f008 fd3a 	bl	26e20 <va_get>
   1e3ac:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret != DLMS_ERROR_CODE_OK)
   1e3b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e3b4:	2b00      	cmp	r3, #0
   1e3b6:	d002      	beq.n	1e3be <cosem_setProfileGeneric+0x42e>
            {
                return ret;
   1e3b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1e3bc:	e024      	b.n	1e408 <cosem_setProfileGeneric+0x478>
            }
            object->sortObjectDataIndex = (unsigned short)var_toInteger(tmp);
   1e3be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1e3c2:	4618      	mov	r0, r3
   1e3c4:	f008 fb82 	bl	26acc <var_toInteger>
   1e3c8:	4603      	mov	r3, r0
   1e3ca:	b29a      	uxth	r2, r3
   1e3cc:	68bb      	ldr	r3, [r7, #8]
   1e3ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   1e3d2:	e018      	b.n	1e406 <cosem_setProfileGeneric+0x476>
        }
    }
    else if (index == 7)
   1e3d4:	79fb      	ldrb	r3, [r7, #7]
   1e3d6:	2b07      	cmp	r3, #7
   1e3d8:	d107      	bne.n	1e3ea <cosem_setProfileGeneric+0x45a>
    {
        object->entriesInUse = var_toInteger(value);
   1e3da:	6838      	ldr	r0, [r7, #0]
   1e3dc:	f008 fb76 	bl	26acc <var_toInteger>
   1e3e0:	4603      	mov	r3, r0
   1e3e2:	461a      	mov	r2, r3
   1e3e4:	68bb      	ldr	r3, [r7, #8]
   1e3e6:	641a      	str	r2, [r3, #64]	; 0x40
   1e3e8:	e00d      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else if (index == 8)
   1e3ea:	79fb      	ldrb	r3, [r7, #7]
   1e3ec:	2b08      	cmp	r3, #8
   1e3ee:	d107      	bne.n	1e400 <cosem_setProfileGeneric+0x470>
    {
        object->profileEntries = var_toInteger(value);
   1e3f0:	6838      	ldr	r0, [r7, #0]
   1e3f2:	f008 fb6b 	bl	26acc <var_toInteger>
   1e3f6:	4603      	mov	r3, r0
   1e3f8:	461a      	mov	r2, r3
   1e3fa:	68bb      	ldr	r3, [r7, #8]
   1e3fc:	63da      	str	r2, [r3, #60]	; 0x3c
   1e3fe:	e002      	b.n	1e406 <cosem_setProfileGeneric+0x476>
    }
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e400:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e404:	e000      	b.n	1e408 <cosem_setProfileGeneric+0x478>
    }
    return DLMS_ERROR_CODE_OK;
   1e406:	2300      	movs	r3, #0
}
   1e408:	4618      	mov	r0, r3
   1e40a:	37a0      	adds	r7, #160	; 0xa0
   1e40c:	46bd      	mov	sp, r7
   1e40e:	bd80      	pop	{r7, pc}
   1e410:	10000044 	.word	0x10000044

0001e414 <cosem_setGsmDiagnostic>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
int cosem_setGsmDiagnostic(gxGsmDiagnostic* object, unsigned char index, dlmsVARIANT *value)
{
   1e414:	b580      	push	{r7, lr}
   1e416:	b08e      	sub	sp, #56	; 0x38
   1e418:	af00      	add	r7, sp, #0
   1e41a:	60f8      	str	r0, [r7, #12]
   1e41c:	460b      	mov	r3, r1
   1e41e:	607a      	str	r2, [r7, #4]
   1e420:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT tmp2;
    dlmsVARIANT *tmp, *it;
    switch (index)
   1e422:	7afb      	ldrb	r3, [r7, #11]
   1e424:	3b02      	subs	r3, #2
   1e426:	2b06      	cmp	r3, #6
   1e428:	f200 81d2 	bhi.w	1e7d0 <cosem_setGsmDiagnostic+0x3bc>
   1e42c:	a201      	add	r2, pc, #4	; (adr r2, 1e434 <cosem_setGsmDiagnostic+0x20>)
   1e42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e432:	bf00      	nop
   1e434:	0001e451 	.word	0x0001e451
   1e438:	0001e51f 	.word	0x0001e51f
   1e43c:	0001e52f 	.word	0x0001e52f
   1e440:	0001e53f 	.word	0x0001e53f
   1e444:	0001e54f 	.word	0x0001e54f
   1e448:	0001e699 	.word	0x0001e699
   1e44c:	0001e75b 	.word	0x0001e75b
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1e450:	687b      	ldr	r3, [r7, #4]
   1e452:	781b      	ldrb	r3, [r3, #0]
   1e454:	2b09      	cmp	r3, #9
   1e456:	d12d      	bne.n	1e4b4 <cosem_setGsmDiagnostic+0xa0>
        {
            gxfree(object->operatorName);
   1e458:	68fb      	ldr	r3, [r7, #12]
   1e45a:	691b      	ldr	r3, [r3, #16]
   1e45c:	4618      	mov	r0, r3
   1e45e:	f00b faf9 	bl	29a54 <free>
            if (value->byteArr != NULL && value->byteArr->size != 0)
   1e462:	687b      	ldr	r3, [r7, #4]
   1e464:	689b      	ldr	r3, [r3, #8]
   1e466:	2b00      	cmp	r3, #0
   1e468:	f000 81b5 	beq.w	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
   1e46c:	687b      	ldr	r3, [r7, #4]
   1e46e:	689b      	ldr	r3, [r3, #8]
   1e470:	88db      	ldrh	r3, [r3, #6]
   1e472:	2b00      	cmp	r3, #0
   1e474:	f000 81af 	beq.w	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
            {
                object->operatorName = gxmalloc(value->byteArr->size + 1);
   1e478:	687b      	ldr	r3, [r7, #4]
   1e47a:	689b      	ldr	r3, [r3, #8]
   1e47c:	88db      	ldrh	r3, [r3, #6]
   1e47e:	3301      	adds	r3, #1
   1e480:	4618      	mov	r0, r3
   1e482:	f00b fadf 	bl	29a44 <malloc>
   1e486:	4603      	mov	r3, r0
   1e488:	461a      	mov	r2, r3
   1e48a:	68fb      	ldr	r3, [r7, #12]
   1e48c:	611a      	str	r2, [r3, #16]
                memcpy(object->operatorName, value->strVal, value->byteArr->size);
   1e48e:	68fb      	ldr	r3, [r7, #12]
   1e490:	6918      	ldr	r0, [r3, #16]
   1e492:	687b      	ldr	r3, [r7, #4]
   1e494:	6899      	ldr	r1, [r3, #8]
   1e496:	687b      	ldr	r3, [r7, #4]
   1e498:	689b      	ldr	r3, [r3, #8]
   1e49a:	88db      	ldrh	r3, [r3, #6]
   1e49c:	461a      	mov	r2, r3
   1e49e:	f00b faf0 	bl	29a82 <memcpy>
                object->operatorName[value->byteArr->size] = '\0';
   1e4a2:	68fb      	ldr	r3, [r7, #12]
   1e4a4:	691b      	ldr	r3, [r3, #16]
   1e4a6:	687a      	ldr	r2, [r7, #4]
   1e4a8:	6892      	ldr	r2, [r2, #8]
   1e4aa:	88d2      	ldrh	r2, [r2, #6]
   1e4ac:	4413      	add	r3, r2
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   1e4b2:	e190      	b.n	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
                object->operatorName = gxmalloc(value->byteArr->size + 1);
                memcpy(object->operatorName, value->strVal, value->byteArr->size);
                object->operatorName[value->byteArr->size] = '\0';
            }
        }
        else if (value->vt == DLMS_DATA_TYPE_STRING)
   1e4b4:	687b      	ldr	r3, [r7, #4]
   1e4b6:	781b      	ldrb	r3, [r3, #0]
   1e4b8:	2b0a      	cmp	r3, #10
   1e4ba:	d12d      	bne.n	1e518 <cosem_setGsmDiagnostic+0x104>
        {
            gxfree(object->operatorName);
   1e4bc:	68fb      	ldr	r3, [r7, #12]
   1e4be:	691b      	ldr	r3, [r3, #16]
   1e4c0:	4618      	mov	r0, r3
   1e4c2:	f00b fac7 	bl	29a54 <free>
            if (value->strVal != NULL && value->strVal->size != 0)
   1e4c6:	687b      	ldr	r3, [r7, #4]
   1e4c8:	689b      	ldr	r3, [r3, #8]
   1e4ca:	2b00      	cmp	r3, #0
   1e4cc:	f000 8183 	beq.w	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
   1e4d0:	687b      	ldr	r3, [r7, #4]
   1e4d2:	689b      	ldr	r3, [r3, #8]
   1e4d4:	88db      	ldrh	r3, [r3, #6]
   1e4d6:	2b00      	cmp	r3, #0
   1e4d8:	f000 817d 	beq.w	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
            {
                object->operatorName = gxmalloc(value->strVal->size + 1);
   1e4dc:	687b      	ldr	r3, [r7, #4]
   1e4de:	689b      	ldr	r3, [r3, #8]
   1e4e0:	88db      	ldrh	r3, [r3, #6]
   1e4e2:	3301      	adds	r3, #1
   1e4e4:	4618      	mov	r0, r3
   1e4e6:	f00b faad 	bl	29a44 <malloc>
   1e4ea:	4603      	mov	r3, r0
   1e4ec:	461a      	mov	r2, r3
   1e4ee:	68fb      	ldr	r3, [r7, #12]
   1e4f0:	611a      	str	r2, [r3, #16]
                memcpy(object->operatorName, value->strVal, value->strVal->size);
   1e4f2:	68fb      	ldr	r3, [r7, #12]
   1e4f4:	6918      	ldr	r0, [r3, #16]
   1e4f6:	687b      	ldr	r3, [r7, #4]
   1e4f8:	6899      	ldr	r1, [r3, #8]
   1e4fa:	687b      	ldr	r3, [r7, #4]
   1e4fc:	689b      	ldr	r3, [r3, #8]
   1e4fe:	88db      	ldrh	r3, [r3, #6]
   1e500:	461a      	mov	r2, r3
   1e502:	f00b fabe 	bl	29a82 <memcpy>
                object->operatorName[value->strVal->size] = '\0';
   1e506:	68fb      	ldr	r3, [r7, #12]
   1e508:	691b      	ldr	r3, [r3, #16]
   1e50a:	687a      	ldr	r2, [r7, #4]
   1e50c:	6892      	ldr	r2, [r2, #8]
   1e50e:	88d2      	ldrh	r2, [r2, #6]
   1e510:	4413      	add	r3, r2
   1e512:	2200      	movs	r2, #0
   1e514:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   1e516:	e15e      	b.n	1e7d6 <cosem_setGsmDiagnostic+0x3c2>
                object->operatorName[value->strVal->size] = '\0';
            }
        }
        else
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e518:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e51c:	e161      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
        }
        break;
    case 3:
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
   1e51e:	6878      	ldr	r0, [r7, #4]
   1e520:	f008 fad4 	bl	26acc <var_toInteger>
   1e524:	4603      	mov	r3, r0
   1e526:	b2da      	uxtb	r2, r3
   1e528:	68fb      	ldr	r3, [r7, #12]
   1e52a:	751a      	strb	r2, [r3, #20]
        break;
   1e52c:	e158      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
    case 4:
        object->circuitSwitchStatus = (DLMS_GSM_CIRCUIT_SWITCH_STATUS)var_toInteger(value);
   1e52e:	6878      	ldr	r0, [r7, #4]
   1e530:	f008 facc 	bl	26acc <var_toInteger>
   1e534:	4603      	mov	r3, r0
   1e536:	b2da      	uxtb	r2, r3
   1e538:	68fb      	ldr	r3, [r7, #12]
   1e53a:	755a      	strb	r2, [r3, #21]
        break;
   1e53c:	e150      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
    case 5:
        object->packetSwitchStatus = (DLMS_GSM_PACKET_SWITCH_STATUS)var_toInteger(value);
   1e53e:	6878      	ldr	r0, [r7, #4]
   1e540:	f008 fac4 	bl	26acc <var_toInteger>
   1e544:	4603      	mov	r3, r0
   1e546:	b2da      	uxtb	r2, r3
   1e548:	68fb      	ldr	r3, [r7, #12]
   1e54a:	759a      	strb	r2, [r3, #22]
        break;
   1e54c:	e148      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
    case 6:
        if (value != NULL && value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1e54e:	687b      	ldr	r3, [r7, #4]
   1e550:	2b00      	cmp	r3, #0
   1e552:	f000 8142 	beq.w	1e7da <cosem_setGsmDiagnostic+0x3c6>
   1e556:	687b      	ldr	r3, [r7, #4]
   1e558:	781b      	ldrb	r3, [r3, #0]
   1e55a:	2b02      	cmp	r3, #2
   1e55c:	f040 813d 	bne.w	1e7da <cosem_setGsmDiagnostic+0x3c6>
        {
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   1e560:	687b      	ldr	r3, [r7, #4]
   1e562:	689b      	ldr	r3, [r3, #8]
   1e564:	f107 0214 	add.w	r2, r7, #20
   1e568:	2100      	movs	r1, #0
   1e56a:	4618      	mov	r0, r3
   1e56c:	f008 fc7e 	bl	26e6c <va_getByIndex>
   1e570:	6338      	str	r0, [r7, #48]	; 0x30
   1e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e574:	2b00      	cmp	r3, #0
   1e576:	d001      	beq.n	1e57c <cosem_setGsmDiagnostic+0x168>
            {
                return ret;
   1e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e57a:	e132      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
            }
            object->cellInfo.cellId = (unsigned long)var_toInteger(tmp);
   1e57c:	697b      	ldr	r3, [r7, #20]
   1e57e:	4618      	mov	r0, r3
   1e580:	f008 faa4 	bl	26acc <var_toInteger>
   1e584:	4603      	mov	r3, r0
   1e586:	461a      	mov	r2, r3
   1e588:	68fb      	ldr	r3, [r7, #12]
   1e58a:	619a      	str	r2, [r3, #24]
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1e58c:	687b      	ldr	r3, [r7, #4]
   1e58e:	689b      	ldr	r3, [r3, #8]
   1e590:	f107 0214 	add.w	r2, r7, #20
   1e594:	2101      	movs	r1, #1
   1e596:	4618      	mov	r0, r3
   1e598:	f008 fc68 	bl	26e6c <va_getByIndex>
   1e59c:	6338      	str	r0, [r7, #48]	; 0x30
   1e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5a0:	2b00      	cmp	r3, #0
   1e5a2:	d001      	beq.n	1e5a8 <cosem_setGsmDiagnostic+0x194>
            {
                return ret;
   1e5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5a6:	e11c      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
            }
            object->cellInfo.locationId = (unsigned short)var_toInteger(tmp);
   1e5a8:	697b      	ldr	r3, [r7, #20]
   1e5aa:	4618      	mov	r0, r3
   1e5ac:	f008 fa8e 	bl	26acc <var_toInteger>
   1e5b0:	4603      	mov	r3, r0
   1e5b2:	b29a      	uxth	r2, r3
   1e5b4:	68fb      	ldr	r3, [r7, #12]
   1e5b6:	839a      	strh	r2, [r3, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   1e5b8:	687b      	ldr	r3, [r7, #4]
   1e5ba:	689b      	ldr	r3, [r3, #8]
   1e5bc:	f107 0214 	add.w	r2, r7, #20
   1e5c0:	2102      	movs	r1, #2
   1e5c2:	4618      	mov	r0, r3
   1e5c4:	f008 fc52 	bl	26e6c <va_getByIndex>
   1e5c8:	6338      	str	r0, [r7, #48]	; 0x30
   1e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5cc:	2b00      	cmp	r3, #0
   1e5ce:	d001      	beq.n	1e5d4 <cosem_setGsmDiagnostic+0x1c0>
            {
                return ret;
   1e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5d2:	e106      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
            }
            object->cellInfo.signalQuality = (unsigned char)var_toInteger(tmp);
   1e5d4:	697b      	ldr	r3, [r7, #20]
   1e5d6:	4618      	mov	r0, r3
   1e5d8:	f008 fa78 	bl	26acc <var_toInteger>
   1e5dc:	4603      	mov	r3, r0
   1e5de:	b2da      	uxtb	r2, r3
   1e5e0:	68fb      	ldr	r3, [r7, #12]
   1e5e2:	779a      	strb	r2, [r3, #30]
            if ((ret = va_getByIndex(value->Arr, 3, &tmp)) != 0)
   1e5e4:	687b      	ldr	r3, [r7, #4]
   1e5e6:	689b      	ldr	r3, [r3, #8]
   1e5e8:	f107 0214 	add.w	r2, r7, #20
   1e5ec:	2103      	movs	r1, #3
   1e5ee:	4618      	mov	r0, r3
   1e5f0:	f008 fc3c 	bl	26e6c <va_getByIndex>
   1e5f4:	6338      	str	r0, [r7, #48]	; 0x30
   1e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	d001      	beq.n	1e600 <cosem_setGsmDiagnostic+0x1ec>
            {
                return ret;
   1e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5fe:	e0f0      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
            }
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   1e600:	697b      	ldr	r3, [r7, #20]
   1e602:	4618      	mov	r0, r3
   1e604:	f008 fa62 	bl	26acc <var_toInteger>
   1e608:	4603      	mov	r3, r0
   1e60a:	b2da      	uxtb	r2, r3
   1e60c:	68fb      	ldr	r3, [r7, #12]
   1e60e:	77da      	strb	r2, [r3, #31]
            if (object->base.version != 0)
   1e610:	68fb      	ldr	r3, [r7, #12]
   1e612:	785b      	ldrb	r3, [r3, #1]
   1e614:	2b00      	cmp	r3, #0
   1e616:	f000 80e0 	beq.w	1e7da <cosem_setGsmDiagnostic+0x3c6>
            {
                if ((ret = va_getByIndex(value->Arr, 4, &tmp)) != 0)
   1e61a:	687b      	ldr	r3, [r7, #4]
   1e61c:	689b      	ldr	r3, [r3, #8]
   1e61e:	f107 0214 	add.w	r2, r7, #20
   1e622:	2104      	movs	r1, #4
   1e624:	4618      	mov	r0, r3
   1e626:	f008 fc21 	bl	26e6c <va_getByIndex>
   1e62a:	6338      	str	r0, [r7, #48]	; 0x30
   1e62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e62e:	2b00      	cmp	r3, #0
   1e630:	d001      	beq.n	1e636 <cosem_setGsmDiagnostic+0x222>
                {
                    return ret;
   1e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e634:	e0d5      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                object->cellInfo.mobileCountryCode = (unsigned short)var_toInteger(tmp);
   1e636:	697b      	ldr	r3, [r7, #20]
   1e638:	4618      	mov	r0, r3
   1e63a:	f008 fa47 	bl	26acc <var_toInteger>
   1e63e:	4603      	mov	r3, r0
   1e640:	b29a      	uxth	r2, r3
   1e642:	68fb      	ldr	r3, [r7, #12]
   1e644:	841a      	strh	r2, [r3, #32]

                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   1e646:	687b      	ldr	r3, [r7, #4]
   1e648:	689b      	ldr	r3, [r3, #8]
   1e64a:	f107 0214 	add.w	r2, r7, #20
   1e64e:	2105      	movs	r1, #5
   1e650:	4618      	mov	r0, r3
   1e652:	f008 fc0b 	bl	26e6c <va_getByIndex>
   1e656:	6338      	str	r0, [r7, #48]	; 0x30
   1e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d001      	beq.n	1e662 <cosem_setGsmDiagnostic+0x24e>
                {
                    return ret;
   1e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e660:	e0bf      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                object->cellInfo.mobileNetworkCode = (unsigned short)var_toInteger(tmp);
   1e662:	697b      	ldr	r3, [r7, #20]
   1e664:	4618      	mov	r0, r3
   1e666:	f008 fa31 	bl	26acc <var_toInteger>
   1e66a:	4603      	mov	r3, r0
   1e66c:	b29a      	uxth	r2, r3
   1e66e:	68fb      	ldr	r3, [r7, #12]
   1e670:	845a      	strh	r2, [r3, #34]	; 0x22

                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   1e672:	687b      	ldr	r3, [r7, #4]
   1e674:	689b      	ldr	r3, [r3, #8]
   1e676:	f107 0214 	add.w	r2, r7, #20
   1e67a:	2106      	movs	r1, #6
   1e67c:	4618      	mov	r0, r3
   1e67e:	f008 fbf5 	bl	26e6c <va_getByIndex>
   1e682:	6338      	str	r0, [r7, #48]	; 0x30
   1e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e686:	2b00      	cmp	r3, #0
   1e688:	d001      	beq.n	1e68e <cosem_setGsmDiagnostic+0x27a>
                {
                    return ret;
   1e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e68c:	e0a9      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                object->cellInfo.channelNumber = tmp->ulVal;
   1e68e:	697b      	ldr	r3, [r7, #20]
   1e690:	689a      	ldr	r2, [r3, #8]
   1e692:	68fb      	ldr	r3, [r7, #12]
   1e694:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        break;
   1e696:	e0a0      	b.n	1e7da <cosem_setGsmDiagnostic+0x3c6>
    case 7:
        arr_clear(&object->adjacentCells);
   1e698:	68fb      	ldr	r3, [r7, #12]
   1e69a:	3328      	adds	r3, #40	; 0x28
   1e69c:	4618      	mov	r0, r3
   1e69e:	f7ee f837 	bl	c710 <arr_clear>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_ARRAY)
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	2b00      	cmp	r3, #0
   1e6a6:	f000 809a 	beq.w	1e7de <cosem_setGsmDiagnostic+0x3ca>
   1e6aa:	687b      	ldr	r3, [r7, #4]
   1e6ac:	781b      	ldrb	r3, [r3, #0]
   1e6ae:	2b01      	cmp	r3, #1
   1e6b0:	f040 8095 	bne.w	1e7de <cosem_setGsmDiagnostic+0x3ca>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1e6b4:	2300      	movs	r3, #0
   1e6b6:	637b      	str	r3, [r7, #52]	; 0x34
   1e6b8:	e047      	b.n	1e74a <cosem_setGsmDiagnostic+0x336>
            {
                ret = va_get(value->Arr, &it);
   1e6ba:	687b      	ldr	r3, [r7, #4]
   1e6bc:	689b      	ldr	r3, [r3, #8]
   1e6be:	f107 0210 	add.w	r2, r7, #16
   1e6c2:	4611      	mov	r1, r2
   1e6c4:	4618      	mov	r0, r3
   1e6c6:	f008 fbab 	bl	26e20 <va_get>
   1e6ca:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1e6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e6ce:	2b00      	cmp	r3, #0
   1e6d0:	d001      	beq.n	1e6d6 <cosem_setGsmDiagnostic+0x2c2>
                {
                    return ret;
   1e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e6d4:	e085      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                ret = va_get(it->Arr, &tmp);
   1e6d6:	693b      	ldr	r3, [r7, #16]
   1e6d8:	689b      	ldr	r3, [r3, #8]
   1e6da:	f107 0214 	add.w	r2, r7, #20
   1e6de:	4611      	mov	r1, r2
   1e6e0:	4618      	mov	r0, r3
   1e6e2:	f008 fb9d 	bl	26e20 <va_get>
   1e6e6:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e6ea:	2b00      	cmp	r3, #0
   1e6ec:	d001      	beq.n	1e6f2 <cosem_setGsmDiagnostic+0x2de>
                {
                    return ret;
   1e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e6f0:	e077      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                gxAdjacentCell* ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
   1e6f2:	2008      	movs	r0, #8
   1e6f4:	f00b f9a6 	bl	29a44 <malloc>
   1e6f8:	4603      	mov	r3, r0
   1e6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                ac->cellId = var_toInteger(tmp);
   1e6fc:	697b      	ldr	r3, [r7, #20]
   1e6fe:	4618      	mov	r0, r3
   1e700:	f008 f9e4 	bl	26acc <var_toInteger>
   1e704:	4603      	mov	r3, r0
   1e706:	461a      	mov	r2, r3
   1e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e70a:	601a      	str	r2, [r3, #0]
                ret = va_get(it->Arr, &tmp);
   1e70c:	693b      	ldr	r3, [r7, #16]
   1e70e:	689b      	ldr	r3, [r3, #8]
   1e710:	f107 0214 	add.w	r2, r7, #20
   1e714:	4611      	mov	r1, r2
   1e716:	4618      	mov	r0, r3
   1e718:	f008 fb82 	bl	26e20 <va_get>
   1e71c:	6338      	str	r0, [r7, #48]	; 0x30
                if (ret != DLMS_ERROR_CODE_OK)
   1e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e720:	2b00      	cmp	r3, #0
   1e722:	d001      	beq.n	1e728 <cosem_setGsmDiagnostic+0x314>
                {
                    return ret;
   1e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e726:	e05c      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   1e728:	697b      	ldr	r3, [r7, #20]
   1e72a:	4618      	mov	r0, r3
   1e72c:	f008 f9ce 	bl	26acc <var_toInteger>
   1e730:	4603      	mov	r3, r0
   1e732:	b2da      	uxtb	r2, r3
   1e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e736:	711a      	strb	r2, [r3, #4]
                arr_push(&object->adjacentCells, ac);
   1e738:	68fb      	ldr	r3, [r7, #12]
   1e73a:	3328      	adds	r3, #40	; 0x28
   1e73c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1e73e:	4618      	mov	r0, r3
   1e740:	f7ed ff9e 	bl	c680 <arr_push>
        break;
    case 7:
        arr_clear(&object->adjacentCells);
        if (value != NULL && value->vt == DLMS_DATA_TYPE_ARRAY)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e746:	3301      	adds	r3, #1
   1e748:	637b      	str	r3, [r7, #52]	; 0x34
   1e74a:	687b      	ldr	r3, [r7, #4]
   1e74c:	689b      	ldr	r3, [r3, #8]
   1e74e:	88db      	ldrh	r3, [r3, #6]
   1e750:	461a      	mov	r2, r3
   1e752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e754:	429a      	cmp	r2, r3
   1e756:	d1b0      	bne.n	1e6ba <cosem_setGsmDiagnostic+0x2a6>
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
                arr_push(&object->adjacentCells, ac);
            }
        }
        break;
   1e758:	e041      	b.n	1e7de <cosem_setGsmDiagnostic+0x3ca>
    case 8:
        //Some meters are returning empty octect string here.
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1e75a:	687b      	ldr	r3, [r7, #4]
   1e75c:	781b      	ldrb	r3, [r3, #0]
   1e75e:	2b09      	cmp	r3, #9
   1e760:	d122      	bne.n	1e7a8 <cosem_setGsmDiagnostic+0x394>
   1e762:	687b      	ldr	r3, [r7, #4]
   1e764:	689b      	ldr	r3, [r3, #8]
   1e766:	2b00      	cmp	r3, #0
   1e768:	d01e      	beq.n	1e7a8 <cosem_setGsmDiagnostic+0x394>
        {
            var_init(&tmp2);
   1e76a:	f107 0318 	add.w	r3, r7, #24
   1e76e:	4618      	mov	r0, r3
   1e770:	f007 fcda 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1e774:	f107 0318 	add.w	r3, r7, #24
   1e778:	461a      	mov	r2, r3
   1e77a:	2119      	movs	r1, #25
   1e77c:	6878      	ldr	r0, [r7, #4]
   1e77e:	f7eb f845 	bl	980c <dlms_changeType2>
   1e782:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != 0)
   1e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e786:	2b00      	cmp	r3, #0
   1e788:	d001      	beq.n	1e78e <cosem_setGsmDiagnostic+0x37a>
            {
                return ret;
   1e78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e78c:	e029      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
            }
            time_copy(&object->captureTime, tmp2.dateTime);
   1e78e:	68fb      	ldr	r3, [r7, #12]
   1e790:	3338      	adds	r3, #56	; 0x38
   1e792:	6a3a      	ldr	r2, [r7, #32]
   1e794:	4611      	mov	r1, r2
   1e796:	4618      	mov	r0, r3
   1e798:	f7e8 f8dc 	bl	6954 <time_copy>
            var_clear(&tmp2);
   1e79c:	f107 0318 	add.w	r3, r7, #24
   1e7a0:	4618      	mov	r0, r3
   1e7a2:	f007 fcd1 	bl	26148 <var_clear>
        }
        else
        {
            time_clear(&object->captureTime);
        }
        break;
   1e7a6:	e01b      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
                return ret;
            }
            time_copy(&object->captureTime, tmp2.dateTime);
            var_clear(&tmp2);
        }
        else if (value->vt == DLMS_DATA_TYPE_DATETIME)
   1e7a8:	687b      	ldr	r3, [r7, #4]
   1e7aa:	781b      	ldrb	r3, [r3, #0]
   1e7ac:	2b19      	cmp	r3, #25
   1e7ae:	d109      	bne.n	1e7c4 <cosem_setGsmDiagnostic+0x3b0>
        {
            time_copy(&object->captureTime, value->dateTime);
   1e7b0:	68fb      	ldr	r3, [r7, #12]
   1e7b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1e7b6:	687b      	ldr	r3, [r7, #4]
   1e7b8:	689b      	ldr	r3, [r3, #8]
   1e7ba:	4619      	mov	r1, r3
   1e7bc:	4610      	mov	r0, r2
   1e7be:	f7e8 f8c9 	bl	6954 <time_copy>
        }
        else
        {
            time_clear(&object->captureTime);
        }
        break;
   1e7c2:	e00d      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
        {
            time_copy(&object->captureTime, value->dateTime);
        }
        else
        {
            time_clear(&object->captureTime);
   1e7c4:	68fb      	ldr	r3, [r7, #12]
   1e7c6:	3338      	adds	r3, #56	; 0x38
   1e7c8:	4618      	mov	r0, r3
   1e7ca:	f7e7 fe3f 	bl	644c <time_clear>
        }
        break;
   1e7ce:	e007      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e7d0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e7d4:	e005      	b.n	1e7e2 <cosem_setGsmDiagnostic+0x3ce>
        }
        else
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   1e7d6:	bf00      	nop
   1e7d8:	e002      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
                    return ret;
                }
                object->cellInfo.channelNumber = tmp->ulVal;
            }
        }
        break;
   1e7da:	bf00      	nop
   1e7dc:	e000      	b.n	1e7e0 <cosem_setGsmDiagnostic+0x3cc>
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
                arr_push(&object->adjacentCells, ac);
            }
        }
        break;
   1e7de:	bf00      	nop
        }
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return DLMS_ERROR_CODE_OK;
   1e7e0:	2300      	movs	r3, #0
}
   1e7e2:	4618      	mov	r0, r3
   1e7e4:	3738      	adds	r7, #56	; 0x38
   1e7e6:	46bd      	mov	sp, r7
   1e7e8:	bd80      	pop	{r7, pc}
   1e7ea:	bf00      	nop

0001e7ec <cosem_setTokenGateway>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int cosem_setTokenGateway(gxTokenGateway* object, unsigned char index, dlmsVARIANT *value)
{
   1e7ec:	b5b0      	push	{r4, r5, r7, lr}
   1e7ee:	b08e      	sub	sp, #56	; 0x38
   1e7f0:	af00      	add	r7, sp, #0
   1e7f2:	60f8      	str	r0, [r7, #12]
   1e7f4:	460b      	mov	r3, r1
   1e7f6:	607a      	str	r2, [r7, #4]
   1e7f8:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    dlmsVARIANT tmp2;
    dlmsVARIANT *tmp, *it;
    switch (index)
   1e7fa:	7afb      	ldrb	r3, [r7, #11]
   1e7fc:	3b02      	subs	r3, #2
   1e7fe:	2b04      	cmp	r3, #4
   1e800:	f200 80dc 	bhi.w	1e9bc <cosem_setTokenGateway+0x1d0>
   1e804:	a201      	add	r2, pc, #4	; (adr r2, 1e80c <cosem_setTokenGateway+0x20>)
   1e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e80a:	bf00      	nop
   1e80c:	0001e821 	.word	0x0001e821
   1e810:	0001e84d 	.word	0x0001e84d
   1e814:	0001e89f 	.word	0x0001e89f
   1e818:	0001e92b 	.word	0x0001e92b
   1e81c:	0001e93d 	.word	0x0001e93d
    {
    case 2:
        bb_clear(&object->token);
   1e820:	68fb      	ldr	r3, [r7, #12]
   1e822:	3310      	adds	r3, #16
   1e824:	4618      	mov	r0, r3
   1e826:	f7e4 ff9d 	bl	3764 <bb_clear>
        bb_set2(&object->token, value->byteArr, 0, bb_size(value->byteArr));
   1e82a:	68fb      	ldr	r3, [r7, #12]
   1e82c:	f103 0410 	add.w	r4, r3, #16
   1e830:	687b      	ldr	r3, [r7, #4]
   1e832:	689d      	ldr	r5, [r3, #8]
   1e834:	687b      	ldr	r3, [r7, #4]
   1e836:	689b      	ldr	r3, [r3, #8]
   1e838:	4618      	mov	r0, r3
   1e83a:	f7e4 fa45 	bl	2cc8 <bb_size>
   1e83e:	4603      	mov	r3, r0
   1e840:	2200      	movs	r2, #0
   1e842:	4629      	mov	r1, r5
   1e844:	4620      	mov	r0, r4
   1e846:	f7e4 feeb 	bl	3620 <bb_set2>
        break;
   1e84a:	e0bd      	b.n	1e9c8 <cosem_setTokenGateway+0x1dc>
    case 3:
        if (value->byteArr == NULL)
   1e84c:	687b      	ldr	r3, [r7, #4]
   1e84e:	689b      	ldr	r3, [r3, #8]
   1e850:	2b00      	cmp	r3, #0
   1e852:	d105      	bne.n	1e860 <cosem_setTokenGateway+0x74>
        {
            time_clear(&object->time);
   1e854:	68fb      	ldr	r3, [r7, #12]
   1e856:	331c      	adds	r3, #28
   1e858:	4618      	mov	r0, r3
   1e85a:	f7e7 fdf7 	bl	644c <time_clear>
                return ret;
            }
            time_copy(&object->time, tmp2.dateTime);
            var_clear(&tmp2);
        }
        break;
   1e85e:	e0b3      	b.n	1e9c8 <cosem_setTokenGateway+0x1dc>
        {
            time_clear(&object->time);
        }
        else
        {
            var_init(&tmp2);
   1e860:	f107 0318 	add.w	r3, r7, #24
   1e864:	4618      	mov	r0, r3
   1e866:	f007 fc5f 	bl	26128 <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1e86a:	f107 0318 	add.w	r3, r7, #24
   1e86e:	461a      	mov	r2, r3
   1e870:	2119      	movs	r1, #25
   1e872:	6878      	ldr	r0, [r7, #4]
   1e874:	f7ea ffca 	bl	980c <dlms_changeType2>
   1e878:	6338      	str	r0, [r7, #48]	; 0x30
            if (ret != 0)
   1e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e87c:	2b00      	cmp	r3, #0
   1e87e:	d001      	beq.n	1e884 <cosem_setTokenGateway+0x98>
            {
                return ret;
   1e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e882:	e0a2      	b.n	1e9ca <cosem_setTokenGateway+0x1de>
            }
            time_copy(&object->time, tmp2.dateTime);
   1e884:	68fb      	ldr	r3, [r7, #12]
   1e886:	331c      	adds	r3, #28
   1e888:	6a3a      	ldr	r2, [r7, #32]
   1e88a:	4611      	mov	r1, r2
   1e88c:	4618      	mov	r0, r3
   1e88e:	f7e8 f861 	bl	6954 <time_copy>
            var_clear(&tmp2);
   1e892:	f107 0318 	add.w	r3, r7, #24
   1e896:	4618      	mov	r0, r3
   1e898:	f007 fc56 	bl	26148 <var_clear>
        }
        break;
   1e89c:	e094      	b.n	1e9c8 <cosem_setTokenGateway+0x1dc>
    case 4:
        arr_clear(&object->descriptions);
   1e89e:	68fb      	ldr	r3, [r7, #12]
   1e8a0:	334c      	adds	r3, #76	; 0x4c
   1e8a2:	4618      	mov	r0, r3
   1e8a4:	f7ed ff34 	bl	c710 <arr_clear>
        if (value != NULL)
   1e8a8:	687b      	ldr	r3, [r7, #4]
   1e8aa:	2b00      	cmp	r3, #0
   1e8ac:	f000 8089 	beq.w	1e9c2 <cosem_setTokenGateway+0x1d6>
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1e8b0:	2300      	movs	r3, #0
   1e8b2:	637b      	str	r3, [r7, #52]	; 0x34
   1e8b4:	e031      	b.n	1e91a <cosem_setTokenGateway+0x12e>
            {
                if ((ret = va_get(value->Arr, &it)) != 0)
   1e8b6:	687b      	ldr	r3, [r7, #4]
   1e8b8:	689b      	ldr	r3, [r3, #8]
   1e8ba:	f107 0210 	add.w	r2, r7, #16
   1e8be:	4611      	mov	r1, r2
   1e8c0:	4618      	mov	r0, r3
   1e8c2:	f008 faad 	bl	26e20 <va_get>
   1e8c6:	6338      	str	r0, [r7, #48]	; 0x30
   1e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e8ca:	2b00      	cmp	r3, #0
   1e8cc:	d001      	beq.n	1e8d2 <cosem_setTokenGateway+0xe6>
                {
                    return ret;
   1e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e8d0:	e07b      	b.n	1e9ca <cosem_setTokenGateway+0x1de>
                }
                char* d = (char*)gxmalloc(it->strVal->size + 1);
   1e8d2:	693b      	ldr	r3, [r7, #16]
   1e8d4:	689b      	ldr	r3, [r3, #8]
   1e8d6:	88db      	ldrh	r3, [r3, #6]
   1e8d8:	3301      	adds	r3, #1
   1e8da:	4618      	mov	r0, r3
   1e8dc:	f00b f8b2 	bl	29a44 <malloc>
   1e8e0:	4603      	mov	r3, r0
   1e8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                memcpy(d, it->strVal->data, it->strVal->size);
   1e8e4:	693b      	ldr	r3, [r7, #16]
   1e8e6:	689b      	ldr	r3, [r3, #8]
   1e8e8:	6819      	ldr	r1, [r3, #0]
   1e8ea:	693b      	ldr	r3, [r7, #16]
   1e8ec:	689b      	ldr	r3, [r3, #8]
   1e8ee:	88db      	ldrh	r3, [r3, #6]
   1e8f0:	461a      	mov	r2, r3
   1e8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e8f4:	f00b f8c5 	bl	29a82 <memcpy>
                d[it->strVal->size] = '\0';
   1e8f8:	693b      	ldr	r3, [r7, #16]
   1e8fa:	689b      	ldr	r3, [r3, #8]
   1e8fc:	88db      	ldrh	r3, [r3, #6]
   1e8fe:	461a      	mov	r2, r3
   1e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e902:	4413      	add	r3, r2
   1e904:	2200      	movs	r2, #0
   1e906:	701a      	strb	r2, [r3, #0]
                arr_push(&object->descriptions, d);
   1e908:	68fb      	ldr	r3, [r7, #12]
   1e90a:	334c      	adds	r3, #76	; 0x4c
   1e90c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1e90e:	4618      	mov	r0, r3
   1e910:	f7ed feb6 	bl	c680 <arr_push>
        break;
    case 4:
        arr_clear(&object->descriptions);
        if (value != NULL)
        {
            for (pos = 0; pos != value->Arr->size; ++pos)
   1e914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e916:	3301      	adds	r3, #1
   1e918:	637b      	str	r3, [r7, #52]	; 0x34
   1e91a:	687b      	ldr	r3, [r7, #4]
   1e91c:	689b      	ldr	r3, [r3, #8]
   1e91e:	88db      	ldrh	r3, [r3, #6]
   1e920:	461a      	mov	r2, r3
   1e922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e924:	429a      	cmp	r2, r3
   1e926:	d1c6      	bne.n	1e8b6 <cosem_setTokenGateway+0xca>
                memcpy(d, it->strVal->data, it->strVal->size);
                d[it->strVal->size] = '\0';
                arr_push(&object->descriptions, d);
            }
        }
        break;
   1e928:	e04b      	b.n	1e9c2 <cosem_setTokenGateway+0x1d6>
    case 5:
        object->deliveryMethod = (DLMS_TOKEN_DELIVERY)var_toInteger(value);
   1e92a:	6878      	ldr	r0, [r7, #4]
   1e92c:	f008 f8ce 	bl	26acc <var_toInteger>
   1e930:	4603      	mov	r3, r0
   1e932:	b2da      	uxtb	r2, r3
   1e934:	68fb      	ldr	r3, [r7, #12]
   1e936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        break;
   1e93a:	e045      	b.n	1e9c8 <cosem_setTokenGateway+0x1dc>
    case 6:
        if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   1e93c:	687b      	ldr	r3, [r7, #4]
   1e93e:	689b      	ldr	r3, [r3, #8]
   1e940:	f107 0214 	add.w	r2, r7, #20
   1e944:	2100      	movs	r1, #0
   1e946:	4618      	mov	r0, r3
   1e948:	f008 fa90 	bl	26e6c <va_getByIndex>
   1e94c:	6338      	str	r0, [r7, #48]	; 0x30
   1e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e950:	2b00      	cmp	r3, #0
   1e952:	d001      	beq.n	1e958 <cosem_setTokenGateway+0x16c>
        {
            return ret;
   1e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e956:	e038      	b.n	1e9ca <cosem_setTokenGateway+0x1de>
        }
        object->status = (DLMS_TOKEN_STATUS_CODE)var_toInteger(tmp);
   1e958:	697b      	ldr	r3, [r7, #20]
   1e95a:	4618      	mov	r0, r3
   1e95c:	f008 f8b6 	bl	26acc <var_toInteger>
   1e960:	4603      	mov	r3, r0
   1e962:	b2da      	uxtb	r2, r3
   1e964:	68fb      	ldr	r3, [r7, #12]
   1e966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1e96a:	687b      	ldr	r3, [r7, #4]
   1e96c:	689b      	ldr	r3, [r3, #8]
   1e96e:	f107 0214 	add.w	r2, r7, #20
   1e972:	2101      	movs	r1, #1
   1e974:	4618      	mov	r0, r3
   1e976:	f008 fa79 	bl	26e6c <va_getByIndex>
   1e97a:	6338      	str	r0, [r7, #48]	; 0x30
   1e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e97e:	2b00      	cmp	r3, #0
   1e980:	d001      	beq.n	1e986 <cosem_setTokenGateway+0x19a>
        {
            return ret;
   1e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e984:	e021      	b.n	1e9ca <cosem_setTokenGateway+0x1de>
        }
        ba_clear(&object->dataValue);
   1e986:	68fb      	ldr	r3, [r7, #12]
   1e988:	3360      	adds	r3, #96	; 0x60
   1e98a:	4618      	mov	r0, r3
   1e98c:	f7e4 f8bc 	bl	2b08 <ba_clear>
        if (tmp->strVal != NULL && tmp->strVal->size != 0)
   1e990:	697b      	ldr	r3, [r7, #20]
   1e992:	689b      	ldr	r3, [r3, #8]
   1e994:	2b00      	cmp	r3, #0
   1e996:	d016      	beq.n	1e9c6 <cosem_setTokenGateway+0x1da>
   1e998:	697b      	ldr	r3, [r7, #20]
   1e99a:	689b      	ldr	r3, [r3, #8]
   1e99c:	88db      	ldrh	r3, [r3, #6]
   1e99e:	2b00      	cmp	r3, #0
   1e9a0:	d011      	beq.n	1e9c6 <cosem_setTokenGateway+0x1da>
        {
            ba_copy(&object->dataValue, tmp->bitArr->data, tmp->bitArr->size);
   1e9a2:	68fb      	ldr	r3, [r7, #12]
   1e9a4:	f103 0060 	add.w	r0, r3, #96	; 0x60
   1e9a8:	697b      	ldr	r3, [r7, #20]
   1e9aa:	689b      	ldr	r3, [r3, #8]
   1e9ac:	6819      	ldr	r1, [r3, #0]
   1e9ae:	697b      	ldr	r3, [r7, #20]
   1e9b0:	689b      	ldr	r3, [r3, #8]
   1e9b2:	88db      	ldrh	r3, [r3, #6]
   1e9b4:	461a      	mov	r2, r3
   1e9b6:	f7e4 f87d 	bl	2ab4 <ba_copy>
        }
        break;
   1e9ba:	e004      	b.n	1e9c6 <cosem_setTokenGateway+0x1da>
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1e9bc:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e9c0:	e003      	b.n	1e9ca <cosem_setTokenGateway+0x1de>
                memcpy(d, it->strVal->data, it->strVal->size);
                d[it->strVal->size] = '\0';
                arr_push(&object->descriptions, d);
            }
        }
        break;
   1e9c2:	bf00      	nop
   1e9c4:	e000      	b.n	1e9c8 <cosem_setTokenGateway+0x1dc>
        ba_clear(&object->dataValue);
        if (tmp->strVal != NULL && tmp->strVal->size != 0)
        {
            ba_copy(&object->dataValue, tmp->bitArr->data, tmp->bitArr->size);
        }
        break;
   1e9c6:	bf00      	nop
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return DLMS_ERROR_CODE_OK;
   1e9c8:	2300      	movs	r3, #0
}
   1e9ca:	4618      	mov	r0, r3
   1e9cc:	3738      	adds	r7, #56	; 0x38
   1e9ce:	46bd      	mov	sp, r7
   1e9d0:	bdb0      	pop	{r4, r5, r7, pc}
   1e9d2:	bf00      	nop

0001e9d4 <compactData_updateTemplateDescription>:
#ifndef DLMS_IGNORE_COMPACT_DATA

int compactData_updateTemplateDescription(
    dlmsSettings* settings,
    gxCompactData* object)
{
   1e9d4:	b580      	push	{r7, lr}
   1e9d6:	b0a8      	sub	sp, #160	; 0xa0
   1e9d8:	af00      	add	r7, sp, #0
   1e9da:	6078      	str	r0, [r7, #4]
   1e9dc:	6039      	str	r1, [r7, #0]
    int ret, pos;
    gxByteBuffer tmp;
    gxKey *kv;
    gxValueEventArg e;
    gxValueEventCollection args;
    bb_clear(&object->buffer);
   1e9de:	683b      	ldr	r3, [r7, #0]
   1e9e0:	3310      	adds	r3, #16
   1e9e2:	4618      	mov	r0, r3
   1e9e4:	f7e4 febe 	bl	3764 <bb_clear>
    bb_clear(&object->templateDescription);
   1e9e8:	683b      	ldr	r3, [r7, #0]
   1e9ea:	3330      	adds	r3, #48	; 0x30
   1e9ec:	4618      	mov	r0, r3
   1e9ee:	f7e4 feb9 	bl	3764 <bb_clear>
    ve_init(&e);
   1e9f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1e9f6:	4618      	mov	r0, r3
   1e9f8:	f002 fe8e 	bl	21718 <ve_init>
    e.action = 1;
   1e9fc:	2301      	movs	r3, #1
   1e9fe:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    e.target = &object->base;
   1ea02:	683b      	ldr	r3, [r7, #0]
   1ea04:	64fb      	str	r3, [r7, #76]	; 0x4c
    e.index = 2;
   1ea06:	2302      	movs	r3, #2
   1ea08:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    vec_init(&args);
   1ea0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1ea10:	4618      	mov	r0, r3
   1ea12:	f002 fdb5 	bl	21580 <vec_init>
    vec_push(&args, &e);
   1ea16:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1ea1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1ea1e:	4611      	mov	r1, r2
   1ea20:	4618      	mov	r0, r3
   1ea22:	f002 fdc3 	bl	215ac <vec_push>
    // svr_preGet(settings, &args);
    bb_init(&tmp);
   1ea26:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1ea2a:	4618      	mov	r0, r3
   1ea2c:	f7e4 f95c 	bl	2ce8 <bb_init>
    if (!e.handled)
   1ea30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   1ea34:	2b00      	cmp	r3, #0
   1ea36:	f040 825d 	bne.w	1eef4 <compactData_updateTemplateDescription+0x520>
    {
        if ((ret = bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE)) != DLMS_ERROR_CODE_OK)
   1ea3a:	683b      	ldr	r3, [r7, #0]
   1ea3c:	3330      	adds	r3, #48	; 0x30
   1ea3e:	2102      	movs	r1, #2
   1ea40:	4618      	mov	r0, r3
   1ea42:	f7e4 f9e7 	bl	2e14 <bb_setUInt8>
   1ea46:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ea4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ea4e:	2b00      	cmp	r3, #0
   1ea50:	d007      	beq.n	1ea62 <compactData_updateTemplateDescription+0x8e>
        {
            bb_clear(&object->buffer);
   1ea52:	683b      	ldr	r3, [r7, #0]
   1ea54:	3310      	adds	r3, #16
   1ea56:	4618      	mov	r0, r3
   1ea58:	f7e4 fe84 	bl	3764 <bb_clear>
            return ret;
   1ea5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ea60:	e253      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
        }
        hlp_setObjectCount(object->captureObjects.size, &object->templateDescription);
   1ea62:	683b      	ldr	r3, [r7, #0]
   1ea64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1ea66:	461a      	mov	r2, r3
   1ea68:	683b      	ldr	r3, [r7, #0]
   1ea6a:	3330      	adds	r3, #48	; 0x30
   1ea6c:	4619      	mov	r1, r3
   1ea6e:	4610      	mov	r0, r2
   1ea70:	f002 ff34 	bl	218dc <hlp_setObjectCount>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   1ea74:	2300      	movs	r3, #0
   1ea76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1ea7a:	e233      	b.n	1eee4 <compactData_updateTemplateDescription+0x510>
        {
            ret = arr_getByIndex(&object->captureObjects, pos, (void**)&kv);
   1ea7c:	683b      	ldr	r3, [r7, #0]
   1ea7e:	331c      	adds	r3, #28
   1ea80:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1ea84:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   1ea88:	4618      	mov	r0, r3
   1ea8a:	f7ed feb7 	bl	c7fc <arr_getByIndex>
   1ea8e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            if (ret != DLMS_ERROR_CODE_OK)
   1ea92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ea96:	2b00      	cmp	r3, #0
   1ea98:	d007      	beq.n	1eaaa <compactData_updateTemplateDescription+0xd6>
            {
                bb_clear(&object->buffer);
   1ea9a:	683b      	ldr	r3, [r7, #0]
   1ea9c:	3310      	adds	r3, #16
   1ea9e:	4618      	mov	r0, r3
   1eaa0:	f7e4 fe60 	bl	3764 <bb_clear>
                return ret;
   1eaa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1eaa8:	e22f      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
            }
            e.target = (gxObject*)kv->key;
   1eaaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1eaae:	681b      	ldr	r3, [r3, #0]
   1eab0:	64fb      	str	r3, [r7, #76]	; 0x4c
            e.index = ((gxCaptureObject*)kv->value)->attributeIndex;
   1eab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1eab6:	685b      	ldr	r3, [r3, #4]
   1eab8:	781b      	ldrb	r3, [r3, #0]
   1eaba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if ((ret = cosem_getValue(settings, &e)) != 0)
   1eabe:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1eac2:	4619      	mov	r1, r3
   1eac4:	6878      	ldr	r0, [r7, #4]
   1eac6:	f7f5 fb79 	bl	141bc <cosem_getValue>
   1eaca:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1eace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ead2:	2b00      	cmp	r3, #0
   1ead4:	d00c      	beq.n	1eaf0 <compactData_updateTemplateDescription+0x11c>
            {
                var_clear(&e.value);
   1ead6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1eada:	4618      	mov	r0, r3
   1eadc:	f007 fb34 	bl	26148 <var_clear>
                bb_clear(&object->buffer);
   1eae0:	683b      	ldr	r3, [r7, #0]
   1eae2:	3310      	adds	r3, #16
   1eae4:	4618      	mov	r0, r3
   1eae6:	f7e4 fe3d 	bl	3764 <bb_clear>
                return ret;
   1eaea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1eaee:	e20c      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
            }
            if (e.byteArray)
   1eaf0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1eaf4:	2b00      	cmp	r3, #0
   1eaf6:	f000 81bb 	beq.w	1ee70 <compactData_updateTemplateDescription+0x49c>
            {
                if (bb_size(e.value.byteArr) == 0)
   1eafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eafc:	4618      	mov	r0, r3
   1eafe:	f7e4 f8e3 	bl	2cc8 <bb_size>
   1eb02:	4603      	mov	r3, r0
   1eb04:	2b00      	cmp	r3, #0
   1eb06:	d106      	bne.n	1eb16 <compactData_updateTemplateDescription+0x142>
                {
                    bb_setUInt8(&object->templateDescription, 0);
   1eb08:	683b      	ldr	r3, [r7, #0]
   1eb0a:	3330      	adds	r3, #48	; 0x30
   1eb0c:	2100      	movs	r1, #0
   1eb0e:	4618      	mov	r0, r3
   1eb10:	f7e4 f980 	bl	2e14 <bb_setUInt8>
   1eb14:	e1dc      	b.n	1eed0 <compactData_updateTemplateDescription+0x4fc>
                }
                else
                {
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
   1eb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eb18:	681b      	ldr	r3, [r3, #0]
   1eb1a:	781b      	ldrb	r3, [r3, #0]
   1eb1c:	2b01      	cmp	r3, #1
   1eb1e:	d005      	beq.n	1eb2c <compactData_updateTemplateDescription+0x158>
                        e.value.byteArr->data[0] == DLMS_DATA_TYPE_STRUCTURE)
   1eb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eb22:	681b      	ldr	r3, [r3, #0]
   1eb24:	781b      	ldrb	r3, [r3, #0]
                {
                    bb_setUInt8(&object->templateDescription, 0);
                }
                else
                {
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
   1eb26:	2b02      	cmp	r3, #2
   1eb28:	f040 8197 	bne.w	1ee5a <compactData_updateTemplateDescription+0x486>
                        e.value.byteArr->data[0] == DLMS_DATA_TYPE_STRUCTURE)
                    {
                        gxDataInfo info;
                        dlmsVARIANT value;
                        unsigned short count;
                        di_init(&info);
   1eb2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1eb30:	4618      	mov	r0, r3
   1eb32:	f7e7 fb13 	bl	615c <di_init>
                        var_init(&value);
   1eb36:	f107 0318 	add.w	r3, r7, #24
   1eb3a:	4618      	mov	r0, r3
   1eb3c:	f007 faf4 	bl	26128 <var_init>
                        e.value.byteArr->position = 1;
   1eb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eb42:	2201      	movs	r2, #1
   1eb44:	811a      	strh	r2, [r3, #8]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1eb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eb48:	f107 0216 	add.w	r2, r7, #22
   1eb4c:	4611      	mov	r1, r2
   1eb4e:	4618      	mov	r0, r3
   1eb50:	f002 fe7c 	bl	2184c <hlp_getObjectCount2>
   1eb54:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1eb58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1eb5c:	2b00      	cmp	r3, #0
   1eb5e:	d107      	bne.n	1eb70 <compactData_updateTemplateDescription+0x19c>
                            ((gxCaptureObject*)kv->value)->dataIndex > count)
   1eb60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1eb64:	685b      	ldr	r3, [r3, #4]
   1eb66:	785b      	ldrb	r3, [r3, #1]
   1eb68:	b29a      	uxth	r2, r3
   1eb6a:	8afb      	ldrh	r3, [r7, #22]
                        dlmsVARIANT value;
                        unsigned short count;
                        di_init(&info);
                        var_init(&value);
                        e.value.byteArr->position = 1;
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1eb6c:	429a      	cmp	r2, r3
   1eb6e:	d90c      	bls.n	1eb8a <compactData_updateTemplateDescription+0x1b6>
                            ((gxCaptureObject*)kv->value)->dataIndex > count)
                        {
                            var_clear(&e.value);
   1eb70:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1eb74:	4618      	mov	r0, r3
   1eb76:	f007 fae7 	bl	26148 <var_clear>
                            bb_clear(&object->buffer);
   1eb7a:	683b      	ldr	r3, [r7, #0]
   1eb7c:	3310      	adds	r3, #16
   1eb7e:	4618      	mov	r0, r3
   1eb80:	f7e4 fdf0 	bl	3764 <bb_clear>
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   1eb84:	f44f 7382 	mov.w	r3, #260	; 0x104
   1eb88:	e1bf      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
                        }
                        //If all data is captured.
                        if (((gxCaptureObject*)kv->value)->dataIndex == 0)
   1eb8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1eb8e:	685b      	ldr	r3, [r3, #4]
   1eb90:	785b      	ldrb	r3, [r3, #1]
   1eb92:	2b00      	cmp	r3, #0
   1eb94:	f040 80c3 	bne.w	1ed1e <compactData_updateTemplateDescription+0x34a>
                        {
                            bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   1eb98:	683b      	ldr	r3, [r7, #0]
   1eb9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1eb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1eba0:	681b      	ldr	r3, [r3, #0]
   1eba2:	781b      	ldrb	r3, [r3, #0]
   1eba4:	4619      	mov	r1, r3
   1eba6:	4610      	mov	r0, r2
   1eba8:	f7e4 f934 	bl	2e14 <bb_setUInt8>
							if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1ebac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ebae:	681b      	ldr	r3, [r3, #0]
   1ebb0:	781b      	ldrb	r3, [r3, #0]
   1ebb2:	2b01      	cmp	r3, #1
   1ebb4:	d10c      	bne.n	1ebd0 <compactData_updateTemplateDescription+0x1fc>
							{
								bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   1ebb6:	683b      	ldr	r3, [r7, #0]
   1ebb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ebbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ebbe:	681b      	ldr	r3, [r3, #0]
   1ebc0:	3301      	adds	r3, #1
   1ebc2:	781b      	ldrb	r3, [r3, #0]
   1ebc4:	b29b      	uxth	r3, r3
   1ebc6:	4619      	mov	r1, r3
   1ebc8:	4610      	mov	r0, r2
   1ebca:	f7e4 f9b5 	bl	2f38 <bb_setUInt16>
   1ebce:	e00a      	b.n	1ebe6 <compactData_updateTemplateDescription+0x212>
							}
							else
							{
								bb_setUInt8(&object->templateDescription, e.value.byteArr->data[1]);
   1ebd0:	683b      	ldr	r3, [r7, #0]
   1ebd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ebd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ebd8:	681b      	ldr	r3, [r3, #0]
   1ebda:	3301      	adds	r3, #1
   1ebdc:	781b      	ldrb	r3, [r3, #0]
   1ebde:	4619      	mov	r1, r3
   1ebe0:	4610      	mov	r0, r2
   1ebe2:	f7e4 f917 	bl	2e14 <bb_setUInt8>
							}
							for (unsigned char pos = 0; pos < count; ++pos)
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
   1ebec:	e08f      	b.n	1ed0e <compactData_updateTemplateDescription+0x33a>
							{
								di_init(&info);
   1ebee:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1ebf2:	4618      	mov	r0, r3
   1ebf4:	f7e7 fab2 	bl	615c <di_init>
								var_clear(&value);
   1ebf8:	f107 0318 	add.w	r3, r7, #24
   1ebfc:	4618      	mov	r0, r3
   1ebfe:	f007 faa3 	bl	26148 <var_clear>
								if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   1ec02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ec04:	f107 0218 	add.w	r2, r7, #24
   1ec08:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1ec0c:	4618      	mov	r0, r3
   1ec0e:	f7e8 fff7 	bl	7c00 <dlms_getData>
   1ec12:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ec16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d011      	beq.n	1ec42 <compactData_updateTemplateDescription+0x26e>
								{
									var_clear(&value);
   1ec1e:	f107 0318 	add.w	r3, r7, #24
   1ec22:	4618      	mov	r0, r3
   1ec24:	f007 fa90 	bl	26148 <var_clear>
									var_clear(&e.value);
   1ec28:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1ec2c:	4618      	mov	r0, r3
   1ec2e:	f007 fa8b 	bl	26148 <var_clear>
									bb_clear(&object->buffer);
   1ec32:	683b      	ldr	r3, [r7, #0]
   1ec34:	3310      	adds	r3, #16
   1ec36:	4618      	mov	r0, r3
   1ec38:	f7e4 fd94 	bl	3764 <bb_clear>
									return ret;
   1ec3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ec40:	e163      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
								}
								if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   1ec42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ec46:	2b02      	cmp	r3, #2
   1ec48:	d003      	beq.n	1ec52 <compactData_updateTemplateDescription+0x27e>
   1ec4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ec4e:	2b01      	cmp	r3, #1
   1ec50:	d14a      	bne.n	1ece8 <compactData_updateTemplateDescription+0x314>
								{
									dlmsVARIANT* value2;
									bb_setUInt8(&object->templateDescription, info.type);
   1ec52:	683b      	ldr	r3, [r7, #0]
   1ec54:	3330      	adds	r3, #48	; 0x30
   1ec56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1ec5a:	4611      	mov	r1, r2
   1ec5c:	4618      	mov	r0, r3
   1ec5e:	f7e4 f8d9 	bl	2e14 <bb_setUInt8>
									bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   1ec62:	683b      	ldr	r3, [r7, #0]
   1ec64:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ec68:	6a3b      	ldr	r3, [r7, #32]
   1ec6a:	88db      	ldrh	r3, [r3, #6]
   1ec6c:	b2db      	uxtb	r3, r3
   1ec6e:	4619      	mov	r1, r3
   1ec70:	4610      	mov	r0, r2
   1ec72:	f7e4 f8cf 	bl	2e14 <bb_setUInt8>
									for (unsigned short pos = 0; pos < value.Arr->size; ++pos)
   1ec76:	2300      	movs	r3, #0
   1ec78:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
   1ec7c:	e02d      	b.n	1ecda <compactData_updateTemplateDescription+0x306>
									{
										if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   1ec7e:	6a3b      	ldr	r3, [r7, #32]
   1ec80:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
   1ec84:	f107 0210 	add.w	r2, r7, #16
   1ec88:	4618      	mov	r0, r3
   1ec8a:	f008 f8ef 	bl	26e6c <va_getByIndex>
   1ec8e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ec92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ec96:	2b00      	cmp	r3, #0
   1ec98:	d011      	beq.n	1ecbe <compactData_updateTemplateDescription+0x2ea>
										{
											var_clear(&value);
   1ec9a:	f107 0318 	add.w	r3, r7, #24
   1ec9e:	4618      	mov	r0, r3
   1eca0:	f007 fa52 	bl	26148 <var_clear>
											var_clear(&e.value);
   1eca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1eca8:	4618      	mov	r0, r3
   1ecaa:	f007 fa4d 	bl	26148 <var_clear>
											bb_clear(&object->buffer);
   1ecae:	683b      	ldr	r3, [r7, #0]
   1ecb0:	3310      	adds	r3, #16
   1ecb2:	4618      	mov	r0, r3
   1ecb4:	f7e4 fd56 	bl	3764 <bb_clear>
											return ret;
   1ecb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
                            ((gxCaptureObject*)kv->value)->dataIndex > count)
                        {
                            var_clear(&e.value);
                            bb_clear(&object->buffer);
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   1ecbc:	e125      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
											var_clear(&value);
											var_clear(&e.value);
											bb_clear(&object->buffer);
											return ret;
										}
										bb_setUInt8(&object->templateDescription, value2->vt);
   1ecbe:	683b      	ldr	r3, [r7, #0]
   1ecc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ecc4:	693b      	ldr	r3, [r7, #16]
   1ecc6:	781b      	ldrb	r3, [r3, #0]
   1ecc8:	4619      	mov	r1, r3
   1ecca:	4610      	mov	r0, r2
   1eccc:	f7e4 f8a2 	bl	2e14 <bb_setUInt8>
								if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
								{
									dlmsVARIANT* value2;
									bb_setUInt8(&object->templateDescription, info.type);
									bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
									for (unsigned short pos = 0; pos < value.Arr->size; ++pos)
   1ecd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
   1ecd4:	3301      	adds	r3, #1
   1ecd6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
   1ecda:	6a3b      	ldr	r3, [r7, #32]
   1ecdc:	88db      	ldrh	r3, [r3, #6]
   1ecde:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
   1ece2:	429a      	cmp	r2, r3
   1ece4:	d3cb      	bcc.n	1ec7e <compactData_updateTemplateDescription+0x2aa>
									var_clear(&e.value);
									bb_clear(&object->buffer);
									return ret;
								}
								if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
								{
   1ece6:	e007      	b.n	1ecf8 <compactData_updateTemplateDescription+0x324>
										bb_setUInt8(&object->templateDescription, value2->vt);
									}
								}
								else
								{
									bb_setUInt8(&object->templateDescription, info.type);
   1ece8:	683b      	ldr	r3, [r7, #0]
   1ecea:	3330      	adds	r3, #48	; 0x30
   1ecec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1ecf0:	4611      	mov	r1, r2
   1ecf2:	4618      	mov	r0, r3
   1ecf4:	f7e4 f88e 	bl	2e14 <bb_setUInt8>
								}
								if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1ecf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ecfa:	681b      	ldr	r3, [r3, #0]
   1ecfc:	781b      	ldrb	r3, [r3, #0]
   1ecfe:	2b01      	cmp	r3, #1
   1ed00:	f000 80a4 	beq.w	1ee4c <compactData_updateTemplateDescription+0x478>
							}
							else
							{
								bb_setUInt8(&object->templateDescription, e.value.byteArr->data[1]);
							}
							for (unsigned char pos = 0; pos < count; ++pos)
   1ed04:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   1ed08:	3301      	adds	r3, #1
   1ed0a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
   1ed0e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   1ed12:	b29a      	uxth	r2, r3
   1ed14:	8afb      	ldrh	r3, [r7, #22]
   1ed16:	429a      	cmp	r2, r3
   1ed18:	f4ff af69 	bcc.w	1ebee <compactData_updateTemplateDescription+0x21a>
   1ed1c:	e097      	b.n	1ee4e <compactData_updateTemplateDescription+0x47a>
								}
							}
                        }
                        else
                        {
                            for (unsigned char pos = 0; pos < ((gxCaptureObject*)kv->value)->dataIndex; ++pos)
   1ed1e:	2300      	movs	r3, #0
   1ed20:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   1ed24:	e034      	b.n	1ed90 <compactData_updateTemplateDescription+0x3bc>
                            {
                                var_clear(&value);
   1ed26:	f107 0318 	add.w	r3, r7, #24
   1ed2a:	4618      	mov	r0, r3
   1ed2c:	f007 fa0c 	bl	26148 <var_clear>
								di_init(&info);
   1ed30:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1ed34:	4618      	mov	r0, r3
   1ed36:	f7e7 fa11 	bl	615c <di_init>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   1ed3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ed3c:	f107 0218 	add.w	r2, r7, #24
   1ed40:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1ed44:	4618      	mov	r0, r3
   1ed46:	f7e8 ff5b 	bl	7c00 <dlms_getData>
   1ed4a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ed4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ed52:	2b00      	cmp	r3, #0
   1ed54:	d011      	beq.n	1ed7a <compactData_updateTemplateDescription+0x3a6>
                                {
                                    var_clear(&value);
   1ed56:	f107 0318 	add.w	r3, r7, #24
   1ed5a:	4618      	mov	r0, r3
   1ed5c:	f007 f9f4 	bl	26148 <var_clear>
                                    var_clear(&e.value);
   1ed60:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1ed64:	4618      	mov	r0, r3
   1ed66:	f007 f9ef 	bl	26148 <var_clear>
                                    bb_clear(&object->buffer);
   1ed6a:	683b      	ldr	r3, [r7, #0]
   1ed6c:	3310      	adds	r3, #16
   1ed6e:	4618      	mov	r0, r3
   1ed70:	f7e4 fcf8 	bl	3764 <bb_clear>
                                    return ret;
   1ed74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ed78:	e0c7      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
                                }
								if (!info.compleate)
   1ed7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1ed7e:	2b00      	cmp	r3, #0
   1ed80:	d101      	bne.n	1ed86 <compactData_updateTemplateDescription+0x3b2>
								{
									return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1ed82:	2303      	movs	r3, #3
   1ed84:	e0c1      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
								}
							}
                        }
                        else
                        {
                            for (unsigned char pos = 0; pos < ((gxCaptureObject*)kv->value)->dataIndex; ++pos)
   1ed86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   1ed8a:	3301      	adds	r3, #1
   1ed8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   1ed90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1ed94:	685b      	ldr	r3, [r3, #4]
   1ed96:	785b      	ldrb	r3, [r3, #1]
   1ed98:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   1ed9c:	429a      	cmp	r2, r3
   1ed9e:	d3c2      	bcc.n	1ed26 <compactData_updateTemplateDescription+0x352>
								if (!info.compleate)
								{
									return DLMS_ERROR_CODE_READ_WRITE_DENIED;
								}
                            }
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   1eda0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1eda4:	2b02      	cmp	r3, #2
   1eda6:	d148      	bne.n	1ee3a <compactData_updateTemplateDescription+0x466>
                            {
                                dlmsVARIANT* value2;
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   1eda8:	683b      	ldr	r3, [r7, #0]
   1edaa:	3330      	adds	r3, #48	; 0x30
   1edac:	2102      	movs	r1, #2
   1edae:	4618      	mov	r0, r3
   1edb0:	f7e4 f830 	bl	2e14 <bb_setUInt8>
                                bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   1edb4:	683b      	ldr	r3, [r7, #0]
   1edb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1edba:	6a3b      	ldr	r3, [r7, #32]
   1edbc:	88db      	ldrh	r3, [r3, #6]
   1edbe:	b2db      	uxtb	r3, r3
   1edc0:	4619      	mov	r1, r3
   1edc2:	4610      	mov	r0, r2
   1edc4:	f7e4 f826 	bl	2e14 <bb_setUInt8>
                                for (unsigned short pos = 0; pos < value.Arr->size; ++pos)
   1edc8:	2300      	movs	r3, #0
   1edca:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
   1edce:	e02d      	b.n	1ee2c <compactData_updateTemplateDescription+0x458>
                                {
                                    if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   1edd0:	6a3b      	ldr	r3, [r7, #32]
   1edd2:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
   1edd6:	f107 020c 	add.w	r2, r7, #12
   1edda:	4618      	mov	r0, r3
   1eddc:	f008 f846 	bl	26e6c <va_getByIndex>
   1ede0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ede4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ede8:	2b00      	cmp	r3, #0
   1edea:	d011      	beq.n	1ee10 <compactData_updateTemplateDescription+0x43c>
                                    {
                                        var_clear(&value);
   1edec:	f107 0318 	add.w	r3, r7, #24
   1edf0:	4618      	mov	r0, r3
   1edf2:	f007 f9a9 	bl	26148 <var_clear>
                                        var_clear(&e.value);
   1edf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1edfa:	4618      	mov	r0, r3
   1edfc:	f007 f9a4 	bl	26148 <var_clear>
                                        bb_clear(&object->buffer);
   1ee00:	683b      	ldr	r3, [r7, #0]
   1ee02:	3310      	adds	r3, #16
   1ee04:	4618      	mov	r0, r3
   1ee06:	f7e4 fcad 	bl	3764 <bb_clear>
                                        return ret;
   1ee0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
                            ((gxCaptureObject*)kv->value)->dataIndex > count)
                        {
                            var_clear(&e.value);
                            bb_clear(&object->buffer);
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   1ee0e:	e07c      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
                                        var_clear(&value);
                                        var_clear(&e.value);
                                        bb_clear(&object->buffer);
                                        return ret;
                                    }
                                    bb_setUInt8(&object->templateDescription, value2->vt);
   1ee10:	683b      	ldr	r3, [r7, #0]
   1ee12:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ee16:	68fb      	ldr	r3, [r7, #12]
   1ee18:	781b      	ldrb	r3, [r3, #0]
   1ee1a:	4619      	mov	r1, r3
   1ee1c:	4610      	mov	r0, r2
   1ee1e:	f7e3 fff9 	bl	2e14 <bb_setUInt8>
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
                            {
                                dlmsVARIANT* value2;
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
                                bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
                                for (unsigned short pos = 0; pos < value.Arr->size; ++pos)
   1ee22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
   1ee26:	3301      	adds	r3, #1
   1ee28:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
   1ee2c:	6a3b      	ldr	r3, [r7, #32]
   1ee2e:	88db      	ldrh	r3, [r3, #6]
   1ee30:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
   1ee34:	429a      	cmp	r2, r3
   1ee36:	d3cb      	bcc.n	1edd0 <compactData_updateTemplateDescription+0x3fc>
   1ee38:	e009      	b.n	1ee4e <compactData_updateTemplateDescription+0x47a>
                                    bb_setUInt8(&object->templateDescription, value2->vt);
                                }
                            }
                            else
                            {
                                bb_setUInt8(&object->templateDescription, info.type);
   1ee3a:	683b      	ldr	r3, [r7, #0]
   1ee3c:	3330      	adds	r3, #48	; 0x30
   1ee3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1ee42:	4611      	mov	r1, r2
   1ee44:	4618      	mov	r0, r3
   1ee46:	f7e3 ffe5 	bl	2e14 <bb_setUInt8>
   1ee4a:	e000      	b.n	1ee4e <compactData_updateTemplateDescription+0x47a>
								{
									bb_setUInt8(&object->templateDescription, info.type);
								}
								if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
								{
									break;
   1ee4c:	bf00      	nop
                            else
                            {
                                bb_setUInt8(&object->templateDescription, info.type);
                            }
                        }
                        var_clear(&value);
   1ee4e:	f107 0318 	add.w	r3, r7, #24
   1ee52:	4618      	mov	r0, r3
   1ee54:	f007 f978 	bl	26148 <var_clear>
                }
                else
                {
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
                        e.value.byteArr->data[0] == DLMS_DATA_TYPE_STRUCTURE)
                    {
   1ee58:	e03a      	b.n	1eed0 <compactData_updateTemplateDescription+0x4fc>
                        }
                        var_clear(&value);
                    }
                    else
                    {
                        bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   1ee5a:	683b      	ldr	r3, [r7, #0]
   1ee5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1ee60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ee62:	681b      	ldr	r3, [r3, #0]
   1ee64:	781b      	ldrb	r3, [r3, #0]
   1ee66:	4619      	mov	r1, r3
   1ee68:	4610      	mov	r0, r2
   1ee6a:	f7e3 ffd3 	bl	2e14 <bb_setUInt8>
   1ee6e:	e02f      	b.n	1eed0 <compactData_updateTemplateDescription+0x4fc>
                    }
                }
            }
            else
            {
                if ((ret = dlms_setData(&tmp, e.value.vt, &e.value)) != 0)
   1ee70:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
   1ee74:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1ee78:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1ee7c:	4618      	mov	r0, r3
   1ee7e:	f7e7 ff83 	bl	6d88 <dlms_setData>
   1ee82:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
   1ee86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1ee8a:	2b00      	cmp	r3, #0
   1ee8c:	d011      	beq.n	1eeb2 <compactData_updateTemplateDescription+0x4de>
                {
                    var_clear(&e.value);
   1ee8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1ee92:	4618      	mov	r0, r3
   1ee94:	f007 f958 	bl	26148 <var_clear>
                    bb_clear(&tmp);
   1ee98:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1ee9c:	4618      	mov	r0, r3
   1ee9e:	f7e4 fc61 	bl	3764 <bb_clear>
                    bb_clear(&object->buffer);
   1eea2:	683b      	ldr	r3, [r7, #0]
   1eea4:	3310      	adds	r3, #16
   1eea6:	4618      	mov	r0, r3
   1eea8:	f7e4 fc5c 	bl	3764 <bb_clear>
                    return ret;
   1eeac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1eeb0:	e02b      	b.n	1ef0a <compactData_updateTemplateDescription+0x536>
                }
                bb_setUInt8(&object->templateDescription, tmp.data[0]);
   1eeb2:	683b      	ldr	r3, [r7, #0]
   1eeb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1eeb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1eebc:	781b      	ldrb	r3, [r3, #0]
   1eebe:	4619      	mov	r1, r3
   1eec0:	4610      	mov	r0, r2
   1eec2:	f7e3 ffa7 	bl	2e14 <bb_setUInt8>
                bb_clear(&tmp);
   1eec6:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1eeca:	4618      	mov	r0, r3
   1eecc:	f7e4 fc4a 	bl	3764 <bb_clear>
            }
            var_clear(&e.value);
   1eed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1eed4:	4618      	mov	r0, r3
   1eed6:	f007 f937 	bl	26148 <var_clear>
        {
            bb_clear(&object->buffer);
            return ret;
        }
        hlp_setObjectCount(object->captureObjects.size, &object->templateDescription);
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   1eeda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1eede:	3301      	adds	r3, #1
   1eee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1eee4:	683b      	ldr	r3, [r7, #0]
   1eee6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1eee8:	461a      	mov	r2, r3
   1eeea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1eeee:	429a      	cmp	r2, r3
   1eef0:	f47f adc4 	bne.w	1ea7c <compactData_updateTemplateDescription+0xa8>
                bb_clear(&tmp);
            }
            var_clear(&e.value);
        }
    }
    bb_clear(&tmp);
   1eef4:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1eef8:	4618      	mov	r0, r3
   1eefa:	f7e4 fc33 	bl	3764 <bb_clear>
    //  svr_postGet(settings, &args);
    vec_empty(&args);
   1eefe:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1ef02:	4618      	mov	r0, r3
   1ef04:	f002 fb90 	bl	21628 <vec_empty>
    return 0;
   1ef08:	2300      	movs	r3, #0
    return 0;
}
   1ef0a:	4618      	mov	r0, r3
   1ef0c:	37a0      	adds	r7, #160	; 0xa0
   1ef0e:	46bd      	mov	sp, r7
   1ef10:	bd80      	pop	{r7, pc}
   1ef12:	bf00      	nop

0001ef14 <cosem_setCompactData>:
int cosem_setCompactData(
    dlmsSettings* settings,
    gxCompactData* object,
    unsigned char index,
    dlmsVARIANT *value)
{
   1ef14:	b580      	push	{r7, lr}
   1ef16:	b086      	sub	sp, #24
   1ef18:	af00      	add	r7, sp, #0
   1ef1a:	60f8      	str	r0, [r7, #12]
   1ef1c:	60b9      	str	r1, [r7, #8]
   1ef1e:	603b      	str	r3, [r7, #0]
   1ef20:	4613      	mov	r3, r2
   1ef22:	71fb      	strb	r3, [r7, #7]
    int ret = DLMS_ERROR_CODE_OK;
   1ef24:	2300      	movs	r3, #0
   1ef26:	617b      	str	r3, [r7, #20]
    switch (index)
   1ef28:	79fb      	ldrb	r3, [r7, #7]
   1ef2a:	3b02      	subs	r3, #2
   1ef2c:	2b04      	cmp	r3, #4
   1ef2e:	d863      	bhi.n	1eff8 <cosem_setCompactData+0xe4>
   1ef30:	a201      	add	r2, pc, #4	; (adr r2, 1ef38 <cosem_setCompactData+0x24>)
   1ef32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ef36:	bf00      	nop
   1ef38:	0001ef4d 	.word	0x0001ef4d
   1ef3c:	0001ef7b 	.word	0x0001ef7b
   1ef40:	0001efa7 	.word	0x0001efa7
   1ef44:	0001efb9 	.word	0x0001efb9
   1ef48:	0001efe7 	.word	0x0001efe7
    {
    case 2:
        bb_clear(&object->buffer);
   1ef4c:	68bb      	ldr	r3, [r7, #8]
   1ef4e:	3310      	adds	r3, #16
   1ef50:	4618      	mov	r0, r3
   1ef52:	f7e4 fc07 	bl	3764 <bb_clear>
        if (value->byteArr != NULL)
   1ef56:	683b      	ldr	r3, [r7, #0]
   1ef58:	689b      	ldr	r3, [r3, #8]
   1ef5a:	2b00      	cmp	r3, #0
   1ef5c:	d050      	beq.n	1f000 <cosem_setCompactData+0xec>
        {
            ret = bb_set(&object->buffer, value->byteArr->data, value->byteArr->size);
   1ef5e:	68bb      	ldr	r3, [r7, #8]
   1ef60:	f103 0010 	add.w	r0, r3, #16
   1ef64:	683b      	ldr	r3, [r7, #0]
   1ef66:	689b      	ldr	r3, [r3, #8]
   1ef68:	6819      	ldr	r1, [r3, #0]
   1ef6a:	683b      	ldr	r3, [r7, #0]
   1ef6c:	689b      	ldr	r3, [r3, #8]
   1ef6e:	88db      	ldrh	r3, [r3, #6]
   1ef70:	461a      	mov	r2, r3
   1ef72:	f7e4 faf5 	bl	3560 <bb_set>
   1ef76:	6178      	str	r0, [r7, #20]
        }
        break;
   1ef78:	e042      	b.n	1f000 <cosem_setCompactData+0xec>
    case 3:
        ret = setCaptureObjects(settings, &object->captureObjects, value);
   1ef7a:	68bb      	ldr	r3, [r7, #8]
   1ef7c:	331c      	adds	r3, #28
   1ef7e:	683a      	ldr	r2, [r7, #0]
   1ef80:	4619      	mov	r1, r3
   1ef82:	68f8      	ldr	r0, [r7, #12]
   1ef84:	f7fe ff2e 	bl	1dde4 <setCaptureObjects>
   1ef88:	6178      	str	r0, [r7, #20]
        if (ret == 0 && settings->server)
   1ef8a:	697b      	ldr	r3, [r7, #20]
   1ef8c:	2b00      	cmp	r3, #0
   1ef8e:	d139      	bne.n	1f004 <cosem_setCompactData+0xf0>
   1ef90:	68fb      	ldr	r3, [r7, #12]
   1ef92:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	d034      	beq.n	1f004 <cosem_setCompactData+0xf0>
        {
            ret = compactData_updateTemplateDescription(settings, object);
   1ef9a:	68b9      	ldr	r1, [r7, #8]
   1ef9c:	68f8      	ldr	r0, [r7, #12]
   1ef9e:	f7ff fd19 	bl	1e9d4 <compactData_updateTemplateDescription>
   1efa2:	6178      	str	r0, [r7, #20]
        }
        break;
   1efa4:	e02e      	b.n	1f004 <cosem_setCompactData+0xf0>
    case 4:
        object->templateId = var_toInteger(value);
   1efa6:	6838      	ldr	r0, [r7, #0]
   1efa8:	f007 fd90 	bl	26acc <var_toInteger>
   1efac:	4603      	mov	r3, r0
   1efae:	b2da      	uxtb	r2, r3
   1efb0:	68bb      	ldr	r3, [r7, #8]
   1efb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        break;
   1efb6:	e028      	b.n	1f00a <cosem_setCompactData+0xf6>
    case 5:
        bb_clear(&object->templateDescription);
   1efb8:	68bb      	ldr	r3, [r7, #8]
   1efba:	3330      	adds	r3, #48	; 0x30
   1efbc:	4618      	mov	r0, r3
   1efbe:	f7e4 fbd1 	bl	3764 <bb_clear>
        if (value->byteArr != NULL)
   1efc2:	683b      	ldr	r3, [r7, #0]
   1efc4:	689b      	ldr	r3, [r3, #8]
   1efc6:	2b00      	cmp	r3, #0
   1efc8:	d01e      	beq.n	1f008 <cosem_setCompactData+0xf4>
        {
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   1efca:	68bb      	ldr	r3, [r7, #8]
   1efcc:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1efd0:	683b      	ldr	r3, [r7, #0]
   1efd2:	689b      	ldr	r3, [r3, #8]
   1efd4:	6819      	ldr	r1, [r3, #0]
   1efd6:	683b      	ldr	r3, [r7, #0]
   1efd8:	689b      	ldr	r3, [r3, #8]
   1efda:	88db      	ldrh	r3, [r3, #6]
   1efdc:	461a      	mov	r2, r3
   1efde:	f7e4 fabf 	bl	3560 <bb_set>
   1efe2:	6178      	str	r0, [r7, #20]
        }
        break;
   1efe4:	e010      	b.n	1f008 <cosem_setCompactData+0xf4>
    case 6:
        object->captureMethod = (DLMS_CAPTURE_METHOD)var_toInteger(value);
   1efe6:	6838      	ldr	r0, [r7, #0]
   1efe8:	f007 fd70 	bl	26acc <var_toInteger>
   1efec:	4603      	mov	r3, r0
   1efee:	b2da      	uxtb	r2, r3
   1eff0:	68bb      	ldr	r3, [r7, #8]
   1eff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
   1eff6:	e008      	b.n	1f00a <cosem_setCompactData+0xf6>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1eff8:	f44f 7381 	mov.w	r3, #258	; 0x102
   1effc:	617b      	str	r3, [r7, #20]
   1effe:	e004      	b.n	1f00a <cosem_setCompactData+0xf6>
        bb_clear(&object->buffer);
        if (value->byteArr != NULL)
        {
            ret = bb_set(&object->buffer, value->byteArr->data, value->byteArr->size);
        }
        break;
   1f000:	bf00      	nop
   1f002:	e002      	b.n	1f00a <cosem_setCompactData+0xf6>
        ret = setCaptureObjects(settings, &object->captureObjects, value);
        if (ret == 0 && settings->server)
        {
            ret = compactData_updateTemplateDescription(settings, object);
        }
        break;
   1f004:	bf00      	nop
   1f006:	e000      	b.n	1f00a <cosem_setCompactData+0xf6>
        bb_clear(&object->templateDescription);
        if (value->byteArr != NULL)
        {
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
        }
        break;
   1f008:	bf00      	nop
        object->captureMethod = (DLMS_CAPTURE_METHOD)var_toInteger(value);
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
   1f00a:	697b      	ldr	r3, [r7, #20]
}
   1f00c:	4618      	mov	r0, r3
   1f00e:	3718      	adds	r7, #24
   1f010:	46bd      	mov	sp, r7
   1f012:	bd80      	pop	{r7, pc}

0001f014 <cosem_setValue>:
}

#endif //DLMS_ITALIAN_STANDARD

int cosem_setValue(dlmsSettings* settings, gxValueEventArg *e)
{
   1f014:	b580      	push	{r7, lr}
   1f016:	b084      	sub	sp, #16
   1f018:	af00      	add	r7, sp, #0
   1f01a:	6078      	str	r0, [r7, #4]
   1f01c:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK;
   1f01e:	2300      	movs	r3, #0
   1f020:	60fb      	str	r3, [r7, #12]
    if (e->index == 1)
   1f022:	683b      	ldr	r3, [r7, #0]
   1f024:	7e1b      	ldrb	r3, [r3, #24]
   1f026:	2b01      	cmp	r3, #1
   1f028:	d116      	bne.n	1f058 <cosem_setValue+0x44>
    {
        if (e->value.byteArr != NULL && e->value.byteArr->size != 6)
   1f02a:	683b      	ldr	r3, [r7, #0]
   1f02c:	689b      	ldr	r3, [r3, #8]
   1f02e:	2b00      	cmp	r3, #0
   1f030:	d007      	beq.n	1f042 <cosem_setValue+0x2e>
   1f032:	683b      	ldr	r3, [r7, #0]
   1f034:	689b      	ldr	r3, [r3, #8]
   1f036:	88db      	ldrh	r3, [r3, #6]
   1f038:	2b06      	cmp	r3, #6
   1f03a:	d002      	beq.n	1f042 <cosem_setValue+0x2e>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1f03c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1f040:	e2a8      	b.n	1f594 <cosem_setValue+0x580>
        }
        memcpy(e->target->logicalName, e->value.byteArr, 6);
   1f042:	683b      	ldr	r3, [r7, #0]
   1f044:	695b      	ldr	r3, [r3, #20]
   1f046:	1d98      	adds	r0, r3, #6
   1f048:	683b      	ldr	r3, [r7, #0]
   1f04a:	689b      	ldr	r3, [r3, #8]
   1f04c:	2206      	movs	r2, #6
   1f04e:	4619      	mov	r1, r3
   1f050:	f00a fd17 	bl	29a82 <memcpy>
        return DLMS_ERROR_CODE_OK;
   1f054:	2300      	movs	r3, #0
   1f056:	e29d      	b.n	1f594 <cosem_setValue+0x580>
    }
    switch (e->target->objectType)
   1f058:	683b      	ldr	r3, [r7, #0]
   1f05a:	695b      	ldr	r3, [r3, #20]
   1f05c:	781b      	ldrb	r3, [r3, #0]
   1f05e:	3b01      	subs	r3, #1
   1f060:	2b72      	cmp	r3, #114	; 0x72
   1f062:	f200 8291 	bhi.w	1f588 <cosem_setValue+0x574>
   1f066:	a201      	add	r2, pc, #4	; (adr r2, 1f06c <cosem_setValue+0x58>)
   1f068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f06c:	0001f239 	.word	0x0001f239
   1f070:	0001f589 	.word	0x0001f589
   1f074:	0001f24d 	.word	0x0001f24d
   1f078:	0001f315 	.word	0x0001f315
   1f07c:	0001f2ed 	.word	0x0001f2ed
   1f080:	0001f42d 	.word	0x0001f42d
   1f084:	0001f419 	.word	0x0001f419
   1f088:	0001f261 	.word	0x0001f261
   1f08c:	0001f491 	.word	0x0001f491
   1f090:	0001f47d 	.word	0x0001f47d
   1f094:	0001f4a5 	.word	0x0001f4a5
   1f098:	0001f2b1 	.word	0x0001f2b1
   1f09c:	0001f589 	.word	0x0001f589
   1f0a0:	0001f589 	.word	0x0001f589
   1f0a4:	0001f29d 	.word	0x0001f29d
   1f0a8:	0001f589 	.word	0x0001f589
   1f0ac:	0001f469 	.word	0x0001f469
   1f0b0:	0001f3a1 	.word	0x0001f3a1
   1f0b4:	0001f365 	.word	0x0001f365
   1f0b8:	0001f289 	.word	0x0001f289
   1f0bc:	0001f441 	.word	0x0001f441
   1f0c0:	0001f275 	.word	0x0001f275
   1f0c4:	0001f351 	.word	0x0001f351
   1f0c8:	0001f591 	.word	0x0001f591
   1f0cc:	0001f38d 	.word	0x0001f38d
   1f0d0:	0001f591 	.word	0x0001f591
   1f0d4:	0001f3f1 	.word	0x0001f3f1
   1f0d8:	0001f2c5 	.word	0x0001f2c5
   1f0dc:	0001f2d9 	.word	0x0001f2d9
   1f0e0:	0001f509 	.word	0x0001f509
   1f0e4:	0001f589 	.word	0x0001f589
   1f0e8:	0001f589 	.word	0x0001f589
   1f0ec:	0001f589 	.word	0x0001f589
   1f0f0:	0001f589 	.word	0x0001f589
   1f0f4:	0001f589 	.word	0x0001f589
   1f0f8:	0001f589 	.word	0x0001f589
   1f0fc:	0001f589 	.word	0x0001f589
   1f100:	0001f589 	.word	0x0001f589
   1f104:	0001f589 	.word	0x0001f589
   1f108:	0001f4f5 	.word	0x0001f4f5
   1f10c:	0001f4b9 	.word	0x0001f4b9
   1f110:	0001f379 	.word	0x0001f379
   1f114:	0001f301 	.word	0x0001f301
   1f118:	0001f405 	.word	0x0001f405
   1f11c:	0001f329 	.word	0x0001f329
   1f120:	0001f589 	.word	0x0001f589
   1f124:	0001f561 	.word	0x0001f561
   1f128:	0001f589 	.word	0x0001f589
   1f12c:	0001f589 	.word	0x0001f589
   1f130:	0001f589 	.word	0x0001f589
   1f134:	0001f589 	.word	0x0001f589
   1f138:	0001f589 	.word	0x0001f589
   1f13c:	0001f589 	.word	0x0001f589
   1f140:	0001f589 	.word	0x0001f589
   1f144:	0001f589 	.word	0x0001f589
   1f148:	0001f589 	.word	0x0001f589
   1f14c:	0001f589 	.word	0x0001f589
   1f150:	0001f589 	.word	0x0001f589
   1f154:	0001f589 	.word	0x0001f589
   1f158:	0001f4e1 	.word	0x0001f4e1
   1f15c:	0001f455 	.word	0x0001f455
   1f160:	0001f575 	.word	0x0001f575
   1f164:	0001f591 	.word	0x0001f591
   1f168:	0001f33d 	.word	0x0001f33d
   1f16c:	0001f589 	.word	0x0001f589
   1f170:	0001f589 	.word	0x0001f589
   1f174:	0001f589 	.word	0x0001f589
   1f178:	0001f589 	.word	0x0001f589
   1f17c:	0001f589 	.word	0x0001f589
   1f180:	0001f3b5 	.word	0x0001f3b5
   1f184:	0001f3c9 	.word	0x0001f3c9
   1f188:	0001f3dd 	.word	0x0001f3dd
   1f18c:	0001f589 	.word	0x0001f589
   1f190:	0001f4cd 	.word	0x0001f4cd
   1f194:	0001f589 	.word	0x0001f589
   1f198:	0001f589 	.word	0x0001f589
   1f19c:	0001f589 	.word	0x0001f589
   1f1a0:	0001f589 	.word	0x0001f589
   1f1a4:	0001f589 	.word	0x0001f589
   1f1a8:	0001f589 	.word	0x0001f589
   1f1ac:	0001f589 	.word	0x0001f589
   1f1b0:	0001f589 	.word	0x0001f589
   1f1b4:	0001f589 	.word	0x0001f589
   1f1b8:	0001f589 	.word	0x0001f589
   1f1bc:	0001f589 	.word	0x0001f589
   1f1c0:	0001f589 	.word	0x0001f589
   1f1c4:	0001f589 	.word	0x0001f589
   1f1c8:	0001f589 	.word	0x0001f589
   1f1cc:	0001f589 	.word	0x0001f589
   1f1d0:	0001f589 	.word	0x0001f589
   1f1d4:	0001f589 	.word	0x0001f589
   1f1d8:	0001f589 	.word	0x0001f589
   1f1dc:	0001f589 	.word	0x0001f589
   1f1e0:	0001f589 	.word	0x0001f589
   1f1e4:	0001f589 	.word	0x0001f589
   1f1e8:	0001f589 	.word	0x0001f589
   1f1ec:	0001f589 	.word	0x0001f589
   1f1f0:	0001f589 	.word	0x0001f589
   1f1f4:	0001f589 	.word	0x0001f589
   1f1f8:	0001f589 	.word	0x0001f589
   1f1fc:	0001f591 	.word	0x0001f591
   1f200:	0001f591 	.word	0x0001f591
   1f204:	0001f591 	.word	0x0001f591
   1f208:	0001f591 	.word	0x0001f591
   1f20c:	0001f589 	.word	0x0001f589
   1f210:	0001f589 	.word	0x0001f589
   1f214:	0001f589 	.word	0x0001f589
   1f218:	0001f589 	.word	0x0001f589
   1f21c:	0001f589 	.word	0x0001f589
   1f220:	0001f589 	.word	0x0001f589
   1f224:	0001f511 	.word	0x0001f511
   1f228:	0001f525 	.word	0x0001f525
   1f22c:	0001f539 	.word	0x0001f539
   1f230:	0001f589 	.word	0x0001f589
   1f234:	0001f54d 	.word	0x0001f54d
    {
#ifndef DLMS_IGNORE_DATA
    case DLMS_OBJECT_TYPE_DATA:
        ret = cosem_setData((gxData*)e->target, e->index, &e->value);
   1f238:	683b      	ldr	r3, [r7, #0]
   1f23a:	6958      	ldr	r0, [r3, #20]
   1f23c:	683b      	ldr	r3, [r7, #0]
   1f23e:	7e1b      	ldrb	r3, [r3, #24]
   1f240:	683a      	ldr	r2, [r7, #0]
   1f242:	4619      	mov	r1, r3
   1f244:	f7f9 f81c 	bl	18280 <cosem_setData>
   1f248:	60f8      	str	r0, [r7, #12]
        break;
   1f24a:	e1a2      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_DATA
#ifndef DLMS_IGNORE_REGISTER
    case DLMS_OBJECT_TYPE_REGISTER:
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   1f24c:	683b      	ldr	r3, [r7, #0]
   1f24e:	6958      	ldr	r0, [r3, #20]
   1f250:	683b      	ldr	r3, [r7, #0]
   1f252:	7e1b      	ldrb	r3, [r3, #24]
   1f254:	683a      	ldr	r2, [r7, #0]
   1f256:	4619      	mov	r1, r3
   1f258:	f7f9 f82a 	bl	182b0 <cosem_setRegister>
   1f25c:	60f8      	str	r0, [r7, #12]
        break;
   1f25e:	e198      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_REGISTER
#ifndef DLMS_IGNORE_CLOCK
    case DLMS_OBJECT_TYPE_CLOCK:
        ret = cosem_setClock((gxClock*)e->target, e->index, &e->value);
   1f260:	683b      	ldr	r3, [r7, #0]
   1f262:	6958      	ldr	r0, [r3, #20]
   1f264:	683b      	ldr	r3, [r7, #0]
   1f266:	7e1b      	ldrb	r3, [r3, #24]
   1f268:	683a      	ldr	r2, [r7, #0]
   1f26a:	4619      	mov	r1, r3
   1f26c:	f7f9 f8c6 	bl	183fc <cosem_setClock>
   1f270:	60f8      	str	r0, [r7, #12]
        break;
   1f272:	e18e      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_ACTION_SCHEDULE
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        ret = cosem_setActionSchedule((gxActionSchedule*)e->target, e->index, &e->value);
   1f274:	683b      	ldr	r3, [r7, #0]
   1f276:	6958      	ldr	r0, [r3, #20]
   1f278:	683b      	ldr	r3, [r7, #0]
   1f27a:	7e1b      	ldrb	r3, [r3, #24]
   1f27c:	683a      	ldr	r2, [r7, #0]
   1f27e:	4619      	mov	r1, r3
   1f280:	f7f9 fd14 	bl	18cac <cosem_setActionSchedule>
   1f284:	60f8      	str	r0, [r7, #12]
        break;
   1f286:	e184      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = cosem_setActivityCalendar((gxActivityCalendar*)e->target, e->index, &e->value);
   1f288:	683b      	ldr	r3, [r7, #0]
   1f28a:	6958      	ldr	r0, [r3, #20]
   1f28c:	683b      	ldr	r3, [r7, #0]
   1f28e:	7e1b      	ldrb	r3, [r3, #24]
   1f290:	683a      	ldr	r2, [r7, #0]
   1f292:	4619      	mov	r1, r3
   1f294:	f7f9 fc42 	bl	18b1c <cosem_setActivityCalendar>
   1f298:	60f8      	str	r0, [r7, #12]
        break;
   1f29a:	e17a      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   1f29c:	683b      	ldr	r3, [r7, #0]
   1f29e:	6959      	ldr	r1, [r3, #20]
   1f2a0:	683b      	ldr	r3, [r7, #0]
   1f2a2:	7e1a      	ldrb	r2, [r3, #24]
   1f2a4:	683b      	ldr	r3, [r7, #0]
   1f2a6:	6878      	ldr	r0, [r7, #4]
   1f2a8:	f7f9 fde4 	bl	18e74 <cosem_setAssociationLogicalName>
   1f2ac:	60f8      	str	r0, [r7, #12]
        break;
   1f2ae:	e170      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   1f2b0:	683b      	ldr	r3, [r7, #0]
   1f2b2:	6959      	ldr	r1, [r3, #20]
   1f2b4:	683b      	ldr	r3, [r7, #0]
   1f2b6:	7e1a      	ldrb	r2, [r3, #24]
   1f2b8:	683b      	ldr	r3, [r7, #0]
   1f2ba:	6878      	ldr	r0, [r7, #4]
   1f2bc:	f7fa fd2a 	bl	19d14 <cosem_setAssociationShortName>
   1f2c0:	60f8      	str	r0, [r7, #12]
        break;
   1f2c2:	e166      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
#ifndef DLMS_IGNORE_AUTO_ANSWER
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   1f2c4:	683b      	ldr	r3, [r7, #0]
   1f2c6:	6958      	ldr	r0, [r3, #20]
   1f2c8:	683b      	ldr	r3, [r7, #0]
   1f2ca:	7e1b      	ldrb	r3, [r3, #24]
   1f2cc:	683a      	ldr	r2, [r7, #0]
   1f2ce:	4619      	mov	r1, r3
   1f2d0:	f7fa fe08 	bl	19ee4 <cosem_setAutoAnswer>
   1f2d4:	60f8      	str	r0, [r7, #12]
        break;
   1f2d6:	e15c      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_AUTO_ANSWER
#ifndef DLMS_IGNORE_AUTO_CONNECT
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   1f2d8:	683b      	ldr	r3, [r7, #0]
   1f2da:	6958      	ldr	r0, [r3, #20]
   1f2dc:	683b      	ldr	r3, [r7, #0]
   1f2de:	7e1b      	ldrb	r3, [r3, #24]
   1f2e0:	683a      	ldr	r2, [r7, #0]
   1f2e2:	4619      	mov	r1, r3
   1f2e4:	f7fa fef6 	bl	1a0d4 <cosem_setAutoConnect>
   1f2e8:	60f8      	str	r0, [r7, #12]
        break;
   1f2ea:	e152      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   1f2ec:	683b      	ldr	r3, [r7, #0]
   1f2ee:	6958      	ldr	r0, [r3, #20]
   1f2f0:	683b      	ldr	r3, [r7, #0]
   1f2f2:	7e1b      	ldrb	r3, [r3, #24]
   1f2f4:	683a      	ldr	r2, [r7, #0]
   1f2f6:	4619      	mov	r1, r3
   1f2f8:	f7fb f800 	bl	1a2fc <cosem_setDemandRegister>
   1f2fc:	60f8      	str	r0, [r7, #12]
        break;
   1f2fe:	e148      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_DEMAND_REGISTER
#ifndef DLMS_IGNORE_MAC_ADDRESS_SETUP
    case DLMS_OBJECT_TYPE_MAC_ADDRESS_SETUP:
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   1f300:	683b      	ldr	r3, [r7, #0]
   1f302:	6958      	ldr	r0, [r3, #20]
   1f304:	683b      	ldr	r3, [r7, #0]
   1f306:	7e1b      	ldrb	r3, [r3, #24]
   1f308:	683a      	ldr	r2, [r7, #0]
   1f30a:	4619      	mov	r1, r3
   1f30c:	f7fb f928 	bl	1a560 <cosem_setMacAddressSetup>
   1f310:	60f8      	str	r0, [r7, #12]
        break;
   1f312:	e13e      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MAC_ADDRESS_SETUP
#ifndef DLMS_IGNORE_EXTENDED_REGISTER
    case DLMS_OBJECT_TYPE_EXTENDED_REGISTER:
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   1f314:	683b      	ldr	r3, [r7, #0]
   1f316:	6958      	ldr	r0, [r3, #20]
   1f318:	683b      	ldr	r3, [r7, #0]
   1f31a:	7e1b      	ldrb	r3, [r3, #24]
   1f31c:	683a      	ldr	r2, [r7, #0]
   1f31e:	4619      	mov	r1, r3
   1f320:	f7fb f946 	bl	1a5b0 <cosem_setExtendedRegister>
   1f324:	60f8      	str	r0, [r7, #12]
        break;
   1f326:	e134      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_EXTENDED_REGISTER
#ifndef DLMS_IGNORE_GPRS_SETUP
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   1f328:	683b      	ldr	r3, [r7, #0]
   1f32a:	6958      	ldr	r0, [r3, #20]
   1f32c:	683b      	ldr	r3, [r7, #0]
   1f32e:	7e1b      	ldrb	r3, [r3, #24]
   1f330:	683a      	ldr	r2, [r7, #0]
   1f332:	4619      	mov	r1, r3
   1f334:	f7fb f9cc 	bl	1a6d0 <cosem_setGprsSetup>
   1f338:	60f8      	str	r0, [r7, #12]
        break;
   1f33a:	e12a      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_GPRS_SETUP
#ifndef DLMS_IGNORE_SECURITY_SETUP
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   1f33c:	683b      	ldr	r3, [r7, #0]
   1f33e:	6958      	ldr	r0, [r3, #20]
   1f340:	683b      	ldr	r3, [r7, #0]
   1f342:	7e1b      	ldrb	r3, [r3, #24]
   1f344:	683a      	ldr	r2, [r7, #0]
   1f346:	4619      	mov	r1, r3
   1f348:	f7fb fb08 	bl	1a95c <cosem_setSecuritySetup>
   1f34c:	60f8      	str	r0, [r7, #12]
        break;
   1f34e:	e120      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_SECURITY_SETUP
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_HDLC_SETUP:
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   1f350:	683b      	ldr	r3, [r7, #0]
   1f352:	6958      	ldr	r0, [r3, #20]
   1f354:	683b      	ldr	r3, [r7, #0]
   1f356:	7e1b      	ldrb	r3, [r3, #24]
   1f358:	683a      	ldr	r2, [r7, #0]
   1f35a:	4619      	mov	r1, r3
   1f35c:	f7fb fcce 	bl	1acfc <cosem_setIecHdlcSetup>
   1f360:	60f8      	str	r0, [r7, #12]
        break;
   1f362:	e116      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_IEC_LOCAL_PORT_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   1f364:	683b      	ldr	r3, [r7, #0]
   1f366:	6958      	ldr	r0, [r3, #20]
   1f368:	683b      	ldr	r3, [r7, #0]
   1f36a:	7e1b      	ldrb	r3, [r3, #24]
   1f36c:	683a      	ldr	r2, [r7, #0]
   1f36e:	4619      	mov	r1, r3
   1f370:	f7fb fd2c 	bl	1adcc <cosem_setIecLocalPortSetup>
   1f374:	60f8      	str	r0, [r7, #12]
        break;
   1f376:	e10c      	b.n	1f592 <cosem_setValue+0x57e>
#endif
        break;
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP
#ifndef DLMS_IGNORE_IP4_SETUP
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        ret = cosem_setIP4Setup((gxIp4Setup*)e->target, e->index, &e->value);
   1f378:	683b      	ldr	r3, [r7, #0]
   1f37a:	6958      	ldr	r0, [r3, #20]
   1f37c:	683b      	ldr	r3, [r7, #0]
   1f37e:	7e1b      	ldrb	r3, [r3, #24]
   1f380:	683a      	ldr	r2, [r7, #0]
   1f382:	4619      	mov	r1, r3
   1f384:	f7fb fdc6 	bl	1af14 <cosem_setIP4Setup>
   1f388:	60f8      	str	r0, [r7, #12]
        break;
   1f38a:	e102      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_IP4_SETUP
#ifndef DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   1f38c:	683b      	ldr	r3, [r7, #0]
   1f38e:	6958      	ldr	r0, [r3, #20]
   1f390:	683b      	ldr	r3, [r7, #0]
   1f392:	7e1b      	ldrb	r3, [r3, #24]
   1f394:	683a      	ldr	r2, [r7, #0]
   1f396:	4619      	mov	r1, r3
   1f398:	f7fb fede 	bl	1b158 <cosem_setMbusSlavePortSetup>
   1f39c:	60f8      	str	r0, [r7, #12]
        break;
   1f39e:	e0f8      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MBUS_SLAVE_PORT_SETUP
#ifndef DLMS_IGNORE_IMAGE_TRANSFER
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   1f3a0:	683b      	ldr	r3, [r7, #0]
   1f3a2:	6958      	ldr	r0, [r3, #20]
   1f3a4:	683b      	ldr	r3, [r7, #0]
   1f3a6:	7e1b      	ldrb	r3, [r3, #24]
   1f3a8:	683a      	ldr	r2, [r7, #0]
   1f3aa:	4619      	mov	r1, r3
   1f3ac:	f7fe fc24 	bl	1dbf8 <cosem_setImageTransfer>
   1f3b0:	60f8      	str	r0, [r7, #12]
        break;
   1f3b2:	e0ee      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_IMAGE_TRANSFER
#ifndef DLMS_IGNORE_DISCONNECT_CONTROL
    case DLMS_OBJECT_TYPE_DISCONNECT_CONTROL:
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   1f3b4:	683b      	ldr	r3, [r7, #0]
   1f3b6:	6958      	ldr	r0, [r3, #20]
   1f3b8:	683b      	ldr	r3, [r7, #0]
   1f3ba:	7e1b      	ldrb	r3, [r3, #24]
   1f3bc:	683a      	ldr	r2, [r7, #0]
   1f3be:	4619      	mov	r1, r3
   1f3c0:	f7fb ff06 	bl	1b1d0 <cosem_setDisconnectControl>
   1f3c4:	60f8      	str	r0, [r7, #12]
        break;
   1f3c6:	e0e4      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   1f3c8:	683b      	ldr	r3, [r7, #0]
   1f3ca:	6959      	ldr	r1, [r3, #20]
   1f3cc:	683b      	ldr	r3, [r7, #0]
   1f3ce:	7e1a      	ldrb	r2, [r3, #24]
   1f3d0:	683b      	ldr	r3, [r7, #0]
   1f3d2:	6878      	ldr	r0, [r7, #4]
   1f3d4:	f7fb ff2a 	bl	1b22c <cosem_setLimiter>
   1f3d8:	60f8      	str	r0, [r7, #12]
        break;
   1f3da:	e0da      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = cosem_setmMbusClient((gxMBusClient*)e->target, e->index, &e->value);
   1f3dc:	683b      	ldr	r3, [r7, #0]
   1f3de:	6958      	ldr	r0, [r3, #20]
   1f3e0:	683b      	ldr	r3, [r7, #0]
   1f3e2:	7e1b      	ldrb	r3, [r3, #24]
   1f3e4:	683a      	ldr	r2, [r7, #0]
   1f3e6:	4619      	mov	r1, r3
   1f3e8:	f7fc f8dc 	bl	1b5a4 <cosem_setmMbusClient>
   1f3ec:	60f8      	str	r0, [r7, #12]
        break;
   1f3ee:	e0d0      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MBUS_CLIENT
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
    case DLMS_OBJECT_TYPE_MODEM_CONFIGURATION:
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   1f3f0:	683b      	ldr	r3, [r7, #0]
   1f3f2:	6958      	ldr	r0, [r3, #20]
   1f3f4:	683b      	ldr	r3, [r7, #0]
   1f3f6:	7e1b      	ldrb	r3, [r3, #24]
   1f3f8:	683a      	ldr	r2, [r7, #0]
   1f3fa:	4619      	mov	r1, r3
   1f3fc:	f7fc f9e0 	bl	1b7c0 <cosem_setModemConfiguration>
   1f400:	60f8      	str	r0, [r7, #12]
        break;
   1f402:	e0c6      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
    case DLMS_OBJECT_TYPE_PPP_SETUP:
        ret = cosem_setPppSetup((gxPppSetup*)e->target, e->index, &e->value);
   1f404:	683b      	ldr	r3, [r7, #0]
   1f406:	6958      	ldr	r0, [r3, #20]
   1f408:	683b      	ldr	r3, [r7, #0]
   1f40a:	7e1b      	ldrb	r3, [r3, #24]
   1f40c:	683a      	ldr	r2, [r7, #0]
   1f40e:	4619      	mov	r1, r3
   1f410:	f7fc fabc 	bl	1b98c <cosem_setPppSetup>
   1f414:	60f8      	str	r0, [r7, #12]
        break;
   1f416:	e0bc      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_PROFILE_GENERIC
    case DLMS_OBJECT_TYPE_PROFILE_GENERIC:
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   1f418:	683b      	ldr	r3, [r7, #0]
   1f41a:	6959      	ldr	r1, [r3, #20]
   1f41c:	683b      	ldr	r3, [r7, #0]
   1f41e:	7e1a      	ldrb	r2, [r3, #24]
   1f420:	683b      	ldr	r3, [r7, #0]
   1f422:	6878      	ldr	r0, [r7, #4]
   1f424:	f7fe fdb4 	bl	1df90 <cosem_setProfileGeneric>
   1f428:	60f8      	str	r0, [r7, #12]
        break;
   1f42a:	e0b2      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
    case DLMS_OBJECT_TYPE_REGISTER_ACTIVATION:
        ret = cosem_setRegisterActivation((gxRegisterActivation*)e->target, e->index, &e->value);
   1f42c:	683b      	ldr	r3, [r7, #0]
   1f42e:	6958      	ldr	r0, [r3, #20]
   1f430:	683b      	ldr	r3, [r7, #0]
   1f432:	7e1b      	ldrb	r3, [r3, #24]
   1f434:	683a      	ldr	r2, [r7, #0]
   1f436:	4619      	mov	r1, r3
   1f438:	f7fc fc2e 	bl	1bc98 <cosem_setRegisterActivation>
   1f43c:	60f8      	str	r0, [r7, #12]
        break;
   1f43e:	e0a8      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_REGISTER_MONITOR
    case DLMS_OBJECT_TYPE_REGISTER_MONITOR:
        ret = cosem_setRegisterMonitor((gxRegisterMonitor*)e->target, e->index, &e->value);
   1f440:	683b      	ldr	r3, [r7, #0]
   1f442:	6958      	ldr	r0, [r3, #20]
   1f444:	683b      	ldr	r3, [r7, #0]
   1f446:	7e1b      	ldrb	r3, [r3, #24]
   1f448:	683a      	ldr	r2, [r7, #0]
   1f44a:	4619      	mov	r1, r3
   1f44c:	f7fc fd3e 	bl	1becc <cosem_setRegisterMonitor>
   1f450:	60f8      	str	r0, [r7, #12]
        break;
   1f452:	e09e      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_REGISTER_TABLE
    case DLMS_OBJECT_TYPE_REGISTER_TABLE:
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   1f454:	683b      	ldr	r3, [r7, #0]
   1f456:	6958      	ldr	r0, [r3, #20]
   1f458:	683b      	ldr	r3, [r7, #0]
   1f45a:	7e1b      	ldrb	r3, [r3, #24]
   1f45c:	683a      	ldr	r2, [r7, #0]
   1f45e:	4619      	mov	r1, r3
   1f460:	f7f8 ff7c 	bl	1835c <cosem_setRegistertable>
   1f464:	60f8      	str	r0, [r7, #12]
        break;
   1f466:	e094      	b.n	1f592 <cosem_setValue+0x57e>
#endif
        break;
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
    case DLMS_OBJECT_TYPE_SAP_ASSIGNMENT:
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   1f468:	683b      	ldr	r3, [r7, #0]
   1f46a:	6958      	ldr	r0, [r3, #20]
   1f46c:	683b      	ldr	r3, [r7, #0]
   1f46e:	7e1b      	ldrb	r3, [r3, #24]
   1f470:	683a      	ldr	r2, [r7, #0]
   1f472:	4619      	mov	r1, r3
   1f474:	f7fc fe7e 	bl	1c174 <cosem_setSapAssignment>
   1f478:	60f8      	str	r0, [r7, #12]
        break;
   1f47a:	e08a      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_SAP_ASSIGNMENT
#ifndef DLMS_IGNORE_SCHEDULE
    case DLMS_OBJECT_TYPE_SCHEDULE:
        ret = cosem_setSchedule((gxSchedule*)e->target, e->index, &e->value);
   1f47c:	683b      	ldr	r3, [r7, #0]
   1f47e:	6958      	ldr	r0, [r3, #20]
   1f480:	683b      	ldr	r3, [r7, #0]
   1f482:	7e1b      	ldrb	r3, [r3, #24]
   1f484:	683a      	ldr	r2, [r7, #0]
   1f486:	4619      	mov	r1, r3
   1f488:	f7fc feec 	bl	1c264 <cosem_setSchedule>
   1f48c:	60f8      	str	r0, [r7, #12]
        break;
   1f48e:	e080      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_SCHEDULE
#ifndef DLMS_IGNORE_SCRIPT_TABLE
    case DLMS_OBJECT_TYPE_SCRIPT_TABLE:
        ret = cosem_setScriptTable((gxScriptTable*)e->target, e->index, &e->value);
   1f490:	683b      	ldr	r3, [r7, #0]
   1f492:	6958      	ldr	r0, [r3, #20]
   1f494:	683b      	ldr	r3, [r7, #0]
   1f496:	7e1b      	ldrb	r3, [r3, #24]
   1f498:	683a      	ldr	r2, [r7, #0]
   1f49a:	4619      	mov	r1, r3
   1f49c:	f7fd f844 	bl	1c528 <cosem_setScriptTable>
   1f4a0:	60f8      	str	r0, [r7, #12]
        break;
   1f4a2:	e076      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_SCRIPT_TABLE
#ifndef DLMS_IGNORE_SPECIAL_DAYS_TABLE
    case DLMS_OBJECT_TYPE_SPECIAL_DAYS_TABLE:
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   1f4a4:	683b      	ldr	r3, [r7, #0]
   1f4a6:	6958      	ldr	r0, [r3, #20]
   1f4a8:	683b      	ldr	r3, [r7, #0]
   1f4aa:	7e1b      	ldrb	r3, [r3, #24]
   1f4ac:	683a      	ldr	r2, [r7, #0]
   1f4ae:	4619      	mov	r1, r3
   1f4b0:	f7fd fa18 	bl	1c8e4 <cosem_setSpecialDaysTable>
   1f4b4:	60f8      	str	r0, [r7, #12]
        break;
   1f4b6:	e06c      	b.n	1f592 <cosem_setValue+0x57e>
#endif
        break;
#endif //DLMS_IGNORE_STATUS_MAPPING
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        ret = cosem_setTcpUdpSetup((gxTcpUdpSetup*)e->target, e->index, &e->value);
   1f4b8:	683b      	ldr	r3, [r7, #0]
   1f4ba:	6958      	ldr	r0, [r3, #20]
   1f4bc:	683b      	ldr	r3, [r7, #0]
   1f4be:	7e1b      	ldrb	r3, [r3, #24]
   1f4c0:	683a      	ldr	r2, [r7, #0]
   1f4c2:	4619      	mov	r1, r3
   1f4c4:	f7fd faac 	bl	1ca20 <cosem_setTcpUdpSetup>
   1f4c8:	60f8      	str	r0, [r7, #12]
        break;
   1f4ca:	e062      	b.n	1f592 <cosem_setValue+0x57e>
#endif
        break;
#endif //DLMS_IGNORE_UTILITY_TABLES
#ifndef DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   1f4cc:	683b      	ldr	r3, [r7, #0]
   1f4ce:	6958      	ldr	r0, [r3, #20]
   1f4d0:	683b      	ldr	r3, [r7, #0]
   1f4d2:	7e1b      	ldrb	r3, [r3, #24]
   1f4d4:	683a      	ldr	r2, [r7, #0]
   1f4d6:	4619      	mov	r1, r3
   1f4d8:	f7fd faf8 	bl	1cacc <cosem_setMbusMasterPortSetup>
   1f4dc:	60f8      	str	r0, [r7, #12]
        break;
   1f4de:	e058      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MBUS_MASTER_PORT_SETUP
#ifndef DLMS_IGNORE_MESSAGE_HANDLER
    case DLMS_OBJECT_TYPE_MESSAGE_HANDLER:
        ret = cosem_setMessageHandler((gxMessageHandler*)e->target, e->index, &e->value);
   1f4e0:	683b      	ldr	r3, [r7, #0]
   1f4e2:	6958      	ldr	r0, [r3, #20]
   1f4e4:	683b      	ldr	r3, [r7, #0]
   1f4e6:	7e1b      	ldrb	r3, [r3, #24]
   1f4e8:	683a      	ldr	r2, [r7, #0]
   1f4ea:	4619      	mov	r1, r3
   1f4ec:	f7fd fb08 	bl	1cb00 <cosem_setMessageHandler>
   1f4f0:	60f8      	str	r0, [r7, #12]
        break;
   1f4f2:	e04e      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_MESSAGE_HANDLER
#ifndef DLMS_IGNORE_PUSH_SETUP
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   1f4f4:	683b      	ldr	r3, [r7, #0]
   1f4f6:	6959      	ldr	r1, [r3, #20]
   1f4f8:	683b      	ldr	r3, [r7, #0]
   1f4fa:	7e1a      	ldrb	r2, [r3, #24]
   1f4fc:	683b      	ldr	r3, [r7, #0]
   1f4fe:	6878      	ldr	r0, [r7, #4]
   1f500:	f7fd fbfa 	bl	1ccf8 <cosem_setPushSetup>
   1f504:	60f8      	str	r0, [r7, #12]
        break;
   1f506:	e044      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_PUSH_SETUP
#ifndef DLMS_IGNORE_DATA_PROTECTION
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1f508:	f44f 7381 	mov.w	r3, #258	; 0x102
   1f50c:	60fb      	str	r3, [r7, #12]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        break;
   1f50e:	e040      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_DATA_PROTECTION
#ifndef DLMS_IGNORE_ACCOUNT
    case DLMS_OBJECT_TYPE_ACCOUNT:
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   1f510:	683b      	ldr	r3, [r7, #0]
   1f512:	6958      	ldr	r0, [r3, #20]
   1f514:	683b      	ldr	r3, [r7, #0]
   1f516:	7e1b      	ldrb	r3, [r3, #24]
   1f518:	683a      	ldr	r2, [r7, #0]
   1f51a:	4619      	mov	r1, r3
   1f51c:	f7fe f870 	bl	1d600 <cosem_setAccount>
   1f520:	60f8      	str	r0, [r7, #12]
        break;
   1f522:	e036      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_CREDIT
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   1f524:	683b      	ldr	r3, [r7, #0]
   1f526:	6958      	ldr	r0, [r3, #20]
   1f528:	683b      	ldr	r3, [r7, #0]
   1f52a:	7e1b      	ldrb	r3, [r3, #24]
   1f52c:	683a      	ldr	r2, [r7, #0]
   1f52e:	4619      	mov	r1, r3
   1f530:	f7fd ffce 	bl	1d4d0 <cosem_setCredit>
   1f534:	60f8      	str	r0, [r7, #12]
        break;
   1f536:	e02c      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_CREDIT
#ifndef DLMS_IGNORE_CHARGE
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = cosem_setCharge((gxCharge*)e->target, e->index, &e->value);
   1f538:	683b      	ldr	r3, [r7, #0]
   1f53a:	6958      	ldr	r0, [r3, #20]
   1f53c:	683b      	ldr	r3, [r7, #0]
   1f53e:	7e1b      	ldrb	r3, [r3, #24]
   1f540:	683a      	ldr	r2, [r7, #0]
   1f542:	4619      	mov	r1, r3
   1f544:	f7fd fede 	bl	1d304 <cosem_setCharge>
   1f548:	60f8      	str	r0, [r7, #12]
        break;
   1f54a:	e022      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_CHARGE
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   1f54c:	683b      	ldr	r3, [r7, #0]
   1f54e:	6958      	ldr	r0, [r3, #20]
   1f550:	683b      	ldr	r3, [r7, #0]
   1f552:	7e1b      	ldrb	r3, [r3, #24]
   1f554:	683a      	ldr	r2, [r7, #0]
   1f556:	4619      	mov	r1, r3
   1f558:	f7ff f948 	bl	1e7ec <cosem_setTokenGateway>
   1f55c:	60f8      	str	r0, [r7, #12]
        break;
   1f55e:	e018      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_TOKEN_GATEWAY
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   1f560:	683b      	ldr	r3, [r7, #0]
   1f562:	6958      	ldr	r0, [r3, #20]
   1f564:	683b      	ldr	r3, [r7, #0]
   1f566:	7e1b      	ldrb	r3, [r3, #24]
   1f568:	683a      	ldr	r2, [r7, #0]
   1f56a:	4619      	mov	r1, r3
   1f56c:	f7fe ff52 	bl	1e414 <cosem_setGsmDiagnostic>
   1f570:	60f8      	str	r0, [r7, #12]
        break;
   1f572:	e00e      	b.n	1f592 <cosem_setValue+0x57e>
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_COMPACT_DATA
    case DLMS_OBJECT_TYPE_COMPACT_DATA:
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   1f574:	683b      	ldr	r3, [r7, #0]
   1f576:	6959      	ldr	r1, [r3, #20]
   1f578:	683b      	ldr	r3, [r7, #0]
   1f57a:	7e1a      	ldrb	r2, [r3, #24]
   1f57c:	683b      	ldr	r3, [r7, #0]
   1f57e:	6878      	ldr	r0, [r7, #4]
   1f580:	f7ff fcc8 	bl	1ef14 <cosem_setCompactData>
   1f584:	60f8      	str	r0, [r7, #12]
        break;
   1f586:	e004      	b.n	1f592 <cosem_setValue+0x57e>
        ret = cosem_setTariffPlan((gxTariffPlan*)e->target, e->index, &e->value);
        break;
#endif //DLMS_ITALIAN_STANDARD
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1f588:	f44f 7381 	mov.w	r3, #258	; 0x102
   1f58c:	60fb      	str	r3, [r7, #12]
   1f58e:	e000      	b.n	1f592 <cosem_setValue+0x57e>
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        //TODO:
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        break;
   1f590:	bf00      	nop
#endif //DLMS_ITALIAN_STANDARD
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
   1f592:	68fb      	ldr	r3, [r7, #12]
}
   1f594:	4618      	mov	r0, r3
   1f596:	3710      	adds	r7, #16
   1f598:	46bd      	mov	sp, r7
   1f59a:	bd80      	pop	{r7, pc}

0001f59c <gxsha1_transform>:

/*
* Hash block is a single 512-bit block.
*/
void gxsha1_transform(unsigned long *block, unsigned int *digest, unsigned int *transforms)
{
   1f59c:	b480      	push	{r7}
   1f59e:	b08b      	sub	sp, #44	; 0x2c
   1f5a0:	af00      	add	r7, sp, #0
   1f5a2:	60f8      	str	r0, [r7, #12]
   1f5a4:	60b9      	str	r1, [r7, #8]
   1f5a6:	607a      	str	r2, [r7, #4]
    unsigned int a = digest[0];
   1f5a8:	68bb      	ldr	r3, [r7, #8]
   1f5aa:	681b      	ldr	r3, [r3, #0]
   1f5ac:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int b = digest[1];
   1f5ae:	68bb      	ldr	r3, [r7, #8]
   1f5b0:	685b      	ldr	r3, [r3, #4]
   1f5b2:	623b      	str	r3, [r7, #32]
    unsigned int c = digest[2];
   1f5b4:	68bb      	ldr	r3, [r7, #8]
   1f5b6:	689b      	ldr	r3, [r3, #8]
   1f5b8:	61fb      	str	r3, [r7, #28]
    unsigned int d = digest[3];
   1f5ba:	68bb      	ldr	r3, [r7, #8]
   1f5bc:	68db      	ldr	r3, [r3, #12]
   1f5be:	61bb      	str	r3, [r7, #24]
    unsigned int e = digest[4];
   1f5c0:	68bb      	ldr	r3, [r7, #8]
   1f5c2:	691b      	ldr	r3, [r3, #16]
   1f5c4:	617b      	str	r3, [r7, #20]

    SHA1_R0(a, b, c, d, e, 0);
   1f5c6:	69fa      	ldr	r2, [r7, #28]
   1f5c8:	69bb      	ldr	r3, [r7, #24]
   1f5ca:	405a      	eors	r2, r3
   1f5cc:	6a3b      	ldr	r3, [r7, #32]
   1f5ce:	401a      	ands	r2, r3
   1f5d0:	69bb      	ldr	r3, [r7, #24]
   1f5d2:	405a      	eors	r2, r3
   1f5d4:	68fb      	ldr	r3, [r7, #12]
   1f5d6:	681b      	ldr	r3, [r3, #0]
   1f5d8:	441a      	add	r2, r3
   1f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5dc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f5e0:	441a      	add	r2, r3
   1f5e2:	697b      	ldr	r3, [r7, #20]
   1f5e4:	441a      	add	r2, r3
   1f5e6:	4ba9      	ldr	r3, [pc, #676]	; (1f88c <gxsha1_transform+0x2f0>)
   1f5e8:	4413      	add	r3, r2
   1f5ea:	617b      	str	r3, [r7, #20]
   1f5ec:	6a3b      	ldr	r3, [r7, #32]
   1f5ee:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f5f2:	623b      	str	r3, [r7, #32]
    SHA1_R0(e, a, b, c, d, 1);
   1f5f4:	6a3a      	ldr	r2, [r7, #32]
   1f5f6:	69fb      	ldr	r3, [r7, #28]
   1f5f8:	405a      	eors	r2, r3
   1f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5fc:	401a      	ands	r2, r3
   1f5fe:	69fb      	ldr	r3, [r7, #28]
   1f600:	405a      	eors	r2, r3
   1f602:	68fb      	ldr	r3, [r7, #12]
   1f604:	3304      	adds	r3, #4
   1f606:	681b      	ldr	r3, [r3, #0]
   1f608:	441a      	add	r2, r3
   1f60a:	697b      	ldr	r3, [r7, #20]
   1f60c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f610:	441a      	add	r2, r3
   1f612:	69bb      	ldr	r3, [r7, #24]
   1f614:	441a      	add	r2, r3
   1f616:	4b9d      	ldr	r3, [pc, #628]	; (1f88c <gxsha1_transform+0x2f0>)
   1f618:	4413      	add	r3, r2
   1f61a:	61bb      	str	r3, [r7, #24]
   1f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f61e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f622:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R0(d, e, a, b, c, 2);
   1f624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f626:	6a3b      	ldr	r3, [r7, #32]
   1f628:	405a      	eors	r2, r3
   1f62a:	697b      	ldr	r3, [r7, #20]
   1f62c:	401a      	ands	r2, r3
   1f62e:	6a3b      	ldr	r3, [r7, #32]
   1f630:	405a      	eors	r2, r3
   1f632:	68fb      	ldr	r3, [r7, #12]
   1f634:	3308      	adds	r3, #8
   1f636:	681b      	ldr	r3, [r3, #0]
   1f638:	441a      	add	r2, r3
   1f63a:	69bb      	ldr	r3, [r7, #24]
   1f63c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f640:	441a      	add	r2, r3
   1f642:	69fb      	ldr	r3, [r7, #28]
   1f644:	441a      	add	r2, r3
   1f646:	4b91      	ldr	r3, [pc, #580]	; (1f88c <gxsha1_transform+0x2f0>)
   1f648:	4413      	add	r3, r2
   1f64a:	61fb      	str	r3, [r7, #28]
   1f64c:	697b      	ldr	r3, [r7, #20]
   1f64e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f652:	617b      	str	r3, [r7, #20]
    SHA1_R0(c, d, e, a, b, 3);
   1f654:	697a      	ldr	r2, [r7, #20]
   1f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f658:	405a      	eors	r2, r3
   1f65a:	69bb      	ldr	r3, [r7, #24]
   1f65c:	401a      	ands	r2, r3
   1f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f660:	405a      	eors	r2, r3
   1f662:	68fb      	ldr	r3, [r7, #12]
   1f664:	330c      	adds	r3, #12
   1f666:	681b      	ldr	r3, [r3, #0]
   1f668:	441a      	add	r2, r3
   1f66a:	69fb      	ldr	r3, [r7, #28]
   1f66c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f670:	441a      	add	r2, r3
   1f672:	6a3b      	ldr	r3, [r7, #32]
   1f674:	441a      	add	r2, r3
   1f676:	4b85      	ldr	r3, [pc, #532]	; (1f88c <gxsha1_transform+0x2f0>)
   1f678:	4413      	add	r3, r2
   1f67a:	623b      	str	r3, [r7, #32]
   1f67c:	69bb      	ldr	r3, [r7, #24]
   1f67e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f682:	61bb      	str	r3, [r7, #24]
    SHA1_R0(b, c, d, e, a, 4);
   1f684:	69ba      	ldr	r2, [r7, #24]
   1f686:	697b      	ldr	r3, [r7, #20]
   1f688:	405a      	eors	r2, r3
   1f68a:	69fb      	ldr	r3, [r7, #28]
   1f68c:	401a      	ands	r2, r3
   1f68e:	697b      	ldr	r3, [r7, #20]
   1f690:	405a      	eors	r2, r3
   1f692:	68fb      	ldr	r3, [r7, #12]
   1f694:	3310      	adds	r3, #16
   1f696:	681b      	ldr	r3, [r3, #0]
   1f698:	441a      	add	r2, r3
   1f69a:	6a3b      	ldr	r3, [r7, #32]
   1f69c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f6a0:	441a      	add	r2, r3
   1f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6a4:	441a      	add	r2, r3
   1f6a6:	4b79      	ldr	r3, [pc, #484]	; (1f88c <gxsha1_transform+0x2f0>)
   1f6a8:	4413      	add	r3, r2
   1f6aa:	627b      	str	r3, [r7, #36]	; 0x24
   1f6ac:	69fb      	ldr	r3, [r7, #28]
   1f6ae:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f6b2:	61fb      	str	r3, [r7, #28]
    SHA1_R0(a, b, c, d, e, 5);
   1f6b4:	69fa      	ldr	r2, [r7, #28]
   1f6b6:	69bb      	ldr	r3, [r7, #24]
   1f6b8:	405a      	eors	r2, r3
   1f6ba:	6a3b      	ldr	r3, [r7, #32]
   1f6bc:	401a      	ands	r2, r3
   1f6be:	69bb      	ldr	r3, [r7, #24]
   1f6c0:	405a      	eors	r2, r3
   1f6c2:	68fb      	ldr	r3, [r7, #12]
   1f6c4:	3314      	adds	r3, #20
   1f6c6:	681b      	ldr	r3, [r3, #0]
   1f6c8:	441a      	add	r2, r3
   1f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6cc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f6d0:	441a      	add	r2, r3
   1f6d2:	697b      	ldr	r3, [r7, #20]
   1f6d4:	441a      	add	r2, r3
   1f6d6:	4b6d      	ldr	r3, [pc, #436]	; (1f88c <gxsha1_transform+0x2f0>)
   1f6d8:	4413      	add	r3, r2
   1f6da:	617b      	str	r3, [r7, #20]
   1f6dc:	6a3b      	ldr	r3, [r7, #32]
   1f6de:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f6e2:	623b      	str	r3, [r7, #32]
    SHA1_R0(e, a, b, c, d, 6);
   1f6e4:	6a3a      	ldr	r2, [r7, #32]
   1f6e6:	69fb      	ldr	r3, [r7, #28]
   1f6e8:	405a      	eors	r2, r3
   1f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6ec:	401a      	ands	r2, r3
   1f6ee:	69fb      	ldr	r3, [r7, #28]
   1f6f0:	405a      	eors	r2, r3
   1f6f2:	68fb      	ldr	r3, [r7, #12]
   1f6f4:	3318      	adds	r3, #24
   1f6f6:	681b      	ldr	r3, [r3, #0]
   1f6f8:	441a      	add	r2, r3
   1f6fa:	697b      	ldr	r3, [r7, #20]
   1f6fc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f700:	441a      	add	r2, r3
   1f702:	69bb      	ldr	r3, [r7, #24]
   1f704:	441a      	add	r2, r3
   1f706:	4b61      	ldr	r3, [pc, #388]	; (1f88c <gxsha1_transform+0x2f0>)
   1f708:	4413      	add	r3, r2
   1f70a:	61bb      	str	r3, [r7, #24]
   1f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f70e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f712:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R0(d, e, a, b, c, 7);
   1f714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f716:	6a3b      	ldr	r3, [r7, #32]
   1f718:	405a      	eors	r2, r3
   1f71a:	697b      	ldr	r3, [r7, #20]
   1f71c:	401a      	ands	r2, r3
   1f71e:	6a3b      	ldr	r3, [r7, #32]
   1f720:	405a      	eors	r2, r3
   1f722:	68fb      	ldr	r3, [r7, #12]
   1f724:	331c      	adds	r3, #28
   1f726:	681b      	ldr	r3, [r3, #0]
   1f728:	441a      	add	r2, r3
   1f72a:	69bb      	ldr	r3, [r7, #24]
   1f72c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f730:	441a      	add	r2, r3
   1f732:	69fb      	ldr	r3, [r7, #28]
   1f734:	441a      	add	r2, r3
   1f736:	4b55      	ldr	r3, [pc, #340]	; (1f88c <gxsha1_transform+0x2f0>)
   1f738:	4413      	add	r3, r2
   1f73a:	61fb      	str	r3, [r7, #28]
   1f73c:	697b      	ldr	r3, [r7, #20]
   1f73e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f742:	617b      	str	r3, [r7, #20]
    SHA1_R0(c, d, e, a, b, 8);
   1f744:	697a      	ldr	r2, [r7, #20]
   1f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f748:	405a      	eors	r2, r3
   1f74a:	69bb      	ldr	r3, [r7, #24]
   1f74c:	401a      	ands	r2, r3
   1f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f750:	405a      	eors	r2, r3
   1f752:	68fb      	ldr	r3, [r7, #12]
   1f754:	3320      	adds	r3, #32
   1f756:	681b      	ldr	r3, [r3, #0]
   1f758:	441a      	add	r2, r3
   1f75a:	69fb      	ldr	r3, [r7, #28]
   1f75c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f760:	441a      	add	r2, r3
   1f762:	6a3b      	ldr	r3, [r7, #32]
   1f764:	441a      	add	r2, r3
   1f766:	4b49      	ldr	r3, [pc, #292]	; (1f88c <gxsha1_transform+0x2f0>)
   1f768:	4413      	add	r3, r2
   1f76a:	623b      	str	r3, [r7, #32]
   1f76c:	69bb      	ldr	r3, [r7, #24]
   1f76e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f772:	61bb      	str	r3, [r7, #24]
    SHA1_R0(b, c, d, e, a, 9);
   1f774:	69ba      	ldr	r2, [r7, #24]
   1f776:	697b      	ldr	r3, [r7, #20]
   1f778:	405a      	eors	r2, r3
   1f77a:	69fb      	ldr	r3, [r7, #28]
   1f77c:	401a      	ands	r2, r3
   1f77e:	697b      	ldr	r3, [r7, #20]
   1f780:	405a      	eors	r2, r3
   1f782:	68fb      	ldr	r3, [r7, #12]
   1f784:	3324      	adds	r3, #36	; 0x24
   1f786:	681b      	ldr	r3, [r3, #0]
   1f788:	441a      	add	r2, r3
   1f78a:	6a3b      	ldr	r3, [r7, #32]
   1f78c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f790:	441a      	add	r2, r3
   1f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f794:	441a      	add	r2, r3
   1f796:	4b3d      	ldr	r3, [pc, #244]	; (1f88c <gxsha1_transform+0x2f0>)
   1f798:	4413      	add	r3, r2
   1f79a:	627b      	str	r3, [r7, #36]	; 0x24
   1f79c:	69fb      	ldr	r3, [r7, #28]
   1f79e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f7a2:	61fb      	str	r3, [r7, #28]
    SHA1_R0(a, b, c, d, e, 10);
   1f7a4:	69fa      	ldr	r2, [r7, #28]
   1f7a6:	69bb      	ldr	r3, [r7, #24]
   1f7a8:	405a      	eors	r2, r3
   1f7aa:	6a3b      	ldr	r3, [r7, #32]
   1f7ac:	401a      	ands	r2, r3
   1f7ae:	69bb      	ldr	r3, [r7, #24]
   1f7b0:	405a      	eors	r2, r3
   1f7b2:	68fb      	ldr	r3, [r7, #12]
   1f7b4:	3328      	adds	r3, #40	; 0x28
   1f7b6:	681b      	ldr	r3, [r3, #0]
   1f7b8:	441a      	add	r2, r3
   1f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f7bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f7c0:	441a      	add	r2, r3
   1f7c2:	697b      	ldr	r3, [r7, #20]
   1f7c4:	441a      	add	r2, r3
   1f7c6:	4b31      	ldr	r3, [pc, #196]	; (1f88c <gxsha1_transform+0x2f0>)
   1f7c8:	4413      	add	r3, r2
   1f7ca:	617b      	str	r3, [r7, #20]
   1f7cc:	6a3b      	ldr	r3, [r7, #32]
   1f7ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f7d2:	623b      	str	r3, [r7, #32]
    SHA1_R0(e, a, b, c, d, 11);
   1f7d4:	6a3a      	ldr	r2, [r7, #32]
   1f7d6:	69fb      	ldr	r3, [r7, #28]
   1f7d8:	405a      	eors	r2, r3
   1f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f7dc:	401a      	ands	r2, r3
   1f7de:	69fb      	ldr	r3, [r7, #28]
   1f7e0:	405a      	eors	r2, r3
   1f7e2:	68fb      	ldr	r3, [r7, #12]
   1f7e4:	332c      	adds	r3, #44	; 0x2c
   1f7e6:	681b      	ldr	r3, [r3, #0]
   1f7e8:	441a      	add	r2, r3
   1f7ea:	697b      	ldr	r3, [r7, #20]
   1f7ec:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f7f0:	441a      	add	r2, r3
   1f7f2:	69bb      	ldr	r3, [r7, #24]
   1f7f4:	441a      	add	r2, r3
   1f7f6:	4b25      	ldr	r3, [pc, #148]	; (1f88c <gxsha1_transform+0x2f0>)
   1f7f8:	4413      	add	r3, r2
   1f7fa:	61bb      	str	r3, [r7, #24]
   1f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f7fe:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f802:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R0(d, e, a, b, c, 12);
   1f804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f806:	6a3b      	ldr	r3, [r7, #32]
   1f808:	405a      	eors	r2, r3
   1f80a:	697b      	ldr	r3, [r7, #20]
   1f80c:	401a      	ands	r2, r3
   1f80e:	6a3b      	ldr	r3, [r7, #32]
   1f810:	405a      	eors	r2, r3
   1f812:	68fb      	ldr	r3, [r7, #12]
   1f814:	3330      	adds	r3, #48	; 0x30
   1f816:	681b      	ldr	r3, [r3, #0]
   1f818:	441a      	add	r2, r3
   1f81a:	69bb      	ldr	r3, [r7, #24]
   1f81c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f820:	441a      	add	r2, r3
   1f822:	69fb      	ldr	r3, [r7, #28]
   1f824:	441a      	add	r2, r3
   1f826:	4b19      	ldr	r3, [pc, #100]	; (1f88c <gxsha1_transform+0x2f0>)
   1f828:	4413      	add	r3, r2
   1f82a:	61fb      	str	r3, [r7, #28]
   1f82c:	697b      	ldr	r3, [r7, #20]
   1f82e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f832:	617b      	str	r3, [r7, #20]
    SHA1_R0(c, d, e, a, b, 13);
   1f834:	697a      	ldr	r2, [r7, #20]
   1f836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f838:	405a      	eors	r2, r3
   1f83a:	69bb      	ldr	r3, [r7, #24]
   1f83c:	401a      	ands	r2, r3
   1f83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f840:	405a      	eors	r2, r3
   1f842:	68fb      	ldr	r3, [r7, #12]
   1f844:	3334      	adds	r3, #52	; 0x34
   1f846:	681b      	ldr	r3, [r3, #0]
   1f848:	441a      	add	r2, r3
   1f84a:	69fb      	ldr	r3, [r7, #28]
   1f84c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f850:	441a      	add	r2, r3
   1f852:	6a3b      	ldr	r3, [r7, #32]
   1f854:	441a      	add	r2, r3
   1f856:	4b0d      	ldr	r3, [pc, #52]	; (1f88c <gxsha1_transform+0x2f0>)
   1f858:	4413      	add	r3, r2
   1f85a:	623b      	str	r3, [r7, #32]
   1f85c:	69bb      	ldr	r3, [r7, #24]
   1f85e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f862:	61bb      	str	r3, [r7, #24]
    SHA1_R0(b, c, d, e, a, 14);
   1f864:	69ba      	ldr	r2, [r7, #24]
   1f866:	697b      	ldr	r3, [r7, #20]
   1f868:	405a      	eors	r2, r3
   1f86a:	69fb      	ldr	r3, [r7, #28]
   1f86c:	401a      	ands	r2, r3
   1f86e:	697b      	ldr	r3, [r7, #20]
   1f870:	405a      	eors	r2, r3
   1f872:	68fb      	ldr	r3, [r7, #12]
   1f874:	3338      	adds	r3, #56	; 0x38
   1f876:	681b      	ldr	r3, [r3, #0]
   1f878:	441a      	add	r2, r3
   1f87a:	6a3b      	ldr	r3, [r7, #32]
   1f87c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f880:	441a      	add	r2, r3
   1f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f884:	441a      	add	r2, r3
   1f886:	4b01      	ldr	r3, [pc, #4]	; (1f88c <gxsha1_transform+0x2f0>)
   1f888:	4413      	add	r3, r2
   1f88a:	e001      	b.n	1f890 <gxsha1_transform+0x2f4>
   1f88c:	5a827999 	.word	0x5a827999
   1f890:	627b      	str	r3, [r7, #36]	; 0x24
   1f892:	69fb      	ldr	r3, [r7, #28]
   1f894:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f898:	61fb      	str	r3, [r7, #28]
    SHA1_R0(a, b, c, d, e, 15);
   1f89a:	69fa      	ldr	r2, [r7, #28]
   1f89c:	69bb      	ldr	r3, [r7, #24]
   1f89e:	405a      	eors	r2, r3
   1f8a0:	6a3b      	ldr	r3, [r7, #32]
   1f8a2:	401a      	ands	r2, r3
   1f8a4:	69bb      	ldr	r3, [r7, #24]
   1f8a6:	405a      	eors	r2, r3
   1f8a8:	68fb      	ldr	r3, [r7, #12]
   1f8aa:	333c      	adds	r3, #60	; 0x3c
   1f8ac:	681b      	ldr	r3, [r3, #0]
   1f8ae:	441a      	add	r2, r3
   1f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f8b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f8b6:	441a      	add	r2, r3
   1f8b8:	697b      	ldr	r3, [r7, #20]
   1f8ba:	441a      	add	r2, r3
   1f8bc:	4ba8      	ldr	r3, [pc, #672]	; (1fb60 <gxsha1_transform+0x5c4>)
   1f8be:	4413      	add	r3, r2
   1f8c0:	617b      	str	r3, [r7, #20]
   1f8c2:	6a3b      	ldr	r3, [r7, #32]
   1f8c4:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f8c8:	623b      	str	r3, [r7, #32]
    SHA1_R1(e, a, b, c, d, 16);
   1f8ca:	6a3a      	ldr	r2, [r7, #32]
   1f8cc:	69fb      	ldr	r3, [r7, #28]
   1f8ce:	405a      	eors	r2, r3
   1f8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f8d2:	401a      	ands	r2, r3
   1f8d4:	69fb      	ldr	r3, [r7, #28]
   1f8d6:	405a      	eors	r2, r3
   1f8d8:	68fb      	ldr	r3, [r7, #12]
   1f8da:	3334      	adds	r3, #52	; 0x34
   1f8dc:	6819      	ldr	r1, [r3, #0]
   1f8de:	68fb      	ldr	r3, [r7, #12]
   1f8e0:	3320      	adds	r3, #32
   1f8e2:	681b      	ldr	r3, [r3, #0]
   1f8e4:	4059      	eors	r1, r3
   1f8e6:	68fb      	ldr	r3, [r7, #12]
   1f8e8:	3308      	adds	r3, #8
   1f8ea:	681b      	ldr	r3, [r3, #0]
   1f8ec:	4059      	eors	r1, r3
   1f8ee:	68fb      	ldr	r3, [r7, #12]
   1f8f0:	681b      	ldr	r3, [r3, #0]
   1f8f2:	404b      	eors	r3, r1
   1f8f4:	ea4f 71f3 	mov.w	r1, r3, ror #31
   1f8f8:	68fb      	ldr	r3, [r7, #12]
   1f8fa:	6019      	str	r1, [r3, #0]
   1f8fc:	68fb      	ldr	r3, [r7, #12]
   1f8fe:	681b      	ldr	r3, [r3, #0]
   1f900:	441a      	add	r2, r3
   1f902:	697b      	ldr	r3, [r7, #20]
   1f904:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f908:	441a      	add	r2, r3
   1f90a:	4b95      	ldr	r3, [pc, #596]	; (1fb60 <gxsha1_transform+0x5c4>)
   1f90c:	4413      	add	r3, r2
   1f90e:	69ba      	ldr	r2, [r7, #24]
   1f910:	4413      	add	r3, r2
   1f912:	61bb      	str	r3, [r7, #24]
   1f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f916:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f91a:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R1(d, e, a, b, c, 17);
   1f91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f91e:	6a3b      	ldr	r3, [r7, #32]
   1f920:	405a      	eors	r2, r3
   1f922:	697b      	ldr	r3, [r7, #20]
   1f924:	401a      	ands	r2, r3
   1f926:	6a3b      	ldr	r3, [r7, #32]
   1f928:	405a      	eors	r2, r3
   1f92a:	68fb      	ldr	r3, [r7, #12]
   1f92c:	3304      	adds	r3, #4
   1f92e:	68f9      	ldr	r1, [r7, #12]
   1f930:	3138      	adds	r1, #56	; 0x38
   1f932:	6808      	ldr	r0, [r1, #0]
   1f934:	68f9      	ldr	r1, [r7, #12]
   1f936:	3124      	adds	r1, #36	; 0x24
   1f938:	6809      	ldr	r1, [r1, #0]
   1f93a:	4048      	eors	r0, r1
   1f93c:	68f9      	ldr	r1, [r7, #12]
   1f93e:	310c      	adds	r1, #12
   1f940:	6809      	ldr	r1, [r1, #0]
   1f942:	4048      	eors	r0, r1
   1f944:	68f9      	ldr	r1, [r7, #12]
   1f946:	3104      	adds	r1, #4
   1f948:	6809      	ldr	r1, [r1, #0]
   1f94a:	4041      	eors	r1, r0
   1f94c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1f950:	6019      	str	r1, [r3, #0]
   1f952:	681b      	ldr	r3, [r3, #0]
   1f954:	441a      	add	r2, r3
   1f956:	69bb      	ldr	r3, [r7, #24]
   1f958:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f95c:	441a      	add	r2, r3
   1f95e:	4b80      	ldr	r3, [pc, #512]	; (1fb60 <gxsha1_transform+0x5c4>)
   1f960:	4413      	add	r3, r2
   1f962:	69fa      	ldr	r2, [r7, #28]
   1f964:	4413      	add	r3, r2
   1f966:	61fb      	str	r3, [r7, #28]
   1f968:	697b      	ldr	r3, [r7, #20]
   1f96a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f96e:	617b      	str	r3, [r7, #20]
    SHA1_R1(c, d, e, a, b, 18);
   1f970:	697a      	ldr	r2, [r7, #20]
   1f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f974:	405a      	eors	r2, r3
   1f976:	69bb      	ldr	r3, [r7, #24]
   1f978:	401a      	ands	r2, r3
   1f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f97c:	405a      	eors	r2, r3
   1f97e:	68fb      	ldr	r3, [r7, #12]
   1f980:	3308      	adds	r3, #8
   1f982:	68f9      	ldr	r1, [r7, #12]
   1f984:	313c      	adds	r1, #60	; 0x3c
   1f986:	6808      	ldr	r0, [r1, #0]
   1f988:	68f9      	ldr	r1, [r7, #12]
   1f98a:	3128      	adds	r1, #40	; 0x28
   1f98c:	6809      	ldr	r1, [r1, #0]
   1f98e:	4048      	eors	r0, r1
   1f990:	68f9      	ldr	r1, [r7, #12]
   1f992:	3110      	adds	r1, #16
   1f994:	6809      	ldr	r1, [r1, #0]
   1f996:	4048      	eors	r0, r1
   1f998:	68f9      	ldr	r1, [r7, #12]
   1f99a:	3108      	adds	r1, #8
   1f99c:	6809      	ldr	r1, [r1, #0]
   1f99e:	4041      	eors	r1, r0
   1f9a0:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1f9a4:	6019      	str	r1, [r3, #0]
   1f9a6:	681b      	ldr	r3, [r3, #0]
   1f9a8:	441a      	add	r2, r3
   1f9aa:	69fb      	ldr	r3, [r7, #28]
   1f9ac:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1f9b0:	441a      	add	r2, r3
   1f9b2:	4b6b      	ldr	r3, [pc, #428]	; (1fb60 <gxsha1_transform+0x5c4>)
   1f9b4:	4413      	add	r3, r2
   1f9b6:	6a3a      	ldr	r2, [r7, #32]
   1f9b8:	4413      	add	r3, r2
   1f9ba:	623b      	str	r3, [r7, #32]
   1f9bc:	69bb      	ldr	r3, [r7, #24]
   1f9be:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1f9c2:	61bb      	str	r3, [r7, #24]
    SHA1_R1(b, c, d, e, a, 19);
   1f9c4:	69ba      	ldr	r2, [r7, #24]
   1f9c6:	697b      	ldr	r3, [r7, #20]
   1f9c8:	405a      	eors	r2, r3
   1f9ca:	69fb      	ldr	r3, [r7, #28]
   1f9cc:	401a      	ands	r2, r3
   1f9ce:	697b      	ldr	r3, [r7, #20]
   1f9d0:	405a      	eors	r2, r3
   1f9d2:	68fb      	ldr	r3, [r7, #12]
   1f9d4:	330c      	adds	r3, #12
   1f9d6:	68f9      	ldr	r1, [r7, #12]
   1f9d8:	6808      	ldr	r0, [r1, #0]
   1f9da:	68f9      	ldr	r1, [r7, #12]
   1f9dc:	312c      	adds	r1, #44	; 0x2c
   1f9de:	6809      	ldr	r1, [r1, #0]
   1f9e0:	4048      	eors	r0, r1
   1f9e2:	68f9      	ldr	r1, [r7, #12]
   1f9e4:	3114      	adds	r1, #20
   1f9e6:	6809      	ldr	r1, [r1, #0]
   1f9e8:	4048      	eors	r0, r1
   1f9ea:	68f9      	ldr	r1, [r7, #12]
   1f9ec:	310c      	adds	r1, #12
   1f9ee:	6809      	ldr	r1, [r1, #0]
   1f9f0:	4041      	eors	r1, r0
   1f9f2:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1f9f6:	6019      	str	r1, [r3, #0]
   1f9f8:	681b      	ldr	r3, [r3, #0]
   1f9fa:	441a      	add	r2, r3
   1f9fc:	6a3b      	ldr	r3, [r7, #32]
   1f9fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fa02:	441a      	add	r2, r3
   1fa04:	4b56      	ldr	r3, [pc, #344]	; (1fb60 <gxsha1_transform+0x5c4>)
   1fa06:	4413      	add	r3, r2
   1fa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fa0a:	4413      	add	r3, r2
   1fa0c:	627b      	str	r3, [r7, #36]	; 0x24
   1fa0e:	69fb      	ldr	r3, [r7, #28]
   1fa10:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fa14:	61fb      	str	r3, [r7, #28]
    SHA1_R2(a, b, c, d, e, 20);
   1fa16:	6a3a      	ldr	r2, [r7, #32]
   1fa18:	69fb      	ldr	r3, [r7, #28]
   1fa1a:	405a      	eors	r2, r3
   1fa1c:	69bb      	ldr	r3, [r7, #24]
   1fa1e:	405a      	eors	r2, r3
   1fa20:	68fb      	ldr	r3, [r7, #12]
   1fa22:	3310      	adds	r3, #16
   1fa24:	68f9      	ldr	r1, [r7, #12]
   1fa26:	3104      	adds	r1, #4
   1fa28:	6808      	ldr	r0, [r1, #0]
   1fa2a:	68f9      	ldr	r1, [r7, #12]
   1fa2c:	3130      	adds	r1, #48	; 0x30
   1fa2e:	6809      	ldr	r1, [r1, #0]
   1fa30:	4048      	eors	r0, r1
   1fa32:	68f9      	ldr	r1, [r7, #12]
   1fa34:	3118      	adds	r1, #24
   1fa36:	6809      	ldr	r1, [r1, #0]
   1fa38:	4048      	eors	r0, r1
   1fa3a:	68f9      	ldr	r1, [r7, #12]
   1fa3c:	3110      	adds	r1, #16
   1fa3e:	6809      	ldr	r1, [r1, #0]
   1fa40:	4041      	eors	r1, r0
   1fa42:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fa46:	6019      	str	r1, [r3, #0]
   1fa48:	681b      	ldr	r3, [r3, #0]
   1fa4a:	441a      	add	r2, r3
   1fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fa4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fa52:	441a      	add	r2, r3
   1fa54:	4b43      	ldr	r3, [pc, #268]	; (1fb64 <gxsha1_transform+0x5c8>)
   1fa56:	4413      	add	r3, r2
   1fa58:	697a      	ldr	r2, [r7, #20]
   1fa5a:	4413      	add	r3, r2
   1fa5c:	617b      	str	r3, [r7, #20]
   1fa5e:	6a3b      	ldr	r3, [r7, #32]
   1fa60:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fa64:	623b      	str	r3, [r7, #32]
    SHA1_R2(e, a, b, c, d, 21);
   1fa66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fa68:	6a3b      	ldr	r3, [r7, #32]
   1fa6a:	405a      	eors	r2, r3
   1fa6c:	69fb      	ldr	r3, [r7, #28]
   1fa6e:	405a      	eors	r2, r3
   1fa70:	68fb      	ldr	r3, [r7, #12]
   1fa72:	3314      	adds	r3, #20
   1fa74:	68f9      	ldr	r1, [r7, #12]
   1fa76:	3108      	adds	r1, #8
   1fa78:	6808      	ldr	r0, [r1, #0]
   1fa7a:	68f9      	ldr	r1, [r7, #12]
   1fa7c:	3134      	adds	r1, #52	; 0x34
   1fa7e:	6809      	ldr	r1, [r1, #0]
   1fa80:	4048      	eors	r0, r1
   1fa82:	68f9      	ldr	r1, [r7, #12]
   1fa84:	311c      	adds	r1, #28
   1fa86:	6809      	ldr	r1, [r1, #0]
   1fa88:	4048      	eors	r0, r1
   1fa8a:	68f9      	ldr	r1, [r7, #12]
   1fa8c:	3114      	adds	r1, #20
   1fa8e:	6809      	ldr	r1, [r1, #0]
   1fa90:	4041      	eors	r1, r0
   1fa92:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fa96:	6019      	str	r1, [r3, #0]
   1fa98:	681b      	ldr	r3, [r3, #0]
   1fa9a:	441a      	add	r2, r3
   1fa9c:	697b      	ldr	r3, [r7, #20]
   1fa9e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1faa2:	441a      	add	r2, r3
   1faa4:	4b2f      	ldr	r3, [pc, #188]	; (1fb64 <gxsha1_transform+0x5c8>)
   1faa6:	4413      	add	r3, r2
   1faa8:	69ba      	ldr	r2, [r7, #24]
   1faaa:	4413      	add	r3, r2
   1faac:	61bb      	str	r3, [r7, #24]
   1faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fab0:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fab4:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R2(d, e, a, b, c, 22);
   1fab6:	697a      	ldr	r2, [r7, #20]
   1fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1faba:	405a      	eors	r2, r3
   1fabc:	6a3b      	ldr	r3, [r7, #32]
   1fabe:	405a      	eors	r2, r3
   1fac0:	68fb      	ldr	r3, [r7, #12]
   1fac2:	3318      	adds	r3, #24
   1fac4:	68f9      	ldr	r1, [r7, #12]
   1fac6:	310c      	adds	r1, #12
   1fac8:	6808      	ldr	r0, [r1, #0]
   1faca:	68f9      	ldr	r1, [r7, #12]
   1facc:	3138      	adds	r1, #56	; 0x38
   1face:	6809      	ldr	r1, [r1, #0]
   1fad0:	4048      	eors	r0, r1
   1fad2:	68f9      	ldr	r1, [r7, #12]
   1fad4:	3120      	adds	r1, #32
   1fad6:	6809      	ldr	r1, [r1, #0]
   1fad8:	4048      	eors	r0, r1
   1fada:	68f9      	ldr	r1, [r7, #12]
   1fadc:	3118      	adds	r1, #24
   1fade:	6809      	ldr	r1, [r1, #0]
   1fae0:	4041      	eors	r1, r0
   1fae2:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fae6:	6019      	str	r1, [r3, #0]
   1fae8:	681b      	ldr	r3, [r3, #0]
   1faea:	441a      	add	r2, r3
   1faec:	69bb      	ldr	r3, [r7, #24]
   1faee:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1faf2:	441a      	add	r2, r3
   1faf4:	4b1b      	ldr	r3, [pc, #108]	; (1fb64 <gxsha1_transform+0x5c8>)
   1faf6:	4413      	add	r3, r2
   1faf8:	69fa      	ldr	r2, [r7, #28]
   1fafa:	4413      	add	r3, r2
   1fafc:	61fb      	str	r3, [r7, #28]
   1fafe:	697b      	ldr	r3, [r7, #20]
   1fb00:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fb04:	617b      	str	r3, [r7, #20]
    SHA1_R2(c, d, e, a, b, 23);
   1fb06:	69ba      	ldr	r2, [r7, #24]
   1fb08:	697b      	ldr	r3, [r7, #20]
   1fb0a:	405a      	eors	r2, r3
   1fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fb0e:	405a      	eors	r2, r3
   1fb10:	68fb      	ldr	r3, [r7, #12]
   1fb12:	331c      	adds	r3, #28
   1fb14:	68f9      	ldr	r1, [r7, #12]
   1fb16:	3110      	adds	r1, #16
   1fb18:	6808      	ldr	r0, [r1, #0]
   1fb1a:	68f9      	ldr	r1, [r7, #12]
   1fb1c:	313c      	adds	r1, #60	; 0x3c
   1fb1e:	6809      	ldr	r1, [r1, #0]
   1fb20:	4048      	eors	r0, r1
   1fb22:	68f9      	ldr	r1, [r7, #12]
   1fb24:	3124      	adds	r1, #36	; 0x24
   1fb26:	6809      	ldr	r1, [r1, #0]
   1fb28:	4048      	eors	r0, r1
   1fb2a:	68f9      	ldr	r1, [r7, #12]
   1fb2c:	311c      	adds	r1, #28
   1fb2e:	6809      	ldr	r1, [r1, #0]
   1fb30:	4041      	eors	r1, r0
   1fb32:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fb36:	6019      	str	r1, [r3, #0]
   1fb38:	681b      	ldr	r3, [r3, #0]
   1fb3a:	441a      	add	r2, r3
   1fb3c:	69fb      	ldr	r3, [r7, #28]
   1fb3e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fb42:	441a      	add	r2, r3
   1fb44:	4b07      	ldr	r3, [pc, #28]	; (1fb64 <gxsha1_transform+0x5c8>)
   1fb46:	4413      	add	r3, r2
   1fb48:	6a3a      	ldr	r2, [r7, #32]
   1fb4a:	4413      	add	r3, r2
   1fb4c:	623b      	str	r3, [r7, #32]
   1fb4e:	69bb      	ldr	r3, [r7, #24]
   1fb50:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fb54:	61bb      	str	r3, [r7, #24]
    SHA1_R2(b, c, d, e, a, 24);
   1fb56:	69fa      	ldr	r2, [r7, #28]
   1fb58:	69bb      	ldr	r3, [r7, #24]
   1fb5a:	405a      	eors	r2, r3
   1fb5c:	e004      	b.n	1fb68 <gxsha1_transform+0x5cc>
   1fb5e:	bf00      	nop
   1fb60:	5a827999 	.word	0x5a827999
   1fb64:	6ed9eba1 	.word	0x6ed9eba1
   1fb68:	697b      	ldr	r3, [r7, #20]
   1fb6a:	405a      	eors	r2, r3
   1fb6c:	68fb      	ldr	r3, [r7, #12]
   1fb6e:	3320      	adds	r3, #32
   1fb70:	68f9      	ldr	r1, [r7, #12]
   1fb72:	3114      	adds	r1, #20
   1fb74:	6808      	ldr	r0, [r1, #0]
   1fb76:	68f9      	ldr	r1, [r7, #12]
   1fb78:	6809      	ldr	r1, [r1, #0]
   1fb7a:	4048      	eors	r0, r1
   1fb7c:	68f9      	ldr	r1, [r7, #12]
   1fb7e:	3128      	adds	r1, #40	; 0x28
   1fb80:	6809      	ldr	r1, [r1, #0]
   1fb82:	4048      	eors	r0, r1
   1fb84:	68f9      	ldr	r1, [r7, #12]
   1fb86:	3120      	adds	r1, #32
   1fb88:	6809      	ldr	r1, [r1, #0]
   1fb8a:	4041      	eors	r1, r0
   1fb8c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fb90:	6019      	str	r1, [r3, #0]
   1fb92:	681b      	ldr	r3, [r3, #0]
   1fb94:	441a      	add	r2, r3
   1fb96:	6a3b      	ldr	r3, [r7, #32]
   1fb98:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fb9c:	441a      	add	r2, r3
   1fb9e:	4ba8      	ldr	r3, [pc, #672]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fba0:	4413      	add	r3, r2
   1fba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fba4:	4413      	add	r3, r2
   1fba6:	627b      	str	r3, [r7, #36]	; 0x24
   1fba8:	69fb      	ldr	r3, [r7, #28]
   1fbaa:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fbae:	61fb      	str	r3, [r7, #28]
    SHA1_R2(a, b, c, d, e, 25);
   1fbb0:	6a3a      	ldr	r2, [r7, #32]
   1fbb2:	69fb      	ldr	r3, [r7, #28]
   1fbb4:	405a      	eors	r2, r3
   1fbb6:	69bb      	ldr	r3, [r7, #24]
   1fbb8:	405a      	eors	r2, r3
   1fbba:	68fb      	ldr	r3, [r7, #12]
   1fbbc:	3324      	adds	r3, #36	; 0x24
   1fbbe:	68f9      	ldr	r1, [r7, #12]
   1fbc0:	3118      	adds	r1, #24
   1fbc2:	6808      	ldr	r0, [r1, #0]
   1fbc4:	68f9      	ldr	r1, [r7, #12]
   1fbc6:	3104      	adds	r1, #4
   1fbc8:	6809      	ldr	r1, [r1, #0]
   1fbca:	4048      	eors	r0, r1
   1fbcc:	68f9      	ldr	r1, [r7, #12]
   1fbce:	312c      	adds	r1, #44	; 0x2c
   1fbd0:	6809      	ldr	r1, [r1, #0]
   1fbd2:	4048      	eors	r0, r1
   1fbd4:	68f9      	ldr	r1, [r7, #12]
   1fbd6:	3124      	adds	r1, #36	; 0x24
   1fbd8:	6809      	ldr	r1, [r1, #0]
   1fbda:	4041      	eors	r1, r0
   1fbdc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fbe0:	6019      	str	r1, [r3, #0]
   1fbe2:	681b      	ldr	r3, [r3, #0]
   1fbe4:	441a      	add	r2, r3
   1fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fbe8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fbec:	441a      	add	r2, r3
   1fbee:	4b94      	ldr	r3, [pc, #592]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fbf0:	4413      	add	r3, r2
   1fbf2:	697a      	ldr	r2, [r7, #20]
   1fbf4:	4413      	add	r3, r2
   1fbf6:	617b      	str	r3, [r7, #20]
   1fbf8:	6a3b      	ldr	r3, [r7, #32]
   1fbfa:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fbfe:	623b      	str	r3, [r7, #32]
    SHA1_R2(e, a, b, c, d, 26);
   1fc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fc02:	6a3b      	ldr	r3, [r7, #32]
   1fc04:	405a      	eors	r2, r3
   1fc06:	69fb      	ldr	r3, [r7, #28]
   1fc08:	405a      	eors	r2, r3
   1fc0a:	68fb      	ldr	r3, [r7, #12]
   1fc0c:	3328      	adds	r3, #40	; 0x28
   1fc0e:	68f9      	ldr	r1, [r7, #12]
   1fc10:	311c      	adds	r1, #28
   1fc12:	6808      	ldr	r0, [r1, #0]
   1fc14:	68f9      	ldr	r1, [r7, #12]
   1fc16:	3108      	adds	r1, #8
   1fc18:	6809      	ldr	r1, [r1, #0]
   1fc1a:	4048      	eors	r0, r1
   1fc1c:	68f9      	ldr	r1, [r7, #12]
   1fc1e:	3130      	adds	r1, #48	; 0x30
   1fc20:	6809      	ldr	r1, [r1, #0]
   1fc22:	4048      	eors	r0, r1
   1fc24:	68f9      	ldr	r1, [r7, #12]
   1fc26:	3128      	adds	r1, #40	; 0x28
   1fc28:	6809      	ldr	r1, [r1, #0]
   1fc2a:	4041      	eors	r1, r0
   1fc2c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fc30:	6019      	str	r1, [r3, #0]
   1fc32:	681b      	ldr	r3, [r3, #0]
   1fc34:	441a      	add	r2, r3
   1fc36:	697b      	ldr	r3, [r7, #20]
   1fc38:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fc3c:	441a      	add	r2, r3
   1fc3e:	4b80      	ldr	r3, [pc, #512]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fc40:	4413      	add	r3, r2
   1fc42:	69ba      	ldr	r2, [r7, #24]
   1fc44:	4413      	add	r3, r2
   1fc46:	61bb      	str	r3, [r7, #24]
   1fc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fc4a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fc4e:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R2(d, e, a, b, c, 27);
   1fc50:	697a      	ldr	r2, [r7, #20]
   1fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fc54:	405a      	eors	r2, r3
   1fc56:	6a3b      	ldr	r3, [r7, #32]
   1fc58:	405a      	eors	r2, r3
   1fc5a:	68fb      	ldr	r3, [r7, #12]
   1fc5c:	332c      	adds	r3, #44	; 0x2c
   1fc5e:	68f9      	ldr	r1, [r7, #12]
   1fc60:	3120      	adds	r1, #32
   1fc62:	6808      	ldr	r0, [r1, #0]
   1fc64:	68f9      	ldr	r1, [r7, #12]
   1fc66:	310c      	adds	r1, #12
   1fc68:	6809      	ldr	r1, [r1, #0]
   1fc6a:	4048      	eors	r0, r1
   1fc6c:	68f9      	ldr	r1, [r7, #12]
   1fc6e:	3134      	adds	r1, #52	; 0x34
   1fc70:	6809      	ldr	r1, [r1, #0]
   1fc72:	4048      	eors	r0, r1
   1fc74:	68f9      	ldr	r1, [r7, #12]
   1fc76:	312c      	adds	r1, #44	; 0x2c
   1fc78:	6809      	ldr	r1, [r1, #0]
   1fc7a:	4041      	eors	r1, r0
   1fc7c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fc80:	6019      	str	r1, [r3, #0]
   1fc82:	681b      	ldr	r3, [r3, #0]
   1fc84:	441a      	add	r2, r3
   1fc86:	69bb      	ldr	r3, [r7, #24]
   1fc88:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fc8c:	441a      	add	r2, r3
   1fc8e:	4b6c      	ldr	r3, [pc, #432]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fc90:	4413      	add	r3, r2
   1fc92:	69fa      	ldr	r2, [r7, #28]
   1fc94:	4413      	add	r3, r2
   1fc96:	61fb      	str	r3, [r7, #28]
   1fc98:	697b      	ldr	r3, [r7, #20]
   1fc9a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fc9e:	617b      	str	r3, [r7, #20]
    SHA1_R2(c, d, e, a, b, 28);
   1fca0:	69ba      	ldr	r2, [r7, #24]
   1fca2:	697b      	ldr	r3, [r7, #20]
   1fca4:	405a      	eors	r2, r3
   1fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fca8:	405a      	eors	r2, r3
   1fcaa:	68fb      	ldr	r3, [r7, #12]
   1fcac:	3330      	adds	r3, #48	; 0x30
   1fcae:	68f9      	ldr	r1, [r7, #12]
   1fcb0:	3124      	adds	r1, #36	; 0x24
   1fcb2:	6808      	ldr	r0, [r1, #0]
   1fcb4:	68f9      	ldr	r1, [r7, #12]
   1fcb6:	3110      	adds	r1, #16
   1fcb8:	6809      	ldr	r1, [r1, #0]
   1fcba:	4048      	eors	r0, r1
   1fcbc:	68f9      	ldr	r1, [r7, #12]
   1fcbe:	3138      	adds	r1, #56	; 0x38
   1fcc0:	6809      	ldr	r1, [r1, #0]
   1fcc2:	4048      	eors	r0, r1
   1fcc4:	68f9      	ldr	r1, [r7, #12]
   1fcc6:	3130      	adds	r1, #48	; 0x30
   1fcc8:	6809      	ldr	r1, [r1, #0]
   1fcca:	4041      	eors	r1, r0
   1fccc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fcd0:	6019      	str	r1, [r3, #0]
   1fcd2:	681b      	ldr	r3, [r3, #0]
   1fcd4:	441a      	add	r2, r3
   1fcd6:	69fb      	ldr	r3, [r7, #28]
   1fcd8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fcdc:	441a      	add	r2, r3
   1fcde:	4b58      	ldr	r3, [pc, #352]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fce0:	4413      	add	r3, r2
   1fce2:	6a3a      	ldr	r2, [r7, #32]
   1fce4:	4413      	add	r3, r2
   1fce6:	623b      	str	r3, [r7, #32]
   1fce8:	69bb      	ldr	r3, [r7, #24]
   1fcea:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fcee:	61bb      	str	r3, [r7, #24]
    SHA1_R2(b, c, d, e, a, 29);
   1fcf0:	69fa      	ldr	r2, [r7, #28]
   1fcf2:	69bb      	ldr	r3, [r7, #24]
   1fcf4:	405a      	eors	r2, r3
   1fcf6:	697b      	ldr	r3, [r7, #20]
   1fcf8:	405a      	eors	r2, r3
   1fcfa:	68fb      	ldr	r3, [r7, #12]
   1fcfc:	3334      	adds	r3, #52	; 0x34
   1fcfe:	68f9      	ldr	r1, [r7, #12]
   1fd00:	3128      	adds	r1, #40	; 0x28
   1fd02:	6808      	ldr	r0, [r1, #0]
   1fd04:	68f9      	ldr	r1, [r7, #12]
   1fd06:	3114      	adds	r1, #20
   1fd08:	6809      	ldr	r1, [r1, #0]
   1fd0a:	4048      	eors	r0, r1
   1fd0c:	68f9      	ldr	r1, [r7, #12]
   1fd0e:	313c      	adds	r1, #60	; 0x3c
   1fd10:	6809      	ldr	r1, [r1, #0]
   1fd12:	4048      	eors	r0, r1
   1fd14:	68f9      	ldr	r1, [r7, #12]
   1fd16:	3134      	adds	r1, #52	; 0x34
   1fd18:	6809      	ldr	r1, [r1, #0]
   1fd1a:	4041      	eors	r1, r0
   1fd1c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fd20:	6019      	str	r1, [r3, #0]
   1fd22:	681b      	ldr	r3, [r3, #0]
   1fd24:	441a      	add	r2, r3
   1fd26:	6a3b      	ldr	r3, [r7, #32]
   1fd28:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fd2c:	441a      	add	r2, r3
   1fd2e:	4b44      	ldr	r3, [pc, #272]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fd30:	4413      	add	r3, r2
   1fd32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fd34:	4413      	add	r3, r2
   1fd36:	627b      	str	r3, [r7, #36]	; 0x24
   1fd38:	69fb      	ldr	r3, [r7, #28]
   1fd3a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fd3e:	61fb      	str	r3, [r7, #28]
    SHA1_R2(a, b, c, d, e, 30);
   1fd40:	6a3a      	ldr	r2, [r7, #32]
   1fd42:	69fb      	ldr	r3, [r7, #28]
   1fd44:	405a      	eors	r2, r3
   1fd46:	69bb      	ldr	r3, [r7, #24]
   1fd48:	405a      	eors	r2, r3
   1fd4a:	68fb      	ldr	r3, [r7, #12]
   1fd4c:	3338      	adds	r3, #56	; 0x38
   1fd4e:	68f9      	ldr	r1, [r7, #12]
   1fd50:	312c      	adds	r1, #44	; 0x2c
   1fd52:	6808      	ldr	r0, [r1, #0]
   1fd54:	68f9      	ldr	r1, [r7, #12]
   1fd56:	3118      	adds	r1, #24
   1fd58:	6809      	ldr	r1, [r1, #0]
   1fd5a:	4048      	eors	r0, r1
   1fd5c:	68f9      	ldr	r1, [r7, #12]
   1fd5e:	6809      	ldr	r1, [r1, #0]
   1fd60:	4048      	eors	r0, r1
   1fd62:	68f9      	ldr	r1, [r7, #12]
   1fd64:	3138      	adds	r1, #56	; 0x38
   1fd66:	6809      	ldr	r1, [r1, #0]
   1fd68:	4041      	eors	r1, r0
   1fd6a:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fd6e:	6019      	str	r1, [r3, #0]
   1fd70:	681b      	ldr	r3, [r3, #0]
   1fd72:	441a      	add	r2, r3
   1fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fd76:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fd7a:	441a      	add	r2, r3
   1fd7c:	4b30      	ldr	r3, [pc, #192]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fd7e:	4413      	add	r3, r2
   1fd80:	697a      	ldr	r2, [r7, #20]
   1fd82:	4413      	add	r3, r2
   1fd84:	617b      	str	r3, [r7, #20]
   1fd86:	6a3b      	ldr	r3, [r7, #32]
   1fd88:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fd8c:	623b      	str	r3, [r7, #32]
    SHA1_R2(e, a, b, c, d, 31);
   1fd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fd90:	6a3b      	ldr	r3, [r7, #32]
   1fd92:	405a      	eors	r2, r3
   1fd94:	69fb      	ldr	r3, [r7, #28]
   1fd96:	405a      	eors	r2, r3
   1fd98:	68fb      	ldr	r3, [r7, #12]
   1fd9a:	333c      	adds	r3, #60	; 0x3c
   1fd9c:	68f9      	ldr	r1, [r7, #12]
   1fd9e:	3130      	adds	r1, #48	; 0x30
   1fda0:	6808      	ldr	r0, [r1, #0]
   1fda2:	68f9      	ldr	r1, [r7, #12]
   1fda4:	311c      	adds	r1, #28
   1fda6:	6809      	ldr	r1, [r1, #0]
   1fda8:	4048      	eors	r0, r1
   1fdaa:	68f9      	ldr	r1, [r7, #12]
   1fdac:	3104      	adds	r1, #4
   1fdae:	6809      	ldr	r1, [r1, #0]
   1fdb0:	4048      	eors	r0, r1
   1fdb2:	68f9      	ldr	r1, [r7, #12]
   1fdb4:	313c      	adds	r1, #60	; 0x3c
   1fdb6:	6809      	ldr	r1, [r1, #0]
   1fdb8:	4041      	eors	r1, r0
   1fdba:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fdbe:	6019      	str	r1, [r3, #0]
   1fdc0:	681b      	ldr	r3, [r3, #0]
   1fdc2:	441a      	add	r2, r3
   1fdc4:	697b      	ldr	r3, [r7, #20]
   1fdc6:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fdca:	441a      	add	r2, r3
   1fdcc:	4b1c      	ldr	r3, [pc, #112]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fdce:	4413      	add	r3, r2
   1fdd0:	69ba      	ldr	r2, [r7, #24]
   1fdd2:	4413      	add	r3, r2
   1fdd4:	61bb      	str	r3, [r7, #24]
   1fdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fdd8:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fddc:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R2(d, e, a, b, c, 32);
   1fdde:	697a      	ldr	r2, [r7, #20]
   1fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fde2:	405a      	eors	r2, r3
   1fde4:	6a3b      	ldr	r3, [r7, #32]
   1fde6:	405a      	eors	r2, r3
   1fde8:	68fb      	ldr	r3, [r7, #12]
   1fdea:	3334      	adds	r3, #52	; 0x34
   1fdec:	6819      	ldr	r1, [r3, #0]
   1fdee:	68fb      	ldr	r3, [r7, #12]
   1fdf0:	3320      	adds	r3, #32
   1fdf2:	681b      	ldr	r3, [r3, #0]
   1fdf4:	4059      	eors	r1, r3
   1fdf6:	68fb      	ldr	r3, [r7, #12]
   1fdf8:	3308      	adds	r3, #8
   1fdfa:	681b      	ldr	r3, [r3, #0]
   1fdfc:	4059      	eors	r1, r3
   1fdfe:	68fb      	ldr	r3, [r7, #12]
   1fe00:	681b      	ldr	r3, [r3, #0]
   1fe02:	404b      	eors	r3, r1
   1fe04:	ea4f 71f3 	mov.w	r1, r3, ror #31
   1fe08:	68fb      	ldr	r3, [r7, #12]
   1fe0a:	6019      	str	r1, [r3, #0]
   1fe0c:	68fb      	ldr	r3, [r7, #12]
   1fe0e:	681b      	ldr	r3, [r3, #0]
   1fe10:	441a      	add	r2, r3
   1fe12:	69bb      	ldr	r3, [r7, #24]
   1fe14:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fe18:	441a      	add	r2, r3
   1fe1a:	4b09      	ldr	r3, [pc, #36]	; (1fe40 <gxsha1_transform+0x8a4>)
   1fe1c:	4413      	add	r3, r2
   1fe1e:	69fa      	ldr	r2, [r7, #28]
   1fe20:	4413      	add	r3, r2
   1fe22:	61fb      	str	r3, [r7, #28]
   1fe24:	697b      	ldr	r3, [r7, #20]
   1fe26:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fe2a:	617b      	str	r3, [r7, #20]
    SHA1_R2(c, d, e, a, b, 33);
   1fe2c:	69ba      	ldr	r2, [r7, #24]
   1fe2e:	697b      	ldr	r3, [r7, #20]
   1fe30:	405a      	eors	r2, r3
   1fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe34:	405a      	eors	r2, r3
   1fe36:	68fb      	ldr	r3, [r7, #12]
   1fe38:	3304      	adds	r3, #4
   1fe3a:	68f9      	ldr	r1, [r7, #12]
   1fe3c:	3138      	adds	r1, #56	; 0x38
   1fe3e:	e001      	b.n	1fe44 <gxsha1_transform+0x8a8>
   1fe40:	6ed9eba1 	.word	0x6ed9eba1
   1fe44:	6808      	ldr	r0, [r1, #0]
   1fe46:	68f9      	ldr	r1, [r7, #12]
   1fe48:	3124      	adds	r1, #36	; 0x24
   1fe4a:	6809      	ldr	r1, [r1, #0]
   1fe4c:	4048      	eors	r0, r1
   1fe4e:	68f9      	ldr	r1, [r7, #12]
   1fe50:	310c      	adds	r1, #12
   1fe52:	6809      	ldr	r1, [r1, #0]
   1fe54:	4048      	eors	r0, r1
   1fe56:	68f9      	ldr	r1, [r7, #12]
   1fe58:	3104      	adds	r1, #4
   1fe5a:	6809      	ldr	r1, [r1, #0]
   1fe5c:	4041      	eors	r1, r0
   1fe5e:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fe62:	6019      	str	r1, [r3, #0]
   1fe64:	681b      	ldr	r3, [r3, #0]
   1fe66:	441a      	add	r2, r3
   1fe68:	69fb      	ldr	r3, [r7, #28]
   1fe6a:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fe6e:	441a      	add	r2, r3
   1fe70:	4ba8      	ldr	r3, [pc, #672]	; (20114 <gxsha1_transform+0xb78>)
   1fe72:	4413      	add	r3, r2
   1fe74:	6a3a      	ldr	r2, [r7, #32]
   1fe76:	4413      	add	r3, r2
   1fe78:	623b      	str	r3, [r7, #32]
   1fe7a:	69bb      	ldr	r3, [r7, #24]
   1fe7c:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fe80:	61bb      	str	r3, [r7, #24]
    SHA1_R2(b, c, d, e, a, 34);
   1fe82:	69fa      	ldr	r2, [r7, #28]
   1fe84:	69bb      	ldr	r3, [r7, #24]
   1fe86:	405a      	eors	r2, r3
   1fe88:	697b      	ldr	r3, [r7, #20]
   1fe8a:	405a      	eors	r2, r3
   1fe8c:	68fb      	ldr	r3, [r7, #12]
   1fe8e:	3308      	adds	r3, #8
   1fe90:	68f9      	ldr	r1, [r7, #12]
   1fe92:	313c      	adds	r1, #60	; 0x3c
   1fe94:	6808      	ldr	r0, [r1, #0]
   1fe96:	68f9      	ldr	r1, [r7, #12]
   1fe98:	3128      	adds	r1, #40	; 0x28
   1fe9a:	6809      	ldr	r1, [r1, #0]
   1fe9c:	4048      	eors	r0, r1
   1fe9e:	68f9      	ldr	r1, [r7, #12]
   1fea0:	3110      	adds	r1, #16
   1fea2:	6809      	ldr	r1, [r1, #0]
   1fea4:	4048      	eors	r0, r1
   1fea6:	68f9      	ldr	r1, [r7, #12]
   1fea8:	3108      	adds	r1, #8
   1feaa:	6809      	ldr	r1, [r1, #0]
   1feac:	4041      	eors	r1, r0
   1feae:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1feb2:	6019      	str	r1, [r3, #0]
   1feb4:	681b      	ldr	r3, [r3, #0]
   1feb6:	441a      	add	r2, r3
   1feb8:	6a3b      	ldr	r3, [r7, #32]
   1feba:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1febe:	441a      	add	r2, r3
   1fec0:	4b94      	ldr	r3, [pc, #592]	; (20114 <gxsha1_transform+0xb78>)
   1fec2:	4413      	add	r3, r2
   1fec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fec6:	4413      	add	r3, r2
   1fec8:	627b      	str	r3, [r7, #36]	; 0x24
   1feca:	69fb      	ldr	r3, [r7, #28]
   1fecc:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1fed0:	61fb      	str	r3, [r7, #28]
    SHA1_R2(a, b, c, d, e, 35);
   1fed2:	6a3a      	ldr	r2, [r7, #32]
   1fed4:	69fb      	ldr	r3, [r7, #28]
   1fed6:	405a      	eors	r2, r3
   1fed8:	69bb      	ldr	r3, [r7, #24]
   1feda:	405a      	eors	r2, r3
   1fedc:	68fb      	ldr	r3, [r7, #12]
   1fede:	330c      	adds	r3, #12
   1fee0:	68f9      	ldr	r1, [r7, #12]
   1fee2:	6808      	ldr	r0, [r1, #0]
   1fee4:	68f9      	ldr	r1, [r7, #12]
   1fee6:	312c      	adds	r1, #44	; 0x2c
   1fee8:	6809      	ldr	r1, [r1, #0]
   1feea:	4048      	eors	r0, r1
   1feec:	68f9      	ldr	r1, [r7, #12]
   1feee:	3114      	adds	r1, #20
   1fef0:	6809      	ldr	r1, [r1, #0]
   1fef2:	4048      	eors	r0, r1
   1fef4:	68f9      	ldr	r1, [r7, #12]
   1fef6:	310c      	adds	r1, #12
   1fef8:	6809      	ldr	r1, [r1, #0]
   1fefa:	4041      	eors	r1, r0
   1fefc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1ff00:	6019      	str	r1, [r3, #0]
   1ff02:	681b      	ldr	r3, [r3, #0]
   1ff04:	441a      	add	r2, r3
   1ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff08:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1ff0c:	441a      	add	r2, r3
   1ff0e:	4b81      	ldr	r3, [pc, #516]	; (20114 <gxsha1_transform+0xb78>)
   1ff10:	4413      	add	r3, r2
   1ff12:	697a      	ldr	r2, [r7, #20]
   1ff14:	4413      	add	r3, r2
   1ff16:	617b      	str	r3, [r7, #20]
   1ff18:	6a3b      	ldr	r3, [r7, #32]
   1ff1a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1ff1e:	623b      	str	r3, [r7, #32]
    SHA1_R2(e, a, b, c, d, 36);
   1ff20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ff22:	6a3b      	ldr	r3, [r7, #32]
   1ff24:	405a      	eors	r2, r3
   1ff26:	69fb      	ldr	r3, [r7, #28]
   1ff28:	405a      	eors	r2, r3
   1ff2a:	68fb      	ldr	r3, [r7, #12]
   1ff2c:	3310      	adds	r3, #16
   1ff2e:	68f9      	ldr	r1, [r7, #12]
   1ff30:	3104      	adds	r1, #4
   1ff32:	6808      	ldr	r0, [r1, #0]
   1ff34:	68f9      	ldr	r1, [r7, #12]
   1ff36:	3130      	adds	r1, #48	; 0x30
   1ff38:	6809      	ldr	r1, [r1, #0]
   1ff3a:	4048      	eors	r0, r1
   1ff3c:	68f9      	ldr	r1, [r7, #12]
   1ff3e:	3118      	adds	r1, #24
   1ff40:	6809      	ldr	r1, [r1, #0]
   1ff42:	4048      	eors	r0, r1
   1ff44:	68f9      	ldr	r1, [r7, #12]
   1ff46:	3110      	adds	r1, #16
   1ff48:	6809      	ldr	r1, [r1, #0]
   1ff4a:	4041      	eors	r1, r0
   1ff4c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1ff50:	6019      	str	r1, [r3, #0]
   1ff52:	681b      	ldr	r3, [r3, #0]
   1ff54:	441a      	add	r2, r3
   1ff56:	697b      	ldr	r3, [r7, #20]
   1ff58:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1ff5c:	441a      	add	r2, r3
   1ff5e:	4b6d      	ldr	r3, [pc, #436]	; (20114 <gxsha1_transform+0xb78>)
   1ff60:	4413      	add	r3, r2
   1ff62:	69ba      	ldr	r2, [r7, #24]
   1ff64:	4413      	add	r3, r2
   1ff66:	61bb      	str	r3, [r7, #24]
   1ff68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff6a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1ff6e:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R2(d, e, a, b, c, 37);
   1ff70:	697a      	ldr	r2, [r7, #20]
   1ff72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff74:	405a      	eors	r2, r3
   1ff76:	6a3b      	ldr	r3, [r7, #32]
   1ff78:	405a      	eors	r2, r3
   1ff7a:	68fb      	ldr	r3, [r7, #12]
   1ff7c:	3314      	adds	r3, #20
   1ff7e:	68f9      	ldr	r1, [r7, #12]
   1ff80:	3108      	adds	r1, #8
   1ff82:	6808      	ldr	r0, [r1, #0]
   1ff84:	68f9      	ldr	r1, [r7, #12]
   1ff86:	3134      	adds	r1, #52	; 0x34
   1ff88:	6809      	ldr	r1, [r1, #0]
   1ff8a:	4048      	eors	r0, r1
   1ff8c:	68f9      	ldr	r1, [r7, #12]
   1ff8e:	311c      	adds	r1, #28
   1ff90:	6809      	ldr	r1, [r1, #0]
   1ff92:	4048      	eors	r0, r1
   1ff94:	68f9      	ldr	r1, [r7, #12]
   1ff96:	3114      	adds	r1, #20
   1ff98:	6809      	ldr	r1, [r1, #0]
   1ff9a:	4041      	eors	r1, r0
   1ff9c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1ffa0:	6019      	str	r1, [r3, #0]
   1ffa2:	681b      	ldr	r3, [r3, #0]
   1ffa4:	441a      	add	r2, r3
   1ffa6:	69bb      	ldr	r3, [r7, #24]
   1ffa8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1ffac:	441a      	add	r2, r3
   1ffae:	4b59      	ldr	r3, [pc, #356]	; (20114 <gxsha1_transform+0xb78>)
   1ffb0:	4413      	add	r3, r2
   1ffb2:	69fa      	ldr	r2, [r7, #28]
   1ffb4:	4413      	add	r3, r2
   1ffb6:	61fb      	str	r3, [r7, #28]
   1ffb8:	697b      	ldr	r3, [r7, #20]
   1ffba:	ea4f 03b3 	mov.w	r3, r3, ror #2
   1ffbe:	617b      	str	r3, [r7, #20]
    SHA1_R2(c, d, e, a, b, 38);
   1ffc0:	69ba      	ldr	r2, [r7, #24]
   1ffc2:	697b      	ldr	r3, [r7, #20]
   1ffc4:	405a      	eors	r2, r3
   1ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ffc8:	405a      	eors	r2, r3
   1ffca:	68fb      	ldr	r3, [r7, #12]
   1ffcc:	3318      	adds	r3, #24
   1ffce:	68f9      	ldr	r1, [r7, #12]
   1ffd0:	310c      	adds	r1, #12
   1ffd2:	6808      	ldr	r0, [r1, #0]
   1ffd4:	68f9      	ldr	r1, [r7, #12]
   1ffd6:	3138      	adds	r1, #56	; 0x38
   1ffd8:	6809      	ldr	r1, [r1, #0]
   1ffda:	4048      	eors	r0, r1
   1ffdc:	68f9      	ldr	r1, [r7, #12]
   1ffde:	3120      	adds	r1, #32
   1ffe0:	6809      	ldr	r1, [r1, #0]
   1ffe2:	4048      	eors	r0, r1
   1ffe4:	68f9      	ldr	r1, [r7, #12]
   1ffe6:	3118      	adds	r1, #24
   1ffe8:	6809      	ldr	r1, [r1, #0]
   1ffea:	4041      	eors	r1, r0
   1ffec:	ea4f 71f1 	mov.w	r1, r1, ror #31
   1fff0:	6019      	str	r1, [r3, #0]
   1fff2:	681b      	ldr	r3, [r3, #0]
   1fff4:	441a      	add	r2, r3
   1fff6:	69fb      	ldr	r3, [r7, #28]
   1fff8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   1fffc:	441a      	add	r2, r3
   1fffe:	4b45      	ldr	r3, [pc, #276]	; (20114 <gxsha1_transform+0xb78>)
   20000:	4413      	add	r3, r2
   20002:	6a3a      	ldr	r2, [r7, #32]
   20004:	4413      	add	r3, r2
   20006:	623b      	str	r3, [r7, #32]
   20008:	69bb      	ldr	r3, [r7, #24]
   2000a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2000e:	61bb      	str	r3, [r7, #24]
    SHA1_R2(b, c, d, e, a, 39);
   20010:	69fa      	ldr	r2, [r7, #28]
   20012:	69bb      	ldr	r3, [r7, #24]
   20014:	405a      	eors	r2, r3
   20016:	697b      	ldr	r3, [r7, #20]
   20018:	405a      	eors	r2, r3
   2001a:	68fb      	ldr	r3, [r7, #12]
   2001c:	331c      	adds	r3, #28
   2001e:	68f9      	ldr	r1, [r7, #12]
   20020:	3110      	adds	r1, #16
   20022:	6808      	ldr	r0, [r1, #0]
   20024:	68f9      	ldr	r1, [r7, #12]
   20026:	313c      	adds	r1, #60	; 0x3c
   20028:	6809      	ldr	r1, [r1, #0]
   2002a:	4048      	eors	r0, r1
   2002c:	68f9      	ldr	r1, [r7, #12]
   2002e:	3124      	adds	r1, #36	; 0x24
   20030:	6809      	ldr	r1, [r1, #0]
   20032:	4048      	eors	r0, r1
   20034:	68f9      	ldr	r1, [r7, #12]
   20036:	311c      	adds	r1, #28
   20038:	6809      	ldr	r1, [r1, #0]
   2003a:	4041      	eors	r1, r0
   2003c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20040:	6019      	str	r1, [r3, #0]
   20042:	681b      	ldr	r3, [r3, #0]
   20044:	441a      	add	r2, r3
   20046:	6a3b      	ldr	r3, [r7, #32]
   20048:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2004c:	441a      	add	r2, r3
   2004e:	4b31      	ldr	r3, [pc, #196]	; (20114 <gxsha1_transform+0xb78>)
   20050:	4413      	add	r3, r2
   20052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20054:	4413      	add	r3, r2
   20056:	627b      	str	r3, [r7, #36]	; 0x24
   20058:	69fb      	ldr	r3, [r7, #28]
   2005a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2005e:	61fb      	str	r3, [r7, #28]
    SHA1_R3(a, b, c, d, e, 40);
   20060:	6a3a      	ldr	r2, [r7, #32]
   20062:	69fb      	ldr	r3, [r7, #28]
   20064:	431a      	orrs	r2, r3
   20066:	69bb      	ldr	r3, [r7, #24]
   20068:	401a      	ands	r2, r3
   2006a:	6a39      	ldr	r1, [r7, #32]
   2006c:	69fb      	ldr	r3, [r7, #28]
   2006e:	400b      	ands	r3, r1
   20070:	431a      	orrs	r2, r3
   20072:	68fb      	ldr	r3, [r7, #12]
   20074:	3320      	adds	r3, #32
   20076:	68f9      	ldr	r1, [r7, #12]
   20078:	3114      	adds	r1, #20
   2007a:	6808      	ldr	r0, [r1, #0]
   2007c:	68f9      	ldr	r1, [r7, #12]
   2007e:	6809      	ldr	r1, [r1, #0]
   20080:	4048      	eors	r0, r1
   20082:	68f9      	ldr	r1, [r7, #12]
   20084:	3128      	adds	r1, #40	; 0x28
   20086:	6809      	ldr	r1, [r1, #0]
   20088:	4048      	eors	r0, r1
   2008a:	68f9      	ldr	r1, [r7, #12]
   2008c:	3120      	adds	r1, #32
   2008e:	6809      	ldr	r1, [r1, #0]
   20090:	4041      	eors	r1, r0
   20092:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20096:	6019      	str	r1, [r3, #0]
   20098:	681b      	ldr	r3, [r3, #0]
   2009a:	441a      	add	r2, r3
   2009c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2009e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   200a2:	441a      	add	r2, r3
   200a4:	4b1c      	ldr	r3, [pc, #112]	; (20118 <gxsha1_transform+0xb7c>)
   200a6:	4413      	add	r3, r2
   200a8:	697a      	ldr	r2, [r7, #20]
   200aa:	4413      	add	r3, r2
   200ac:	617b      	str	r3, [r7, #20]
   200ae:	6a3b      	ldr	r3, [r7, #32]
   200b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
   200b4:	623b      	str	r3, [r7, #32]
    SHA1_R3(e, a, b, c, d, 41);
   200b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   200b8:	6a3b      	ldr	r3, [r7, #32]
   200ba:	431a      	orrs	r2, r3
   200bc:	69fb      	ldr	r3, [r7, #28]
   200be:	401a      	ands	r2, r3
   200c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   200c2:	6a3b      	ldr	r3, [r7, #32]
   200c4:	400b      	ands	r3, r1
   200c6:	431a      	orrs	r2, r3
   200c8:	68fb      	ldr	r3, [r7, #12]
   200ca:	3324      	adds	r3, #36	; 0x24
   200cc:	68f9      	ldr	r1, [r7, #12]
   200ce:	3118      	adds	r1, #24
   200d0:	6808      	ldr	r0, [r1, #0]
   200d2:	68f9      	ldr	r1, [r7, #12]
   200d4:	3104      	adds	r1, #4
   200d6:	6809      	ldr	r1, [r1, #0]
   200d8:	4048      	eors	r0, r1
   200da:	68f9      	ldr	r1, [r7, #12]
   200dc:	312c      	adds	r1, #44	; 0x2c
   200de:	6809      	ldr	r1, [r1, #0]
   200e0:	4048      	eors	r0, r1
   200e2:	68f9      	ldr	r1, [r7, #12]
   200e4:	3124      	adds	r1, #36	; 0x24
   200e6:	6809      	ldr	r1, [r1, #0]
   200e8:	4041      	eors	r1, r0
   200ea:	ea4f 71f1 	mov.w	r1, r1, ror #31
   200ee:	6019      	str	r1, [r3, #0]
   200f0:	681b      	ldr	r3, [r3, #0]
   200f2:	441a      	add	r2, r3
   200f4:	697b      	ldr	r3, [r7, #20]
   200f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
   200fa:	441a      	add	r2, r3
   200fc:	4b06      	ldr	r3, [pc, #24]	; (20118 <gxsha1_transform+0xb7c>)
   200fe:	4413      	add	r3, r2
   20100:	69ba      	ldr	r2, [r7, #24]
   20102:	4413      	add	r3, r2
   20104:	61bb      	str	r3, [r7, #24]
   20106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20108:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2010c:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R3(d, e, a, b, c, 42);
   2010e:	697a      	ldr	r2, [r7, #20]
   20110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20112:	e003      	b.n	2011c <gxsha1_transform+0xb80>
   20114:	6ed9eba1 	.word	0x6ed9eba1
   20118:	8f1bbcdc 	.word	0x8f1bbcdc
   2011c:	431a      	orrs	r2, r3
   2011e:	6a3b      	ldr	r3, [r7, #32]
   20120:	401a      	ands	r2, r3
   20122:	6979      	ldr	r1, [r7, #20]
   20124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20126:	400b      	ands	r3, r1
   20128:	431a      	orrs	r2, r3
   2012a:	68fb      	ldr	r3, [r7, #12]
   2012c:	3328      	adds	r3, #40	; 0x28
   2012e:	68f9      	ldr	r1, [r7, #12]
   20130:	311c      	adds	r1, #28
   20132:	6808      	ldr	r0, [r1, #0]
   20134:	68f9      	ldr	r1, [r7, #12]
   20136:	3108      	adds	r1, #8
   20138:	6809      	ldr	r1, [r1, #0]
   2013a:	4048      	eors	r0, r1
   2013c:	68f9      	ldr	r1, [r7, #12]
   2013e:	3130      	adds	r1, #48	; 0x30
   20140:	6809      	ldr	r1, [r1, #0]
   20142:	4048      	eors	r0, r1
   20144:	68f9      	ldr	r1, [r7, #12]
   20146:	3128      	adds	r1, #40	; 0x28
   20148:	6809      	ldr	r1, [r1, #0]
   2014a:	4041      	eors	r1, r0
   2014c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20150:	6019      	str	r1, [r3, #0]
   20152:	681b      	ldr	r3, [r3, #0]
   20154:	441a      	add	r2, r3
   20156:	69bb      	ldr	r3, [r7, #24]
   20158:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2015c:	441a      	add	r2, r3
   2015e:	4ba8      	ldr	r3, [pc, #672]	; (20400 <gxsha1_transform+0xe64>)
   20160:	4413      	add	r3, r2
   20162:	69fa      	ldr	r2, [r7, #28]
   20164:	4413      	add	r3, r2
   20166:	61fb      	str	r3, [r7, #28]
   20168:	697b      	ldr	r3, [r7, #20]
   2016a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2016e:	617b      	str	r3, [r7, #20]
    SHA1_R3(c, d, e, a, b, 43);
   20170:	69ba      	ldr	r2, [r7, #24]
   20172:	697b      	ldr	r3, [r7, #20]
   20174:	431a      	orrs	r2, r3
   20176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20178:	401a      	ands	r2, r3
   2017a:	69b9      	ldr	r1, [r7, #24]
   2017c:	697b      	ldr	r3, [r7, #20]
   2017e:	400b      	ands	r3, r1
   20180:	431a      	orrs	r2, r3
   20182:	68fb      	ldr	r3, [r7, #12]
   20184:	332c      	adds	r3, #44	; 0x2c
   20186:	68f9      	ldr	r1, [r7, #12]
   20188:	3120      	adds	r1, #32
   2018a:	6808      	ldr	r0, [r1, #0]
   2018c:	68f9      	ldr	r1, [r7, #12]
   2018e:	310c      	adds	r1, #12
   20190:	6809      	ldr	r1, [r1, #0]
   20192:	4048      	eors	r0, r1
   20194:	68f9      	ldr	r1, [r7, #12]
   20196:	3134      	adds	r1, #52	; 0x34
   20198:	6809      	ldr	r1, [r1, #0]
   2019a:	4048      	eors	r0, r1
   2019c:	68f9      	ldr	r1, [r7, #12]
   2019e:	312c      	adds	r1, #44	; 0x2c
   201a0:	6809      	ldr	r1, [r1, #0]
   201a2:	4041      	eors	r1, r0
   201a4:	ea4f 71f1 	mov.w	r1, r1, ror #31
   201a8:	6019      	str	r1, [r3, #0]
   201aa:	681b      	ldr	r3, [r3, #0]
   201ac:	441a      	add	r2, r3
   201ae:	69fb      	ldr	r3, [r7, #28]
   201b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
   201b4:	441a      	add	r2, r3
   201b6:	4b92      	ldr	r3, [pc, #584]	; (20400 <gxsha1_transform+0xe64>)
   201b8:	4413      	add	r3, r2
   201ba:	6a3a      	ldr	r2, [r7, #32]
   201bc:	4413      	add	r3, r2
   201be:	623b      	str	r3, [r7, #32]
   201c0:	69bb      	ldr	r3, [r7, #24]
   201c2:	ea4f 03b3 	mov.w	r3, r3, ror #2
   201c6:	61bb      	str	r3, [r7, #24]
    SHA1_R3(b, c, d, e, a, 44);
   201c8:	69fa      	ldr	r2, [r7, #28]
   201ca:	69bb      	ldr	r3, [r7, #24]
   201cc:	431a      	orrs	r2, r3
   201ce:	697b      	ldr	r3, [r7, #20]
   201d0:	401a      	ands	r2, r3
   201d2:	69f9      	ldr	r1, [r7, #28]
   201d4:	69bb      	ldr	r3, [r7, #24]
   201d6:	400b      	ands	r3, r1
   201d8:	431a      	orrs	r2, r3
   201da:	68fb      	ldr	r3, [r7, #12]
   201dc:	3330      	adds	r3, #48	; 0x30
   201de:	68f9      	ldr	r1, [r7, #12]
   201e0:	3124      	adds	r1, #36	; 0x24
   201e2:	6808      	ldr	r0, [r1, #0]
   201e4:	68f9      	ldr	r1, [r7, #12]
   201e6:	3110      	adds	r1, #16
   201e8:	6809      	ldr	r1, [r1, #0]
   201ea:	4048      	eors	r0, r1
   201ec:	68f9      	ldr	r1, [r7, #12]
   201ee:	3138      	adds	r1, #56	; 0x38
   201f0:	6809      	ldr	r1, [r1, #0]
   201f2:	4048      	eors	r0, r1
   201f4:	68f9      	ldr	r1, [r7, #12]
   201f6:	3130      	adds	r1, #48	; 0x30
   201f8:	6809      	ldr	r1, [r1, #0]
   201fa:	4041      	eors	r1, r0
   201fc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20200:	6019      	str	r1, [r3, #0]
   20202:	681b      	ldr	r3, [r3, #0]
   20204:	441a      	add	r2, r3
   20206:	6a3b      	ldr	r3, [r7, #32]
   20208:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2020c:	441a      	add	r2, r3
   2020e:	4b7c      	ldr	r3, [pc, #496]	; (20400 <gxsha1_transform+0xe64>)
   20210:	4413      	add	r3, r2
   20212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20214:	4413      	add	r3, r2
   20216:	627b      	str	r3, [r7, #36]	; 0x24
   20218:	69fb      	ldr	r3, [r7, #28]
   2021a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2021e:	61fb      	str	r3, [r7, #28]
    SHA1_R3(a, b, c, d, e, 45);
   20220:	6a3a      	ldr	r2, [r7, #32]
   20222:	69fb      	ldr	r3, [r7, #28]
   20224:	431a      	orrs	r2, r3
   20226:	69bb      	ldr	r3, [r7, #24]
   20228:	401a      	ands	r2, r3
   2022a:	6a39      	ldr	r1, [r7, #32]
   2022c:	69fb      	ldr	r3, [r7, #28]
   2022e:	400b      	ands	r3, r1
   20230:	431a      	orrs	r2, r3
   20232:	68fb      	ldr	r3, [r7, #12]
   20234:	3334      	adds	r3, #52	; 0x34
   20236:	68f9      	ldr	r1, [r7, #12]
   20238:	3128      	adds	r1, #40	; 0x28
   2023a:	6808      	ldr	r0, [r1, #0]
   2023c:	68f9      	ldr	r1, [r7, #12]
   2023e:	3114      	adds	r1, #20
   20240:	6809      	ldr	r1, [r1, #0]
   20242:	4048      	eors	r0, r1
   20244:	68f9      	ldr	r1, [r7, #12]
   20246:	313c      	adds	r1, #60	; 0x3c
   20248:	6809      	ldr	r1, [r1, #0]
   2024a:	4048      	eors	r0, r1
   2024c:	68f9      	ldr	r1, [r7, #12]
   2024e:	3134      	adds	r1, #52	; 0x34
   20250:	6809      	ldr	r1, [r1, #0]
   20252:	4041      	eors	r1, r0
   20254:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20258:	6019      	str	r1, [r3, #0]
   2025a:	681b      	ldr	r3, [r3, #0]
   2025c:	441a      	add	r2, r3
   2025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20260:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20264:	441a      	add	r2, r3
   20266:	4b66      	ldr	r3, [pc, #408]	; (20400 <gxsha1_transform+0xe64>)
   20268:	4413      	add	r3, r2
   2026a:	697a      	ldr	r2, [r7, #20]
   2026c:	4413      	add	r3, r2
   2026e:	617b      	str	r3, [r7, #20]
   20270:	6a3b      	ldr	r3, [r7, #32]
   20272:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20276:	623b      	str	r3, [r7, #32]
    SHA1_R3(e, a, b, c, d, 46);
   20278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2027a:	6a3b      	ldr	r3, [r7, #32]
   2027c:	431a      	orrs	r2, r3
   2027e:	69fb      	ldr	r3, [r7, #28]
   20280:	401a      	ands	r2, r3
   20282:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20284:	6a3b      	ldr	r3, [r7, #32]
   20286:	400b      	ands	r3, r1
   20288:	431a      	orrs	r2, r3
   2028a:	68fb      	ldr	r3, [r7, #12]
   2028c:	3338      	adds	r3, #56	; 0x38
   2028e:	68f9      	ldr	r1, [r7, #12]
   20290:	312c      	adds	r1, #44	; 0x2c
   20292:	6808      	ldr	r0, [r1, #0]
   20294:	68f9      	ldr	r1, [r7, #12]
   20296:	3118      	adds	r1, #24
   20298:	6809      	ldr	r1, [r1, #0]
   2029a:	4048      	eors	r0, r1
   2029c:	68f9      	ldr	r1, [r7, #12]
   2029e:	6809      	ldr	r1, [r1, #0]
   202a0:	4048      	eors	r0, r1
   202a2:	68f9      	ldr	r1, [r7, #12]
   202a4:	3138      	adds	r1, #56	; 0x38
   202a6:	6809      	ldr	r1, [r1, #0]
   202a8:	4041      	eors	r1, r0
   202aa:	ea4f 71f1 	mov.w	r1, r1, ror #31
   202ae:	6019      	str	r1, [r3, #0]
   202b0:	681b      	ldr	r3, [r3, #0]
   202b2:	441a      	add	r2, r3
   202b4:	697b      	ldr	r3, [r7, #20]
   202b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
   202ba:	441a      	add	r2, r3
   202bc:	4b50      	ldr	r3, [pc, #320]	; (20400 <gxsha1_transform+0xe64>)
   202be:	4413      	add	r3, r2
   202c0:	69ba      	ldr	r2, [r7, #24]
   202c2:	4413      	add	r3, r2
   202c4:	61bb      	str	r3, [r7, #24]
   202c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   202c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
   202cc:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R3(d, e, a, b, c, 47);
   202ce:	697a      	ldr	r2, [r7, #20]
   202d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   202d2:	431a      	orrs	r2, r3
   202d4:	6a3b      	ldr	r3, [r7, #32]
   202d6:	401a      	ands	r2, r3
   202d8:	6979      	ldr	r1, [r7, #20]
   202da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   202dc:	400b      	ands	r3, r1
   202de:	431a      	orrs	r2, r3
   202e0:	68fb      	ldr	r3, [r7, #12]
   202e2:	333c      	adds	r3, #60	; 0x3c
   202e4:	68f9      	ldr	r1, [r7, #12]
   202e6:	3130      	adds	r1, #48	; 0x30
   202e8:	6808      	ldr	r0, [r1, #0]
   202ea:	68f9      	ldr	r1, [r7, #12]
   202ec:	311c      	adds	r1, #28
   202ee:	6809      	ldr	r1, [r1, #0]
   202f0:	4048      	eors	r0, r1
   202f2:	68f9      	ldr	r1, [r7, #12]
   202f4:	3104      	adds	r1, #4
   202f6:	6809      	ldr	r1, [r1, #0]
   202f8:	4048      	eors	r0, r1
   202fa:	68f9      	ldr	r1, [r7, #12]
   202fc:	313c      	adds	r1, #60	; 0x3c
   202fe:	6809      	ldr	r1, [r1, #0]
   20300:	4041      	eors	r1, r0
   20302:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20306:	6019      	str	r1, [r3, #0]
   20308:	681b      	ldr	r3, [r3, #0]
   2030a:	441a      	add	r2, r3
   2030c:	69bb      	ldr	r3, [r7, #24]
   2030e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20312:	441a      	add	r2, r3
   20314:	4b3a      	ldr	r3, [pc, #232]	; (20400 <gxsha1_transform+0xe64>)
   20316:	4413      	add	r3, r2
   20318:	69fa      	ldr	r2, [r7, #28]
   2031a:	4413      	add	r3, r2
   2031c:	61fb      	str	r3, [r7, #28]
   2031e:	697b      	ldr	r3, [r7, #20]
   20320:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20324:	617b      	str	r3, [r7, #20]
    SHA1_R3(c, d, e, a, b, 48);
   20326:	69ba      	ldr	r2, [r7, #24]
   20328:	697b      	ldr	r3, [r7, #20]
   2032a:	431a      	orrs	r2, r3
   2032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2032e:	401a      	ands	r2, r3
   20330:	69b9      	ldr	r1, [r7, #24]
   20332:	697b      	ldr	r3, [r7, #20]
   20334:	400b      	ands	r3, r1
   20336:	431a      	orrs	r2, r3
   20338:	68fb      	ldr	r3, [r7, #12]
   2033a:	3334      	adds	r3, #52	; 0x34
   2033c:	6819      	ldr	r1, [r3, #0]
   2033e:	68fb      	ldr	r3, [r7, #12]
   20340:	3320      	adds	r3, #32
   20342:	681b      	ldr	r3, [r3, #0]
   20344:	4059      	eors	r1, r3
   20346:	68fb      	ldr	r3, [r7, #12]
   20348:	3308      	adds	r3, #8
   2034a:	681b      	ldr	r3, [r3, #0]
   2034c:	4059      	eors	r1, r3
   2034e:	68fb      	ldr	r3, [r7, #12]
   20350:	681b      	ldr	r3, [r3, #0]
   20352:	404b      	eors	r3, r1
   20354:	ea4f 71f3 	mov.w	r1, r3, ror #31
   20358:	68fb      	ldr	r3, [r7, #12]
   2035a:	6019      	str	r1, [r3, #0]
   2035c:	68fb      	ldr	r3, [r7, #12]
   2035e:	681b      	ldr	r3, [r3, #0]
   20360:	441a      	add	r2, r3
   20362:	69fb      	ldr	r3, [r7, #28]
   20364:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20368:	441a      	add	r2, r3
   2036a:	4b25      	ldr	r3, [pc, #148]	; (20400 <gxsha1_transform+0xe64>)
   2036c:	4413      	add	r3, r2
   2036e:	6a3a      	ldr	r2, [r7, #32]
   20370:	4413      	add	r3, r2
   20372:	623b      	str	r3, [r7, #32]
   20374:	69bb      	ldr	r3, [r7, #24]
   20376:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2037a:	61bb      	str	r3, [r7, #24]
    SHA1_R3(b, c, d, e, a, 49);
   2037c:	69fa      	ldr	r2, [r7, #28]
   2037e:	69bb      	ldr	r3, [r7, #24]
   20380:	431a      	orrs	r2, r3
   20382:	697b      	ldr	r3, [r7, #20]
   20384:	401a      	ands	r2, r3
   20386:	69f9      	ldr	r1, [r7, #28]
   20388:	69bb      	ldr	r3, [r7, #24]
   2038a:	400b      	ands	r3, r1
   2038c:	431a      	orrs	r2, r3
   2038e:	68fb      	ldr	r3, [r7, #12]
   20390:	3304      	adds	r3, #4
   20392:	68f9      	ldr	r1, [r7, #12]
   20394:	3138      	adds	r1, #56	; 0x38
   20396:	6808      	ldr	r0, [r1, #0]
   20398:	68f9      	ldr	r1, [r7, #12]
   2039a:	3124      	adds	r1, #36	; 0x24
   2039c:	6809      	ldr	r1, [r1, #0]
   2039e:	4048      	eors	r0, r1
   203a0:	68f9      	ldr	r1, [r7, #12]
   203a2:	310c      	adds	r1, #12
   203a4:	6809      	ldr	r1, [r1, #0]
   203a6:	4048      	eors	r0, r1
   203a8:	68f9      	ldr	r1, [r7, #12]
   203aa:	3104      	adds	r1, #4
   203ac:	6809      	ldr	r1, [r1, #0]
   203ae:	4041      	eors	r1, r0
   203b0:	ea4f 71f1 	mov.w	r1, r1, ror #31
   203b4:	6019      	str	r1, [r3, #0]
   203b6:	681b      	ldr	r3, [r3, #0]
   203b8:	441a      	add	r2, r3
   203ba:	6a3b      	ldr	r3, [r7, #32]
   203bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   203c0:	441a      	add	r2, r3
   203c2:	4b0f      	ldr	r3, [pc, #60]	; (20400 <gxsha1_transform+0xe64>)
   203c4:	4413      	add	r3, r2
   203c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   203c8:	4413      	add	r3, r2
   203ca:	627b      	str	r3, [r7, #36]	; 0x24
   203cc:	69fb      	ldr	r3, [r7, #28]
   203ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
   203d2:	61fb      	str	r3, [r7, #28]
    SHA1_R3(a, b, c, d, e, 50);
   203d4:	6a3a      	ldr	r2, [r7, #32]
   203d6:	69fb      	ldr	r3, [r7, #28]
   203d8:	431a      	orrs	r2, r3
   203da:	69bb      	ldr	r3, [r7, #24]
   203dc:	401a      	ands	r2, r3
   203de:	6a39      	ldr	r1, [r7, #32]
   203e0:	69fb      	ldr	r3, [r7, #28]
   203e2:	400b      	ands	r3, r1
   203e4:	431a      	orrs	r2, r3
   203e6:	68fb      	ldr	r3, [r7, #12]
   203e8:	3308      	adds	r3, #8
   203ea:	68f9      	ldr	r1, [r7, #12]
   203ec:	313c      	adds	r1, #60	; 0x3c
   203ee:	6808      	ldr	r0, [r1, #0]
   203f0:	68f9      	ldr	r1, [r7, #12]
   203f2:	3128      	adds	r1, #40	; 0x28
   203f4:	6809      	ldr	r1, [r1, #0]
   203f6:	4048      	eors	r0, r1
   203f8:	68f9      	ldr	r1, [r7, #12]
   203fa:	3110      	adds	r1, #16
   203fc:	6809      	ldr	r1, [r1, #0]
   203fe:	e001      	b.n	20404 <gxsha1_transform+0xe68>
   20400:	8f1bbcdc 	.word	0x8f1bbcdc
   20404:	4048      	eors	r0, r1
   20406:	68f9      	ldr	r1, [r7, #12]
   20408:	3108      	adds	r1, #8
   2040a:	6809      	ldr	r1, [r1, #0]
   2040c:	4041      	eors	r1, r0
   2040e:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20412:	6019      	str	r1, [r3, #0]
   20414:	681b      	ldr	r3, [r3, #0]
   20416:	441a      	add	r2, r3
   20418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2041a:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2041e:	441a      	add	r2, r3
   20420:	4ba8      	ldr	r3, [pc, #672]	; (206c4 <gxsha1_transform+0x1128>)
   20422:	4413      	add	r3, r2
   20424:	697a      	ldr	r2, [r7, #20]
   20426:	4413      	add	r3, r2
   20428:	617b      	str	r3, [r7, #20]
   2042a:	6a3b      	ldr	r3, [r7, #32]
   2042c:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20430:	623b      	str	r3, [r7, #32]
    SHA1_R3(e, a, b, c, d, 51);
   20432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20434:	6a3b      	ldr	r3, [r7, #32]
   20436:	431a      	orrs	r2, r3
   20438:	69fb      	ldr	r3, [r7, #28]
   2043a:	401a      	ands	r2, r3
   2043c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2043e:	6a3b      	ldr	r3, [r7, #32]
   20440:	400b      	ands	r3, r1
   20442:	431a      	orrs	r2, r3
   20444:	68fb      	ldr	r3, [r7, #12]
   20446:	330c      	adds	r3, #12
   20448:	68f9      	ldr	r1, [r7, #12]
   2044a:	6808      	ldr	r0, [r1, #0]
   2044c:	68f9      	ldr	r1, [r7, #12]
   2044e:	312c      	adds	r1, #44	; 0x2c
   20450:	6809      	ldr	r1, [r1, #0]
   20452:	4048      	eors	r0, r1
   20454:	68f9      	ldr	r1, [r7, #12]
   20456:	3114      	adds	r1, #20
   20458:	6809      	ldr	r1, [r1, #0]
   2045a:	4048      	eors	r0, r1
   2045c:	68f9      	ldr	r1, [r7, #12]
   2045e:	310c      	adds	r1, #12
   20460:	6809      	ldr	r1, [r1, #0]
   20462:	4041      	eors	r1, r0
   20464:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20468:	6019      	str	r1, [r3, #0]
   2046a:	681b      	ldr	r3, [r3, #0]
   2046c:	441a      	add	r2, r3
   2046e:	697b      	ldr	r3, [r7, #20]
   20470:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20474:	441a      	add	r2, r3
   20476:	4b93      	ldr	r3, [pc, #588]	; (206c4 <gxsha1_transform+0x1128>)
   20478:	4413      	add	r3, r2
   2047a:	69ba      	ldr	r2, [r7, #24]
   2047c:	4413      	add	r3, r2
   2047e:	61bb      	str	r3, [r7, #24]
   20480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20482:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20486:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R3(d, e, a, b, c, 52);
   20488:	697a      	ldr	r2, [r7, #20]
   2048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2048c:	431a      	orrs	r2, r3
   2048e:	6a3b      	ldr	r3, [r7, #32]
   20490:	401a      	ands	r2, r3
   20492:	6979      	ldr	r1, [r7, #20]
   20494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20496:	400b      	ands	r3, r1
   20498:	431a      	orrs	r2, r3
   2049a:	68fb      	ldr	r3, [r7, #12]
   2049c:	3310      	adds	r3, #16
   2049e:	68f9      	ldr	r1, [r7, #12]
   204a0:	3104      	adds	r1, #4
   204a2:	6808      	ldr	r0, [r1, #0]
   204a4:	68f9      	ldr	r1, [r7, #12]
   204a6:	3130      	adds	r1, #48	; 0x30
   204a8:	6809      	ldr	r1, [r1, #0]
   204aa:	4048      	eors	r0, r1
   204ac:	68f9      	ldr	r1, [r7, #12]
   204ae:	3118      	adds	r1, #24
   204b0:	6809      	ldr	r1, [r1, #0]
   204b2:	4048      	eors	r0, r1
   204b4:	68f9      	ldr	r1, [r7, #12]
   204b6:	3110      	adds	r1, #16
   204b8:	6809      	ldr	r1, [r1, #0]
   204ba:	4041      	eors	r1, r0
   204bc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   204c0:	6019      	str	r1, [r3, #0]
   204c2:	681b      	ldr	r3, [r3, #0]
   204c4:	441a      	add	r2, r3
   204c6:	69bb      	ldr	r3, [r7, #24]
   204c8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   204cc:	441a      	add	r2, r3
   204ce:	4b7d      	ldr	r3, [pc, #500]	; (206c4 <gxsha1_transform+0x1128>)
   204d0:	4413      	add	r3, r2
   204d2:	69fa      	ldr	r2, [r7, #28]
   204d4:	4413      	add	r3, r2
   204d6:	61fb      	str	r3, [r7, #28]
   204d8:	697b      	ldr	r3, [r7, #20]
   204da:	ea4f 03b3 	mov.w	r3, r3, ror #2
   204de:	617b      	str	r3, [r7, #20]
    SHA1_R3(c, d, e, a, b, 53);
   204e0:	69ba      	ldr	r2, [r7, #24]
   204e2:	697b      	ldr	r3, [r7, #20]
   204e4:	431a      	orrs	r2, r3
   204e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   204e8:	401a      	ands	r2, r3
   204ea:	69b9      	ldr	r1, [r7, #24]
   204ec:	697b      	ldr	r3, [r7, #20]
   204ee:	400b      	ands	r3, r1
   204f0:	431a      	orrs	r2, r3
   204f2:	68fb      	ldr	r3, [r7, #12]
   204f4:	3314      	adds	r3, #20
   204f6:	68f9      	ldr	r1, [r7, #12]
   204f8:	3108      	adds	r1, #8
   204fa:	6808      	ldr	r0, [r1, #0]
   204fc:	68f9      	ldr	r1, [r7, #12]
   204fe:	3134      	adds	r1, #52	; 0x34
   20500:	6809      	ldr	r1, [r1, #0]
   20502:	4048      	eors	r0, r1
   20504:	68f9      	ldr	r1, [r7, #12]
   20506:	311c      	adds	r1, #28
   20508:	6809      	ldr	r1, [r1, #0]
   2050a:	4048      	eors	r0, r1
   2050c:	68f9      	ldr	r1, [r7, #12]
   2050e:	3114      	adds	r1, #20
   20510:	6809      	ldr	r1, [r1, #0]
   20512:	4041      	eors	r1, r0
   20514:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20518:	6019      	str	r1, [r3, #0]
   2051a:	681b      	ldr	r3, [r3, #0]
   2051c:	441a      	add	r2, r3
   2051e:	69fb      	ldr	r3, [r7, #28]
   20520:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20524:	441a      	add	r2, r3
   20526:	4b67      	ldr	r3, [pc, #412]	; (206c4 <gxsha1_transform+0x1128>)
   20528:	4413      	add	r3, r2
   2052a:	6a3a      	ldr	r2, [r7, #32]
   2052c:	4413      	add	r3, r2
   2052e:	623b      	str	r3, [r7, #32]
   20530:	69bb      	ldr	r3, [r7, #24]
   20532:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20536:	61bb      	str	r3, [r7, #24]
    SHA1_R3(b, c, d, e, a, 54);
   20538:	69fa      	ldr	r2, [r7, #28]
   2053a:	69bb      	ldr	r3, [r7, #24]
   2053c:	431a      	orrs	r2, r3
   2053e:	697b      	ldr	r3, [r7, #20]
   20540:	401a      	ands	r2, r3
   20542:	69f9      	ldr	r1, [r7, #28]
   20544:	69bb      	ldr	r3, [r7, #24]
   20546:	400b      	ands	r3, r1
   20548:	431a      	orrs	r2, r3
   2054a:	68fb      	ldr	r3, [r7, #12]
   2054c:	3318      	adds	r3, #24
   2054e:	68f9      	ldr	r1, [r7, #12]
   20550:	310c      	adds	r1, #12
   20552:	6808      	ldr	r0, [r1, #0]
   20554:	68f9      	ldr	r1, [r7, #12]
   20556:	3138      	adds	r1, #56	; 0x38
   20558:	6809      	ldr	r1, [r1, #0]
   2055a:	4048      	eors	r0, r1
   2055c:	68f9      	ldr	r1, [r7, #12]
   2055e:	3120      	adds	r1, #32
   20560:	6809      	ldr	r1, [r1, #0]
   20562:	4048      	eors	r0, r1
   20564:	68f9      	ldr	r1, [r7, #12]
   20566:	3118      	adds	r1, #24
   20568:	6809      	ldr	r1, [r1, #0]
   2056a:	4041      	eors	r1, r0
   2056c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20570:	6019      	str	r1, [r3, #0]
   20572:	681b      	ldr	r3, [r3, #0]
   20574:	441a      	add	r2, r3
   20576:	6a3b      	ldr	r3, [r7, #32]
   20578:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2057c:	441a      	add	r2, r3
   2057e:	4b51      	ldr	r3, [pc, #324]	; (206c4 <gxsha1_transform+0x1128>)
   20580:	4413      	add	r3, r2
   20582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20584:	4413      	add	r3, r2
   20586:	627b      	str	r3, [r7, #36]	; 0x24
   20588:	69fb      	ldr	r3, [r7, #28]
   2058a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2058e:	61fb      	str	r3, [r7, #28]
    SHA1_R3(a, b, c, d, e, 55);
   20590:	6a3a      	ldr	r2, [r7, #32]
   20592:	69fb      	ldr	r3, [r7, #28]
   20594:	431a      	orrs	r2, r3
   20596:	69bb      	ldr	r3, [r7, #24]
   20598:	401a      	ands	r2, r3
   2059a:	6a39      	ldr	r1, [r7, #32]
   2059c:	69fb      	ldr	r3, [r7, #28]
   2059e:	400b      	ands	r3, r1
   205a0:	431a      	orrs	r2, r3
   205a2:	68fb      	ldr	r3, [r7, #12]
   205a4:	331c      	adds	r3, #28
   205a6:	68f9      	ldr	r1, [r7, #12]
   205a8:	3110      	adds	r1, #16
   205aa:	6808      	ldr	r0, [r1, #0]
   205ac:	68f9      	ldr	r1, [r7, #12]
   205ae:	313c      	adds	r1, #60	; 0x3c
   205b0:	6809      	ldr	r1, [r1, #0]
   205b2:	4048      	eors	r0, r1
   205b4:	68f9      	ldr	r1, [r7, #12]
   205b6:	3124      	adds	r1, #36	; 0x24
   205b8:	6809      	ldr	r1, [r1, #0]
   205ba:	4048      	eors	r0, r1
   205bc:	68f9      	ldr	r1, [r7, #12]
   205be:	311c      	adds	r1, #28
   205c0:	6809      	ldr	r1, [r1, #0]
   205c2:	4041      	eors	r1, r0
   205c4:	ea4f 71f1 	mov.w	r1, r1, ror #31
   205c8:	6019      	str	r1, [r3, #0]
   205ca:	681b      	ldr	r3, [r3, #0]
   205cc:	441a      	add	r2, r3
   205ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   205d0:	ea4f 63f3 	mov.w	r3, r3, ror #27
   205d4:	441a      	add	r2, r3
   205d6:	4b3b      	ldr	r3, [pc, #236]	; (206c4 <gxsha1_transform+0x1128>)
   205d8:	4413      	add	r3, r2
   205da:	697a      	ldr	r2, [r7, #20]
   205dc:	4413      	add	r3, r2
   205de:	617b      	str	r3, [r7, #20]
   205e0:	6a3b      	ldr	r3, [r7, #32]
   205e2:	ea4f 03b3 	mov.w	r3, r3, ror #2
   205e6:	623b      	str	r3, [r7, #32]
    SHA1_R3(e, a, b, c, d, 56);
   205e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   205ea:	6a3b      	ldr	r3, [r7, #32]
   205ec:	431a      	orrs	r2, r3
   205ee:	69fb      	ldr	r3, [r7, #28]
   205f0:	401a      	ands	r2, r3
   205f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   205f4:	6a3b      	ldr	r3, [r7, #32]
   205f6:	400b      	ands	r3, r1
   205f8:	431a      	orrs	r2, r3
   205fa:	68fb      	ldr	r3, [r7, #12]
   205fc:	3320      	adds	r3, #32
   205fe:	68f9      	ldr	r1, [r7, #12]
   20600:	3114      	adds	r1, #20
   20602:	6808      	ldr	r0, [r1, #0]
   20604:	68f9      	ldr	r1, [r7, #12]
   20606:	6809      	ldr	r1, [r1, #0]
   20608:	4048      	eors	r0, r1
   2060a:	68f9      	ldr	r1, [r7, #12]
   2060c:	3128      	adds	r1, #40	; 0x28
   2060e:	6809      	ldr	r1, [r1, #0]
   20610:	4048      	eors	r0, r1
   20612:	68f9      	ldr	r1, [r7, #12]
   20614:	3120      	adds	r1, #32
   20616:	6809      	ldr	r1, [r1, #0]
   20618:	4041      	eors	r1, r0
   2061a:	ea4f 71f1 	mov.w	r1, r1, ror #31
   2061e:	6019      	str	r1, [r3, #0]
   20620:	681b      	ldr	r3, [r3, #0]
   20622:	441a      	add	r2, r3
   20624:	697b      	ldr	r3, [r7, #20]
   20626:	ea4f 63f3 	mov.w	r3, r3, ror #27
   2062a:	441a      	add	r2, r3
   2062c:	4b25      	ldr	r3, [pc, #148]	; (206c4 <gxsha1_transform+0x1128>)
   2062e:	4413      	add	r3, r2
   20630:	69ba      	ldr	r2, [r7, #24]
   20632:	4413      	add	r3, r2
   20634:	61bb      	str	r3, [r7, #24]
   20636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20638:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2063c:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R3(d, e, a, b, c, 57);
   2063e:	697a      	ldr	r2, [r7, #20]
   20640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20642:	431a      	orrs	r2, r3
   20644:	6a3b      	ldr	r3, [r7, #32]
   20646:	401a      	ands	r2, r3
   20648:	6979      	ldr	r1, [r7, #20]
   2064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2064c:	400b      	ands	r3, r1
   2064e:	431a      	orrs	r2, r3
   20650:	68fb      	ldr	r3, [r7, #12]
   20652:	3324      	adds	r3, #36	; 0x24
   20654:	68f9      	ldr	r1, [r7, #12]
   20656:	3118      	adds	r1, #24
   20658:	6808      	ldr	r0, [r1, #0]
   2065a:	68f9      	ldr	r1, [r7, #12]
   2065c:	3104      	adds	r1, #4
   2065e:	6809      	ldr	r1, [r1, #0]
   20660:	4048      	eors	r0, r1
   20662:	68f9      	ldr	r1, [r7, #12]
   20664:	312c      	adds	r1, #44	; 0x2c
   20666:	6809      	ldr	r1, [r1, #0]
   20668:	4048      	eors	r0, r1
   2066a:	68f9      	ldr	r1, [r7, #12]
   2066c:	3124      	adds	r1, #36	; 0x24
   2066e:	6809      	ldr	r1, [r1, #0]
   20670:	4041      	eors	r1, r0
   20672:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20676:	6019      	str	r1, [r3, #0]
   20678:	681b      	ldr	r3, [r3, #0]
   2067a:	441a      	add	r2, r3
   2067c:	69bb      	ldr	r3, [r7, #24]
   2067e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20682:	441a      	add	r2, r3
   20684:	4b0f      	ldr	r3, [pc, #60]	; (206c4 <gxsha1_transform+0x1128>)
   20686:	4413      	add	r3, r2
   20688:	69fa      	ldr	r2, [r7, #28]
   2068a:	4413      	add	r3, r2
   2068c:	61fb      	str	r3, [r7, #28]
   2068e:	697b      	ldr	r3, [r7, #20]
   20690:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20694:	617b      	str	r3, [r7, #20]
    SHA1_R3(c, d, e, a, b, 58);
   20696:	69ba      	ldr	r2, [r7, #24]
   20698:	697b      	ldr	r3, [r7, #20]
   2069a:	431a      	orrs	r2, r3
   2069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2069e:	401a      	ands	r2, r3
   206a0:	69b9      	ldr	r1, [r7, #24]
   206a2:	697b      	ldr	r3, [r7, #20]
   206a4:	400b      	ands	r3, r1
   206a6:	431a      	orrs	r2, r3
   206a8:	68fb      	ldr	r3, [r7, #12]
   206aa:	3328      	adds	r3, #40	; 0x28
   206ac:	68f9      	ldr	r1, [r7, #12]
   206ae:	311c      	adds	r1, #28
   206b0:	6808      	ldr	r0, [r1, #0]
   206b2:	68f9      	ldr	r1, [r7, #12]
   206b4:	3108      	adds	r1, #8
   206b6:	6809      	ldr	r1, [r1, #0]
   206b8:	4048      	eors	r0, r1
   206ba:	68f9      	ldr	r1, [r7, #12]
   206bc:	3130      	adds	r1, #48	; 0x30
   206be:	6809      	ldr	r1, [r1, #0]
   206c0:	4048      	eors	r0, r1
   206c2:	e001      	b.n	206c8 <gxsha1_transform+0x112c>
   206c4:	8f1bbcdc 	.word	0x8f1bbcdc
   206c8:	68f9      	ldr	r1, [r7, #12]
   206ca:	3128      	adds	r1, #40	; 0x28
   206cc:	6809      	ldr	r1, [r1, #0]
   206ce:	4041      	eors	r1, r0
   206d0:	ea4f 71f1 	mov.w	r1, r1, ror #31
   206d4:	6019      	str	r1, [r3, #0]
   206d6:	681b      	ldr	r3, [r3, #0]
   206d8:	441a      	add	r2, r3
   206da:	69fb      	ldr	r3, [r7, #28]
   206dc:	ea4f 63f3 	mov.w	r3, r3, ror #27
   206e0:	441a      	add	r2, r3
   206e2:	4ba8      	ldr	r3, [pc, #672]	; (20984 <gxsha1_transform+0x13e8>)
   206e4:	4413      	add	r3, r2
   206e6:	6a3a      	ldr	r2, [r7, #32]
   206e8:	4413      	add	r3, r2
   206ea:	623b      	str	r3, [r7, #32]
   206ec:	69bb      	ldr	r3, [r7, #24]
   206ee:	ea4f 03b3 	mov.w	r3, r3, ror #2
   206f2:	61bb      	str	r3, [r7, #24]
    SHA1_R3(b, c, d, e, a, 59);
   206f4:	69fa      	ldr	r2, [r7, #28]
   206f6:	69bb      	ldr	r3, [r7, #24]
   206f8:	431a      	orrs	r2, r3
   206fa:	697b      	ldr	r3, [r7, #20]
   206fc:	401a      	ands	r2, r3
   206fe:	69f9      	ldr	r1, [r7, #28]
   20700:	69bb      	ldr	r3, [r7, #24]
   20702:	400b      	ands	r3, r1
   20704:	431a      	orrs	r2, r3
   20706:	68fb      	ldr	r3, [r7, #12]
   20708:	332c      	adds	r3, #44	; 0x2c
   2070a:	68f9      	ldr	r1, [r7, #12]
   2070c:	3120      	adds	r1, #32
   2070e:	6808      	ldr	r0, [r1, #0]
   20710:	68f9      	ldr	r1, [r7, #12]
   20712:	310c      	adds	r1, #12
   20714:	6809      	ldr	r1, [r1, #0]
   20716:	4048      	eors	r0, r1
   20718:	68f9      	ldr	r1, [r7, #12]
   2071a:	3134      	adds	r1, #52	; 0x34
   2071c:	6809      	ldr	r1, [r1, #0]
   2071e:	4048      	eors	r0, r1
   20720:	68f9      	ldr	r1, [r7, #12]
   20722:	312c      	adds	r1, #44	; 0x2c
   20724:	6809      	ldr	r1, [r1, #0]
   20726:	4041      	eors	r1, r0
   20728:	ea4f 71f1 	mov.w	r1, r1, ror #31
   2072c:	6019      	str	r1, [r3, #0]
   2072e:	681b      	ldr	r3, [r3, #0]
   20730:	441a      	add	r2, r3
   20732:	6a3b      	ldr	r3, [r7, #32]
   20734:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20738:	441a      	add	r2, r3
   2073a:	4b92      	ldr	r3, [pc, #584]	; (20984 <gxsha1_transform+0x13e8>)
   2073c:	4413      	add	r3, r2
   2073e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20740:	4413      	add	r3, r2
   20742:	627b      	str	r3, [r7, #36]	; 0x24
   20744:	69fb      	ldr	r3, [r7, #28]
   20746:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2074a:	61fb      	str	r3, [r7, #28]
    SHA1_R4(a, b, c, d, e, 60);
   2074c:	6a3a      	ldr	r2, [r7, #32]
   2074e:	69fb      	ldr	r3, [r7, #28]
   20750:	405a      	eors	r2, r3
   20752:	69bb      	ldr	r3, [r7, #24]
   20754:	405a      	eors	r2, r3
   20756:	68fb      	ldr	r3, [r7, #12]
   20758:	3330      	adds	r3, #48	; 0x30
   2075a:	68f9      	ldr	r1, [r7, #12]
   2075c:	3124      	adds	r1, #36	; 0x24
   2075e:	6808      	ldr	r0, [r1, #0]
   20760:	68f9      	ldr	r1, [r7, #12]
   20762:	3110      	adds	r1, #16
   20764:	6809      	ldr	r1, [r1, #0]
   20766:	4048      	eors	r0, r1
   20768:	68f9      	ldr	r1, [r7, #12]
   2076a:	3138      	adds	r1, #56	; 0x38
   2076c:	6809      	ldr	r1, [r1, #0]
   2076e:	4048      	eors	r0, r1
   20770:	68f9      	ldr	r1, [r7, #12]
   20772:	3130      	adds	r1, #48	; 0x30
   20774:	6809      	ldr	r1, [r1, #0]
   20776:	4041      	eors	r1, r0
   20778:	ea4f 71f1 	mov.w	r1, r1, ror #31
   2077c:	6019      	str	r1, [r3, #0]
   2077e:	681b      	ldr	r3, [r3, #0]
   20780:	441a      	add	r2, r3
   20782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20784:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20788:	441a      	add	r2, r3
   2078a:	4b7f      	ldr	r3, [pc, #508]	; (20988 <gxsha1_transform+0x13ec>)
   2078c:	4413      	add	r3, r2
   2078e:	697a      	ldr	r2, [r7, #20]
   20790:	4413      	add	r3, r2
   20792:	617b      	str	r3, [r7, #20]
   20794:	6a3b      	ldr	r3, [r7, #32]
   20796:	ea4f 03b3 	mov.w	r3, r3, ror #2
   2079a:	623b      	str	r3, [r7, #32]
    SHA1_R4(e, a, b, c, d, 61);
   2079c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2079e:	6a3b      	ldr	r3, [r7, #32]
   207a0:	405a      	eors	r2, r3
   207a2:	69fb      	ldr	r3, [r7, #28]
   207a4:	405a      	eors	r2, r3
   207a6:	68fb      	ldr	r3, [r7, #12]
   207a8:	3334      	adds	r3, #52	; 0x34
   207aa:	68f9      	ldr	r1, [r7, #12]
   207ac:	3128      	adds	r1, #40	; 0x28
   207ae:	6808      	ldr	r0, [r1, #0]
   207b0:	68f9      	ldr	r1, [r7, #12]
   207b2:	3114      	adds	r1, #20
   207b4:	6809      	ldr	r1, [r1, #0]
   207b6:	4048      	eors	r0, r1
   207b8:	68f9      	ldr	r1, [r7, #12]
   207ba:	313c      	adds	r1, #60	; 0x3c
   207bc:	6809      	ldr	r1, [r1, #0]
   207be:	4048      	eors	r0, r1
   207c0:	68f9      	ldr	r1, [r7, #12]
   207c2:	3134      	adds	r1, #52	; 0x34
   207c4:	6809      	ldr	r1, [r1, #0]
   207c6:	4041      	eors	r1, r0
   207c8:	ea4f 71f1 	mov.w	r1, r1, ror #31
   207cc:	6019      	str	r1, [r3, #0]
   207ce:	681b      	ldr	r3, [r3, #0]
   207d0:	441a      	add	r2, r3
   207d2:	697b      	ldr	r3, [r7, #20]
   207d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
   207d8:	441a      	add	r2, r3
   207da:	4b6b      	ldr	r3, [pc, #428]	; (20988 <gxsha1_transform+0x13ec>)
   207dc:	4413      	add	r3, r2
   207de:	69ba      	ldr	r2, [r7, #24]
   207e0:	4413      	add	r3, r2
   207e2:	61bb      	str	r3, [r7, #24]
   207e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   207e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
   207ea:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R4(d, e, a, b, c, 62);
   207ec:	697a      	ldr	r2, [r7, #20]
   207ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   207f0:	405a      	eors	r2, r3
   207f2:	6a3b      	ldr	r3, [r7, #32]
   207f4:	405a      	eors	r2, r3
   207f6:	68fb      	ldr	r3, [r7, #12]
   207f8:	3338      	adds	r3, #56	; 0x38
   207fa:	68f9      	ldr	r1, [r7, #12]
   207fc:	312c      	adds	r1, #44	; 0x2c
   207fe:	6808      	ldr	r0, [r1, #0]
   20800:	68f9      	ldr	r1, [r7, #12]
   20802:	3118      	adds	r1, #24
   20804:	6809      	ldr	r1, [r1, #0]
   20806:	4048      	eors	r0, r1
   20808:	68f9      	ldr	r1, [r7, #12]
   2080a:	6809      	ldr	r1, [r1, #0]
   2080c:	4048      	eors	r0, r1
   2080e:	68f9      	ldr	r1, [r7, #12]
   20810:	3138      	adds	r1, #56	; 0x38
   20812:	6809      	ldr	r1, [r1, #0]
   20814:	4041      	eors	r1, r0
   20816:	ea4f 71f1 	mov.w	r1, r1, ror #31
   2081a:	6019      	str	r1, [r3, #0]
   2081c:	681b      	ldr	r3, [r3, #0]
   2081e:	441a      	add	r2, r3
   20820:	69bb      	ldr	r3, [r7, #24]
   20822:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20826:	441a      	add	r2, r3
   20828:	4b57      	ldr	r3, [pc, #348]	; (20988 <gxsha1_transform+0x13ec>)
   2082a:	4413      	add	r3, r2
   2082c:	69fa      	ldr	r2, [r7, #28]
   2082e:	4413      	add	r3, r2
   20830:	61fb      	str	r3, [r7, #28]
   20832:	697b      	ldr	r3, [r7, #20]
   20834:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20838:	617b      	str	r3, [r7, #20]
    SHA1_R4(c, d, e, a, b, 63);
   2083a:	69ba      	ldr	r2, [r7, #24]
   2083c:	697b      	ldr	r3, [r7, #20]
   2083e:	405a      	eors	r2, r3
   20840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20842:	405a      	eors	r2, r3
   20844:	68fb      	ldr	r3, [r7, #12]
   20846:	333c      	adds	r3, #60	; 0x3c
   20848:	68f9      	ldr	r1, [r7, #12]
   2084a:	3130      	adds	r1, #48	; 0x30
   2084c:	6808      	ldr	r0, [r1, #0]
   2084e:	68f9      	ldr	r1, [r7, #12]
   20850:	311c      	adds	r1, #28
   20852:	6809      	ldr	r1, [r1, #0]
   20854:	4048      	eors	r0, r1
   20856:	68f9      	ldr	r1, [r7, #12]
   20858:	3104      	adds	r1, #4
   2085a:	6809      	ldr	r1, [r1, #0]
   2085c:	4048      	eors	r0, r1
   2085e:	68f9      	ldr	r1, [r7, #12]
   20860:	313c      	adds	r1, #60	; 0x3c
   20862:	6809      	ldr	r1, [r1, #0]
   20864:	4041      	eors	r1, r0
   20866:	ea4f 71f1 	mov.w	r1, r1, ror #31
   2086a:	6019      	str	r1, [r3, #0]
   2086c:	681b      	ldr	r3, [r3, #0]
   2086e:	441a      	add	r2, r3
   20870:	69fb      	ldr	r3, [r7, #28]
   20872:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20876:	441a      	add	r2, r3
   20878:	4b43      	ldr	r3, [pc, #268]	; (20988 <gxsha1_transform+0x13ec>)
   2087a:	4413      	add	r3, r2
   2087c:	6a3a      	ldr	r2, [r7, #32]
   2087e:	4413      	add	r3, r2
   20880:	623b      	str	r3, [r7, #32]
   20882:	69bb      	ldr	r3, [r7, #24]
   20884:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20888:	61bb      	str	r3, [r7, #24]
    SHA1_R4(b, c, d, e, a, 64);
   2088a:	69fa      	ldr	r2, [r7, #28]
   2088c:	69bb      	ldr	r3, [r7, #24]
   2088e:	405a      	eors	r2, r3
   20890:	697b      	ldr	r3, [r7, #20]
   20892:	405a      	eors	r2, r3
   20894:	68fb      	ldr	r3, [r7, #12]
   20896:	3334      	adds	r3, #52	; 0x34
   20898:	6819      	ldr	r1, [r3, #0]
   2089a:	68fb      	ldr	r3, [r7, #12]
   2089c:	3320      	adds	r3, #32
   2089e:	681b      	ldr	r3, [r3, #0]
   208a0:	4059      	eors	r1, r3
   208a2:	68fb      	ldr	r3, [r7, #12]
   208a4:	3308      	adds	r3, #8
   208a6:	681b      	ldr	r3, [r3, #0]
   208a8:	4059      	eors	r1, r3
   208aa:	68fb      	ldr	r3, [r7, #12]
   208ac:	681b      	ldr	r3, [r3, #0]
   208ae:	404b      	eors	r3, r1
   208b0:	ea4f 71f3 	mov.w	r1, r3, ror #31
   208b4:	68fb      	ldr	r3, [r7, #12]
   208b6:	6019      	str	r1, [r3, #0]
   208b8:	68fb      	ldr	r3, [r7, #12]
   208ba:	681b      	ldr	r3, [r3, #0]
   208bc:	441a      	add	r2, r3
   208be:	6a3b      	ldr	r3, [r7, #32]
   208c0:	ea4f 63f3 	mov.w	r3, r3, ror #27
   208c4:	441a      	add	r2, r3
   208c6:	4b30      	ldr	r3, [pc, #192]	; (20988 <gxsha1_transform+0x13ec>)
   208c8:	4413      	add	r3, r2
   208ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   208cc:	4413      	add	r3, r2
   208ce:	627b      	str	r3, [r7, #36]	; 0x24
   208d0:	69fb      	ldr	r3, [r7, #28]
   208d2:	ea4f 03b3 	mov.w	r3, r3, ror #2
   208d6:	61fb      	str	r3, [r7, #28]
    SHA1_R4(a, b, c, d, e, 65);
   208d8:	6a3a      	ldr	r2, [r7, #32]
   208da:	69fb      	ldr	r3, [r7, #28]
   208dc:	405a      	eors	r2, r3
   208de:	69bb      	ldr	r3, [r7, #24]
   208e0:	405a      	eors	r2, r3
   208e2:	68fb      	ldr	r3, [r7, #12]
   208e4:	3304      	adds	r3, #4
   208e6:	68f9      	ldr	r1, [r7, #12]
   208e8:	3138      	adds	r1, #56	; 0x38
   208ea:	6808      	ldr	r0, [r1, #0]
   208ec:	68f9      	ldr	r1, [r7, #12]
   208ee:	3124      	adds	r1, #36	; 0x24
   208f0:	6809      	ldr	r1, [r1, #0]
   208f2:	4048      	eors	r0, r1
   208f4:	68f9      	ldr	r1, [r7, #12]
   208f6:	310c      	adds	r1, #12
   208f8:	6809      	ldr	r1, [r1, #0]
   208fa:	4048      	eors	r0, r1
   208fc:	68f9      	ldr	r1, [r7, #12]
   208fe:	3104      	adds	r1, #4
   20900:	6809      	ldr	r1, [r1, #0]
   20902:	4041      	eors	r1, r0
   20904:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20908:	6019      	str	r1, [r3, #0]
   2090a:	681b      	ldr	r3, [r3, #0]
   2090c:	441a      	add	r2, r3
   2090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20910:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20914:	441a      	add	r2, r3
   20916:	4b1c      	ldr	r3, [pc, #112]	; (20988 <gxsha1_transform+0x13ec>)
   20918:	4413      	add	r3, r2
   2091a:	697a      	ldr	r2, [r7, #20]
   2091c:	4413      	add	r3, r2
   2091e:	617b      	str	r3, [r7, #20]
   20920:	6a3b      	ldr	r3, [r7, #32]
   20922:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20926:	623b      	str	r3, [r7, #32]
    SHA1_R4(e, a, b, c, d, 66);
   20928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2092a:	6a3b      	ldr	r3, [r7, #32]
   2092c:	405a      	eors	r2, r3
   2092e:	69fb      	ldr	r3, [r7, #28]
   20930:	405a      	eors	r2, r3
   20932:	68fb      	ldr	r3, [r7, #12]
   20934:	3308      	adds	r3, #8
   20936:	68f9      	ldr	r1, [r7, #12]
   20938:	313c      	adds	r1, #60	; 0x3c
   2093a:	6808      	ldr	r0, [r1, #0]
   2093c:	68f9      	ldr	r1, [r7, #12]
   2093e:	3128      	adds	r1, #40	; 0x28
   20940:	6809      	ldr	r1, [r1, #0]
   20942:	4048      	eors	r0, r1
   20944:	68f9      	ldr	r1, [r7, #12]
   20946:	3110      	adds	r1, #16
   20948:	6809      	ldr	r1, [r1, #0]
   2094a:	4048      	eors	r0, r1
   2094c:	68f9      	ldr	r1, [r7, #12]
   2094e:	3108      	adds	r1, #8
   20950:	6809      	ldr	r1, [r1, #0]
   20952:	4041      	eors	r1, r0
   20954:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20958:	6019      	str	r1, [r3, #0]
   2095a:	681b      	ldr	r3, [r3, #0]
   2095c:	441a      	add	r2, r3
   2095e:	697b      	ldr	r3, [r7, #20]
   20960:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20964:	441a      	add	r2, r3
   20966:	4b08      	ldr	r3, [pc, #32]	; (20988 <gxsha1_transform+0x13ec>)
   20968:	4413      	add	r3, r2
   2096a:	69ba      	ldr	r2, [r7, #24]
   2096c:	4413      	add	r3, r2
   2096e:	61bb      	str	r3, [r7, #24]
   20970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20972:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20976:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R4(d, e, a, b, c, 67);
   20978:	697a      	ldr	r2, [r7, #20]
   2097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2097c:	405a      	eors	r2, r3
   2097e:	6a3b      	ldr	r3, [r7, #32]
   20980:	405a      	eors	r2, r3
   20982:	e003      	b.n	2098c <gxsha1_transform+0x13f0>
   20984:	8f1bbcdc 	.word	0x8f1bbcdc
   20988:	ca62c1d6 	.word	0xca62c1d6
   2098c:	68fb      	ldr	r3, [r7, #12]
   2098e:	330c      	adds	r3, #12
   20990:	68f9      	ldr	r1, [r7, #12]
   20992:	6808      	ldr	r0, [r1, #0]
   20994:	68f9      	ldr	r1, [r7, #12]
   20996:	312c      	adds	r1, #44	; 0x2c
   20998:	6809      	ldr	r1, [r1, #0]
   2099a:	4048      	eors	r0, r1
   2099c:	68f9      	ldr	r1, [r7, #12]
   2099e:	3114      	adds	r1, #20
   209a0:	6809      	ldr	r1, [r1, #0]
   209a2:	4048      	eors	r0, r1
   209a4:	68f9      	ldr	r1, [r7, #12]
   209a6:	310c      	adds	r1, #12
   209a8:	6809      	ldr	r1, [r1, #0]
   209aa:	4041      	eors	r1, r0
   209ac:	ea4f 71f1 	mov.w	r1, r1, ror #31
   209b0:	6019      	str	r1, [r3, #0]
   209b2:	681b      	ldr	r3, [r3, #0]
   209b4:	441a      	add	r2, r3
   209b6:	69bb      	ldr	r3, [r7, #24]
   209b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   209bc:	441a      	add	r2, r3
   209be:	4ba9      	ldr	r3, [pc, #676]	; (20c64 <gxsha1_transform+0x16c8>)
   209c0:	4413      	add	r3, r2
   209c2:	69fa      	ldr	r2, [r7, #28]
   209c4:	4413      	add	r3, r2
   209c6:	61fb      	str	r3, [r7, #28]
   209c8:	697b      	ldr	r3, [r7, #20]
   209ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
   209ce:	617b      	str	r3, [r7, #20]
    SHA1_R4(c, d, e, a, b, 68);
   209d0:	69ba      	ldr	r2, [r7, #24]
   209d2:	697b      	ldr	r3, [r7, #20]
   209d4:	405a      	eors	r2, r3
   209d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   209d8:	405a      	eors	r2, r3
   209da:	68fb      	ldr	r3, [r7, #12]
   209dc:	3310      	adds	r3, #16
   209de:	68f9      	ldr	r1, [r7, #12]
   209e0:	3104      	adds	r1, #4
   209e2:	6808      	ldr	r0, [r1, #0]
   209e4:	68f9      	ldr	r1, [r7, #12]
   209e6:	3130      	adds	r1, #48	; 0x30
   209e8:	6809      	ldr	r1, [r1, #0]
   209ea:	4048      	eors	r0, r1
   209ec:	68f9      	ldr	r1, [r7, #12]
   209ee:	3118      	adds	r1, #24
   209f0:	6809      	ldr	r1, [r1, #0]
   209f2:	4048      	eors	r0, r1
   209f4:	68f9      	ldr	r1, [r7, #12]
   209f6:	3110      	adds	r1, #16
   209f8:	6809      	ldr	r1, [r1, #0]
   209fa:	4041      	eors	r1, r0
   209fc:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20a00:	6019      	str	r1, [r3, #0]
   20a02:	681b      	ldr	r3, [r3, #0]
   20a04:	441a      	add	r2, r3
   20a06:	69fb      	ldr	r3, [r7, #28]
   20a08:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20a0c:	441a      	add	r2, r3
   20a0e:	4b95      	ldr	r3, [pc, #596]	; (20c64 <gxsha1_transform+0x16c8>)
   20a10:	4413      	add	r3, r2
   20a12:	6a3a      	ldr	r2, [r7, #32]
   20a14:	4413      	add	r3, r2
   20a16:	623b      	str	r3, [r7, #32]
   20a18:	69bb      	ldr	r3, [r7, #24]
   20a1a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20a1e:	61bb      	str	r3, [r7, #24]
    SHA1_R4(b, c, d, e, a, 69);
   20a20:	69fa      	ldr	r2, [r7, #28]
   20a22:	69bb      	ldr	r3, [r7, #24]
   20a24:	405a      	eors	r2, r3
   20a26:	697b      	ldr	r3, [r7, #20]
   20a28:	405a      	eors	r2, r3
   20a2a:	68fb      	ldr	r3, [r7, #12]
   20a2c:	3314      	adds	r3, #20
   20a2e:	68f9      	ldr	r1, [r7, #12]
   20a30:	3108      	adds	r1, #8
   20a32:	6808      	ldr	r0, [r1, #0]
   20a34:	68f9      	ldr	r1, [r7, #12]
   20a36:	3134      	adds	r1, #52	; 0x34
   20a38:	6809      	ldr	r1, [r1, #0]
   20a3a:	4048      	eors	r0, r1
   20a3c:	68f9      	ldr	r1, [r7, #12]
   20a3e:	311c      	adds	r1, #28
   20a40:	6809      	ldr	r1, [r1, #0]
   20a42:	4048      	eors	r0, r1
   20a44:	68f9      	ldr	r1, [r7, #12]
   20a46:	3114      	adds	r1, #20
   20a48:	6809      	ldr	r1, [r1, #0]
   20a4a:	4041      	eors	r1, r0
   20a4c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20a50:	6019      	str	r1, [r3, #0]
   20a52:	681b      	ldr	r3, [r3, #0]
   20a54:	441a      	add	r2, r3
   20a56:	6a3b      	ldr	r3, [r7, #32]
   20a58:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20a5c:	441a      	add	r2, r3
   20a5e:	4b81      	ldr	r3, [pc, #516]	; (20c64 <gxsha1_transform+0x16c8>)
   20a60:	4413      	add	r3, r2
   20a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20a64:	4413      	add	r3, r2
   20a66:	627b      	str	r3, [r7, #36]	; 0x24
   20a68:	69fb      	ldr	r3, [r7, #28]
   20a6a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20a6e:	61fb      	str	r3, [r7, #28]
    SHA1_R4(a, b, c, d, e, 70);
   20a70:	6a3a      	ldr	r2, [r7, #32]
   20a72:	69fb      	ldr	r3, [r7, #28]
   20a74:	405a      	eors	r2, r3
   20a76:	69bb      	ldr	r3, [r7, #24]
   20a78:	405a      	eors	r2, r3
   20a7a:	68fb      	ldr	r3, [r7, #12]
   20a7c:	3318      	adds	r3, #24
   20a7e:	68f9      	ldr	r1, [r7, #12]
   20a80:	310c      	adds	r1, #12
   20a82:	6808      	ldr	r0, [r1, #0]
   20a84:	68f9      	ldr	r1, [r7, #12]
   20a86:	3138      	adds	r1, #56	; 0x38
   20a88:	6809      	ldr	r1, [r1, #0]
   20a8a:	4048      	eors	r0, r1
   20a8c:	68f9      	ldr	r1, [r7, #12]
   20a8e:	3120      	adds	r1, #32
   20a90:	6809      	ldr	r1, [r1, #0]
   20a92:	4048      	eors	r0, r1
   20a94:	68f9      	ldr	r1, [r7, #12]
   20a96:	3118      	adds	r1, #24
   20a98:	6809      	ldr	r1, [r1, #0]
   20a9a:	4041      	eors	r1, r0
   20a9c:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20aa0:	6019      	str	r1, [r3, #0]
   20aa2:	681b      	ldr	r3, [r3, #0]
   20aa4:	441a      	add	r2, r3
   20aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20aa8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20aac:	441a      	add	r2, r3
   20aae:	4b6d      	ldr	r3, [pc, #436]	; (20c64 <gxsha1_transform+0x16c8>)
   20ab0:	4413      	add	r3, r2
   20ab2:	697a      	ldr	r2, [r7, #20]
   20ab4:	4413      	add	r3, r2
   20ab6:	617b      	str	r3, [r7, #20]
   20ab8:	6a3b      	ldr	r3, [r7, #32]
   20aba:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20abe:	623b      	str	r3, [r7, #32]
    SHA1_R4(e, a, b, c, d, 71);
   20ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20ac2:	6a3b      	ldr	r3, [r7, #32]
   20ac4:	405a      	eors	r2, r3
   20ac6:	69fb      	ldr	r3, [r7, #28]
   20ac8:	405a      	eors	r2, r3
   20aca:	68fb      	ldr	r3, [r7, #12]
   20acc:	331c      	adds	r3, #28
   20ace:	68f9      	ldr	r1, [r7, #12]
   20ad0:	3110      	adds	r1, #16
   20ad2:	6808      	ldr	r0, [r1, #0]
   20ad4:	68f9      	ldr	r1, [r7, #12]
   20ad6:	313c      	adds	r1, #60	; 0x3c
   20ad8:	6809      	ldr	r1, [r1, #0]
   20ada:	4048      	eors	r0, r1
   20adc:	68f9      	ldr	r1, [r7, #12]
   20ade:	3124      	adds	r1, #36	; 0x24
   20ae0:	6809      	ldr	r1, [r1, #0]
   20ae2:	4048      	eors	r0, r1
   20ae4:	68f9      	ldr	r1, [r7, #12]
   20ae6:	311c      	adds	r1, #28
   20ae8:	6809      	ldr	r1, [r1, #0]
   20aea:	4041      	eors	r1, r0
   20aec:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20af0:	6019      	str	r1, [r3, #0]
   20af2:	681b      	ldr	r3, [r3, #0]
   20af4:	441a      	add	r2, r3
   20af6:	697b      	ldr	r3, [r7, #20]
   20af8:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20afc:	441a      	add	r2, r3
   20afe:	4b59      	ldr	r3, [pc, #356]	; (20c64 <gxsha1_transform+0x16c8>)
   20b00:	4413      	add	r3, r2
   20b02:	69ba      	ldr	r2, [r7, #24]
   20b04:	4413      	add	r3, r2
   20b06:	61bb      	str	r3, [r7, #24]
   20b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20b0a:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20b0e:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R4(d, e, a, b, c, 72);
   20b10:	697a      	ldr	r2, [r7, #20]
   20b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20b14:	405a      	eors	r2, r3
   20b16:	6a3b      	ldr	r3, [r7, #32]
   20b18:	405a      	eors	r2, r3
   20b1a:	68fb      	ldr	r3, [r7, #12]
   20b1c:	3320      	adds	r3, #32
   20b1e:	68f9      	ldr	r1, [r7, #12]
   20b20:	3114      	adds	r1, #20
   20b22:	6808      	ldr	r0, [r1, #0]
   20b24:	68f9      	ldr	r1, [r7, #12]
   20b26:	6809      	ldr	r1, [r1, #0]
   20b28:	4048      	eors	r0, r1
   20b2a:	68f9      	ldr	r1, [r7, #12]
   20b2c:	3128      	adds	r1, #40	; 0x28
   20b2e:	6809      	ldr	r1, [r1, #0]
   20b30:	4048      	eors	r0, r1
   20b32:	68f9      	ldr	r1, [r7, #12]
   20b34:	3120      	adds	r1, #32
   20b36:	6809      	ldr	r1, [r1, #0]
   20b38:	4041      	eors	r1, r0
   20b3a:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20b3e:	6019      	str	r1, [r3, #0]
   20b40:	681b      	ldr	r3, [r3, #0]
   20b42:	441a      	add	r2, r3
   20b44:	69bb      	ldr	r3, [r7, #24]
   20b46:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20b4a:	441a      	add	r2, r3
   20b4c:	4b45      	ldr	r3, [pc, #276]	; (20c64 <gxsha1_transform+0x16c8>)
   20b4e:	4413      	add	r3, r2
   20b50:	69fa      	ldr	r2, [r7, #28]
   20b52:	4413      	add	r3, r2
   20b54:	61fb      	str	r3, [r7, #28]
   20b56:	697b      	ldr	r3, [r7, #20]
   20b58:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20b5c:	617b      	str	r3, [r7, #20]
    SHA1_R4(c, d, e, a, b, 73);
   20b5e:	69ba      	ldr	r2, [r7, #24]
   20b60:	697b      	ldr	r3, [r7, #20]
   20b62:	405a      	eors	r2, r3
   20b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20b66:	405a      	eors	r2, r3
   20b68:	68fb      	ldr	r3, [r7, #12]
   20b6a:	3324      	adds	r3, #36	; 0x24
   20b6c:	68f9      	ldr	r1, [r7, #12]
   20b6e:	3118      	adds	r1, #24
   20b70:	6808      	ldr	r0, [r1, #0]
   20b72:	68f9      	ldr	r1, [r7, #12]
   20b74:	3104      	adds	r1, #4
   20b76:	6809      	ldr	r1, [r1, #0]
   20b78:	4048      	eors	r0, r1
   20b7a:	68f9      	ldr	r1, [r7, #12]
   20b7c:	312c      	adds	r1, #44	; 0x2c
   20b7e:	6809      	ldr	r1, [r1, #0]
   20b80:	4048      	eors	r0, r1
   20b82:	68f9      	ldr	r1, [r7, #12]
   20b84:	3124      	adds	r1, #36	; 0x24
   20b86:	6809      	ldr	r1, [r1, #0]
   20b88:	4041      	eors	r1, r0
   20b8a:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20b8e:	6019      	str	r1, [r3, #0]
   20b90:	681b      	ldr	r3, [r3, #0]
   20b92:	441a      	add	r2, r3
   20b94:	69fb      	ldr	r3, [r7, #28]
   20b96:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20b9a:	441a      	add	r2, r3
   20b9c:	4b31      	ldr	r3, [pc, #196]	; (20c64 <gxsha1_transform+0x16c8>)
   20b9e:	4413      	add	r3, r2
   20ba0:	6a3a      	ldr	r2, [r7, #32]
   20ba2:	4413      	add	r3, r2
   20ba4:	623b      	str	r3, [r7, #32]
   20ba6:	69bb      	ldr	r3, [r7, #24]
   20ba8:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20bac:	61bb      	str	r3, [r7, #24]
    SHA1_R4(b, c, d, e, a, 74);
   20bae:	69fa      	ldr	r2, [r7, #28]
   20bb0:	69bb      	ldr	r3, [r7, #24]
   20bb2:	405a      	eors	r2, r3
   20bb4:	697b      	ldr	r3, [r7, #20]
   20bb6:	405a      	eors	r2, r3
   20bb8:	68fb      	ldr	r3, [r7, #12]
   20bba:	3328      	adds	r3, #40	; 0x28
   20bbc:	68f9      	ldr	r1, [r7, #12]
   20bbe:	311c      	adds	r1, #28
   20bc0:	6808      	ldr	r0, [r1, #0]
   20bc2:	68f9      	ldr	r1, [r7, #12]
   20bc4:	3108      	adds	r1, #8
   20bc6:	6809      	ldr	r1, [r1, #0]
   20bc8:	4048      	eors	r0, r1
   20bca:	68f9      	ldr	r1, [r7, #12]
   20bcc:	3130      	adds	r1, #48	; 0x30
   20bce:	6809      	ldr	r1, [r1, #0]
   20bd0:	4048      	eors	r0, r1
   20bd2:	68f9      	ldr	r1, [r7, #12]
   20bd4:	3128      	adds	r1, #40	; 0x28
   20bd6:	6809      	ldr	r1, [r1, #0]
   20bd8:	4041      	eors	r1, r0
   20bda:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20bde:	6019      	str	r1, [r3, #0]
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	441a      	add	r2, r3
   20be4:	6a3b      	ldr	r3, [r7, #32]
   20be6:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20bea:	441a      	add	r2, r3
   20bec:	4b1d      	ldr	r3, [pc, #116]	; (20c64 <gxsha1_transform+0x16c8>)
   20bee:	4413      	add	r3, r2
   20bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20bf2:	4413      	add	r3, r2
   20bf4:	627b      	str	r3, [r7, #36]	; 0x24
   20bf6:	69fb      	ldr	r3, [r7, #28]
   20bf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20bfc:	61fb      	str	r3, [r7, #28]
    SHA1_R4(a, b, c, d, e, 75);
   20bfe:	6a3a      	ldr	r2, [r7, #32]
   20c00:	69fb      	ldr	r3, [r7, #28]
   20c02:	405a      	eors	r2, r3
   20c04:	69bb      	ldr	r3, [r7, #24]
   20c06:	405a      	eors	r2, r3
   20c08:	68fb      	ldr	r3, [r7, #12]
   20c0a:	332c      	adds	r3, #44	; 0x2c
   20c0c:	68f9      	ldr	r1, [r7, #12]
   20c0e:	3120      	adds	r1, #32
   20c10:	6808      	ldr	r0, [r1, #0]
   20c12:	68f9      	ldr	r1, [r7, #12]
   20c14:	310c      	adds	r1, #12
   20c16:	6809      	ldr	r1, [r1, #0]
   20c18:	4048      	eors	r0, r1
   20c1a:	68f9      	ldr	r1, [r7, #12]
   20c1c:	3134      	adds	r1, #52	; 0x34
   20c1e:	6809      	ldr	r1, [r1, #0]
   20c20:	4048      	eors	r0, r1
   20c22:	68f9      	ldr	r1, [r7, #12]
   20c24:	312c      	adds	r1, #44	; 0x2c
   20c26:	6809      	ldr	r1, [r1, #0]
   20c28:	4041      	eors	r1, r0
   20c2a:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20c2e:	6019      	str	r1, [r3, #0]
   20c30:	681b      	ldr	r3, [r3, #0]
   20c32:	441a      	add	r2, r3
   20c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20c36:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20c3a:	441a      	add	r2, r3
   20c3c:	4b09      	ldr	r3, [pc, #36]	; (20c64 <gxsha1_transform+0x16c8>)
   20c3e:	4413      	add	r3, r2
   20c40:	697a      	ldr	r2, [r7, #20]
   20c42:	4413      	add	r3, r2
   20c44:	617b      	str	r3, [r7, #20]
   20c46:	6a3b      	ldr	r3, [r7, #32]
   20c48:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20c4c:	623b      	str	r3, [r7, #32]
    SHA1_R4(e, a, b, c, d, 76);
   20c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20c50:	6a3b      	ldr	r3, [r7, #32]
   20c52:	405a      	eors	r2, r3
   20c54:	69fb      	ldr	r3, [r7, #28]
   20c56:	405a      	eors	r2, r3
   20c58:	68fb      	ldr	r3, [r7, #12]
   20c5a:	3330      	adds	r3, #48	; 0x30
   20c5c:	68f9      	ldr	r1, [r7, #12]
   20c5e:	3124      	adds	r1, #36	; 0x24
   20c60:	e002      	b.n	20c68 <gxsha1_transform+0x16cc>
   20c62:	bf00      	nop
   20c64:	ca62c1d6 	.word	0xca62c1d6
   20c68:	6808      	ldr	r0, [r1, #0]
   20c6a:	68f9      	ldr	r1, [r7, #12]
   20c6c:	3110      	adds	r1, #16
   20c6e:	6809      	ldr	r1, [r1, #0]
   20c70:	4048      	eors	r0, r1
   20c72:	68f9      	ldr	r1, [r7, #12]
   20c74:	3138      	adds	r1, #56	; 0x38
   20c76:	6809      	ldr	r1, [r1, #0]
   20c78:	4048      	eors	r0, r1
   20c7a:	68f9      	ldr	r1, [r7, #12]
   20c7c:	3130      	adds	r1, #48	; 0x30
   20c7e:	6809      	ldr	r1, [r1, #0]
   20c80:	4041      	eors	r1, r0
   20c82:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20c86:	6019      	str	r1, [r3, #0]
   20c88:	681b      	ldr	r3, [r3, #0]
   20c8a:	441a      	add	r2, r3
   20c8c:	697b      	ldr	r3, [r7, #20]
   20c8e:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20c92:	441a      	add	r2, r3
   20c94:	4b57      	ldr	r3, [pc, #348]	; (20df4 <gxsha1_transform+0x1858>)
   20c96:	4413      	add	r3, r2
   20c98:	69ba      	ldr	r2, [r7, #24]
   20c9a:	4413      	add	r3, r2
   20c9c:	61bb      	str	r3, [r7, #24]
   20c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ca0:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20ca4:	627b      	str	r3, [r7, #36]	; 0x24
    SHA1_R4(d, e, a, b, c, 77);
   20ca6:	697a      	ldr	r2, [r7, #20]
   20ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20caa:	405a      	eors	r2, r3
   20cac:	6a3b      	ldr	r3, [r7, #32]
   20cae:	405a      	eors	r2, r3
   20cb0:	68fb      	ldr	r3, [r7, #12]
   20cb2:	3334      	adds	r3, #52	; 0x34
   20cb4:	68f9      	ldr	r1, [r7, #12]
   20cb6:	3128      	adds	r1, #40	; 0x28
   20cb8:	6808      	ldr	r0, [r1, #0]
   20cba:	68f9      	ldr	r1, [r7, #12]
   20cbc:	3114      	adds	r1, #20
   20cbe:	6809      	ldr	r1, [r1, #0]
   20cc0:	4048      	eors	r0, r1
   20cc2:	68f9      	ldr	r1, [r7, #12]
   20cc4:	313c      	adds	r1, #60	; 0x3c
   20cc6:	6809      	ldr	r1, [r1, #0]
   20cc8:	4048      	eors	r0, r1
   20cca:	68f9      	ldr	r1, [r7, #12]
   20ccc:	3134      	adds	r1, #52	; 0x34
   20cce:	6809      	ldr	r1, [r1, #0]
   20cd0:	4041      	eors	r1, r0
   20cd2:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20cd6:	6019      	str	r1, [r3, #0]
   20cd8:	681b      	ldr	r3, [r3, #0]
   20cda:	441a      	add	r2, r3
   20cdc:	69bb      	ldr	r3, [r7, #24]
   20cde:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20ce2:	441a      	add	r2, r3
   20ce4:	4b43      	ldr	r3, [pc, #268]	; (20df4 <gxsha1_transform+0x1858>)
   20ce6:	4413      	add	r3, r2
   20ce8:	69fa      	ldr	r2, [r7, #28]
   20cea:	4413      	add	r3, r2
   20cec:	61fb      	str	r3, [r7, #28]
   20cee:	697b      	ldr	r3, [r7, #20]
   20cf0:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20cf4:	617b      	str	r3, [r7, #20]
    SHA1_R4(c, d, e, a, b, 78);
   20cf6:	69ba      	ldr	r2, [r7, #24]
   20cf8:	697b      	ldr	r3, [r7, #20]
   20cfa:	405a      	eors	r2, r3
   20cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20cfe:	405a      	eors	r2, r3
   20d00:	68fb      	ldr	r3, [r7, #12]
   20d02:	3338      	adds	r3, #56	; 0x38
   20d04:	68f9      	ldr	r1, [r7, #12]
   20d06:	312c      	adds	r1, #44	; 0x2c
   20d08:	6808      	ldr	r0, [r1, #0]
   20d0a:	68f9      	ldr	r1, [r7, #12]
   20d0c:	3118      	adds	r1, #24
   20d0e:	6809      	ldr	r1, [r1, #0]
   20d10:	4048      	eors	r0, r1
   20d12:	68f9      	ldr	r1, [r7, #12]
   20d14:	6809      	ldr	r1, [r1, #0]
   20d16:	4048      	eors	r0, r1
   20d18:	68f9      	ldr	r1, [r7, #12]
   20d1a:	3138      	adds	r1, #56	; 0x38
   20d1c:	6809      	ldr	r1, [r1, #0]
   20d1e:	4041      	eors	r1, r0
   20d20:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20d24:	6019      	str	r1, [r3, #0]
   20d26:	681b      	ldr	r3, [r3, #0]
   20d28:	441a      	add	r2, r3
   20d2a:	69fb      	ldr	r3, [r7, #28]
   20d2c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20d30:	441a      	add	r2, r3
   20d32:	4b30      	ldr	r3, [pc, #192]	; (20df4 <gxsha1_transform+0x1858>)
   20d34:	4413      	add	r3, r2
   20d36:	6a3a      	ldr	r2, [r7, #32]
   20d38:	4413      	add	r3, r2
   20d3a:	623b      	str	r3, [r7, #32]
   20d3c:	69bb      	ldr	r3, [r7, #24]
   20d3e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20d42:	61bb      	str	r3, [r7, #24]
    SHA1_R4(b, c, d, e, a, 79);
   20d44:	69fa      	ldr	r2, [r7, #28]
   20d46:	69bb      	ldr	r3, [r7, #24]
   20d48:	405a      	eors	r2, r3
   20d4a:	697b      	ldr	r3, [r7, #20]
   20d4c:	405a      	eors	r2, r3
   20d4e:	68fb      	ldr	r3, [r7, #12]
   20d50:	333c      	adds	r3, #60	; 0x3c
   20d52:	68f9      	ldr	r1, [r7, #12]
   20d54:	3130      	adds	r1, #48	; 0x30
   20d56:	6808      	ldr	r0, [r1, #0]
   20d58:	68f9      	ldr	r1, [r7, #12]
   20d5a:	311c      	adds	r1, #28
   20d5c:	6809      	ldr	r1, [r1, #0]
   20d5e:	4048      	eors	r0, r1
   20d60:	68f9      	ldr	r1, [r7, #12]
   20d62:	3104      	adds	r1, #4
   20d64:	6809      	ldr	r1, [r1, #0]
   20d66:	4048      	eors	r0, r1
   20d68:	68f9      	ldr	r1, [r7, #12]
   20d6a:	313c      	adds	r1, #60	; 0x3c
   20d6c:	6809      	ldr	r1, [r1, #0]
   20d6e:	4041      	eors	r1, r0
   20d70:	ea4f 71f1 	mov.w	r1, r1, ror #31
   20d74:	6019      	str	r1, [r3, #0]
   20d76:	681b      	ldr	r3, [r3, #0]
   20d78:	441a      	add	r2, r3
   20d7a:	6a3b      	ldr	r3, [r7, #32]
   20d7c:	ea4f 63f3 	mov.w	r3, r3, ror #27
   20d80:	441a      	add	r2, r3
   20d82:	4b1c      	ldr	r3, [pc, #112]	; (20df4 <gxsha1_transform+0x1858>)
   20d84:	4413      	add	r3, r2
   20d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20d88:	4413      	add	r3, r2
   20d8a:	627b      	str	r3, [r7, #36]	; 0x24
   20d8c:	69fb      	ldr	r3, [r7, #28]
   20d8e:	ea4f 03b3 	mov.w	r3, r3, ror #2
   20d92:	61fb      	str	r3, [r7, #28]

    digest[0] += a;
   20d94:	68bb      	ldr	r3, [r7, #8]
   20d96:	681a      	ldr	r2, [r3, #0]
   20d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d9a:	441a      	add	r2, r3
   20d9c:	68bb      	ldr	r3, [r7, #8]
   20d9e:	601a      	str	r2, [r3, #0]
    digest[1] += b;
   20da0:	68bb      	ldr	r3, [r7, #8]
   20da2:	3304      	adds	r3, #4
   20da4:	68ba      	ldr	r2, [r7, #8]
   20da6:	3204      	adds	r2, #4
   20da8:	6811      	ldr	r1, [r2, #0]
   20daa:	6a3a      	ldr	r2, [r7, #32]
   20dac:	440a      	add	r2, r1
   20dae:	601a      	str	r2, [r3, #0]
    digest[2] += c;
   20db0:	68bb      	ldr	r3, [r7, #8]
   20db2:	3308      	adds	r3, #8
   20db4:	68ba      	ldr	r2, [r7, #8]
   20db6:	3208      	adds	r2, #8
   20db8:	6811      	ldr	r1, [r2, #0]
   20dba:	69fa      	ldr	r2, [r7, #28]
   20dbc:	440a      	add	r2, r1
   20dbe:	601a      	str	r2, [r3, #0]
    digest[3] += d;
   20dc0:	68bb      	ldr	r3, [r7, #8]
   20dc2:	330c      	adds	r3, #12
   20dc4:	68ba      	ldr	r2, [r7, #8]
   20dc6:	320c      	adds	r2, #12
   20dc8:	6811      	ldr	r1, [r2, #0]
   20dca:	69ba      	ldr	r2, [r7, #24]
   20dcc:	440a      	add	r2, r1
   20dce:	601a      	str	r2, [r3, #0]
    digest[4] += e;
   20dd0:	68bb      	ldr	r3, [r7, #8]
   20dd2:	3310      	adds	r3, #16
   20dd4:	68ba      	ldr	r2, [r7, #8]
   20dd6:	3210      	adds	r2, #16
   20dd8:	6811      	ldr	r1, [r2, #0]
   20dda:	697a      	ldr	r2, [r7, #20]
   20ddc:	440a      	add	r2, r1
   20dde:	601a      	str	r2, [r3, #0]

    ++*transforms;
   20de0:	687b      	ldr	r3, [r7, #4]
   20de2:	681b      	ldr	r3, [r3, #0]
   20de4:	1c5a      	adds	r2, r3, #1
   20de6:	687b      	ldr	r3, [r7, #4]
   20de8:	601a      	str	r2, [r3, #0]
}
   20dea:	bf00      	nop
   20dec:	372c      	adds	r7, #44	; 0x2c
   20dee:	46bd      	mov	sp, r7
   20df0:	bc80      	pop	{r7}
   20df2:	4770      	bx	lr
   20df4:	ca62c1d6 	.word	0xca62c1d6

00020df8 <gxsha1_update>:

void gxsha1_update(gxByteBuffer* data, unsigned int *digest, unsigned int *transforms)
{
   20df8:	b580      	push	{r7, lr}
   20dfa:	b096      	sub	sp, #88	; 0x58
   20dfc:	af00      	add	r7, sp, #0
   20dfe:	60f8      	str	r0, [r7, #12]
   20e00:	60b9      	str	r1, [r7, #8]
   20e02:	607a      	str	r2, [r7, #4]
    unsigned int pos;
    unsigned long block[16];
    while (data->size - data->position > 64)
   20e04:	e018      	b.n	20e38 <gxsha1_update+0x40>
    {
        for (pos = 0; pos != 16; ++pos)
   20e06:	2300      	movs	r3, #0
   20e08:	657b      	str	r3, [r7, #84]	; 0x54
   20e0a:	e00b      	b.n	20e24 <gxsha1_update+0x2c>
        {
            bb_getUInt32(data, &block[pos]);
   20e0c:	f107 0214 	add.w	r2, r7, #20
   20e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20e12:	009b      	lsls	r3, r3, #2
   20e14:	4413      	add	r3, r2
   20e16:	4619      	mov	r1, r3
   20e18:	68f8      	ldr	r0, [r7, #12]
   20e1a:	f7e2 fd59 	bl	38d0 <bb_getUInt32>
{
    unsigned int pos;
    unsigned long block[16];
    while (data->size - data->position > 64)
    {
        for (pos = 0; pos != 16; ++pos)
   20e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20e20:	3301      	adds	r3, #1
   20e22:	657b      	str	r3, [r7, #84]	; 0x54
   20e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20e26:	2b10      	cmp	r3, #16
   20e28:	d1f0      	bne.n	20e0c <gxsha1_update+0x14>
        {
            bb_getUInt32(data, &block[pos]);
        }
        gxsha1_transform(block, digest, transforms);
   20e2a:	f107 0314 	add.w	r3, r7, #20
   20e2e:	687a      	ldr	r2, [r7, #4]
   20e30:	68b9      	ldr	r1, [r7, #8]
   20e32:	4618      	mov	r0, r3
   20e34:	f7fe fbb2 	bl	1f59c <gxsha1_transform>

void gxsha1_update(gxByteBuffer* data, unsigned int *digest, unsigned int *transforms)
{
    unsigned int pos;
    unsigned long block[16];
    while (data->size - data->position > 64)
   20e38:	68fb      	ldr	r3, [r7, #12]
   20e3a:	88db      	ldrh	r3, [r3, #6]
   20e3c:	461a      	mov	r2, r3
   20e3e:	68fb      	ldr	r3, [r7, #12]
   20e40:	891b      	ldrh	r3, [r3, #8]
   20e42:	1ad3      	subs	r3, r2, r3
   20e44:	2b40      	cmp	r3, #64	; 0x40
   20e46:	dcde      	bgt.n	20e06 <gxsha1_update+0xe>
        {
            bb_getUInt32(data, &block[pos]);
        }
        gxsha1_transform(block, digest, transforms);
    }
}
   20e48:	bf00      	nop
   20e4a:	3758      	adds	r7, #88	; 0x58
   20e4c:	46bd      	mov	sp, r7
   20e4e:	bd80      	pop	{r7, pc}

00020e50 <gxsha1_final>:

int gxsha1_final(gxByteBuffer* data, unsigned int *digest, unsigned int *transforms, gxByteBuffer* reply)
{
   20e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e52:	b09b      	sub	sp, #108	; 0x6c
   20e54:	af00      	add	r7, sp, #0
   20e56:	60f8      	str	r0, [r7, #12]
   20e58:	60b9      	str	r1, [r7, #8]
   20e5a:	607a      	str	r2, [r7, #4]
   20e5c:	603b      	str	r3, [r7, #0]
    int pos;
    bb_capacity(reply, *transforms * 64);
   20e5e:	687b      	ldr	r3, [r7, #4]
   20e60:	681b      	ldr	r3, [r3, #0]
   20e62:	b29b      	uxth	r3, r3
   20e64:	019b      	lsls	r3, r3, #6
   20e66:	b29b      	uxth	r3, r3
   20e68:	4619      	mov	r1, r3
   20e6a:	6838      	ldr	r0, [r7, #0]
   20e6c:	f7e1 ff52 	bl	2d14 <bb_capacity>
    bb_set(reply, data->data, data->size);
   20e70:	68fb      	ldr	r3, [r7, #12]
   20e72:	6819      	ldr	r1, [r3, #0]
   20e74:	68fb      	ldr	r3, [r7, #12]
   20e76:	88db      	ldrh	r3, [r3, #6]
   20e78:	461a      	mov	r2, r3
   20e7a:	6838      	ldr	r0, [r7, #0]
   20e7c:	f7e2 fb70 	bl	3560 <bb_set>
    /* Total number of hashed bits */
    unsigned long long total_bits = (*transforms * 64 + data->size) * 8;
   20e80:	687b      	ldr	r3, [r7, #4]
   20e82:	681b      	ldr	r3, [r3, #0]
   20e84:	019b      	lsls	r3, r3, #6
   20e86:	68fa      	ldr	r2, [r7, #12]
   20e88:	88d2      	ldrh	r2, [r2, #6]
   20e8a:	4413      	add	r3, r2
   20e8c:	00db      	lsls	r3, r3, #3
   20e8e:	f04f 0400 	mov.w	r4, #0
   20e92:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

    /* Padding */
    bb_setUInt8(reply, 0x80);
   20e96:	2180      	movs	r1, #128	; 0x80
   20e98:	6838      	ldr	r0, [r7, #0]
   20e9a:	f7e1 ffbb 	bl	2e14 <bb_setUInt8>
    unsigned int orig_size = reply->size;
   20e9e:	683b      	ldr	r3, [r7, #0]
   20ea0:	88db      	ldrh	r3, [r3, #6]
   20ea2:	657b      	str	r3, [r7, #84]	; 0x54
    bb_zero(reply, reply->size, 64 - reply->size);
   20ea4:	683b      	ldr	r3, [r7, #0]
   20ea6:	88d9      	ldrh	r1, [r3, #6]
   20ea8:	683b      	ldr	r3, [r7, #0]
   20eaa:	88db      	ldrh	r3, [r3, #6]
   20eac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20eb0:	b29b      	uxth	r3, r3
   20eb2:	461a      	mov	r2, r3
   20eb4:	6838      	ldr	r0, [r7, #0]
   20eb6:	f7e1 ff7b 	bl	2db0 <bb_zero>
    unsigned long block[16];
    for (pos = 0; pos != 16; ++pos)
   20eba:	2300      	movs	r3, #0
   20ebc:	667b      	str	r3, [r7, #100]	; 0x64
   20ebe:	e00b      	b.n	20ed8 <gxsha1_final+0x88>
    {
        bb_getUInt32(reply, &block[pos]);
   20ec0:	f107 0214 	add.w	r2, r7, #20
   20ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20ec6:	009b      	lsls	r3, r3, #2
   20ec8:	4413      	add	r3, r2
   20eca:	4619      	mov	r1, r3
   20ecc:	6838      	ldr	r0, [r7, #0]
   20ece:	f7e2 fcff 	bl	38d0 <bb_getUInt32>
    /* Padding */
    bb_setUInt8(reply, 0x80);
    unsigned int orig_size = reply->size;
    bb_zero(reply, reply->size, 64 - reply->size);
    unsigned long block[16];
    for (pos = 0; pos != 16; ++pos)
   20ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20ed4:	3301      	adds	r3, #1
   20ed6:	667b      	str	r3, [r7, #100]	; 0x64
   20ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20eda:	2b10      	cmp	r3, #16
   20edc:	d1f0      	bne.n	20ec0 <gxsha1_final+0x70>
    {
        bb_getUInt32(reply, &block[pos]);
    }
    if (orig_size > 64 - 8)
   20ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   20ee0:	2b38      	cmp	r3, #56	; 0x38
   20ee2:	d917      	bls.n	20f14 <gxsha1_final+0xc4>
    {
        gxsha1_transform(block, digest, transforms);
   20ee4:	f107 0314 	add.w	r3, r7, #20
   20ee8:	687a      	ldr	r2, [r7, #4]
   20eea:	68b9      	ldr	r1, [r7, #8]
   20eec:	4618      	mov	r0, r3
   20eee:	f7fe fb55 	bl	1f59c <gxsha1_transform>
        for (pos = 0; pos < 16 - 2; ++pos)
   20ef2:	2300      	movs	r3, #0
   20ef4:	667b      	str	r3, [r7, #100]	; 0x64
   20ef6:	e00a      	b.n	20f0e <gxsha1_final+0xbe>
        {
            block[pos] = 0;
   20ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20efa:	009b      	lsls	r3, r3, #2
   20efc:	f107 0268 	add.w	r2, r7, #104	; 0x68
   20f00:	4413      	add	r3, r2
   20f02:	2200      	movs	r2, #0
   20f04:	f843 2c54 	str.w	r2, [r3, #-84]
        bb_getUInt32(reply, &block[pos]);
    }
    if (orig_size > 64 - 8)
    {
        gxsha1_transform(block, digest, transforms);
        for (pos = 0; pos < 16 - 2; ++pos)
   20f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20f0a:	3301      	adds	r3, #1
   20f0c:	667b      	str	r3, [r7, #100]	; 0x64
   20f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20f10:	2b0d      	cmp	r3, #13
   20f12:	ddf1      	ble.n	20ef8 <gxsha1_final+0xa8>
            block[pos] = 0;
        }
    }

    /* Append total_bits, split this uint64 into two uint32 */
    block[16 - 1] = (unsigned int)total_bits;
   20f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20f16:	653b      	str	r3, [r7, #80]	; 0x50
    block[16 - 2] = (unsigned int)(total_bits >> 32);
   20f18:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   20f1c:	0025      	movs	r5, r4
   20f1e:	2600      	movs	r6, #0
   20f20:	462b      	mov	r3, r5
   20f22:	64fb      	str	r3, [r7, #76]	; 0x4c
    gxsha1_transform(block, digest, transforms);
   20f24:	f107 0314 	add.w	r3, r7, #20
   20f28:	687a      	ldr	r2, [r7, #4]
   20f2a:	68b9      	ldr	r1, [r7, #8]
   20f2c:	4618      	mov	r0, r3
   20f2e:	f7fe fb35 	bl	1f59c <gxsha1_transform>
    bb_capacity(reply, 20);
   20f32:	2114      	movs	r1, #20
   20f34:	6838      	ldr	r0, [r7, #0]
   20f36:	f7e1 feed 	bl	2d14 <bb_capacity>
    reply->position = reply->size = 0;
   20f3a:	683b      	ldr	r3, [r7, #0]
   20f3c:	2200      	movs	r2, #0
   20f3e:	80da      	strh	r2, [r3, #6]
   20f40:	683b      	ldr	r3, [r7, #0]
   20f42:	88da      	ldrh	r2, [r3, #6]
   20f44:	683b      	ldr	r3, [r7, #0]
   20f46:	811a      	strh	r2, [r3, #8]
    for (pos = 0; pos < 5; ++pos)
   20f48:	2300      	movs	r3, #0
   20f4a:	667b      	str	r3, [r7, #100]	; 0x64
   20f4c:	e00b      	b.n	20f66 <gxsha1_final+0x116>
    {
        bb_setUInt32(reply, digest[pos]);
   20f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20f50:	009b      	lsls	r3, r3, #2
   20f52:	68ba      	ldr	r2, [r7, #8]
   20f54:	4413      	add	r3, r2
   20f56:	681b      	ldr	r3, [r3, #0]
   20f58:	4619      	mov	r1, r3
   20f5a:	6838      	ldr	r0, [r7, #0]
   20f5c:	f7e2 f84e 	bl	2ffc <bb_setUInt32>
    block[16 - 1] = (unsigned int)total_bits;
    block[16 - 2] = (unsigned int)(total_bits >> 32);
    gxsha1_transform(block, digest, transforms);
    bb_capacity(reply, 20);
    reply->position = reply->size = 0;
    for (pos = 0; pos < 5; ++pos)
   20f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20f62:	3301      	adds	r3, #1
   20f64:	667b      	str	r3, [r7, #100]	; 0x64
   20f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20f68:	2b04      	cmp	r3, #4
   20f6a:	ddf0      	ble.n	20f4e <gxsha1_final+0xfe>
    {
        bb_setUInt32(reply, digest[pos]);
    }
    return 0;
   20f6c:	2300      	movs	r3, #0
}
   20f6e:	4618      	mov	r0, r3
   20f70:	376c      	adds	r7, #108	; 0x6c
   20f72:	46bd      	mov	sp, r7
   20f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20f76:	bf00      	nop

00020f78 <gxsha1_encrypt>:

int gxsha1_encrypt(gxByteBuffer* data, gxByteBuffer* result)
{
   20f78:	b5b0      	push	{r4, r5, r7, lr}
   20f7a:	b088      	sub	sp, #32
   20f7c:	af00      	add	r7, sp, #0
   20f7e:	6078      	str	r0, [r7, #4]
   20f80:	6039      	str	r1, [r7, #0]
    unsigned int digest[5] = { 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 };
   20f82:	4b0f      	ldr	r3, [pc, #60]	; (20fc0 <gxsha1_encrypt+0x48>)
   20f84:	f107 040c 	add.w	r4, r7, #12
   20f88:	461d      	mov	r5, r3
   20f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20f8e:	682b      	ldr	r3, [r5, #0]
   20f90:	6023      	str	r3, [r4, #0]
    unsigned int transforms = 0;
   20f92:	2300      	movs	r3, #0
   20f94:	60bb      	str	r3, [r7, #8]
    gxsha1_update(data, digest, &transforms);
   20f96:	f107 0208 	add.w	r2, r7, #8
   20f9a:	f107 030c 	add.w	r3, r7, #12
   20f9e:	4619      	mov	r1, r3
   20fa0:	6878      	ldr	r0, [r7, #4]
   20fa2:	f7ff ff29 	bl	20df8 <gxsha1_update>
    return gxsha1_final(data, digest, &transforms, result);
   20fa6:	f107 0208 	add.w	r2, r7, #8
   20faa:	f107 010c 	add.w	r1, r7, #12
   20fae:	683b      	ldr	r3, [r7, #0]
   20fb0:	6878      	ldr	r0, [r7, #4]
   20fb2:	f7ff ff4d 	bl	20e50 <gxsha1_final>
   20fb6:	4603      	mov	r3, r0
}
   20fb8:	4618      	mov	r0, r3
   20fba:	3720      	adds	r7, #32
   20fbc:	46bd      	mov	sp, r7
   20fbe:	bdb0      	pop	{r4, r5, r7, pc}
   20fc0:	0002bfc0 	.word	0x0002bfc0

00020fc4 <gxsha256_transform>:
           | ((unsigned int) *((str) + 0) << 24);   \
}


void gxsha256_transform(unsigned long *h, const unsigned char *message, unsigned int block_nb)
{
   20fc4:	b480      	push	{r7}
   20fc6:	b0d3      	sub	sp, #332	; 0x14c
   20fc8:	af00      	add	r7, sp, #0
   20fca:	f107 030c 	add.w	r3, r7, #12
   20fce:	6018      	str	r0, [r3, #0]
   20fd0:	f107 0308 	add.w	r3, r7, #8
   20fd4:	6019      	str	r1, [r3, #0]
   20fd6:	1d3b      	adds	r3, r7, #4
   20fd8:	601a      	str	r2, [r3, #0]
    unsigned int wv[8];
    unsigned int t1, t2;
    const unsigned char *sub_block;
    int i;
    int j;
    for (i = 0; i < (int)block_nb; i++)
   20fda:	2300      	movs	r3, #0
   20fdc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   20fe0:	e18c      	b.n	212fc <gxsha256_transform+0x338>
    {
        sub_block = message + (i << 6);
   20fe2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   20fe6:	019b      	lsls	r3, r3, #6
   20fe8:	461a      	mov	r2, r3
   20fea:	f107 0308 	add.w	r3, r7, #8
   20fee:	681b      	ldr	r3, [r3, #0]
   20ff0:	4413      	add	r3, r2
   20ff2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (j = 0; j < 16; j++)
   20ff6:	2300      	movs	r3, #0
   20ff8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   20ffc:	e033      	b.n	21066 <gxsha256_transform+0xa2>
        {
            SHA2_PACK32(&sub_block[j << 2], &w[j]);
   20ffe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21002:	009b      	lsls	r3, r3, #2
   21004:	3303      	adds	r3, #3
   21006:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
   2100a:	4413      	add	r3, r2
   2100c:	781b      	ldrb	r3, [r3, #0]
   2100e:	4619      	mov	r1, r3
   21010:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21014:	009b      	lsls	r3, r3, #2
   21016:	3302      	adds	r3, #2
   21018:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
   2101c:	4413      	add	r3, r2
   2101e:	781b      	ldrb	r3, [r3, #0]
   21020:	021b      	lsls	r3, r3, #8
   21022:	ea41 0203 	orr.w	r2, r1, r3
   21026:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2102a:	009b      	lsls	r3, r3, #2
   2102c:	3301      	adds	r3, #1
   2102e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
   21032:	440b      	add	r3, r1
   21034:	781b      	ldrb	r3, [r3, #0]
   21036:	041b      	lsls	r3, r3, #16
   21038:	431a      	orrs	r2, r3
   2103a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2103e:	009b      	lsls	r3, r3, #2
   21040:	4619      	mov	r1, r3
   21042:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
   21046:	440b      	add	r3, r1
   21048:	781b      	ldrb	r3, [r3, #0]
   2104a:	061b      	lsls	r3, r3, #24
   2104c:	ea42 0103 	orr.w	r1, r2, r3
   21050:	f107 0334 	add.w	r3, r7, #52	; 0x34
   21054:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
   21058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    int i;
    int j;
    for (i = 0; i < (int)block_nb; i++)
    {
        sub_block = message + (i << 6);
        for (j = 0; j < 16; j++)
   2105c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21060:	3301      	adds	r3, #1
   21062:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   21066:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2106a:	2b0f      	cmp	r3, #15
   2106c:	ddc7      	ble.n	20ffe <gxsha256_transform+0x3a>
        {
            SHA2_PACK32(&sub_block[j << 2], &w[j]);
        }
        for (j = 16; j < 64; j++)
   2106e:	2310      	movs	r3, #16
   21070:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   21074:	e057      	b.n	21126 <gxsha256_transform+0x162>
        {
            w[j] = SHA256_F4(w[j - 2]) + w[j - 7] + SHA256_F3(w[j - 15]) + w[j - 16];
   21076:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2107a:	1e9a      	subs	r2, r3, #2
   2107c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   21080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   21084:	ea4f 4273 	mov.w	r2, r3, ror #17
   21088:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2108c:	1e99      	subs	r1, r3, #2
   2108e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   21092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   21096:	ea4f 43f3 	mov.w	r3, r3, ror #19
   2109a:	405a      	eors	r2, r3
   2109c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   210a0:	1e99      	subs	r1, r3, #2
   210a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   210a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   210aa:	0a9b      	lsrs	r3, r3, #10
   210ac:	405a      	eors	r2, r3
   210ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   210b2:	1fd9      	subs	r1, r3, #7
   210b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   210b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   210bc:	441a      	add	r2, r3
   210be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   210c2:	f1a3 010f 	sub.w	r1, r3, #15
   210c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   210ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   210ce:	ea4f 11f3 	mov.w	r1, r3, ror #7
   210d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   210d6:	f1a3 000f 	sub.w	r0, r3, #15
   210da:	f107 0334 	add.w	r3, r7, #52	; 0x34
   210de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   210e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
   210e6:	4059      	eors	r1, r3
   210e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   210ec:	f1a3 000f 	sub.w	r0, r3, #15
   210f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   210f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   210f8:	08db      	lsrs	r3, r3, #3
   210fa:	404b      	eors	r3, r1
   210fc:	441a      	add	r2, r3
   210fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21102:	f1a3 0110 	sub.w	r1, r3, #16
   21106:	f107 0334 	add.w	r3, r7, #52	; 0x34
   2110a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2110e:	18d1      	adds	r1, r2, r3
   21110:	f107 0334 	add.w	r3, r7, #52	; 0x34
   21114:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
   21118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        sub_block = message + (i << 6);
        for (j = 0; j < 16; j++)
        {
            SHA2_PACK32(&sub_block[j << 2], &w[j]);
        }
        for (j = 16; j < 64; j++)
   2111c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21120:	3301      	adds	r3, #1
   21122:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   21126:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2112a:	2b3f      	cmp	r3, #63	; 0x3f
   2112c:	dda3      	ble.n	21076 <gxsha256_transform+0xb2>
        {
            w[j] = SHA256_F4(w[j - 2]) + w[j - 7] + SHA256_F3(w[j - 15]) + w[j - 16];
        }
        for (j = 0; j < 8; j++)
   2112e:	2300      	movs	r3, #0
   21130:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   21134:	e012      	b.n	2115c <gxsha256_transform+0x198>
        {
            wv[j] = h[j];
   21136:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2113a:	009b      	lsls	r3, r3, #2
   2113c:	f107 020c 	add.w	r2, r7, #12
   21140:	6812      	ldr	r2, [r2, #0]
   21142:	4413      	add	r3, r2
   21144:	6819      	ldr	r1, [r3, #0]
   21146:	f107 0314 	add.w	r3, r7, #20
   2114a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
   2114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        for (j = 16; j < 64; j++)
        {
            w[j] = SHA256_F4(w[j - 2]) + w[j - 7] + SHA256_F3(w[j - 15]) + w[j - 16];
        }
        for (j = 0; j < 8; j++)
   21152:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21156:	3301      	adds	r3, #1
   21158:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   2115c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   21160:	2b07      	cmp	r3, #7
   21162:	dde8      	ble.n	21136 <gxsha256_transform+0x172>
        {
            wv[j] = h[j];
        }
        for (j = 0; j < 64; j++) {
   21164:	2300      	movs	r3, #0
   21166:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   2116a:	e099      	b.n	212a0 <gxsha256_transform+0x2dc>
            t1 = wv[7] + SHA256_F2(wv[4]) + SHA2_CH(wv[4], wv[5], wv[6])
   2116c:	f107 0314 	add.w	r3, r7, #20
   21170:	69da      	ldr	r2, [r3, #28]
   21172:	f107 0314 	add.w	r3, r7, #20
   21176:	691b      	ldr	r3, [r3, #16]
   21178:	ea4f 11b3 	mov.w	r1, r3, ror #6
   2117c:	f107 0314 	add.w	r3, r7, #20
   21180:	691b      	ldr	r3, [r3, #16]
   21182:	ea4f 23f3 	mov.w	r3, r3, ror #11
   21186:	4059      	eors	r1, r3
   21188:	f107 0314 	add.w	r3, r7, #20
   2118c:	691b      	ldr	r3, [r3, #16]
   2118e:	ea4f 6373 	mov.w	r3, r3, ror #25
   21192:	404b      	eors	r3, r1
   21194:	441a      	add	r2, r3
   21196:	f107 0314 	add.w	r3, r7, #20
   2119a:	6919      	ldr	r1, [r3, #16]
   2119c:	f107 0314 	add.w	r3, r7, #20
   211a0:	695b      	ldr	r3, [r3, #20]
   211a2:	4019      	ands	r1, r3
   211a4:	f107 0314 	add.w	r3, r7, #20
   211a8:	691b      	ldr	r3, [r3, #16]
   211aa:	43d8      	mvns	r0, r3
   211ac:	f107 0314 	add.w	r3, r7, #20
   211b0:	699b      	ldr	r3, [r3, #24]
   211b2:	4003      	ands	r3, r0
   211b4:	404b      	eors	r3, r1
   211b6:	441a      	add	r2, r3
                + sha256_k[j] + w[j];
   211b8:	4957      	ldr	r1, [pc, #348]	; (21318 <gxsha256_transform+0x354>)
   211ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   211be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   211c2:	441a      	add	r2, r3
   211c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   211c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
   211cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        for (j = 0; j < 8; j++)
        {
            wv[j] = h[j];
        }
        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + SHA2_CH(wv[4], wv[5], wv[6])
   211d0:	4413      	add	r3, r2
   211d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + SHA2_MAJ(wv[0], wv[1], wv[2]);
   211d6:	f107 0314 	add.w	r3, r7, #20
   211da:	681b      	ldr	r3, [r3, #0]
   211dc:	ea4f 02b3 	mov.w	r2, r3, ror #2
   211e0:	f107 0314 	add.w	r3, r7, #20
   211e4:	681b      	ldr	r3, [r3, #0]
   211e6:	ea4f 3373 	mov.w	r3, r3, ror #13
   211ea:	405a      	eors	r2, r3
   211ec:	f107 0314 	add.w	r3, r7, #20
   211f0:	681b      	ldr	r3, [r3, #0]
   211f2:	ea4f 53b3 	mov.w	r3, r3, ror #22
   211f6:	405a      	eors	r2, r3
   211f8:	f107 0314 	add.w	r3, r7, #20
   211fc:	6819      	ldr	r1, [r3, #0]
   211fe:	f107 0314 	add.w	r3, r7, #20
   21202:	685b      	ldr	r3, [r3, #4]
   21204:	4019      	ands	r1, r3
   21206:	f107 0314 	add.w	r3, r7, #20
   2120a:	6818      	ldr	r0, [r3, #0]
   2120c:	f107 0314 	add.w	r3, r7, #20
   21210:	689b      	ldr	r3, [r3, #8]
   21212:	4003      	ands	r3, r0
   21214:	4059      	eors	r1, r3
   21216:	f107 0314 	add.w	r3, r7, #20
   2121a:	6858      	ldr	r0, [r3, #4]
   2121c:	f107 0314 	add.w	r3, r7, #20
   21220:	689b      	ldr	r3, [r3, #8]
   21222:	4003      	ands	r3, r0
   21224:	404b      	eors	r3, r1
   21226:	4413      	add	r3, r2
   21228:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            wv[7] = wv[6];
   2122c:	f107 0314 	add.w	r3, r7, #20
   21230:	699a      	ldr	r2, [r3, #24]
   21232:	f107 0314 	add.w	r3, r7, #20
   21236:	61da      	str	r2, [r3, #28]
            wv[6] = wv[5];
   21238:	f107 0314 	add.w	r3, r7, #20
   2123c:	695a      	ldr	r2, [r3, #20]
   2123e:	f107 0314 	add.w	r3, r7, #20
   21242:	619a      	str	r2, [r3, #24]
            wv[5] = wv[4];
   21244:	f107 0314 	add.w	r3, r7, #20
   21248:	691a      	ldr	r2, [r3, #16]
   2124a:	f107 0314 	add.w	r3, r7, #20
   2124e:	615a      	str	r2, [r3, #20]
            wv[4] = wv[3] + t1;
   21250:	f107 0314 	add.w	r3, r7, #20
   21254:	68da      	ldr	r2, [r3, #12]
   21256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   2125a:	441a      	add	r2, r3
   2125c:	f107 0314 	add.w	r3, r7, #20
   21260:	611a      	str	r2, [r3, #16]
            wv[3] = wv[2];
   21262:	f107 0314 	add.w	r3, r7, #20
   21266:	689a      	ldr	r2, [r3, #8]
   21268:	f107 0314 	add.w	r3, r7, #20
   2126c:	60da      	str	r2, [r3, #12]
            wv[2] = wv[1];
   2126e:	f107 0314 	add.w	r3, r7, #20
   21272:	685a      	ldr	r2, [r3, #4]
   21274:	f107 0314 	add.w	r3, r7, #20
   21278:	609a      	str	r2, [r3, #8]
            wv[1] = wv[0];
   2127a:	f107 0314 	add.w	r3, r7, #20
   2127e:	681a      	ldr	r2, [r3, #0]
   21280:	f107 0314 	add.w	r3, r7, #20
   21284:	605a      	str	r2, [r3, #4]
            wv[0] = t1 + t2;
   21286:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   2128a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
   2128e:	441a      	add	r2, r3
   21290:	f107 0314 	add.w	r3, r7, #20
   21294:	601a      	str	r2, [r3, #0]
        }
        for (j = 0; j < 8; j++)
        {
            wv[j] = h[j];
        }
        for (j = 0; j < 64; j++) {
   21296:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2129a:	3301      	adds	r3, #1
   2129c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   212a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   212a4:	2b3f      	cmp	r3, #63	; 0x3f
   212a6:	f77f af61 	ble.w	2116c <gxsha256_transform+0x1a8>
            wv[3] = wv[2];
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }
        for (j = 0; j < 8; j++)
   212aa:	2300      	movs	r3, #0
   212ac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   212b0:	e01b      	b.n	212ea <gxsha256_transform+0x326>
        {
            h[j] += wv[j];
   212b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   212b6:	009b      	lsls	r3, r3, #2
   212b8:	f107 020c 	add.w	r2, r7, #12
   212bc:	6812      	ldr	r2, [r2, #0]
   212be:	4413      	add	r3, r2
   212c0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
   212c4:	0092      	lsls	r2, r2, #2
   212c6:	f107 010c 	add.w	r1, r7, #12
   212ca:	6809      	ldr	r1, [r1, #0]
   212cc:	440a      	add	r2, r1
   212ce:	6811      	ldr	r1, [r2, #0]
   212d0:	f107 0214 	add.w	r2, r7, #20
   212d4:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   212d8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   212dc:	440a      	add	r2, r1
   212de:	601a      	str	r2, [r3, #0]
            wv[3] = wv[2];
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }
        for (j = 0; j < 8; j++)
   212e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   212e4:	3301      	adds	r3, #1
   212e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   212ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   212ee:	2b07      	cmp	r3, #7
   212f0:	dddf      	ble.n	212b2 <gxsha256_transform+0x2ee>
    unsigned int wv[8];
    unsigned int t1, t2;
    const unsigned char *sub_block;
    int i;
    int j;
    for (i = 0; i < (int)block_nb; i++)
   212f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   212f6:	3301      	adds	r3, #1
   212f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   212fc:	1d3b      	adds	r3, r7, #4
   212fe:	681b      	ldr	r3, [r3, #0]
   21300:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   21304:	429a      	cmp	r2, r3
   21306:	f6ff ae6c 	blt.w	20fe2 <gxsha256_transform+0x1e>
        for (j = 0; j < 8; j++)
        {
            h[j] += wv[j];
        }
    }
}
   2130a:	bf00      	nop
   2130c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
   21310:	46bd      	mov	sp, r7
   21312:	bc80      	pop	{r7}
   21314:	4770      	bx	lr
   21316:	bf00      	nop
   21318:	0002cdfc 	.word	0x0002cdfc

0002131c <gxsha256_update>:

int gxsha256_update(unsigned long *h, unsigned char *block, gxByteBuffer* data, unsigned int *len, unsigned int *totalLen)
{
   2131c:	b580      	push	{r7, lr}
   2131e:	b08a      	sub	sp, #40	; 0x28
   21320:	af00      	add	r7, sp, #0
   21322:	60f8      	str	r0, [r7, #12]
   21324:	60b9      	str	r1, [r7, #8]
   21326:	607a      	str	r2, [r7, #4]
   21328:	603b      	str	r3, [r7, #0]
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;
    tmp_len = 64 - (data->size - data->position);
   2132a:	687b      	ldr	r3, [r7, #4]
   2132c:	88db      	ldrh	r3, [r3, #6]
   2132e:	461a      	mov	r2, r3
   21330:	687b      	ldr	r3, [r7, #4]
   21332:	891b      	ldrh	r3, [r3, #8]
   21334:	1ad3      	subs	r3, r2, r3
   21336:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2133a:	627b      	str	r3, [r7, #36]	; 0x24
    rem_len = data->size < tmp_len ? data->size : tmp_len;
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	88db      	ldrh	r3, [r3, #6]
   21340:	461a      	mov	r2, r3
   21342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21344:	4293      	cmp	r3, r2
   21346:	bf28      	it	cs
   21348:	4613      	movcs	r3, r2
   2134a:	623b      	str	r3, [r7, #32]
    memcpy(&block[data->position], data->data, rem_len);
   2134c:	687b      	ldr	r3, [r7, #4]
   2134e:	891b      	ldrh	r3, [r3, #8]
   21350:	461a      	mov	r2, r3
   21352:	68bb      	ldr	r3, [r7, #8]
   21354:	1898      	adds	r0, r3, r2
   21356:	687b      	ldr	r3, [r7, #4]
   21358:	681b      	ldr	r3, [r3, #0]
   2135a:	6a3a      	ldr	r2, [r7, #32]
   2135c:	4619      	mov	r1, r3
   2135e:	f008 fb90 	bl	29a82 <memcpy>
    if (data->size - data->position < 64)
   21362:	687b      	ldr	r3, [r7, #4]
   21364:	88db      	ldrh	r3, [r3, #6]
   21366:	461a      	mov	r2, r3
   21368:	687b      	ldr	r3, [r7, #4]
   2136a:	891b      	ldrh	r3, [r3, #8]
   2136c:	1ad3      	subs	r3, r2, r3
   2136e:	2b3f      	cmp	r3, #63	; 0x3f
   21370:	dc05      	bgt.n	2137e <gxsha256_update+0x62>
    {
        data->position = data->size;
   21372:	687b      	ldr	r3, [r7, #4]
   21374:	88da      	ldrh	r2, [r3, #6]
   21376:	687b      	ldr	r3, [r7, #4]
   21378:	811a      	strh	r2, [r3, #8]
        return 0;
   2137a:	2300      	movs	r3, #0
   2137c:	e02f      	b.n	213de <gxsha256_update+0xc2>
    }
    new_len = *len - rem_len;
   2137e:	683b      	ldr	r3, [r7, #0]
   21380:	681a      	ldr	r2, [r3, #0]
   21382:	6a3b      	ldr	r3, [r7, #32]
   21384:	1ad3      	subs	r3, r2, r3
   21386:	61fb      	str	r3, [r7, #28]
    block_nb = new_len / 64;
   21388:	69fb      	ldr	r3, [r7, #28]
   2138a:	099b      	lsrs	r3, r3, #6
   2138c:	61bb      	str	r3, [r7, #24]
    shifted_message = data->data + rem_len;
   2138e:	687b      	ldr	r3, [r7, #4]
   21390:	681a      	ldr	r2, [r3, #0]
   21392:	6a3b      	ldr	r3, [r7, #32]
   21394:	4413      	add	r3, r2
   21396:	617b      	str	r3, [r7, #20]
    gxsha256_transform(h, block, 1);
   21398:	2201      	movs	r2, #1
   2139a:	68b9      	ldr	r1, [r7, #8]
   2139c:	68f8      	ldr	r0, [r7, #12]
   2139e:	f7ff fe11 	bl	20fc4 <gxsha256_transform>
    gxsha256_transform(h, shifted_message, block_nb);
   213a2:	69ba      	ldr	r2, [r7, #24]
   213a4:	6979      	ldr	r1, [r7, #20]
   213a6:	68f8      	ldr	r0, [r7, #12]
   213a8:	f7ff fe0c 	bl	20fc4 <gxsha256_transform>
    rem_len = new_len % 64;
   213ac:	69fb      	ldr	r3, [r7, #28]
   213ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   213b2:	623b      	str	r3, [r7, #32]
    memcpy(block, &shifted_message[block_nb << 6], rem_len);
   213b4:	69bb      	ldr	r3, [r7, #24]
   213b6:	019b      	lsls	r3, r3, #6
   213b8:	697a      	ldr	r2, [r7, #20]
   213ba:	4413      	add	r3, r2
   213bc:	6a3a      	ldr	r2, [r7, #32]
   213be:	4619      	mov	r1, r3
   213c0:	68b8      	ldr	r0, [r7, #8]
   213c2:	f008 fb5e 	bl	29a82 <memcpy>
    *len = rem_len;
   213c6:	683b      	ldr	r3, [r7, #0]
   213c8:	6a3a      	ldr	r2, [r7, #32]
   213ca:	601a      	str	r2, [r3, #0]
    *totalLen += (block_nb + 1) << 6;
   213cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   213ce:	681a      	ldr	r2, [r3, #0]
   213d0:	69bb      	ldr	r3, [r7, #24]
   213d2:	3301      	adds	r3, #1
   213d4:	019b      	lsls	r3, r3, #6
   213d6:	441a      	add	r2, r3
   213d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   213da:	601a      	str	r2, [r3, #0]
    return 0;
   213dc:	2300      	movs	r3, #0
}
   213de:	4618      	mov	r0, r3
   213e0:	3728      	adds	r7, #40	; 0x28
   213e2:	46bd      	mov	sp, r7
   213e4:	bd80      	pop	{r7, pc}
   213e6:	bf00      	nop

000213e8 <gxsha256_final>:

int gxsha256_final(unsigned long *h, unsigned char *block, unsigned char *digest, unsigned int len, unsigned int totalLen)
{
   213e8:	b580      	push	{r7, lr}
   213ea:	b088      	sub	sp, #32
   213ec:	af00      	add	r7, sp, #0
   213ee:	60f8      	str	r0, [r7, #12]
   213f0:	60b9      	str	r1, [r7, #8]
   213f2:	607a      	str	r2, [r7, #4]
   213f4:	603b      	str	r3, [r7, #0]
    unsigned int block_nb;
    unsigned int pm_len;
    unsigned int len_b;
    int i;
    block_nb = (1 + ((64 - 9) < (len % 64)));
   213f6:	683b      	ldr	r3, [r7, #0]
   213f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   213fc:	2b37      	cmp	r3, #55	; 0x37
   213fe:	d901      	bls.n	21404 <gxsha256_final+0x1c>
   21400:	2302      	movs	r3, #2
   21402:	e000      	b.n	21406 <gxsha256_final+0x1e>
   21404:	2301      	movs	r3, #1
   21406:	61bb      	str	r3, [r7, #24]
    len_b = (totalLen + len) << 3;
   21408:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2140a:	683b      	ldr	r3, [r7, #0]
   2140c:	4413      	add	r3, r2
   2140e:	00db      	lsls	r3, r3, #3
   21410:	617b      	str	r3, [r7, #20]
    pm_len = block_nb << 6;
   21412:	69bb      	ldr	r3, [r7, #24]
   21414:	019b      	lsls	r3, r3, #6
   21416:	613b      	str	r3, [r7, #16]
    memset(block + len, 0, pm_len - len);
   21418:	68ba      	ldr	r2, [r7, #8]
   2141a:	683b      	ldr	r3, [r7, #0]
   2141c:	18d0      	adds	r0, r2, r3
   2141e:	693a      	ldr	r2, [r7, #16]
   21420:	683b      	ldr	r3, [r7, #0]
   21422:	1ad3      	subs	r3, r2, r3
   21424:	461a      	mov	r2, r3
   21426:	2100      	movs	r1, #0
   21428:	f008 fb51 	bl	29ace <memset>
    block[len] = 0x80;
   2142c:	68ba      	ldr	r2, [r7, #8]
   2142e:	683b      	ldr	r3, [r7, #0]
   21430:	4413      	add	r3, r2
   21432:	2280      	movs	r2, #128	; 0x80
   21434:	701a      	strb	r2, [r3, #0]
    SHA2_UNPACK32(len_b, block + pm_len - 4);
   21436:	693b      	ldr	r3, [r7, #16]
   21438:	3b01      	subs	r3, #1
   2143a:	68ba      	ldr	r2, [r7, #8]
   2143c:	4413      	add	r3, r2
   2143e:	697a      	ldr	r2, [r7, #20]
   21440:	b2d2      	uxtb	r2, r2
   21442:	701a      	strb	r2, [r3, #0]
   21444:	693b      	ldr	r3, [r7, #16]
   21446:	3b02      	subs	r3, #2
   21448:	68ba      	ldr	r2, [r7, #8]
   2144a:	4413      	add	r3, r2
   2144c:	697a      	ldr	r2, [r7, #20]
   2144e:	0a12      	lsrs	r2, r2, #8
   21450:	b2d2      	uxtb	r2, r2
   21452:	701a      	strb	r2, [r3, #0]
   21454:	693b      	ldr	r3, [r7, #16]
   21456:	3b03      	subs	r3, #3
   21458:	68ba      	ldr	r2, [r7, #8]
   2145a:	4413      	add	r3, r2
   2145c:	697a      	ldr	r2, [r7, #20]
   2145e:	0c12      	lsrs	r2, r2, #16
   21460:	b2d2      	uxtb	r2, r2
   21462:	701a      	strb	r2, [r3, #0]
   21464:	693b      	ldr	r3, [r7, #16]
   21466:	3b04      	subs	r3, #4
   21468:	68ba      	ldr	r2, [r7, #8]
   2146a:	4413      	add	r3, r2
   2146c:	697a      	ldr	r2, [r7, #20]
   2146e:	0e12      	lsrs	r2, r2, #24
   21470:	b2d2      	uxtb	r2, r2
   21472:	701a      	strb	r2, [r3, #0]
    gxsha256_transform(h, block, block_nb);
   21474:	69ba      	ldr	r2, [r7, #24]
   21476:	68b9      	ldr	r1, [r7, #8]
   21478:	68f8      	ldr	r0, [r7, #12]
   2147a:	f7ff fda3 	bl	20fc4 <gxsha256_transform>
    for (i = 0; i < 8; i++)
   2147e:	2300      	movs	r3, #0
   21480:	61fb      	str	r3, [r7, #28]
   21482:	e035      	b.n	214f0 <gxsha256_final+0x108>
    {
        SHA2_UNPACK32(h[i], &digest[i << 2]);
   21484:	69fb      	ldr	r3, [r7, #28]
   21486:	009b      	lsls	r3, r3, #2
   21488:	3303      	adds	r3, #3
   2148a:	687a      	ldr	r2, [r7, #4]
   2148c:	4413      	add	r3, r2
   2148e:	69fa      	ldr	r2, [r7, #28]
   21490:	0092      	lsls	r2, r2, #2
   21492:	68f9      	ldr	r1, [r7, #12]
   21494:	440a      	add	r2, r1
   21496:	6812      	ldr	r2, [r2, #0]
   21498:	b2d2      	uxtb	r2, r2
   2149a:	701a      	strb	r2, [r3, #0]
   2149c:	69fb      	ldr	r3, [r7, #28]
   2149e:	009b      	lsls	r3, r3, #2
   214a0:	3302      	adds	r3, #2
   214a2:	687a      	ldr	r2, [r7, #4]
   214a4:	4413      	add	r3, r2
   214a6:	69fa      	ldr	r2, [r7, #28]
   214a8:	0092      	lsls	r2, r2, #2
   214aa:	68f9      	ldr	r1, [r7, #12]
   214ac:	440a      	add	r2, r1
   214ae:	6812      	ldr	r2, [r2, #0]
   214b0:	0a12      	lsrs	r2, r2, #8
   214b2:	b2d2      	uxtb	r2, r2
   214b4:	701a      	strb	r2, [r3, #0]
   214b6:	69fb      	ldr	r3, [r7, #28]
   214b8:	009b      	lsls	r3, r3, #2
   214ba:	3301      	adds	r3, #1
   214bc:	687a      	ldr	r2, [r7, #4]
   214be:	4413      	add	r3, r2
   214c0:	69fa      	ldr	r2, [r7, #28]
   214c2:	0092      	lsls	r2, r2, #2
   214c4:	68f9      	ldr	r1, [r7, #12]
   214c6:	440a      	add	r2, r1
   214c8:	6812      	ldr	r2, [r2, #0]
   214ca:	0c12      	lsrs	r2, r2, #16
   214cc:	b2d2      	uxtb	r2, r2
   214ce:	701a      	strb	r2, [r3, #0]
   214d0:	69fb      	ldr	r3, [r7, #28]
   214d2:	009b      	lsls	r3, r3, #2
   214d4:	461a      	mov	r2, r3
   214d6:	687b      	ldr	r3, [r7, #4]
   214d8:	4413      	add	r3, r2
   214da:	69fa      	ldr	r2, [r7, #28]
   214dc:	0092      	lsls	r2, r2, #2
   214de:	68f9      	ldr	r1, [r7, #12]
   214e0:	440a      	add	r2, r1
   214e2:	6812      	ldr	r2, [r2, #0]
   214e4:	0e12      	lsrs	r2, r2, #24
   214e6:	b2d2      	uxtb	r2, r2
   214e8:	701a      	strb	r2, [r3, #0]
    pm_len = block_nb << 6;
    memset(block + len, 0, pm_len - len);
    block[len] = 0x80;
    SHA2_UNPACK32(len_b, block + pm_len - 4);
    gxsha256_transform(h, block, block_nb);
    for (i = 0; i < 8; i++)
   214ea:	69fb      	ldr	r3, [r7, #28]
   214ec:	3301      	adds	r3, #1
   214ee:	61fb      	str	r3, [r7, #28]
   214f0:	69fb      	ldr	r3, [r7, #28]
   214f2:	2b07      	cmp	r3, #7
   214f4:	ddc6      	ble.n	21484 <gxsha256_final+0x9c>
    {
        SHA2_UNPACK32(h[i], &digest[i << 2]);
    }
    return 0;
   214f6:	2300      	movs	r3, #0
}
   214f8:	4618      	mov	r0, r3
   214fa:	3720      	adds	r7, #32
   214fc:	46bd      	mov	sp, r7
   214fe:	bd80      	pop	{r7, pc}

00021500 <gxsha256_encrypt>:

int gxsha256_encrypt(gxByteBuffer* data, gxByteBuffer* digest)
{
   21500:	b5b0      	push	{r4, r5, r7, lr}
   21502:	b0ae      	sub	sp, #184	; 0xb8
   21504:	af02      	add	r7, sp, #8
   21506:	6078      	str	r0, [r7, #4]
   21508:	6039      	str	r1, [r7, #0]
    unsigned int len = data->size, totalLen = 0;
   2150a:	687b      	ldr	r3, [r7, #4]
   2150c:	88db      	ldrh	r3, [r3, #6]
   2150e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   21512:	2300      	movs	r3, #0
   21514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    unsigned long h[8] = { 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };
   21518:	4b18      	ldr	r3, [pc, #96]	; (2157c <gxsha256_encrypt+0x7c>)
   2151a:	f107 0488 	add.w	r4, r7, #136	; 0x88
   2151e:	461d      	mov	r5, r3
   21520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   21528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char block[128];
    bb_capacity(digest, 32);
   2152c:	2120      	movs	r1, #32
   2152e:	6838      	ldr	r0, [r7, #0]
   21530:	f7e1 fbf0 	bl	2d14 <bb_capacity>
    digest->size = 32;
   21534:	683b      	ldr	r3, [r7, #0]
   21536:	2220      	movs	r2, #32
   21538:	80da      	strh	r2, [r3, #6]
    gxsha256_update((unsigned long*)&h, block, data, &len, &totalLen);
   2153a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   2153e:	f107 0108 	add.w	r1, r7, #8
   21542:	f107 0088 	add.w	r0, r7, #136	; 0x88
   21546:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   2154a:	9300      	str	r3, [sp, #0]
   2154c:	4613      	mov	r3, r2
   2154e:	687a      	ldr	r2, [r7, #4]
   21550:	f7ff fee4 	bl	2131c <gxsha256_update>
    return gxsha256_final(h, block, digest->data, len, totalLen);
   21554:	683b      	ldr	r3, [r7, #0]
   21556:	681a      	ldr	r2, [r3, #0]
   21558:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
   2155c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   21560:	f107 0108 	add.w	r1, r7, #8
   21564:	f107 0088 	add.w	r0, r7, #136	; 0x88
   21568:	9300      	str	r3, [sp, #0]
   2156a:	4623      	mov	r3, r4
   2156c:	f7ff ff3c 	bl	213e8 <gxsha256_final>
   21570:	4603      	mov	r3, r0
}
   21572:	4618      	mov	r0, r3
   21574:	37b0      	adds	r7, #176	; 0xb0
   21576:	46bd      	mov	sp, r7
   21578:	bdb0      	pop	{r4, r5, r7, pc}
   2157a:	bf00      	nop
   2157c:	0002bfd4 	.word	0x0002bfd4

00021580 <vec_init>:
#endif
#include "../include/gxvalueeventargs.h"
#include "../include/objectarray.h"

void vec_init(gxValueEventCollection* arr)
{
   21580:	b480      	push	{r7}
   21582:	b083      	sub	sp, #12
   21584:	af00      	add	r7, sp, #0
   21586:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
   21588:	687b      	ldr	r3, [r7, #4]
   2158a:	2200      	movs	r2, #0
   2158c:	711a      	strb	r2, [r3, #4]
    arr->data = NULL;
   2158e:	687b      	ldr	r3, [r7, #4]
   21590:	2200      	movs	r2, #0
   21592:	601a      	str	r2, [r3, #0]
    arr->position = 0;
   21594:	687b      	ldr	r3, [r7, #4]
   21596:	2200      	movs	r2, #0
   21598:	719a      	strb	r2, [r3, #6]
    arr->size = 0;
   2159a:	687b      	ldr	r3, [r7, #4]
   2159c:	2200      	movs	r2, #0
   2159e:	715a      	strb	r2, [r3, #5]
}
   215a0:	bf00      	nop
   215a2:	370c      	adds	r7, #12
   215a4:	46bd      	mov	sp, r7
   215a6:	bc80      	pop	{r7}
   215a8:	4770      	bx	lr
   215aa:	bf00      	nop

000215ac <vec_push>:
    }
}

//Push new data to the gxValueEventCollection.
void vec_push(gxValueEventCollection * arr, gxValueEventArg* item)
{
   215ac:	b580      	push	{r7, lr}
   215ae:	b082      	sub	sp, #8
   215b0:	af00      	add	r7, sp, #0
   215b2:	6078      	str	r0, [r7, #4]
   215b4:	6039      	str	r1, [r7, #0]
    if (arr->size >= arr->capacity)
   215b6:	687b      	ldr	r3, [r7, #4]
   215b8:	795a      	ldrb	r2, [r3, #5]
   215ba:	687b      	ldr	r3, [r7, #4]
   215bc:	791b      	ldrb	r3, [r3, #4]
   215be:	429a      	cmp	r2, r3
   215c0:	d320      	bcc.n	21604 <vec_push+0x58>
    {
        arr->capacity += 2;
   215c2:	687b      	ldr	r3, [r7, #4]
   215c4:	791b      	ldrb	r3, [r3, #4]
   215c6:	3302      	adds	r3, #2
   215c8:	b2da      	uxtb	r2, r3
   215ca:	687b      	ldr	r3, [r7, #4]
   215cc:	711a      	strb	r2, [r3, #4]
        if (arr->data == NULL)
   215ce:	687b      	ldr	r3, [r7, #4]
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	2b00      	cmp	r3, #0
   215d4:	d10a      	bne.n	215ec <vec_push+0x40>
        {
            arr->data = (gxValueEventArg**)gxmalloc(arr->capacity * sizeof(gxValueEventArg*));
   215d6:	687b      	ldr	r3, [r7, #4]
   215d8:	791b      	ldrb	r3, [r3, #4]
   215da:	009b      	lsls	r3, r3, #2
   215dc:	4618      	mov	r0, r3
   215de:	f008 fa31 	bl	29a44 <malloc>
   215e2:	4603      	mov	r3, r0
   215e4:	461a      	mov	r2, r3
   215e6:	687b      	ldr	r3, [r7, #4]
   215e8:	601a      	str	r2, [r3, #0]
   215ea:	e00b      	b.n	21604 <vec_push+0x58>
        }
        else
        {
            arr->data = (gxValueEventArg**)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   215ec:	687b      	ldr	r3, [r7, #4]
   215ee:	681a      	ldr	r2, [r3, #0]
   215f0:	687b      	ldr	r3, [r7, #4]
   215f2:	791b      	ldrb	r3, [r3, #4]
   215f4:	009b      	lsls	r3, r3, #2
   215f6:	4619      	mov	r1, r3
   215f8:	4610      	mov	r0, r2
   215fa:	f008 fdd9 	bl	2a1b0 <realloc>
   215fe:	4602      	mov	r2, r0
   21600:	687b      	ldr	r3, [r7, #4]
   21602:	601a      	str	r2, [r3, #0]
        }
    }
    arr->data[arr->size] = item;
   21604:	687b      	ldr	r3, [r7, #4]
   21606:	681a      	ldr	r2, [r3, #0]
   21608:	687b      	ldr	r3, [r7, #4]
   2160a:	795b      	ldrb	r3, [r3, #5]
   2160c:	009b      	lsls	r3, r3, #2
   2160e:	4413      	add	r3, r2
   21610:	683a      	ldr	r2, [r7, #0]
   21612:	601a      	str	r2, [r3, #0]
    ++arr->size;
   21614:	687b      	ldr	r3, [r7, #4]
   21616:	795b      	ldrb	r3, [r3, #5]
   21618:	3301      	adds	r3, #1
   2161a:	b2da      	uxtb	r2, r3
   2161c:	687b      	ldr	r3, [r7, #4]
   2161e:	715a      	strb	r2, [r3, #5]
}
   21620:	bf00      	nop
   21622:	3708      	adds	r7, #8
   21624:	46bd      	mov	sp, r7
   21626:	bd80      	pop	{r7, pc}

00021628 <vec_empty>:

void vec_empty(
    gxValueEventCollection* arr)
{
   21628:	b580      	push	{r7, lr}
   2162a:	b082      	sub	sp, #8
   2162c:	af00      	add	r7, sp, #0
   2162e:	6078      	str	r0, [r7, #4]
    if (arr->size != 0)
   21630:	687b      	ldr	r3, [r7, #4]
   21632:	795b      	ldrb	r3, [r3, #5]
   21634:	2b00      	cmp	r3, #0
   21636:	d007      	beq.n	21648 <vec_empty+0x20>
    {
        gxfree(arr->data);
   21638:	687b      	ldr	r3, [r7, #4]
   2163a:	681b      	ldr	r3, [r3, #0]
   2163c:	4618      	mov	r0, r3
   2163e:	f008 fa09 	bl	29a54 <free>
        arr->data = NULL;
   21642:	687b      	ldr	r3, [r7, #4]
   21644:	2200      	movs	r2, #0
   21646:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
   21648:	687b      	ldr	r3, [r7, #4]
   2164a:	2200      	movs	r2, #0
   2164c:	711a      	strb	r2, [r3, #4]
    arr->size = 0;
   2164e:	687b      	ldr	r3, [r7, #4]
   21650:	2200      	movs	r2, #0
   21652:	715a      	strb	r2, [r3, #5]
    arr->position = 0;
   21654:	687b      	ldr	r3, [r7, #4]
   21656:	2200      	movs	r2, #0
   21658:	719a      	strb	r2, [r3, #6]
}
   2165a:	bf00      	nop
   2165c:	3708      	adds	r7, #8
   2165e:	46bd      	mov	sp, r7
   21660:	bd80      	pop	{r7, pc}
   21662:	bf00      	nop

00021664 <vec_clear>:

void vec_clear(
    gxValueEventCollection* arr)
{
   21664:	b580      	push	{r7, lr}
   21666:	b084      	sub	sp, #16
   21668:	af00      	add	r7, sp, #0
   2166a:	6078      	str	r0, [r7, #4]
    int pos;
    if (arr->size != 0)
   2166c:	687b      	ldr	r3, [r7, #4]
   2166e:	795b      	ldrb	r3, [r3, #5]
   21670:	2b00      	cmp	r3, #0
   21672:	d025      	beq.n	216c0 <vec_clear+0x5c>
    {
        for (pos = 0; pos != arr->size; ++pos)
   21674:	2300      	movs	r3, #0
   21676:	60fb      	str	r3, [r7, #12]
   21678:	e014      	b.n	216a4 <vec_clear+0x40>
        {
            ve_clear(arr->data[pos]);
   2167a:	687b      	ldr	r3, [r7, #4]
   2167c:	681a      	ldr	r2, [r3, #0]
   2167e:	68fb      	ldr	r3, [r7, #12]
   21680:	009b      	lsls	r3, r3, #2
   21682:	4413      	add	r3, r2
   21684:	681b      	ldr	r3, [r3, #0]
   21686:	4618      	mov	r0, r3
   21688:	f000 f886 	bl	21798 <ve_clear>
            gxfree(arr->data[pos]);
   2168c:	687b      	ldr	r3, [r7, #4]
   2168e:	681a      	ldr	r2, [r3, #0]
   21690:	68fb      	ldr	r3, [r7, #12]
   21692:	009b      	lsls	r3, r3, #2
   21694:	4413      	add	r3, r2
   21696:	681b      	ldr	r3, [r3, #0]
   21698:	4618      	mov	r0, r3
   2169a:	f008 f9db 	bl	29a54 <free>
    gxValueEventCollection* arr)
{
    int pos;
    if (arr->size != 0)
    {
        for (pos = 0; pos != arr->size; ++pos)
   2169e:	68fb      	ldr	r3, [r7, #12]
   216a0:	3301      	adds	r3, #1
   216a2:	60fb      	str	r3, [r7, #12]
   216a4:	687b      	ldr	r3, [r7, #4]
   216a6:	795b      	ldrb	r3, [r3, #5]
   216a8:	461a      	mov	r2, r3
   216aa:	68fb      	ldr	r3, [r7, #12]
   216ac:	429a      	cmp	r2, r3
   216ae:	d1e4      	bne.n	2167a <vec_clear+0x16>
        {
            ve_clear(arr->data[pos]);
            gxfree(arr->data[pos]);
        }
        gxfree(arr->data);
   216b0:	687b      	ldr	r3, [r7, #4]
   216b2:	681b      	ldr	r3, [r3, #0]
   216b4:	4618      	mov	r0, r3
   216b6:	f008 f9cd 	bl	29a54 <free>
        arr->data = NULL;
   216ba:	687b      	ldr	r3, [r7, #4]
   216bc:	2200      	movs	r2, #0
   216be:	601a      	str	r2, [r3, #0]
    }
    arr->capacity = 0;
   216c0:	687b      	ldr	r3, [r7, #4]
   216c2:	2200      	movs	r2, #0
   216c4:	711a      	strb	r2, [r3, #4]
    arr->size = 0;
   216c6:	687b      	ldr	r3, [r7, #4]
   216c8:	2200      	movs	r2, #0
   216ca:	715a      	strb	r2, [r3, #5]
    arr->position = 0;
   216cc:	687b      	ldr	r3, [r7, #4]
   216ce:	2200      	movs	r2, #0
   216d0:	719a      	strb	r2, [r3, #6]
}
   216d2:	bf00      	nop
   216d4:	3710      	adds	r7, #16
   216d6:	46bd      	mov	sp, r7
   216d8:	bd80      	pop	{r7, pc}
   216da:	bf00      	nop

000216dc <vec_getByIndex>:
    ++arr->position;
    return 0;
}

int vec_getByIndex(gxValueEventCollection* arr, int index, gxValueEventArg** value)
{
   216dc:	b480      	push	{r7}
   216de:	b085      	sub	sp, #20
   216e0:	af00      	add	r7, sp, #0
   216e2:	60f8      	str	r0, [r7, #12]
   216e4:	60b9      	str	r1, [r7, #8]
   216e6:	607a      	str	r2, [r7, #4]
    if (index >= arr->size)
   216e8:	68fb      	ldr	r3, [r7, #12]
   216ea:	795b      	ldrb	r3, [r3, #5]
   216ec:	461a      	mov	r2, r3
   216ee:	68bb      	ldr	r3, [r7, #8]
   216f0:	429a      	cmp	r2, r3
   216f2:	dc02      	bgt.n	216fa <vec_getByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   216f4:	f44f 7382 	mov.w	r3, #260	; 0x104
   216f8:	e008      	b.n	2170c <vec_getByIndex+0x30>
    }
    *value = arr->data[index];
   216fa:	68fb      	ldr	r3, [r7, #12]
   216fc:	681a      	ldr	r2, [r3, #0]
   216fe:	68bb      	ldr	r3, [r7, #8]
   21700:	009b      	lsls	r3, r3, #2
   21702:	4413      	add	r3, r2
   21704:	681a      	ldr	r2, [r3, #0]
   21706:	687b      	ldr	r3, [r7, #4]
   21708:	601a      	str	r2, [r3, #0]
    return 0;
   2170a:	2300      	movs	r3, #0
}
   2170c:	4618      	mov	r0, r3
   2170e:	3714      	adds	r7, #20
   21710:	46bd      	mov	sp, r7
   21712:	bc80      	pop	{r7}
   21714:	4770      	bx	lr
   21716:	bf00      	nop

00021718 <ve_init>:

void ve_init(gxValueEventArg * ve)
{
   21718:	b580      	push	{r7, lr}
   2171a:	b082      	sub	sp, #8
   2171c:	af00      	add	r7, sp, #0
   2171e:	6078      	str	r0, [r7, #4]
    var_init(&ve->value);
   21720:	687b      	ldr	r3, [r7, #4]
   21722:	4618      	mov	r0, r3
   21724:	f004 fd00 	bl	26128 <var_init>
    ve->handled = 0;
   21728:	687b      	ldr	r3, [r7, #4]
   2172a:	2200      	movs	r2, #0
   2172c:	741a      	strb	r2, [r3, #16]
    ve->target = NULL;
   2172e:	687b      	ldr	r3, [r7, #4]
   21730:	2200      	movs	r2, #0
   21732:	615a      	str	r2, [r3, #20]
    ve->index = 0;
   21734:	687b      	ldr	r3, [r7, #4]
   21736:	2200      	movs	r2, #0
   21738:	761a      	strb	r2, [r3, #24]
    ve->dataType = DLMS_DATA_TYPE_NONE;
   2173a:	687b      	ldr	r3, [r7, #4]
   2173c:	2200      	movs	r2, #0
   2173e:	765a      	strb	r2, [r3, #25]
    ve->selector = 0;
   21740:	687b      	ldr	r3, [r7, #4]
   21742:	2200      	movs	r2, #0
   21744:	769a      	strb	r2, [r3, #26]
    var_init(&ve->parameters);
   21746:	687b      	ldr	r3, [r7, #4]
   21748:	3320      	adds	r3, #32
   2174a:	4618      	mov	r0, r3
   2174c:	f004 fcec 	bl	26128 <var_init>
    ve->error = DLMS_ERROR_CODE_OK;
   21750:	687b      	ldr	r3, [r7, #4]
   21752:	2200      	movs	r2, #0
   21754:	861a      	strh	r2, [r3, #48]	; 0x30
    ve->action = 0;
   21756:	687b      	ldr	r3, [r7, #4]
   21758:	2200      	movs	r2, #0
   2175a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    ve->byteArray = 0;
   2175e:	687b      	ldr	r3, [r7, #4]
   21760:	2200      	movs	r2, #0
   21762:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    oa_init(&ve->releasedObjects);
   21766:	687b      	ldr	r3, [r7, #4]
   21768:	3334      	adds	r3, #52	; 0x34
   2176a:	4618      	mov	r0, r3
   2176c:	f000 fbf2 	bl	21f54 <oa_init>
    ve->skipMaxPduSize = 0;
   21770:	687b      	ldr	r3, [r7, #4]
   21772:	2200      	movs	r2, #0
   21774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ve->transactionStartIndex = 0;
   21778:	687b      	ldr	r3, [r7, #4]
   2177a:	2200      	movs	r2, #0
   2177c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    ve->transactionEndIndex = 0;
   21780:	687b      	ldr	r3, [r7, #4]
   21782:	2200      	movs	r2, #0
   21784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    ve->transaction = 0;
   21788:	687b      	ldr	r3, [r7, #4]
   2178a:	2200      	movs	r2, #0
   2178c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
   21790:	bf00      	nop
   21792:	3708      	adds	r7, #8
   21794:	46bd      	mov	sp, r7
   21796:	bd80      	pop	{r7, pc}

00021798 <ve_clear>:

void ve_clear(gxValueEventArg * ve)
{
   21798:	b580      	push	{r7, lr}
   2179a:	b082      	sub	sp, #8
   2179c:	af00      	add	r7, sp, #0
   2179e:	6078      	str	r0, [r7, #4]
    var_clear(&ve->value);
   217a0:	687b      	ldr	r3, [r7, #4]
   217a2:	4618      	mov	r0, r3
   217a4:	f004 fcd0 	bl	26148 <var_clear>
    ve->handled = 0;
   217a8:	687b      	ldr	r3, [r7, #4]
   217aa:	2200      	movs	r2, #0
   217ac:	741a      	strb	r2, [r3, #16]
    ve->target = NULL;
   217ae:	687b      	ldr	r3, [r7, #4]
   217b0:	2200      	movs	r2, #0
   217b2:	615a      	str	r2, [r3, #20]
    ve->index = 0;
   217b4:	687b      	ldr	r3, [r7, #4]
   217b6:	2200      	movs	r2, #0
   217b8:	761a      	strb	r2, [r3, #24]
    ve->dataType = DLMS_DATA_TYPE_NONE;
   217ba:	687b      	ldr	r3, [r7, #4]
   217bc:	2200      	movs	r2, #0
   217be:	765a      	strb	r2, [r3, #25]
    ve->selector = 0;
   217c0:	687b      	ldr	r3, [r7, #4]
   217c2:	2200      	movs	r2, #0
   217c4:	769a      	strb	r2, [r3, #26]
    var_clear(&ve->parameters);
   217c6:	687b      	ldr	r3, [r7, #4]
   217c8:	3320      	adds	r3, #32
   217ca:	4618      	mov	r0, r3
   217cc:	f004 fcbc 	bl	26148 <var_clear>
    ve->error = DLMS_ERROR_CODE_OK;
   217d0:	687b      	ldr	r3, [r7, #4]
   217d2:	2200      	movs	r2, #0
   217d4:	861a      	strh	r2, [r3, #48]	; 0x30
    ve->action = 0;
   217d6:	687b      	ldr	r3, [r7, #4]
   217d8:	2200      	movs	r2, #0
   217da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    ve->byteArray = 0;
   217de:	687b      	ldr	r3, [r7, #4]
   217e0:	2200      	movs	r2, #0
   217e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    oa_clear(&ve->releasedObjects);
   217e6:	687b      	ldr	r3, [r7, #4]
   217e8:	3334      	adds	r3, #52	; 0x34
   217ea:	4618      	mov	r0, r3
   217ec:	f000 fcb0 	bl	22150 <oa_clear>
    ve->skipMaxPduSize = 0;
   217f0:	687b      	ldr	r3, [r7, #4]
   217f2:	2200      	movs	r2, #0
   217f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ve->transactionStartIndex = 0;
   217f8:	687b      	ldr	r3, [r7, #4]
   217fa:	2200      	movs	r2, #0
   217fc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    ve->transactionEndIndex = 0;
   21800:	687b      	ldr	r3, [r7, #4]
   21802:	2200      	movs	r2, #0
   21804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    ve->transaction = 0;
   21808:	687b      	ldr	r3, [r7, #4]
   2180a:	2200      	movs	r2, #0
   2180c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
   21810:	bf00      	nop
   21812:	3708      	adds	r7, #8
   21814:	46bd      	mov	sp, r7
   21816:	bd80      	pop	{r7, pc}

00021818 <hlp_getObjectCountSizeInBytes>:
    }
}
#endif //GX_DLMS_MICROCONTROLLER

unsigned char hlp_getObjectCountSizeInBytes(unsigned long count)
{
   21818:	b480      	push	{r7}
   2181a:	b083      	sub	sp, #12
   2181c:	af00      	add	r7, sp, #0
   2181e:	6078      	str	r0, [r7, #4]
    if (count < 0x80)
   21820:	687b      	ldr	r3, [r7, #4]
   21822:	2b7f      	cmp	r3, #127	; 0x7f
   21824:	d801      	bhi.n	2182a <hlp_getObjectCountSizeInBytes+0x12>
    {
        return 1;
   21826:	2301      	movs	r3, #1
   21828:	e00b      	b.n	21842 <hlp_getObjectCountSizeInBytes+0x2a>
    }
    else if (count < 0x100)
   2182a:	687b      	ldr	r3, [r7, #4]
   2182c:	2bff      	cmp	r3, #255	; 0xff
   2182e:	d801      	bhi.n	21834 <hlp_getObjectCountSizeInBytes+0x1c>
    {
        return 2;
   21830:	2302      	movs	r3, #2
   21832:	e006      	b.n	21842 <hlp_getObjectCountSizeInBytes+0x2a>
    }
    else if (count < 0x10000)
   21834:	687b      	ldr	r3, [r7, #4]
   21836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2183a:	d201      	bcs.n	21840 <hlp_getObjectCountSizeInBytes+0x28>
    {
        return 3;
   2183c:	2303      	movs	r3, #3
   2183e:	e000      	b.n	21842 <hlp_getObjectCountSizeInBytes+0x2a>
    }
    else
    {
        return 5;
   21840:	2305      	movs	r3, #5
    }
}
   21842:	4618      	mov	r0, r3
   21844:	370c      	adds	r7, #12
   21846:	46bd      	mov	sp, r7
   21848:	bc80      	pop	{r7}
   2184a:	4770      	bx	lr

0002184c <hlp_getObjectCount2>:
    }
    return ch;
}

int hlp_getObjectCount2(gxByteBuffer* buff, unsigned short* count)
{
   2184c:	b580      	push	{r7, lr}
   2184e:	b086      	sub	sp, #24
   21850:	af00      	add	r7, sp, #0
   21852:	6078      	str	r0, [r7, #4]
   21854:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char ch;
    ret = bb_getUInt8(buff, &ch);
   21856:	f107 0313 	add.w	r3, r7, #19
   2185a:	4619      	mov	r1, r3
   2185c:	6878      	ldr	r0, [r7, #4]
   2185e:	f7e1 ffa5 	bl	37ac <bb_getUInt8>
   21862:	6178      	str	r0, [r7, #20]
    if (ret != 0)
   21864:	697b      	ldr	r3, [r7, #20]
   21866:	2b00      	cmp	r3, #0
   21868:	d001      	beq.n	2186e <hlp_getObjectCount2+0x22>
    {
        return ret;
   2186a:	697b      	ldr	r3, [r7, #20]
   2186c:	e032      	b.n	218d4 <hlp_getObjectCount2+0x88>
    }
    if (ch > 0x80)
   2186e:	7cfb      	ldrb	r3, [r7, #19]
   21870:	2b80      	cmp	r3, #128	; 0x80
   21872:	d92a      	bls.n	218ca <hlp_getObjectCount2+0x7e>
    {
        if (ch == 0x81)
   21874:	7cfb      	ldrb	r3, [r7, #19]
   21876:	2b81      	cmp	r3, #129	; 0x81
   21878:	d10b      	bne.n	21892 <hlp_getObjectCount2+0x46>
        {
            ret = bb_getUInt8(buff, &ch);
   2187a:	f107 0313 	add.w	r3, r7, #19
   2187e:	4619      	mov	r1, r3
   21880:	6878      	ldr	r0, [r7, #4]
   21882:	f7e1 ff93 	bl	37ac <bb_getUInt8>
   21886:	6178      	str	r0, [r7, #20]
            *count = ch;
   21888:	7cfb      	ldrb	r3, [r7, #19]
   2188a:	b29a      	uxth	r2, r3
   2188c:	683b      	ldr	r3, [r7, #0]
   2188e:	801a      	strh	r2, [r3, #0]
   21890:	e01f      	b.n	218d2 <hlp_getObjectCount2+0x86>
        }
        else if (ch == 0x82)
   21892:	7cfb      	ldrb	r3, [r7, #19]
   21894:	2b82      	cmp	r3, #130	; 0x82
   21896:	d105      	bne.n	218a4 <hlp_getObjectCount2+0x58>
        {
            ret = bb_getUInt16(buff, count);
   21898:	6839      	ldr	r1, [r7, #0]
   2189a:	6878      	ldr	r0, [r7, #4]
   2189c:	f7e1 ffe8 	bl	3870 <bb_getUInt16>
   218a0:	6178      	str	r0, [r7, #20]
   218a2:	e016      	b.n	218d2 <hlp_getObjectCount2+0x86>
        }
        else if (ch == 0x84)
   218a4:	7cfb      	ldrb	r3, [r7, #19]
   218a6:	2b84      	cmp	r3, #132	; 0x84
   218a8:	d10b      	bne.n	218c2 <hlp_getObjectCount2+0x76>
        {
            unsigned long value;
            ret = bb_getUInt32(buff, &value);
   218aa:	f107 030c 	add.w	r3, r7, #12
   218ae:	4619      	mov	r1, r3
   218b0:	6878      	ldr	r0, [r7, #4]
   218b2:	f7e2 f80d 	bl	38d0 <bb_getUInt32>
   218b6:	6178      	str	r0, [r7, #20]
            *count = (unsigned short)value;
   218b8:	68fb      	ldr	r3, [r7, #12]
   218ba:	b29a      	uxth	r2, r3
   218bc:	683b      	ldr	r3, [r7, #0]
   218be:	801a      	strh	r2, [r3, #0]
   218c0:	e007      	b.n	218d2 <hlp_getObjectCount2+0x86>
        }
        else
        {
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   218c2:	f44f 7381 	mov.w	r3, #258	; 0x102
   218c6:	617b      	str	r3, [r7, #20]
   218c8:	e003      	b.n	218d2 <hlp_getObjectCount2+0x86>
        }
    }
    else
    {
        *count = ch;
   218ca:	7cfb      	ldrb	r3, [r7, #19]
   218cc:	b29a      	uxth	r2, r3
   218ce:	683b      	ldr	r3, [r7, #0]
   218d0:	801a      	strh	r2, [r3, #0]
    }
    return ret;
   218d2:	697b      	ldr	r3, [r7, #20]
}
   218d4:	4618      	mov	r0, r3
   218d6:	3718      	adds	r7, #24
   218d8:	46bd      	mov	sp, r7
   218da:	bd80      	pop	{r7, pc}

000218dc <hlp_setObjectCount>:

// Set count of items.
int hlp_setObjectCount(unsigned long count, gxByteBuffer* buff)
{
   218dc:	b580      	push	{r7, lr}
   218de:	b084      	sub	sp, #16
   218e0:	af00      	add	r7, sp, #0
   218e2:	6078      	str	r0, [r7, #4]
   218e4:	6039      	str	r1, [r7, #0]
    int ret;
    if (count < 0x80)
   218e6:	687b      	ldr	r3, [r7, #4]
   218e8:	2b7f      	cmp	r3, #127	; 0x7f
   218ea:	d807      	bhi.n	218fc <hlp_setObjectCount+0x20>
    {
        ret = bb_setUInt8(buff, (unsigned char)count);
   218ec:	687b      	ldr	r3, [r7, #4]
   218ee:	b2db      	uxtb	r3, r3
   218f0:	4619      	mov	r1, r3
   218f2:	6838      	ldr	r0, [r7, #0]
   218f4:	f7e1 fa8e 	bl	2e14 <bb_setUInt8>
   218f8:	60f8      	str	r0, [r7, #12]
   218fa:	e033      	b.n	21964 <hlp_setObjectCount+0x88>
    }
    else if (count < 0x100)
   218fc:	687b      	ldr	r3, [r7, #4]
   218fe:	2bff      	cmp	r3, #255	; 0xff
   21900:	d80f      	bhi.n	21922 <hlp_setObjectCount+0x46>
    {
        if ((ret = bb_setUInt8(buff, 0x81)) == 0)
   21902:	2181      	movs	r1, #129	; 0x81
   21904:	6838      	ldr	r0, [r7, #0]
   21906:	f7e1 fa85 	bl	2e14 <bb_setUInt8>
   2190a:	60f8      	str	r0, [r7, #12]
   2190c:	68fb      	ldr	r3, [r7, #12]
   2190e:	2b00      	cmp	r3, #0
   21910:	d128      	bne.n	21964 <hlp_setObjectCount+0x88>
        {
            ret = bb_setUInt8(buff, (unsigned char)count);
   21912:	687b      	ldr	r3, [r7, #4]
   21914:	b2db      	uxtb	r3, r3
   21916:	4619      	mov	r1, r3
   21918:	6838      	ldr	r0, [r7, #0]
   2191a:	f7e1 fa7b 	bl	2e14 <bb_setUInt8>
   2191e:	60f8      	str	r0, [r7, #12]
   21920:	e020      	b.n	21964 <hlp_setObjectCount+0x88>
        }
    }
    else if (count < 0x10000)
   21922:	687b      	ldr	r3, [r7, #4]
   21924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21928:	d20f      	bcs.n	2194a <hlp_setObjectCount+0x6e>
    {
        if ((ret = bb_setUInt8(buff, 0x82)) == 0)
   2192a:	2182      	movs	r1, #130	; 0x82
   2192c:	6838      	ldr	r0, [r7, #0]
   2192e:	f7e1 fa71 	bl	2e14 <bb_setUInt8>
   21932:	60f8      	str	r0, [r7, #12]
   21934:	68fb      	ldr	r3, [r7, #12]
   21936:	2b00      	cmp	r3, #0
   21938:	d114      	bne.n	21964 <hlp_setObjectCount+0x88>
        {
            ret = bb_setUInt16(buff, (unsigned short)count);
   2193a:	687b      	ldr	r3, [r7, #4]
   2193c:	b29b      	uxth	r3, r3
   2193e:	4619      	mov	r1, r3
   21940:	6838      	ldr	r0, [r7, #0]
   21942:	f7e1 faf9 	bl	2f38 <bb_setUInt16>
   21946:	60f8      	str	r0, [r7, #12]
   21948:	e00c      	b.n	21964 <hlp_setObjectCount+0x88>
        }
    }
    else
    {
        if ((ret = bb_setUInt8(buff, 0x84)) == 0)
   2194a:	2184      	movs	r1, #132	; 0x84
   2194c:	6838      	ldr	r0, [r7, #0]
   2194e:	f7e1 fa61 	bl	2e14 <bb_setUInt8>
   21952:	60f8      	str	r0, [r7, #12]
   21954:	68fb      	ldr	r3, [r7, #12]
   21956:	2b00      	cmp	r3, #0
   21958:	d104      	bne.n	21964 <hlp_setObjectCount+0x88>
        {
            ret = bb_setUInt32(buff, count);
   2195a:	6879      	ldr	r1, [r7, #4]
   2195c:	6838      	ldr	r0, [r7, #0]
   2195e:	f7e1 fb4d 	bl	2ffc <bb_setUInt32>
   21962:	60f8      	str	r0, [r7, #12]
        }
    }
    return ret;
   21964:	68fb      	ldr	r3, [r7, #12]
}
   21966:	4618      	mov	r0, r3
   21968:	3710      	adds	r7, #16
   2196a:	46bd      	mov	sp, r7
   2196c:	bd80      	pop	{r7, pc}
   2196e:	bf00      	nop

00021970 <hlp_bytesToHex>:

char* hlp_bytesToHex(const unsigned char* pBytes, int count)
{
   21970:	b590      	push	{r4, r7, lr}
   21972:	b08b      	sub	sp, #44	; 0x2c
   21974:	af00      	add	r7, sp, #0
   21976:	6078      	str	r0, [r7, #4]
   21978:	6039      	str	r1, [r7, #0]
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
   2197a:	4b33      	ldr	r3, [pc, #204]	; (21a48 <hlp_bytesToHex+0xd8>)
   2197c:	f107 040c 	add.w	r4, r7, #12
   21980:	6818      	ldr	r0, [r3, #0]
   21982:	6859      	ldr	r1, [r3, #4]
   21984:	689a      	ldr	r2, [r3, #8]
   21986:	68db      	ldr	r3, [r3, #12]
   21988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    unsigned char tmp;
    int pos;
    char* hexChars;
    if (count != 0)
   2198a:	683b      	ldr	r3, [r7, #0]
   2198c:	2b00      	cmp	r3, #0
   2198e:	d04d      	beq.n	21a2c <hlp_bytesToHex+0xbc>
    {
        hexChars = (char*)gxmalloc(3 * count);
   21990:	683a      	ldr	r2, [r7, #0]
   21992:	4613      	mov	r3, r2
   21994:	005b      	lsls	r3, r3, #1
   21996:	4413      	add	r3, r2
   21998:	4618      	mov	r0, r3
   2199a:	f008 f853 	bl	29a44 <malloc>
   2199e:	4603      	mov	r3, r0
   219a0:	623b      	str	r3, [r7, #32]
        if (hexChars != NULL)
   219a2:	6a3b      	ldr	r3, [r7, #32]
   219a4:	2b00      	cmp	r3, #0
   219a6:	d049      	beq.n	21a3c <hlp_bytesToHex+0xcc>
        {
            for (pos = 0; pos != count; ++pos)
   219a8:	2300      	movs	r3, #0
   219aa:	627b      	str	r3, [r7, #36]	; 0x24
   219ac:	e030      	b.n	21a10 <hlp_bytesToHex+0xa0>
            {
                tmp = pBytes[pos] & 0xFF;
   219ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   219b0:	687a      	ldr	r2, [r7, #4]
   219b2:	4413      	add	r3, r2
   219b4:	781b      	ldrb	r3, [r3, #0]
   219b6:	77fb      	strb	r3, [r7, #31]
                hexChars[pos * 3] = hexArray[tmp >> 4];
   219b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   219ba:	4613      	mov	r3, r2
   219bc:	005b      	lsls	r3, r3, #1
   219be:	4413      	add	r3, r2
   219c0:	461a      	mov	r2, r3
   219c2:	6a3b      	ldr	r3, [r7, #32]
   219c4:	4413      	add	r3, r2
   219c6:	7ffa      	ldrb	r2, [r7, #31]
   219c8:	0912      	lsrs	r2, r2, #4
   219ca:	b2d2      	uxtb	r2, r2
   219cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   219d0:	440a      	add	r2, r1
   219d2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
   219d6:	701a      	strb	r2, [r3, #0]
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
   219d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   219da:	4613      	mov	r3, r2
   219dc:	005b      	lsls	r3, r3, #1
   219de:	4413      	add	r3, r2
   219e0:	3301      	adds	r3, #1
   219e2:	6a3a      	ldr	r2, [r7, #32]
   219e4:	4413      	add	r3, r2
   219e6:	7ffa      	ldrb	r2, [r7, #31]
   219e8:	f002 020f 	and.w	r2, r2, #15
   219ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
   219f0:	440a      	add	r2, r1
   219f2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
   219f6:	701a      	strb	r2, [r3, #0]
                hexChars[pos * 3 + 2] = ' ';
   219f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   219fa:	4613      	mov	r3, r2
   219fc:	005b      	lsls	r3, r3, #1
   219fe:	4413      	add	r3, r2
   21a00:	3302      	adds	r3, #2
   21a02:	6a3a      	ldr	r2, [r7, #32]
   21a04:	4413      	add	r3, r2
   21a06:	2220      	movs	r2, #32
   21a08:	701a      	strb	r2, [r3, #0]
    if (count != 0)
    {
        hexChars = (char*)gxmalloc(3 * count);
        if (hexChars != NULL)
        {
            for (pos = 0; pos != count; ++pos)
   21a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a0c:	3301      	adds	r3, #1
   21a0e:	627b      	str	r3, [r7, #36]	; 0x24
   21a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21a12:	683b      	ldr	r3, [r7, #0]
   21a14:	429a      	cmp	r2, r3
   21a16:	d1ca      	bne.n	219ae <hlp_bytesToHex+0x3e>
                tmp = pBytes[pos] & 0xFF;
                hexChars[pos * 3] = hexArray[tmp >> 4];
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
                hexChars[pos * 3 + 2] = ' ';
            }
            hexChars[(3 * count) - 1] = '\0';
   21a18:	683a      	ldr	r2, [r7, #0]
   21a1a:	4613      	mov	r3, r2
   21a1c:	005b      	lsls	r3, r3, #1
   21a1e:	4413      	add	r3, r2
   21a20:	3b01      	subs	r3, #1
   21a22:	6a3a      	ldr	r2, [r7, #32]
   21a24:	4413      	add	r3, r2
   21a26:	2200      	movs	r2, #0
   21a28:	701a      	strb	r2, [r3, #0]
   21a2a:	e007      	b.n	21a3c <hlp_bytesToHex+0xcc>
        }
    }
    else
    {
        hexChars = (char*)gxmalloc(1);
   21a2c:	2001      	movs	r0, #1
   21a2e:	f008 f809 	bl	29a44 <malloc>
   21a32:	4603      	mov	r3, r0
   21a34:	623b      	str	r3, [r7, #32]
        hexChars[0] = '\0';
   21a36:	6a3b      	ldr	r3, [r7, #32]
   21a38:	2200      	movs	r2, #0
   21a3a:	701a      	strb	r2, [r3, #0]
    }
    return hexChars;
   21a3c:	6a3b      	ldr	r3, [r7, #32]
}
   21a3e:	4618      	mov	r0, r3
   21a40:	372c      	adds	r7, #44	; 0x2c
   21a42:	46bd      	mov	sp, r7
   21a44:	bd90      	pop	{r4, r7, pc}
   21a46:	bf00      	nop
   21a48:	0002c5ac 	.word	0x0002c5ac

00021a4c <getValue>:

unsigned char getValue(char c)
{
   21a4c:	b480      	push	{r7}
   21a4e:	b085      	sub	sp, #20
   21a50:	af00      	add	r7, sp, #0
   21a52:	4603      	mov	r3, r0
   21a54:	71fb      	strb	r3, [r7, #7]
    unsigned char value;
    if (c > '9')
   21a56:	79fb      	ldrb	r3, [r7, #7]
   21a58:	2b39      	cmp	r3, #57	; 0x39
   21a5a:	d90a      	bls.n	21a72 <getValue+0x26>
    {
        if (c > 'Z')
   21a5c:	79fb      	ldrb	r3, [r7, #7]
   21a5e:	2b5a      	cmp	r3, #90	; 0x5a
   21a60:	d903      	bls.n	21a6a <getValue+0x1e>
        {
            value = (c - 'a' + 10);
   21a62:	79fb      	ldrb	r3, [r7, #7]
   21a64:	3b57      	subs	r3, #87	; 0x57
   21a66:	73fb      	strb	r3, [r7, #15]
   21a68:	e006      	b.n	21a78 <getValue+0x2c>
        }
        else
        {
            value = (c - 'A' + 10);
   21a6a:	79fb      	ldrb	r3, [r7, #7]
   21a6c:	3b37      	subs	r3, #55	; 0x37
   21a6e:	73fb      	strb	r3, [r7, #15]
   21a70:	e002      	b.n	21a78 <getValue+0x2c>
        }
    }
    else
    {
        value = (c - '0');
   21a72:	79fb      	ldrb	r3, [r7, #7]
   21a74:	3b30      	subs	r3, #48	; 0x30
   21a76:	73fb      	strb	r3, [r7, #15]
    }
    return value;
   21a78:	7bfb      	ldrb	r3, [r7, #15]
}
   21a7a:	4618      	mov	r0, r3
   21a7c:	3714      	adds	r7, #20
   21a7e:	46bd      	mov	sp, r7
   21a80:	bc80      	pop	{r7}
   21a82:	4770      	bx	lr

00021a84 <hlp_hexToBytes>:

int hlp_hexToBytes(const char* str, unsigned char** buffer, unsigned char* count)
{
   21a84:	b5b0      	push	{r4, r5, r7, lr}
   21a86:	b088      	sub	sp, #32
   21a88:	af00      	add	r7, sp, #0
   21a8a:	60f8      	str	r0, [r7, #12]
   21a8c:	60b9      	str	r1, [r7, #8]
   21a8e:	607a      	str	r2, [r7, #4]
    *count = 0;
   21a90:	687b      	ldr	r3, [r7, #4]
   21a92:	2200      	movs	r2, #0
   21a94:	701a      	strb	r2, [r3, #0]
    if (buffer != NULL && *buffer != NULL)
   21a96:	68bb      	ldr	r3, [r7, #8]
   21a98:	2b00      	cmp	r3, #0
   21a9a:	d008      	beq.n	21aae <hlp_hexToBytes+0x2a>
   21a9c:	68bb      	ldr	r3, [r7, #8]
   21a9e:	681b      	ldr	r3, [r3, #0]
   21aa0:	2b00      	cmp	r3, #0
   21aa2:	d004      	beq.n	21aae <hlp_hexToBytes+0x2a>
    {
        gxfree(*buffer);
   21aa4:	68bb      	ldr	r3, [r7, #8]
   21aa6:	681b      	ldr	r3, [r3, #0]
   21aa8:	4618      	mov	r0, r3
   21aaa:	f007 ffd3 	bl	29a54 <free>
    }
    if (str == NULL)
   21aae:	68fb      	ldr	r3, [r7, #12]
   21ab0:	2b00      	cmp	r3, #0
   21ab2:	d101      	bne.n	21ab8 <hlp_hexToBytes+0x34>
    {
        return 0;
   21ab4:	2300      	movs	r3, #0
   21ab6:	e090      	b.n	21bda <hlp_hexToBytes+0x156>
    }
    int len = (int)strlen(str);
   21ab8:	68f8      	ldr	r0, [r7, #12]
   21aba:	f7de fb31 	bl	120 <strlen>
   21abe:	4603      	mov	r3, r0
   21ac0:	617b      	str	r3, [r7, #20]
    if (len == 0)
   21ac2:	697b      	ldr	r3, [r7, #20]
   21ac4:	2b00      	cmp	r3, #0
   21ac6:	d101      	bne.n	21acc <hlp_hexToBytes+0x48>
    {
        return 0;
   21ac8:	2300      	movs	r3, #0
   21aca:	e086      	b.n	21bda <hlp_hexToBytes+0x156>
    }
    unsigned char* tmp = (unsigned char*)gxmalloc(len / 2);
   21acc:	697b      	ldr	r3, [r7, #20]
   21ace:	0fda      	lsrs	r2, r3, #31
   21ad0:	4413      	add	r3, r2
   21ad2:	105b      	asrs	r3, r3, #1
   21ad4:	4618      	mov	r0, r3
   21ad6:	f007 ffb5 	bl	29a44 <malloc>
   21ada:	4603      	mov	r3, r0
   21adc:	613b      	str	r3, [r7, #16]
    if (tmp == NULL)
   21ade:	693b      	ldr	r3, [r7, #16]
   21ae0:	2b00      	cmp	r3, #0
   21ae2:	d102      	bne.n	21aea <hlp_hexToBytes+0x66>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   21ae4:	f44f 7382 	mov.w	r3, #260	; 0x104
   21ae8:	e077      	b.n	21bda <hlp_hexToBytes+0x156>
    }
    *buffer = tmp;
   21aea:	68bb      	ldr	r3, [r7, #8]
   21aec:	693a      	ldr	r2, [r7, #16]
   21aee:	601a      	str	r2, [r3, #0]
    int lastValue = -1;
   21af0:	f04f 33ff 	mov.w	r3, #4294967295
   21af4:	61fb      	str	r3, [r7, #28]
    for (int pos = 0; pos != len; ++pos)
   21af6:	2300      	movs	r3, #0
   21af8:	61bb      	str	r3, [r7, #24]
   21afa:	e055      	b.n	21ba8 <hlp_hexToBytes+0x124>
    {
        if (*str >= '0' && *str < 'g')
   21afc:	68fb      	ldr	r3, [r7, #12]
   21afe:	781b      	ldrb	r3, [r3, #0]
   21b00:	2b2f      	cmp	r3, #47	; 0x2f
   21b02:	d930      	bls.n	21b66 <hlp_hexToBytes+0xe2>
   21b04:	68fb      	ldr	r3, [r7, #12]
   21b06:	781b      	ldrb	r3, [r3, #0]
   21b08:	2b66      	cmp	r3, #102	; 0x66
   21b0a:	d82c      	bhi.n	21b66 <hlp_hexToBytes+0xe2>
        {
            if (lastValue == -1)
   21b0c:	69fb      	ldr	r3, [r7, #28]
   21b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
   21b12:	d107      	bne.n	21b24 <hlp_hexToBytes+0xa0>
            {
                lastValue = getValue(*str);
   21b14:	68fb      	ldr	r3, [r7, #12]
   21b16:	781b      	ldrb	r3, [r3, #0]
   21b18:	4618      	mov	r0, r3
   21b1a:	f7ff ff97 	bl	21a4c <getValue>
   21b1e:	4603      	mov	r3, r0
   21b20:	61fb      	str	r3, [r7, #28]
    int lastValue = -1;
    for (int pos = 0; pos != len; ++pos)
    {
        if (*str >= '0' && *str < 'g')
        {
            if (lastValue == -1)
   21b22:	e03a      	b.n	21b9a <hlp_hexToBytes+0x116>
            {
                lastValue = getValue(*str);
            }
            else if (lastValue != -1)
   21b24:	69fb      	ldr	r3, [r7, #28]
   21b26:	f1b3 3fff 	cmp.w	r3, #4294967295
   21b2a:	d036      	beq.n	21b9a <hlp_hexToBytes+0x116>
            {
                tmp[*count] = (unsigned char)(lastValue << 4 | getValue(*str));
   21b2c:	687b      	ldr	r3, [r7, #4]
   21b2e:	781b      	ldrb	r3, [r3, #0]
   21b30:	461a      	mov	r2, r3
   21b32:	693b      	ldr	r3, [r7, #16]
   21b34:	189c      	adds	r4, r3, r2
   21b36:	69fb      	ldr	r3, [r7, #28]
   21b38:	011b      	lsls	r3, r3, #4
   21b3a:	b25d      	sxtb	r5, r3
   21b3c:	68fb      	ldr	r3, [r7, #12]
   21b3e:	781b      	ldrb	r3, [r3, #0]
   21b40:	4618      	mov	r0, r3
   21b42:	f7ff ff83 	bl	21a4c <getValue>
   21b46:	4603      	mov	r3, r0
   21b48:	b25b      	sxtb	r3, r3
   21b4a:	432b      	orrs	r3, r5
   21b4c:	b25b      	sxtb	r3, r3
   21b4e:	b2db      	uxtb	r3, r3
   21b50:	7023      	strb	r3, [r4, #0]
                lastValue = -1;
   21b52:	f04f 33ff 	mov.w	r3, #4294967295
   21b56:	61fb      	str	r3, [r7, #28]
                ++*count;
   21b58:	687b      	ldr	r3, [r7, #4]
   21b5a:	781b      	ldrb	r3, [r3, #0]
   21b5c:	3301      	adds	r3, #1
   21b5e:	b2da      	uxtb	r2, r3
   21b60:	687b      	ldr	r3, [r7, #4]
   21b62:	701a      	strb	r2, [r3, #0]
    int lastValue = -1;
    for (int pos = 0; pos != len; ++pos)
    {
        if (*str >= '0' && *str < 'g')
        {
            if (lastValue == -1)
   21b64:	e019      	b.n	21b9a <hlp_hexToBytes+0x116>
                tmp[*count] = (unsigned char)(lastValue << 4 | getValue(*str));
                lastValue = -1;
                ++*count;
            }
        }
        else if (lastValue != -1)
   21b66:	69fb      	ldr	r3, [r7, #28]
   21b68:	f1b3 3fff 	cmp.w	r3, #4294967295
   21b6c:	d016      	beq.n	21b9c <hlp_hexToBytes+0x118>
        {
            tmp[*count] = getValue(*str);
   21b6e:	687b      	ldr	r3, [r7, #4]
   21b70:	781b      	ldrb	r3, [r3, #0]
   21b72:	461a      	mov	r2, r3
   21b74:	693b      	ldr	r3, [r7, #16]
   21b76:	189c      	adds	r4, r3, r2
   21b78:	68fb      	ldr	r3, [r7, #12]
   21b7a:	781b      	ldrb	r3, [r3, #0]
   21b7c:	4618      	mov	r0, r3
   21b7e:	f7ff ff65 	bl	21a4c <getValue>
   21b82:	4603      	mov	r3, r0
   21b84:	7023      	strb	r3, [r4, #0]
            lastValue = -1;
   21b86:	f04f 33ff 	mov.w	r3, #4294967295
   21b8a:	61fb      	str	r3, [r7, #28]
            ++*count;
   21b8c:	687b      	ldr	r3, [r7, #4]
   21b8e:	781b      	ldrb	r3, [r3, #0]
   21b90:	3301      	adds	r3, #1
   21b92:	b2da      	uxtb	r2, r3
   21b94:	687b      	ldr	r3, [r7, #4]
   21b96:	701a      	strb	r2, [r3, #0]
   21b98:	e000      	b.n	21b9c <hlp_hexToBytes+0x118>
    int lastValue = -1;
    for (int pos = 0; pos != len; ++pos)
    {
        if (*str >= '0' && *str < 'g')
        {
            if (lastValue == -1)
   21b9a:	bf00      	nop
        {
            tmp[*count] = getValue(*str);
            lastValue = -1;
            ++*count;
        }
        ++str;
   21b9c:	68fb      	ldr	r3, [r7, #12]
   21b9e:	3301      	adds	r3, #1
   21ba0:	60fb      	str	r3, [r7, #12]
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *buffer = tmp;
    int lastValue = -1;
    for (int pos = 0; pos != len; ++pos)
   21ba2:	69bb      	ldr	r3, [r7, #24]
   21ba4:	3301      	adds	r3, #1
   21ba6:	61bb      	str	r3, [r7, #24]
   21ba8:	69ba      	ldr	r2, [r7, #24]
   21baa:	697b      	ldr	r3, [r7, #20]
   21bac:	429a      	cmp	r2, r3
   21bae:	d1a5      	bne.n	21afc <hlp_hexToBytes+0x78>
            lastValue = -1;
            ++*count;
        }
        ++str;
    }
    if (len / 2 != *count)
   21bb0:	697b      	ldr	r3, [r7, #20]
   21bb2:	0fda      	lsrs	r2, r3, #31
   21bb4:	4413      	add	r3, r2
   21bb6:	105b      	asrs	r3, r3, #1
   21bb8:	461a      	mov	r2, r3
   21bba:	687b      	ldr	r3, [r7, #4]
   21bbc:	781b      	ldrb	r3, [r3, #0]
   21bbe:	429a      	cmp	r2, r3
   21bc0:	d00a      	beq.n	21bd8 <hlp_hexToBytes+0x154>
    {
        *buffer = gxrealloc(*buffer, *count);
   21bc2:	68bb      	ldr	r3, [r7, #8]
   21bc4:	681a      	ldr	r2, [r3, #0]
   21bc6:	687b      	ldr	r3, [r7, #4]
   21bc8:	781b      	ldrb	r3, [r3, #0]
   21bca:	4619      	mov	r1, r3
   21bcc:	4610      	mov	r0, r2
   21bce:	f008 faef 	bl	2a1b0 <realloc>
   21bd2:	4602      	mov	r2, r0
   21bd4:	68bb      	ldr	r3, [r7, #8]
   21bd6:	601a      	str	r2, [r3, #0]
    }
    return 0;
   21bd8:	2300      	movs	r3, #0
}
   21bda:	4618      	mov	r0, r3
   21bdc:	3720      	adds	r7, #32
   21bde:	46bd      	mov	sp, r7
   21be0:	bdb0      	pop	{r4, r5, r7, pc}
   21be2:	bf00      	nop

00021be4 <hlp_getScaler>:
        }
    }
}

double hlp_getScaler(int scaler)
{
   21be4:	b490      	push	{r4, r7}
   21be6:	b082      	sub	sp, #8
   21be8:	af00      	add	r7, sp, #0
   21bea:	6078      	str	r0, [r7, #4]
    //If OS
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    return pow((float)10, scaler);
#else
    return 1;
   21bec:	f04f 0300 	mov.w	r3, #0
   21bf0:	4c03      	ldr	r4, [pc, #12]	; (21c00 <hlp_getScaler+0x1c>)
    //TODO:
#endif
}
   21bf2:	4618      	mov	r0, r3
   21bf4:	4621      	mov	r1, r4
   21bf6:	3708      	adds	r7, #8
   21bf8:	46bd      	mov	sp, r7
   21bfa:	bc90      	pop	{r4, r7}
   21bfc:	4770      	bx	lr
   21bfe:	bf00      	nop
   21c00:	3ff00000 	.word	0x3ff00000

00021c04 <hlp_intToString>:
    }
    return size;
}

int hlp_intToString(char *str, int bufsize, long value, unsigned char isSigned)
{
   21c04:	b480      	push	{r7}
   21c06:	b087      	sub	sp, #28
   21c08:	af00      	add	r7, sp, #0
   21c0a:	60f8      	str	r0, [r7, #12]
   21c0c:	60b9      	str	r1, [r7, #8]
   21c0e:	607a      	str	r2, [r7, #4]
   21c10:	70fb      	strb	r3, [r7, #3]
    int cnt = 0;
   21c12:	2300      	movs	r3, #0
   21c14:	617b      	str	r3, [r7, #20]
    long val = value;
   21c16:	687b      	ldr	r3, [r7, #4]
   21c18:	613b      	str	r3, [r7, #16]
    if (isSigned && value < 0)
   21c1a:	78fb      	ldrb	r3, [r7, #3]
   21c1c:	2b00      	cmp	r3, #0
   21c1e:	d01b      	beq.n	21c58 <hlp_intToString+0x54>
   21c20:	687b      	ldr	r3, [r7, #4]
   21c22:	2b00      	cmp	r3, #0
   21c24:	da18      	bge.n	21c58 <hlp_intToString+0x54>
    {
        if (bufsize < 1)
   21c26:	68bb      	ldr	r3, [r7, #8]
   21c28:	2b00      	cmp	r3, #0
   21c2a:	dc02      	bgt.n	21c32 <hlp_intToString+0x2e>
        {
            return -1;
   21c2c:	f04f 33ff 	mov.w	r3, #4294967295
   21c30:	e04d      	b.n	21cce <hlp_intToString+0xca>
        }
        *str = '-';
   21c32:	68fb      	ldr	r3, [r7, #12]
   21c34:	222d      	movs	r2, #45	; 0x2d
   21c36:	701a      	strb	r2, [r3, #0]
        ++str;
   21c38:	68fb      	ldr	r3, [r7, #12]
   21c3a:	3301      	adds	r3, #1
   21c3c:	60fb      	str	r3, [r7, #12]
        --bufsize;
   21c3e:	68bb      	ldr	r3, [r7, #8]
   21c40:	3b01      	subs	r3, #1
   21c42:	60bb      	str	r3, [r7, #8]
        value = -value;
   21c44:	687b      	ldr	r3, [r7, #4]
   21c46:	425b      	negs	r3, r3
   21c48:	607b      	str	r3, [r7, #4]
        ++cnt;
   21c4a:	697b      	ldr	r3, [r7, #20]
   21c4c:	3301      	adds	r3, #1
   21c4e:	617b      	str	r3, [r7, #20]
    }
    //Find length.
    while ((val = (val / 10)))
   21c50:	e002      	b.n	21c58 <hlp_intToString+0x54>
    {
        ++str;
   21c52:	68fb      	ldr	r3, [r7, #12]
   21c54:	3301      	adds	r3, #1
   21c56:	60fb      	str	r3, [r7, #12]
        --bufsize;
        value = -value;
        ++cnt;
    }
    //Find length.
    while ((val = (val / 10)))
   21c58:	693b      	ldr	r3, [r7, #16]
   21c5a:	4a1f      	ldr	r2, [pc, #124]	; (21cd8 <hlp_intToString+0xd4>)
   21c5c:	fb82 1203 	smull	r1, r2, r2, r3
   21c60:	1092      	asrs	r2, r2, #2
   21c62:	17db      	asrs	r3, r3, #31
   21c64:	1ad3      	subs	r3, r2, r3
   21c66:	613b      	str	r3, [r7, #16]
   21c68:	693b      	ldr	r3, [r7, #16]
   21c6a:	2b00      	cmp	r3, #0
   21c6c:	d1f1      	bne.n	21c52 <hlp_intToString+0x4e>
    {
        ++str;
    }
    *(str + 1) = '\0';
   21c6e:	68fb      	ldr	r3, [r7, #12]
   21c70:	3301      	adds	r3, #1
   21c72:	2200      	movs	r2, #0
   21c74:	701a      	strb	r2, [r3, #0]
    do
    {
        if (bufsize < 1)
   21c76:	68bb      	ldr	r3, [r7, #8]
   21c78:	2b00      	cmp	r3, #0
   21c7a:	dc02      	bgt.n	21c82 <hlp_intToString+0x7e>
        {
            return -1;
   21c7c:	f04f 33ff 	mov.w	r3, #4294967295
   21c80:	e025      	b.n	21cce <hlp_intToString+0xca>
        }
        *str = (value % 10) + '0';
   21c82:	687a      	ldr	r2, [r7, #4]
   21c84:	4b14      	ldr	r3, [pc, #80]	; (21cd8 <hlp_intToString+0xd4>)
   21c86:	fb83 1302 	smull	r1, r3, r3, r2
   21c8a:	1099      	asrs	r1, r3, #2
   21c8c:	17d3      	asrs	r3, r2, #31
   21c8e:	1ac9      	subs	r1, r1, r3
   21c90:	460b      	mov	r3, r1
   21c92:	009b      	lsls	r3, r3, #2
   21c94:	440b      	add	r3, r1
   21c96:	005b      	lsls	r3, r3, #1
   21c98:	1ad1      	subs	r1, r2, r3
   21c9a:	b2cb      	uxtb	r3, r1
   21c9c:	3330      	adds	r3, #48	; 0x30
   21c9e:	b2da      	uxtb	r2, r3
   21ca0:	68fb      	ldr	r3, [r7, #12]
   21ca2:	701a      	strb	r2, [r3, #0]
        --str;
   21ca4:	68fb      	ldr	r3, [r7, #12]
   21ca6:	3b01      	subs	r3, #1
   21ca8:	60fb      	str	r3, [r7, #12]
        value /= 10;
   21caa:	687b      	ldr	r3, [r7, #4]
   21cac:	4a0a      	ldr	r2, [pc, #40]	; (21cd8 <hlp_intToString+0xd4>)
   21cae:	fb82 1203 	smull	r1, r2, r2, r3
   21cb2:	1092      	asrs	r2, r2, #2
   21cb4:	17db      	asrs	r3, r3, #31
   21cb6:	1ad3      	subs	r3, r2, r3
   21cb8:	607b      	str	r3, [r7, #4]
        --bufsize;
   21cba:	68bb      	ldr	r3, [r7, #8]
   21cbc:	3b01      	subs	r3, #1
   21cbe:	60bb      	str	r3, [r7, #8]
        ++cnt;
   21cc0:	697b      	ldr	r3, [r7, #20]
   21cc2:	3301      	adds	r3, #1
   21cc4:	617b      	str	r3, [r7, #20]
    } while (value != 0);
   21cc6:	687b      	ldr	r3, [r7, #4]
   21cc8:	2b00      	cmp	r3, #0
   21cca:	d1d4      	bne.n	21c76 <hlp_intToString+0x72>
    return cnt;
   21ccc:	697b      	ldr	r3, [r7, #20]
}
   21cce:	4618      	mov	r0, r3
   21cd0:	371c      	adds	r7, #28
   21cd2:	46bd      	mov	sp, r7
   21cd4:	bc80      	pop	{r7}
   21cd6:	4770      	bx	lr
   21cd8:	66666667 	.word	0x66666667

00021cdc <hlp_stringToInt>:

long hlp_stringToInt(const char *str)
{
   21cdc:	b480      	push	{r7}
   21cde:	b085      	sub	sp, #20
   21ce0:	af00      	add	r7, sp, #0
   21ce2:	6078      	str	r0, [r7, #4]
    if (str == NULL)
   21ce4:	687b      	ldr	r3, [r7, #4]
   21ce6:	2b00      	cmp	r3, #0
   21ce8:	d102      	bne.n	21cf0 <hlp_stringToInt+0x14>
    {
        return -1;
   21cea:	f04f 33ff 	mov.w	r3, #4294967295
   21cee:	e032      	b.n	21d56 <hlp_stringToInt+0x7a>
    }
    long value = 0;
   21cf0:	2300      	movs	r3, #0
   21cf2:	60fb      	str	r3, [r7, #12]
    unsigned char minus = 0;
   21cf4:	2300      	movs	r3, #0
   21cf6:	72fb      	strb	r3, [r7, #11]
    if (*str == '-')
   21cf8:	687b      	ldr	r3, [r7, #4]
   21cfa:	781b      	ldrb	r3, [r3, #0]
   21cfc:	2b2d      	cmp	r3, #45	; 0x2d
   21cfe:	d11f      	bne.n	21d40 <hlp_stringToInt+0x64>
    {
        minus = 1;
   21d00:	2301      	movs	r3, #1
   21d02:	72fb      	strb	r3, [r7, #11]
        ++str;
   21d04:	687b      	ldr	r3, [r7, #4]
   21d06:	3301      	adds	r3, #1
   21d08:	607b      	str	r3, [r7, #4]
    }
    while (*str != '\0')
   21d0a:	e019      	b.n	21d40 <hlp_stringToInt+0x64>
    {
        if (*str < '0' || *str > '9')
   21d0c:	687b      	ldr	r3, [r7, #4]
   21d0e:	781b      	ldrb	r3, [r3, #0]
   21d10:	2b2f      	cmp	r3, #47	; 0x2f
   21d12:	d903      	bls.n	21d1c <hlp_stringToInt+0x40>
   21d14:	687b      	ldr	r3, [r7, #4]
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	2b39      	cmp	r3, #57	; 0x39
   21d1a:	d902      	bls.n	21d22 <hlp_stringToInt+0x46>
        {
            return -1;
   21d1c:	f04f 33ff 	mov.w	r3, #4294967295
   21d20:	e019      	b.n	21d56 <hlp_stringToInt+0x7a>
        }
        value *= 10;
   21d22:	68fa      	ldr	r2, [r7, #12]
   21d24:	4613      	mov	r3, r2
   21d26:	009b      	lsls	r3, r3, #2
   21d28:	4413      	add	r3, r2
   21d2a:	005b      	lsls	r3, r3, #1
   21d2c:	60fb      	str	r3, [r7, #12]
        value += *str - '0';
   21d2e:	687b      	ldr	r3, [r7, #4]
   21d30:	781b      	ldrb	r3, [r3, #0]
   21d32:	3b30      	subs	r3, #48	; 0x30
   21d34:	68fa      	ldr	r2, [r7, #12]
   21d36:	4413      	add	r3, r2
   21d38:	60fb      	str	r3, [r7, #12]
        ++str;
   21d3a:	687b      	ldr	r3, [r7, #4]
   21d3c:	3301      	adds	r3, #1
   21d3e:	607b      	str	r3, [r7, #4]
    if (*str == '-')
    {
        minus = 1;
        ++str;
    }
    while (*str != '\0')
   21d40:	687b      	ldr	r3, [r7, #4]
   21d42:	781b      	ldrb	r3, [r3, #0]
   21d44:	2b00      	cmp	r3, #0
   21d46:	d1e1      	bne.n	21d0c <hlp_stringToInt+0x30>
        }
        value *= 10;
        value += *str - '0';
        ++str;
    }
    if (minus)
   21d48:	7afb      	ldrb	r3, [r7, #11]
   21d4a:	2b00      	cmp	r3, #0
   21d4c:	d002      	beq.n	21d54 <hlp_stringToInt+0x78>
    {
        return -value;
   21d4e:	68fb      	ldr	r3, [r7, #12]
   21d50:	425b      	negs	r3, r3
   21d52:	e000      	b.n	21d56 <hlp_stringToInt+0x7a>
    }
    return value;
   21d54:	68fb      	ldr	r3, [r7, #12]
}
   21d56:	4618      	mov	r0, r3
   21d58:	3714      	adds	r7, #20
   21d5a:	46bd      	mov	sp, r7
   21d5c:	bc80      	pop	{r7}
   21d5e:	4770      	bx	lr

00021d60 <hlp_int64ToString>:

int hlp_int64ToString(char *str, int bufsize, long long value, unsigned char isSigned)
{
   21d60:	b590      	push	{r4, r7, lr}
   21d62:	b089      	sub	sp, #36	; 0x24
   21d64:	af00      	add	r7, sp, #0
   21d66:	60f8      	str	r0, [r7, #12]
   21d68:	60b9      	str	r1, [r7, #8]
   21d6a:	e9c7 2300 	strd	r2, r3, [r7]
    int cnt = 0;
   21d6e:	2300      	movs	r3, #0
   21d70:	61fb      	str	r3, [r7, #28]
    long long val = value;
   21d72:	e897 0018 	ldmia.w	r7, {r3, r4}
   21d76:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (isSigned && value < 0)
   21d7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   21d7e:	2b00      	cmp	r3, #0
   21d80:	d022      	beq.n	21dc8 <hlp_int64ToString+0x68>
   21d82:	e897 0018 	ldmia.w	r7, {r3, r4}
   21d86:	2b00      	cmp	r3, #0
   21d88:	f174 0300 	sbcs.w	r3, r4, #0
   21d8c:	da1c      	bge.n	21dc8 <hlp_int64ToString+0x68>
    {
        if (bufsize < 1)
   21d8e:	68bb      	ldr	r3, [r7, #8]
   21d90:	2b00      	cmp	r3, #0
   21d92:	dc02      	bgt.n	21d9a <hlp_int64ToString+0x3a>
        {
            return -1;
   21d94:	f04f 33ff 	mov.w	r3, #4294967295
   21d98:	e059      	b.n	21e4e <hlp_int64ToString+0xee>
        }
        *str = '-';
   21d9a:	68fb      	ldr	r3, [r7, #12]
   21d9c:	222d      	movs	r2, #45	; 0x2d
   21d9e:	701a      	strb	r2, [r3, #0]
        ++str;
   21da0:	68fb      	ldr	r3, [r7, #12]
   21da2:	3301      	adds	r3, #1
   21da4:	60fb      	str	r3, [r7, #12]
        --bufsize;
   21da6:	68bb      	ldr	r3, [r7, #8]
   21da8:	3b01      	subs	r3, #1
   21daa:	60bb      	str	r3, [r7, #8]
        value = -value;
   21dac:	e897 0018 	ldmia.w	r7, {r3, r4}
   21db0:	425b      	negs	r3, r3
   21db2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   21db6:	e887 0018 	stmia.w	r7, {r3, r4}
        ++cnt;
   21dba:	69fb      	ldr	r3, [r7, #28]
   21dbc:	3301      	adds	r3, #1
   21dbe:	61fb      	str	r3, [r7, #28]
    }
    //Find length.
    while ((val = (val / 10)))
   21dc0:	e002      	b.n	21dc8 <hlp_int64ToString+0x68>
    {
        ++str;
   21dc2:	68fb      	ldr	r3, [r7, #12]
   21dc4:	3301      	adds	r3, #1
   21dc6:	60fb      	str	r3, [r7, #12]
        --bufsize;
        value = -value;
        ++cnt;
    }
    //Find length.
    while ((val = (val / 10)))
   21dc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   21dcc:	f04f 020a 	mov.w	r2, #10
   21dd0:	f04f 0300 	mov.w	r3, #0
   21dd4:	f7de fde4 	bl	9a0 <__aeabi_ldivmod>
   21dd8:	4603      	mov	r3, r0
   21dda:	460c      	mov	r4, r1
   21ddc:	e9c7 3404 	strd	r3, r4, [r7, #16]
   21de0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   21de4:	4323      	orrs	r3, r4
   21de6:	d1ec      	bne.n	21dc2 <hlp_int64ToString+0x62>
    {
        ++str;
    }
    *(str + 1) = '\0';
   21de8:	68fb      	ldr	r3, [r7, #12]
   21dea:	3301      	adds	r3, #1
   21dec:	2200      	movs	r2, #0
   21dee:	701a      	strb	r2, [r3, #0]
    do
    {
        if (bufsize < 1)
   21df0:	68bb      	ldr	r3, [r7, #8]
   21df2:	2b00      	cmp	r3, #0
   21df4:	dc02      	bgt.n	21dfc <hlp_int64ToString+0x9c>
        {
            return -1;
   21df6:	f04f 33ff 	mov.w	r3, #4294967295
   21dfa:	e028      	b.n	21e4e <hlp_int64ToString+0xee>
        }
        *str = (value % 10) + '0';
   21dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
   21e00:	f04f 020a 	mov.w	r2, #10
   21e04:	f04f 0300 	mov.w	r3, #0
   21e08:	f7de fdca 	bl	9a0 <__aeabi_ldivmod>
   21e0c:	461c      	mov	r4, r3
   21e0e:	4613      	mov	r3, r2
   21e10:	b2db      	uxtb	r3, r3
   21e12:	3330      	adds	r3, #48	; 0x30
   21e14:	b2da      	uxtb	r2, r3
   21e16:	68fb      	ldr	r3, [r7, #12]
   21e18:	701a      	strb	r2, [r3, #0]
        --str;
   21e1a:	68fb      	ldr	r3, [r7, #12]
   21e1c:	3b01      	subs	r3, #1
   21e1e:	60fb      	str	r3, [r7, #12]
        value /= 10;
   21e20:	e9d7 0100 	ldrd	r0, r1, [r7]
   21e24:	f04f 020a 	mov.w	r2, #10
   21e28:	f04f 0300 	mov.w	r3, #0
   21e2c:	f7de fdb8 	bl	9a0 <__aeabi_ldivmod>
   21e30:	4603      	mov	r3, r0
   21e32:	460c      	mov	r4, r1
   21e34:	e887 0018 	stmia.w	r7, {r3, r4}
        --bufsize;
   21e38:	68bb      	ldr	r3, [r7, #8]
   21e3a:	3b01      	subs	r3, #1
   21e3c:	60bb      	str	r3, [r7, #8]
        ++cnt;
   21e3e:	69fb      	ldr	r3, [r7, #28]
   21e40:	3301      	adds	r3, #1
   21e42:	61fb      	str	r3, [r7, #28]
    } while (value != 0);
   21e44:	e897 0018 	ldmia.w	r7, {r3, r4}
   21e48:	4323      	orrs	r3, r4
   21e4a:	d1d1      	bne.n	21df0 <hlp_int64ToString+0x90>
    return cnt;
   21e4c:	69fb      	ldr	r3, [r7, #28]
}
   21e4e:	4618      	mov	r0, r3
   21e50:	3724      	adds	r7, #36	; 0x24
   21e52:	46bd      	mov	sp, r7
   21e54:	bd90      	pop	{r4, r7, pc}
   21e56:	bf00      	nop

00021e58 <hlp_stringToInt64>:

long long hlp_stringToInt64(const char *str)
{
   21e58:	b490      	push	{r4, r7}
   21e5a:	b084      	sub	sp, #16
   21e5c:	af00      	add	r7, sp, #0
   21e5e:	6078      	str	r0, [r7, #4]
    if (str == NULL)
   21e60:	687b      	ldr	r3, [r7, #4]
   21e62:	2b00      	cmp	r3, #0
   21e64:	d104      	bne.n	21e70 <hlp_stringToInt64+0x18>
    {
        return -1;
   21e66:	f04f 33ff 	mov.w	r3, #4294967295
   21e6a:	f04f 34ff 	mov.w	r4, #4294967295
   21e6e:	e038      	b.n	21ee2 <hlp_stringToInt64+0x8a>
    }
    long value = 0;
   21e70:	2300      	movs	r3, #0
   21e72:	60fb      	str	r3, [r7, #12]
    unsigned char minus = 0;
   21e74:	2300      	movs	r3, #0
   21e76:	72fb      	strb	r3, [r7, #11]
    if (*str == '-')
   21e78:	687b      	ldr	r3, [r7, #4]
   21e7a:	781b      	ldrb	r3, [r3, #0]
   21e7c:	2b2d      	cmp	r3, #45	; 0x2d
   21e7e:	d121      	bne.n	21ec4 <hlp_stringToInt64+0x6c>
    {
        minus = 1;
   21e80:	2301      	movs	r3, #1
   21e82:	72fb      	strb	r3, [r7, #11]
        ++str;
   21e84:	687b      	ldr	r3, [r7, #4]
   21e86:	3301      	adds	r3, #1
   21e88:	607b      	str	r3, [r7, #4]
    }
    while (*str != '\0')
   21e8a:	e01b      	b.n	21ec4 <hlp_stringToInt64+0x6c>
    {
        if (*str < '0' || *str > '9')
   21e8c:	687b      	ldr	r3, [r7, #4]
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	2b2f      	cmp	r3, #47	; 0x2f
   21e92:	d903      	bls.n	21e9c <hlp_stringToInt64+0x44>
   21e94:	687b      	ldr	r3, [r7, #4]
   21e96:	781b      	ldrb	r3, [r3, #0]
   21e98:	2b39      	cmp	r3, #57	; 0x39
   21e9a:	d904      	bls.n	21ea6 <hlp_stringToInt64+0x4e>
        {
            return -1;
   21e9c:	f04f 33ff 	mov.w	r3, #4294967295
   21ea0:	f04f 34ff 	mov.w	r4, #4294967295
   21ea4:	e01d      	b.n	21ee2 <hlp_stringToInt64+0x8a>
        }
        value *= 10;
   21ea6:	68fa      	ldr	r2, [r7, #12]
   21ea8:	4613      	mov	r3, r2
   21eaa:	009b      	lsls	r3, r3, #2
   21eac:	4413      	add	r3, r2
   21eae:	005b      	lsls	r3, r3, #1
   21eb0:	60fb      	str	r3, [r7, #12]
        value += *str - '0';
   21eb2:	687b      	ldr	r3, [r7, #4]
   21eb4:	781b      	ldrb	r3, [r3, #0]
   21eb6:	3b30      	subs	r3, #48	; 0x30
   21eb8:	68fa      	ldr	r2, [r7, #12]
   21eba:	4413      	add	r3, r2
   21ebc:	60fb      	str	r3, [r7, #12]
        ++str;
   21ebe:	687b      	ldr	r3, [r7, #4]
   21ec0:	3301      	adds	r3, #1
   21ec2:	607b      	str	r3, [r7, #4]
    if (*str == '-')
    {
        minus = 1;
        ++str;
    }
    while (*str != '\0')
   21ec4:	687b      	ldr	r3, [r7, #4]
   21ec6:	781b      	ldrb	r3, [r3, #0]
   21ec8:	2b00      	cmp	r3, #0
   21eca:	d1df      	bne.n	21e8c <hlp_stringToInt64+0x34>
        }
        value *= 10;
        value += *str - '0';
        ++str;
    }
    if (minus)
   21ecc:	7afb      	ldrb	r3, [r7, #11]
   21ece:	2b00      	cmp	r3, #0
   21ed0:	d004      	beq.n	21edc <hlp_stringToInt64+0x84>
    {
        return -value;
   21ed2:	68fb      	ldr	r3, [r7, #12]
   21ed4:	425b      	negs	r3, r3
   21ed6:	ea4f 74e3 	mov.w	r4, r3, asr #31
   21eda:	e002      	b.n	21ee2 <hlp_stringToInt64+0x8a>
    }
    return value;
   21edc:	68fb      	ldr	r3, [r7, #12]
   21ede:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
   21ee2:	4618      	mov	r0, r3
   21ee4:	4621      	mov	r1, r4
   21ee6:	3710      	adds	r7, #16
   21ee8:	46bd      	mov	sp, r7
   21eea:	bc90      	pop	{r4, r7}
   21eec:	4770      	bx	lr
   21eee:	bf00      	nop

00021ef0 <hlp_rand>:
unsigned short lfsr = 0xACE1u;
unsigned bit;

unsigned char hlp_rand(void)
{
   21ef0:	b480      	push	{r7}
   21ef2:	af00      	add	r7, sp, #0
    bit = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5)) & 1;
   21ef4:	4b15      	ldr	r3, [pc, #84]	; (21f4c <hlp_rand+0x5c>)
   21ef6:	881b      	ldrh	r3, [r3, #0]
   21ef8:	089b      	lsrs	r3, r3, #2
   21efa:	b29a      	uxth	r2, r3
   21efc:	4b13      	ldr	r3, [pc, #76]	; (21f4c <hlp_rand+0x5c>)
   21efe:	881b      	ldrh	r3, [r3, #0]
   21f00:	4053      	eors	r3, r2
   21f02:	b29a      	uxth	r2, r3
   21f04:	4b11      	ldr	r3, [pc, #68]	; (21f4c <hlp_rand+0x5c>)
   21f06:	881b      	ldrh	r3, [r3, #0]
   21f08:	08db      	lsrs	r3, r3, #3
   21f0a:	b29b      	uxth	r3, r3
   21f0c:	4053      	eors	r3, r2
   21f0e:	b29a      	uxth	r2, r3
   21f10:	4b0e      	ldr	r3, [pc, #56]	; (21f4c <hlp_rand+0x5c>)
   21f12:	881b      	ldrh	r3, [r3, #0]
   21f14:	095b      	lsrs	r3, r3, #5
   21f16:	b29b      	uxth	r3, r3
   21f18:	4053      	eors	r3, r2
   21f1a:	b29b      	uxth	r3, r3
   21f1c:	f003 0301 	and.w	r3, r3, #1
   21f20:	4a0b      	ldr	r2, [pc, #44]	; (21f50 <hlp_rand+0x60>)
   21f22:	6013      	str	r3, [r2, #0]
    return (unsigned char)(lfsr = (unsigned short)((lfsr >> 1) | (bit << 15)));
   21f24:	4b09      	ldr	r3, [pc, #36]	; (21f4c <hlp_rand+0x5c>)
   21f26:	881b      	ldrh	r3, [r3, #0]
   21f28:	085b      	lsrs	r3, r3, #1
   21f2a:	b29a      	uxth	r2, r3
   21f2c:	4b08      	ldr	r3, [pc, #32]	; (21f50 <hlp_rand+0x60>)
   21f2e:	681b      	ldr	r3, [r3, #0]
   21f30:	b29b      	uxth	r3, r3
   21f32:	03db      	lsls	r3, r3, #15
   21f34:	b29b      	uxth	r3, r3
   21f36:	4313      	orrs	r3, r2
   21f38:	b29a      	uxth	r2, r3
   21f3a:	4b04      	ldr	r3, [pc, #16]	; (21f4c <hlp_rand+0x5c>)
   21f3c:	801a      	strh	r2, [r3, #0]
   21f3e:	4b03      	ldr	r3, [pc, #12]	; (21f4c <hlp_rand+0x5c>)
   21f40:	881b      	ldrh	r3, [r3, #0]
   21f42:	b2db      	uxtb	r3, r3
}
   21f44:	4618      	mov	r0, r3
   21f46:	46bd      	mov	sp, r7
   21f48:	bc80      	pop	{r7}
   21f4a:	4770      	bx	lr
   21f4c:	1000004a 	.word	0x1000004a
   21f50:	10000668 	.word	0x10000668

00021f54 <oa_init>:
#include <string.h>
#include "../include/objectarray.h"

//Initialize objectArray.
void oa_init(objectArray* arr)
{
   21f54:	b480      	push	{r7}
   21f56:	b083      	sub	sp, #12
   21f58:	af00      	add	r7, sp, #0
   21f5a:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
   21f5c:	687b      	ldr	r3, [r7, #4]
   21f5e:	2200      	movs	r2, #0
   21f60:	809a      	strh	r2, [r3, #4]
    arr->data = NULL;
   21f62:	687b      	ldr	r3, [r7, #4]
   21f64:	2200      	movs	r2, #0
   21f66:	601a      	str	r2, [r3, #0]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
   21f68:	687b      	ldr	r3, [r7, #4]
   21f6a:	2200      	movs	r2, #0
   21f6c:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
    arr->size = 0;
   21f6e:	687b      	ldr	r3, [r7, #4]
   21f70:	2200      	movs	r2, #0
   21f72:	80da      	strh	r2, [r3, #6]
}
   21f74:	bf00      	nop
   21f76:	370c      	adds	r7, #12
   21f78:	46bd      	mov	sp, r7
   21f7a:	bc80      	pop	{r7}
   21f7c:	4770      	bx	lr
   21f7e:	bf00      	nop

00021f80 <oa_isAttached>:


char oa_isAttached(objectArray* arr)
{
   21f80:	b480      	push	{r7}
   21f82:	b083      	sub	sp, #12
   21f84:	af00      	add	r7, sp, #0
   21f86:	6078      	str	r0, [r7, #4]
    return (arr->capacity & 0x8000) == 0x8000;
   21f88:	687b      	ldr	r3, [r7, #4]
   21f8a:	889b      	ldrh	r3, [r3, #4]
   21f8c:	b21b      	sxth	r3, r3
   21f8e:	b29b      	uxth	r3, r3
   21f90:	0bdb      	lsrs	r3, r3, #15
   21f92:	b2db      	uxtb	r3, r3
}
   21f94:	4618      	mov	r0, r3
   21f96:	370c      	adds	r7, #12
   21f98:	46bd      	mov	sp, r7
   21f9a:	bc80      	pop	{r7}
   21f9c:	4770      	bx	lr
   21f9e:	bf00      	nop

00021fa0 <oa_getCapacity>:

unsigned short oa_getCapacity(objectArray* arr)
{
   21fa0:	b480      	push	{r7}
   21fa2:	b083      	sub	sp, #12
   21fa4:	af00      	add	r7, sp, #0
   21fa6:	6078      	str	r0, [r7, #4]
    return arr->capacity & 0x7FFF;
   21fa8:	687b      	ldr	r3, [r7, #4]
   21faa:	889b      	ldrh	r3, [r3, #4]
   21fac:	f3c3 030e 	ubfx	r3, r3, #0, #15
   21fb0:	b29b      	uxth	r3, r3
}
   21fb2:	4618      	mov	r0, r3
   21fb4:	370c      	adds	r7, #12
   21fb6:	46bd      	mov	sp, r7
   21fb8:	bc80      	pop	{r7}
   21fba:	4770      	bx	lr

00021fbc <oa_capacity>:

//Allocate new size for the array in bytes.
void oa_capacity(objectArray* arr, const unsigned short capacity)
{
   21fbc:	b580      	push	{r7, lr}
   21fbe:	b082      	sub	sp, #8
   21fc0:	af00      	add	r7, sp, #0
   21fc2:	6078      	str	r0, [r7, #4]
   21fc4:	460b      	mov	r3, r1
   21fc6:	807b      	strh	r3, [r7, #2]
    if (!oa_isAttached(arr))
   21fc8:	6878      	ldr	r0, [r7, #4]
   21fca:	f7ff ffd9 	bl	21f80 <oa_isAttached>
   21fce:	4603      	mov	r3, r0
   21fd0:	2b00      	cmp	r3, #0
   21fd2:	d11d      	bne.n	22010 <oa_capacity+0x54>
    {
        arr->capacity = capacity;
   21fd4:	687b      	ldr	r3, [r7, #4]
   21fd6:	887a      	ldrh	r2, [r7, #2]
   21fd8:	809a      	strh	r2, [r3, #4]
        if (arr->data == NULL)
   21fda:	687b      	ldr	r3, [r7, #4]
   21fdc:	681b      	ldr	r3, [r3, #0]
   21fde:	2b00      	cmp	r3, #0
   21fe0:	d10a      	bne.n	21ff8 <oa_capacity+0x3c>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   21fe2:	687b      	ldr	r3, [r7, #4]
   21fe4:	889b      	ldrh	r3, [r3, #4]
   21fe6:	009b      	lsls	r3, r3, #2
   21fe8:	4618      	mov	r0, r3
   21fea:	f007 fd2b 	bl	29a44 <malloc>
   21fee:	4603      	mov	r3, r0
   21ff0:	461a      	mov	r2, r3
   21ff2:	687b      	ldr	r3, [r7, #4]
   21ff4:	601a      	str	r2, [r3, #0]
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
        }
    }
}
   21ff6:	e00b      	b.n	22010 <oa_capacity+0x54>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   21ff8:	687b      	ldr	r3, [r7, #4]
   21ffa:	681a      	ldr	r2, [r3, #0]
   21ffc:	687b      	ldr	r3, [r7, #4]
   21ffe:	889b      	ldrh	r3, [r3, #4]
   22000:	009b      	lsls	r3, r3, #2
   22002:	4619      	mov	r1, r3
   22004:	4610      	mov	r0, r2
   22006:	f008 f8d3 	bl	2a1b0 <realloc>
   2200a:	4602      	mov	r2, r0
   2200c:	687b      	ldr	r3, [r7, #4]
   2200e:	601a      	str	r2, [r3, #0]
        }
    }
}
   22010:	bf00      	nop
   22012:	3708      	adds	r7, #8
   22014:	46bd      	mov	sp, r7
   22016:	bd80      	pop	{r7, pc}

00022018 <oa_attach>:

//Attach object to objectArray.
void oa_attach(objectArray * arr, const gxObject** item, const unsigned short count)
{
   22018:	b480      	push	{r7}
   2201a:	b085      	sub	sp, #20
   2201c:	af00      	add	r7, sp, #0
   2201e:	60f8      	str	r0, [r7, #12]
   22020:	60b9      	str	r1, [r7, #8]
   22022:	4613      	mov	r3, r2
   22024:	80fb      	strh	r3, [r7, #6]
    arr->capacity = 0x8000 + count;
   22026:	88fb      	ldrh	r3, [r7, #6]
   22028:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   2202c:	b29a      	uxth	r2, r3
   2202e:	68fb      	ldr	r3, [r7, #12]
   22030:	809a      	strh	r2, [r3, #4]
    arr->size = count;
   22032:	68fb      	ldr	r3, [r7, #12]
   22034:	88fa      	ldrh	r2, [r7, #6]
   22036:	80da      	strh	r2, [r3, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
   22038:	68fb      	ldr	r3, [r7, #12]
   2203a:	2200      	movs	r2, #0
   2203c:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
    arr->data = (gxObject**)item;
   2203e:	68fb      	ldr	r3, [r7, #12]
   22040:	68ba      	ldr	r2, [r7, #8]
   22042:	601a      	str	r2, [r3, #0]
}
   22044:	bf00      	nop
   22046:	3714      	adds	r7, #20
   22048:	46bd      	mov	sp, r7
   2204a:	bc80      	pop	{r7}
   2204c:	4770      	bx	lr
   2204e:	bf00      	nop

00022050 <oa_push>:
    return DLMS_ERROR_CODE_OK;
}

//Push new data to the objectArray.
int oa_push(objectArray * arr, gxObject* item)
{
   22050:	b580      	push	{r7, lr}
   22052:	b082      	sub	sp, #8
   22054:	af00      	add	r7, sp, #0
   22056:	6078      	str	r0, [r7, #4]
   22058:	6039      	str	r1, [r7, #0]
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   2205a:	6878      	ldr	r0, [r7, #4]
   2205c:	f7ff ff90 	bl	21f80 <oa_isAttached>
   22060:	4603      	mov	r3, r0
   22062:	2b00      	cmp	r3, #0
   22064:	d126      	bne.n	220b4 <oa_push+0x64>
   22066:	687b      	ldr	r3, [r7, #4]
   22068:	88da      	ldrh	r2, [r3, #6]
   2206a:	687b      	ldr	r3, [r7, #4]
   2206c:	889b      	ldrh	r3, [r3, #4]
   2206e:	429a      	cmp	r2, r3
   22070:	d320      	bcc.n	220b4 <oa_push+0x64>
    {
        arr->capacity += OBJECT_ARRAY_CAPACITY;
   22072:	687b      	ldr	r3, [r7, #4]
   22074:	889b      	ldrh	r3, [r3, #4]
   22076:	330a      	adds	r3, #10
   22078:	b29a      	uxth	r2, r3
   2207a:	687b      	ldr	r3, [r7, #4]
   2207c:	809a      	strh	r2, [r3, #4]
        if (arr->data == NULL)
   2207e:	687b      	ldr	r3, [r7, #4]
   22080:	681b      	ldr	r3, [r3, #0]
   22082:	2b00      	cmp	r3, #0
   22084:	d10a      	bne.n	2209c <oa_push+0x4c>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   22086:	687b      	ldr	r3, [r7, #4]
   22088:	889b      	ldrh	r3, [r3, #4]
   2208a:	009b      	lsls	r3, r3, #2
   2208c:	4618      	mov	r0, r3
   2208e:	f007 fcd9 	bl	29a44 <malloc>
   22092:	4603      	mov	r3, r0
   22094:	461a      	mov	r2, r3
   22096:	687b      	ldr	r3, [r7, #4]
   22098:	601a      	str	r2, [r3, #0]
   2209a:	e00b      	b.n	220b4 <oa_push+0x64>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   2209c:	687b      	ldr	r3, [r7, #4]
   2209e:	681a      	ldr	r2, [r3, #0]
   220a0:	687b      	ldr	r3, [r7, #4]
   220a2:	889b      	ldrh	r3, [r3, #4]
   220a4:	009b      	lsls	r3, r3, #2
   220a6:	4619      	mov	r1, r3
   220a8:	4610      	mov	r0, r2
   220aa:	f008 f881 	bl	2a1b0 <realloc>
   220ae:	4602      	mov	r2, r0
   220b0:	687b      	ldr	r3, [r7, #4]
   220b2:	601a      	str	r2, [r3, #0]
        }
    }
    if (oa_getCapacity(arr) <= arr->size)
   220b4:	6878      	ldr	r0, [r7, #4]
   220b6:	f7ff ff73 	bl	21fa0 <oa_getCapacity>
   220ba:	4603      	mov	r3, r0
   220bc:	461a      	mov	r2, r3
   220be:	687b      	ldr	r3, [r7, #4]
   220c0:	88db      	ldrh	r3, [r3, #6]
   220c2:	429a      	cmp	r2, r3
   220c4:	d802      	bhi.n	220cc <oa_push+0x7c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   220c6:	f44f 7382 	mov.w	r3, #260	; 0x104
   220ca:	e00e      	b.n	220ea <oa_push+0x9a>
    }
    arr->data[arr->size] = item;
   220cc:	687b      	ldr	r3, [r7, #4]
   220ce:	681a      	ldr	r2, [r3, #0]
   220d0:	687b      	ldr	r3, [r7, #4]
   220d2:	88db      	ldrh	r3, [r3, #6]
   220d4:	009b      	lsls	r3, r3, #2
   220d6:	4413      	add	r3, r2
   220d8:	683a      	ldr	r2, [r7, #0]
   220da:	601a      	str	r2, [r3, #0]
    ++arr->size;
   220dc:	687b      	ldr	r3, [r7, #4]
   220de:	88db      	ldrh	r3, [r3, #6]
   220e0:	3301      	adds	r3, #1
   220e2:	b29a      	uxth	r2, r3
   220e4:	687b      	ldr	r3, [r7, #4]
   220e6:	80da      	strh	r2, [r3, #6]
    return DLMS_ERROR_CODE_OK;
   220e8:	2300      	movs	r3, #0
}
   220ea:	4618      	mov	r0, r3
   220ec:	3708      	adds	r7, #8
   220ee:	46bd      	mov	sp, r7
   220f0:	bd80      	pop	{r7, pc}
   220f2:	bf00      	nop

000220f4 <oa_copy>:

//Copy content of object array.
void oa_copy(objectArray *target, objectArray* source)
{
   220f4:	b580      	push	{r7, lr}
   220f6:	b084      	sub	sp, #16
   220f8:	af00      	add	r7, sp, #0
   220fa:	6078      	str	r0, [r7, #4]
   220fc:	6039      	str	r1, [r7, #0]
    int pos;
    oa_clear(target);
   220fe:	6878      	ldr	r0, [r7, #4]
   22100:	f000 f826 	bl	22150 <oa_clear>
    oa_capacity(target, source->size);
   22104:	683b      	ldr	r3, [r7, #0]
   22106:	88db      	ldrh	r3, [r3, #6]
   22108:	4619      	mov	r1, r3
   2210a:	6878      	ldr	r0, [r7, #4]
   2210c:	f7ff ff56 	bl	21fbc <oa_capacity>
    for (pos = 0; pos != source->size; ++pos)
   22110:	2300      	movs	r3, #0
   22112:	60fb      	str	r3, [r7, #12]
   22114:	e00e      	b.n	22134 <oa_copy+0x40>
    {
        target->data[pos] = source->data[pos];
   22116:	687b      	ldr	r3, [r7, #4]
   22118:	681a      	ldr	r2, [r3, #0]
   2211a:	68fb      	ldr	r3, [r7, #12]
   2211c:	009b      	lsls	r3, r3, #2
   2211e:	4413      	add	r3, r2
   22120:	683a      	ldr	r2, [r7, #0]
   22122:	6811      	ldr	r1, [r2, #0]
   22124:	68fa      	ldr	r2, [r7, #12]
   22126:	0092      	lsls	r2, r2, #2
   22128:	440a      	add	r2, r1
   2212a:	6812      	ldr	r2, [r2, #0]
   2212c:	601a      	str	r2, [r3, #0]
void oa_copy(objectArray *target, objectArray* source)
{
    int pos;
    oa_clear(target);
    oa_capacity(target, source->size);
    for (pos = 0; pos != source->size; ++pos)
   2212e:	68fb      	ldr	r3, [r7, #12]
   22130:	3301      	adds	r3, #1
   22132:	60fb      	str	r3, [r7, #12]
   22134:	683b      	ldr	r3, [r7, #0]
   22136:	88db      	ldrh	r3, [r3, #6]
   22138:	461a      	mov	r2, r3
   2213a:	68fb      	ldr	r3, [r7, #12]
   2213c:	429a      	cmp	r2, r3
   2213e:	d1ea      	bne.n	22116 <oa_copy+0x22>
    {
        target->data[pos] = source->data[pos];
    }
    target->size = source->size;
   22140:	683b      	ldr	r3, [r7, #0]
   22142:	88da      	ldrh	r2, [r3, #6]
   22144:	687b      	ldr	r3, [r7, #4]
   22146:	80da      	strh	r2, [r3, #6]
}
   22148:	bf00      	nop
   2214a:	3710      	adds	r7, #16
   2214c:	46bd      	mov	sp, r7
   2214e:	bd80      	pop	{r7, pc}

00022150 <oa_clear>:
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}

void oa_clear(objectArray* arr)
{
   22150:	b580      	push	{r7, lr}
   22152:	b084      	sub	sp, #16
   22154:	af00      	add	r7, sp, #0
   22156:	6078      	str	r0, [r7, #4]
    unsigned short pos;
    if (arr->data != NULL)
   22158:	687b      	ldr	r3, [r7, #4]
   2215a:	681b      	ldr	r3, [r3, #0]
   2215c:	2b00      	cmp	r3, #0
   2215e:	d041      	beq.n	221e4 <oa_clear+0x94>
    {
        //Clear objects first.
        for (pos = 0; pos != arr->size; ++pos)
   22160:	2300      	movs	r3, #0
   22162:	81fb      	strh	r3, [r7, #14]
   22164:	e00b      	b.n	2217e <oa_clear+0x2e>
        {
            obj_clear(arr->data[pos]);
   22166:	687b      	ldr	r3, [r7, #4]
   22168:	681a      	ldr	r2, [r3, #0]
   2216a:	89fb      	ldrh	r3, [r7, #14]
   2216c:	009b      	lsls	r3, r3, #2
   2216e:	4413      	add	r3, r2
   22170:	681b      	ldr	r3, [r3, #0]
   22172:	4618      	mov	r0, r3
   22174:	f7f5 f958 	bl	17428 <obj_clear>
{
    unsigned short pos;
    if (arr->data != NULL)
    {
        //Clear objects first.
        for (pos = 0; pos != arr->size; ++pos)
   22178:	89fb      	ldrh	r3, [r7, #14]
   2217a:	3301      	adds	r3, #1
   2217c:	81fb      	strh	r3, [r7, #14]
   2217e:	687b      	ldr	r3, [r7, #4]
   22180:	88db      	ldrh	r3, [r3, #6]
   22182:	89fa      	ldrh	r2, [r7, #14]
   22184:	429a      	cmp	r2, r3
   22186:	d1ee      	bne.n	22166 <oa_clear+0x16>
        {
            obj_clear(arr->data[pos]);
        }
        for (pos = 0; pos != arr->size; ++pos)
   22188:	2300      	movs	r3, #0
   2218a:	81fb      	strh	r3, [r7, #14]
   2218c:	e014      	b.n	221b8 <oa_clear+0x68>
        {
            if (arr->data[pos]->free)
   2218e:	687b      	ldr	r3, [r7, #4]
   22190:	681a      	ldr	r2, [r3, #0]
   22192:	89fb      	ldrh	r3, [r7, #14]
   22194:	009b      	lsls	r3, r3, #2
   22196:	4413      	add	r3, r2
   22198:	681b      	ldr	r3, [r3, #0]
   2219a:	789b      	ldrb	r3, [r3, #2]
   2219c:	2b00      	cmp	r3, #0
   2219e:	d008      	beq.n	221b2 <oa_clear+0x62>
            {
                gxfree(arr->data[pos]);
   221a0:	687b      	ldr	r3, [r7, #4]
   221a2:	681a      	ldr	r2, [r3, #0]
   221a4:	89fb      	ldrh	r3, [r7, #14]
   221a6:	009b      	lsls	r3, r3, #2
   221a8:	4413      	add	r3, r2
   221aa:	681b      	ldr	r3, [r3, #0]
   221ac:	4618      	mov	r0, r3
   221ae:	f007 fc51 	bl	29a54 <free>
        //Clear objects first.
        for (pos = 0; pos != arr->size; ++pos)
        {
            obj_clear(arr->data[pos]);
        }
        for (pos = 0; pos != arr->size; ++pos)
   221b2:	89fb      	ldrh	r3, [r7, #14]
   221b4:	3301      	adds	r3, #1
   221b6:	81fb      	strh	r3, [r7, #14]
   221b8:	687b      	ldr	r3, [r7, #4]
   221ba:	88db      	ldrh	r3, [r3, #6]
   221bc:	89fa      	ldrh	r2, [r7, #14]
   221be:	429a      	cmp	r2, r3
   221c0:	d1e5      	bne.n	2218e <oa_clear+0x3e>
            if (arr->data[pos]->free)
            {
                gxfree(arr->data[pos]);
            }
        }
        if (!oa_isAttached(arr))
   221c2:	6878      	ldr	r0, [r7, #4]
   221c4:	f7ff fedc 	bl	21f80 <oa_isAttached>
   221c8:	4603      	mov	r3, r0
   221ca:	2b00      	cmp	r3, #0
   221cc:	d10a      	bne.n	221e4 <oa_clear+0x94>
        {
            gxfree(arr->data);
   221ce:	687b      	ldr	r3, [r7, #4]
   221d0:	681b      	ldr	r3, [r3, #0]
   221d2:	4618      	mov	r0, r3
   221d4:	f007 fc3e 	bl	29a54 <free>
            arr->data = NULL;
   221d8:	687b      	ldr	r3, [r7, #4]
   221da:	2200      	movs	r2, #0
   221dc:	601a      	str	r2, [r3, #0]
            arr->capacity = 0;
   221de:	687b      	ldr	r3, [r7, #4]
   221e0:	2200      	movs	r2, #0
   221e2:	809a      	strh	r2, [r3, #4]
        }
    }
    arr->size = 0;
   221e4:	687b      	ldr	r3, [r7, #4]
   221e6:	2200      	movs	r2, #0
   221e8:	80da      	strh	r2, [r3, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
   221ea:	687b      	ldr	r3, [r7, #4]
   221ec:	2200      	movs	r2, #0
   221ee:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
}
   221f0:	bf00      	nop
   221f2:	3710      	adds	r7, #16
   221f4:	46bd      	mov	sp, r7
   221f6:	bd80      	pop	{r7, pc}

000221f8 <oa_empty>:

void oa_empty(objectArray* arr)
{
   221f8:	b580      	push	{r7, lr}
   221fa:	b082      	sub	sp, #8
   221fc:	af00      	add	r7, sp, #0
   221fe:	6078      	str	r0, [r7, #4]
    if (!oa_isAttached(arr))
   22200:	6878      	ldr	r0, [r7, #4]
   22202:	f7ff febd 	bl	21f80 <oa_isAttached>
   22206:	4603      	mov	r3, r0
   22208:	2b00      	cmp	r3, #0
   2220a:	d10e      	bne.n	2222a <oa_empty+0x32>
    {
        if (arr->data != NULL)
   2220c:	687b      	ldr	r3, [r7, #4]
   2220e:	681b      	ldr	r3, [r3, #0]
   22210:	2b00      	cmp	r3, #0
   22212:	d007      	beq.n	22224 <oa_empty+0x2c>
        {
            gxfree(arr->data);
   22214:	687b      	ldr	r3, [r7, #4]
   22216:	681b      	ldr	r3, [r3, #0]
   22218:	4618      	mov	r0, r3
   2221a:	f007 fc1b 	bl	29a54 <free>
            arr->data = NULL;
   2221e:	687b      	ldr	r3, [r7, #4]
   22220:	2200      	movs	r2, #0
   22222:	601a      	str	r2, [r3, #0]
        }
        arr->capacity = 0;
   22224:	687b      	ldr	r3, [r7, #4]
   22226:	2200      	movs	r2, #0
   22228:	809a      	strh	r2, [r3, #4]
    }
    arr->size = 0;
   2222a:	687b      	ldr	r3, [r7, #4]
   2222c:	2200      	movs	r2, #0
   2222e:	80da      	strh	r2, [r3, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
   22230:	687b      	ldr	r3, [r7, #4]
   22232:	2200      	movs	r2, #0
   22234:	811a      	strh	r2, [r3, #8]
#endif //GX_DLMS_MICROCONTROLLER
}
   22236:	bf00      	nop
   22238:	3708      	adds	r7, #8
   2223a:	46bd      	mov	sp, r7
   2223c:	bd80      	pop	{r7, pc}
   2223e:	bf00      	nop

00022240 <oa_getByIndex>:
//Get item from object array by index.
int oa_getByIndex(
    objectArray* arr,
    unsigned short index,
    gxObject** item)
{
   22240:	b480      	push	{r7}
   22242:	b085      	sub	sp, #20
   22244:	af00      	add	r7, sp, #0
   22246:	60f8      	str	r0, [r7, #12]
   22248:	460b      	mov	r3, r1
   2224a:	607a      	str	r2, [r7, #4]
   2224c:	817b      	strh	r3, [r7, #10]
    if (index >= arr->size)
   2224e:	68fb      	ldr	r3, [r7, #12]
   22250:	88db      	ldrh	r3, [r3, #6]
   22252:	897a      	ldrh	r2, [r7, #10]
   22254:	429a      	cmp	r2, r3
   22256:	d302      	bcc.n	2225e <oa_getByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   22258:	f44f 7382 	mov.w	r3, #260	; 0x104
   2225c:	e008      	b.n	22270 <oa_getByIndex+0x30>
    }
    *item = arr->data[index];
   2225e:	68fb      	ldr	r3, [r7, #12]
   22260:	681a      	ldr	r2, [r3, #0]
   22262:	897b      	ldrh	r3, [r7, #10]
   22264:	009b      	lsls	r3, r3, #2
   22266:	4413      	add	r3, r2
   22268:	681a      	ldr	r2, [r3, #0]
   2226a:	687b      	ldr	r3, [r7, #4]
   2226c:	601a      	str	r2, [r3, #0]
    return DLMS_ERROR_CODE_OK;
   2226e:	2300      	movs	r3, #0
}
   22270:	4618      	mov	r0, r3
   22272:	3714      	adds	r7, #20
   22274:	46bd      	mov	sp, r7
   22276:	bc80      	pop	{r7}
   22278:	4770      	bx	lr
   2227a:	bf00      	nop

0002227c <oa_findBySN>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int oa_findBySN(
    objectArray* objects,
    unsigned short sn,
    gxObject** object)
{
   2227c:	b580      	push	{r7, lr}
   2227e:	b088      	sub	sp, #32
   22280:	af00      	add	r7, sp, #0
   22282:	60f8      	str	r0, [r7, #12]
   22284:	460b      	mov	r3, r1
   22286:	607a      	str	r2, [r7, #4]
   22288:	817b      	strh	r3, [r7, #10]
    unsigned short pos;
    int ret = DLMS_ERROR_CODE_OK;
   2228a:	2300      	movs	r3, #0
   2228c:	61bb      	str	r3, [r7, #24]
    gxObject* obj = NULL;
   2228e:	2300      	movs	r3, #0
   22290:	617b      	str	r3, [r7, #20]
    *object = NULL;
   22292:	687b      	ldr	r3, [r7, #4]
   22294:	2200      	movs	r2, #0
   22296:	601a      	str	r2, [r3, #0]
    for (pos = 0; pos != objects->size; ++pos)
   22298:	2300      	movs	r3, #0
   2229a:	83fb      	strh	r3, [r7, #30]
   2229c:	e019      	b.n	222d2 <oa_findBySN+0x56>
    {
        ret = oa_getByIndex(objects, pos, &obj);
   2229e:	f107 0214 	add.w	r2, r7, #20
   222a2:	8bfb      	ldrh	r3, [r7, #30]
   222a4:	4619      	mov	r1, r3
   222a6:	68f8      	ldr	r0, [r7, #12]
   222a8:	f7ff ffca 	bl	22240 <oa_getByIndex>
   222ac:	61b8      	str	r0, [r7, #24]
        if (ret != DLMS_ERROR_CODE_OK)
   222ae:	69bb      	ldr	r3, [r7, #24]
   222b0:	2b00      	cmp	r3, #0
   222b2:	d001      	beq.n	222b8 <oa_findBySN+0x3c>
        {
            return ret;
   222b4:	69bb      	ldr	r3, [r7, #24]
   222b6:	e012      	b.n	222de <oa_findBySN+0x62>
        }
        if (obj->shortName == sn)
   222b8:	697b      	ldr	r3, [r7, #20]
   222ba:	889b      	ldrh	r3, [r3, #4]
   222bc:	897a      	ldrh	r2, [r7, #10]
   222be:	429a      	cmp	r2, r3
   222c0:	d104      	bne.n	222cc <oa_findBySN+0x50>
        {
            *object = obj;
   222c2:	697a      	ldr	r2, [r7, #20]
   222c4:	687b      	ldr	r3, [r7, #4]
   222c6:	601a      	str	r2, [r3, #0]
            return 0;
   222c8:	2300      	movs	r3, #0
   222ca:	e008      	b.n	222de <oa_findBySN+0x62>
{
    unsigned short pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
    *object = NULL;
    for (pos = 0; pos != objects->size; ++pos)
   222cc:	8bfb      	ldrh	r3, [r7, #30]
   222ce:	3301      	adds	r3, #1
   222d0:	83fb      	strh	r3, [r7, #30]
   222d2:	68fb      	ldr	r3, [r7, #12]
   222d4:	88db      	ldrh	r3, [r3, #6]
   222d6:	8bfa      	ldrh	r2, [r7, #30]
   222d8:	429a      	cmp	r2, r3
   222da:	d1e0      	bne.n	2229e <oa_findBySN+0x22>
        {
            *object = obj;
            return 0;
        }
    }
    return ret;
   222dc:	69bb      	ldr	r3, [r7, #24]
}
   222de:	4618      	mov	r0, r3
   222e0:	3720      	adds	r7, #32
   222e2:	46bd      	mov	sp, r7
   222e4:	bd80      	pop	{r7, pc}
   222e6:	bf00      	nop

000222e8 <oa_findByLN>:
int oa_findByLN(
    objectArray* objects,
    DLMS_OBJECT_TYPE type,
    const unsigned char *ln,
    gxObject** object)
{
   222e8:	b580      	push	{r7, lr}
   222ea:	b088      	sub	sp, #32
   222ec:	af00      	add	r7, sp, #0
   222ee:	60f8      	str	r0, [r7, #12]
   222f0:	607a      	str	r2, [r7, #4]
   222f2:	603b      	str	r3, [r7, #0]
   222f4:	460b      	mov	r3, r1
   222f6:	817b      	strh	r3, [r7, #10]
    unsigned short pos;
    int ret = DLMS_ERROR_CODE_OK;
   222f8:	2300      	movs	r3, #0
   222fa:	61bb      	str	r3, [r7, #24]
    gxObject* obj = NULL;
   222fc:	2300      	movs	r3, #0
   222fe:	617b      	str	r3, [r7, #20]
    *object = NULL;
   22300:	683b      	ldr	r3, [r7, #0]
   22302:	2200      	movs	r2, #0
   22304:	601a      	str	r2, [r3, #0]
    if (ln == NULL)
   22306:	687b      	ldr	r3, [r7, #4]
   22308:	2b00      	cmp	r3, #0
   2230a:	d102      	bne.n	22312 <oa_findByLN+0x2a>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2230c:	f44f 7381 	mov.w	r3, #258	; 0x102
   22310:	e030      	b.n	22374 <oa_findByLN+0x8c>
    }
    for (pos = 0; pos != objects->size; ++pos)
   22312:	2300      	movs	r3, #0
   22314:	83fb      	strh	r3, [r7, #30]
   22316:	e027      	b.n	22368 <oa_findByLN+0x80>
    {
        ret = oa_getByIndex(objects, pos, &obj);
   22318:	f107 0214 	add.w	r2, r7, #20
   2231c:	8bfb      	ldrh	r3, [r7, #30]
   2231e:	4619      	mov	r1, r3
   22320:	68f8      	ldr	r0, [r7, #12]
   22322:	f7ff ff8d 	bl	22240 <oa_getByIndex>
   22326:	61b8      	str	r0, [r7, #24]
        if (ret != DLMS_ERROR_CODE_OK)
   22328:	69bb      	ldr	r3, [r7, #24]
   2232a:	2b00      	cmp	r3, #0
   2232c:	d001      	beq.n	22332 <oa_findByLN+0x4a>
        {
            return ret;
   2232e:	69bb      	ldr	r3, [r7, #24]
   22330:	e020      	b.n	22374 <oa_findByLN+0x8c>
        }
        if ((obj->objectType == type || DLMS_OBJECT_TYPE_NONE == type) && memcmp(obj->logicalName, ln, 6) == 0)
   22332:	697b      	ldr	r3, [r7, #20]
   22334:	781b      	ldrb	r3, [r3, #0]
   22336:	b29b      	uxth	r3, r3
   22338:	897a      	ldrh	r2, [r7, #10]
   2233a:	429a      	cmp	r2, r3
   2233c:	d002      	beq.n	22344 <oa_findByLN+0x5c>
   2233e:	897b      	ldrh	r3, [r7, #10]
   22340:	2b00      	cmp	r3, #0
   22342:	d10e      	bne.n	22362 <oa_findByLN+0x7a>
   22344:	697b      	ldr	r3, [r7, #20]
   22346:	3306      	adds	r3, #6
   22348:	2206      	movs	r2, #6
   2234a:	6879      	ldr	r1, [r7, #4]
   2234c:	4618      	mov	r0, r3
   2234e:	f007 fb89 	bl	29a64 <memcmp>
   22352:	4603      	mov	r3, r0
   22354:	2b00      	cmp	r3, #0
   22356:	d104      	bne.n	22362 <oa_findByLN+0x7a>
        {
            *object = obj;
   22358:	697a      	ldr	r2, [r7, #20]
   2235a:	683b      	ldr	r3, [r7, #0]
   2235c:	601a      	str	r2, [r3, #0]
            return 0;
   2235e:	2300      	movs	r3, #0
   22360:	e008      	b.n	22374 <oa_findByLN+0x8c>
    *object = NULL;
    if (ln == NULL)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    for (pos = 0; pos != objects->size; ++pos)
   22362:	8bfb      	ldrh	r3, [r7, #30]
   22364:	3301      	adds	r3, #1
   22366:	83fb      	strh	r3, [r7, #30]
   22368:	68fb      	ldr	r3, [r7, #12]
   2236a:	88db      	ldrh	r3, [r3, #6]
   2236c:	8bfa      	ldrh	r2, [r7, #30]
   2236e:	429a      	cmp	r2, r3
   22370:	d1d2      	bne.n	22318 <oa_findByLN+0x30>
        {
            *object = obj;
            return 0;
        }
    }
    return ret;
   22372:	69bb      	ldr	r3, [r7, #24]
}
   22374:	4618      	mov	r0, r3
   22376:	3720      	adds	r7, #32
   22378:	46bd      	mov	sp, r7
   2237a:	bd80      	pop	{r7, pc}

0002237c <params_initSN>:
    int count,
	unsigned char commandType,
    gxByteBuffer* attributeDescriptor,
    gxByteBuffer* data,
    DLMS_COMMAND encryptedCommand)
{
   2237c:	b480      	push	{r7}
   2237e:	b085      	sub	sp, #20
   22380:	af00      	add	r7, sp, #0
   22382:	60f8      	str	r0, [r7, #12]
   22384:	60b9      	str	r1, [r7, #8]
   22386:	603b      	str	r3, [r7, #0]
   22388:	4613      	mov	r3, r2
   2238a:	71fb      	strb	r3, [r7, #7]
    target->settings = settings;
   2238c:	68fb      	ldr	r3, [r7, #12]
   2238e:	68ba      	ldr	r2, [r7, #8]
   22390:	601a      	str	r2, [r3, #0]
    target->blockIndex = (unsigned short)settings->blockIndex;
   22392:	68bb      	ldr	r3, [r7, #8]
   22394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   22398:	b29a      	uxth	r2, r3
   2239a:	68fb      	ldr	r3, [r7, #12]
   2239c:	835a      	strh	r2, [r3, #26]
    target->command = command;
   2239e:	68fb      	ldr	r3, [r7, #12]
   223a0:	79fa      	ldrb	r2, [r7, #7]
   223a2:	711a      	strb	r2, [r3, #4]
    target->encryptedCommand = encryptedCommand;
   223a4:	68fb      	ldr	r3, [r7, #12]
   223a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   223aa:	715a      	strb	r2, [r3, #5]
    target->count = count;
   223ac:	68fb      	ldr	r3, [r7, #12]
   223ae:	683a      	ldr	r2, [r7, #0]
   223b0:	615a      	str	r2, [r3, #20]
    target->requestType = commandType;
   223b2:	68fb      	ldr	r3, [r7, #12]
   223b4:	7e3a      	ldrb	r2, [r7, #24]
   223b6:	719a      	strb	r2, [r3, #6]
    target->attributeDescriptor = attributeDescriptor;
   223b8:	68fb      	ldr	r3, [r7, #12]
   223ba:	69fa      	ldr	r2, [r7, #28]
   223bc:	609a      	str	r2, [r3, #8]
    target->data = data;
   223be:	68fb      	ldr	r3, [r7, #12]
   223c0:	6a3a      	ldr	r2, [r7, #32]
   223c2:	60da      	str	r2, [r3, #12]
    target->multipleBlocks = 0;
   223c4:	68fb      	ldr	r3, [r7, #12]
   223c6:	2200      	movs	r2, #0
   223c8:	761a      	strb	r2, [r3, #24]
    target->time = 0;
   223ca:	68fb      	ldr	r3, [r7, #12]
   223cc:	2200      	movs	r2, #0
   223ce:	611a      	str	r2, [r3, #16]
    target->lastBlock = 1;
   223d0:	68fb      	ldr	r3, [r7, #12]
   223d2:	2201      	movs	r2, #1
   223d4:	765a      	strb	r2, [r3, #25]
}
   223d6:	bf00      	nop
   223d8:	3714      	adds	r7, #20
   223da:	46bd      	mov	sp, r7
   223dc:	bc80      	pop	{r7}
   223de:	4770      	bx	lr

000223e0 <params_initLN>:
    unsigned char commandType,
    gxByteBuffer* attributeDescriptor,
    gxByteBuffer* data,
    unsigned char status,
    DLMS_COMMAND encryptedCommand)
{
   223e0:	b480      	push	{r7}
   223e2:	b085      	sub	sp, #20
   223e4:	af00      	add	r7, sp, #0
   223e6:	60f8      	str	r0, [r7, #12]
   223e8:	60b9      	str	r1, [r7, #8]
   223ea:	4611      	mov	r1, r2
   223ec:	461a      	mov	r2, r3
   223ee:	460b      	mov	r3, r1
   223f0:	71fb      	strb	r3, [r7, #7]
   223f2:	4613      	mov	r3, r2
   223f4:	71bb      	strb	r3, [r7, #6]
    target->invokeId = invokeId;
   223f6:	68fb      	ldr	r3, [r7, #12]
   223f8:	79fa      	ldrb	r2, [r7, #7]
   223fa:	771a      	strb	r2, [r3, #28]
    target->settings = settings;
   223fc:	68fb      	ldr	r3, [r7, #12]
   223fe:	68ba      	ldr	r2, [r7, #8]
   22400:	601a      	str	r2, [r3, #0]
    target->blockIndex = settings->blockIndex;
   22402:	68bb      	ldr	r3, [r7, #8]
   22404:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   22408:	68fb      	ldr	r3, [r7, #12]
   2240a:	619a      	str	r2, [r3, #24]
    target->command = command;
   2240c:	68fb      	ldr	r3, [r7, #12]
   2240e:	79ba      	ldrb	r2, [r7, #6]
   22410:	711a      	strb	r2, [r3, #4]
    target->encryptedCommand = encryptedCommand;
   22412:	68fb      	ldr	r3, [r7, #12]
   22414:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   22418:	715a      	strb	r2, [r3, #5]
    target->requestType = commandType;
   2241a:	68fb      	ldr	r3, [r7, #12]
   2241c:	7e3a      	ldrb	r2, [r7, #24]
   2241e:	719a      	strb	r2, [r3, #6]
    target->attributeDescriptor = attributeDescriptor;
   22420:	68fb      	ldr	r3, [r7, #12]
   22422:	69fa      	ldr	r2, [r7, #28]
   22424:	609a      	str	r2, [r3, #8]
    target->data = data;
   22426:	68fb      	ldr	r3, [r7, #12]
   22428:	6a3a      	ldr	r2, [r7, #32]
   2242a:	60da      	str	r2, [r3, #12]
    target->time = NULL;
   2242c:	68fb      	ldr	r3, [r7, #12]
   2242e:	2200      	movs	r2, #0
   22430:	611a      	str	r2, [r3, #16]
    target->status = status;
   22432:	68fb      	ldr	r3, [r7, #12]
   22434:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   22438:	751a      	strb	r2, [r3, #20]
    target->multipleBlocks = settings->count != settings->index;
   2243a:	68bb      	ldr	r3, [r7, #8]
   2243c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
   22440:	68bb      	ldr	r3, [r7, #8]
   22442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   22446:	429a      	cmp	r2, r3
   22448:	bf14      	ite	ne
   2244a:	2301      	movne	r3, #1
   2244c:	2300      	moveq	r3, #0
   2244e:	b2db      	uxtb	r3, r3
   22450:	461a      	mov	r2, r3
   22452:	68fb      	ldr	r3, [r7, #12]
   22454:	755a      	strb	r2, [r3, #21]
    target->lastBlock = settings->count == settings->index;
   22456:	68bb      	ldr	r3, [r7, #8]
   22458:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
   2245c:	68bb      	ldr	r3, [r7, #8]
   2245e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   22462:	429a      	cmp	r2, r3
   22464:	bf0c      	ite	eq
   22466:	2301      	moveq	r3, #1
   22468:	2300      	movne	r3, #0
   2246a:	b2db      	uxtb	r3, r3
   2246c:	461a      	mov	r2, r3
   2246e:	68fb      	ldr	r3, [r7, #12]
   22470:	759a      	strb	r2, [r3, #22]
}
   22472:	bf00      	nop
   22474:	3714      	adds	r7, #20
   22476:	46bd      	mov	sp, r7
   22478:	bc80      	pop	{r7}
   2247a:	4770      	bx	lr

0002247c <reply_init>:

/**
* Initialize reply structure.
*/
void reply_init(gxReplyData* reply)
{
   2247c:	b580      	push	{r7, lr}
   2247e:	b082      	sub	sp, #8
   22480:	af00      	add	r7, sp, #0
   22482:	6078      	str	r0, [r7, #4]
    reply->commandType = 0;
   22484:	687b      	ldr	r3, [r7, #4]
   22486:	2200      	movs	r2, #0
   22488:	70da      	strb	r2, [r3, #3]
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   2248a:	687b      	ldr	r3, [r7, #4]
   2248c:	2200      	movs	r2, #0
   2248e:	701a      	strb	r2, [r3, #0]
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
   22490:	687b      	ldr	r3, [r7, #4]
   22492:	2200      	movs	r2, #0
   22494:	705a      	strb	r2, [r3, #1]
   22496:	687b      	ldr	r3, [r7, #4]
   22498:	785a      	ldrb	r2, [r3, #1]
   2249a:	687b      	ldr	r3, [r7, #4]
   2249c:	709a      	strb	r2, [r3, #2]
    bb_init(&reply->data);
   2249e:	687b      	ldr	r3, [r7, #4]
   224a0:	3304      	adds	r3, #4
   224a2:	4618      	mov	r0, r3
   224a4:	f7e0 fc20 	bl	2ce8 <bb_init>
    reply->complete = 0;
   224a8:	687b      	ldr	r3, [r7, #4]
   224aa:	2200      	movs	r2, #0
   224ac:	741a      	strb	r2, [r3, #16]
    var_init(&reply->dataValue);
   224ae:	687b      	ldr	r3, [r7, #4]
   224b0:	3318      	adds	r3, #24
   224b2:	4618      	mov	r0, r3
   224b4:	f003 fe38 	bl	26128 <var_init>
    reply->totalCount = 0;
   224b8:	687b      	ldr	r3, [r7, #4]
   224ba:	2200      	movs	r2, #0
   224bc:	851a      	strh	r2, [r3, #40]	; 0x28
    reply->readPosition = 0;
   224be:	687b      	ldr	r3, [r7, #4]
   224c0:	2200      	movs	r2, #0
   224c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    reply->packetLength = 0;
   224c4:	687b      	ldr	r3, [r7, #4]
   224c6:	2200      	movs	r2, #0
   224c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    reply->peek = 0;
   224ca:	687b      	ldr	r3, [r7, #4]
   224cc:	2200      	movs	r2, #0
   224ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    reply->dataType = DLMS_DATA_TYPE_NONE;
   224d2:	687b      	ldr	r3, [r7, #4]
   224d4:	2200      	movs	r2, #0
   224d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reply->gbt = 0;
   224da:	687b      	ldr	r3, [r7, #4]
   224dc:	2200      	movs	r2, #0
   224de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    reply->cipherIndex = 0;
   224e2:	687b      	ldr	r3, [r7, #4]
   224e4:	2200      	movs	r2, #0
   224e6:	865a      	strh	r2, [r3, #50]	; 0x32
    reply->time = NULL;
   224e8:	687b      	ldr	r3, [r7, #4]
   224ea:	2200      	movs	r2, #0
   224ec:	635a      	str	r2, [r3, #52]	; 0x34
    reply->preEstablished = 0;
   224ee:	687b      	ldr	r3, [r7, #4]
   224f0:	2200      	movs	r2, #0
   224f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
   224f6:	bf00      	nop
   224f8:	3708      	adds	r7, #8
   224fa:	46bd      	mov	sp, r7
   224fc:	bd80      	pop	{r7, pc}
   224fe:	bf00      	nop

00022500 <reply_clear2>:

void reply_clear2(gxReplyData* reply, unsigned char clearData)
{
   22500:	b580      	push	{r7, lr}
   22502:	b082      	sub	sp, #8
   22504:	af00      	add	r7, sp, #0
   22506:	6078      	str	r0, [r7, #4]
   22508:	460b      	mov	r3, r1
   2250a:	70fb      	strb	r3, [r7, #3]
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   2250c:	687b      	ldr	r3, [r7, #4]
   2250e:	2200      	movs	r2, #0
   22510:	701a      	strb	r2, [r3, #0]
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
   22512:	687b      	ldr	r3, [r7, #4]
   22514:	2200      	movs	r2, #0
   22516:	705a      	strb	r2, [r3, #1]
   22518:	687b      	ldr	r3, [r7, #4]
   2251a:	785a      	ldrb	r2, [r3, #1]
   2251c:	687b      	ldr	r3, [r7, #4]
   2251e:	709a      	strb	r2, [r3, #2]
    if (clearData)
   22520:	78fb      	ldrb	r3, [r7, #3]
   22522:	2b00      	cmp	r3, #0
   22524:	d008      	beq.n	22538 <reply_clear2+0x38>
    {
        bb_clear(&reply->data);
   22526:	687b      	ldr	r3, [r7, #4]
   22528:	3304      	adds	r3, #4
   2252a:	4618      	mov	r0, r3
   2252c:	f7e1 f91a 	bl	3764 <bb_clear>
        reply->preEstablished = 0;
   22530:	687b      	ldr	r3, [r7, #4]
   22532:	2200      	movs	r2, #0
   22534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    reply->complete = 0;
   22538:	687b      	ldr	r3, [r7, #4]
   2253a:	2200      	movs	r2, #0
   2253c:	741a      	strb	r2, [r3, #16]
    var_clear(&reply->dataValue);
   2253e:	687b      	ldr	r3, [r7, #4]
   22540:	3318      	adds	r3, #24
   22542:	4618      	mov	r0, r3
   22544:	f003 fe00 	bl	26148 <var_clear>
    reply->totalCount = 0;
   22548:	687b      	ldr	r3, [r7, #4]
   2254a:	2200      	movs	r2, #0
   2254c:	851a      	strh	r2, [r3, #40]	; 0x28
    reply->readPosition = 0;
   2254e:	687b      	ldr	r3, [r7, #4]
   22550:	2200      	movs	r2, #0
   22552:	855a      	strh	r2, [r3, #42]	; 0x2a
    reply->packetLength = 0;
   22554:	687b      	ldr	r3, [r7, #4]
   22556:	2200      	movs	r2, #0
   22558:	859a      	strh	r2, [r3, #44]	; 0x2c
    reply->peek = 0;
   2255a:	687b      	ldr	r3, [r7, #4]
   2255c:	2200      	movs	r2, #0
   2255e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    reply->dataType = DLMS_DATA_TYPE_NONE;
   22562:	687b      	ldr	r3, [r7, #4]
   22564:	2200      	movs	r2, #0
   22566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reply->gbt = 0;
   2256a:	687b      	ldr	r3, [r7, #4]
   2256c:	2200      	movs	r2, #0
   2256e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    reply->cipherIndex = 0;
   22572:	687b      	ldr	r3, [r7, #4]
   22574:	2200      	movs	r2, #0
   22576:	865a      	strh	r2, [r3, #50]	; 0x32
    if (reply->time != NULL)
   22578:	687b      	ldr	r3, [r7, #4]
   2257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2257c:	2b00      	cmp	r3, #0
   2257e:	d007      	beq.n	22590 <reply_clear2+0x90>
    {
        gxfree(reply->time);
   22580:	687b      	ldr	r3, [r7, #4]
   22582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   22584:	4618      	mov	r0, r3
   22586:	f007 fa65 	bl	29a54 <free>
        reply->time = NULL;
   2258a:	687b      	ldr	r3, [r7, #4]
   2258c:	2200      	movs	r2, #0
   2258e:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
   22590:	bf00      	nop
   22592:	3708      	adds	r7, #8
   22594:	46bd      	mov	sp, r7
   22596:	bd80      	pop	{r7, pc}

00022598 <svr_copyAssociationView>:
    gxByteBuffer* data);
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME

//Copy association view.
void svr_copyAssociationView(objectArray *target, objectArray* source)
{
   22598:	b580      	push	{r7, lr}
   2259a:	b084      	sub	sp, #16
   2259c:	af00      	add	r7, sp, #0
   2259e:	6078      	str	r0, [r7, #4]
   225a0:	6039      	str	r1, [r7, #0]
    unsigned short cnt = 0, pos;
   225a2:	2300      	movs	r3, #0
   225a4:	81fb      	strh	r3, [r7, #14]
    oa_clear(target);
   225a6:	6878      	ldr	r0, [r7, #4]
   225a8:	f7ff fdd2 	bl	22150 <oa_clear>
    oa_capacity(target, source->size);
   225ac:	683b      	ldr	r3, [r7, #0]
   225ae:	88db      	ldrh	r3, [r3, #6]
   225b0:	4619      	mov	r1, r3
   225b2:	6878      	ldr	r0, [r7, #4]
   225b4:	f7ff fd02 	bl	21fbc <oa_capacity>
    for (pos = 0; pos != source->size; ++pos)
   225b8:	2300      	movs	r3, #0
   225ba:	81bb      	strh	r3, [r7, #12]
   225bc:	e023      	b.n	22606 <svr_copyAssociationView+0x6e>
    {
        if (source->data[pos]->objectType != DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME &&
   225be:	683b      	ldr	r3, [r7, #0]
   225c0:	681a      	ldr	r2, [r3, #0]
   225c2:	89bb      	ldrh	r3, [r7, #12]
   225c4:	009b      	lsls	r3, r3, #2
   225c6:	4413      	add	r3, r2
   225c8:	681b      	ldr	r3, [r3, #0]
   225ca:	781b      	ldrb	r3, [r3, #0]
   225cc:	2b0c      	cmp	r3, #12
   225ce:	d017      	beq.n	22600 <svr_copyAssociationView+0x68>
            source->data[pos]->objectType != DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
   225d0:	683b      	ldr	r3, [r7, #0]
   225d2:	681a      	ldr	r2, [r3, #0]
   225d4:	89bb      	ldrh	r3, [r7, #12]
   225d6:	009b      	lsls	r3, r3, #2
   225d8:	4413      	add	r3, r2
   225da:	681b      	ldr	r3, [r3, #0]
   225dc:	781b      	ldrb	r3, [r3, #0]
    unsigned short cnt = 0, pos;
    oa_clear(target);
    oa_capacity(target, source->size);
    for (pos = 0; pos != source->size; ++pos)
    {
        if (source->data[pos]->objectType != DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME &&
   225de:	2b0f      	cmp	r3, #15
   225e0:	d00e      	beq.n	22600 <svr_copyAssociationView+0x68>
            source->data[pos]->objectType != DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
        {
            target->data[cnt] = source->data[pos];
   225e2:	687b      	ldr	r3, [r7, #4]
   225e4:	681a      	ldr	r2, [r3, #0]
   225e6:	89fb      	ldrh	r3, [r7, #14]
   225e8:	009b      	lsls	r3, r3, #2
   225ea:	4413      	add	r3, r2
   225ec:	683a      	ldr	r2, [r7, #0]
   225ee:	6811      	ldr	r1, [r2, #0]
   225f0:	89ba      	ldrh	r2, [r7, #12]
   225f2:	0092      	lsls	r2, r2, #2
   225f4:	440a      	add	r2, r1
   225f6:	6812      	ldr	r2, [r2, #0]
   225f8:	601a      	str	r2, [r3, #0]
            ++cnt;
   225fa:	89fb      	ldrh	r3, [r7, #14]
   225fc:	3301      	adds	r3, #1
   225fe:	81fb      	strh	r3, [r7, #14]
void svr_copyAssociationView(objectArray *target, objectArray* source)
{
    unsigned short cnt = 0, pos;
    oa_clear(target);
    oa_capacity(target, source->size);
    for (pos = 0; pos != source->size; ++pos)
   22600:	89bb      	ldrh	r3, [r7, #12]
   22602:	3301      	adds	r3, #1
   22604:	81bb      	strh	r3, [r7, #12]
   22606:	683b      	ldr	r3, [r7, #0]
   22608:	88db      	ldrh	r3, [r3, #6]
   2260a:	89ba      	ldrh	r2, [r7, #12]
   2260c:	429a      	cmp	r2, r3
   2260e:	d1d6      	bne.n	225be <svr_copyAssociationView+0x26>
        {
            target->data[cnt] = source->data[pos];
            ++cnt;
        }
    }
    target->size = cnt;
   22610:	687b      	ldr	r3, [r7, #4]
   22612:	89fa      	ldrh	r2, [r7, #14]
   22614:	80da      	strh	r2, [r3, #6]
}
   22616:	bf00      	nop
   22618:	3710      	adds	r7, #16
   2261a:	46bd      	mov	sp, r7
   2261c:	bd80      	pop	{r7, pc}
   2261e:	bf00      	nop

00022620 <svr_initialize>:

int svr_initialize(
    dlmsServerSettings* settings)
{
   22620:	b580      	push	{r7, lr}
   22622:	b08e      	sub	sp, #56	; 0x38
   22624:	af00      	add	r7, sp, #0
   22626:	6078      	str	r0, [r7, #4]
    unsigned short pos;
    int ret;
    gxObject* associationObject = NULL, *it;
   22628:	2300      	movs	r3, #0
   2262a:	633b      	str	r3, [r7, #48]	; 0x30
    settings->initialized = 1;
   2262c:	687b      	ldr	r3, [r7, #4]
   2262e:	2201      	movs	r2, #1
   22630:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    if (settings->base.maxPduSize < 64)
   22634:	687b      	ldr	r3, [r7, #4]
   22636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   2263a:	2b3f      	cmp	r3, #63	; 0x3f
   2263c:	d802      	bhi.n	22644 <svr_initialize+0x24>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2263e:	f44f 7381 	mov.w	r3, #258	; 0x102
   22642:	e0c6      	b.n	227d2 <svr_initialize+0x1b2>
    }
    for (pos = 0; pos != settings->base.objects.size; ++pos)
   22644:	2300      	movs	r3, #0
   22646:	86fb      	strh	r3, [r7, #54]	; 0x36
   22648:	e064      	b.n	22714 <svr_initialize+0xf4>
    {
        if ((ret = oa_getByIndex(&settings->base.objects, pos, &it)) != 0)
   2264a:	687b      	ldr	r3, [r7, #4]
   2264c:	3374      	adds	r3, #116	; 0x74
   2264e:	f107 0214 	add.w	r2, r7, #20
   22652:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
   22654:	4618      	mov	r0, r3
   22656:	f7ff fdf3 	bl	22240 <oa_getByIndex>
   2265a:	62f8      	str	r0, [r7, #44]	; 0x2c
   2265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2265e:	2b00      	cmp	r3, #0
   22660:	d001      	beq.n	22666 <svr_initialize+0x46>
        {
            return ret;
   22662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22664:	e0b5      	b.n	227d2 <svr_initialize+0x1b2>
        }
        if (it->logicalName == NULL)
   22666:	697b      	ldr	r3, [r7, #20]
   22668:	3306      	adds	r3, #6
   2266a:	2b00      	cmp	r3, #0
   2266c:	d102      	bne.n	22674 <svr_initialize+0x54>
        {
            //Invalid Logical Name.
            return DLMS_ERROR_CODE_INVALID_LOGICAL_NAME;
   2266e:	f44f 7383 	mov.w	r3, #262	; 0x106
   22672:	e0ae      	b.n	227d2 <svr_initialize+0x1b2>
        }
        if (it->objectType == DLMS_OBJECT_TYPE_PROFILE_GENERIC)
   22674:	697b      	ldr	r3, [r7, #20]
   22676:	781b      	ldrb	r3, [r3, #0]
   22678:	2b07      	cmp	r3, #7
   2267a:	d108      	bne.n	2268e <svr_initialize+0x6e>
        {
#ifndef DLMS_IGNORE_PROFILE_GENERIC
            gxProfileGeneric* pg = (gxProfileGeneric*)it;
   2267c:	697b      	ldr	r3, [r7, #20]
   2267e:	62bb      	str	r3, [r7, #40]	; 0x28
            if (pg->profileEntries < 1)
   22680:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22684:	2b00      	cmp	r3, #0
   22686:	d142      	bne.n	2270e <svr_initialize+0xee>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   22688:	f44f 7381 	mov.w	r3, #258	; 0x102
   2268c:	e0a1      	b.n	227d2 <svr_initialize+0x1b2>
            }
#endif //DLMS_IGNORE_PROFILE_GENERIC
        }
        else if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME
   2268e:	697b      	ldr	r3, [r7, #20]
   22690:	781b      	ldrb	r3, [r3, #0]
   22692:	2b0c      	cmp	r3, #12
   22694:	d114      	bne.n	226c0 <svr_initialize+0xa0>
            && !settings->base.useLogicalNameReferencing)
   22696:	687b      	ldr	r3, [r7, #4]
   22698:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   2269c:	2b00      	cmp	r3, #0
   2269e:	d10f      	bne.n	226c0 <svr_initialize+0xa0>
        {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            objectArray* list = &((gxAssociationShortName*)it)->objectList;
   226a0:	697b      	ldr	r3, [r7, #20]
   226a2:	3310      	adds	r3, #16
   226a4:	627b      	str	r3, [r7, #36]	; 0x24
            if (list->size == 0)
   226a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   226a8:	88db      	ldrh	r3, [r3, #6]
   226aa:	2b00      	cmp	r3, #0
   226ac:	d105      	bne.n	226ba <svr_initialize+0x9a>
            {
                svr_copyAssociationView(list, &settings->base.objects);
   226ae:	687b      	ldr	r3, [r7, #4]
   226b0:	3374      	adds	r3, #116	; 0x74
   226b2:	4619      	mov	r1, r3
   226b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   226b6:	f7ff ff6f 	bl	22598 <svr_copyAssociationView>
            }
            associationObject = it;
   226ba:	697b      	ldr	r3, [r7, #20]
   226bc:	633b      	str	r3, [r7, #48]	; 0x30
            }
#endif //DLMS_IGNORE_PROFILE_GENERIC
        }
        else if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME
            && !settings->base.useLogicalNameReferencing)
        {
   226be:	e026      	b.n	2270e <svr_initialize+0xee>
                svr_copyAssociationView(list, &settings->base.objects);
            }
            associationObject = it;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        }
        else if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME
   226c0:	697b      	ldr	r3, [r7, #20]
   226c2:	781b      	ldrb	r3, [r3, #0]
   226c4:	2b0f      	cmp	r3, #15
   226c6:	d122      	bne.n	2270e <svr_initialize+0xee>
            && settings->base.useLogicalNameReferencing)
   226c8:	687b      	ldr	r3, [r7, #4]
   226ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   226ce:	2b00      	cmp	r3, #0
   226d0:	d01d      	beq.n	2270e <svr_initialize+0xee>
        {
            gxAssociationLogicalName *ln = (gxAssociationLogicalName*)it;
   226d2:	697b      	ldr	r3, [r7, #20]
   226d4:	623b      	str	r3, [r7, #32]
            objectArray* list = &ln->objectList;
   226d6:	6a3b      	ldr	r3, [r7, #32]
   226d8:	3314      	adds	r3, #20
   226da:	61fb      	str	r3, [r7, #28]
            if (list->size == 0)
   226dc:	69fb      	ldr	r3, [r7, #28]
   226de:	88db      	ldrh	r3, [r3, #6]
   226e0:	2b00      	cmp	r3, #0
   226e2:	d105      	bne.n	226f0 <svr_initialize+0xd0>
            {
                svr_copyAssociationView(list, &settings->base.objects);
   226e4:	687b      	ldr	r3, [r7, #4]
   226e6:	3374      	adds	r3, #116	; 0x74
   226e8:	4619      	mov	r1, r3
   226ea:	69f8      	ldr	r0, [r7, #28]
   226ec:	f7ff ff54 	bl	22598 <svr_copyAssociationView>
            }
            associationObject = it;
   226f0:	697b      	ldr	r3, [r7, #20]
   226f2:	633b      	str	r3, [r7, #48]	; 0x30
            ln->xDLMSContextInfo.maxReceivePduSize = ln->xDLMSContextInfo.maxSendPpuSize = settings->base.maxServerPDUSize;
   226f4:	687b      	ldr	r3, [r7, #4]
   226f6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
   226fa:	6a3b      	ldr	r3, [r7, #32]
   226fc:	875a      	strh	r2, [r3, #58]	; 0x3a
   226fe:	6a3b      	ldr	r3, [r7, #32]
   22700:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   22702:	6a3b      	ldr	r3, [r7, #32]
   22704:	871a      	strh	r2, [r3, #56]	; 0x38
            ln->xDLMSContextInfo.conformance = settings->base.proposedConformance;
   22706:	687b      	ldr	r3, [r7, #4]
   22708:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2270a:	6a3b      	ldr	r3, [r7, #32]
   2270c:	635a      	str	r2, [r3, #52]	; 0x34
    settings->initialized = 1;
    if (settings->base.maxPduSize < 64)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    for (pos = 0; pos != settings->base.objects.size; ++pos)
   2270e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   22710:	3301      	adds	r3, #1
   22712:	86fb      	strh	r3, [r7, #54]	; 0x36
   22714:	687b      	ldr	r3, [r7, #4]
   22716:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
   2271a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   2271c:	429a      	cmp	r2, r3
   2271e:	d194      	bne.n	2264a <svr_initialize+0x2a>
            associationObject = it;
            ln->xDLMSContextInfo.maxReceivePduSize = ln->xDLMSContextInfo.maxSendPpuSize = settings->base.maxServerPDUSize;
            ln->xDLMSContextInfo.conformance = settings->base.proposedConformance;
        }
    }
    if (associationObject == NULL)
   22720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22722:	2b00      	cmp	r3, #0
   22724:	d149      	bne.n	227ba <svr_initialize+0x19a>
    {
        objectArray* list;
        if (settings->base.useLogicalNameReferencing)
   22726:	687b      	ldr	r3, [r7, #4]
   22728:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   2272c:	2b00      	cmp	r3, #0
   2272e:	d028      	beq.n	22782 <svr_initialize+0x162>
        {
            gxAssociationLogicalName* ln;
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, (gxObject**)&ln)) != 0)
   22730:	f107 0310 	add.w	r3, r7, #16
   22734:	4619      	mov	r1, r3
   22736:	200f      	movs	r0, #15
   22738:	f7e3 fb26 	bl	5d88 <cosem_createObject>
   2273c:	62f8      	str	r0, [r7, #44]	; 0x2c
   2273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22740:	2b00      	cmp	r3, #0
   22742:	d001      	beq.n	22748 <svr_initialize+0x128>
            {
                return ret;
   22744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22746:	e044      	b.n	227d2 <svr_initialize+0x1b2>
            }
            ln->xDLMSContextInfo.maxReceivePduSize = ln->xDLMSContextInfo.maxSendPpuSize = settings->base.maxServerPDUSize;
   22748:	693a      	ldr	r2, [r7, #16]
   2274a:	693b      	ldr	r3, [r7, #16]
   2274c:	6879      	ldr	r1, [r7, #4]
   2274e:	f8b1 105e 	ldrh.w	r1, [r1, #94]	; 0x5e
   22752:	8759      	strh	r1, [r3, #58]	; 0x3a
   22754:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   22756:	8713      	strh	r3, [r2, #56]	; 0x38
            ln->xDLMSContextInfo.conformance = settings->base.proposedConformance;
   22758:	693b      	ldr	r3, [r7, #16]
   2275a:	687a      	ldr	r2, [r7, #4]
   2275c:	6e52      	ldr	r2, [r2, #100]	; 0x64
   2275e:	635a      	str	r2, [r3, #52]	; 0x34
            list = &((gxAssociationLogicalName*)ln)->objectList;
   22760:	693b      	ldr	r3, [r7, #16]
   22762:	3314      	adds	r3, #20
   22764:	61bb      	str	r3, [r7, #24]
            oa_push(&settings->base.objects, (gxObject*)ln);
   22766:	687b      	ldr	r3, [r7, #4]
   22768:	3374      	adds	r3, #116	; 0x74
   2276a:	693a      	ldr	r2, [r7, #16]
   2276c:	4611      	mov	r1, r2
   2276e:	4618      	mov	r0, r3
   22770:	f7ff fc6e 	bl	22050 <oa_push>
            oa_copy(list, &settings->base.objects);
   22774:	687b      	ldr	r3, [r7, #4]
   22776:	3374      	adds	r3, #116	; 0x74
   22778:	4619      	mov	r1, r3
   2277a:	69b8      	ldr	r0, [r7, #24]
   2277c:	f7ff fcba 	bl	220f4 <oa_copy>
   22780:	e01b      	b.n	227ba <svr_initialize+0x19a>
        }
        else
        {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
            gxAssociationShortName* it2;
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME, (gxObject**)&it2)) != 0)
   22782:	f107 030c 	add.w	r3, r7, #12
   22786:	4619      	mov	r1, r3
   22788:	200c      	movs	r0, #12
   2278a:	f7e3 fafd 	bl	5d88 <cosem_createObject>
   2278e:	62f8      	str	r0, [r7, #44]	; 0x2c
   22790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22792:	2b00      	cmp	r3, #0
   22794:	d001      	beq.n	2279a <svr_initialize+0x17a>
            {
                return ret;
   22796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22798:	e01b      	b.n	227d2 <svr_initialize+0x1b2>
            }
            list = &((gxAssociationShortName*)it2)->objectList;
   2279a:	68fb      	ldr	r3, [r7, #12]
   2279c:	3310      	adds	r3, #16
   2279e:	61bb      	str	r3, [r7, #24]
            oa_push(&settings->base.objects, (gxObject*)it2);
   227a0:	687b      	ldr	r3, [r7, #4]
   227a2:	3374      	adds	r3, #116	; 0x74
   227a4:	68fa      	ldr	r2, [r7, #12]
   227a6:	4611      	mov	r1, r2
   227a8:	4618      	mov	r0, r3
   227aa:	f7ff fc51 	bl	22050 <oa_push>
            oa_copy(list, &settings->base.objects);
   227ae:	687b      	ldr	r3, [r7, #4]
   227b0:	3374      	adds	r3, #116	; 0x74
   227b2:	4619      	mov	r1, r3
   227b4:	69b8      	ldr	r0, [r7, #24]
   227b6:	f7ff fc9d 	bl	220f4 <oa_copy>
#endif // DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        }
    }
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    // Arrange items by Short Name.
    if (!settings->base.useLogicalNameReferencing)
   227ba:	687b      	ldr	r3, [r7, #4]
   227bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   227c0:	2b00      	cmp	r3, #0
   227c2:	d105      	bne.n	227d0 <svr_initialize+0x1b0>
    {
        return svr_updateShortNames(settings, 0);
   227c4:	2100      	movs	r1, #0
   227c6:	6878      	ldr	r0, [r7, #4]
   227c8:	f000 f808 	bl	227dc <svr_updateShortNames>
   227cc:	4603      	mov	r3, r0
   227ce:	e000      	b.n	227d2 <svr_initialize+0x1b2>
    }
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    return 0;
   227d0:	2300      	movs	r3, #0
}
   227d2:	4618      	mov	r0, r3
   227d4:	3738      	adds	r7, #56	; 0x38
   227d6:	46bd      	mov	sp, r7
   227d8:	bd80      	pop	{r7, pc}
   227da:	bf00      	nop

000227dc <svr_updateShortNames>:

#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int svr_updateShortNames(
    dlmsServerSettings* settings,
    unsigned char force)
{
   227dc:	b590      	push	{r4, r7, lr}
   227de:	b087      	sub	sp, #28
   227e0:	af00      	add	r7, sp, #0
   227e2:	6078      	str	r0, [r7, #4]
   227e4:	460b      	mov	r3, r1
   227e6:	70fb      	strb	r3, [r7, #3]
    gxObject *it;
    unsigned short sn = 0xA0;
   227e8:	23a0      	movs	r3, #160	; 0xa0
   227ea:	82fb      	strh	r3, [r7, #22]
    unsigned short pos;
    int ret;
    unsigned char offset, count;
    for (pos = 0; pos != settings->base.objects.size; ++pos)
   227ec:	2300      	movs	r3, #0
   227ee:	82bb      	strh	r3, [r7, #20]
   227f0:	e05b      	b.n	228aa <svr_updateShortNames+0xce>
    {
        if ((ret = oa_getByIndex(&settings->base.objects, pos, (gxObject**)&it)) != 0)
   227f2:	687b      	ldr	r3, [r7, #4]
   227f4:	3374      	adds	r3, #116	; 0x74
   227f6:	f107 020c 	add.w	r2, r7, #12
   227fa:	8ab9      	ldrh	r1, [r7, #20]
   227fc:	4618      	mov	r0, r3
   227fe:	f7ff fd1f 	bl	22240 <oa_getByIndex>
   22802:	6138      	str	r0, [r7, #16]
   22804:	693b      	ldr	r3, [r7, #16]
   22806:	2b00      	cmp	r3, #0
   22808:	d001      	beq.n	2280e <svr_updateShortNames+0x32>
        {
            return ret;
   2280a:	693b      	ldr	r3, [r7, #16]
   2280c:	e054      	b.n	228b8 <svr_updateShortNames+0xdc>
        }
        if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME ||
   2280e:	68fb      	ldr	r3, [r7, #12]
   22810:	781b      	ldrb	r3, [r3, #0]
   22812:	2b0f      	cmp	r3, #15
   22814:	d045      	beq.n	228a2 <svr_updateShortNames+0xc6>
            it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
   22816:	68fb      	ldr	r3, [r7, #12]
   22818:	781b      	ldrb	r3, [r3, #0]
    {
        if ((ret = oa_getByIndex(&settings->base.objects, pos, (gxObject**)&it)) != 0)
        {
            return ret;
        }
        if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME ||
   2281a:	2b0c      	cmp	r3, #12
   2281c:	d041      	beq.n	228a2 <svr_updateShortNames+0xc6>
            it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
        {
            continue;
        }
        // Generate Short Name if not given.
        if (force != 0 || it->shortName == 0)
   2281e:	78fb      	ldrb	r3, [r7, #3]
   22820:	2b00      	cmp	r3, #0
   22822:	d103      	bne.n	2282c <svr_updateShortNames+0x50>
   22824:	68fb      	ldr	r3, [r7, #12]
   22826:	889b      	ldrh	r3, [r3, #4]
   22828:	2b00      	cmp	r3, #0
   2282a:	d12d      	bne.n	22888 <svr_updateShortNames+0xac>
        {
            it->shortName = sn;
   2282c:	68fb      	ldr	r3, [r7, #12]
   2282e:	8afa      	ldrh	r2, [r7, #22]
   22830:	809a      	strh	r2, [r3, #4]
            // Add method index addresses.
            if ((ret = dlms_getActionInfo((DLMS_OBJECT_TYPE)it->objectType, &offset, &count)) != 0)
   22832:	68fb      	ldr	r3, [r7, #12]
   22834:	781b      	ldrb	r3, [r3, #0]
   22836:	b29b      	uxth	r3, r3
   22838:	f107 020a 	add.w	r2, r7, #10
   2283c:	f107 010b 	add.w	r1, r7, #11
   22840:	4618      	mov	r0, r3
   22842:	f7e8 fd89 	bl	b358 <dlms_getActionInfo>
   22846:	6138      	str	r0, [r7, #16]
   22848:	693b      	ldr	r3, [r7, #16]
   2284a:	2b00      	cmp	r3, #0
   2284c:	d001      	beq.n	22852 <svr_updateShortNames+0x76>
            {
                return ret;
   2284e:	693b      	ldr	r3, [r7, #16]
   22850:	e032      	b.n	228b8 <svr_updateShortNames+0xdc>
            }
            if (count != 0)
   22852:	7abb      	ldrb	r3, [r7, #10]
   22854:	2b00      	cmp	r3, #0
   22856:	d00b      	beq.n	22870 <svr_updateShortNames+0x94>
            {
                sn += offset + (8 * count);
   22858:	7afb      	ldrb	r3, [r7, #11]
   2285a:	b29a      	uxth	r2, r3
   2285c:	7abb      	ldrb	r3, [r7, #10]
   2285e:	b29b      	uxth	r3, r3
   22860:	00db      	lsls	r3, r3, #3
   22862:	b29b      	uxth	r3, r3
   22864:	4413      	add	r3, r2
   22866:	b29a      	uxth	r2, r3
   22868:	8afb      	ldrh	r3, [r7, #22]
   2286a:	4413      	add	r3, r2
   2286c:	82fb      	strh	r3, [r7, #22]
            // Add method index addresses.
            if ((ret = dlms_getActionInfo((DLMS_OBJECT_TYPE)it->objectType, &offset, &count)) != 0)
            {
                return ret;
            }
            if (count != 0)
   2286e:	e019      	b.n	228a4 <svr_updateShortNames+0xc8>
            }
            else
            {
                // If there are no methods.
                // Add attribute index addresses.
                sn += (unsigned short)(8 * obj_attributeCount(it));
   22870:	68fb      	ldr	r3, [r7, #12]
   22872:	4618      	mov	r0, r3
   22874:	f7f5 f90e 	bl	17a94 <obj_attributeCount>
   22878:	4603      	mov	r3, r0
   2287a:	b29b      	uxth	r3, r3
   2287c:	00db      	lsls	r3, r3, #3
   2287e:	b29a      	uxth	r2, r3
   22880:	8afb      	ldrh	r3, [r7, #22]
   22882:	4413      	add	r3, r2
   22884:	82fb      	strh	r3, [r7, #22]
            // Add method index addresses.
            if ((ret = dlms_getActionInfo((DLMS_OBJECT_TYPE)it->objectType, &offset, &count)) != 0)
            {
                return ret;
            }
            if (count != 0)
   22886:	e00d      	b.n	228a4 <svr_updateShortNames+0xc8>
                sn += (unsigned short)(8 * obj_attributeCount(it));
            }
        }
        else
        {
            sn = (unsigned short)(it->shortName + (8 * obj_attributeCount(it)));
   22888:	68fb      	ldr	r3, [r7, #12]
   2288a:	889c      	ldrh	r4, [r3, #4]
   2288c:	68fb      	ldr	r3, [r7, #12]
   2288e:	4618      	mov	r0, r3
   22890:	f7f5 f900 	bl	17a94 <obj_attributeCount>
   22894:	4603      	mov	r3, r0
   22896:	b29b      	uxth	r3, r3
   22898:	00db      	lsls	r3, r3, #3
   2289a:	b29b      	uxth	r3, r3
   2289c:	4423      	add	r3, r4
   2289e:	82fb      	strh	r3, [r7, #22]
   228a0:	e000      	b.n	228a4 <svr_updateShortNames+0xc8>
            return ret;
        }
        if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME ||
            it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
        {
            continue;
   228a2:	bf00      	nop
    gxObject *it;
    unsigned short sn = 0xA0;
    unsigned short pos;
    int ret;
    unsigned char offset, count;
    for (pos = 0; pos != settings->base.objects.size; ++pos)
   228a4:	8abb      	ldrh	r3, [r7, #20]
   228a6:	3301      	adds	r3, #1
   228a8:	82bb      	strh	r3, [r7, #20]
   228aa:	687b      	ldr	r3, [r7, #4]
   228ac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
   228b0:	8aba      	ldrh	r2, [r7, #20]
   228b2:	429a      	cmp	r2, r3
   228b4:	d19d      	bne.n	227f2 <svr_updateShortNames+0x16>
        else
        {
            sn = (unsigned short)(it->shortName + (8 * obj_attributeCount(it)));
        }
    }
    return 0;
   228b6:	2300      	movs	r3, #0
}
   228b8:	4618      	mov	r0, r3
   228ba:	371c      	adds	r7, #28
   228bc:	46bd      	mov	sp, r7
   228be:	bd90      	pop	{r4, r7, pc}

000228c0 <svr_setInitialize>:
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME


void svr_setInitialize(dlmsServerSettings* settings)
{
   228c0:	b580      	push	{r7, lr}
   228c2:	b082      	sub	sp, #8
   228c4:	af00      	add	r7, sp, #0
   228c6:	6078      	str	r0, [r7, #4]
    if (settings->base.protocolVersion != NULL)
   228c8:	687b      	ldr	r3, [r7, #4]
   228ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   228ce:	2b00      	cmp	r3, #0
   228d0:	d009      	beq.n	228e6 <svr_setInitialize+0x26>
    {
        gxfree(settings->base.protocolVersion);
   228d2:	687b      	ldr	r3, [r7, #4]
   228d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   228d8:	4618      	mov	r0, r3
   228da:	f007 f8bb 	bl	29a54 <free>
        settings->base.protocolVersion = NULL;
   228de:	687b      	ldr	r3, [r7, #4]
   228e0:	2200      	movs	r2, #0
   228e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    }
#ifndef DLMS_IGNORE_HIGH_GMAC
    if (settings->base.cipher.dedicatedKey != NULL)
   228e6:	687b      	ldr	r3, [r7, #4]
   228e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   228ec:	2b00      	cmp	r3, #0
   228ee:	d009      	beq.n	22904 <svr_setInitialize+0x44>
    {
        bb_clear(settings->base.cipher.dedicatedKey);
   228f0:	687b      	ldr	r3, [r7, #4]
   228f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   228f6:	4618      	mov	r0, r3
   228f8:	f7e0 ff34 	bl	3764 <bb_clear>
        settings->base.cipher.dedicatedKey = NULL;
   228fc:	687b      	ldr	r3, [r7, #4]
   228fe:	2200      	movs	r2, #0
   22900:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    trans_clear(&settings->transaction);
   22904:	687b      	ldr	r3, [r7, #4]
   22906:	f503 738a 	add.w	r3, r3, #276	; 0x114
   2290a:	4618      	mov	r0, r3
   2290c:	f7e9 fb4c 	bl	bfa8 <trans_clear>
    settings->base.blockIndex = 1;
   22910:	687b      	ldr	r3, [r7, #4]
   22912:	2201      	movs	r2, #1
   22914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    settings->base.count = 0;
   22918:	687b      	ldr	r3, [r7, #4]
   2291a:	2200      	movs	r2, #0
   2291c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    settings->base.index = 0;
   22920:	687b      	ldr	r3, [r7, #4]
   22922:	2200      	movs	r2, #0
   22924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    settings->base.connected = DLMS_CONNECTION_STATE_NONE;
   22928:	687b      	ldr	r3, [r7, #4]
   2292a:	2200      	movs	r2, #0
   2292c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    settings->base.authentication = DLMS_AUTHENTICATION_NONE;
   22930:	687b      	ldr	r3, [r7, #4]
   22932:	2200      	movs	r2, #0
   22934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    settings->base.isAuthenticationRequired = 0;
   22938:	687b      	ldr	r3, [r7, #4]
   2293a:	2200      	movs	r2, #0
   2293c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
#ifndef DLMS_IGNORE_HIGH_GMAC
    settings->base.cipher.invocationCounter = 1;
   22940:	687b      	ldr	r3, [r7, #4]
   22942:	2201      	movs	r2, #1
   22944:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    settings->base.cipher.security = DLMS_SECURITY_NONE;
   22948:	687b      	ldr	r3, [r7, #4]
   2294a:	2200      	movs	r2, #0
   2294c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif //DLMS_IGNORE_HIGH_GMAC
    bb_clear(&settings->base.ctoSChallenge);
   22950:	687b      	ldr	r3, [r7, #4]
   22952:	3304      	adds	r3, #4
   22954:	4618      	mov	r0, r3
   22956:	f7e0 ff05 	bl	3764 <bb_clear>
    bb_clear(&settings->base.stoCChallenge);
   2295a:	687b      	ldr	r3, [r7, #4]
   2295c:	3310      	adds	r3, #16
   2295e:	4618      	mov	r0, r3
   22960:	f7e0 ff00 	bl	3764 <bb_clear>
    bb_clear(&settings->base.sourceSystemTitle);
   22964:	687b      	ldr	r3, [r7, #4]
   22966:	331c      	adds	r3, #28
   22968:	4618      	mov	r0, r3
   2296a:	f7e0 fefb 	bl	3764 <bb_clear>
}
   2296e:	bf00      	nop
   22970:	3708      	adds	r7, #8
   22972:	46bd      	mov	sp, r7
   22974:	bd80      	pop	{r7, pc}
   22976:	bf00      	nop

00022978 <svr_reset>:

void svr_reset(
    dlmsServerSettings* settings)
{
   22978:	b580      	push	{r7, lr}
   2297a:	b082      	sub	sp, #8
   2297c:	af00      	add	r7, sp, #0
   2297e:	6078      	str	r0, [r7, #4]
    svr_setInitialize(settings);
   22980:	6878      	ldr	r0, [r7, #4]
   22982:	f7ff ff9d 	bl	228c0 <svr_setInitialize>
    resetFrameSequence(&settings->base);
   22986:	687b      	ldr	r3, [r7, #4]
   22988:	4618      	mov	r0, r3
   2298a:	f7e9 f9a3 	bl	bcd4 <resetFrameSequence>
    reply_clear2(&settings->info, 1);
   2298e:	687b      	ldr	r3, [r7, #4]
   22990:	33c8      	adds	r3, #200	; 0xc8
   22992:	2101      	movs	r1, #1
   22994:	4618      	mov	r0, r3
   22996:	f7ff fdb3 	bl	22500 <reply_clear2>
    settings->base.serverAddress = 0;
   2299a:	687b      	ldr	r3, [r7, #4]
   2299c:	2200      	movs	r2, #0
   2299e:	869a      	strh	r2, [r3, #52]	; 0x34
    settings->base.clientAddress = 0;
   229a0:	687b      	ldr	r3, [r7, #4]
   229a2:	2200      	movs	r2, #0
   229a4:	865a      	strh	r2, [r3, #50]	; 0x32
    settings->dataReceived = 0;
   229a6:	687b      	ldr	r3, [r7, #4]
   229a8:	2200      	movs	r2, #0
   229aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    settings->frameReceived = 0;
   229ae:	687b      	ldr	r3, [r7, #4]
   229b0:	2200      	movs	r2, #0
   229b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
   229b6:	bf00      	nop
   229b8:	3708      	adds	r7, #8
   229ba:	46bd      	mov	sp, r7
   229bc:	bd80      	pop	{r7, pc}
   229be:	bf00      	nop

000229c0 <svr_HandleAarqRequest>:
    * @return Reply to the client.
    */
int svr_HandleAarqRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   229c0:	b580      	push	{r7, lr}
   229c2:	b0a2      	sub	sp, #136	; 0x88
   229c4:	af02      	add	r7, sp, #8
   229c6:	6078      	str	r0, [r7, #4]
   229c8:	6039      	str	r1, [r7, #0]
    int ret;
    gxByteBuffer error;
    DLMS_ASSOCIATION_RESULT result;
    unsigned char diagnostic;
    // Reset settings for wrapper.
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER)
   229ca:	687b      	ldr	r3, [r7, #4]
   229cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   229d0:	2b01      	cmp	r3, #1
   229d2:	d103      	bne.n	229dc <svr_HandleAarqRequest+0x1c>
    {
        svr_setInitialize(settings);
   229d4:	6878      	ldr	r0, [r7, #4]
   229d6:	f7ff ff73 	bl	228c0 <svr_setInitialize>
   229da:	e003      	b.n	229e4 <svr_HandleAarqRequest+0x24>
    }
    else
    {
        settings->base.cipher.security = DLMS_SECURITY_NONE;
   229dc:	687b      	ldr	r3, [r7, #4]
   229de:	2200      	movs	r2, #0
   229e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }
    //If client is not called SNRM.
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC && (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) == 0)
   229e4:	687b      	ldr	r3, [r7, #4]
   229e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   229ea:	2b00      	cmp	r3, #0
   229ec:	d109      	bne.n	22a02 <svr_HandleAarqRequest+0x42>
   229ee:	687b      	ldr	r3, [r7, #4]
   229f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   229f4:	f003 0301 	and.w	r3, r3, #1
   229f8:	2b00      	cmp	r3, #0
   229fa:	d102      	bne.n	22a02 <svr_HandleAarqRequest+0x42>
    {
        return DLMS_ERROR_CODE_REJECTED;
   229fc:	f06f 0301 	mvn.w	r3, #1
   22a00:	e1a8      	b.n	22d54 <svr_HandleAarqRequest+0x394>
    }

    ret = apdu_parsePDU(&settings->base, data, &result, &diagnostic);
   22a02:	6878      	ldr	r0, [r7, #4]
   22a04:	f107 036e 	add.w	r3, r7, #110	; 0x6e
   22a08:	f107 026f 	add.w	r2, r7, #111	; 0x6f
   22a0c:	6839      	ldr	r1, [r7, #0]
   22a0e:	f7df f969 	bl	1ce4 <apdu_parsePDU>
   22a12:	67f8      	str	r0, [r7, #124]	; 0x7c
    bb_clear(data);
   22a14:	6838      	ldr	r0, [r7, #0]
   22a16:	f7e0 fea5 	bl	3764 <bb_clear>
    bb_init(&error);
   22a1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22a1e:	4618      	mov	r0, r3
   22a20:	f7e0 f962 	bl	2ce8 <bb_init>
    if (ret == 0 && result == DLMS_ASSOCIATION_RESULT_ACCEPTED)
   22a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22a26:	2b00      	cmp	r3, #0
   22a28:	f040 8151 	bne.w	22cce <svr_HandleAarqRequest+0x30e>
   22a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
   22a30:	2b00      	cmp	r3, #0
   22a32:	f040 814c 	bne.w	22cce <svr_HandleAarqRequest+0x30e>
    {
        if (settings->base.dlmsVersionNumber < 6)
   22a36:	687b      	ldr	r3, [r7, #4]
   22a38:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   22a3c:	2b05      	cmp	r3, #5
   22a3e:	d822      	bhi.n	22a86 <svr_HandleAarqRequest+0xc6>
        {
            result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22a40:	2301      	movs	r3, #1
   22a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            diagnostic = DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
   22a46:	2301      	movs	r3, #1
   22a48:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            bb_setUInt8(&error, 0xE);
   22a4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22a50:	210e      	movs	r1, #14
   22a52:	4618      	mov	r0, r3
   22a54:	f7e0 f9de 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR);
   22a58:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22a5c:	2101      	movs	r1, #1
   22a5e:	4618      	mov	r0, r3
   22a60:	f7e0 f9d8 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_SERVICE_ERROR_INITIATE);
   22a64:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22a68:	2106      	movs	r1, #6
   22a6a:	4618      	mov	r0, r3
   22a6c:	f7e0 f9d2 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_INITIATE_DLMS_VERSION_TOO_LOW);
   22a70:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22a74:	2101      	movs	r1, #1
   22a76:	4618      	mov	r0, r3
   22a78:	f7e0 f9cc 	bl	2e14 <bb_setUInt8>
            settings->base.dlmsVersionNumber = 6;
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	2206      	movs	r2, #6
   22a80:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
   22a84:	e074      	b.n	22b70 <svr_HandleAarqRequest+0x1b0>
        }
        else if (settings->base.maxPduSize < 64)
   22a86:	687b      	ldr	r3, [r7, #4]
   22a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   22a8c:	2b3f      	cmp	r3, #63	; 0x3f
   22a8e:	d822      	bhi.n	22ad6 <svr_HandleAarqRequest+0x116>
        {
            result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22a90:	2301      	movs	r3, #1
   22a92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            diagnostic = DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
   22a96:	2301      	movs	r3, #1
   22a98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            bb_setUInt8(&error, 0xE);
   22a9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22aa0:	210e      	movs	r1, #14
   22aa2:	4618      	mov	r0, r3
   22aa4:	f7e0 f9b6 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR);
   22aa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22aac:	2101      	movs	r1, #1
   22aae:	4618      	mov	r0, r3
   22ab0:	f7e0 f9b0 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_SERVICE_ERROR_INITIATE);
   22ab4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22ab8:	2106      	movs	r1, #6
   22aba:	4618      	mov	r0, r3
   22abc:	f7e0 f9aa 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_INITIATE_PDU_SIZE_TOOSHORT);
   22ac0:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22ac4:	2103      	movs	r1, #3
   22ac6:	4618      	mov	r0, r3
   22ac8:	f7e0 f9a4 	bl	2e14 <bb_setUInt8>
            settings->base.maxPduSize = 64;
   22acc:	687b      	ldr	r3, [r7, #4]
   22ace:	2240      	movs	r2, #64	; 0x40
   22ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   22ad4:	e04c      	b.n	22b70 <svr_HandleAarqRequest+0x1b0>
        }
        else if (settings->base.negotiatedConformance == 0)
   22ad6:	687b      	ldr	r3, [r7, #4]
   22ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   22ada:	2b00      	cmp	r3, #0
   22adc:	d11e      	bne.n	22b1c <svr_HandleAarqRequest+0x15c>
        {
            result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22ade:	2301      	movs	r3, #1
   22ae0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            diagnostic = DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
   22ae4:	2301      	movs	r3, #1
   22ae6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            bb_setUInt8(&error, 0xE);
   22aea:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22aee:	210e      	movs	r1, #14
   22af0:	4618      	mov	r0, r3
   22af2:	f7e0 f98f 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR);
   22af6:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22afa:	2101      	movs	r1, #1
   22afc:	4618      	mov	r0, r3
   22afe:	f7e0 f989 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_SERVICE_ERROR_INITIATE);
   22b02:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22b06:	2106      	movs	r1, #6
   22b08:	4618      	mov	r0, r3
   22b0a:	f7e0 f983 	bl	2e14 <bb_setUInt8>
            bb_setUInt8(&error, DLMS_INITIATE_INCOMPATIBLE_CONFORMANCE);
   22b0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22b12:	2102      	movs	r1, #2
   22b14:	4618      	mov	r0, r3
   22b16:	f7e0 f97d 	bl	2e14 <bb_setUInt8>
   22b1a:	e029      	b.n	22b70 <svr_HandleAarqRequest+0x1b0>
        }
        else if (diagnostic != DLMS_SOURCE_DIAGNOSTIC_NONE)
   22b1c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
   22b20:	2b00      	cmp	r3, #0
   22b22:	d006      	beq.n	22b32 <svr_HandleAarqRequest+0x172>
        {
            result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22b24:	2301      	movs	r3, #1
   22b26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            diagnostic = DLMS_SOURCE_DIAGNOSTIC_APPLICATION_CONTEXT_NAME_NOT_SUPPORTED;
   22b2a:	2302      	movs	r3, #2
   22b2c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
   22b30:	e01e      	b.n	22b70 <svr_HandleAarqRequest+0x1b0>
        }
        else
        {
            diagnostic = svr_validateAuthentication(
   22b32:	687b      	ldr	r3, [r7, #4]
   22b34:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
   22b38:	687b      	ldr	r3, [r7, #4]
   22b3a:	333c      	adds	r3, #60	; 0x3c
   22b3c:	461a      	mov	r2, r3
   22b3e:	6878      	ldr	r0, [r7, #4]
   22b40:	f006 fbe6 	bl	29310 <svr_validateAuthentication>
   22b44:	4603      	mov	r3, r0
   22b46:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                settings,
                settings->base.authentication,
                &settings->base.password);
            if (diagnostic != DLMS_SOURCE_DIAGNOSTIC_NONE)
   22b4a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
   22b4e:	2b00      	cmp	r3, #0
   22b50:	d003      	beq.n	22b5a <svr_HandleAarqRequest+0x19a>
            {
                result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22b52:	2301      	movs	r3, #1
   22b54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
   22b58:	e00a      	b.n	22b70 <svr_HandleAarqRequest+0x1b0>
            }
            else if (settings->base.authentication > DLMS_AUTHENTICATION_LOW)
   22b5a:	687b      	ldr	r3, [r7, #4]
   22b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   22b60:	2b01      	cmp	r3, #1
   22b62:	d905      	bls.n	22b70 <svr_HandleAarqRequest+0x1b0>
            {
                // If High authentication is used.
                result = DLMS_ASSOCIATION_RESULT_ACCEPTED;
   22b64:	2300      	movs	r3, #0
   22b66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                diagnostic = DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_REQUIRED;
   22b6a:	230e      	movs	r3, #14
   22b6c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            }
        }
        // Generate AARE packet.
        if (settings->base.authentication > DLMS_AUTHENTICATION_LOW)
   22b70:	687b      	ldr	r3, [r7, #4]
   22b72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   22b76:	2b01      	cmp	r3, #1
   22b78:	d95d      	bls.n	22c36 <svr_HandleAarqRequest+0x276>
        {
            // If High authentication is used.
            if ((ret = dlms_generateChallenge(&settings->base.stoCChallenge)) != 0)
   22b7a:	687b      	ldr	r3, [r7, #4]
   22b7c:	3310      	adds	r3, #16
   22b7e:	4618      	mov	r0, r3
   22b80:	f7e8 fbca 	bl	b318 <dlms_generateChallenge>
   22b84:	67f8      	str	r0, [r7, #124]	; 0x7c
   22b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d006      	beq.n	22b9a <svr_HandleAarqRequest+0x1da>
            {
                bb_clear(&error);
   22b8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22b90:	4618      	mov	r0, r3
   22b92:	f7e0 fde7 	bl	3764 <bb_clear>
                return ret;
   22b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22b98:	e0dc      	b.n	22d54 <svr_HandleAarqRequest+0x394>
            }
            if (settings->base.useLogicalNameReferencing)
   22b9a:	687b      	ldr	r3, [r7, #4]
   22b9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   22ba0:	2b00      	cmp	r3, #0
   22ba2:	f000 80b7 	beq.w	22d14 <svr_HandleAarqRequest+0x354>
            {
                gxAssociationLogicalName* it;
                unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
   22ba6:	4a6d      	ldr	r2, [pc, #436]	; (22d5c <svr_HandleAarqRequest+0x39c>)
   22ba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
   22bac:	6810      	ldr	r0, [r2, #0]
   22bae:	6018      	str	r0, [r3, #0]
   22bb0:	8892      	ldrh	r2, [r2, #4]
   22bb2:	809a      	strh	r2, [r3, #4]
                if ((ret = oa_findByLN(&settings->base.objects, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, ln, (gxObject**)&it)) != 0)
   22bb4:	687b      	ldr	r3, [r7, #4]
   22bb6:	f103 0074 	add.w	r0, r3, #116	; 0x74
   22bba:	f107 0368 	add.w	r3, r7, #104	; 0x68
   22bbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
   22bc2:	210f      	movs	r1, #15
   22bc4:	f7ff fb90 	bl	222e8 <oa_findByLN>
   22bc8:	67f8      	str	r0, [r7, #124]	; 0x7c
   22bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22bcc:	2b00      	cmp	r3, #0
   22bce:	d001      	beq.n	22bd4 <svr_HandleAarqRequest+0x214>
                {
                    return ret;
   22bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22bd2:	e0bf      	b.n	22d54 <svr_HandleAarqRequest+0x394>
                }
                if (it == NULL)
   22bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22bd6:	2b00      	cmp	r3, #0
   22bd8:	d111      	bne.n	22bfe <svr_HandleAarqRequest+0x23e>
                {
                    gxValueEventArg e;
                    ve_init(&e);
   22bda:	f107 0308 	add.w	r3, r7, #8
   22bde:	4618      	mov	r0, r3
   22be0:	f7fe fd9a 	bl	21718 <ve_init>
                    svr_findObject(&settings->base, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, 0, ln, &e);
   22be4:	6878      	ldr	r0, [r7, #4]
   22be6:	f107 0260 	add.w	r2, r7, #96	; 0x60
   22bea:	f107 0308 	add.w	r3, r7, #8
   22bee:	9300      	str	r3, [sp, #0]
   22bf0:	4613      	mov	r3, r2
   22bf2:	2200      	movs	r2, #0
   22bf4:	210f      	movs	r1, #15
   22bf6:	f006 f981 	bl	28efc <svr_findObject>
                    it = (gxAssociationLogicalName*)e.target;
   22bfa:	69fb      	ldr	r3, [r7, #28]
   22bfc:	66bb      	str	r3, [r7, #104]	; 0x68
                }
                if (it != NULL)
   22bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22c00:	2b00      	cmp	r3, #0
   22c02:	f000 8087 	beq.w	22d14 <svr_HandleAarqRequest+0x354>
                {
#ifndef DLMS_IGNORE_HIGH_GMAC
                    if (settings->base.cipher.security == DLMS_SECURITY_NONE)
   22c06:	687b      	ldr	r3, [r7, #4]
   22c08:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   22c0c:	2b00      	cmp	r3, #0
   22c0e:	d104      	bne.n	22c1a <svr_HandleAarqRequest+0x25a>
#endif //DLMS_IGNORE_HIGH_GMAC
                    {
                        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
   22c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22c12:	2201      	movs	r2, #1
   22c14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   22c18:	e003      	b.n	22c22 <svr_HandleAarqRequest+0x262>
                    }
#ifndef DLMS_IGNORE_HIGH_GMAC
                    else
                    {
                        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME_WITH_CIPHERING;
   22c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22c1c:	2203      	movs	r2, #3
   22c1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    }
#endif //DLMS_IGNORE_HIGH_GMAC
                    it->authenticationMechanismName.mechanismId = settings->base.authentication;
   22c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22c24:	687a      	ldr	r2, [r7, #4]
   22c26:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   22c2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                    it->associationStatus = DLMS_ASSOCIATION_STATUS_ASSOCIATION_PENDING;
   22c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22c30:	2201      	movs	r2, #1
   22c32:	741a      	strb	r2, [r3, #16]
                result = DLMS_ASSOCIATION_RESULT_ACCEPTED;
                diagnostic = DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_REQUIRED;
            }
        }
        // Generate AARE packet.
        if (settings->base.authentication > DLMS_AUTHENTICATION_LOW)
   22c34:	e06e      	b.n	22d14 <svr_HandleAarqRequest+0x354>
                }
            }
        }
        else
        {
            if (settings->base.useLogicalNameReferencing)
   22c36:	687b      	ldr	r3, [r7, #4]
   22c38:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   22c3c:	2b00      	cmp	r3, #0
   22c3e:	d069      	beq.n	22d14 <svr_HandleAarqRequest+0x354>
            {
                gxAssociationLogicalName* it;
                unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
   22c40:	4a46      	ldr	r2, [pc, #280]	; (22d5c <svr_HandleAarqRequest+0x39c>)
   22c42:	f107 0354 	add.w	r3, r7, #84	; 0x54
   22c46:	6810      	ldr	r0, [r2, #0]
   22c48:	6018      	str	r0, [r3, #0]
   22c4a:	8892      	ldrh	r2, [r2, #4]
   22c4c:	809a      	strh	r2, [r3, #4]
                if ((ret = oa_findByLN(&settings->base.objects, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, ln, (gxObject**)&it)) != 0)
   22c4e:	687b      	ldr	r3, [r7, #4]
   22c50:	f103 0074 	add.w	r0, r3, #116	; 0x74
   22c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   22c58:	f107 0254 	add.w	r2, r7, #84	; 0x54
   22c5c:	210f      	movs	r1, #15
   22c5e:	f7ff fb43 	bl	222e8 <oa_findByLN>
   22c62:	67f8      	str	r0, [r7, #124]	; 0x7c
   22c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22c66:	2b00      	cmp	r3, #0
   22c68:	d001      	beq.n	22c6e <svr_HandleAarqRequest+0x2ae>
                {
                    return ret;
   22c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   22c6c:	e072      	b.n	22d54 <svr_HandleAarqRequest+0x394>
                }
                if (it == NULL)
   22c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22c70:	2b00      	cmp	r3, #0
   22c72:	d111      	bne.n	22c98 <svr_HandleAarqRequest+0x2d8>
                {
                    gxValueEventArg e;
                    ve_init(&e);
   22c74:	f107 0308 	add.w	r3, r7, #8
   22c78:	4618      	mov	r0, r3
   22c7a:	f7fe fd4d 	bl	21718 <ve_init>
                    svr_findObject(&settings->base, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, 0, ln, &e);
   22c7e:	6878      	ldr	r0, [r7, #4]
   22c80:	f107 0254 	add.w	r2, r7, #84	; 0x54
   22c84:	f107 0308 	add.w	r3, r7, #8
   22c88:	9300      	str	r3, [sp, #0]
   22c8a:	4613      	mov	r3, r2
   22c8c:	2200      	movs	r2, #0
   22c8e:	210f      	movs	r1, #15
   22c90:	f006 f934 	bl	28efc <svr_findObject>
                    it = (gxAssociationLogicalName*)e.target;
   22c94:	69fb      	ldr	r3, [r7, #28]
   22c96:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
                if (it != NULL)
   22c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22c9a:	2b00      	cmp	r3, #0
   22c9c:	d03a      	beq.n	22d14 <svr_HandleAarqRequest+0x354>
                {
#ifndef DLMS_IGNORE_HIGH_GMAC
                    if (settings->base.cipher.security == DLMS_SECURITY_NONE)
   22c9e:	687b      	ldr	r3, [r7, #4]
   22ca0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   22ca4:	2b00      	cmp	r3, #0
   22ca6:	d104      	bne.n	22cb2 <svr_HandleAarqRequest+0x2f2>
#endif //DLMS_IGNORE_HIGH_GMAC
                    {
                        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
   22ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22caa:	2201      	movs	r2, #1
   22cac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   22cb0:	e003      	b.n	22cba <svr_HandleAarqRequest+0x2fa>
                    }
#ifndef DLMS_IGNORE_HIGH_GMAC
                    else
                    {
                        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME_WITH_CIPHERING;
   22cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22cb4:	2203      	movs	r2, #3
   22cb6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    }
#endif //DLMS_IGNORE_HIGH_GMAC
                    it->authenticationMechanismName.mechanismId = settings->base.authentication;
   22cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22cbc:	687a      	ldr	r2, [r7, #4]
   22cbe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   22cc2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                    it->associationStatus = DLMS_ASSOCIATION_STATUS_ASSOCIATED;
   22cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22cc8:	2202      	movs	r2, #2
   22cca:	741a      	strb	r2, [r3, #16]
                result = DLMS_ASSOCIATION_RESULT_ACCEPTED;
                diagnostic = DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_REQUIRED;
            }
        }
        // Generate AARE packet.
        if (settings->base.authentication > DLMS_AUTHENTICATION_LOW)
   22ccc:	e022      	b.n	22d14 <svr_HandleAarqRequest+0x354>
                    it->associationStatus = DLMS_ASSOCIATION_STATUS_ASSOCIATED;
                }
            }
        }
    }
    else if (diagnostic == DLMS_SOURCE_DIAGNOSTIC_NONE)
   22cce:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
   22cd2:	2b00      	cmp	r3, #0
   22cd4:	d11f      	bne.n	22d16 <svr_HandleAarqRequest+0x356>
    {
        result = DLMS_ASSOCIATION_RESULT_PERMANENT_REJECTED;
   22cd6:	2301      	movs	r3, #1
   22cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        diagnostic = DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
   22cdc:	2301      	movs	r3, #1
   22cde:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
         bb_setUInt8(&error, 0xE);
   22ce2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22ce6:	210e      	movs	r1, #14
   22ce8:	4618      	mov	r0, r3
   22cea:	f7e0 f893 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(&error, DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR);
   22cee:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22cf2:	2101      	movs	r1, #1
   22cf4:	4618      	mov	r0, r3
   22cf6:	f7e0 f88d 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(&error, DLMS_SERVICE_ERROR_INITIATE);
   22cfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22cfe:	2106      	movs	r1, #6
   22d00:	4618      	mov	r0, r3
   22d02:	f7e0 f887 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(&error, DLMS_INITIATE_OTHER);
   22d06:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22d0a:	2100      	movs	r1, #0
   22d0c:	4618      	mov	r0, r3
   22d0e:	f7e0 f881 	bl	2e14 <bb_setUInt8>
   22d12:	e000      	b.n	22d16 <svr_HandleAarqRequest+0x356>
                result = DLMS_ASSOCIATION_RESULT_ACCEPTED;
                diagnostic = DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_REQUIRED;
            }
        }
        // Generate AARE packet.
        if (settings->base.authentication > DLMS_AUTHENTICATION_LOW)
   22d14:	bf00      	nop
        bb_setUInt8(&error, DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR);
        bb_setUInt8(&error, DLMS_SERVICE_ERROR_INITIATE);
        bb_setUInt8(&error, DLMS_INITIATE_OTHER);
    }

    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   22d16:	687b      	ldr	r3, [r7, #4]
   22d18:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   22d1c:	2b00      	cmp	r3, #0
   22d1e:	d104      	bne.n	22d2a <svr_HandleAarqRequest+0x36a>
    {
        dlms_addLLCBytes(&settings->base, data);
   22d20:	687b      	ldr	r3, [r7, #4]
   22d22:	6839      	ldr	r1, [r7, #0]
   22d24:	4618      	mov	r0, r3
   22d26:	f7e7 fc1d 	bl	a564 <dlms_addLLCBytes>
    }
    ret = apdu_generateAARE(&settings->base, data, result, diagnostic, &error, NULL);
   22d2a:	6878      	ldr	r0, [r7, #4]
   22d2c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
   22d30:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
   22d34:	2300      	movs	r3, #0
   22d36:	9301      	str	r3, [sp, #4]
   22d38:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22d3c:	9300      	str	r3, [sp, #0]
   22d3e:	460b      	mov	r3, r1
   22d40:	6839      	ldr	r1, [r7, #0]
   22d42:	f7df fb69 	bl	2418 <apdu_generateAARE>
   22d46:	67f8      	str	r0, [r7, #124]	; 0x7c
    bb_clear(&error);
   22d48:	f107 0370 	add.w	r3, r7, #112	; 0x70
   22d4c:	4618      	mov	r0, r3
   22d4e:	f7e0 fd09 	bl	3764 <bb_clear>
    return ret;
   22d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
   22d54:	4618      	mov	r0, r3
   22d56:	3780      	adds	r7, #128	; 0x80
   22d58:	46bd      	mov	sp, r7
   22d5a:	bd80      	pop	{r7, pc}
   22d5c:	0002c5cc 	.word	0x0002c5cc

00022d60 <svr_handleSnrmRequest>:
 * @return Returns returned UA packet.
 */
int svr_handleSnrmRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   22d60:	b580      	push	{r7, lr}
   22d62:	b086      	sub	sp, #24
   22d64:	af00      	add	r7, sp, #0
   22d66:	6078      	str	r0, [r7, #4]
   22d68:	6039      	str	r1, [r7, #0]
    int ret;
    unsigned char len;
    unsigned short serverAddress, clientAddress;
    DLMS_SECURITY security;
    if ((ret = dlms_parseSnrmUaResponse(&settings->base, data)) != 0)
   22d6a:	687b      	ldr	r3, [r7, #4]
   22d6c:	6839      	ldr	r1, [r7, #0]
   22d6e:	4618      	mov	r0, r3
   22d70:	f7e8 fd78 	bl	b864 <dlms_parseSnrmUaResponse>
   22d74:	6178      	str	r0, [r7, #20]
   22d76:	697b      	ldr	r3, [r7, #20]
   22d78:	2b00      	cmp	r3, #0
   22d7a:	d001      	beq.n	22d80 <svr_handleSnrmRequest+0x20>
    {
        return ret;
   22d7c:	697b      	ldr	r3, [r7, #20]
   22d7e:	e0c2      	b.n	22f06 <svr_handleSnrmRequest+0x1a6>
    }
    bb_clear(data);
   22d80:	6838      	ldr	r0, [r7, #0]
   22d82:	f7e0 fcef 	bl	3764 <bb_clear>
    security = settings->base.cipher.security;
   22d86:	687b      	ldr	r3, [r7, #4]
   22d88:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   22d8c:	74fb      	strb	r3, [r7, #19]
    serverAddress = settings->base.serverAddress;
   22d8e:	687b      	ldr	r3, [r7, #4]
   22d90:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   22d92:	823b      	strh	r3, [r7, #16]
    clientAddress = settings->base.clientAddress;
   22d94:	687b      	ldr	r3, [r7, #4]
   22d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   22d98:	81fb      	strh	r3, [r7, #14]
    svr_reset(settings);
   22d9a:	6878      	ldr	r0, [r7, #4]
   22d9c:	f7ff fdec 	bl	22978 <svr_reset>
    settings->base.cipher.security = security;
   22da0:	687b      	ldr	r3, [r7, #4]
   22da2:	7cfa      	ldrb	r2, [r7, #19]
   22da4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    settings->base.serverAddress = serverAddress;
   22da8:	687b      	ldr	r3, [r7, #4]
   22daa:	8a3a      	ldrh	r2, [r7, #16]
   22dac:	869a      	strh	r2, [r3, #52]	; 0x34
    settings->base.clientAddress = clientAddress;
   22dae:	687b      	ldr	r3, [r7, #4]
   22db0:	89fa      	ldrh	r2, [r7, #14]
   22db2:	865a      	strh	r2, [r3, #50]	; 0x32
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    if (settings->hdlc != NULL)
   22db4:	687b      	ldr	r3, [r7, #4]
   22db6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22dba:	2b00      	cmp	r3, #0
   22dbc:	d057      	beq.n	22e6e <svr_handleSnrmRequest+0x10e>
    {
        //If client wants send larger HDLC frames what meter accepts.
        if (settings->hdlc->maximumInfoLengthReceive != 0 && settings->base.maxInfoTX > settings->hdlc->maximumInfoLengthReceive)
   22dbe:	687b      	ldr	r3, [r7, #4]
   22dc0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22dc4:	8b9b      	ldrh	r3, [r3, #28]
   22dc6:	2b00      	cmp	r3, #0
   22dc8:	d00f      	beq.n	22dea <svr_handleSnrmRequest+0x8a>
   22dca:	687b      	ldr	r3, [r7, #4]
   22dcc:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
   22dd0:	687b      	ldr	r3, [r7, #4]
   22dd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22dd6:	8b9b      	ldrh	r3, [r3, #28]
   22dd8:	429a      	cmp	r2, r3
   22dda:	d906      	bls.n	22dea <svr_handleSnrmRequest+0x8a>
        {
            settings->base.maxInfoTX = settings->hdlc->maximumInfoLengthReceive;
   22ddc:	687b      	ldr	r3, [r7, #4]
   22dde:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22de2:	8b9a      	ldrh	r2, [r3, #28]
   22de4:	687b      	ldr	r3, [r7, #4]
   22de6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        }
        //If client wants receive larger HDLC frames what meter accepts.
        if (settings->hdlc->maximumInfoLengthTransmit != 0 && settings->base.maxInfoRX > settings->hdlc->maximumInfoLengthTransmit)
   22dea:	687b      	ldr	r3, [r7, #4]
   22dec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22df0:	8a9b      	ldrh	r3, [r3, #20]
   22df2:	2b00      	cmp	r3, #0
   22df4:	d00f      	beq.n	22e16 <svr_handleSnrmRequest+0xb6>
   22df6:	687b      	ldr	r3, [r7, #4]
   22df8:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
   22dfc:	687b      	ldr	r3, [r7, #4]
   22dfe:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e02:	8a9b      	ldrh	r3, [r3, #20]
   22e04:	429a      	cmp	r2, r3
   22e06:	d906      	bls.n	22e16 <svr_handleSnrmRequest+0xb6>
        {
            settings->base.maxInfoRX = settings->hdlc->maximumInfoLengthTransmit;
   22e08:	687b      	ldr	r3, [r7, #4]
   22e0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e0e:	8a9a      	ldrh	r2, [r3, #20]
   22e10:	687b      	ldr	r3, [r7, #4]
   22e12:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        }
        //If client asks higher window size what meter accepts.
        if (settings->hdlc->windowSizeReceive != 0 && settings->base.windowSizeTX > settings->hdlc->windowSizeReceive)
   22e16:	687b      	ldr	r3, [r7, #4]
   22e18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e1c:	7e1b      	ldrb	r3, [r3, #24]
   22e1e:	2b00      	cmp	r3, #0
   22e20:	d00f      	beq.n	22e42 <svr_handleSnrmRequest+0xe2>
   22e22:	687b      	ldr	r3, [r7, #4]
   22e24:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   22e28:	687b      	ldr	r3, [r7, #4]
   22e2a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e2e:	7e1b      	ldrb	r3, [r3, #24]
   22e30:	429a      	cmp	r2, r3
   22e32:	d906      	bls.n	22e42 <svr_handleSnrmRequest+0xe2>
        {
            settings->base.windowSizeTX = settings->hdlc->windowSizeReceive;
   22e34:	687b      	ldr	r3, [r7, #4]
   22e36:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e3a:	7e1a      	ldrb	r2, [r3, #24]
   22e3c:	687b      	ldr	r3, [r7, #4]
   22e3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        //If client asks higher window size what meter accepts.
        if (settings->hdlc->windowSizeTransmit != 0 && settings->base.windowSizeRX > settings->hdlc->windowSizeTransmit)
   22e42:	687b      	ldr	r3, [r7, #4]
   22e44:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e48:	7ddb      	ldrb	r3, [r3, #23]
   22e4a:	2b00      	cmp	r3, #0
   22e4c:	d00f      	beq.n	22e6e <svr_handleSnrmRequest+0x10e>
   22e4e:	687b      	ldr	r3, [r7, #4]
   22e50:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   22e54:	687b      	ldr	r3, [r7, #4]
   22e56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e5a:	7ddb      	ldrb	r3, [r3, #23]
   22e5c:	429a      	cmp	r2, r3
   22e5e:	d906      	bls.n	22e6e <svr_handleSnrmRequest+0x10e>
        {
            settings->base.windowSizeRX = settings->hdlc->windowSizeTransmit;
   22e60:	687b      	ldr	r3, [r7, #4]
   22e62:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22e66:	7dda      	ldrb	r2, [r3, #23]
   22e68:	687b      	ldr	r3, [r7, #4]
   22e6a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        }
    }
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
    bb_setUInt8(data, 0x81); // FromatID
   22e6e:	2181      	movs	r1, #129	; 0x81
   22e70:	6838      	ldr	r0, [r7, #0]
   22e72:	f7df ffcf 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x80); // GroupID
   22e76:	2180      	movs	r1, #128	; 0x80
   22e78:	6838      	ldr	r0, [r7, #0]
   22e7a:	f7df ffcb 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0); // Length
   22e7e:	2100      	movs	r1, #0
   22e80:	6838      	ldr	r0, [r7, #0]
   22e82:	f7df ffc7 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, HDLC_INFO_MAX_INFO_TX);
   22e86:	2105      	movs	r1, #5
   22e88:	6838      	ldr	r0, [r7, #0]
   22e8a:	f7df ffc3 	bl	2e14 <bb_setUInt8>
    dlms_appendHdlcParameter(data, settings->base.maxInfoTX);
   22e8e:	687b      	ldr	r3, [r7, #4]
   22e90:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   22e94:	4619      	mov	r1, r3
   22e96:	6838      	ldr	r0, [r7, #0]
   22e98:	f7e8 fdc4 	bl	ba24 <dlms_appendHdlcParameter>

    bb_setUInt8(data, HDLC_INFO_MAX_INFO_RX);
   22e9c:	2106      	movs	r1, #6
   22e9e:	6838      	ldr	r0, [r7, #0]
   22ea0:	f7df ffb8 	bl	2e14 <bb_setUInt8>
    dlms_appendHdlcParameter(data, settings->base.maxInfoRX);
   22ea4:	687b      	ldr	r3, [r7, #4]
   22ea6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
   22eaa:	4619      	mov	r1, r3
   22eac:	6838      	ldr	r0, [r7, #0]
   22eae:	f7e8 fdb9 	bl	ba24 <dlms_appendHdlcParameter>

    bb_setUInt8(data, HDLC_INFO_WINDOW_SIZE_TX);
   22eb2:	2107      	movs	r1, #7
   22eb4:	6838      	ldr	r0, [r7, #0]
   22eb6:	f7df ffad 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 4);
   22eba:	2104      	movs	r1, #4
   22ebc:	6838      	ldr	r0, [r7, #0]
   22ebe:	f7df ffa9 	bl	2e14 <bb_setUInt8>
    bb_setUInt32(data, settings->base.windowSizeTX);
   22ec2:	687b      	ldr	r3, [r7, #4]
   22ec4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   22ec8:	4619      	mov	r1, r3
   22eca:	6838      	ldr	r0, [r7, #0]
   22ecc:	f7e0 f896 	bl	2ffc <bb_setUInt32>

    bb_setUInt8(data, HDLC_INFO_WINDOW_SIZE_RX);
   22ed0:	2108      	movs	r1, #8
   22ed2:	6838      	ldr	r0, [r7, #0]
   22ed4:	f7df ff9e 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 4);
   22ed8:	2104      	movs	r1, #4
   22eda:	6838      	ldr	r0, [r7, #0]
   22edc:	f7df ff9a 	bl	2e14 <bb_setUInt8>
    bb_setUInt32(data, settings->base.windowSizeRX);
   22ee0:	687b      	ldr	r3, [r7, #4]
   22ee2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   22ee6:	4619      	mov	r1, r3
   22ee8:	6838      	ldr	r0, [r7, #0]
   22eea:	f7e0 f887 	bl	2ffc <bb_setUInt32>

    len = (unsigned char)(data->size - 3);
   22eee:	683b      	ldr	r3, [r7, #0]
   22ef0:	88db      	ldrh	r3, [r3, #6]
   22ef2:	b2db      	uxtb	r3, r3
   22ef4:	3b03      	subs	r3, #3
   22ef6:	737b      	strb	r3, [r7, #13]
    // Update length.
    bb_setUInt8ByIndex(data, 2, len);
   22ef8:	7b7b      	ldrb	r3, [r7, #13]
   22efa:	461a      	mov	r2, r3
   22efc:	2102      	movs	r1, #2
   22efe:	6838      	ldr	r0, [r7, #0]
   22f00:	f7df ffc6 	bl	2e90 <bb_setUInt8ByIndex>
    return 0;
   22f04:	2300      	movs	r3, #0
}
   22f06:	4618      	mov	r0, r3
   22f08:	3718      	adds	r7, #24
   22f0a:	46bd      	mov	sp, r7
   22f0c:	bd80      	pop	{r7, pc}
   22f0e:	bf00      	nop

00022f10 <svr_generateDisconnectRequest>:
 * @return Disconnect request.
 */
int svr_generateDisconnectRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   22f10:	b580      	push	{r7, lr}
   22f12:	b084      	sub	sp, #16
   22f14:	af00      	add	r7, sp, #0
   22f16:	6078      	str	r0, [r7, #4]
   22f18:	6039      	str	r1, [r7, #0]
    int len;
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER)
   22f1a:	687b      	ldr	r3, [r7, #4]
   22f1c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   22f20:	2b01      	cmp	r3, #1
   22f22:	d108      	bne.n	22f36 <svr_generateDisconnectRequest+0x26>
    {
        bb_setUInt8(data, 0x63);
   22f24:	2163      	movs	r1, #99	; 0x63
   22f26:	6838      	ldr	r0, [r7, #0]
   22f28:	f7df ff74 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x0);
   22f2c:	2100      	movs	r1, #0
   22f2e:	6838      	ldr	r0, [r7, #0]
   22f30:	f7df ff70 	bl	2e14 <bb_setUInt8>
   22f34:	e04a      	b.n	22fcc <svr_generateDisconnectRequest+0xbc>
    }
    else
    {
        bb_setUInt8(data, 0x81); // FromatID
   22f36:	2181      	movs	r1, #129	; 0x81
   22f38:	6838      	ldr	r0, [r7, #0]
   22f3a:	f7df ff6b 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0x80); // GroupID
   22f3e:	2180      	movs	r1, #128	; 0x80
   22f40:	6838      	ldr	r0, [r7, #0]
   22f42:	f7df ff67 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 0); // Length
   22f46:	2100      	movs	r1, #0
   22f48:	6838      	ldr	r0, [r7, #0]
   22f4a:	f7df ff63 	bl	2e14 <bb_setUInt8>

        bb_setUInt8(data, HDLC_INFO_MAX_INFO_TX);
   22f4e:	2105      	movs	r1, #5
   22f50:	6838      	ldr	r0, [r7, #0]
   22f52:	f7df ff5f 	bl	2e14 <bb_setUInt8>
        dlms_appendHdlcParameter(data, settings->base.maxInfoTX);
   22f56:	687b      	ldr	r3, [r7, #4]
   22f58:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   22f5c:	4619      	mov	r1, r3
   22f5e:	6838      	ldr	r0, [r7, #0]
   22f60:	f7e8 fd60 	bl	ba24 <dlms_appendHdlcParameter>

        bb_setUInt8(data, HDLC_INFO_MAX_INFO_RX);
   22f64:	2106      	movs	r1, #6
   22f66:	6838      	ldr	r0, [r7, #0]
   22f68:	f7df ff54 	bl	2e14 <bb_setUInt8>
        dlms_appendHdlcParameter(data, settings->base.maxInfoRX);
   22f6c:	687b      	ldr	r3, [r7, #4]
   22f6e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
   22f72:	4619      	mov	r1, r3
   22f74:	6838      	ldr	r0, [r7, #0]
   22f76:	f7e8 fd55 	bl	ba24 <dlms_appendHdlcParameter>

        bb_setUInt8(data, HDLC_INFO_WINDOW_SIZE_TX);
   22f7a:	2107      	movs	r1, #7
   22f7c:	6838      	ldr	r0, [r7, #0]
   22f7e:	f7df ff49 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 4);
   22f82:	2104      	movs	r1, #4
   22f84:	6838      	ldr	r0, [r7, #0]
   22f86:	f7df ff45 	bl	2e14 <bb_setUInt8>
        bb_setUInt32(data, settings->base.windowSizeTX);
   22f8a:	687b      	ldr	r3, [r7, #4]
   22f8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   22f90:	4619      	mov	r1, r3
   22f92:	6838      	ldr	r0, [r7, #0]
   22f94:	f7e0 f832 	bl	2ffc <bb_setUInt32>

        bb_setUInt8(data, HDLC_INFO_WINDOW_SIZE_RX);
   22f98:	2108      	movs	r1, #8
   22f9a:	6838      	ldr	r0, [r7, #0]
   22f9c:	f7df ff3a 	bl	2e14 <bb_setUInt8>
        bb_setUInt8(data, 4);
   22fa0:	2104      	movs	r1, #4
   22fa2:	6838      	ldr	r0, [r7, #0]
   22fa4:	f7df ff36 	bl	2e14 <bb_setUInt8>
        bb_setUInt32(data, settings->base.windowSizeRX);
   22fa8:	687b      	ldr	r3, [r7, #4]
   22faa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   22fae:	4619      	mov	r1, r3
   22fb0:	6838      	ldr	r0, [r7, #0]
   22fb2:	f7e0 f823 	bl	2ffc <bb_setUInt32>

        len = data->size - 3;
   22fb6:	683b      	ldr	r3, [r7, #0]
   22fb8:	88db      	ldrh	r3, [r3, #6]
   22fba:	3b03      	subs	r3, #3
   22fbc:	60fb      	str	r3, [r7, #12]
        // Update length.
        bb_setUInt8ByIndex(data, 2, (unsigned char)len);
   22fbe:	68fb      	ldr	r3, [r7, #12]
   22fc0:	b2db      	uxtb	r3, r3
   22fc2:	461a      	mov	r2, r3
   22fc4:	2102      	movs	r1, #2
   22fc6:	6838      	ldr	r0, [r7, #0]
   22fc8:	f7df ff62 	bl	2e90 <bb_setUInt8ByIndex>
    }
    return 0;
   22fcc:	2300      	movs	r3, #0
}
   22fce:	4618      	mov	r0, r3
   22fd0:	3710      	adds	r7, #16
   22fd2:	46bd      	mov	sp, r7
   22fd4:	bd80      	pop	{r7, pc}
   22fd6:	bf00      	nop

00022fd8 <svr_reportError>:
int svr_reportError(
    dlmsServerSettings* settings,
    DLMS_COMMAND command,
    DLMS_ERROR_CODE error,
    gxByteBuffer* reply)
{
   22fd8:	b590      	push	{r4, r7, lr}
   22fda:	b0a3      	sub	sp, #140	; 0x8c
   22fdc:	af06      	add	r7, sp, #24
   22fde:	60f8      	str	r0, [r7, #12]
   22fe0:	607b      	str	r3, [r7, #4]
   22fe2:	460b      	mov	r3, r1
   22fe4:	72fb      	strb	r3, [r7, #11]
   22fe6:	4613      	mov	r3, r2
   22fe8:	813b      	strh	r3, [r7, #8]
    int ret;
    DLMS_COMMAND cmd;
    gxByteBuffer data;
    switch (command)
   22fea:	7afb      	ldrb	r3, [r7, #11]
   22fec:	2bc0      	cmp	r3, #192	; 0xc0
   22fee:	d013      	beq.n	23018 <svr_reportError+0x40>
   22ff0:	2bc0      	cmp	r3, #192	; 0xc0
   22ff2:	dc04      	bgt.n	22ffe <svr_reportError+0x26>
   22ff4:	2b05      	cmp	r3, #5
   22ff6:	d007      	beq.n	23008 <svr_reportError+0x30>
   22ff8:	2b06      	cmp	r3, #6
   22ffa:	d009      	beq.n	23010 <svr_reportError+0x38>
   22ffc:	e018      	b.n	23030 <svr_reportError+0x58>
   22ffe:	2bc1      	cmp	r3, #193	; 0xc1
   23000:	d00e      	beq.n	23020 <svr_reportError+0x48>
   23002:	2bc3      	cmp	r3, #195	; 0xc3
   23004:	d010      	beq.n	23028 <svr_reportError+0x50>
   23006:	e013      	b.n	23030 <svr_reportError+0x58>
    {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_READ_REQUEST:
        cmd = DLMS_COMMAND_READ_RESPONSE;
   23008:	230c      	movs	r3, #12
   2300a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   2300e:	e013      	b.n	23038 <svr_reportError+0x60>
    case DLMS_COMMAND_WRITE_REQUEST:
        cmd = DLMS_COMMAND_WRITE_RESPONSE;
   23010:	230d      	movs	r3, #13
   23012:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   23016:	e00f      	b.n	23038 <svr_reportError+0x60>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_GET_REQUEST:
        cmd = DLMS_COMMAND_GET_RESPONSE;
   23018:	23c4      	movs	r3, #196	; 0xc4
   2301a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   2301e:	e00b      	b.n	23038 <svr_reportError+0x60>
    case DLMS_COMMAND_SET_REQUEST:
        cmd = DLMS_COMMAND_SET_RESPONSE;
   23020:	23c5      	movs	r3, #197	; 0xc5
   23022:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   23026:	e007      	b.n	23038 <svr_reportError+0x60>
    case DLMS_COMMAND_METHOD_REQUEST:
        cmd = DLMS_COMMAND_METHOD_RESPONSE;
   23028:	23c7      	movs	r3, #199	; 0xc7
   2302a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   2302e:	e003      	b.n	23038 <svr_reportError+0x60>
    default:
        // Return HW error and close connection.
        cmd = DLMS_COMMAND_NONE;
   23030:	2300      	movs	r3, #0
   23032:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
   23036:	bf00      	nop
    }
    bb_init(&data);
   23038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   2303c:	4618      	mov	r0, r3
   2303e:	f7df fe53 	bl	2ce8 <bb_init>
    if (settings->base.useLogicalNameReferencing)
   23042:	68fb      	ldr	r3, [r7, #12]
   23044:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   23048:	2b00      	cmp	r3, #0
   2304a:	d026      	beq.n	2309a <svr_reportError+0xc2>
    {
        gxLNParameters p;
        params_initLN(&p, &settings->base, 0, cmd, 1,
   2304c:	68f9      	ldr	r1, [r7, #12]
   2304e:	893b      	ldrh	r3, [r7, #8]
   23050:	b2db      	uxtb	r3, r3
   23052:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
   23056:	f107 0014 	add.w	r0, r7, #20
   2305a:	2200      	movs	r2, #0
   2305c:	9204      	str	r2, [sp, #16]
   2305e:	9303      	str	r3, [sp, #12]
   23060:	2300      	movs	r3, #0
   23062:	9302      	str	r3, [sp, #8]
   23064:	2300      	movs	r3, #0
   23066:	9301      	str	r3, [sp, #4]
   23068:	2301      	movs	r3, #1
   2306a:	9300      	str	r3, [sp, #0]
   2306c:	4623      	mov	r3, r4
   2306e:	2200      	movs	r2, #0
   23070:	f7ff f9b6 	bl	223e0 <params_initLN>
            NULL, NULL, error, DLMS_COMMAND_NONE);
        ret = dlms_getLNPdu(&p, &data);
   23074:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   23078:	f107 0314 	add.w	r3, r7, #20
   2307c:	4611      	mov	r1, r2
   2307e:	4618      	mov	r0, r3
   23080:	f7e7 fdac 	bl	abdc <dlms_getLNPdu>
   23084:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (ret != 0)
   23086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23088:	2b00      	cmp	r3, #0
   2308a:	d04b      	beq.n	23124 <svr_reportError+0x14c>
        {
            bb_clear(&data);
   2308c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   23090:	4618      	mov	r0, r3
   23092:	f7e0 fb67 	bl	3764 <bb_clear>
            return ret;
   23096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23098:	e069      	b.n	2316e <svr_reportError+0x196>
    else
    {
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        gxSNParameters p;
        gxByteBuffer bb;
        bb_init(&bb);
   2309a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   2309e:	4618      	mov	r0, r3
   230a0:	f7df fe22 	bl	2ce8 <bb_init>
        bb_setUInt8(&bb, error);
   230a4:	893b      	ldrh	r3, [r7, #8]
   230a6:	b2da      	uxtb	r2, r3
   230a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
   230ac:	4611      	mov	r1, r2
   230ae:	4618      	mov	r0, r3
   230b0:	f7df feb0 	bl	2e14 <bb_setUInt8>
        params_initSN(&p, &settings->base, cmd, 1, 1, NULL, &bb, settings->info.encryptedCommand);
   230b4:	68f9      	ldr	r1, [r7, #12]
   230b6:	68fb      	ldr	r3, [r7, #12]
   230b8:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   230bc:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   230c0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   230c4:	9303      	str	r3, [sp, #12]
   230c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   230ca:	9302      	str	r3, [sp, #8]
   230cc:	2300      	movs	r3, #0
   230ce:	9301      	str	r3, [sp, #4]
   230d0:	2301      	movs	r3, #1
   230d2:	9300      	str	r3, [sp, #0]
   230d4:	2301      	movs	r3, #1
   230d6:	f7ff f951 	bl	2237c <params_initSN>
        p.lastBlock = settings->base.index == settings->base.count;
   230da:	68fb      	ldr	r3, [r7, #12]
   230dc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   230e0:	68fb      	ldr	r3, [r7, #12]
   230e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   230e6:	429a      	cmp	r2, r3
   230e8:	bf0c      	ite	eq
   230ea:	2301      	moveq	r3, #1
   230ec:	2300      	movne	r3, #0
   230ee:	b2db      	uxtb	r3, r3
   230f0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        ret = dlms_getSNPdu(&p, &data);
   230f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   230f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
   230fc:	4611      	mov	r1, r2
   230fe:	4618      	mov	r0, r3
   23100:	f7e7 fae2 	bl	a6c8 <dlms_getSNPdu>
   23104:	66f8      	str	r0, [r7, #108]	; 0x6c
        bb_clear(&bb);
   23106:	f107 0334 	add.w	r3, r7, #52	; 0x34
   2310a:	4618      	mov	r0, r3
   2310c:	f7e0 fb2a 	bl	3764 <bb_clear>
        if (ret != 0)
   23110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23112:	2b00      	cmp	r3, #0
   23114:	d006      	beq.n	23124 <svr_reportError+0x14c>
        {
            bb_clear(&data);
   23116:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   2311a:	4618      	mov	r0, r3
   2311c:	f7e0 fb22 	bl	3764 <bb_clear>
            return ret;
   23120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23122:	e024      	b.n	2316e <svr_reportError+0x196>
        }
#else
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    }
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   23124:	68fb      	ldr	r3, [r7, #12]
   23126:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   2312a:	2b00      	cmp	r3, #0
   2312c:	d108      	bne.n	23140 <svr_reportError+0x168>
    {
        ret = dlms_getHdlcFrame(&settings->base, 0, &data, reply);
   2312e:	68f8      	ldr	r0, [r7, #12]
   23130:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   23134:	687b      	ldr	r3, [r7, #4]
   23136:	2100      	movs	r1, #0
   23138:	f7e5 f892 	bl	8260 <dlms_getHdlcFrame>
   2313c:	66f8      	str	r0, [r7, #108]	; 0x6c
   2313e:	e010      	b.n	23162 <svr_reportError+0x18a>
    }
#ifndef DLMS_IGNORE_WRAPPER
    else if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER)
   23140:	68fb      	ldr	r3, [r7, #12]
   23142:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   23146:	2b01      	cmp	r3, #1
   23148:	d108      	bne.n	2315c <svr_reportError+0x184>
    {
        ret = dlms_getWrapperFrame(&settings->base, &data, reply);
   2314a:	68fb      	ldr	r3, [r7, #12]
   2314c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
   23150:	687a      	ldr	r2, [r7, #4]
   23152:	4618      	mov	r0, r3
   23154:	f7e5 fe04 	bl	8d60 <dlms_getWrapperFrame>
   23158:	66f8      	str	r0, [r7, #108]	; 0x6c
   2315a:	e002      	b.n	23162 <svr_reportError+0x18a>
    }
#endif //DLMS_IGNORE_WRAPPER
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   2315c:	f44f 7381 	mov.w	r3, #258	; 0x102
   23160:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    bb_clear(&data);
   23162:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   23166:	4618      	mov	r0, r3
   23168:	f7e0 fafc 	bl	3764 <bb_clear>
    return ret;
   2316c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2316e:	4618      	mov	r0, r3
   23170:	3774      	adds	r7, #116	; 0x74
   23172:	46bd      	mov	sp, r7
   23174:	bd90      	pop	{r4, r7, pc}
   23176:	bf00      	nop

00023178 <svr_handleSetRequest2>:
int svr_handleSetRequest2(
    dlmsServerSettings* settings,
    gxByteBuffer *data,
    unsigned char type,
    gxLNParameters *p)
{
   23178:	b580      	push	{r7, lr}
   2317a:	b090      	sub	sp, #64	; 0x40
   2317c:	af02      	add	r7, sp, #8
   2317e:	60f8      	str	r0, [r7, #12]
   23180:	60b9      	str	r1, [r7, #8]
   23182:	603b      	str	r3, [r7, #0]
   23184:	4613      	mov	r3, r2
   23186:	71fb      	strb	r3, [r7, #7]
    gxValueEventArg* e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   23188:	2048      	movs	r0, #72	; 0x48
   2318a:	f006 fc5b 	bl	29a44 <malloc>
   2318e:	4603      	mov	r3, r0
   23190:	633b      	str	r3, [r7, #48]	; 0x30
    gxValueEventCollection list;
    int ret;
    DLMS_OBJECT_TYPE ci;
    unsigned char ch;
    unsigned short tmp;
    unsigned char * ln = NULL;
   23192:	2300      	movs	r3, #0
   23194:	62fb      	str	r3, [r7, #44]	; 0x2c
    ve_init(e);
   23196:	6b38      	ldr	r0, [r7, #48]	; 0x30
   23198:	f7fe fabe 	bl	21718 <ve_init>
    vec_init(&list);
   2319c:	f107 0320 	add.w	r3, r7, #32
   231a0:	4618      	mov	r0, r3
   231a2:	f7fe f9ed 	bl	21580 <vec_init>
    vec_push(&list, e);
   231a6:	f107 0320 	add.w	r3, r7, #32
   231aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
   231ac:	4618      	mov	r0, r3
   231ae:	f7fe f9fd 	bl	215ac <vec_push>
    if ((ret = bb_getUInt16(data, &tmp)) != 0)
   231b2:	f107 031c 	add.w	r3, r7, #28
   231b6:	4619      	mov	r1, r3
   231b8:	68b8      	ldr	r0, [r7, #8]
   231ba:	f7e0 fb59 	bl	3870 <bb_getUInt16>
   231be:	6378      	str	r0, [r7, #52]	; 0x34
   231c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   231c2:	2b00      	cmp	r3, #0
   231c4:	d006      	beq.n	231d4 <svr_handleSetRequest2+0x5c>
    {
        vec_clear(&list);
   231c6:	f107 0320 	add.w	r3, r7, #32
   231ca:	4618      	mov	r0, r3
   231cc:	f7fe fa4a 	bl	21664 <vec_clear>
        return ret;
   231d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   231d2:	e167      	b.n	234a4 <svr_handleSetRequest2+0x32c>
    }
    ci = (DLMS_OBJECT_TYPE)tmp;
   231d4:	8bbb      	ldrh	r3, [r7, #28]
   231d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    ln = data->data + data->position;
   231d8:	68bb      	ldr	r3, [r7, #8]
   231da:	681b      	ldr	r3, [r3, #0]
   231dc:	68ba      	ldr	r2, [r7, #8]
   231de:	8912      	ldrh	r2, [r2, #8]
   231e0:	4413      	add	r3, r2
   231e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    data->position += 6;
   231e4:	68bb      	ldr	r3, [r7, #8]
   231e6:	891b      	ldrh	r3, [r3, #8]
   231e8:	3306      	adds	r3, #6
   231ea:	b29a      	uxth	r2, r3
   231ec:	68bb      	ldr	r3, [r7, #8]
   231ee:	811a      	strh	r2, [r3, #8]
    // Attribute index.
    if ((ret = bb_getUInt8(data, &e->index)) != 0)
   231f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   231f2:	3318      	adds	r3, #24
   231f4:	4619      	mov	r1, r3
   231f6:	68b8      	ldr	r0, [r7, #8]
   231f8:	f7e0 fad8 	bl	37ac <bb_getUInt8>
   231fc:	6378      	str	r0, [r7, #52]	; 0x34
   231fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23200:	2b00      	cmp	r3, #0
   23202:	d006      	beq.n	23212 <svr_handleSetRequest2+0x9a>
    {
        vec_clear(&list);
   23204:	f107 0320 	add.w	r3, r7, #32
   23208:	4618      	mov	r0, r3
   2320a:	f7fe fa2b 	bl	21664 <vec_clear>
        return ret;
   2320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23210:	e148      	b.n	234a4 <svr_handleSetRequest2+0x32c>
    }
    // Get Access Selection.
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   23212:	f107 031f 	add.w	r3, r7, #31
   23216:	4619      	mov	r1, r3
   23218:	68b8      	ldr	r0, [r7, #8]
   2321a:	f7e0 fac7 	bl	37ac <bb_getUInt8>
   2321e:	6378      	str	r0, [r7, #52]	; 0x34
   23220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23222:	2b00      	cmp	r3, #0
   23224:	d006      	beq.n	23234 <svr_handleSetRequest2+0xbc>
    {
        vec_clear(&list);
   23226:	f107 0320 	add.w	r3, r7, #32
   2322a:	4618      	mov	r0, r3
   2322c:	f7fe fa1a 	bl	21664 <vec_clear>
        return ret;
   23230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23232:	e137      	b.n	234a4 <svr_handleSetRequest2+0x32c>
    }
    if (type == 2)
   23234:	79fb      	ldrb	r3, [r7, #7]
   23236:	2b02      	cmp	r3, #2
   23238:	d166      	bne.n	23308 <svr_handleSetRequest2+0x190>
    {
        unsigned long blockNumber;
        unsigned short size;
        if ((ret = bb_getUInt8(data, &ch)) != 0)
   2323a:	f107 031f 	add.w	r3, r7, #31
   2323e:	4619      	mov	r1, r3
   23240:	68b8      	ldr	r0, [r7, #8]
   23242:	f7e0 fab3 	bl	37ac <bb_getUInt8>
   23246:	6378      	str	r0, [r7, #52]	; 0x34
   23248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2324a:	2b00      	cmp	r3, #0
   2324c:	d006      	beq.n	2325c <svr_handleSetRequest2+0xe4>
        {
            vec_clear(&list);
   2324e:	f107 0320 	add.w	r3, r7, #32
   23252:	4618      	mov	r0, r3
   23254:	f7fe fa06 	bl	21664 <vec_clear>
            return ret;
   23258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2325a:	e123      	b.n	234a4 <svr_handleSetRequest2+0x32c>
        }
        p->multipleBlocks = ch == 0;
   2325c:	7ffb      	ldrb	r3, [r7, #31]
   2325e:	2b00      	cmp	r3, #0
   23260:	bf0c      	ite	eq
   23262:	2301      	moveq	r3, #1
   23264:	2300      	movne	r3, #0
   23266:	b2db      	uxtb	r3, r3
   23268:	461a      	mov	r2, r3
   2326a:	683b      	ldr	r3, [r7, #0]
   2326c:	755a      	strb	r2, [r3, #21]
        ret = bb_getUInt32(data, &blockNumber);
   2326e:	f107 0318 	add.w	r3, r7, #24
   23272:	4619      	mov	r1, r3
   23274:	68b8      	ldr	r0, [r7, #8]
   23276:	f7e0 fb2b 	bl	38d0 <bb_getUInt32>
   2327a:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret != 0)
   2327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2327e:	2b00      	cmp	r3, #0
   23280:	d006      	beq.n	23290 <svr_handleSetRequest2+0x118>
        {
            vec_clear(&list);
   23282:	f107 0320 	add.w	r3, r7, #32
   23286:	4618      	mov	r0, r3
   23288:	f7fe f9ec 	bl	21664 <vec_clear>
            return ret;
   2328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2328e:	e109      	b.n	234a4 <svr_handleSetRequest2+0x32c>
        }
        if (blockNumber != settings->base.blockIndex)
   23290:	68fb      	ldr	r3, [r7, #12]
   23292:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   23296:	69bb      	ldr	r3, [r7, #24]
   23298:	429a      	cmp	r2, r3
   2329a:	d009      	beq.n	232b0 <svr_handleSetRequest2+0x138>
        {
            vec_clear(&list);
   2329c:	f107 0320 	add.w	r3, r7, #32
   232a0:	4618      	mov	r0, r3
   232a2:	f7fe f9df 	bl	21664 <vec_clear>
            p->status = DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   232a6:	683b      	ldr	r3, [r7, #0]
   232a8:	2213      	movs	r2, #19
   232aa:	751a      	strb	r2, [r3, #20]
            return 0;
   232ac:	2300      	movs	r3, #0
   232ae:	e0f9      	b.n	234a4 <svr_handleSetRequest2+0x32c>
        }
        ++settings->base.blockIndex;
   232b0:	68fb      	ldr	r3, [r7, #12]
   232b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   232b6:	1c5a      	adds	r2, r3, #1
   232b8:	68fb      	ldr	r3, [r7, #12]
   232ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        if (hlp_getObjectCount2(data, &size) != 0)
   232be:	f107 0316 	add.w	r3, r7, #22
   232c2:	4619      	mov	r1, r3
   232c4:	68b8      	ldr	r0, [r7, #8]
   232c6:	f7fe fac1 	bl	2184c <hlp_getObjectCount2>
   232ca:	4603      	mov	r3, r0
   232cc:	2b00      	cmp	r3, #0
   232ce:	d007      	beq.n	232e0 <svr_handleSetRequest2+0x168>
        {
            vec_clear(&list);
   232d0:	f107 0320 	add.w	r3, r7, #32
   232d4:	4618      	mov	r0, r3
   232d6:	f7fe f9c5 	bl	21664 <vec_clear>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   232da:	f44f 7381 	mov.w	r3, #258	; 0x102
   232de:	e0e1      	b.n	234a4 <svr_handleSetRequest2+0x32c>
        }
        //If received date is not what expected.
        if (size != data->size - data->position)
   232e0:	8afb      	ldrh	r3, [r7, #22]
   232e2:	461a      	mov	r2, r3
   232e4:	68bb      	ldr	r3, [r7, #8]
   232e6:	88db      	ldrh	r3, [r3, #6]
   232e8:	4619      	mov	r1, r3
   232ea:	68bb      	ldr	r3, [r7, #8]
   232ec:	891b      	ldrh	r3, [r3, #8]
   232ee:	1acb      	subs	r3, r1, r3
   232f0:	429a      	cmp	r2, r3
   232f2:	d009      	beq.n	23308 <svr_handleSetRequest2+0x190>
        {
            vec_clear(&list);
   232f4:	f107 0320 	add.w	r3, r7, #32
   232f8:	4618      	mov	r0, r3
   232fa:	f7fe f9b3 	bl	21664 <vec_clear>
            p->status = DLMS_ERROR_CODE_BLOCK_UNAVAILABLE;
   232fe:	683b      	ldr	r3, [r7, #0]
   23300:	220e      	movs	r2, #14
   23302:	751a      	strb	r2, [r3, #20]
            return 0;
   23304:	2300      	movs	r3, #0
   23306:	e0cd      	b.n	234a4 <svr_handleSetRequest2+0x32c>
        }
    }
    if (!p->multipleBlocks)
   23308:	683b      	ldr	r3, [r7, #0]
   2330a:	7d5b      	ldrb	r3, [r3, #21]
   2330c:	2b00      	cmp	r3, #0
   2330e:	d110      	bne.n	23332 <svr_handleSetRequest2+0x1ba>
    {
        gxDataInfo di;
        di_init(&di);
   23310:	f107 0310 	add.w	r3, r7, #16
   23314:	4618      	mov	r0, r3
   23316:	f7e2 ff21 	bl	615c <di_init>
        resetBlockIndex(&settings->base);
   2331a:	68fb      	ldr	r3, [r7, #12]
   2331c:	4618      	mov	r0, r3
   2331e:	f7e8 fccb 	bl	bcb8 <resetBlockIndex>
        ret = dlms_getData(data, &di, &e->value);
   23322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   23324:	f107 0310 	add.w	r3, r7, #16
   23328:	4619      	mov	r1, r3
   2332a:	68b8      	ldr	r0, [r7, #8]
   2332c:	f7e4 fc68 	bl	7c00 <dlms_getData>
   23330:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if (ret == 0)
   23332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23334:	2b00      	cmp	r3, #0
   23336:	f040 80af 	bne.w	23498 <svr_handleSetRequest2+0x320>
    {
        if ((ret = oa_findByLN(&settings->base.objects, ci, ln, &e->target)) == 0)
   2333a:	68fb      	ldr	r3, [r7, #12]
   2333c:	f103 0074 	add.w	r0, r3, #116	; 0x74
   23340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23342:	3314      	adds	r3, #20
   23344:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   23346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   23348:	f7fe ffce 	bl	222e8 <oa_findByLN>
   2334c:	6378      	str	r0, [r7, #52]	; 0x34
   2334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23350:	2b00      	cmp	r3, #0
   23352:	f040 80a1 	bne.w	23498 <svr_handleSetRequest2+0x320>
        {
            if (e->target == NULL)
   23356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23358:	695b      	ldr	r3, [r3, #20]
   2335a:	2b00      	cmp	r3, #0
   2335c:	d108      	bne.n	23370 <svr_handleSetRequest2+0x1f8>
            {
                ret = svr_findObject(&settings->base, ci, 0, ln, e);
   2335e:	68f8      	ldr	r0, [r7, #12]
   23360:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
   23362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23364:	9300      	str	r3, [sp, #0]
   23366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23368:	2200      	movs	r2, #0
   2336a:	f005 fdc7 	bl	28efc <svr_findObject>
   2336e:	6378      	str	r0, [r7, #52]	; 0x34
            }
            bb_clear(data);
   23370:	68b8      	ldr	r0, [r7, #8]
   23372:	f7e0 f9f7 	bl	3764 <bb_clear>
            if (ret == 0)
   23376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23378:	2b00      	cmp	r3, #0
   2337a:	f040 808d 	bne.w	23498 <svr_handleSetRequest2+0x320>
            {
                // If target is unknown.
                if (e->target == NULL)
   2337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23380:	695b      	ldr	r3, [r3, #20]
   23382:	2b00      	cmp	r3, #0
   23384:	d103      	bne.n	2338e <svr_handleSetRequest2+0x216>
                {
                    // Device reports a undefined object.
                    p->status = DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
   23386:	683b      	ldr	r3, [r7, #0]
   23388:	220b      	movs	r2, #11
   2338a:	751a      	strb	r2, [r3, #20]
   2338c:	e084      	b.n	23498 <svr_handleSetRequest2+0x320>
                }
                else
                {
                    DLMS_ACCESS_MODE am = svr_getAttributeAccess(&settings->base, e->target, e->index);
   2338e:	68f8      	ldr	r0, [r7, #12]
   23390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23392:	6959      	ldr	r1, [r3, #20]
   23394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23396:	7e1b      	ldrb	r3, [r3, #24]
   23398:	461a      	mov	r2, r3
   2339a:	f005 ffcb 	bl	29334 <svr_getAttributeAccess>
   2339e:	4603      	mov	r3, r0
   233a0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    // If write is denied.
                    if (am != DLMS_ACCESS_MODE_WRITE && am != DLMS_ACCESS_MODE_READ_WRITE)
   233a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   233a8:	2b02      	cmp	r3, #2
   233aa:	d007      	beq.n	233bc <svr_handleSetRequest2+0x244>
   233ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   233b0:	2b03      	cmp	r3, #3
   233b2:	d003      	beq.n	233bc <svr_handleSetRequest2+0x244>
                    {
                        //Read Write denied.
                        p->status = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   233b4:	683b      	ldr	r3, [r7, #0]
   233b6:	2203      	movs	r2, #3
   233b8:	751a      	strb	r2, [r3, #20]
   233ba:	e06d      	b.n	23498 <svr_handleSetRequest2+0x320>
                    }
                    else
                    {
                        svr_preWrite(&settings->base, &list);
   233bc:	68fb      	ldr	r3, [r7, #12]
   233be:	f107 0220 	add.w	r2, r7, #32
   233c2:	4611      	mov	r1, r2
   233c4:	4618      	mov	r0, r3
   233c6:	f005 feed 	bl	291a4 <svr_preWrite>
                        if (p->multipleBlocks)
   233ca:	683b      	ldr	r3, [r7, #0]
   233cc:	7d5b      	ldrb	r3, [r3, #21]
   233ce:	2b00      	cmp	r3, #0
   233d0:	d036      	beq.n	23440 <svr_handleSetRequest2+0x2c8>
                        {
                            bb_clear(&settings->transaction.data);
   233d2:	68fb      	ldr	r3, [r7, #12]
   233d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
   233d8:	4618      	mov	r0, r3
   233da:	f7e0 f9c3 	bl	3764 <bb_clear>
                            vec_clear(&settings->transaction.targets);
   233de:	68fb      	ldr	r3, [r7, #12]
   233e0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   233e4:	4618      	mov	r0, r3
   233e6:	f7fe f93d 	bl	21664 <vec_clear>
                            settings->transaction.targets = list;
   233ea:	68fb      	ldr	r3, [r7, #12]
   233ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
   233f0:	f107 0220 	add.w	r2, r7, #32
   233f4:	e892 0003 	ldmia.w	r2, {r0, r1}
   233f8:	e883 0003 	stmia.w	r3, {r0, r1}
                            var_clear(&e->value);
   233fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   233fe:	4618      	mov	r0, r3
   23400:	f002 fea2 	bl	26148 <var_clear>
                            vec_init(&list);
   23404:	f107 0320 	add.w	r3, r7, #32
   23408:	4618      	mov	r0, r3
   2340a:	f7fe f8b9 	bl	21580 <vec_init>
                            settings->transaction.command = DLMS_COMMAND_GET_REQUEST;
   2340e:	68fb      	ldr	r3, [r7, #12]
   23410:	22c0      	movs	r2, #192	; 0xc0
   23412:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                            if (!bb_isAttached(data))
   23416:	68b8      	ldr	r0, [r7, #8]
   23418:	f7df fc38 	bl	2c8c <bb_isAttached>
   2341c:	4603      	mov	r3, r0
   2341e:	2b00      	cmp	r3, #0
   23420:	d10e      	bne.n	23440 <svr_handleSetRequest2+0x2c8>
                            {
                                bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   23422:	68fb      	ldr	r3, [r7, #12]
   23424:	f503 7090 	add.w	r0, r3, #288	; 0x120
   23428:	68bb      	ldr	r3, [r7, #8]
   2342a:	8919      	ldrh	r1, [r3, #8]
   2342c:	68bb      	ldr	r3, [r7, #8]
   2342e:	88da      	ldrh	r2, [r3, #6]
   23430:	68bb      	ldr	r3, [r7, #8]
   23432:	891b      	ldrh	r3, [r3, #8]
   23434:	1ad3      	subs	r3, r2, r3
   23436:	b29b      	uxth	r3, r3
   23438:	460a      	mov	r2, r1
   2343a:	68b9      	ldr	r1, [r7, #8]
   2343c:	f7e0 f8f0 	bl	3620 <bb_set2>
                            }
                        }
                        if (e->error != 0)
   23440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23442:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23446:	2b00      	cmp	r3, #0
   23448:	d006      	beq.n	23458 <svr_handleSetRequest2+0x2e0>
                        {
                            p->status = e->error;
   2344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2344c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23450:	b2da      	uxtb	r2, r3
   23452:	683b      	ldr	r3, [r7, #0]
   23454:	751a      	strb	r2, [r3, #20]
   23456:	e01f      	b.n	23498 <svr_handleSetRequest2+0x320>
                        }
                        else if (!e->handled && !p->multipleBlocks)
   23458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2345a:	7c1b      	ldrb	r3, [r3, #16]
   2345c:	2b00      	cmp	r3, #0
   2345e:	d11b      	bne.n	23498 <svr_handleSetRequest2+0x320>
   23460:	683b      	ldr	r3, [r7, #0]
   23462:	7d5b      	ldrb	r3, [r3, #21]
   23464:	2b00      	cmp	r3, #0
   23466:	d117      	bne.n	23498 <svr_handleSetRequest2+0x320>
                        {
                            ret = cosem_setValue(&settings->base, e);
   23468:	68fb      	ldr	r3, [r7, #12]
   2346a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2346c:	4618      	mov	r0, r3
   2346e:	f7fb fdd1 	bl	1f014 <cosem_setValue>
   23472:	6378      	str	r0, [r7, #52]	; 0x34
                            svr_postWrite(&settings->base, &list);
   23474:	68fb      	ldr	r3, [r7, #12]
   23476:	f107 0220 	add.w	r2, r7, #32
   2347a:	4611      	mov	r1, r2
   2347c:	4618      	mov	r0, r3
   2347e:	f005 fedf 	bl	29240 <svr_postWrite>
                            if (e->error != 0)
   23482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23484:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23488:	2b00      	cmp	r3, #0
   2348a:	d005      	beq.n	23498 <svr_handleSetRequest2+0x320>
                            {
                                p->status = e->error;
   2348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2348e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23492:	b2da      	uxtb	r2, r3
   23494:	683b      	ldr	r3, [r7, #0]
   23496:	751a      	strb	r2, [r3, #20]
                    }
                }
            }
        }
    }
    vec_clear(&list);
   23498:	f107 0320 	add.w	r3, r7, #32
   2349c:	4618      	mov	r0, r3
   2349e:	f7fe f8e1 	bl	21664 <vec_clear>
    return ret;
   234a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   234a4:	4618      	mov	r0, r3
   234a6:	3738      	adds	r7, #56	; 0x38
   234a8:	46bd      	mov	sp, r7
   234aa:	bd80      	pop	{r7, pc}

000234ac <svr_hanleSetRequestWithDataBlock>:

int svr_hanleSetRequestWithDataBlock(
    dlmsServerSettings* settings,
    gxByteBuffer *data,
    gxLNParameters *p)
{
   234ac:	b580      	push	{r7, lr}
   234ae:	b08a      	sub	sp, #40	; 0x28
   234b0:	af00      	add	r7, sp, #0
   234b2:	60f8      	str	r0, [r7, #12]
   234b4:	60b9      	str	r1, [r7, #8]
   234b6:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned long blockNumber;
    unsigned short size;
    unsigned char ch;
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   234b8:	f107 0319 	add.w	r3, r7, #25
   234bc:	4619      	mov	r1, r3
   234be:	68b8      	ldr	r0, [r7, #8]
   234c0:	f7e0 f974 	bl	37ac <bb_getUInt8>
   234c4:	6278      	str	r0, [r7, #36]	; 0x24
   234c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234c8:	2b00      	cmp	r3, #0
   234ca:	d001      	beq.n	234d0 <svr_hanleSetRequestWithDataBlock+0x24>
    {
        return ret;
   234cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234ce:	e09b      	b.n	23608 <svr_hanleSetRequestWithDataBlock+0x15c>
    }
    p->multipleBlocks = ch == 0;
   234d0:	7e7b      	ldrb	r3, [r7, #25]
   234d2:	2b00      	cmp	r3, #0
   234d4:	bf0c      	ite	eq
   234d6:	2301      	moveq	r3, #1
   234d8:	2300      	movne	r3, #0
   234da:	b2db      	uxtb	r3, r3
   234dc:	461a      	mov	r2, r3
   234de:	687b      	ldr	r3, [r7, #4]
   234e0:	755a      	strb	r2, [r3, #21]
    if ((ret = bb_getUInt32(data, &blockNumber)) != 0)
   234e2:	f107 031c 	add.w	r3, r7, #28
   234e6:	4619      	mov	r1, r3
   234e8:	68b8      	ldr	r0, [r7, #8]
   234ea:	f7e0 f9f1 	bl	38d0 <bb_getUInt32>
   234ee:	6278      	str	r0, [r7, #36]	; 0x24
   234f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234f2:	2b00      	cmp	r3, #0
   234f4:	d001      	beq.n	234fa <svr_hanleSetRequestWithDataBlock+0x4e>
    {
        return ret;
   234f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234f8:	e086      	b.n	23608 <svr_hanleSetRequestWithDataBlock+0x15c>
    }
    if (blockNumber != settings->base.blockIndex)
   234fa:	68fb      	ldr	r3, [r7, #12]
   234fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   23500:	69fb      	ldr	r3, [r7, #28]
   23502:	429a      	cmp	r2, r3
   23504:	d003      	beq.n	2350e <svr_hanleSetRequestWithDataBlock+0x62>
    {
        p->status = DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   23506:	687b      	ldr	r3, [r7, #4]
   23508:	2213      	movs	r2, #19
   2350a:	751a      	strb	r2, [r3, #20]
   2350c:	e078      	b.n	23600 <svr_hanleSetRequestWithDataBlock+0x154>
    }
    else
    {
        ++settings->base.blockIndex;
   2350e:	68fb      	ldr	r3, [r7, #12]
   23510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   23514:	1c5a      	adds	r2, r3, #1
   23516:	68fb      	ldr	r3, [r7, #12]
   23518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        if (hlp_getObjectCount2(data, &size) != 0)
   2351c:	f107 031a 	add.w	r3, r7, #26
   23520:	4619      	mov	r1, r3
   23522:	68b8      	ldr	r0, [r7, #8]
   23524:	f7fe f992 	bl	2184c <hlp_getObjectCount2>
   23528:	4603      	mov	r3, r0
   2352a:	2b00      	cmp	r3, #0
   2352c:	d002      	beq.n	23534 <svr_hanleSetRequestWithDataBlock+0x88>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2352e:	f44f 7381 	mov.w	r3, #258	; 0x102
   23532:	e069      	b.n	23608 <svr_hanleSetRequestWithDataBlock+0x15c>
        }
        if (size != data->size - data->position)
   23534:	8b7b      	ldrh	r3, [r7, #26]
   23536:	461a      	mov	r2, r3
   23538:	68bb      	ldr	r3, [r7, #8]
   2353a:	88db      	ldrh	r3, [r3, #6]
   2353c:	4619      	mov	r1, r3
   2353e:	68bb      	ldr	r3, [r7, #8]
   23540:	891b      	ldrh	r3, [r3, #8]
   23542:	1acb      	subs	r3, r1, r3
   23544:	429a      	cmp	r2, r3
   23546:	d002      	beq.n	2354e <svr_hanleSetRequestWithDataBlock+0xa2>
        {
            p->status = DLMS_ERROR_CODE_BLOCK_UNAVAILABLE;
   23548:	687b      	ldr	r3, [r7, #4]
   2354a:	220e      	movs	r2, #14
   2354c:	751a      	strb	r2, [r3, #20]
        }
        bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   2354e:	68fb      	ldr	r3, [r7, #12]
   23550:	f503 7090 	add.w	r0, r3, #288	; 0x120
   23554:	68bb      	ldr	r3, [r7, #8]
   23556:	8919      	ldrh	r1, [r3, #8]
   23558:	68bb      	ldr	r3, [r7, #8]
   2355a:	88da      	ldrh	r2, [r3, #6]
   2355c:	68bb      	ldr	r3, [r7, #8]
   2355e:	891b      	ldrh	r3, [r3, #8]
   23560:	1ad3      	subs	r3, r2, r3
   23562:	b29b      	uxth	r3, r3
   23564:	460a      	mov	r2, r1
   23566:	68b9      	ldr	r1, [r7, #8]
   23568:	f7e0 f85a 	bl	3620 <bb_set2>
        // If all data is received.
        if (!p->multipleBlocks)
   2356c:	687b      	ldr	r3, [r7, #4]
   2356e:	7d5b      	ldrb	r3, [r3, #21]
   23570:	2b00      	cmp	r3, #0
   23572:	d145      	bne.n	23600 <svr_hanleSetRequestWithDataBlock+0x154>
        {
            gxDataInfo di;
            gxValueEventArg *e = settings->transaction.targets.data[0];
   23574:	68fb      	ldr	r3, [r7, #12]
   23576:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2357a:	681b      	ldr	r3, [r3, #0]
   2357c:	623b      	str	r3, [r7, #32]
            di_init(&di);
   2357e:	f107 0310 	add.w	r3, r7, #16
   23582:	4618      	mov	r0, r3
   23584:	f7e2 fdea 	bl	615c <di_init>
            if ((ret != dlms_getData(&settings->transaction.data, &di, &e->value)) != 0)
   23588:	68fb      	ldr	r3, [r7, #12]
   2358a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   2358e:	6a3a      	ldr	r2, [r7, #32]
   23590:	f107 0110 	add.w	r1, r7, #16
   23594:	4618      	mov	r0, r3
   23596:	f7e4 fb33 	bl	7c00 <dlms_getData>
   2359a:	4602      	mov	r2, r0
   2359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2359e:	429a      	cmp	r2, r3
   235a0:	d001      	beq.n	235a6 <svr_hanleSetRequestWithDataBlock+0xfa>
            {
                return ret;
   235a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   235a4:	e030      	b.n	23608 <svr_hanleSetRequestWithDataBlock+0x15c>
            }
            svr_preWrite(&settings->base, &settings->transaction.targets);
   235a6:	68fa      	ldr	r2, [r7, #12]
   235a8:	68fb      	ldr	r3, [r7, #12]
   235aa:	f503 738c 	add.w	r3, r3, #280	; 0x118
   235ae:	4619      	mov	r1, r3
   235b0:	4610      	mov	r0, r2
   235b2:	f005 fdf7 	bl	291a4 <svr_preWrite>
            if (!e->handled && !p->multipleBlocks)
   235b6:	6a3b      	ldr	r3, [r7, #32]
   235b8:	7c1b      	ldrb	r3, [r3, #16]
   235ba:	2b00      	cmp	r3, #0
   235bc:	d116      	bne.n	235ec <svr_hanleSetRequestWithDataBlock+0x140>
   235be:	687b      	ldr	r3, [r7, #4]
   235c0:	7d5b      	ldrb	r3, [r3, #21]
   235c2:	2b00      	cmp	r3, #0
   235c4:	d112      	bne.n	235ec <svr_hanleSetRequestWithDataBlock+0x140>
            {
                if ((ret = cosem_setValue(&settings->base, e)) != 0)
   235c6:	68fb      	ldr	r3, [r7, #12]
   235c8:	6a39      	ldr	r1, [r7, #32]
   235ca:	4618      	mov	r0, r3
   235cc:	f7fb fd22 	bl	1f014 <cosem_setValue>
   235d0:	6278      	str	r0, [r7, #36]	; 0x24
   235d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   235d4:	2b00      	cmp	r3, #0
   235d6:	d001      	beq.n	235dc <svr_hanleSetRequestWithDataBlock+0x130>
                {
                    return ret;
   235d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   235da:	e015      	b.n	23608 <svr_hanleSetRequestWithDataBlock+0x15c>
                }
                svr_postWrite(&settings->base, &settings->transaction.targets);
   235dc:	68fa      	ldr	r2, [r7, #12]
   235de:	68fb      	ldr	r3, [r7, #12]
   235e0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   235e4:	4619      	mov	r1, r3
   235e6:	4610      	mov	r0, r2
   235e8:	f005 fe2a 	bl	29240 <svr_postWrite>
            }
            trans_clear(&settings->transaction);
   235ec:	68fb      	ldr	r3, [r7, #12]
   235ee:	f503 738a 	add.w	r3, r3, #276	; 0x114
   235f2:	4618      	mov	r0, r3
   235f4:	f7e8 fcd8 	bl	bfa8 <trans_clear>
            resetBlockIndex(&settings->base);
   235f8:	68fb      	ldr	r3, [r7, #12]
   235fa:	4618      	mov	r0, r3
   235fc:	f7e8 fb5c 	bl	bcb8 <resetBlockIndex>
        }
    }
    p->multipleBlocks = 1;
   23600:	687b      	ldr	r3, [r7, #4]
   23602:	2201      	movs	r2, #1
   23604:	755a      	strb	r2, [r3, #21]
    return 0;
   23606:	2300      	movs	r3, #0
}
   23608:	4618      	mov	r0, r3
   2360a:	3728      	adds	r7, #40	; 0x28
   2360c:	46bd      	mov	sp, r7
   2360e:	bd80      	pop	{r7, pc}

00023610 <svr_generateConfirmedServiceError>:
    dlmsServerSettings* settings,
    DLMS_CONFIRMED_SERVICE_ERROR service,
    DLMS_SERVICE_ERROR type,
    unsigned char code,
    gxByteBuffer * data)
{
   23610:	b580      	push	{r7, lr}
   23612:	b082      	sub	sp, #8
   23614:	af00      	add	r7, sp, #0
   23616:	6078      	str	r0, [r7, #4]
   23618:	4608      	mov	r0, r1
   2361a:	4611      	mov	r1, r2
   2361c:	461a      	mov	r2, r3
   2361e:	4603      	mov	r3, r0
   23620:	70fb      	strb	r3, [r7, #3]
   23622:	460b      	mov	r3, r1
   23624:	70bb      	strb	r3, [r7, #2]
   23626:	4613      	mov	r3, r2
   23628:	707b      	strb	r3, [r7, #1]
    bb_clear(data);
   2362a:	6938      	ldr	r0, [r7, #16]
   2362c:	f7e0 f89a 	bl	3764 <bb_clear>
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   23630:	687b      	ldr	r3, [r7, #4]
   23632:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   23636:	2b00      	cmp	r3, #0
   23638:	d104      	bne.n	23644 <svr_generateConfirmedServiceError+0x34>
    {
        dlms_addLLCBytes(&settings->base, data);
   2363a:	687b      	ldr	r3, [r7, #4]
   2363c:	6939      	ldr	r1, [r7, #16]
   2363e:	4618      	mov	r0, r3
   23640:	f7e6 ff90 	bl	a564 <dlms_addLLCBytes>
    }
    bb_setUInt8(data, DLMS_COMMAND_CONFIRMED_SERVICE_ERROR);
   23644:	210e      	movs	r1, #14
   23646:	6938      	ldr	r0, [r7, #16]
   23648:	f7df fbe4 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, service);
   2364c:	78fb      	ldrb	r3, [r7, #3]
   2364e:	4619      	mov	r1, r3
   23650:	6938      	ldr	r0, [r7, #16]
   23652:	f7df fbdf 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, type);
   23656:	78bb      	ldrb	r3, [r7, #2]
   23658:	4619      	mov	r1, r3
   2365a:	6938      	ldr	r0, [r7, #16]
   2365c:	f7df fbda 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, code);
   23660:	787b      	ldrb	r3, [r7, #1]
   23662:	4619      	mov	r1, r3
   23664:	6938      	ldr	r0, [r7, #16]
   23666:	f7df fbd5 	bl	2e14 <bb_setUInt8>
    return 0;
   2366a:	2300      	movs	r3, #0
}
   2366c:	4618      	mov	r0, r3
   2366e:	3708      	adds	r7, #8
   23670:	46bd      	mov	sp, r7
   23672:	bd80      	pop	{r7, pc}

00023674 <svr_handleSetRequest>:

int svr_handleSetRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   23674:	b590      	push	{r4, r7, lr}
   23676:	b093      	sub	sp, #76	; 0x4c
   23678:	af06      	add	r7, sp, #24
   2367a:	6078      	str	r0, [r7, #4]
   2367c:	6039      	str	r1, [r7, #0]
    gxLNParameters p;
    unsigned char invokeId, type;
    int ret;
    // Return error if connection is not established.
    if (!settings->info.preEstablished && (settings->base.connected & DLMS_CONNECTION_STATE_DLMS) == 0)
   2367e:	687b      	ldr	r3, [r7, #4]
   23680:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   23684:	2b00      	cmp	r3, #0
   23686:	d113      	bne.n	236b0 <svr_handleSetRequest+0x3c>
   23688:	687b      	ldr	r3, [r7, #4]
   2368a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   2368e:	f003 0302 	and.w	r3, r3, #2
   23692:	2b00      	cmp	r3, #0
   23694:	d10c      	bne.n	236b0 <svr_handleSetRequest+0x3c>
    {
        bb_clear(data);
   23696:	6838      	ldr	r0, [r7, #0]
   23698:	f7e0 f864 	bl	3764 <bb_clear>
        return svr_generateConfirmedServiceError(
   2369c:	683b      	ldr	r3, [r7, #0]
   2369e:	9300      	str	r3, [sp, #0]
   236a0:	2302      	movs	r3, #2
   236a2:	2203      	movs	r2, #3
   236a4:	2101      	movs	r1, #1
   236a6:	6878      	ldr	r0, [r7, #4]
   236a8:	f7ff ffb2 	bl	23610 <svr_generateConfirmedServiceError>
   236ac:	4603      	mov	r3, r0
   236ae:	e06a      	b.n	23786 <svr_handleSetRequest+0x112>
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR,
            DLMS_SERVICE_ERROR_SERVICE, DLMS_SERVICE_UNSUPPORTED,
            data);
    }
    // Get type.
    if ((ret = bb_getUInt8(data, &type)) != 0)
   236b0:	f107 030a 	add.w	r3, r7, #10
   236b4:	4619      	mov	r1, r3
   236b6:	6838      	ldr	r0, [r7, #0]
   236b8:	f7e0 f878 	bl	37ac <bb_getUInt8>
   236bc:	62f8      	str	r0, [r7, #44]	; 0x2c
   236be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   236c0:	2b00      	cmp	r3, #0
   236c2:	d001      	beq.n	236c8 <svr_handleSetRequest+0x54>
    {
        return ret;
   236c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   236c6:	e05e      	b.n	23786 <svr_handleSetRequest+0x112>
    }
    // Get invoke ID and priority.
    if ((ret = bb_getUInt8(data, &invokeId)) != 0)
   236c8:	f107 030b 	add.w	r3, r7, #11
   236cc:	4619      	mov	r1, r3
   236ce:	6838      	ldr	r0, [r7, #0]
   236d0:	f7e0 f86c 	bl	37ac <bb_getUInt8>
   236d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   236d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   236d8:	2b00      	cmp	r3, #0
   236da:	d001      	beq.n	236e0 <svr_handleSetRequest+0x6c>
    {
        return ret;
   236dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   236de:	e052      	b.n	23786 <svr_handleSetRequest+0x112>
    }
    updateInvokeId(settings, invokeId);
   236e0:	7afb      	ldrb	r3, [r7, #11]
   236e2:	4619      	mov	r1, r3
   236e4:	6878      	ldr	r0, [r7, #4]
   236e6:	f7e8 fc75 	bl	bfd4 <updateInvokeId>
    params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_SET_RESPONSE, type, NULL, data, 0, settings->info.encryptedCommand);
   236ea:	6879      	ldr	r1, [r7, #4]
   236ec:	7afc      	ldrb	r4, [r7, #11]
   236ee:	7abb      	ldrb	r3, [r7, #10]
   236f0:	687a      	ldr	r2, [r7, #4]
   236f2:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
   236f6:	f107 000c 	add.w	r0, r7, #12
   236fa:	9204      	str	r2, [sp, #16]
   236fc:	2200      	movs	r2, #0
   236fe:	9203      	str	r2, [sp, #12]
   23700:	683a      	ldr	r2, [r7, #0]
   23702:	9202      	str	r2, [sp, #8]
   23704:	2200      	movs	r2, #0
   23706:	9201      	str	r2, [sp, #4]
   23708:	9300      	str	r3, [sp, #0]
   2370a:	23c5      	movs	r3, #197	; 0xc5
   2370c:	4622      	mov	r2, r4
   2370e:	f7fe fe67 	bl	223e0 <params_initLN>
    if (type == DLMS_SET_COMMAND_TYPE_NORMAL || type == DLMS_SET_COMMAND_TYPE_FIRST_DATABLOCK)
   23712:	7abb      	ldrb	r3, [r7, #10]
   23714:	2b01      	cmp	r3, #1
   23716:	d002      	beq.n	2371e <svr_handleSetRequest+0xaa>
   23718:	7abb      	ldrb	r3, [r7, #10]
   2371a:	2b02      	cmp	r3, #2
   2371c:	d108      	bne.n	23730 <svr_handleSetRequest+0xbc>
    {
        ret = svr_handleSetRequest2(settings, data, type, &p);
   2371e:	7aba      	ldrb	r2, [r7, #10]
   23720:	f107 030c 	add.w	r3, r7, #12
   23724:	6839      	ldr	r1, [r7, #0]
   23726:	6878      	ldr	r0, [r7, #4]
   23728:	f7ff fd26 	bl	23178 <svr_handleSetRequest2>
   2372c:	62f8      	str	r0, [r7, #44]	; 0x2c
   2372e:	e00f      	b.n	23750 <svr_handleSetRequest+0xdc>
    }
    else if (type == DLMS_SET_COMMAND_TYPE_WITH_DATABLOCK)
   23730:	7abb      	ldrb	r3, [r7, #10]
   23732:	2b03      	cmp	r3, #3
   23734:	d108      	bne.n	23748 <svr_handleSetRequest+0xd4>
    {
        // Set Request With Data Block
        ret = svr_hanleSetRequestWithDataBlock(settings, data, &p);
   23736:	f107 030c 	add.w	r3, r7, #12
   2373a:	461a      	mov	r2, r3
   2373c:	6839      	ldr	r1, [r7, #0]
   2373e:	6878      	ldr	r0, [r7, #4]
   23740:	f7ff feb4 	bl	234ac <svr_hanleSetRequestWithDataBlock>
   23744:	62f8      	str	r0, [r7, #44]	; 0x2c
   23746:	e003      	b.n	23750 <svr_handleSetRequest+0xdc>
    }
    else
    {
        p.requestType = 1;
   23748:	2301      	movs	r3, #1
   2374a:	74bb      	strb	r3, [r7, #18]
        ret = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   2374c:	2303      	movs	r3, #3
   2374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (ret != 0)
   23750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23752:	2b00      	cmp	r3, #0
   23754:	d010      	beq.n	23778 <svr_handleSetRequest+0x104>
    {
        // Access Error : Device reports Read-Write denied.
        bb_clear(data);
   23756:	6838      	ldr	r0, [r7, #0]
   23758:	f7e0 f804 	bl	3764 <bb_clear>
        resetBlockIndex(&settings->base);
   2375c:	687b      	ldr	r3, [r7, #4]
   2375e:	4618      	mov	r0, r3
   23760:	f7e8 faaa 	bl	bcb8 <resetBlockIndex>
		if (ret == DLMS_ERROR_CODE_UNMATCH_TYPE)
   23764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23766:	2b0c      	cmp	r3, #12
   23768:	d103      	bne.n	23772 <svr_handleSetRequest+0xfe>
		{
			p.status = DLMS_ERROR_CODE_UNMATCH_TYPE;
   2376a:	230c      	movs	r3, #12
   2376c:	f887 3020 	strb.w	r3, [r7, #32]
   23770:	e002      	b.n	23778 <svr_handleSetRequest+0x104>
		}
		else
		{
			p.status = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   23772:	2303      	movs	r3, #3
   23774:	f887 3020 	strb.w	r3, [r7, #32]
		}
    }
    return dlms_getLNPdu(&p, data);
   23778:	f107 030c 	add.w	r3, r7, #12
   2377c:	6839      	ldr	r1, [r7, #0]
   2377e:	4618      	mov	r0, r3
   23780:	f7e7 fa2c 	bl	abdc <dlms_getLNPdu>
   23784:	4603      	mov	r3, r0
}
   23786:	4618      	mov	r0, r3
   23788:	3734      	adds	r7, #52	; 0x34
   2378a:	46bd      	mov	sp, r7
   2378c:	bd90      	pop	{r4, r7, pc}
   2378e:	bf00      	nop

00023790 <svr_getRequestNormal>:

int svr_getRequestNormal(
    dlmsServerSettings* settings,
    gxByteBuffer *data,
    unsigned char invokeId)
{
   23790:	b590      	push	{r4, r7, lr}
   23792:	b09d      	sub	sp, #116	; 0x74
   23794:	af06      	add	r7, sp, #24
   23796:	60f8      	str	r0, [r7, #12]
   23798:	60b9      	str	r1, [r7, #8]
   2379a:	4613      	mov	r3, r2
   2379c:	71fb      	strb	r3, [r7, #7]
    unsigned short ci;
    gxValueEventArg *e;
    unsigned char index;
    int ret;
    unsigned char *ln;
    DLMS_ERROR_CODE status = DLMS_ERROR_CODE_OK;
   2379e:	2300      	movs	r3, #0
   237a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    settings->base.count = 0;
   237a4:	68fb      	ldr	r3, [r7, #12]
   237a6:	2200      	movs	r2, #0
   237a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    settings->base.index = 0;
   237ac:	68fb      	ldr	r3, [r7, #12]
   237ae:	2200      	movs	r2, #0
   237b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    resetBlockIndex(&settings->base);
   237b4:	68fb      	ldr	r3, [r7, #12]
   237b6:	4618      	mov	r0, r3
   237b8:	f7e8 fa7e 	bl	bcb8 <resetBlockIndex>
    // CI
    if ((ret = bb_getUInt16(data, &ci)) != 0)
   237bc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   237c0:	4619      	mov	r1, r3
   237c2:	68b8      	ldr	r0, [r7, #8]
   237c4:	f7e0 f854 	bl	3870 <bb_getUInt16>
   237c8:	6578      	str	r0, [r7, #84]	; 0x54
   237ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   237cc:	2b00      	cmp	r3, #0
   237ce:	d001      	beq.n	237d4 <svr_getRequestNormal+0x44>
    {
        return ret;
   237d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   237d2:	e1c1      	b.n	23b58 <svr_getRequestNormal+0x3c8>
    }
    ln = data->data + data->position;
   237d4:	68bb      	ldr	r3, [r7, #8]
   237d6:	681b      	ldr	r3, [r3, #0]
   237d8:	68ba      	ldr	r2, [r7, #8]
   237da:	8912      	ldrh	r2, [r2, #8]
   237dc:	4413      	add	r3, r2
   237de:	64fb      	str	r3, [r7, #76]	; 0x4c
    data->position += 6;
   237e0:	68bb      	ldr	r3, [r7, #8]
   237e2:	891b      	ldrh	r3, [r3, #8]
   237e4:	3306      	adds	r3, #6
   237e6:	b29a      	uxth	r2, r3
   237e8:	68bb      	ldr	r3, [r7, #8]
   237ea:	811a      	strh	r2, [r3, #8]
    // Attribute Id
    if ((ret = bb_getUInt8(data, &index)) != 0)
   237ec:	f107 0339 	add.w	r3, r7, #57	; 0x39
   237f0:	4619      	mov	r1, r3
   237f2:	68b8      	ldr	r0, [r7, #8]
   237f4:	f7df ffda 	bl	37ac <bb_getUInt8>
   237f8:	6578      	str	r0, [r7, #84]	; 0x54
   237fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   237fc:	2b00      	cmp	r3, #0
   237fe:	d001      	beq.n	23804 <svr_getRequestNormal+0x74>
    {
        return ret;
   23800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23802:	e1a9      	b.n	23b58 <svr_getRequestNormal+0x3c8>
    }

    e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   23804:	2048      	movs	r0, #72	; 0x48
   23806:	f006 f91d 	bl	29a44 <malloc>
   2380a:	4603      	mov	r3, r0
   2380c:	64bb      	str	r3, [r7, #72]	; 0x48
    ve_init(e);
   2380e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   23810:	f7fd ff82 	bl	21718 <ve_init>
    e->value.byteArr = data;
   23814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23816:	68ba      	ldr	r2, [r7, #8]
   23818:	609a      	str	r2, [r3, #8]
    e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   2381a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2381c:	2209      	movs	r2, #9
   2381e:	701a      	strb	r2, [r3, #0]
    e->index = index;
   23820:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
   23824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23826:	761a      	strb	r2, [r3, #24]
    vec_init(&list);
   23828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   2382c:	4618      	mov	r0, r3
   2382e:	f7fd fea7 	bl	21580 <vec_init>
    vec_push(&list, e);
   23832:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   23836:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   23838:	4618      	mov	r0, r3
   2383a:	f7fd feb7 	bl	215ac <vec_push>
    // Access selection
    unsigned char selection;
    if ((ret = bb_getUInt8(data, &selection)) != 0)
   2383e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   23842:	4619      	mov	r1, r3
   23844:	68b8      	ldr	r0, [r7, #8]
   23846:	f7df ffb1 	bl	37ac <bb_getUInt8>
   2384a:	6578      	str	r0, [r7, #84]	; 0x54
   2384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2384e:	2b00      	cmp	r3, #0
   23850:	d006      	beq.n	23860 <svr_getRequestNormal+0xd0>
    {
        vec_init(&list);
   23852:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   23856:	4618      	mov	r0, r3
   23858:	f7fd fe92 	bl	21580 <vec_init>
        return ret;
   2385c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2385e:	e17b      	b.n	23b58 <svr_getRequestNormal+0x3c8>
    }
    if (selection != 0)
   23860:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   23864:	2b00      	cmp	r3, #0
   23866:	d022      	beq.n	238ae <svr_getRequestNormal+0x11e>
    {
        gxDataInfo di;
        di_init(&di);
   23868:	f107 0310 	add.w	r3, r7, #16
   2386c:	4618      	mov	r0, r3
   2386e:	f7e2 fc75 	bl	615c <di_init>
        if ((ret = bb_getUInt8(data, &e->selector)) != 0 ||
   23872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23874:	331a      	adds	r3, #26
   23876:	4619      	mov	r1, r3
   23878:	68b8      	ldr	r0, [r7, #8]
   2387a:	f7df ff97 	bl	37ac <bb_getUInt8>
   2387e:	6578      	str	r0, [r7, #84]	; 0x54
   23880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23882:	2b00      	cmp	r3, #0
   23884:	d10c      	bne.n	238a0 <svr_getRequestNormal+0x110>
            (ret = dlms_getData(data, &di, &e->parameters)) != 0)
   23886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23888:	f103 0220 	add.w	r2, r3, #32
    }
    if (selection != 0)
    {
        gxDataInfo di;
        di_init(&di);
        if ((ret = bb_getUInt8(data, &e->selector)) != 0 ||
   2388c:	f107 0310 	add.w	r3, r7, #16
   23890:	4619      	mov	r1, r3
   23892:	68b8      	ldr	r0, [r7, #8]
   23894:	f7e4 f9b4 	bl	7c00 <dlms_getData>
   23898:	6578      	str	r0, [r7, #84]	; 0x54
   2389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2389c:	2b00      	cmp	r3, #0
   2389e:	d006      	beq.n	238ae <svr_getRequestNormal+0x11e>
            (ret = dlms_getData(data, &di, &e->parameters)) != 0)
        {
            vec_init(&list);
   238a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   238a4:	4618      	mov	r0, r3
   238a6:	f7fd fe6b 	bl	21580 <vec_init>
            return ret;
   238aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   238ac:	e154      	b.n	23b58 <svr_getRequestNormal+0x3c8>
        }
    }
    bb_clear(data);
   238ae:	68b8      	ldr	r0, [r7, #8]
   238b0:	f7df ff58 	bl	3764 <bb_clear>
    if ((ret = oa_findByLN(&settings->base.objects, (DLMS_OBJECT_TYPE)ci, ln, &e->target)) != 0)
   238b4:	68fb      	ldr	r3, [r7, #12]
   238b6:	f103 0074 	add.w	r0, r3, #116	; 0x74
   238ba:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
   238bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   238be:	3314      	adds	r3, #20
   238c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   238c2:	f7fe fd11 	bl	222e8 <oa_findByLN>
   238c6:	6578      	str	r0, [r7, #84]	; 0x54
   238c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   238ca:	2b00      	cmp	r3, #0
   238cc:	d006      	beq.n	238dc <svr_getRequestNormal+0x14c>
    {
        vec_clear(&list);
   238ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   238d2:	4618      	mov	r0, r3
   238d4:	f7fd fec6 	bl	21664 <vec_clear>
        return ret;
   238d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   238da:	e13d      	b.n	23b58 <svr_getRequestNormal+0x3c8>
    }

    if (e->target == NULL)
   238dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   238de:	695b      	ldr	r3, [r3, #20]
   238e0:	2b00      	cmp	r3, #0
   238e2:	d108      	bne.n	238f6 <svr_getRequestNormal+0x166>
    {
        ret = svr_findObject(&settings->base, (DLMS_OBJECT_TYPE)ci, 0, ln, e);
   238e4:	68f8      	ldr	r0, [r7, #12]
   238e6:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
   238e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   238ea:	9300      	str	r3, [sp, #0]
   238ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   238ee:	2200      	movs	r2, #0
   238f0:	f005 fb04 	bl	28efc <svr_findObject>
   238f4:	6578      	str	r0, [r7, #84]	; 0x54
    }
    if (e->target == NULL)
   238f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   238f8:	695b      	ldr	r3, [r3, #20]
   238fa:	2b00      	cmp	r3, #0
   238fc:	d103      	bne.n	23906 <svr_getRequestNormal+0x176>
    {
        // Access Error : Device reports a undefined object.
        status = DLMS_ERROR_CODE_UNDEFINED_OBJECT;
   238fe:	2304      	movs	r3, #4
   23900:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   23904:	e0b1      	b.n	23a6a <svr_getRequestNormal+0x2da>
    }
    else
    {
        DLMS_ACCESS_MODE mode = svr_getAttributeAccess(&settings->base, e->target, index);
   23906:	68f8      	ldr	r0, [r7, #12]
   23908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2390a:	695b      	ldr	r3, [r3, #20]
   2390c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
   23910:	4619      	mov	r1, r3
   23912:	f005 fd0f 	bl	29334 <svr_getAttributeAccess>
   23916:	4603      	mov	r3, r0
   23918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if ((mode & DLMS_ACCESS_MODE_READ) == 0)
   2391c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   23920:	f003 0301 	and.w	r3, r3, #1
   23924:	2b00      	cmp	r3, #0
   23926:	d103      	bne.n	23930 <svr_getRequestNormal+0x1a0>
        {
            status = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   23928:	2303      	movs	r3, #3
   2392a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   2392e:	e09c      	b.n	23a6a <svr_getRequestNormal+0x2da>
        }
        else
        {
            //Handle default Association LN read as a special case.
            static const unsigned char DEFAULT_ASSOCIATION[6] = { 0, 0, 40, 0, 0, 255 };
            if (ci == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME && index == 1 && memcmp(DEFAULT_ASSOCIATION, ln, 6) == 0)
   23930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   23932:	2b0f      	cmp	r3, #15
   23934:	d12a      	bne.n	2398c <svr_getRequestNormal+0x1fc>
   23936:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   2393a:	2b01      	cmp	r3, #1
   2393c:	d126      	bne.n	2398c <svr_getRequestNormal+0x1fc>
   2393e:	2206      	movs	r2, #6
   23940:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   23942:	4887      	ldr	r0, [pc, #540]	; (23b60 <svr_getRequestNormal+0x3d0>)
   23944:	f006 f88e 	bl	29a64 <memcmp>
   23948:	4603      	mov	r3, r0
   2394a:	2b00      	cmp	r3, #0
   2394c:	d11e      	bne.n	2398c <svr_getRequestNormal+0x1fc>
            {
                e->byteArray = 1;
   2394e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23950:	2201      	movs	r2, #1
   23952:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   23956:	2109      	movs	r1, #9
   23958:	68b8      	ldr	r0, [r7, #8]
   2395a:	f7df fa5b 	bl	2e14 <bb_setUInt8>
   2395e:	6578      	str	r0, [r7, #84]	; 0x54
   23960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23962:	2b00      	cmp	r3, #0
   23964:	d110      	bne.n	23988 <svr_getRequestNormal+0x1f8>
   23966:	2106      	movs	r1, #6
   23968:	68b8      	ldr	r0, [r7, #8]
   2396a:	f7df fa53 	bl	2e14 <bb_setUInt8>
   2396e:	6578      	str	r0, [r7, #84]	; 0x54
   23970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23972:	2b00      	cmp	r3, #0
   23974:	d108      	bne.n	23988 <svr_getRequestNormal+0x1f8>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   23976:	2206      	movs	r2, #6
   23978:	4979      	ldr	r1, [pc, #484]	; (23b60 <svr_getRequestNormal+0x3d0>)
   2397a:	68b8      	ldr	r0, [r7, #8]
   2397c:	f7df fdf0 	bl	3560 <bb_set>
   23980:	6578      	str	r0, [r7, #84]	; 0x54
   23982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23984:	2b00      	cmp	r3, #0
   23986:	d02b      	beq.n	239e0 <svr_getRequestNormal+0x250>
                    (ret = bb_set(data, DEFAULT_ASSOCIATION, 6)) != 0)
                {
                    return ret;
   23988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2398a:	e0e5      	b.n	23b58 <svr_getRequestNormal+0x3c8>
                }
            }
            else
            {
                svr_preRead(&settings->base, &list);
   2398c:	68fb      	ldr	r3, [r7, #12]
   2398e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   23992:	4611      	mov	r1, r2
   23994:	4618      	mov	r0, r3
   23996:	f005 fac7 	bl	28f28 <svr_preRead>
                if (!e->handled)
   2399a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2399c:	7c1b      	ldrb	r3, [r3, #16]
   2399e:	2b00      	cmp	r3, #0
   239a0:	d11f      	bne.n	239e2 <svr_getRequestNormal+0x252>
                {
                    settings->base.count = e->transactionEndIndex - e->transactionStartIndex;
   239a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   239a4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   239a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   239aa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   239ae:	1ad3      	subs	r3, r2, r3
   239b0:	b29a      	uxth	r2, r3
   239b2:	68fb      	ldr	r3, [r7, #12]
   239b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                    if ((ret = cosem_getValue(&settings->base, e)) != 0)
   239b8:	68fb      	ldr	r3, [r7, #12]
   239ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   239bc:	4618      	mov	r0, r3
   239be:	f7f0 fbfd 	bl	141bc <cosem_getValue>
   239c2:	6578      	str	r0, [r7, #84]	; 0x54
   239c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   239c6:	2b00      	cmp	r3, #0
   239c8:	d002      	beq.n	239d0 <svr_getRequestNormal+0x240>
                    {
                        status = DLMS_ERROR_CODE_HARDWARE_FAULT;
   239ca:	2301      	movs	r3, #1
   239cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                    svr_postRead(&settings->base, &list);
   239d0:	68fb      	ldr	r3, [r7, #12]
   239d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   239d6:	4611      	mov	r1, r2
   239d8:	4618      	mov	r0, r3
   239da:	f005 fc27 	bl	2922c <svr_postRead>
   239de:	e000      	b.n	239e2 <svr_getRequestNormal+0x252>
            //Handle default Association LN read as a special case.
            static const unsigned char DEFAULT_ASSOCIATION[6] = { 0, 0, 40, 0, 0, 255 };
            if (ci == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME && index == 1 && memcmp(DEFAULT_ASSOCIATION, ln, 6) == 0)
            {
                e->byteArray = 1;
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   239e0:	bf00      	nop
                        status = DLMS_ERROR_CODE_HARDWARE_FAULT;
                    }
                    svr_postRead(&settings->base, &list);
                }
            }
            if (status == 0)
   239e2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   239e6:	2b00      	cmp	r3, #0
   239e8:	d103      	bne.n	239f2 <svr_getRequestNormal+0x262>
            {
                status = e->error;
   239ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   239ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   239ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }
            if (status == 0)
   239f2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   239f6:	2b00      	cmp	r3, #0
   239f8:	d130      	bne.n	23a5c <svr_getRequestNormal+0x2cc>
            {
                if (!e->byteArray)
   239fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   239fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   23a00:	2b00      	cmp	r3, #0
   23a02:	d10e      	bne.n	23a22 <svr_getRequestNormal+0x292>
                {
                    if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
   23a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a06:	781b      	ldrb	r3, [r3, #0]
   23a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23a0a:	4619      	mov	r1, r3
   23a0c:	68b8      	ldr	r0, [r7, #8]
   23a0e:	f7e3 f9bb 	bl	6d88 <dlms_setData>
   23a12:	6578      	str	r0, [r7, #84]	; 0x54
   23a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23a16:	2b00      	cmp	r3, #0
   23a18:	d027      	beq.n	23a6a <svr_getRequestNormal+0x2da>
                    {
                        status = DLMS_ERROR_CODE_HARDWARE_FAULT;
   23a1a:	2301      	movs	r3, #1
   23a1c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   23a20:	e023      	b.n	23a6a <svr_getRequestNormal+0x2da>
                    }
                }
                else if (!bb_isAttached(e->value.byteArr))
   23a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a24:	689b      	ldr	r3, [r3, #8]
   23a26:	4618      	mov	r0, r3
   23a28:	f7df f930 	bl	2c8c <bb_isAttached>
   23a2c:	4603      	mov	r3, r0
   23a2e:	2b00      	cmp	r3, #0
   23a30:	d11b      	bne.n	23a6a <svr_getRequestNormal+0x2da>
                {
                    if ((ret = bb_set2(data, e->value.byteArr, 0, e->value.byteArr->size)) != 0)
   23a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a34:	6899      	ldr	r1, [r3, #8]
   23a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a38:	689b      	ldr	r3, [r3, #8]
   23a3a:	88db      	ldrh	r3, [r3, #6]
   23a3c:	2200      	movs	r2, #0
   23a3e:	68b8      	ldr	r0, [r7, #8]
   23a40:	f7df fdee 	bl	3620 <bb_set2>
   23a44:	6578      	str	r0, [r7, #84]	; 0x54
   23a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23a48:	2b00      	cmp	r3, #0
   23a4a:	d002      	beq.n	23a52 <svr_getRequestNormal+0x2c2>
                    {
                        status = DLMS_ERROR_CODE_HARDWARE_FAULT;
   23a4c:	2301      	movs	r3, #1
   23a4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                    var_clear(&e->value);
   23a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a54:	4618      	mov	r0, r3
   23a56:	f002 fb77 	bl	26148 <var_clear>
   23a5a:	e006      	b.n	23a6a <svr_getRequestNormal+0x2da>
                }
            }
            else if (status != 0)
   23a5c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   23a60:	2b00      	cmp	r3, #0
   23a62:	d002      	beq.n	23a6a <svr_getRequestNormal+0x2da>
            {
                bb_clear(data);
   23a64:	68b8      	ldr	r0, [r7, #8]
   23a66:	f7df fe7d 	bl	3764 <bb_clear>
            }
        }
    }
    //PDU is used for serialization. Set data type to none so size is not changed.
    if (e->byteArray || (e->value.vt == DLMS_DATA_TYPE_OCTET_STRING && bb_isAttached(e->value.byteArr)))
   23a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a6c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   23a70:	2b00      	cmp	r3, #0
   23a72:	d10b      	bne.n	23a8c <svr_getRequestNormal+0x2fc>
   23a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a76:	781b      	ldrb	r3, [r3, #0]
   23a78:	2b09      	cmp	r3, #9
   23a7a:	d10a      	bne.n	23a92 <svr_getRequestNormal+0x302>
   23a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a7e:	689b      	ldr	r3, [r3, #8]
   23a80:	4618      	mov	r0, r3
   23a82:	f7df f903 	bl	2c8c <bb_isAttached>
   23a86:	4603      	mov	r3, r0
   23a88:	2b00      	cmp	r3, #0
   23a8a:	d002      	beq.n	23a92 <svr_getRequestNormal+0x302>
    {
        e->value.vt = DLMS_DATA_TYPE_NONE;
   23a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a8e:	2200      	movs	r2, #0
   23a90:	701a      	strb	r2, [r3, #0]
    }
    gxLNParameters p;
    params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_GET_RESPONSE, 1, NULL, data, status, settings->info.encryptedCommand);
   23a92:	68f9      	ldr	r1, [r7, #12]
   23a94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   23a98:	b2db      	uxtb	r3, r3
   23a9a:	68fa      	ldr	r2, [r7, #12]
   23a9c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
   23aa0:	79fc      	ldrb	r4, [r7, #7]
   23aa2:	f107 0018 	add.w	r0, r7, #24
   23aa6:	9204      	str	r2, [sp, #16]
   23aa8:	9303      	str	r3, [sp, #12]
   23aaa:	68bb      	ldr	r3, [r7, #8]
   23aac:	9302      	str	r3, [sp, #8]
   23aae:	2300      	movs	r3, #0
   23ab0:	9301      	str	r3, [sp, #4]
   23ab2:	2301      	movs	r3, #1
   23ab4:	9300      	str	r3, [sp, #0]
   23ab6:	23c4      	movs	r3, #196	; 0xc4
   23ab8:	4622      	mov	r2, r4
   23aba:	f7fe fc91 	bl	223e0 <params_initLN>
    ret = dlms_getLNPdu(&p, data);
   23abe:	f107 0318 	add.w	r3, r7, #24
   23ac2:	68b9      	ldr	r1, [r7, #8]
   23ac4:	4618      	mov	r0, r3
   23ac6:	f7e7 f889 	bl	abdc <dlms_getLNPdu>
   23aca:	6578      	str	r0, [r7, #84]	; 0x54
    if (settings->base.count != settings->base.index || data->size > settings->base.maxPduSize)
   23acc:	68fb      	ldr	r3, [r7, #12]
   23ace:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
   23ad2:	68fb      	ldr	r3, [r7, #12]
   23ad4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   23ad8:	429a      	cmp	r2, r3
   23ada:	d106      	bne.n	23aea <svr_getRequestNormal+0x35a>
   23adc:	68bb      	ldr	r3, [r7, #8]
   23ade:	88da      	ldrh	r2, [r3, #6]
   23ae0:	68fb      	ldr	r3, [r7, #12]
   23ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   23ae6:	429a      	cmp	r2, r3
   23ae8:	d930      	bls.n	23b4c <svr_getRequestNormal+0x3bc>
    {
        e->transaction = 1;
   23aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23aec:	2201      	movs	r2, #1
   23aee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        trans_clear(&settings->transaction);
   23af2:	68fb      	ldr	r3, [r7, #12]
   23af4:	f503 738a 	add.w	r3, r3, #276	; 0x114
   23af8:	4618      	mov	r0, r3
   23afa:	f7e8 fa55 	bl	bfa8 <trans_clear>
        settings->transaction.targets = list;
   23afe:	68fb      	ldr	r3, [r7, #12]
   23b00:	f503 738c 	add.w	r3, r3, #280	; 0x118
   23b04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   23b08:	e892 0003 	ldmia.w	r2, {r0, r1}
   23b0c:	e883 0003 	stmia.w	r3, {r0, r1}
        vec_init(&list);
   23b10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   23b14:	4618      	mov	r0, r3
   23b16:	f7fd fd33 	bl	21580 <vec_init>
        settings->transaction.command = DLMS_COMMAND_GET_REQUEST;
   23b1a:	68fb      	ldr	r3, [r7, #12]
   23b1c:	22c0      	movs	r2, #192	; 0xc0
   23b1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        if (!bb_isAttached(data))
   23b22:	68b8      	ldr	r0, [r7, #8]
   23b24:	f7df f8b2 	bl	2c8c <bb_isAttached>
   23b28:	4603      	mov	r3, r0
   23b2a:	2b00      	cmp	r3, #0
   23b2c:	d10e      	bne.n	23b4c <svr_getRequestNormal+0x3bc>
        {
            bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   23b2e:	68fb      	ldr	r3, [r7, #12]
   23b30:	f503 7090 	add.w	r0, r3, #288	; 0x120
   23b34:	68bb      	ldr	r3, [r7, #8]
   23b36:	8919      	ldrh	r1, [r3, #8]
   23b38:	68bb      	ldr	r3, [r7, #8]
   23b3a:	88da      	ldrh	r2, [r3, #6]
   23b3c:	68bb      	ldr	r3, [r7, #8]
   23b3e:	891b      	ldrh	r3, [r3, #8]
   23b40:	1ad3      	subs	r3, r2, r3
   23b42:	b29b      	uxth	r3, r3
   23b44:	460a      	mov	r2, r1
   23b46:	68b9      	ldr	r1, [r7, #8]
   23b48:	f7df fd6a 	bl	3620 <bb_set2>
        }
    }
    vec_clear(&list);
   23b4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   23b50:	4618      	mov	r0, r3
   23b52:	f7fd fd87 	bl	21664 <vec_clear>
    return ret;
   23b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   23b58:	4618      	mov	r0, r3
   23b5a:	375c      	adds	r7, #92	; 0x5c
   23b5c:	46bd      	mov	sp, r7
   23b5e:	bd90      	pop	{r4, r7, pc}
   23b60:	0002cefc 	.word	0x0002cefc

00023b64 <svr_getRequestNextDataBlock>:

int svr_getRequestNextDataBlock(
    dlmsServerSettings* settings,
    gxByteBuffer *data,
    unsigned char invokeId)
{
   23b64:	b580      	push	{r7, lr}
   23b66:	b098      	sub	sp, #96	; 0x60
   23b68:	af06      	add	r7, sp, #24
   23b6a:	60f8      	str	r0, [r7, #12]
   23b6c:	60b9      	str	r1, [r7, #8]
   23b6e:	4613      	mov	r3, r2
   23b70:	71fb      	strb	r3, [r7, #7]
    gxLNParameters p;
    unsigned char moreData;
    int ret;
    unsigned long index, pos;
    // Get block index.
    if ((ret = bb_getUInt32(data, &index)) != 0)
   23b72:	f107 0314 	add.w	r3, r7, #20
   23b76:	4619      	mov	r1, r3
   23b78:	68b8      	ldr	r0, [r7, #8]
   23b7a:	f7df fea9 	bl	38d0 <bb_getUInt32>
   23b7e:	6438      	str	r0, [r7, #64]	; 0x40
   23b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23b82:	2b00      	cmp	r3, #0
   23b84:	d001      	beq.n	23b8a <svr_getRequestNextDataBlock+0x26>
    {
        return ret;
   23b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23b88:	e10d      	b.n	23da6 <svr_getRequestNextDataBlock+0x242>
    }
    bb_clear(data);
   23b8a:	68b8      	ldr	r0, [r7, #8]
   23b8c:	f7df fdea 	bl	3764 <bb_clear>
    if (index != settings->base.blockIndex)
   23b90:	68fb      	ldr	r3, [r7, #12]
   23b92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   23b96:	697b      	ldr	r3, [r7, #20]
   23b98:	429a      	cmp	r2, r3
   23b9a:	d01a      	beq.n	23bd2 <svr_getRequestNextDataBlock+0x6e>
    {
        params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_GET_RESPONSE, 2,
   23b9c:	68f9      	ldr	r1, [r7, #12]
   23b9e:	68fb      	ldr	r3, [r7, #12]
   23ba0:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   23ba4:	79fa      	ldrb	r2, [r7, #7]
   23ba6:	f107 0018 	add.w	r0, r7, #24
   23baa:	9304      	str	r3, [sp, #16]
   23bac:	2313      	movs	r3, #19
   23bae:	9303      	str	r3, [sp, #12]
   23bb0:	2300      	movs	r3, #0
   23bb2:	9302      	str	r3, [sp, #8]
   23bb4:	2300      	movs	r3, #0
   23bb6:	9301      	str	r3, [sp, #4]
   23bb8:	2302      	movs	r3, #2
   23bba:	9300      	str	r3, [sp, #0]
   23bbc:	23c4      	movs	r3, #196	; 0xc4
   23bbe:	f7fe fc0f 	bl	223e0 <params_initLN>
            NULL, NULL, DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID, settings->info.encryptedCommand);
        return dlms_getLNPdu(&p, data);
   23bc2:	f107 0318 	add.w	r3, r7, #24
   23bc6:	68b9      	ldr	r1, [r7, #8]
   23bc8:	4618      	mov	r0, r3
   23bca:	f7e7 f807 	bl	abdc <dlms_getLNPdu>
   23bce:	4603      	mov	r3, r0
   23bd0:	e0e9      	b.n	23da6 <svr_getRequestNextDataBlock+0x242>
    }
    else
    {
        ++settings->base.blockIndex;
   23bd2:	68fb      	ldr	r3, [r7, #12]
   23bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   23bd8:	1c5a      	adds	r2, r3, #1
   23bda:	68fb      	ldr	r3, [r7, #12]
   23bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_GET_RESPONSE, 2, NULL, data, DLMS_ERROR_CODE_OK, settings->info.encryptedCommand);
   23be0:	68f9      	ldr	r1, [r7, #12]
   23be2:	68fb      	ldr	r3, [r7, #12]
   23be4:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   23be8:	79fa      	ldrb	r2, [r7, #7]
   23bea:	f107 0018 	add.w	r0, r7, #24
   23bee:	9304      	str	r3, [sp, #16]
   23bf0:	2300      	movs	r3, #0
   23bf2:	9303      	str	r3, [sp, #12]
   23bf4:	68bb      	ldr	r3, [r7, #8]
   23bf6:	9302      	str	r3, [sp, #8]
   23bf8:	2300      	movs	r3, #0
   23bfa:	9301      	str	r3, [sp, #4]
   23bfc:	2302      	movs	r3, #2
   23bfe:	9300      	str	r3, [sp, #0]
   23c00:	23c4      	movs	r3, #196	; 0xc4
   23c02:	f7fe fbed 	bl	223e0 <params_initLN>
        // If transaction is not in progress.
        if (settings->transaction.command == DLMS_COMMAND_NONE)
   23c06:	68fb      	ldr	r3, [r7, #12]
   23c08:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   23c0c:	2b00      	cmp	r3, #0
   23c0e:	d103      	bne.n	23c18 <svr_getRequestNextDataBlock+0xb4>
        {
            p.status = DLMS_ERROR_CODE_NO_LONG_GET_OR_READ_IN_PROGRESS;
   23c10:	2310      	movs	r3, #16
   23c12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   23c16:	e0c5      	b.n	23da4 <svr_getRequestNextDataBlock+0x240>
        }
        else
        {
            bb_set2(data, &settings->transaction.data, 0, settings->transaction.data.size);
   23c18:	68fb      	ldr	r3, [r7, #12]
   23c1a:	f503 7190 	add.w	r1, r3, #288	; 0x120
   23c1e:	68fb      	ldr	r3, [r7, #12]
   23c20:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
   23c24:	2200      	movs	r2, #0
   23c26:	68b8      	ldr	r0, [r7, #8]
   23c28:	f7df fcfa 	bl	3620 <bb_set2>
            bb_clear(&settings->transaction.data);
   23c2c:	68fb      	ldr	r3, [r7, #12]
   23c2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
   23c32:	4618      	mov	r0, r3
   23c34:	f7df fd96 	bl	3764 <bb_clear>
            moreData = settings->base.index != settings->base.count;
   23c38:	68fb      	ldr	r3, [r7, #12]
   23c3a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   23c3e:	68fb      	ldr	r3, [r7, #12]
   23c40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   23c44:	429a      	cmp	r2, r3
   23c46:	bf14      	ite	ne
   23c48:	2301      	movne	r3, #1
   23c4a:	2300      	moveq	r3, #0
   23c4c:	b2db      	uxtb	r3, r3
   23c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (moreData)
   23c52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   23c56:	2b00      	cmp	r3, #0
   23c58:	d070      	beq.n	23d3c <svr_getRequestNextDataBlock+0x1d8>
            {
                // If there is multiple blocks on the buffer.
                // This might happen when Max PDU size is very small.
                if (data->size < settings->base.maxPduSize)
   23c5a:	68bb      	ldr	r3, [r7, #8]
   23c5c:	88da      	ldrh	r2, [r3, #6]
   23c5e:	68fb      	ldr	r3, [r7, #12]
   23c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   23c64:	429a      	cmp	r2, r3
   23c66:	d269      	bcs.n	23d3c <svr_getRequestNextDataBlock+0x1d8>
                {
                    for (pos = 0; pos != settings->transaction.targets.size; ++pos)
   23c68:	2300      	movs	r3, #0
   23c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   23c6c:	e04e      	b.n	23d0c <svr_getRequestNextDataBlock+0x1a8>
                    {
                        if ((ret = vec_getByIndex(&settings->transaction.targets, pos, &e)) != 0)
   23c6e:	68fb      	ldr	r3, [r7, #12]
   23c70:	f503 738c 	add.w	r3, r3, #280	; 0x118
   23c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   23c76:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23c7a:	4618      	mov	r0, r3
   23c7c:	f7fd fd2e 	bl	216dc <vec_getByIndex>
   23c80:	6438      	str	r0, [r7, #64]	; 0x40
   23c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23c84:	2b00      	cmp	r3, #0
   23c86:	d149      	bne.n	23d1c <svr_getRequestNextDataBlock+0x1b8>
                        {
                            break;
                        }
                        e->value.byteArr = data;
   23c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23c8a:	68ba      	ldr	r2, [r7, #8]
   23c8c:	609a      	str	r2, [r3, #8]
                        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   23c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23c90:	2209      	movs	r2, #9
   23c92:	701a      	strb	r2, [r3, #0]
                        svr_preRead(&settings->base, &settings->transaction.targets);
   23c94:	68fa      	ldr	r2, [r7, #12]
   23c96:	68fb      	ldr	r3, [r7, #12]
   23c98:	f503 738c 	add.w	r3, r3, #280	; 0x118
   23c9c:	4619      	mov	r1, r3
   23c9e:	4610      	mov	r0, r2
   23ca0:	f005 f942 	bl	28f28 <svr_preRead>
                        if (!e->handled)
   23ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23ca6:	7c1b      	ldrb	r3, [r3, #16]
   23ca8:	2b00      	cmp	r3, #0
   23caa:	d114      	bne.n	23cd6 <svr_getRequestNextDataBlock+0x172>
                        {
                            if ((ret = cosem_getValue(&settings->base, e)) != 0)
   23cac:	68fb      	ldr	r3, [r7, #12]
   23cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23cb0:	4611      	mov	r1, r2
   23cb2:	4618      	mov	r0, r3
   23cb4:	f7f0 fa82 	bl	141bc <cosem_getValue>
   23cb8:	6438      	str	r0, [r7, #64]	; 0x40
   23cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23cbc:	2b00      	cmp	r3, #0
   23cbe:	d002      	beq.n	23cc6 <svr_getRequestNextDataBlock+0x162>
                            {
                                p.status = DLMS_ERROR_CODE_HARDWARE_FAULT;
   23cc0:	2301      	movs	r3, #1
   23cc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                            }
                            svr_postRead(&settings->base, &settings->transaction.targets);
   23cc6:	68fa      	ldr	r2, [r7, #12]
   23cc8:	68fb      	ldr	r3, [r7, #12]
   23cca:	f503 738c 	add.w	r3, r3, #280	; 0x118
   23cce:	4619      	mov	r1, r3
   23cd0:	4610      	mov	r0, r2
   23cd2:	f005 faab 	bl	2922c <svr_postRead>
                        }
                        // Add data.
                        if (e->byteArray)
   23cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23cd8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   23cdc:	2b00      	cmp	r3, #0
   23cde:	d003      	beq.n	23ce8 <svr_getRequestNextDataBlock+0x184>
                        {
                            e->value.vt = DLMS_DATA_TYPE_NONE;
   23ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23ce2:	2200      	movs	r2, #0
   23ce4:	701a      	strb	r2, [r3, #0]
   23ce6:	e00e      	b.n	23d06 <svr_getRequestNextDataBlock+0x1a2>
                        }
                        else
                        {
                            if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
   23ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23cea:	781b      	ldrb	r3, [r3, #0]
   23cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23cee:	4619      	mov	r1, r3
   23cf0:	68b8      	ldr	r0, [r7, #8]
   23cf2:	f7e3 f849 	bl	6d88 <dlms_setData>
   23cf6:	6438      	str	r0, [r7, #64]	; 0x40
   23cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23cfa:	2b00      	cmp	r3, #0
   23cfc:	d110      	bne.n	23d20 <svr_getRequestNextDataBlock+0x1bc>
                            {
                                break;
                            }
                            var_clear(&e->value);
   23cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23d00:	4618      	mov	r0, r3
   23d02:	f002 fa21 	bl	26148 <var_clear>
            {
                // If there is multiple blocks on the buffer.
                // This might happen when Max PDU size is very small.
                if (data->size < settings->base.maxPduSize)
                {
                    for (pos = 0; pos != settings->transaction.targets.size; ++pos)
   23d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23d08:	3301      	adds	r3, #1
   23d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   23d0c:	68fb      	ldr	r3, [r7, #12]
   23d0e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   23d12:	461a      	mov	r2, r3
   23d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23d16:	429a      	cmp	r2, r3
   23d18:	d1a9      	bne.n	23c6e <svr_getRequestNextDataBlock+0x10a>
   23d1a:	e002      	b.n	23d22 <svr_getRequestNextDataBlock+0x1be>
                    {
                        if ((ret = vec_getByIndex(&settings->transaction.targets, pos, &e)) != 0)
                        {
                            break;
   23d1c:	bf00      	nop
   23d1e:	e000      	b.n	23d22 <svr_getRequestNextDataBlock+0x1be>
                        }
                        else
                        {
                            if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
                            {
                                break;
   23d20:	bf00      	nop
                            }
                            var_clear(&e->value);
                        }
                    }
                    moreData = settings->base.index != settings->base.count;
   23d22:	68fb      	ldr	r3, [r7, #12]
   23d24:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   23d28:	68fb      	ldr	r3, [r7, #12]
   23d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   23d2e:	429a      	cmp	r2, r3
   23d30:	bf14      	ite	ne
   23d32:	2301      	movne	r3, #1
   23d34:	2300      	moveq	r3, #0
   23d36:	b2db      	uxtb	r3, r3
   23d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                }
            }
            p.multipleBlocks = 1;
   23d3c:	2301      	movs	r3, #1
   23d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            ret = dlms_getLNPdu(&p, data);
   23d42:	f107 0318 	add.w	r3, r7, #24
   23d46:	68b9      	ldr	r1, [r7, #8]
   23d48:	4618      	mov	r0, r3
   23d4a:	f7e6 ff47 	bl	abdc <dlms_getLNPdu>
   23d4e:	6438      	str	r0, [r7, #64]	; 0x40
            if (moreData || data->size - data->position != 0)
   23d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   23d54:	2b00      	cmp	r3, #0
   23d56:	d105      	bne.n	23d64 <svr_getRequestNextDataBlock+0x200>
   23d58:	68bb      	ldr	r3, [r7, #8]
   23d5a:	88da      	ldrh	r2, [r3, #6]
   23d5c:	68bb      	ldr	r3, [r7, #8]
   23d5e:	891b      	ldrh	r3, [r3, #8]
   23d60:	429a      	cmp	r2, r3
   23d62:	d015      	beq.n	23d90 <svr_getRequestNextDataBlock+0x22c>
            {
                //Append data to transaction data if buffer is not static.
                if (!bb_isAttached(data))
   23d64:	68b8      	ldr	r0, [r7, #8]
   23d66:	f7de ff91 	bl	2c8c <bb_isAttached>
   23d6a:	4603      	mov	r3, r0
   23d6c:	2b00      	cmp	r3, #0
   23d6e:	d119      	bne.n	23da4 <svr_getRequestNextDataBlock+0x240>
                {
                    bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   23d70:	68fb      	ldr	r3, [r7, #12]
   23d72:	f503 7090 	add.w	r0, r3, #288	; 0x120
   23d76:	68bb      	ldr	r3, [r7, #8]
   23d78:	8919      	ldrh	r1, [r3, #8]
   23d7a:	68bb      	ldr	r3, [r7, #8]
   23d7c:	88da      	ldrh	r2, [r3, #6]
   23d7e:	68bb      	ldr	r3, [r7, #8]
   23d80:	891b      	ldrh	r3, [r3, #8]
   23d82:	1ad3      	subs	r3, r2, r3
   23d84:	b29b      	uxth	r3, r3
   23d86:	460a      	mov	r2, r1
   23d88:	68b9      	ldr	r1, [r7, #8]
   23d8a:	f7df fc49 	bl	3620 <bb_set2>
            p.multipleBlocks = 1;
            ret = dlms_getLNPdu(&p, data);
            if (moreData || data->size - data->position != 0)
            {
                //Append data to transaction data if buffer is not static.
                if (!bb_isAttached(data))
   23d8e:	e009      	b.n	23da4 <svr_getRequestNextDataBlock+0x240>
                    bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
                }
            }
            else
            {
                trans_clear(&settings->transaction);
   23d90:	68fb      	ldr	r3, [r7, #12]
   23d92:	f503 738a 	add.w	r3, r3, #276	; 0x114
   23d96:	4618      	mov	r0, r3
   23d98:	f7e8 f906 	bl	bfa8 <trans_clear>
                resetBlockIndex(&settings->base);
   23d9c:	68fb      	ldr	r3, [r7, #12]
   23d9e:	4618      	mov	r0, r3
   23da0:	f7e7 ff8a 	bl	bcb8 <resetBlockIndex>
            }
        }
    }
    return ret;
   23da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
   23da6:	4618      	mov	r0, r3
   23da8:	3748      	adds	r7, #72	; 0x48
   23daa:	46bd      	mov	sp, r7
   23dac:	bd80      	pop	{r7, pc}
   23dae:	bf00      	nop

00023db0 <svr_getRequestWithList>:

int svr_getRequestWithList(
    dlmsServerSettings* settings,
    gxByteBuffer *data,
    unsigned char invokeId)
{
   23db0:	b580      	push	{r7, lr}
   23db2:	b09e      	sub	sp, #120	; 0x78
   23db4:	af06      	add	r7, sp, #24
   23db6:	60f8      	str	r0, [r7, #12]
   23db8:	60b9      	str	r1, [r7, #8]
   23dba:	4613      	mov	r3, r2
   23dbc:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char attributeIndex;
    unsigned short id;
    unsigned short pos, cnt;
    unsigned char *ln;
    if (hlp_getObjectCount2(data, &cnt) != 0)
   23dbe:	f107 031a 	add.w	r3, r7, #26
   23dc2:	4619      	mov	r1, r3
   23dc4:	68b8      	ldr	r0, [r7, #8]
   23dc6:	f7fd fd41 	bl	2184c <hlp_getObjectCount2>
   23dca:	4603      	mov	r3, r0
   23dcc:	2b00      	cmp	r3, #0
   23dce:	d002      	beq.n	23dd6 <svr_getRequestWithList+0x26>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   23dd0:	f44f 7381 	mov.w	r3, #258	; 0x102
   23dd4:	e19d      	b.n	24112 <svr_getRequestWithList+0x362>
    }
    vec_init(&list);
   23dd6:	f107 0320 	add.w	r3, r7, #32
   23dda:	4618      	mov	r0, r3
   23ddc:	f7fd fbd0 	bl	21580 <vec_init>
    for (pos = 0; pos != cnt; ++pos)
   23de0:	2300      	movs	r3, #0
   23de2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   23de6:	e0a6      	b.n	23f36 <svr_getRequestWithList+0x186>
    {
        if ((ret = bb_getUInt16(data, &id)) != 0)
   23de8:	f107 031c 	add.w	r3, r7, #28
   23dec:	4619      	mov	r1, r3
   23dee:	68b8      	ldr	r0, [r7, #8]
   23df0:	f7df fd3e 	bl	3870 <bb_getUInt16>
   23df4:	65b8      	str	r0, [r7, #88]	; 0x58
   23df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23df8:	2b00      	cmp	r3, #0
   23dfa:	d001      	beq.n	23e00 <svr_getRequestWithList+0x50>
        {
            return ret;
   23dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23dfe:	e188      	b.n	24112 <svr_getRequestWithList+0x362>
        }
        ci = (DLMS_OBJECT_TYPE)id;
   23e00:	8bbb      	ldrh	r3, [r7, #28]
   23e02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        ln = data->data + data->position;
   23e06:	68bb      	ldr	r3, [r7, #8]
   23e08:	681b      	ldr	r3, [r3, #0]
   23e0a:	68ba      	ldr	r2, [r7, #8]
   23e0c:	8912      	ldrh	r2, [r2, #8]
   23e0e:	4413      	add	r3, r2
   23e10:	653b      	str	r3, [r7, #80]	; 0x50
        data->position += 6;
   23e12:	68bb      	ldr	r3, [r7, #8]
   23e14:	891b      	ldrh	r3, [r3, #8]
   23e16:	3306      	adds	r3, #6
   23e18:	b29a      	uxth	r2, r3
   23e1a:	68bb      	ldr	r3, [r7, #8]
   23e1c:	811a      	strh	r2, [r3, #8]
        if ((ret = bb_getUInt8(data, &attributeIndex)) != 0)
   23e1e:	f107 031f 	add.w	r3, r7, #31
   23e22:	4619      	mov	r1, r3
   23e24:	68b8      	ldr	r0, [r7, #8]
   23e26:	f7df fcc1 	bl	37ac <bb_getUInt8>
   23e2a:	65b8      	str	r0, [r7, #88]	; 0x58
   23e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23e2e:	2b00      	cmp	r3, #0
   23e30:	d001      	beq.n	23e36 <svr_getRequestWithList+0x86>
        {
            return ret;
   23e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23e34:	e16d      	b.n	24112 <svr_getRequestWithList+0x362>
        }
        e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   23e36:	2048      	movs	r0, #72	; 0x48
   23e38:	f005 fe04 	bl	29a44 <malloc>
   23e3c:	4603      	mov	r3, r0
   23e3e:	64bb      	str	r3, [r7, #72]	; 0x48
        ve_init(e);
   23e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23e42:	4618      	mov	r0, r3
   23e44:	f7fd fc68 	bl	21718 <ve_init>
        e->index = attributeIndex;
   23e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23e4a:	7ffa      	ldrb	r2, [r7, #31]
   23e4c:	761a      	strb	r2, [r3, #24]
        vec_push(&list, e);
   23e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23e50:	f107 0320 	add.w	r3, r7, #32
   23e54:	4611      	mov	r1, r2
   23e56:	4618      	mov	r0, r3
   23e58:	f7fd fba8 	bl	215ac <vec_push>
        if ((ret = oa_findByLN(&settings->base.objects, ci, ln, &e->target)) != 0)
   23e5c:	68fb      	ldr	r3, [r7, #12]
   23e5e:	f103 0074 	add.w	r0, r3, #116	; 0x74
   23e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23e64:	3314      	adds	r3, #20
   23e66:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
   23e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   23e6c:	f7fe fa3c 	bl	222e8 <oa_findByLN>
   23e70:	65b8      	str	r0, [r7, #88]	; 0x58
   23e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23e74:	2b00      	cmp	r3, #0
   23e76:	d006      	beq.n	23e86 <svr_getRequestWithList+0xd6>
        {
            vec_clear(&list);
   23e78:	f107 0320 	add.w	r3, r7, #32
   23e7c:	4618      	mov	r0, r3
   23e7e:	f7fd fbf1 	bl	21664 <vec_clear>
            return ret;
   23e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23e84:	e145      	b.n	24112 <svr_getRequestWithList+0x362>
        }
        if (e->target == NULL)
   23e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23e88:	695b      	ldr	r3, [r3, #20]
   23e8a:	2b00      	cmp	r3, #0
   23e8c:	d109      	bne.n	23ea2 <svr_getRequestWithList+0xf2>
        {
            ret = svr_findObject(&settings->base, ci, 0, ln, e);
   23e8e:	68f8      	ldr	r0, [r7, #12]
   23e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23e92:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
   23e96:	9300      	str	r3, [sp, #0]
   23e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   23e9a:	2200      	movs	r2, #0
   23e9c:	f005 f82e 	bl	28efc <svr_findObject>
   23ea0:	65b8      	str	r0, [r7, #88]	; 0x58
        }
        if (e->target == NULL)
   23ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ea4:	695b      	ldr	r3, [r3, #20]
   23ea6:	2b00      	cmp	r3, #0
   23ea8:	d103      	bne.n	23eb2 <svr_getRequestWithList+0x102>
        {
            // Access Error : Device reports a undefined object.
            e->error = DLMS_ERROR_CODE_UNDEFINED_OBJECT;
   23eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23eac:	2204      	movs	r2, #4
   23eae:	861a      	strh	r2, [r3, #48]	; 0x30
   23eb0:	e03c      	b.n	23f2c <svr_getRequestWithList+0x17c>
        }
        else
        {
            if (svr_getAttributeAccess(&settings->base, e->target, attributeIndex) == DLMS_ACCESS_MODE_NONE)
   23eb2:	68f8      	ldr	r0, [r7, #12]
   23eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23eb6:	695b      	ldr	r3, [r3, #20]
   23eb8:	7ffa      	ldrb	r2, [r7, #31]
   23eba:	4619      	mov	r1, r3
   23ebc:	f005 fa3a 	bl	29334 <svr_getAttributeAccess>
   23ec0:	4603      	mov	r3, r0
   23ec2:	2b00      	cmp	r3, #0
   23ec4:	d103      	bne.n	23ece <svr_getRequestWithList+0x11e>
            {
                // Read Write denied.
                e->error = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   23ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ec8:	2203      	movs	r2, #3
   23eca:	861a      	strh	r2, [r3, #48]	; 0x30
   23ecc:	e02e      	b.n	23f2c <svr_getRequestWithList+0x17c>
            }
            else
            {
                // AccessSelection
                unsigned char selection;
                if ((ret = bb_getUInt8(data, &selection)) != 0)
   23ece:	f107 0319 	add.w	r3, r7, #25
   23ed2:	4619      	mov	r1, r3
   23ed4:	68b8      	ldr	r0, [r7, #8]
   23ed6:	f7df fc69 	bl	37ac <bb_getUInt8>
   23eda:	65b8      	str	r0, [r7, #88]	; 0x58
   23edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23ede:	2b00      	cmp	r3, #0
   23ee0:	d001      	beq.n	23ee6 <svr_getRequestWithList+0x136>
                {
                    return ret;
   23ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23ee4:	e115      	b.n	24112 <svr_getRequestWithList+0x362>
                }
                if (selection != 0)
   23ee6:	7e7b      	ldrb	r3, [r7, #25]
   23ee8:	2b00      	cmp	r3, #0
   23eea:	d01f      	beq.n	23f2c <svr_getRequestWithList+0x17c>
                {
                    gxDataInfo di;
                    di_init(&di);
   23eec:	f107 0310 	add.w	r3, r7, #16
   23ef0:	4618      	mov	r0, r3
   23ef2:	f7e2 f933 	bl	615c <di_init>
                    if ((ret = bb_getUInt8(data, &e->selector)) != 0)
   23ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ef8:	331a      	adds	r3, #26
   23efa:	4619      	mov	r1, r3
   23efc:	68b8      	ldr	r0, [r7, #8]
   23efe:	f7df fc55 	bl	37ac <bb_getUInt8>
   23f02:	65b8      	str	r0, [r7, #88]	; 0x58
   23f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f06:	2b00      	cmp	r3, #0
   23f08:	d001      	beq.n	23f0e <svr_getRequestWithList+0x15e>
                    {
                        return ret;
   23f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f0c:	e101      	b.n	24112 <svr_getRequestWithList+0x362>
                    }
                    if ((ret = dlms_getData(data, &di, &e->parameters)) != 0)
   23f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23f10:	f103 0220 	add.w	r2, r3, #32
   23f14:	f107 0310 	add.w	r3, r7, #16
   23f18:	4619      	mov	r1, r3
   23f1a:	68b8      	ldr	r0, [r7, #8]
   23f1c:	f7e3 fe70 	bl	7c00 <dlms_getData>
   23f20:	65b8      	str	r0, [r7, #88]	; 0x58
   23f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f24:	2b00      	cmp	r3, #0
   23f26:	d001      	beq.n	23f2c <svr_getRequestWithList+0x17c>
                    {
                        return ret;
   23f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f2a:	e0f2      	b.n	24112 <svr_getRequestWithList+0x362>
    if (hlp_getObjectCount2(data, &cnt) != 0)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    vec_init(&list);
    for (pos = 0; pos != cnt; ++pos)
   23f2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   23f30:	3301      	adds	r3, #1
   23f32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   23f36:	8b7b      	ldrh	r3, [r7, #26]
   23f38:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   23f3c:	429a      	cmp	r2, r3
   23f3e:	f47f af53 	bne.w	23de8 <svr_getRequestWithList+0x38>
                    }
                }
            }
        }
    }
    bb_clear(data);
   23f42:	68b8      	ldr	r0, [r7, #8]
   23f44:	f7df fc0e 	bl	3764 <bb_clear>
    svr_preRead(&settings->base, &list);
   23f48:	68fb      	ldr	r3, [r7, #12]
   23f4a:	f107 0220 	add.w	r2, r7, #32
   23f4e:	4611      	mov	r1, r2
   23f50:	4618      	mov	r0, r3
   23f52:	f004 ffe9 	bl	28f28 <svr_preRead>
    hlp_setObjectCount(cnt, data);
   23f56:	8b7b      	ldrh	r3, [r7, #26]
   23f58:	68b9      	ldr	r1, [r7, #8]
   23f5a:	4618      	mov	r0, r3
   23f5c:	f7fd fcbe 	bl	218dc <hlp_setObjectCount>
    for (pos = 0; pos != list.size; ++pos)
   23f60:	2300      	movs	r3, #0
   23f62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   23f66:	e0a3      	b.n	240b0 <svr_getRequestWithList+0x300>
    {
        if ((ret = vec_getByIndex(&list, pos, &e)) != 0)
   23f68:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
   23f6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   23f70:	f107 0320 	add.w	r3, r7, #32
   23f74:	4618      	mov	r0, r3
   23f76:	f7fd fbb1 	bl	216dc <vec_getByIndex>
   23f7a:	65b8      	str	r0, [r7, #88]	; 0x58
   23f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23f7e:	2b00      	cmp	r3, #0
   23f80:	f040 809f 	bne.w	240c2 <svr_getRequestWithList+0x312>
        {
            break;
        }
        if (!e->handled)
   23f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23f86:	7c1b      	ldrb	r3, [r3, #16]
   23f88:	2b00      	cmp	r3, #0
   23f8a:	d11e      	bne.n	23fca <svr_getRequestWithList+0x21a>
        {
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
            unsigned long pos2 = data->size;
#else
            unsigned short pos2 = data->size;
   23f8c:	68bb      	ldr	r3, [r7, #8]
   23f8e:	88db      	ldrh	r3, [r3, #6]
   23f90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
#endif
            bb_setUInt8(data, 0);
   23f94:	2100      	movs	r1, #0
   23f96:	68b8      	ldr	r0, [r7, #8]
   23f98:	f7de ff3c 	bl	2e14 <bb_setUInt8>
            if ((ret = cosem_getValue(&settings->base, e)) != 0)
   23f9c:	68fb      	ldr	r3, [r7, #12]
   23f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23fa0:	4611      	mov	r1, r2
   23fa2:	4618      	mov	r0, r3
   23fa4:	f7f0 f90a 	bl	141bc <cosem_getValue>
   23fa8:	65b8      	str	r0, [r7, #88]	; 0x58
   23faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23fac:	2b00      	cmp	r3, #0
   23fae:	d002      	beq.n	23fb6 <svr_getRequestWithList+0x206>
            {
                e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   23fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23fb2:	2201      	movs	r2, #1
   23fb4:	861a      	strh	r2, [r3, #48]	; 0x30
            }
            bb_setUInt8ByIndex(data, pos2, (unsigned char)e->error);
   23fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23fb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23fbc:	b2da      	uxtb	r2, r3
   23fbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   23fc2:	4619      	mov	r1, r3
   23fc4:	68b8      	ldr	r0, [r7, #8]
   23fc6:	f7de ff63 	bl	2e90 <bb_setUInt8ByIndex>
        }
        if (e->error == 0)
   23fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23fcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   23fd0:	2b00      	cmp	r3, #0
   23fd2:	d12f      	bne.n	24034 <svr_getRequestWithList+0x284>
        {
            if (!e->byteArray)
   23fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23fd6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   23fda:	2b00      	cmp	r3, #0
   23fdc:	d10e      	bne.n	23ffc <svr_getRequestWithList+0x24c>
            {
                if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
   23fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23fe0:	781b      	ldrb	r3, [r3, #0]
   23fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23fe4:	4619      	mov	r1, r3
   23fe6:	68b8      	ldr	r0, [r7, #8]
   23fe8:	f7e2 fece 	bl	6d88 <dlms_setData>
   23fec:	65b8      	str	r0, [r7, #88]	; 0x58
   23fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23ff0:	2b00      	cmp	r3, #0
   23ff2:	d01f      	beq.n	24034 <svr_getRequestWithList+0x284>
                {
                    e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   23ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ff6:	2201      	movs	r2, #1
   23ff8:	861a      	strh	r2, [r3, #48]	; 0x30
   23ffa:	e01b      	b.n	24034 <svr_getRequestWithList+0x284>
                }
            }
            else if (!bb_isAttached(e->value.byteArr))
   23ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23ffe:	689b      	ldr	r3, [r3, #8]
   24000:	4618      	mov	r0, r3
   24002:	f7de fe43 	bl	2c8c <bb_isAttached>
   24006:	4603      	mov	r3, r0
   24008:	2b00      	cmp	r3, #0
   2400a:	d113      	bne.n	24034 <svr_getRequestWithList+0x284>
            {
                if ((ret = bb_set2(data, e->value.byteArr, 0, e->value.byteArr->size)) != 0)
   2400c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2400e:	6899      	ldr	r1, [r3, #8]
   24010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24012:	689b      	ldr	r3, [r3, #8]
   24014:	88db      	ldrh	r3, [r3, #6]
   24016:	2200      	movs	r2, #0
   24018:	68b8      	ldr	r0, [r7, #8]
   2401a:	f7df fb01 	bl	3620 <bb_set2>
   2401e:	65b8      	str	r0, [r7, #88]	; 0x58
   24020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24022:	2b00      	cmp	r3, #0
   24024:	d002      	beq.n	2402c <svr_getRequestWithList+0x27c>
                {
                    e->error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   24026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24028:	2201      	movs	r2, #1
   2402a:	861a      	strh	r2, [r3, #48]	; 0x30
                }
                var_clear(&e->value);
   2402c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2402e:	4618      	mov	r0, r3
   24030:	f002 f88a 	bl	26148 <var_clear>
        if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
        {
            break;
        }
        */
        if (settings->base.index != settings->base.count)
   24034:	68fb      	ldr	r3, [r7, #12]
   24036:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   2403a:	68fb      	ldr	r3, [r7, #12]
   2403c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   24040:	429a      	cmp	r2, r3
   24042:	d030      	beq.n	240a6 <svr_getRequestWithList+0x2f6>
        {
            trans_clear(&settings->transaction);
   24044:	68fb      	ldr	r3, [r7, #12]
   24046:	f503 738a 	add.w	r3, r3, #276	; 0x114
   2404a:	4618      	mov	r0, r3
   2404c:	f7e7 ffac 	bl	bfa8 <trans_clear>
            settings->transaction.targets = list;
   24050:	68fb      	ldr	r3, [r7, #12]
   24052:	f503 738c 	add.w	r3, r3, #280	; 0x118
   24056:	f107 0220 	add.w	r2, r7, #32
   2405a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2405e:	e883 0003 	stmia.w	r3, {r0, r1}
            var_clear(&e->value);
   24062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24064:	4618      	mov	r0, r3
   24066:	f002 f86f 	bl	26148 <var_clear>
            vec_init(&list);
   2406a:	f107 0320 	add.w	r3, r7, #32
   2406e:	4618      	mov	r0, r3
   24070:	f7fd fa86 	bl	21580 <vec_init>
            settings->transaction.command = DLMS_COMMAND_GET_REQUEST;
   24074:	68fb      	ldr	r3, [r7, #12]
   24076:	22c0      	movs	r2, #192	; 0xc0
   24078:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            if (!bb_isAttached(data))
   2407c:	68b8      	ldr	r0, [r7, #8]
   2407e:	f7de fe05 	bl	2c8c <bb_isAttached>
   24082:	4603      	mov	r3, r0
   24084:	2b00      	cmp	r3, #0
   24086:	d10e      	bne.n	240a6 <svr_getRequestWithList+0x2f6>
            {
                bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   24088:	68fb      	ldr	r3, [r7, #12]
   2408a:	f503 7090 	add.w	r0, r3, #288	; 0x120
   2408e:	68bb      	ldr	r3, [r7, #8]
   24090:	8919      	ldrh	r1, [r3, #8]
   24092:	68bb      	ldr	r3, [r7, #8]
   24094:	88da      	ldrh	r2, [r3, #6]
   24096:	68bb      	ldr	r3, [r7, #8]
   24098:	891b      	ldrh	r3, [r3, #8]
   2409a:	1ad3      	subs	r3, r2, r3
   2409c:	b29b      	uxth	r3, r3
   2409e:	460a      	mov	r2, r1
   240a0:	68b9      	ldr	r1, [r7, #8]
   240a2:	f7df fabd 	bl	3620 <bb_set2>
        }
    }
    bb_clear(data);
    svr_preRead(&settings->base, &list);
    hlp_setObjectCount(cnt, data);
    for (pos = 0; pos != list.size; ++pos)
   240a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   240aa:	3301      	adds	r3, #1
   240ac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   240b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   240b4:	b29b      	uxth	r3, r3
   240b6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   240ba:	429a      	cmp	r2, r3
   240bc:	f47f af54 	bne.w	23f68 <svr_getRequestWithList+0x1b8>
   240c0:	e000      	b.n	240c4 <svr_getRequestWithList+0x314>
    {
        if ((ret = vec_getByIndex(&list, pos, &e)) != 0)
        {
            break;
   240c2:	bf00      	nop
            {
                bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
            }
        }
    }
    svr_postRead(&settings->base, &list);
   240c4:	68fb      	ldr	r3, [r7, #12]
   240c6:	f107 0220 	add.w	r2, r7, #32
   240ca:	4611      	mov	r1, r2
   240cc:	4618      	mov	r0, r3
   240ce:	f005 f8ad 	bl	2922c <svr_postRead>
    params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_GET_RESPONSE, 3, NULL, data, 0xFF, settings->info.encryptedCommand);
   240d2:	68f9      	ldr	r1, [r7, #12]
   240d4:	68fb      	ldr	r3, [r7, #12]
   240d6:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   240da:	79fa      	ldrb	r2, [r7, #7]
   240dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   240e0:	9304      	str	r3, [sp, #16]
   240e2:	23ff      	movs	r3, #255	; 0xff
   240e4:	9303      	str	r3, [sp, #12]
   240e6:	68bb      	ldr	r3, [r7, #8]
   240e8:	9302      	str	r3, [sp, #8]
   240ea:	2300      	movs	r3, #0
   240ec:	9301      	str	r3, [sp, #4]
   240ee:	2303      	movs	r3, #3
   240f0:	9300      	str	r3, [sp, #0]
   240f2:	23c4      	movs	r3, #196	; 0xc4
   240f4:	f7fe f974 	bl	223e0 <params_initLN>
    ret = dlms_getLNPdu(&p, data);
   240f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   240fc:	68b9      	ldr	r1, [r7, #8]
   240fe:	4618      	mov	r0, r3
   24100:	f7e6 fd6c 	bl	abdc <dlms_getLNPdu>
   24104:	65b8      	str	r0, [r7, #88]	; 0x58
    vec_clear(&list);
   24106:	f107 0320 	add.w	r3, r7, #32
   2410a:	4618      	mov	r0, r3
   2410c:	f7fd faaa 	bl	21664 <vec_clear>
    return ret;
   24110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
   24112:	4618      	mov	r0, r3
   24114:	3760      	adds	r7, #96	; 0x60
   24116:	46bd      	mov	sp, r7
   24118:	bd80      	pop	{r7, pc}
   2411a:	bf00      	nop

0002411c <svr_handleGetRequest>:

int svr_handleGetRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   2411c:	b580      	push	{r7, lr}
   2411e:	b092      	sub	sp, #72	; 0x48
   24120:	af06      	add	r7, sp, #24
   24122:	6078      	str	r0, [r7, #4]
   24124:	6039      	str	r1, [r7, #0]
    int ret;
    DLMS_GET_COMMAND_TYPE type;
    unsigned char invokeId, ch;
    // Return error if connection is not established.
    if (!settings->info.preEstablished && (settings->base.connected & DLMS_CONNECTION_STATE_DLMS) == 0)
   24126:	687b      	ldr	r3, [r7, #4]
   24128:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   2412c:	2b00      	cmp	r3, #0
   2412e:	d110      	bne.n	24152 <svr_handleGetRequest+0x36>
   24130:	687b      	ldr	r3, [r7, #4]
   24132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   24136:	f003 0302 	and.w	r3, r3, #2
   2413a:	2b00      	cmp	r3, #0
   2413c:	d109      	bne.n	24152 <svr_handleGetRequest+0x36>
    {
        return svr_generateConfirmedServiceError(
   2413e:	683b      	ldr	r3, [r7, #0]
   24140:	9300      	str	r3, [sp, #0]
   24142:	2302      	movs	r3, #2
   24144:	2203      	movs	r2, #3
   24146:	2101      	movs	r1, #1
   24148:	6878      	ldr	r0, [r7, #4]
   2414a:	f7ff fa61 	bl	23610 <svr_generateConfirmedServiceError>
   2414e:	4603      	mov	r3, r0
   24150:	e070      	b.n	24234 <svr_handleGetRequest+0x118>
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR,
            DLMS_SERVICE_ERROR_SERVICE, DLMS_SERVICE_UNSUPPORTED,
            data);
    }
    // Get type.
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   24152:	f107 0329 	add.w	r3, r7, #41	; 0x29
   24156:	4619      	mov	r1, r3
   24158:	6838      	ldr	r0, [r7, #0]
   2415a:	f7df fb27 	bl	37ac <bb_getUInt8>
   2415e:	62f8      	str	r0, [r7, #44]	; 0x2c
   24160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24162:	2b00      	cmp	r3, #0
   24164:	d001      	beq.n	2416a <svr_handleGetRequest+0x4e>
    {
        return ret;
   24166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24168:	e064      	b.n	24234 <svr_handleGetRequest+0x118>
    }
    type = (DLMS_GET_COMMAND_TYPE)ch;
   2416a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   2416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    // Get invoke ID and priority.
    if ((ret = bb_getUInt8(data, &invokeId)) != 0)
   24172:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   24176:	4619      	mov	r1, r3
   24178:	6838      	ldr	r0, [r7, #0]
   2417a:	f7df fb17 	bl	37ac <bb_getUInt8>
   2417e:	62f8      	str	r0, [r7, #44]	; 0x2c
   24180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24182:	2b00      	cmp	r3, #0
   24184:	d001      	beq.n	2418a <svr_handleGetRequest+0x6e>
    {
        return ret;
   24186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24188:	e054      	b.n	24234 <svr_handleGetRequest+0x118>
    }
    updateInvokeId(settings, invokeId);
   2418a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   2418e:	4619      	mov	r1, r3
   24190:	6878      	ldr	r0, [r7, #4]
   24192:	f7e7 ff1f 	bl	bfd4 <updateInvokeId>
    // GetRequest normal
    if (type == DLMS_GET_COMMAND_TYPE_NORMAL)
   24196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   2419a:	2b01      	cmp	r3, #1
   2419c:	d108      	bne.n	241b0 <svr_handleGetRequest+0x94>
    {
        ret = svr_getRequestNormal(settings, data, invokeId);
   2419e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   241a2:	461a      	mov	r2, r3
   241a4:	6839      	ldr	r1, [r7, #0]
   241a6:	6878      	ldr	r0, [r7, #4]
   241a8:	f7ff faf2 	bl	23790 <svr_getRequestNormal>
   241ac:	62f8      	str	r0, [r7, #44]	; 0x2c
   241ae:	e01e      	b.n	241ee <svr_handleGetRequest+0xd2>
    }
    else if (type == DLMS_GET_COMMAND_TYPE_NEXT_DATA_BLOCK)
   241b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   241b4:	2b02      	cmp	r3, #2
   241b6:	d108      	bne.n	241ca <svr_handleGetRequest+0xae>
    {
        // Get request for next data block
        ret = svr_getRequestNextDataBlock(settings, data, invokeId);
   241b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   241bc:	461a      	mov	r2, r3
   241be:	6839      	ldr	r1, [r7, #0]
   241c0:	6878      	ldr	r0, [r7, #4]
   241c2:	f7ff fccf 	bl	23b64 <svr_getRequestNextDataBlock>
   241c6:	62f8      	str	r0, [r7, #44]	; 0x2c
   241c8:	e011      	b.n	241ee <svr_handleGetRequest+0xd2>
    }
    else if (type == DLMS_GET_COMMAND_TYPE_WITH_LIST)
   241ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   241ce:	2b03      	cmp	r3, #3
   241d0:	d108      	bne.n	241e4 <svr_handleGetRequest+0xc8>
    {
        // Get request with a list.
        ret = svr_getRequestWithList(settings, data, invokeId);
   241d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   241d6:	461a      	mov	r2, r3
   241d8:	6839      	ldr	r1, [r7, #0]
   241da:	6878      	ldr	r0, [r7, #4]
   241dc:	f7ff fde8 	bl	23db0 <svr_getRequestWithList>
   241e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   241e2:	e004      	b.n	241ee <svr_handleGetRequest+0xd2>
    }
    else
    {
        ret = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   241e4:	2303      	movs	r3, #3
   241e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        type = 1;
   241e8:	2301      	movs	r3, #1
   241ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    if (ret != 0)
   241ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   241f0:	2b00      	cmp	r3, #0
   241f2:	d01e      	beq.n	24232 <svr_handleGetRequest+0x116>
    {
        // Access Error : Device reports Read-Write denied.
        gxLNParameters p;
        params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_GET_RESPONSE, type, NULL, data, DLMS_ERROR_CODE_READ_WRITE_DENIED, settings->info.encryptedCommand);
   241f4:	6879      	ldr	r1, [r7, #4]
   241f6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   241fa:	687b      	ldr	r3, [r7, #4]
   241fc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   24200:	f107 0008 	add.w	r0, r7, #8
   24204:	9304      	str	r3, [sp, #16]
   24206:	2303      	movs	r3, #3
   24208:	9303      	str	r3, [sp, #12]
   2420a:	683b      	ldr	r3, [r7, #0]
   2420c:	9302      	str	r3, [sp, #8]
   2420e:	2300      	movs	r3, #0
   24210:	9301      	str	r3, [sp, #4]
   24212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   24216:	9300      	str	r3, [sp, #0]
   24218:	23c4      	movs	r3, #196	; 0xc4
   2421a:	f7fe f8e1 	bl	223e0 <params_initLN>
        bb_clear(data);
   2421e:	6838      	ldr	r0, [r7, #0]
   24220:	f7df faa0 	bl	3764 <bb_clear>
        ret = dlms_getLNPdu(&p, data);
   24224:	f107 0308 	add.w	r3, r7, #8
   24228:	6839      	ldr	r1, [r7, #0]
   2422a:	4618      	mov	r0, r3
   2422c:	f7e6 fcd6 	bl	abdc <dlms_getLNPdu>
   24230:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    return ret;
   24232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   24234:	4618      	mov	r0, r3
   24236:	3730      	adds	r7, #48	; 0x30
   24238:	46bd      	mov	sp, r7
   2423a:	bd80      	pop	{r7, pc}

0002423c <svr_findSNObject>:
 * Find Short Name object.
 *
 * @param sn
 */
int svr_findSNObject(dlmsServerSettings* settings, int sn, gxSNInfo* i)
{
   2423c:	b590      	push	{r4, r7, lr}
   2423e:	b089      	sub	sp, #36	; 0x24
   24240:	af00      	add	r7, sp, #0
   24242:	60f8      	str	r0, [r7, #12]
   24244:	60b9      	str	r1, [r7, #8]
   24246:	607a      	str	r2, [r7, #4]
    unsigned short pos;
    int ret;
    gxObject *it;
    unsigned char offset, count;
    i->action = 0;
   24248:	687b      	ldr	r3, [r7, #4]
   2424a:	2200      	movs	r2, #0
   2424c:	701a      	strb	r2, [r3, #0]
    i->item = NULL;
   2424e:	687b      	ldr	r3, [r7, #4]
   24250:	2200      	movs	r2, #0
   24252:	605a      	str	r2, [r3, #4]
    i->index = 0;
   24254:	687b      	ldr	r3, [r7, #4]
   24256:	2200      	movs	r2, #0
   24258:	705a      	strb	r2, [r3, #1]

    for (pos = 0; pos != settings->base.objects.size; ++pos)
   2425a:	2300      	movs	r3, #0
   2425c:	83fb      	strh	r3, [r7, #30]
   2425e:	e064      	b.n	2432a <svr_findSNObject+0xee>
    {
        if ((ret = oa_getByIndex(&settings->base.objects, pos, &it)) != 0)
   24260:	68fb      	ldr	r3, [r7, #12]
   24262:	3374      	adds	r3, #116	; 0x74
   24264:	f107 0214 	add.w	r2, r7, #20
   24268:	8bf9      	ldrh	r1, [r7, #30]
   2426a:	4618      	mov	r0, r3
   2426c:	f7fd ffe8 	bl	22240 <oa_getByIndex>
   24270:	61b8      	str	r0, [r7, #24]
   24272:	69bb      	ldr	r3, [r7, #24]
   24274:	2b00      	cmp	r3, #0
   24276:	d001      	beq.n	2427c <svr_findSNObject+0x40>
        {
            return ret;
   24278:	69bb      	ldr	r3, [r7, #24]
   2427a:	e064      	b.n	24346 <svr_findSNObject+0x10a>
        }
        if (sn >= it->shortName)
   2427c:	697b      	ldr	r3, [r7, #20]
   2427e:	889b      	ldrh	r3, [r3, #4]
   24280:	461a      	mov	r2, r3
   24282:	68bb      	ldr	r3, [r7, #8]
   24284:	429a      	cmp	r2, r3
   24286:	dc4d      	bgt.n	24324 <svr_findSNObject+0xe8>
        {
            // If attribute is accessed.
            if (sn < it->shortName + obj_attributeCount(it) * 8)
   24288:	697b      	ldr	r3, [r7, #20]
   2428a:	889b      	ldrh	r3, [r3, #4]
   2428c:	461c      	mov	r4, r3
   2428e:	697b      	ldr	r3, [r7, #20]
   24290:	4618      	mov	r0, r3
   24292:	f7f3 fbff 	bl	17a94 <obj_attributeCount>
   24296:	4603      	mov	r3, r0
   24298:	00db      	lsls	r3, r3, #3
   2429a:	18e2      	adds	r2, r4, r3
   2429c:	68bb      	ldr	r3, [r7, #8]
   2429e:	429a      	cmp	r2, r3
   242a0:	dd14      	ble.n	242cc <svr_findSNObject+0x90>
            {
                i->action = 0;
   242a2:	687b      	ldr	r3, [r7, #4]
   242a4:	2200      	movs	r2, #0
   242a6:	701a      	strb	r2, [r3, #0]
                i->item = it;
   242a8:	697a      	ldr	r2, [r7, #20]
   242aa:	687b      	ldr	r3, [r7, #4]
   242ac:	605a      	str	r2, [r3, #4]
                i->index = (unsigned char)(((sn - it->shortName) / 8) + 1);
   242ae:	697b      	ldr	r3, [r7, #20]
   242b0:	889b      	ldrh	r3, [r3, #4]
   242b2:	461a      	mov	r2, r3
   242b4:	68bb      	ldr	r3, [r7, #8]
   242b6:	1a9b      	subs	r3, r3, r2
   242b8:	2b00      	cmp	r3, #0
   242ba:	da00      	bge.n	242be <svr_findSNObject+0x82>
   242bc:	3307      	adds	r3, #7
   242be:	10db      	asrs	r3, r3, #3
   242c0:	b2db      	uxtb	r3, r3
   242c2:	3301      	adds	r3, #1
   242c4:	b2da      	uxtb	r2, r3
   242c6:	687b      	ldr	r3, [r7, #4]
   242c8:	705a      	strb	r2, [r3, #1]
                break;
   242ca:	e034      	b.n	24336 <svr_findSNObject+0xfa>
            }
            else
            {
                // If method is accessed.
                dlms_getActionInfo((DLMS_OBJECT_TYPE)it->objectType, &offset, &count);
   242cc:	697b      	ldr	r3, [r7, #20]
   242ce:	781b      	ldrb	r3, [r3, #0]
   242d0:	b29b      	uxth	r3, r3
   242d2:	f107 0212 	add.w	r2, r7, #18
   242d6:	f107 0113 	add.w	r1, r7, #19
   242da:	4618      	mov	r0, r3
   242dc:	f7e7 f83c 	bl	b358 <dlms_getActionInfo>
                if (sn < it->shortName + offset + (8 * count))
   242e0:	697b      	ldr	r3, [r7, #20]
   242e2:	889b      	ldrh	r3, [r3, #4]
   242e4:	461a      	mov	r2, r3
   242e6:	7cfb      	ldrb	r3, [r7, #19]
   242e8:	441a      	add	r2, r3
   242ea:	7cbb      	ldrb	r3, [r7, #18]
   242ec:	00db      	lsls	r3, r3, #3
   242ee:	441a      	add	r2, r3
   242f0:	68bb      	ldr	r3, [r7, #8]
   242f2:	429a      	cmp	r2, r3
   242f4:	dd16      	ble.n	24324 <svr_findSNObject+0xe8>
                {
                    i->item = it;
   242f6:	697a      	ldr	r2, [r7, #20]
   242f8:	687b      	ldr	r3, [r7, #4]
   242fa:	605a      	str	r2, [r3, #4]
                    i->action = 1;
   242fc:	687b      	ldr	r3, [r7, #4]
   242fe:	2201      	movs	r2, #1
   24300:	701a      	strb	r2, [r3, #0]
                    i->index = (unsigned char)((sn - it->shortName - offset) / 8 + 1);
   24302:	697b      	ldr	r3, [r7, #20]
   24304:	889b      	ldrh	r3, [r3, #4]
   24306:	461a      	mov	r2, r3
   24308:	68bb      	ldr	r3, [r7, #8]
   2430a:	1a9b      	subs	r3, r3, r2
   2430c:	7cfa      	ldrb	r2, [r7, #19]
   2430e:	1a9b      	subs	r3, r3, r2
   24310:	2b00      	cmp	r3, #0
   24312:	da00      	bge.n	24316 <svr_findSNObject+0xda>
   24314:	3307      	adds	r3, #7
   24316:	10db      	asrs	r3, r3, #3
   24318:	b2db      	uxtb	r3, r3
   2431a:	3301      	adds	r3, #1
   2431c:	b2da      	uxtb	r2, r3
   2431e:	687b      	ldr	r3, [r7, #4]
   24320:	705a      	strb	r2, [r3, #1]
                    break;
   24322:	e008      	b.n	24336 <svr_findSNObject+0xfa>
    unsigned char offset, count;
    i->action = 0;
    i->item = NULL;
    i->index = 0;

    for (pos = 0; pos != settings->base.objects.size; ++pos)
   24324:	8bfb      	ldrh	r3, [r7, #30]
   24326:	3301      	adds	r3, #1
   24328:	83fb      	strh	r3, [r7, #30]
   2432a:	68fb      	ldr	r3, [r7, #12]
   2432c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
   24330:	8bfa      	ldrh	r2, [r7, #30]
   24332:	429a      	cmp	r2, r3
   24334:	d194      	bne.n	24260 <svr_findSNObject+0x24>
                    break;
                }
            }
        }
    }
    if (i->item == NULL)
   24336:	687b      	ldr	r3, [r7, #4]
   24338:	685b      	ldr	r3, [r3, #4]
   2433a:	2b00      	cmp	r3, #0
   2433c:	d102      	bne.n	24344 <svr_findSNObject+0x108>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2433e:	f44f 7381 	mov.w	r3, #258	; 0x102
   24342:	e000      	b.n	24346 <svr_findSNObject+0x10a>
    }
    return 0;
   24344:	2300      	movs	r3, #0
}
   24346:	4618      	mov	r0, r3
   24348:	3724      	adds	r7, #36	; 0x24
   2434a:	46bd      	mov	sp, r7
   2434c:	bd90      	pop	{r4, r7, pc}
   2434e:	bf00      	nop

00024350 <svr_handleRead>:
    DLMS_VARIABLE_ACCESS_SPECIFICATION type,
    gxByteBuffer* data,
    gxValueEventCollection *list,
    gxValueEventCollection *reads,
    gxValueEventCollection *actions)
{
   24350:	b580      	push	{r7, lr}
   24352:	b08e      	sub	sp, #56	; 0x38
   24354:	af02      	add	r7, sp, #8
   24356:	60f8      	str	r0, [r7, #12]
   24358:	607a      	str	r2, [r7, #4]
   2435a:	603b      	str	r3, [r7, #0]
   2435c:	460b      	mov	r3, r1
   2435e:	72fb      	strb	r3, [r7, #11]
    gxSNInfo info;
    gxValueEventArg *e;
    int ret;
    gxDataInfo di;
    unsigned short sn;
    di_init(&di);
   24360:	f107 0318 	add.w	r3, r7, #24
   24364:	4618      	mov	r0, r3
   24366:	f7e1 fef9 	bl	615c <di_init>
    if ((ret = bb_getUInt16(data, &sn)) != 0)
   2436a:	f107 0316 	add.w	r3, r7, #22
   2436e:	4619      	mov	r1, r3
   24370:	6878      	ldr	r0, [r7, #4]
   24372:	f7df fa7d 	bl	3870 <bb_getUInt16>
   24376:	62f8      	str	r0, [r7, #44]	; 0x2c
   24378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2437a:	2b00      	cmp	r3, #0
   2437c:	d001      	beq.n	24382 <svr_handleRead+0x32>
    {
        return ret;
   2437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24380:	e088      	b.n	24494 <svr_handleRead+0x144>
    }
    if ((ret = svr_findSNObject(settings, sn, &info)) != 0)
   24382:	8afb      	ldrh	r3, [r7, #22]
   24384:	4619      	mov	r1, r3
   24386:	f107 0320 	add.w	r3, r7, #32
   2438a:	461a      	mov	r2, r3
   2438c:	68f8      	ldr	r0, [r7, #12]
   2438e:	f7ff ff55 	bl	2423c <svr_findSNObject>
   24392:	62f8      	str	r0, [r7, #44]	; 0x2c
   24394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24396:	2b00      	cmp	r3, #0
   24398:	d001      	beq.n	2439e <svr_handleRead+0x4e>
    {
        return ret;
   2439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2439c:	e07a      	b.n	24494 <svr_handleRead+0x144>
    }
    e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   2439e:	2048      	movs	r0, #72	; 0x48
   243a0:	f005 fb50 	bl	29a44 <malloc>
   243a4:	4603      	mov	r3, r0
   243a6:	62bb      	str	r3, [r7, #40]	; 0x28
    ve_init(e);
   243a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   243aa:	f7fd f9b5 	bl	21718 <ve_init>
    e->target = info.item;
   243ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   243b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243b2:	615a      	str	r2, [r3, #20]
    e->index = info.index;
   243b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   243b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243ba:	761a      	strb	r2, [r3, #24]
    e->action = info.action;
   243bc:	f897 2020 	ldrb.w	r2, [r7, #32]
   243c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    vec_push(list, e);
   243c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   243c8:	6838      	ldr	r0, [r7, #0]
   243ca:	f7fd f8ef 	bl	215ac <vec_push>
    if (type == DLMS_VARIABLE_ACCESS_SPECIFICATION_PARAMETERISED_ACCESS)
   243ce:	7afb      	ldrb	r3, [r7, #11]
   243d0:	2b04      	cmp	r3, #4
   243d2:	d11a      	bne.n	2440a <svr_handleRead+0xba>
    {
        if ((ret = bb_getUInt8(data, &e->selector)) != 0)
   243d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243d6:	331a      	adds	r3, #26
   243d8:	4619      	mov	r1, r3
   243da:	6878      	ldr	r0, [r7, #4]
   243dc:	f7df f9e6 	bl	37ac <bb_getUInt8>
   243e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   243e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   243e4:	2b00      	cmp	r3, #0
   243e6:	d001      	beq.n	243ec <svr_handleRead+0x9c>
        {
            return ret;
   243e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   243ea:	e053      	b.n	24494 <svr_handleRead+0x144>
        }
        if ((ret = dlms_getData(data, &di, &e->parameters)) != 0)
   243ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243ee:	f103 0220 	add.w	r2, r3, #32
   243f2:	f107 0318 	add.w	r3, r7, #24
   243f6:	4619      	mov	r1, r3
   243f8:	6878      	ldr	r0, [r7, #4]
   243fa:	f7e3 fc01 	bl	7c00 <dlms_getData>
   243fe:	62f8      	str	r0, [r7, #44]	; 0x2c
   24400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24402:	2b00      	cmp	r3, #0
   24404:	d001      	beq.n	2440a <svr_handleRead+0xba>
        {
            return ret;
   24406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24408:	e044      	b.n	24494 <svr_handleRead+0x144>
        }
    }
    // Return error if connection is not established.
    if (!settings->info.preEstablished && (settings->base.connected & DLMS_CONNECTION_STATE_DLMS) == 0
   2440a:	68fb      	ldr	r3, [r7, #12]
   2440c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   24410:	2b00      	cmp	r3, #0
   24412:	d11f      	bne.n	24454 <svr_handleRead+0x104>
   24414:	68fb      	ldr	r3, [r7, #12]
   24416:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   2441a:	f003 0302 	and.w	r3, r3, #2
   2441e:	2b00      	cmp	r3, #0
   24420:	d118      	bne.n	24454 <svr_handleRead+0x104>
        && (!e->action || e->target->shortName != 0xFA00 || e->index != 8))
   24422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24424:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   24428:	2b00      	cmp	r3, #0
   2442a:	d009      	beq.n	24440 <svr_handleRead+0xf0>
   2442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2442e:	695b      	ldr	r3, [r3, #20]
   24430:	889b      	ldrh	r3, [r3, #4]
   24432:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
   24436:	d103      	bne.n	24440 <svr_handleRead+0xf0>
   24438:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2443a:	7e1b      	ldrb	r3, [r3, #24]
   2443c:	2b08      	cmp	r3, #8
   2443e:	d009      	beq.n	24454 <svr_handleRead+0x104>
    {
        return svr_generateConfirmedServiceError(
   24440:	687b      	ldr	r3, [r7, #4]
   24442:	9300      	str	r3, [sp, #0]
   24444:	2302      	movs	r3, #2
   24446:	2203      	movs	r2, #3
   24448:	2101      	movs	r1, #1
   2444a:	68f8      	ldr	r0, [r7, #12]
   2444c:	f7ff f8e0 	bl	23610 <svr_generateConfirmedServiceError>
   24450:	4603      	mov	r3, r0
   24452:	e01f      	b.n	24494 <svr_handleRead+0x144>
            settings,
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR, DLMS_SERVICE_ERROR_SERVICE,
            DLMS_SERVICE_UNSUPPORTED, data);
    }
    if (svr_getAttributeAccess(&settings->base, info.item, info.index) == DLMS_ACCESS_MODE_NONE)
   24454:	68fb      	ldr	r3, [r7, #12]
   24456:	6a79      	ldr	r1, [r7, #36]	; 0x24
   24458:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   2445c:	4618      	mov	r0, r3
   2445e:	f004 ff69 	bl	29334 <svr_getAttributeAccess>
   24462:	4603      	mov	r3, r0
   24464:	2b00      	cmp	r3, #0
   24466:	d106      	bne.n	24476 <svr_handleRead+0x126>
    {
        e->error = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   24468:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2446a:	2203      	movs	r2, #3
   2446c:	861a      	strh	r2, [r3, #48]	; 0x30
        e->handled = 1;
   2446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24470:	2201      	movs	r2, #1
   24472:	741a      	strb	r2, [r3, #16]
   24474:	e00d      	b.n	24492 <svr_handleRead+0x142>
    }
    else
    {
        if (e->action)
   24476:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24478:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   2447c:	2b00      	cmp	r3, #0
   2447e:	d004      	beq.n	2448a <svr_handleRead+0x13a>
        {
            vec_push(actions, e);
   24480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   24482:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   24484:	f7fd f892 	bl	215ac <vec_push>
   24488:	e003      	b.n	24492 <svr_handleRead+0x142>
        }
        else
        {
            vec_push(reads, e);
   2448a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2448c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   2448e:	f7fd f88d 	bl	215ac <vec_push>
        }
    }
    return ret;
   24492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   24494:	4618      	mov	r0, r3
   24496:	3730      	adds	r7, #48	; 0x30
   24498:	46bd      	mov	sp, r7
   2449a:	bd80      	pop	{r7, pc}

0002449c <svr_getReadData>:
    dlmsServerSettings* settings,
    gxValueEventCollection *list,
    gxByteBuffer *data,
    DLMS_SINGLE_READ_RESPONSE *type,
    unsigned char* multipleBlocks)
{
   2449c:	b580      	push	{r7, lr}
   2449e:	b08a      	sub	sp, #40	; 0x28
   244a0:	af00      	add	r7, sp, #0
   244a2:	60f8      	str	r0, [r7, #12]
   244a4:	60b9      	str	r1, [r7, #8]
   244a6:	607a      	str	r2, [r7, #4]
   244a8:	603b      	str	r3, [r7, #0]
#if !defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__))
    unsigned long statusindex;
#else
    unsigned short statusindex;
#endif
    unsigned char first = 1;
   244aa:	2301      	movs	r3, #1
   244ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    *type = DLMS_SINGLE_READ_RESPONSE_DATA;
   244b0:	683b      	ldr	r3, [r7, #0]
   244b2:	2200      	movs	r2, #0
   244b4:	701a      	strb	r2, [r3, #0]
    bb_clear(data);
   244b6:	6878      	ldr	r0, [r7, #4]
   244b8:	f7df f954 	bl	3764 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   244bc:	2300      	movs	r3, #0
   244be:	627b      	str	r3, [r7, #36]	; 0x24
   244c0:	e0a5      	b.n	2460e <svr_getReadData+0x172>
    {
        if ((ret = vec_getByIndex(list, pos, &e)) != 0)
   244c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   244c4:	f107 0214 	add.w	r2, r7, #20
   244c8:	4619      	mov	r1, r3
   244ca:	68b8      	ldr	r0, [r7, #8]
   244cc:	f7fd f906 	bl	216dc <vec_getByIndex>
   244d0:	61f8      	str	r0, [r7, #28]
   244d2:	69fb      	ldr	r3, [r7, #28]
   244d4:	2b00      	cmp	r3, #0
   244d6:	f040 80a2 	bne.w	2461e <svr_getReadData+0x182>
        {
            break;
        }
        e->value.byteArr = data;
   244da:	697b      	ldr	r3, [r7, #20]
   244dc:	687a      	ldr	r2, [r7, #4]
   244de:	609a      	str	r2, [r3, #8]
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   244e0:	697b      	ldr	r3, [r7, #20]
   244e2:	2209      	movs	r2, #9
   244e4:	701a      	strb	r2, [r3, #0]
        statusindex = data->size;
   244e6:	687b      	ldr	r3, [r7, #4]
   244e8:	88db      	ldrh	r3, [r3, #6]
   244ea:	837b      	strh	r3, [r7, #26]
        if (!e->handled)
   244ec:	697b      	ldr	r3, [r7, #20]
   244ee:	7c1b      	ldrb	r3, [r3, #16]
   244f0:	2b00      	cmp	r3, #0
   244f2:	d120      	bne.n	24536 <svr_getReadData+0x9a>
        {
            if (e->action)
   244f4:	697b      	ldr	r3, [r7, #20]
   244f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   244fa:	2b00      	cmp	r3, #0
   244fc:	d00d      	beq.n	2451a <svr_getReadData+0x7e>
            {
                if ((ret = cosem_invoke(settings, e)) != 0)
   244fe:	697b      	ldr	r3, [r7, #20]
   24500:	4619      	mov	r1, r3
   24502:	68f8      	ldr	r0, [r7, #12]
   24504:	f7f1 fb80 	bl	15c08 <cosem_invoke>
   24508:	61f8      	str	r0, [r7, #28]
   2450a:	69fb      	ldr	r3, [r7, #28]
   2450c:	2b00      	cmp	r3, #0
   2450e:	d012      	beq.n	24536 <svr_getReadData+0x9a>
                {
                    e->error = (DLMS_ERROR_CODE)ret;
   24510:	697b      	ldr	r3, [r7, #20]
   24512:	69fa      	ldr	r2, [r7, #28]
   24514:	b212      	sxth	r2, r2
   24516:	861a      	strh	r2, [r3, #48]	; 0x30
   24518:	e00d      	b.n	24536 <svr_getReadData+0x9a>
                }
            }
            else
            {
                if ((ret = cosem_getValue(&settings->base, e)) != 0)
   2451a:	68fb      	ldr	r3, [r7, #12]
   2451c:	697a      	ldr	r2, [r7, #20]
   2451e:	4611      	mov	r1, r2
   24520:	4618      	mov	r0, r3
   24522:	f7ef fe4b 	bl	141bc <cosem_getValue>
   24526:	61f8      	str	r0, [r7, #28]
   24528:	69fb      	ldr	r3, [r7, #28]
   2452a:	2b00      	cmp	r3, #0
   2452c:	d003      	beq.n	24536 <svr_getReadData+0x9a>
                {
                    e->error = (DLMS_ERROR_CODE)ret;
   2452e:	697b      	ldr	r3, [r7, #20]
   24530:	69fa      	ldr	r2, [r7, #28]
   24532:	b212      	sxth	r2, r2
   24534:	861a      	strh	r2, [r3, #48]	; 0x30
                }
            }
        }
        if (e->error == DLMS_ERROR_CODE_OK)
   24536:	697b      	ldr	r3, [r7, #20]
   24538:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   2453c:	2b00      	cmp	r3, #0
   2453e:	d126      	bne.n	2458e <svr_getReadData+0xf2>
        {
            if (!first && list->size != 1)
   24540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   24544:	2b00      	cmp	r3, #0
   24546:	d109      	bne.n	2455c <svr_getReadData+0xc0>
   24548:	68bb      	ldr	r3, [r7, #8]
   2454a:	795b      	ldrb	r3, [r3, #5]
   2454c:	2b01      	cmp	r3, #1
   2454e:	d005      	beq.n	2455c <svr_getReadData+0xc0>
            {
                bb_insertUInt8(data, statusindex, DLMS_SINGLE_READ_RESPONSE_DATA);
   24550:	8b7b      	ldrh	r3, [r7, #26]
   24552:	2200      	movs	r2, #0
   24554:	4619      	mov	r1, r3
   24556:	6878      	ldr	r0, [r7, #4]
   24558:	f7de fc78 	bl	2e4c <bb_insertUInt8>
            }
            if (e->byteArray)
   2455c:	697b      	ldr	r3, [r7, #20]
   2455e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   24562:	2b00      	cmp	r3, #0
   24564:	d003      	beq.n	2456e <svr_getReadData+0xd2>
            {
                e->value.vt = DLMS_DATA_TYPE_NONE;
   24566:	697b      	ldr	r3, [r7, #20]
   24568:	2200      	movs	r2, #0
   2456a:	701a      	strb	r2, [r3, #0]
   2456c:	e02b      	b.n	245c6 <svr_getReadData+0x12a>
            }
            else
            {
                if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
   2456e:	697b      	ldr	r3, [r7, #20]
   24570:	781b      	ldrb	r3, [r3, #0]
   24572:	697a      	ldr	r2, [r7, #20]
   24574:	4619      	mov	r1, r3
   24576:	6878      	ldr	r0, [r7, #4]
   24578:	f7e2 fc06 	bl	6d88 <dlms_setData>
   2457c:	61f8      	str	r0, [r7, #28]
   2457e:	69fb      	ldr	r3, [r7, #28]
   24580:	2b00      	cmp	r3, #0
   24582:	d020      	beq.n	245c6 <svr_getReadData+0x12a>
                {
                    var_clear(&e->value);
   24584:	697b      	ldr	r3, [r7, #20]
   24586:	4618      	mov	r0, r3
   24588:	f001 fdde 	bl	26148 <var_clear>
                    break;
   2458c:	e048      	b.n	24620 <svr_getReadData+0x184>
                }
            }
        }
        else
        {
            if (!first && list->size != 1)
   2458e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   24592:	2b00      	cmp	r3, #0
   24594:	d109      	bne.n	245aa <svr_getReadData+0x10e>
   24596:	68bb      	ldr	r3, [r7, #8]
   24598:	795b      	ldrb	r3, [r3, #5]
   2459a:	2b01      	cmp	r3, #1
   2459c:	d005      	beq.n	245aa <svr_getReadData+0x10e>
            {
                bb_insertUInt8(data, statusindex, DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR);
   2459e:	8b7b      	ldrh	r3, [r7, #26]
   245a0:	2201      	movs	r2, #1
   245a2:	4619      	mov	r1, r3
   245a4:	6878      	ldr	r0, [r7, #4]
   245a6:	f7de fc51 	bl	2e4c <bb_insertUInt8>
            }
            bb_insertUInt8(data, statusindex + 1, e->error);
   245aa:	8b7b      	ldrh	r3, [r7, #26]
   245ac:	3301      	adds	r3, #1
   245ae:	b299      	uxth	r1, r3
   245b0:	697b      	ldr	r3, [r7, #20]
   245b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   245b6:	b2db      	uxtb	r3, r3
   245b8:	461a      	mov	r2, r3
   245ba:	6878      	ldr	r0, [r7, #4]
   245bc:	f7de fc46 	bl	2e4c <bb_insertUInt8>
            *type = DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR;
   245c0:	683b      	ldr	r3, [r7, #0]
   245c2:	2201      	movs	r2, #1
   245c4:	701a      	strb	r2, [r3, #0]
        }
        var_clear(&e->value);
   245c6:	697b      	ldr	r3, [r7, #20]
   245c8:	4618      	mov	r0, r3
   245ca:	f001 fdbd 	bl	26148 <var_clear>
        first = 0;
   245ce:	2300      	movs	r3, #0
   245d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        *multipleBlocks |= e->transactionEndIndex != e->transactionStartIndex;
   245d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   245d6:	781b      	ldrb	r3, [r3, #0]
   245d8:	b25a      	sxtb	r2, r3
   245da:	697b      	ldr	r3, [r7, #20]
   245dc:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
   245e0:	697b      	ldr	r3, [r7, #20]
   245e2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   245e6:	4299      	cmp	r1, r3
   245e8:	bf14      	ite	ne
   245ea:	2301      	movne	r3, #1
   245ec:	2300      	moveq	r3, #0
   245ee:	b2db      	uxtb	r3, r3
   245f0:	b25b      	sxtb	r3, r3
   245f2:	4313      	orrs	r3, r2
   245f4:	b25b      	sxtb	r3, r3
   245f6:	b2da      	uxtb	r2, r3
   245f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   245fa:	701a      	strb	r2, [r3, #0]
        e->transaction = *multipleBlocks;
   245fc:	697b      	ldr	r3, [r7, #20]
   245fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   24600:	7812      	ldrb	r2, [r2, #0]
   24602:	b292      	uxth	r2, r2
   24604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    unsigned short statusindex;
#endif
    unsigned char first = 1;
    *type = DLMS_SINGLE_READ_RESPONSE_DATA;
    bb_clear(data);
    for (pos = 0; pos != list->size; ++pos)
   24608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2460a:	3301      	adds	r3, #1
   2460c:	627b      	str	r3, [r7, #36]	; 0x24
   2460e:	68bb      	ldr	r3, [r7, #8]
   24610:	795b      	ldrb	r3, [r3, #5]
   24612:	461a      	mov	r2, r3
   24614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24616:	429a      	cmp	r2, r3
   24618:	f47f af53 	bne.w	244c2 <svr_getReadData+0x26>
   2461c:	e000      	b.n	24620 <svr_getReadData+0x184>
    {
        if ((ret = vec_getByIndex(list, pos, &e)) != 0)
        {
            break;
   2461e:	bf00      	nop
        var_clear(&e->value);
        first = 0;
        *multipleBlocks |= e->transactionEndIndex != e->transactionStartIndex;
        e->transaction = *multipleBlocks;
    }
    return 0;
   24620:	2300      	movs	r3, #0
}
   24622:	4618      	mov	r0, r3
   24624:	3728      	adds	r7, #40	; 0x28
   24626:	46bd      	mov	sp, r7
   24628:	bd80      	pop	{r7, pc}
   2462a:	bf00      	nop

0002462c <svr_handleReadBlockNumberAccess>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME

int svr_handleReadBlockNumberAccess(
    dlmsServerSettings* settings,
    gxByteBuffer *data)
{
   2462c:	b580      	push	{r7, lr}
   2462e:	b09a      	sub	sp, #104	; 0x68
   24630:	af04      	add	r7, sp, #16
   24632:	6078      	str	r0, [r7, #4]
   24634:	6039      	str	r1, [r7, #0]
    gxSNParameters p;
    gxValueEventArg *e;
    unsigned short pos, blockNumber;
    int ret;
    unsigned char multipleBlocks;
    if ((ret = bb_getUInt16(data, &blockNumber)) != 0)
   24636:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   2463a:	4619      	mov	r1, r3
   2463c:	6838      	ldr	r0, [r7, #0]
   2463e:	f7df f917 	bl	3870 <bb_getUInt16>
   24642:	6538      	str	r0, [r7, #80]	; 0x50
   24644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24646:	2b00      	cmp	r3, #0
   24648:	d001      	beq.n	2464e <svr_handleReadBlockNumberAccess+0x22>
    {
        return ret;
   2464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2464c:	e119      	b.n	24882 <svr_handleReadBlockNumberAccess+0x256>
    }
    if (blockNumber != settings->base.blockIndex)
   2464e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   24650:	461a      	mov	r2, r3
   24652:	687b      	ldr	r3, [r7, #4]
   24654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   24658:	429a      	cmp	r2, r3
   2465a:	d02e      	beq.n	246ba <svr_handleReadBlockNumberAccess+0x8e>
    {
        gxByteBuffer bb;
        bb_init(&bb);
   2465c:	f107 0320 	add.w	r3, r7, #32
   24660:	4618      	mov	r0, r3
   24662:	f7de fb41 	bl	2ce8 <bb_init>
        bb_setUInt8(&bb, DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID);
   24666:	f107 0320 	add.w	r3, r7, #32
   2466a:	2113      	movs	r1, #19
   2466c:	4618      	mov	r0, r3
   2466e:	f7de fbd1 	bl	2e14 <bb_setUInt8>
        params_initSN(&p, &settings->base,
   24672:	6879      	ldr	r1, [r7, #4]
   24674:	687b      	ldr	r3, [r7, #4]
   24676:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   2467a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2467e:	9303      	str	r3, [sp, #12]
   24680:	2300      	movs	r3, #0
   24682:	9302      	str	r3, [sp, #8]
   24684:	f107 0320 	add.w	r3, r7, #32
   24688:	9301      	str	r3, [sp, #4]
   2468a:	2301      	movs	r3, #1
   2468c:	9300      	str	r3, [sp, #0]
   2468e:	2301      	movs	r3, #1
   24690:	220c      	movs	r2, #12
   24692:	f7fd fe73 	bl	2237c <params_initSN>
            DLMS_COMMAND_READ_RESPONSE, 1,
            DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR, &bb, NULL, settings->info.encryptedCommand);
        ret = dlms_getSNPdu(&p, data);
   24696:	f107 0334 	add.w	r3, r7, #52	; 0x34
   2469a:	6839      	ldr	r1, [r7, #0]
   2469c:	4618      	mov	r0, r3
   2469e:	f7e6 f813 	bl	a6c8 <dlms_getSNPdu>
   246a2:	6538      	str	r0, [r7, #80]	; 0x50
        resetBlockIndex(&settings->base);
   246a4:	687b      	ldr	r3, [r7, #4]
   246a6:	4618      	mov	r0, r3
   246a8:	f7e7 fb06 	bl	bcb8 <resetBlockIndex>
        bb_clear(&bb);
   246ac:	f107 0320 	add.w	r3, r7, #32
   246b0:	4618      	mov	r0, r3
   246b2:	f7df f857 	bl	3764 <bb_clear>
        return ret;
   246b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   246b8:	e0e3      	b.n	24882 <svr_handleReadBlockNumberAccess+0x256>
    }
    if (settings->base.index != settings->base.count
   246ba:	687b      	ldr	r3, [r7, #4]
   246bc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   246c0:	687b      	ldr	r3, [r7, #4]
   246c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   246c6:	429a      	cmp	r2, r3
   246c8:	f000 808b 	beq.w	247e2 <svr_handleReadBlockNumberAccess+0x1b6>
        && settings->transaction.data.size < settings->base.maxPduSize)
   246cc:	687b      	ldr	r3, [r7, #4]
   246ce:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
   246d2:	687b      	ldr	r3, [r7, #4]
   246d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   246d8:	429a      	cmp	r2, r3
   246da:	f080 8082 	bcs.w	247e2 <svr_handleReadBlockNumberAccess+0x1b6>
    {
        gxValueEventCollection reads;
        gxValueEventCollection actions;
        vec_init(&reads);
   246de:	f107 0318 	add.w	r3, r7, #24
   246e2:	4618      	mov	r0, r3
   246e4:	f7fc ff4c 	bl	21580 <vec_init>
        vec_init(&actions);
   246e8:	f107 0310 	add.w	r3, r7, #16
   246ec:	4618      	mov	r0, r3
   246ee:	f7fc ff47 	bl	21580 <vec_init>
        for (pos = 0; pos != settings->transaction.targets.size; ++pos)
   246f2:	2300      	movs	r3, #0
   246f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   246f8:	e026      	b.n	24748 <svr_handleReadBlockNumberAccess+0x11c>
        {
            if ((ret = vec_getByIndex(&settings->transaction.targets, pos, &e)) != 0)
   246fa:	687b      	ldr	r3, [r7, #4]
   246fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   24700:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
   24704:	f107 0230 	add.w	r2, r7, #48	; 0x30
   24708:	4618      	mov	r0, r3
   2470a:	f7fc ffe7 	bl	216dc <vec_getByIndex>
   2470e:	6538      	str	r0, [r7, #80]	; 0x50
   24710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24712:	2b00      	cmp	r3, #0
   24714:	d121      	bne.n	2475a <svr_handleReadBlockNumberAccess+0x12e>
            {
                break;
            }
            if (e->action)
   24716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   24718:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   2471c:	2b00      	cmp	r3, #0
   2471e:	d007      	beq.n	24730 <svr_handleReadBlockNumberAccess+0x104>
            {
                vec_push(&actions, e);
   24720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   24722:	f107 0310 	add.w	r3, r7, #16
   24726:	4611      	mov	r1, r2
   24728:	4618      	mov	r0, r3
   2472a:	f7fc ff3f 	bl	215ac <vec_push>
   2472e:	e006      	b.n	2473e <svr_handleReadBlockNumberAccess+0x112>
            }
            else
            {
                vec_push(&reads, e);
   24730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   24732:	f107 0318 	add.w	r3, r7, #24
   24736:	4611      	mov	r1, r2
   24738:	4618      	mov	r0, r3
   2473a:	f7fc ff37 	bl	215ac <vec_push>
    {
        gxValueEventCollection reads;
        gxValueEventCollection actions;
        vec_init(&reads);
        vec_init(&actions);
        for (pos = 0; pos != settings->transaction.targets.size; ++pos)
   2473e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   24742:	3301      	adds	r3, #1
   24744:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   24748:	687b      	ldr	r3, [r7, #4]
   2474a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   2474e:	b29b      	uxth	r3, r3
   24750:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
   24754:	429a      	cmp	r2, r3
   24756:	d1d0      	bne.n	246fa <svr_handleReadBlockNumberAccess+0xce>
   24758:	e000      	b.n	2475c <svr_handleReadBlockNumberAccess+0x130>
        {
            if ((ret = vec_getByIndex(&settings->transaction.targets, pos, &e)) != 0)
            {
                break;
   2475a:	bf00      	nop
            else
            {
                vec_push(&reads, e);
            }
        }
        if (ret == 0)
   2475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2475e:	2b00      	cmp	r3, #0
   24760:	d135      	bne.n	247ce <svr_handleReadBlockNumberAccess+0x1a2>
        {
            DLMS_SINGLE_READ_RESPONSE requestType;
            if (reads.size != 0)
   24762:	7f7b      	ldrb	r3, [r7, #29]
   24764:	2b00      	cmp	r3, #0
   24766:	d006      	beq.n	24776 <svr_handleReadBlockNumberAccess+0x14a>
            {
                svr_preRead(&settings->base, &reads);
   24768:	687b      	ldr	r3, [r7, #4]
   2476a:	f107 0218 	add.w	r2, r7, #24
   2476e:	4611      	mov	r1, r2
   24770:	4618      	mov	r0, r3
   24772:	f004 fbd9 	bl	28f28 <svr_preRead>
            }

            if (actions.size != 0)
   24776:	7d7b      	ldrb	r3, [r7, #21]
   24778:	2b00      	cmp	r3, #0
   2477a:	d006      	beq.n	2478a <svr_handleReadBlockNumberAccess+0x15e>
            {
                svr_preAction(&settings->base, &actions);
   2477c:	687b      	ldr	r3, [r7, #4]
   2477e:	f107 0210 	add.w	r2, r7, #16
   24782:	4611      	mov	r1, r2
   24784:	4618      	mov	r0, r3
   24786:	f004 fd2f 	bl	291e8 <svr_preAction>
            }
            ret = svr_getReadData(settings, &settings->transaction.targets,
   2478a:	687b      	ldr	r3, [r7, #4]
   2478c:	f503 718c 	add.w	r1, r3, #280	; 0x118
   24790:	f107 020f 	add.w	r2, r7, #15
   24794:	f107 032d 	add.w	r3, r7, #45	; 0x2d
   24798:	9300      	str	r3, [sp, #0]
   2479a:	4613      	mov	r3, r2
   2479c:	683a      	ldr	r2, [r7, #0]
   2479e:	6878      	ldr	r0, [r7, #4]
   247a0:	f7ff fe7c 	bl	2449c <svr_getReadData>
   247a4:	6538      	str	r0, [r7, #80]	; 0x50
                data, &requestType, &multipleBlocks);
            if (reads.size != 0)
   247a6:	7f7b      	ldrb	r3, [r7, #29]
   247a8:	2b00      	cmp	r3, #0
   247aa:	d006      	beq.n	247ba <svr_handleReadBlockNumberAccess+0x18e>
            {
                svr_postRead(&settings->base, &reads);
   247ac:	687b      	ldr	r3, [r7, #4]
   247ae:	f107 0218 	add.w	r2, r7, #24
   247b2:	4611      	mov	r1, r2
   247b4:	4618      	mov	r0, r3
   247b6:	f004 fd39 	bl	2922c <svr_postRead>
            }
            if (actions.size != 0)
   247ba:	7d7b      	ldrb	r3, [r7, #21]
   247bc:	2b00      	cmp	r3, #0
   247be:	d006      	beq.n	247ce <svr_handleReadBlockNumberAccess+0x1a2>
            {
                svr_postAction(&settings->base, &actions);
   247c0:	687b      	ldr	r3, [r7, #4]
   247c2:	f107 0210 	add.w	r2, r7, #16
   247c6:	4611      	mov	r1, r2
   247c8:	4618      	mov	r0, r3
   247ca:	f004 fd43 	bl	29254 <svr_postAction>
            }
        }
        vec_empty(&reads);
   247ce:	f107 0318 	add.w	r3, r7, #24
   247d2:	4618      	mov	r0, r3
   247d4:	f7fc ff28 	bl	21628 <vec_empty>
        vec_empty(&actions);
   247d8:	f107 0310 	add.w	r3, r7, #16
   247dc:	4618      	mov	r0, r3
   247de:	f7fc ff23 	bl	21628 <vec_empty>
    }
    if (ret == 0)
   247e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   247e4:	2b00      	cmp	r3, #0
   247e6:	d14b      	bne.n	24880 <svr_handleReadBlockNumberAccess+0x254>
    {
        ++settings->base.blockIndex;
   247e8:	687b      	ldr	r3, [r7, #4]
   247ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   247ee:	1c5a      	adds	r2, r3, #1
   247f0:	687b      	ldr	r3, [r7, #4]
   247f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        params_initSN(&p, &settings->base, DLMS_COMMAND_READ_RESPONSE, 1,
   247f6:	6879      	ldr	r1, [r7, #4]
   247f8:	687b      	ldr	r3, [r7, #4]
   247fa:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   247fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
   24802:	9303      	str	r3, [sp, #12]
   24804:	683b      	ldr	r3, [r7, #0]
   24806:	9302      	str	r3, [sp, #8]
   24808:	2300      	movs	r3, #0
   2480a:	9301      	str	r3, [sp, #4]
   2480c:	2302      	movs	r3, #2
   2480e:	9300      	str	r3, [sp, #0]
   24810:	2301      	movs	r3, #1
   24812:	220c      	movs	r2, #12
   24814:	f7fd fdb2 	bl	2237c <params_initSN>
            DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT, NULL, data, settings->info.encryptedCommand);
        p.multipleBlocks = 1;
   24818:	2301      	movs	r3, #1
   2481a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        p.lastBlock = settings->base.index == settings->base.count;
   2481e:	687b      	ldr	r3, [r7, #4]
   24820:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   24824:	687b      	ldr	r3, [r7, #4]
   24826:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   2482a:	429a      	cmp	r2, r3
   2482c:	bf0c      	ite	eq
   2482e:	2301      	moveq	r3, #1
   24830:	2300      	movne	r3, #0
   24832:	b2db      	uxtb	r3, r3
   24834:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        ret = dlms_getSNPdu(&p, data);
   24838:	f107 0334 	add.w	r3, r7, #52	; 0x34
   2483c:	6839      	ldr	r1, [r7, #0]
   2483e:	4618      	mov	r0, r3
   24840:	f7e5 ff42 	bl	a6c8 <dlms_getSNPdu>
   24844:	6538      	str	r0, [r7, #80]	; 0x50
        // If all data is sent.
        if (p.lastBlock && settings->transaction.data.size == settings->transaction.data.position)
   24846:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   2484a:	2b00      	cmp	r3, #0
   2484c:	d012      	beq.n	24874 <svr_handleReadBlockNumberAccess+0x248>
   2484e:	687b      	ldr	r3, [r7, #4]
   24850:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
   24854:	687b      	ldr	r3, [r7, #4]
   24856:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
   2485a:	429a      	cmp	r2, r3
   2485c:	d10a      	bne.n	24874 <svr_handleReadBlockNumberAccess+0x248>
        {
            trans_clear(&settings->transaction);
   2485e:	687b      	ldr	r3, [r7, #4]
   24860:	f503 738a 	add.w	r3, r3, #276	; 0x114
   24864:	4618      	mov	r0, r3
   24866:	f7e7 fb9f 	bl	bfa8 <trans_clear>
            resetBlockIndex(&settings->base);
   2486a:	687b      	ldr	r3, [r7, #4]
   2486c:	4618      	mov	r0, r3
   2486e:	f7e7 fa23 	bl	bcb8 <resetBlockIndex>
   24872:	e005      	b.n	24880 <svr_handleReadBlockNumberAccess+0x254>
        }
        else
        {
            bb_trim(&settings->transaction.data);
   24874:	687b      	ldr	r3, [r7, #4]
   24876:	f503 7390 	add.w	r3, r3, #288	; 0x120
   2487a:	4618      	mov	r0, r3
   2487c:	f7df fb5e 	bl	3f3c <bb_trim>
        }
    }
    return ret;
   24880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
   24882:	4618      	mov	r0, r3
   24884:	3758      	adds	r7, #88	; 0x58
   24886:	46bd      	mov	sp, r7
   24888:	bd80      	pop	{r7, pc}
   2488a:	bf00      	nop

0002488c <svr_handleReadDataBlockAccess>:
int svr_handleReadDataBlockAccess(
    dlmsServerSettings* settings,
    DLMS_COMMAND command,
    gxByteBuffer *data,
    int cnt)
{
   2488c:	b590      	push	{r4, r7, lr}
   2488e:	b09d      	sub	sp, #116	; 0x74
   24890:	af04      	add	r7, sp, #16
   24892:	60f8      	str	r0, [r7, #12]
   24894:	607a      	str	r2, [r7, #4]
   24896:	603b      	str	r3, [r7, #0]
   24898:	460b      	mov	r3, r1
   2489a:	72fb      	strb	r3, [r7, #11]
    gxSNParameters p;
    int ret;
    unsigned short size;
    unsigned short blockNumber;
    unsigned char isLast, ch;
    unsigned char count = 1, type = DLMS_DATA_TYPE_OCTET_STRING;
   2489c:	2301      	movs	r3, #1
   2489e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   248a2:	2309      	movs	r3, #9
   248a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   248a8:	f107 0337 	add.w	r3, r7, #55	; 0x37
   248ac:	4619      	mov	r1, r3
   248ae:	6878      	ldr	r0, [r7, #4]
   248b0:	f7de ff7c 	bl	37ac <bb_getUInt8>
   248b4:	65f8      	str	r0, [r7, #92]	; 0x5c
   248b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   248b8:	2b00      	cmp	r3, #0
   248ba:	d001      	beq.n	248c0 <svr_handleReadDataBlockAccess+0x34>
    {
        return ret;
   248bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   248be:	e137      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
    }
    isLast = ch != 0;
   248c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   248c4:	2b00      	cmp	r3, #0
   248c6:	bf14      	ite	ne
   248c8:	2301      	movne	r3, #1
   248ca:	2300      	moveq	r3, #0
   248cc:	b2db      	uxtb	r3, r3
   248ce:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if ((ret = bb_getUInt16(data, &blockNumber)) != 0)
   248d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   248d6:	4619      	mov	r1, r3
   248d8:	6878      	ldr	r0, [r7, #4]
   248da:	f7de ffc9 	bl	3870 <bb_getUInt16>
   248de:	65f8      	str	r0, [r7, #92]	; 0x5c
   248e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   248e2:	2b00      	cmp	r3, #0
   248e4:	d001      	beq.n	248ea <svr_handleReadDataBlockAccess+0x5e>
    {
        return ret;
   248e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   248e8:	e122      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
    }
    if (blockNumber != settings->base.blockIndex)
   248ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   248ec:	461a      	mov	r2, r3
   248ee:	68fb      	ldr	r3, [r7, #12]
   248f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   248f4:	429a      	cmp	r2, r3
   248f6:	d02e      	beq.n	24956 <svr_handleReadDataBlockAccess+0xca>
    {
        gxByteBuffer bb;
        bb_init(&bb);
   248f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   248fc:	4618      	mov	r0, r3
   248fe:	f7de f9f3 	bl	2ce8 <bb_init>
        bb_setUInt8(&bb, DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID);
   24902:	f107 0328 	add.w	r3, r7, #40	; 0x28
   24906:	2113      	movs	r1, #19
   24908:	4618      	mov	r0, r3
   2490a:	f7de fa83 	bl	2e14 <bb_setUInt8>
        params_initSN(&p, &settings->base, command, 1, DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR, &bb, NULL, settings->info.encryptedCommand);
   2490e:	68f9      	ldr	r1, [r7, #12]
   24910:	68fb      	ldr	r3, [r7, #12]
   24912:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   24916:	7afa      	ldrb	r2, [r7, #11]
   24918:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   2491c:	9303      	str	r3, [sp, #12]
   2491e:	2300      	movs	r3, #0
   24920:	9302      	str	r3, [sp, #8]
   24922:	f107 0328 	add.w	r3, r7, #40	; 0x28
   24926:	9301      	str	r3, [sp, #4]
   24928:	2301      	movs	r3, #1
   2492a:	9300      	str	r3, [sp, #0]
   2492c:	2301      	movs	r3, #1
   2492e:	f7fd fd25 	bl	2237c <params_initSN>
        ret = dlms_getSNPdu(&p, data);
   24932:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   24936:	6879      	ldr	r1, [r7, #4]
   24938:	4618      	mov	r0, r3
   2493a:	f7e5 fec5 	bl	a6c8 <dlms_getSNPdu>
   2493e:	65f8      	str	r0, [r7, #92]	; 0x5c
        resetBlockIndex(&settings->base);
   24940:	68fb      	ldr	r3, [r7, #12]
   24942:	4618      	mov	r0, r3
   24944:	f7e7 f9b8 	bl	bcb8 <resetBlockIndex>
        bb_clear(&bb);
   24948:	f107 0328 	add.w	r3, r7, #40	; 0x28
   2494c:	4618      	mov	r0, r3
   2494e:	f7de ff09 	bl	3764 <bb_clear>
        return ret;
   24952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24954:	e0ec      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
    }
    if (command == DLMS_COMMAND_WRITE_RESPONSE)
   24956:	7afb      	ldrb	r3, [r7, #11]
   24958:	2b0d      	cmp	r3, #13
   2495a:	d115      	bne.n	24988 <svr_handleReadDataBlockAccess+0xfc>
    {
        if ((ret = bb_getUInt8(data, &count)) != 0 ||
   2495c:	f107 0336 	add.w	r3, r7, #54	; 0x36
   24960:	4619      	mov	r1, r3
   24962:	6878      	ldr	r0, [r7, #4]
   24964:	f7de ff22 	bl	37ac <bb_getUInt8>
   24968:	65f8      	str	r0, [r7, #92]	; 0x5c
   2496a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2496c:	2b00      	cmp	r3, #0
   2496e:	d109      	bne.n	24984 <svr_handleReadDataBlockAccess+0xf8>
   24970:	f107 0335 	add.w	r3, r7, #53	; 0x35
   24974:	4619      	mov	r1, r3
   24976:	6878      	ldr	r0, [r7, #4]
   24978:	f7de ff18 	bl	37ac <bb_getUInt8>
   2497c:	65f8      	str	r0, [r7, #92]	; 0x5c
   2497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24980:	2b00      	cmp	r3, #0
   24982:	d001      	beq.n	24988 <svr_handleReadDataBlockAccess+0xfc>
            (ret = bb_getUInt8(data, &type)) != 0)
        {
            return ret;
   24984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24986:	e0d3      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
        }
    }
    if (hlp_getObjectCount2(data, &size) != 0)
   24988:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   2498c:	4619      	mov	r1, r3
   2498e:	6878      	ldr	r0, [r7, #4]
   24990:	f7fc ff5c 	bl	2184c <hlp_getObjectCount2>
   24994:	4603      	mov	r3, r0
   24996:	2b00      	cmp	r3, #0
   24998:	d002      	beq.n	249a0 <svr_handleReadDataBlockAccess+0x114>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2499a:	f44f 7381 	mov.w	r3, #258	; 0x102
   2499e:	e0c7      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
    }
    if (count != 1 || type != DLMS_DATA_TYPE_OCTET_STRING ||
   249a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   249a4:	2b01      	cmp	r3, #1
   249a6:	d10d      	bne.n	249c4 <svr_handleReadDataBlockAccess+0x138>
   249a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   249ac:	2b09      	cmp	r3, #9
   249ae:	d109      	bne.n	249c4 <svr_handleReadDataBlockAccess+0x138>
        size != data->size - data->position)
   249b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   249b2:	461a      	mov	r2, r3
   249b4:	687b      	ldr	r3, [r7, #4]
   249b6:	88db      	ldrh	r3, [r3, #6]
   249b8:	4619      	mov	r1, r3
   249ba:	687b      	ldr	r3, [r7, #4]
   249bc:	891b      	ldrh	r3, [r3, #8]
   249be:	1acb      	subs	r3, r1, r3
    }
    if (hlp_getObjectCount2(data, &size) != 0)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (count != 1 || type != DLMS_DATA_TYPE_OCTET_STRING ||
   249c0:	429a      	cmp	r2, r3
   249c2:	d02e      	beq.n	24a22 <svr_handleReadDataBlockAccess+0x196>
        size != data->size - data->position)
    {
        gxByteBuffer bb;
        bb_init(&bb);
   249c4:	f107 031c 	add.w	r3, r7, #28
   249c8:	4618      	mov	r0, r3
   249ca:	f7de f98d 	bl	2ce8 <bb_init>
        bb_setUInt8(&bb, DLMS_ERROR_CODE_BLOCK_UNAVAILABLE);
   249ce:	f107 031c 	add.w	r3, r7, #28
   249d2:	210e      	movs	r1, #14
   249d4:	4618      	mov	r0, r3
   249d6:	f7de fa1d 	bl	2e14 <bb_setUInt8>
        params_initSN(&p, &settings->base, command, cnt,
   249da:	68f9      	ldr	r1, [r7, #12]
   249dc:	68fb      	ldr	r3, [r7, #12]
   249de:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   249e2:	7afa      	ldrb	r2, [r7, #11]
   249e4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   249e8:	9303      	str	r3, [sp, #12]
   249ea:	2300      	movs	r3, #0
   249ec:	9302      	str	r3, [sp, #8]
   249ee:	f107 031c 	add.w	r3, r7, #28
   249f2:	9301      	str	r3, [sp, #4]
   249f4:	2301      	movs	r3, #1
   249f6:	9300      	str	r3, [sp, #0]
   249f8:	683b      	ldr	r3, [r7, #0]
   249fa:	f7fd fcbf 	bl	2237c <params_initSN>
            DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR, &bb, NULL, settings->info.encryptedCommand);
        ret = dlms_getSNPdu(&p, data);
   249fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   24a02:	6879      	ldr	r1, [r7, #4]
   24a04:	4618      	mov	r0, r3
   24a06:	f7e5 fe5f 	bl	a6c8 <dlms_getSNPdu>
   24a0a:	65f8      	str	r0, [r7, #92]	; 0x5c
        bb_clear(&bb);
   24a0c:	f107 031c 	add.w	r3, r7, #28
   24a10:	4618      	mov	r0, r3
   24a12:	f7de fea7 	bl	3764 <bb_clear>
        resetBlockIndex(&settings->base);
   24a16:	68fb      	ldr	r3, [r7, #12]
   24a18:	4618      	mov	r0, r3
   24a1a:	f7e7 f94d 	bl	bcb8 <resetBlockIndex>
        return ret;
   24a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24a20:	e086      	b.n	24b30 <svr_handleReadDataBlockAccess+0x2a4>
    }
    settings->transaction.command = command;
   24a22:	68fb      	ldr	r3, [r7, #12]
   24a24:	7afa      	ldrb	r2, [r7, #11]
   24a26:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   24a2a:	68fb      	ldr	r3, [r7, #12]
   24a2c:	f503 7090 	add.w	r0, r3, #288	; 0x120
   24a30:	687b      	ldr	r3, [r7, #4]
   24a32:	8919      	ldrh	r1, [r3, #8]
   24a34:	687b      	ldr	r3, [r7, #4]
   24a36:	88da      	ldrh	r2, [r3, #6]
   24a38:	687b      	ldr	r3, [r7, #4]
   24a3a:	891b      	ldrh	r3, [r3, #8]
   24a3c:	1ad3      	subs	r3, r2, r3
   24a3e:	b29b      	uxth	r3, r3
   24a40:	460a      	mov	r2, r1
   24a42:	6879      	ldr	r1, [r7, #4]
   24a44:	f7de fdec 	bl	3620 <bb_set2>
    if (!isLast)
   24a48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   24a4c:	2b00      	cmp	r3, #0
   24a4e:	d13d      	bne.n	24acc <svr_handleReadDataBlockAccess+0x240>
    {
        gxByteBuffer bb;
        bb_init(&bb);
   24a50:	f107 0310 	add.w	r3, r7, #16
   24a54:	4618      	mov	r0, r3
   24a56:	f7de f947 	bl	2ce8 <bb_init>
        bb_setUInt16(&bb, blockNumber);
   24a5a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   24a5c:	f107 0310 	add.w	r3, r7, #16
   24a60:	4611      	mov	r1, r2
   24a62:	4618      	mov	r0, r3
   24a64:	f7de fa68 	bl	2f38 <bb_setUInt16>
        ++settings->base.blockIndex;
   24a68:	68fb      	ldr	r3, [r7, #12]
   24a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   24a6e:	1c5a      	adds	r2, r3, #1
   24a70:	68fb      	ldr	r3, [r7, #12]
   24a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        if (command == DLMS_COMMAND_READ_RESPONSE)
   24a76:	7afb      	ldrb	r3, [r7, #11]
   24a78:	2b0c      	cmp	r3, #12
   24a7a:	d103      	bne.n	24a84 <svr_handleReadDataBlockAccess+0x1f8>
        {
            type = DLMS_SINGLE_READ_RESPONSE_BLOCK_NUMBER;
   24a7c:	2303      	movs	r3, #3
   24a7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   24a82:	e002      	b.n	24a8a <svr_handleReadDataBlockAccess+0x1fe>
        }
        else
        {
            type = DLMS_SINGLE_WRITE_RESPONSE_BLOCK_NUMBER;
   24a84:	2302      	movs	r3, #2
   24a86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        }
        params_initSN(&p, &settings->base, command, cnt, type, NULL, &bb, settings->info.encryptedCommand);
   24a8a:	68f9      	ldr	r1, [r7, #12]
   24a8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   24a90:	68fa      	ldr	r2, [r7, #12]
   24a92:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
   24a96:	7afc      	ldrb	r4, [r7, #11]
   24a98:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   24a9c:	9203      	str	r2, [sp, #12]
   24a9e:	f107 0210 	add.w	r2, r7, #16
   24aa2:	9202      	str	r2, [sp, #8]
   24aa4:	2200      	movs	r2, #0
   24aa6:	9201      	str	r2, [sp, #4]
   24aa8:	9300      	str	r3, [sp, #0]
   24aaa:	683b      	ldr	r3, [r7, #0]
   24aac:	4622      	mov	r2, r4
   24aae:	f7fd fc65 	bl	2237c <params_initSN>
        ret = dlms_getSNPdu(&p, data);
   24ab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   24ab6:	6879      	ldr	r1, [r7, #4]
   24ab8:	4618      	mov	r0, r3
   24aba:	f7e5 fe05 	bl	a6c8 <dlms_getSNPdu>
   24abe:	65f8      	str	r0, [r7, #92]	; 0x5c
        bb_clear(&bb);
   24ac0:	f107 0310 	add.w	r3, r7, #16
   24ac4:	4618      	mov	r0, r3
   24ac6:	f7de fe4d 	bl	3764 <bb_clear>
   24aca:	e030      	b.n	24b2e <svr_handleReadDataBlockAccess+0x2a2>
    }
    else
    {
        data->position = data->size = 0;
   24acc:	687b      	ldr	r3, [r7, #4]
   24ace:	2200      	movs	r2, #0
   24ad0:	80da      	strh	r2, [r3, #6]
   24ad2:	687b      	ldr	r3, [r7, #4]
   24ad4:	88da      	ldrh	r2, [r3, #6]
   24ad6:	687b      	ldr	r3, [r7, #4]
   24ad8:	811a      	strh	r2, [r3, #8]
        bb_set2(data, &settings->transaction.data,
   24ada:	68fb      	ldr	r3, [r7, #12]
   24adc:	f503 7190 	add.w	r1, r3, #288	; 0x120
   24ae0:	68fb      	ldr	r3, [r7, #12]
   24ae2:	f8b3 0128 	ldrh.w	r0, [r3, #296]	; 0x128
            settings->transaction.data.position,
            settings->transaction.data.size - settings->transaction.data.position);
   24ae6:	68fb      	ldr	r3, [r7, #12]
   24ae8:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
   24aec:	68fb      	ldr	r3, [r7, #12]
   24aee:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
        bb_clear(&bb);
    }
    else
    {
        data->position = data->size = 0;
        bb_set2(data, &settings->transaction.data,
   24af2:	1ad3      	subs	r3, r2, r3
   24af4:	b29b      	uxth	r3, r3
   24af6:	4602      	mov	r2, r0
   24af8:	6878      	ldr	r0, [r7, #4]
   24afa:	f7de fd91 	bl	3620 <bb_set2>
            settings->transaction.data.position,
            settings->transaction.data.size - settings->transaction.data.position);
        trans_clear(&settings->transaction);
   24afe:	68fb      	ldr	r3, [r7, #12]
   24b00:	f503 738a 	add.w	r3, r3, #276	; 0x114
   24b04:	4618      	mov	r0, r3
   24b06:	f7e7 fa4f 	bl	bfa8 <trans_clear>
        if (command == DLMS_COMMAND_READ_RESPONSE)
   24b0a:	7afb      	ldrb	r3, [r7, #11]
   24b0c:	2b0c      	cmp	r3, #12
   24b0e:	d105      	bne.n	24b1c <svr_handleReadDataBlockAccess+0x290>
        {
            ret = svr_handleReadRequest(settings, data);
   24b10:	6879      	ldr	r1, [r7, #4]
   24b12:	68f8      	ldr	r0, [r7, #12]
   24b14:	f000 f848 	bl	24ba8 <svr_handleReadRequest>
   24b18:	65f8      	str	r0, [r7, #92]	; 0x5c
   24b1a:	e004      	b.n	24b26 <svr_handleReadDataBlockAccess+0x29a>
        }
        else
        {
            ret = svr_handleWriteRequest(settings, data);
   24b1c:	6879      	ldr	r1, [r7, #4]
   24b1e:	68f8      	ldr	r0, [r7, #12]
   24b20:	f000 f9cc 	bl	24ebc <svr_handleWriteRequest>
   24b24:	65f8      	str	r0, [r7, #92]	; 0x5c
        }
        resetBlockIndex(&settings->base);
   24b26:	68fb      	ldr	r3, [r7, #12]
   24b28:	4618      	mov	r0, r3
   24b2a:	f7e7 f8c5 	bl	bcb8 <resetBlockIndex>
    }
    return ret;
   24b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
   24b30:	4618      	mov	r0, r3
   24b32:	3764      	adds	r7, #100	; 0x64
   24b34:	46bd      	mov	sp, r7
   24b36:	bd90      	pop	{r4, r7, pc}

00024b38 <svr_returnSNError>:
int svr_returnSNError(
    dlmsServerSettings* settings,
    DLMS_COMMAND cmd,
    DLMS_ERROR_CODE error,
    gxByteBuffer* data)
{
   24b38:	b580      	push	{r7, lr}
   24b3a:	b094      	sub	sp, #80	; 0x50
   24b3c:	af04      	add	r7, sp, #16
   24b3e:	60f8      	str	r0, [r7, #12]
   24b40:	607b      	str	r3, [r7, #4]
   24b42:	460b      	mov	r3, r1
   24b44:	72fb      	strb	r3, [r7, #11]
   24b46:	4613      	mov	r3, r2
   24b48:	813b      	strh	r3, [r7, #8]
    int ret;
    gxByteBuffer bb;
    gxSNParameters p;
    bb_init(&bb);
   24b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   24b4e:	4618      	mov	r0, r3
   24b50:	f7de f8ca 	bl	2ce8 <bb_init>
    bb_setUInt8(&bb, error);
   24b54:	893b      	ldrh	r3, [r7, #8]
   24b56:	b2da      	uxtb	r2, r3
   24b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
   24b5c:	4611      	mov	r1, r2
   24b5e:	4618      	mov	r0, r3
   24b60:	f7de f958 	bl	2e14 <bb_setUInt8>
    params_initSN(&p, &settings->base, cmd, 1,
   24b64:	68f9      	ldr	r1, [r7, #12]
   24b66:	68fb      	ldr	r3, [r7, #12]
   24b68:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   24b6c:	7afa      	ldrb	r2, [r7, #11]
   24b6e:	f107 0014 	add.w	r0, r7, #20
   24b72:	9303      	str	r3, [sp, #12]
   24b74:	2300      	movs	r3, #0
   24b76:	9302      	str	r3, [sp, #8]
   24b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
   24b7c:	9301      	str	r3, [sp, #4]
   24b7e:	2301      	movs	r3, #1
   24b80:	9300      	str	r3, [sp, #0]
   24b82:	2301      	movs	r3, #1
   24b84:	f7fd fbfa 	bl	2237c <params_initSN>
        DLMS_SINGLE_READ_RESPONSE_DATA_ACCESS_ERROR, &bb, NULL, settings->info.encryptedCommand);
    ret = dlms_getSNPdu(&p, data);
   24b88:	f107 0314 	add.w	r3, r7, #20
   24b8c:	6879      	ldr	r1, [r7, #4]
   24b8e:	4618      	mov	r0, r3
   24b90:	f7e5 fd9a 	bl	a6c8 <dlms_getSNPdu>
   24b94:	63f8      	str	r0, [r7, #60]	; 0x3c
    resetBlockIndex(&settings->base);
   24b96:	68fb      	ldr	r3, [r7, #12]
   24b98:	4618      	mov	r0, r3
   24b9a:	f7e7 f88d 	bl	bcb8 <resetBlockIndex>
    return ret;
   24b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   24ba0:	4618      	mov	r0, r3
   24ba2:	3740      	adds	r7, #64	; 0x40
   24ba4:	46bd      	mov	sp, r7
   24ba6:	bd80      	pop	{r7, pc}

00024ba8 <svr_handleReadRequest>:
 * Handle read request.
 */
int svr_handleReadRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   24ba8:	b590      	push	{r4, r7, lr}
   24baa:	b097      	sub	sp, #92	; 0x5c
   24bac:	af04      	add	r7, sp, #16
   24bae:	6078      	str	r0, [r7, #4]
   24bb0:	6039      	str	r1, [r7, #0]
    DLMS_SINGLE_READ_RESPONSE requestType;
    gxSNParameters p;
    int ret = 0;
   24bb2:	2300      	movs	r3, #0
   24bb4:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned char ch, multipleBlocks = 0;
   24bb6:	2300      	movs	r3, #0
   24bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned short pos, cnt = 0;
   24bbc:	2300      	movs	r3, #0
   24bbe:	843b      	strh	r3, [r7, #32]
    DLMS_VARIABLE_ACCESS_SPECIFICATION type;
    gxValueEventCollection list;
    gxValueEventCollection reads;
    gxValueEventCollection actions;
    if (settings->base.useLogicalNameReferencing)
   24bc0:	687b      	ldr	r3, [r7, #4]
   24bc2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   24bc6:	2b00      	cmp	r3, #0
   24bc8:	d009      	beq.n	24bde <svr_handleReadRequest+0x36>
    {
        return svr_generateConfirmedServiceError(
   24bca:	683b      	ldr	r3, [r7, #0]
   24bcc:	9300      	str	r3, [sp, #0]
   24bce:	2302      	movs	r3, #2
   24bd0:	2203      	movs	r2, #3
   24bd2:	2101      	movs	r1, #1
   24bd4:	6878      	ldr	r0, [r7, #4]
   24bd6:	f7fe fd1b 	bl	23610 <svr_generateConfirmedServiceError>
   24bda:	4603      	mov	r3, r0
   24bdc:	e16a      	b.n	24eb4 <svr_handleReadRequest+0x30c>
            settings,
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR,
            DLMS_SERVICE_ERROR_SERVICE, DLMS_SERVICE_UNSUPPORTED,
            data);
    }
    vec_init(&reads);
   24bde:	f107 0310 	add.w	r3, r7, #16
   24be2:	4618      	mov	r0, r3
   24be4:	f7fc fccc 	bl	21580 <vec_init>
    vec_init(&actions);
   24be8:	f107 0308 	add.w	r3, r7, #8
   24bec:	4618      	mov	r0, r3
   24bee:	f7fc fcc7 	bl	21580 <vec_init>
    // If get next frame.
    if (data->size == 0)
   24bf2:	683b      	ldr	r3, [r7, #0]
   24bf4:	88db      	ldrh	r3, [r3, #6]
   24bf6:	2b00      	cmp	r3, #0
   24bf8:	d110      	bne.n	24c1c <svr_handleReadRequest+0x74>
    {
        if (settings->transaction.command != DLMS_COMMAND_NONE)
   24bfa:	687b      	ldr	r3, [r7, #4]
   24bfc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   24c00:	2b00      	cmp	r3, #0
   24c02:	d001      	beq.n	24c08 <svr_handleReadRequest+0x60>
        {
            return 0;
   24c04:	2300      	movs	r3, #0
   24c06:	e155      	b.n	24eb4 <svr_handleReadRequest+0x30c>
        }
        list = settings->transaction.targets;
   24c08:	687a      	ldr	r2, [r7, #4]
   24c0a:	f107 0318 	add.w	r3, r7, #24
   24c0e:	f502 728c 	add.w	r2, r2, #280	; 0x118
   24c12:	e892 0003 	ldmia.w	r2, {r0, r1}
   24c16:	e883 0003 	stmia.w	r3, {r0, r1}
   24c1a:	e0ac      	b.n	24d76 <svr_handleReadRequest+0x1ce>
    }
    else
    {
        vec_init(&list);
   24c1c:	f107 0318 	add.w	r3, r7, #24
   24c20:	4618      	mov	r0, r3
   24c22:	f7fc fcad 	bl	21580 <vec_init>
        if (hlp_getObjectCount2(data, &cnt) != 0)
   24c26:	f107 0320 	add.w	r3, r7, #32
   24c2a:	4619      	mov	r1, r3
   24c2c:	6838      	ldr	r0, [r7, #0]
   24c2e:	f7fc fe0d 	bl	2184c <hlp_getObjectCount2>
   24c32:	4603      	mov	r3, r0
   24c34:	2b00      	cmp	r3, #0
   24c36:	d002      	beq.n	24c3e <svr_handleReadRequest+0x96>
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   24c38:	f44f 7381 	mov.w	r3, #258	; 0x102
   24c3c:	e13a      	b.n	24eb4 <svr_handleReadRequest+0x30c>
        }
        for (pos = 0; pos != cnt; ++pos)
   24c3e:	2300      	movs	r3, #0
   24c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   24c44:	e079      	b.n	24d3a <svr_handleReadRequest+0x192>
        {
            if ((ret = bb_getUInt8(data, &ch)) != 0)
   24c46:	f107 0323 	add.w	r3, r7, #35	; 0x23
   24c4a:	4619      	mov	r1, r3
   24c4c:	6838      	ldr	r0, [r7, #0]
   24c4e:	f7de fdad 	bl	37ac <bb_getUInt8>
   24c52:	6478      	str	r0, [r7, #68]	; 0x44
   24c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24c56:	2b00      	cmp	r3, #0
   24c58:	d175      	bne.n	24d46 <svr_handleReadRequest+0x19e>
            {
                break;
            }
            type = (DLMS_VARIABLE_ACCESS_SPECIFICATION)ch;
   24c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   24c5e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            switch (type)
   24c62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   24c66:	3b02      	subs	r3, #2
   24c68:	2b04      	cmp	r3, #4
   24c6a:	d84a      	bhi.n	24d02 <svr_handleReadRequest+0x15a>
   24c6c:	a201      	add	r2, pc, #4	; (adr r2, 24c74 <svr_handleReadRequest+0xcc>)
   24c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24c72:	bf00      	nop
   24c74:	00024c89 	.word	0x00024c89
   24c78:	00024d03 	.word	0x00024d03
   24c7c:	00024c89 	.word	0x00024c89
   24c80:	00024cab 	.word	0x00024cab
   24c84:	00024cd5 	.word	0x00024cd5
            {
            case DLMS_VARIABLE_ACCESS_SPECIFICATION_VARIABLE_NAME:
            case DLMS_VARIABLE_ACCESS_SPECIFICATION_PARAMETERISED_ACCESS:
                ret = svr_handleRead(settings, type, data, &list, &reads, &actions);
   24c88:	f107 0218 	add.w	r2, r7, #24
   24c8c:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
   24c90:	f107 0308 	add.w	r3, r7, #8
   24c94:	9301      	str	r3, [sp, #4]
   24c96:	f107 0310 	add.w	r3, r7, #16
   24c9a:	9300      	str	r3, [sp, #0]
   24c9c:	4613      	mov	r3, r2
   24c9e:	683a      	ldr	r2, [r7, #0]
   24ca0:	6878      	ldr	r0, [r7, #4]
   24ca2:	f7ff fb55 	bl	24350 <svr_handleRead>
   24ca6:	6478      	str	r0, [r7, #68]	; 0x44
                break;
   24ca8:	e042      	b.n	24d30 <svr_handleReadRequest+0x188>
            case DLMS_VARIABLE_ACCESS_SPECIFICATION_BLOCK_NUMBER_ACCESS:
                vec_clear(&list);
   24caa:	f107 0318 	add.w	r3, r7, #24
   24cae:	4618      	mov	r0, r3
   24cb0:	f7fc fcd8 	bl	21664 <vec_clear>
                vec_clear(&reads);
   24cb4:	f107 0310 	add.w	r3, r7, #16
   24cb8:	4618      	mov	r0, r3
   24cba:	f7fc fcd3 	bl	21664 <vec_clear>
                vec_clear(&actions);
   24cbe:	f107 0308 	add.w	r3, r7, #8
   24cc2:	4618      	mov	r0, r3
   24cc4:	f7fc fcce 	bl	21664 <vec_clear>
                return svr_handleReadBlockNumberAccess(settings, data);
   24cc8:	6839      	ldr	r1, [r7, #0]
   24cca:	6878      	ldr	r0, [r7, #4]
   24ccc:	f7ff fcae 	bl	2462c <svr_handleReadBlockNumberAccess>
   24cd0:	4603      	mov	r3, r0
   24cd2:	e0ef      	b.n	24eb4 <svr_handleReadRequest+0x30c>
            case DLMS_VARIABLE_ACCESS_SPECIFICATION_READ_DATA_BLOCK_ACCESS:
                vec_clear(&list);
   24cd4:	f107 0318 	add.w	r3, r7, #24
   24cd8:	4618      	mov	r0, r3
   24cda:	f7fc fcc3 	bl	21664 <vec_clear>
                vec_clear(&reads);
   24cde:	f107 0310 	add.w	r3, r7, #16
   24ce2:	4618      	mov	r0, r3
   24ce4:	f7fc fcbe 	bl	21664 <vec_clear>
                vec_clear(&actions);
   24ce8:	f107 0308 	add.w	r3, r7, #8
   24cec:	4618      	mov	r0, r3
   24cee:	f7fc fcb9 	bl	21664 <vec_clear>
                return svr_handleReadDataBlockAccess(settings, DLMS_COMMAND_READ_RESPONSE, data, cnt);
   24cf2:	8c3b      	ldrh	r3, [r7, #32]
   24cf4:	683a      	ldr	r2, [r7, #0]
   24cf6:	210c      	movs	r1, #12
   24cf8:	6878      	ldr	r0, [r7, #4]
   24cfa:	f7ff fdc7 	bl	2488c <svr_handleReadDataBlockAccess>
   24cfe:	4603      	mov	r3, r0
   24d00:	e0d8      	b.n	24eb4 <svr_handleReadRequest+0x30c>
            default:
                vec_clear(&list);
   24d02:	f107 0318 	add.w	r3, r7, #24
   24d06:	4618      	mov	r0, r3
   24d08:	f7fc fcac 	bl	21664 <vec_clear>
                vec_clear(&reads);
   24d0c:	f107 0310 	add.w	r3, r7, #16
   24d10:	4618      	mov	r0, r3
   24d12:	f7fc fca7 	bl	21664 <vec_clear>
                vec_clear(&actions);
   24d16:	f107 0308 	add.w	r3, r7, #8
   24d1a:	4618      	mov	r0, r3
   24d1c:	f7fc fca2 	bl	21664 <vec_clear>
                return svr_returnSNError(settings, DLMS_COMMAND_READ_RESPONSE, DLMS_ERROR_CODE_READ_WRITE_DENIED, data);
   24d20:	683b      	ldr	r3, [r7, #0]
   24d22:	2203      	movs	r2, #3
   24d24:	210c      	movs	r1, #12
   24d26:	6878      	ldr	r0, [r7, #4]
   24d28:	f7ff ff06 	bl	24b38 <svr_returnSNError>
   24d2c:	4603      	mov	r3, r0
   24d2e:	e0c1      	b.n	24eb4 <svr_handleReadRequest+0x30c>
        vec_init(&list);
        if (hlp_getObjectCount2(data, &cnt) != 0)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        for (pos = 0; pos != cnt; ++pos)
   24d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   24d34:	3301      	adds	r3, #1
   24d36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   24d3a:	8c3b      	ldrh	r3, [r7, #32]
   24d3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   24d40:	429a      	cmp	r2, r3
   24d42:	d180      	bne.n	24c46 <svr_handleReadRequest+0x9e>
   24d44:	e000      	b.n	24d48 <svr_handleReadRequest+0x1a0>
        {
            if ((ret = bb_getUInt8(data, &ch)) != 0)
            {
                break;
   24d46:	bf00      	nop
                vec_clear(&reads);
                vec_clear(&actions);
                return svr_returnSNError(settings, DLMS_COMMAND_READ_RESPONSE, DLMS_ERROR_CODE_READ_WRITE_DENIED, data);
            }
        }
        if (ret == 0)
   24d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24d4a:	2b00      	cmp	r3, #0
   24d4c:	d113      	bne.n	24d76 <svr_handleReadRequest+0x1ce>
        {
            if (reads.size != 0)
   24d4e:	7d7b      	ldrb	r3, [r7, #21]
   24d50:	2b00      	cmp	r3, #0
   24d52:	d006      	beq.n	24d62 <svr_handleReadRequest+0x1ba>
            {
                svr_preRead(&settings->base, &reads);
   24d54:	687b      	ldr	r3, [r7, #4]
   24d56:	f107 0210 	add.w	r2, r7, #16
   24d5a:	4611      	mov	r1, r2
   24d5c:	4618      	mov	r0, r3
   24d5e:	f004 f8e3 	bl	28f28 <svr_preRead>
            }
            if (actions.size != 0)
   24d62:	7b7b      	ldrb	r3, [r7, #13]
   24d64:	2b00      	cmp	r3, #0
   24d66:	d006      	beq.n	24d76 <svr_handleReadRequest+0x1ce>
            {
                svr_preAction(&settings->base, &actions);
   24d68:	687b      	ldr	r3, [r7, #4]
   24d6a:	f107 0208 	add.w	r2, r7, #8
   24d6e:	4611      	mov	r1, r2
   24d70:	4618      	mov	r0, r3
   24d72:	f004 fa39 	bl	291e8 <svr_preAction>
            }
        }
    }
    if (ret == 0)
   24d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24d78:	2b00      	cmp	r3, #0
   24d7a:	f040 808b 	bne.w	24e94 <svr_handleReadRequest+0x2ec>
    {
        ret = svr_getReadData(settings, &list, data, &requestType, &multipleBlocks);
   24d7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
   24d82:	f107 0118 	add.w	r1, r7, #24
   24d86:	f107 0322 	add.w	r3, r7, #34	; 0x22
   24d8a:	9300      	str	r3, [sp, #0]
   24d8c:	4613      	mov	r3, r2
   24d8e:	683a      	ldr	r2, [r7, #0]
   24d90:	6878      	ldr	r0, [r7, #4]
   24d92:	f7ff fb83 	bl	2449c <svr_getReadData>
   24d96:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret == 0)
   24d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24d9a:	2b00      	cmp	r3, #0
   24d9c:	d17a      	bne.n	24e94 <svr_handleReadRequest+0x2ec>
        {
            if (reads.size != 0)
   24d9e:	7d7b      	ldrb	r3, [r7, #21]
   24da0:	2b00      	cmp	r3, #0
   24da2:	d006      	beq.n	24db2 <svr_handleReadRequest+0x20a>
            {
                svr_postRead(&settings->base, &reads);
   24da4:	687b      	ldr	r3, [r7, #4]
   24da6:	f107 0210 	add.w	r2, r7, #16
   24daa:	4611      	mov	r1, r2
   24dac:	4618      	mov	r0, r3
   24dae:	f004 fa3d 	bl	2922c <svr_postRead>
            }
            if (actions.size != 0)
   24db2:	7b7b      	ldrb	r3, [r7, #13]
   24db4:	2b00      	cmp	r3, #0
   24db6:	d006      	beq.n	24dc6 <svr_handleReadRequest+0x21e>
            {
                svr_postAction(&settings->base, &actions);
   24db8:	687b      	ldr	r3, [r7, #4]
   24dba:	f107 0208 	add.w	r2, r7, #8
   24dbe:	4611      	mov	r1, r2
   24dc0:	4618      	mov	r0, r3
   24dc2:	f004 fa47 	bl	29254 <svr_postAction>
            }

            params_initSN(&p, &settings->base, DLMS_COMMAND_READ_RESPONSE, cnt,
   24dc6:	6879      	ldr	r1, [r7, #4]
   24dc8:	8c3b      	ldrh	r3, [r7, #32]
   24dca:	461c      	mov	r4, r3
   24dcc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   24dd0:	687a      	ldr	r2, [r7, #4]
   24dd2:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
   24dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
   24dda:	9203      	str	r2, [sp, #12]
   24ddc:	683a      	ldr	r2, [r7, #0]
   24dde:	9202      	str	r2, [sp, #8]
   24de0:	2200      	movs	r2, #0
   24de2:	9201      	str	r2, [sp, #4]
   24de4:	9300      	str	r3, [sp, #0]
   24de6:	4623      	mov	r3, r4
   24de8:	220c      	movs	r2, #12
   24dea:	f7fd fac7 	bl	2237c <params_initSN>
                requestType, NULL, data, settings->info.encryptedCommand);
            p.multipleBlocks = multipleBlocks;
   24dee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   24df2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            p.lastBlock = settings->base.index == settings->base.count;
   24df6:	687b      	ldr	r3, [r7, #4]
   24df8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   24dfc:	687b      	ldr	r3, [r7, #4]
   24dfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   24e02:	429a      	cmp	r2, r3
   24e04:	bf0c      	ite	eq
   24e06:	2301      	moveq	r3, #1
   24e08:	2300      	movne	r3, #0
   24e0a:	b2db      	uxtb	r3, r3
   24e0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            ret = dlms_getSNPdu(&p, data);
   24e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
   24e14:	6839      	ldr	r1, [r7, #0]
   24e16:	4618      	mov	r0, r3
   24e18:	f7e5 fc56 	bl	a6c8 <dlms_getSNPdu>
   24e1c:	6478      	str	r0, [r7, #68]	; 0x44
            if (ret == 0)
   24e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24e20:	2b00      	cmp	r3, #0
   24e22:	d137      	bne.n	24e94 <svr_handleReadRequest+0x2ec>
            {
                if (settings->base.count != settings->base.index)
   24e24:	687b      	ldr	r3, [r7, #4]
   24e26:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
   24e2a:	687b      	ldr	r3, [r7, #4]
   24e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   24e30:	429a      	cmp	r2, r3
   24e32:	d027      	beq.n	24e84 <svr_handleReadRequest+0x2dc>
                {
                    settings->transaction.targets = list;
   24e34:	687b      	ldr	r3, [r7, #4]
   24e36:	f503 738c 	add.w	r3, r3, #280	; 0x118
   24e3a:	f107 0218 	add.w	r2, r7, #24
   24e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
   24e42:	e883 0003 	stmia.w	r3, {r0, r1}
                    vec_init(&list);
   24e46:	f107 0318 	add.w	r3, r7, #24
   24e4a:	4618      	mov	r0, r3
   24e4c:	f7fc fb98 	bl	21580 <vec_init>
                    settings->transaction.command = DLMS_COMMAND_READ_REQUEST;
   24e50:	687b      	ldr	r3, [r7, #4]
   24e52:	2205      	movs	r2, #5
   24e54:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    if (!bb_isAttached(data))
   24e58:	6838      	ldr	r0, [r7, #0]
   24e5a:	f7dd ff17 	bl	2c8c <bb_isAttached>
   24e5e:	4603      	mov	r3, r0
   24e60:	2b00      	cmp	r3, #0
   24e62:	d117      	bne.n	24e94 <svr_handleReadRequest+0x2ec>
                    {
                        bb_set2(&settings->transaction.data, data, data->position, data->size - data->position);
   24e64:	687b      	ldr	r3, [r7, #4]
   24e66:	f503 7090 	add.w	r0, r3, #288	; 0x120
   24e6a:	683b      	ldr	r3, [r7, #0]
   24e6c:	8919      	ldrh	r1, [r3, #8]
   24e6e:	683b      	ldr	r3, [r7, #0]
   24e70:	88da      	ldrh	r2, [r3, #6]
   24e72:	683b      	ldr	r3, [r7, #0]
   24e74:	891b      	ldrh	r3, [r3, #8]
   24e76:	1ad3      	subs	r3, r2, r3
   24e78:	b29b      	uxth	r3, r3
   24e7a:	460a      	mov	r2, r1
   24e7c:	6839      	ldr	r1, [r7, #0]
   24e7e:	f7de fbcf 	bl	3620 <bb_set2>
   24e82:	e007      	b.n	24e94 <svr_handleReadRequest+0x2ec>
                    }
                }
                else
                {
                    // If all data is transfered.
                    settings->base.index = 0;
   24e84:	687b      	ldr	r3, [r7, #4]
   24e86:	2200      	movs	r2, #0
   24e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
                    settings->base.count = 0;
   24e8c:	687b      	ldr	r3, [r7, #4]
   24e8e:	2200      	movs	r2, #0
   24e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
            }
        }
    }
    vec_empty(&reads);
   24e94:	f107 0310 	add.w	r3, r7, #16
   24e98:	4618      	mov	r0, r3
   24e9a:	f7fc fbc5 	bl	21628 <vec_empty>
    vec_empty(&actions);
   24e9e:	f107 0308 	add.w	r3, r7, #8
   24ea2:	4618      	mov	r0, r3
   24ea4:	f7fc fbc0 	bl	21628 <vec_empty>
    vec_clear(&list);
   24ea8:	f107 0318 	add.w	r3, r7, #24
   24eac:	4618      	mov	r0, r3
   24eae:	f7fc fbd9 	bl	21664 <vec_clear>
    return ret;
   24eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   24eb4:	4618      	mov	r0, r3
   24eb6:	374c      	adds	r7, #76	; 0x4c
   24eb8:	46bd      	mov	sp, r7
   24eba:	bd90      	pop	{r4, r7, pc}

00024ebc <svr_handleWriteRequest>:

int svr_handleWriteRequest(
    dlmsServerSettings* settings,
    gxByteBuffer* data)
{
   24ebc:	b580      	push	{r7, lr}
   24ebe:	b09e      	sub	sp, #120	; 0x78
   24ec0:	af04      	add	r7, sp, #16
   24ec2:	6078      	str	r0, [r7, #4]
   24ec4:	6039      	str	r1, [r7, #0]
    gxSNParameters p;
    int ret = 0;
   24ec6:	2300      	movs	r3, #0
   24ec8:	667b      	str	r3, [r7, #100]	; 0x64
    DLMS_ACCESS_MODE am;
    gxSNInfo i;
    gxValueEventCollection arr;
    DLMS_VARIABLE_ACCESS_SPECIFICATION type;
    gxByteBuffer results;
    if (settings->base.useLogicalNameReferencing)
   24eca:	687b      	ldr	r3, [r7, #4]
   24ecc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   24ed0:	2b00      	cmp	r3, #0
   24ed2:	d009      	beq.n	24ee8 <svr_handleWriteRequest+0x2c>
    {
        return svr_generateConfirmedServiceError(
   24ed4:	683b      	ldr	r3, [r7, #0]
   24ed6:	9300      	str	r3, [sp, #0]
   24ed8:	2302      	movs	r3, #2
   24eda:	2203      	movs	r2, #3
   24edc:	2101      	movs	r1, #1
   24ede:	6878      	ldr	r0, [r7, #4]
   24ee0:	f7fe fb96 	bl	23610 <svr_generateConfirmedServiceError>
   24ee4:	4603      	mov	r3, r0
   24ee6:	e1de      	b.n	252a6 <svr_handleWriteRequest+0x3ea>
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR,
            DLMS_SERVICE_ERROR_SERVICE, DLMS_SERVICE_UNSUPPORTED,
            data);
    }
    // Return error if connection is not established.
    if (!settings->info.preEstablished && (settings->base.connected & DLMS_CONNECTION_STATE_DLMS) == 0)
   24ee8:	687b      	ldr	r3, [r7, #4]
   24eea:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   24eee:	2b00      	cmp	r3, #0
   24ef0:	d110      	bne.n	24f14 <svr_handleWriteRequest+0x58>
   24ef2:	687b      	ldr	r3, [r7, #4]
   24ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   24ef8:	f003 0302 	and.w	r3, r3, #2
   24efc:	2b00      	cmp	r3, #0
   24efe:	d109      	bne.n	24f14 <svr_handleWriteRequest+0x58>
    {
        return svr_generateConfirmedServiceError(
   24f00:	683b      	ldr	r3, [r7, #0]
   24f02:	9300      	str	r3, [sp, #0]
   24f04:	2302      	movs	r3, #2
   24f06:	2203      	movs	r2, #3
   24f08:	2101      	movs	r1, #1
   24f0a:	6878      	ldr	r0, [r7, #4]
   24f0c:	f7fe fb80 	bl	23610 <svr_generateConfirmedServiceError>
   24f10:	4603      	mov	r3, r0
   24f12:	e1c8      	b.n	252a6 <svr_handleWriteRequest+0x3ea>
            DLMS_CONFIRMED_SERVICE_ERROR_INITIATE_ERROR,
            DLMS_SERVICE_ERROR_SERVICE,
            DLMS_SERVICE_UNSUPPORTED, data);
    }
    // Get object count.
    if (hlp_getObjectCount2(data, &cnt) != 0)
   24f14:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   24f18:	4619      	mov	r1, r3
   24f1a:	6838      	ldr	r0, [r7, #0]
   24f1c:	f7fc fc96 	bl	2184c <hlp_getObjectCount2>
   24f20:	4603      	mov	r3, r0
   24f22:	2b00      	cmp	r3, #0
   24f24:	d002      	beq.n	24f2c <svr_handleWriteRequest+0x70>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   24f26:	f44f 7381 	mov.w	r3, #258	; 0x102
   24f2a:	e1bc      	b.n	252a6 <svr_handleWriteRequest+0x3ea>
    }
    bb_init(&results);
   24f2c:	f107 0318 	add.w	r3, r7, #24
   24f30:	4618      	mov	r0, r3
   24f32:	f7dd fed9 	bl	2ce8 <bb_init>
    bb_capacity(&results, cnt);
   24f36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   24f38:	f107 0318 	add.w	r3, r7, #24
   24f3c:	4611      	mov	r1, r2
   24f3e:	4618      	mov	r0, r3
   24f40:	f7dd fee8 	bl	2d14 <bb_capacity>
    vec_init(&arr);
   24f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
   24f48:	4618      	mov	r0, r3
   24f4a:	f7fc fb19 	bl	21580 <vec_init>
    for (pos = 0; pos != cnt; ++pos)
   24f4e:	2300      	movs	r3, #0
   24f50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   24f54:	e06e      	b.n	25034 <svr_handleWriteRequest+0x178>
    {
        if ((ret = bb_getUInt8(data, &ch)) != 0)
   24f56:	f107 033f 	add.w	r3, r7, #63	; 0x3f
   24f5a:	4619      	mov	r1, r3
   24f5c:	6838      	ldr	r0, [r7, #0]
   24f5e:	f7de fc25 	bl	37ac <bb_getUInt8>
   24f62:	6678      	str	r0, [r7, #100]	; 0x64
   24f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f66:	2b00      	cmp	r3, #0
   24f68:	d16a      	bne.n	25040 <svr_handleWriteRequest+0x184>
        {
            break;
        }
        type = (DLMS_VARIABLE_ACCESS_SPECIFICATION)ch;
   24f6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   24f6e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        switch (type)
   24f72:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   24f76:	2b02      	cmp	r3, #2
   24f78:	d002      	beq.n	24f80 <svr_handleWriteRequest+0xc4>
   24f7a:	2b07      	cmp	r3, #7
   24f7c:	d03e      	beq.n	24ffc <svr_handleWriteRequest+0x140>
   24f7e:	e04a      	b.n	25016 <svr_handleWriteRequest+0x15a>
        {
        case DLMS_VARIABLE_ACCESS_SPECIFICATION_VARIABLE_NAME:
            if ((ret = bb_getUInt16(data, &sn)) != 0)
   24f80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   24f84:	4619      	mov	r1, r3
   24f86:	6838      	ldr	r0, [r7, #0]
   24f88:	f7de fc72 	bl	3870 <bb_getUInt16>
   24f8c:	6678      	str	r0, [r7, #100]	; 0x64
   24f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f90:	2b00      	cmp	r3, #0
   24f92:	d147      	bne.n	25024 <svr_handleWriteRequest+0x168>
            {
                break;
            }
            if ((ret = svr_findSNObject(settings, sn, &i)) != 0)
   24f94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   24f96:	4619      	mov	r1, r3
   24f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   24f9c:	461a      	mov	r2, r3
   24f9e:	6878      	ldr	r0, [r7, #4]
   24fa0:	f7ff f94c 	bl	2423c <svr_findSNObject>
   24fa4:	6678      	str	r0, [r7, #100]	; 0x64
   24fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24fa8:	2b00      	cmp	r3, #0
   24faa:	d13d      	bne.n	25028 <svr_handleWriteRequest+0x16c>
            {
                break;
            }
            e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   24fac:	2048      	movs	r0, #72	; 0x48
   24fae:	f004 fd49 	bl	29a44 <malloc>
   24fb2:	4603      	mov	r3, r0
   24fb4:	643b      	str	r3, [r7, #64]	; 0x40
            ve_init(e);
   24fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24fb8:	4618      	mov	r0, r3
   24fba:	f7fc fbad 	bl	21718 <ve_init>
            e->target = i.item;
   24fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   24fc2:	615a      	str	r2, [r3, #20]
            e->index = i.index;
   24fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24fc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   24fca:	761a      	strb	r2, [r3, #24]
            vec_push(&arr, e);
   24fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   24fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
   24fd2:	4611      	mov	r1, r2
   24fd4:	4618      	mov	r0, r3
   24fd6:	f7fc fae9 	bl	215ac <vec_push>
            // If target is unknown.
            if (i.item == NULL)
   24fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   24fdc:	2b00      	cmp	r3, #0
   24fde:	d106      	bne.n	24fee <svr_handleWriteRequest+0x132>
            {
                // Device reports a undefined object.
                bb_setUInt8(&results, DLMS_ERROR_CODE_UNDEFINED_OBJECT);
   24fe0:	f107 0318 	add.w	r3, r7, #24
   24fe4:	2104      	movs	r1, #4
   24fe6:	4618      	mov	r0, r3
   24fe8:	f7dd ff14 	bl	2e14 <bb_setUInt8>
            }
            else
            {
                bb_setUInt8(&results, DLMS_ERROR_CODE_OK);
            }
            break;
   24fec:	e01d      	b.n	2502a <svr_handleWriteRequest+0x16e>
                // Device reports a undefined object.
                bb_setUInt8(&results, DLMS_ERROR_CODE_UNDEFINED_OBJECT);
            }
            else
            {
                bb_setUInt8(&results, DLMS_ERROR_CODE_OK);
   24fee:	f107 0318 	add.w	r3, r7, #24
   24ff2:	2100      	movs	r1, #0
   24ff4:	4618      	mov	r0, r3
   24ff6:	f7dd ff0d 	bl	2e14 <bb_setUInt8>
            }
            break;
   24ffa:	e016      	b.n	2502a <svr_handleWriteRequest+0x16e>
        case DLMS_VARIABLE_ACCESS_SPECIFICATION_WRITE_DATA_BLOCK_ACCESS:
            bb_clear(&results);
   24ffc:	f107 0318 	add.w	r3, r7, #24
   25000:	4618      	mov	r0, r3
   25002:	f7de fbaf 	bl	3764 <bb_clear>
            return svr_handleReadDataBlockAccess(settings, DLMS_COMMAND_WRITE_RESPONSE, data, cnt);
   25006:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   25008:	683a      	ldr	r2, [r7, #0]
   2500a:	210d      	movs	r1, #13
   2500c:	6878      	ldr	r0, [r7, #4]
   2500e:	f7ff fc3d 	bl	2488c <svr_handleReadDataBlockAccess>
   25012:	4603      	mov	r3, r0
   25014:	e147      	b.n	252a6 <svr_handleWriteRequest+0x3ea>
        default:
            // Device reports a HW error.
            bb_setUInt8(&results, DLMS_ERROR_CODE_HARDWARE_FAULT);
   25016:	f107 0318 	add.w	r3, r7, #24
   2501a:	2101      	movs	r1, #1
   2501c:	4618      	mov	r0, r3
   2501e:	f7dd fef9 	bl	2e14 <bb_setUInt8>
   25022:	e002      	b.n	2502a <svr_handleWriteRequest+0x16e>
        switch (type)
        {
        case DLMS_VARIABLE_ACCESS_SPECIFICATION_VARIABLE_NAME:
            if ((ret = bb_getUInt16(data, &sn)) != 0)
            {
                break;
   25024:	bf00      	nop
   25026:	e000      	b.n	2502a <svr_handleWriteRequest+0x16e>
            }
            if ((ret = svr_findSNObject(settings, sn, &i)) != 0)
            {
                break;
   25028:	bf00      	nop
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    bb_init(&results);
    bb_capacity(&results, cnt);
    vec_init(&arr);
    for (pos = 0; pos != cnt; ++pos)
   2502a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
   2502e:	3301      	adds	r3, #1
   25030:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   25034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   25036:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   2503a:	429a      	cmp	r2, r3
   2503c:	d18b      	bne.n	24f56 <svr_handleWriteRequest+0x9a>
   2503e:	e000      	b.n	25042 <svr_handleWriteRequest+0x186>
    {
        if ((ret = bb_getUInt8(data, &ch)) != 0)
        {
            break;
   25040:	bf00      	nop
            // Device reports a HW error.
            bb_setUInt8(&results, DLMS_ERROR_CODE_HARDWARE_FAULT);
        }
    }
    // Get data count.
    if (hlp_getObjectCount2(data, &cnt) != 0)
   25042:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   25046:	4619      	mov	r1, r3
   25048:	6838      	ldr	r0, [r7, #0]
   2504a:	f7fc fbff 	bl	2184c <hlp_getObjectCount2>
   2504e:	4603      	mov	r3, r0
   25050:	2b00      	cmp	r3, #0
   25052:	d004      	beq.n	2505e <svr_handleWriteRequest+0x1a2>
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   25054:	f44f 7381 	mov.w	r3, #258	; 0x102
   25058:	667b      	str	r3, [r7, #100]	; 0x64
        cnt = 0;
   2505a:	2300      	movs	r3, #0
   2505c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    di_init(&di);
   2505e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   25062:	4618      	mov	r0, r3
   25064:	f7e1 f87a 	bl	615c <di_init>
    for (pos = 0; pos != cnt; ++pos)
   25068:	2300      	movs	r3, #0
   2506a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   2506e:	e08d      	b.n	2518c <svr_handleWriteRequest+0x2d0>
    {
        if ((ret = bb_getUInt8ByIndex(&results, pos, &ch)) != 0)
   25070:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
   25074:	f107 023f 	add.w	r2, r7, #63	; 0x3f
   25078:	f107 0318 	add.w	r3, r7, #24
   2507c:	4618      	mov	r0, r3
   2507e:	f7de fbdb 	bl	3838 <bb_getUInt8ByIndex>
   25082:	6678      	str	r0, [r7, #100]	; 0x64
   25084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25086:	2b00      	cmp	r3, #0
   25088:	f040 8087 	bne.w	2519a <svr_handleWriteRequest+0x2de>
        {
            break;
        }
        if (ch == 0)
   2508c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   25090:	2b00      	cmp	r3, #0
   25092:	d176      	bne.n	25182 <svr_handleWriteRequest+0x2c6>
        {
            // If object has found.
            if ((ret = vec_getByIndex(&arr, pos, &e)) != 0)
   25094:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
   25098:	f107 0240 	add.w	r2, r7, #64	; 0x40
   2509c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   250a0:	4618      	mov	r0, r3
   250a2:	f7fc fb1b 	bl	216dc <vec_getByIndex>
   250a6:	6678      	str	r0, [r7, #100]	; 0x64
   250a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   250aa:	2b00      	cmp	r3, #0
   250ac:	d177      	bne.n	2519e <svr_handleWriteRequest+0x2e2>
            {
                break;
            }
            if ((ret = dlms_getData(data, &di, &e->value)) != 0)
   250ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   250b0:	461a      	mov	r2, r3
   250b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   250b6:	4619      	mov	r1, r3
   250b8:	6838      	ldr	r0, [r7, #0]
   250ba:	f7e2 fda1 	bl	7c00 <dlms_getData>
   250be:	6678      	str	r0, [r7, #100]	; 0x64
   250c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   250c2:	2b00      	cmp	r3, #0
   250c4:	d16d      	bne.n	251a2 <svr_handleWriteRequest+0x2e6>
            {
                break;
            }
            di_init(&di);
   250c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   250ca:	4618      	mov	r0, r3
   250cc:	f7e1 f846 	bl	615c <di_init>
            am = svr_getAttributeAccess(&settings->base, e->target, e->index);
   250d0:	6878      	ldr	r0, [r7, #4]
   250d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   250d4:	6959      	ldr	r1, [r3, #20]
   250d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   250d8:	7e1b      	ldrb	r3, [r3, #24]
   250da:	461a      	mov	r2, r3
   250dc:	f004 f92a 	bl	29334 <svr_getAttributeAccess>
   250e0:	4603      	mov	r3, r0
   250e2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
            // If write is denied.
            if (am != DLMS_ACCESS_MODE_WRITE && am != DLMS_ACCESS_MODE_READ_WRITE)
   250e6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   250ea:	2b02      	cmp	r3, #2
   250ec:	d00c      	beq.n	25108 <svr_handleWriteRequest+0x24c>
   250ee:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   250f2:	2b03      	cmp	r3, #3
   250f4:	d008      	beq.n	25108 <svr_handleWriteRequest+0x24c>
            {
                bb_setUInt8ByIndex(&results, pos, DLMS_ERROR_CODE_READ_WRITE_DENIED);
   250f6:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
   250fa:	f107 0318 	add.w	r3, r7, #24
   250fe:	2203      	movs	r2, #3
   25100:	4618      	mov	r0, r3
   25102:	f7dd fec5 	bl	2e90 <bb_setUInt8ByIndex>
   25106:	e03c      	b.n	25182 <svr_handleWriteRequest+0x2c6>
            }
            else
            {
                svr_preWrite(&settings->base, &arr);
   25108:	687b      	ldr	r3, [r7, #4]
   2510a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   2510e:	4611      	mov	r1, r2
   25110:	4618      	mov	r0, r3
   25112:	f004 f847 	bl	291a4 <svr_preWrite>
                if (e->error != 0)
   25116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25118:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   2511c:	2b00      	cmp	r3, #0
   2511e:	d00b      	beq.n	25138 <svr_handleWriteRequest+0x27c>
                {
                    bb_setUInt8ByIndex(&results, pos, e->error);
   25120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25122:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   25126:	b2da      	uxtb	r2, r3
   25128:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
   2512c:	f107 0318 	add.w	r3, r7, #24
   25130:	4618      	mov	r0, r3
   25132:	f7dd fead 	bl	2e90 <bb_setUInt8ByIndex>
   25136:	e024      	b.n	25182 <svr_handleWriteRequest+0x2c6>
                }
                else if (!e->handled)
   25138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2513a:	7c1b      	ldrb	r3, [r3, #16]
   2513c:	2b00      	cmp	r3, #0
   2513e:	d120      	bne.n	25182 <svr_handleWriteRequest+0x2c6>
                {
                    if ((ret = cosem_setValue(&settings->base, e)) != 0)
   25140:	687b      	ldr	r3, [r7, #4]
   25142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   25144:	4611      	mov	r1, r2
   25146:	4618      	mov	r0, r3
   25148:	f7f9 ff64 	bl	1f014 <cosem_setValue>
   2514c:	6678      	str	r0, [r7, #100]	; 0x64
   2514e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25150:	2b00      	cmp	r3, #0
   25152:	d128      	bne.n	251a6 <svr_handleWriteRequest+0x2ea>
                    {
                        break;
                    }
                    svr_postWrite(&settings->base, &arr);
   25154:	687b      	ldr	r3, [r7, #4]
   25156:	f107 0224 	add.w	r2, r7, #36	; 0x24
   2515a:	4611      	mov	r1, r2
   2515c:	4618      	mov	r0, r3
   2515e:	f004 f86f 	bl	29240 <svr_postWrite>
                    if (e->error != 0)
   25162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25164:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   25168:	2b00      	cmp	r3, #0
   2516a:	d00a      	beq.n	25182 <svr_handleWriteRequest+0x2c6>
                    {
                        bb_setUInt8ByIndex(&results, pos, e->error);
   2516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2516e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   25172:	b2da      	uxtb	r2, r3
   25174:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
   25178:	f107 0318 	add.w	r3, r7, #24
   2517c:	4618      	mov	r0, r3
   2517e:	f7dd fe87 	bl	2e90 <bb_setUInt8ByIndex>
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        cnt = 0;
    }
    di_init(&di);
    for (pos = 0; pos != cnt; ++pos)
   25182:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
   25186:	3301      	adds	r3, #1
   25188:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   2518c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   2518e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   25192:	429a      	cmp	r2, r3
   25194:	f47f af6c 	bne.w	25070 <svr_handleWriteRequest+0x1b4>
   25198:	e006      	b.n	251a8 <svr_handleWriteRequest+0x2ec>
    {
        if ((ret = bb_getUInt8ByIndex(&results, pos, &ch)) != 0)
        {
            break;
   2519a:	bf00      	nop
   2519c:	e004      	b.n	251a8 <svr_handleWriteRequest+0x2ec>
        if (ch == 0)
        {
            // If object has found.
            if ((ret = vec_getByIndex(&arr, pos, &e)) != 0)
            {
                break;
   2519e:	bf00      	nop
   251a0:	e002      	b.n	251a8 <svr_handleWriteRequest+0x2ec>
            }
            if ((ret = dlms_getData(data, &di, &e->value)) != 0)
            {
                break;
   251a2:	bf00      	nop
   251a4:	e000      	b.n	251a8 <svr_handleWriteRequest+0x2ec>
                }
                else if (!e->handled)
                {
                    if ((ret = cosem_setValue(&settings->base, e)) != 0)
                    {
                        break;
   251a6:	bf00      	nop
                    }
                }
            }
        }
    }
    if (ret == 0)
   251a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   251aa:	2b00      	cmp	r3, #0
   251ac:	d168      	bne.n	25280 <svr_handleWriteRequest+0x3c4>
    {
        gxByteBuffer bb;
        bb_init(&bb);
   251ae:	f107 030c 	add.w	r3, r7, #12
   251b2:	4618      	mov	r0, r3
   251b4:	f7dd fd98 	bl	2ce8 <bb_init>
        bb_capacity(&bb, 2 * cnt);
   251b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   251ba:	005b      	lsls	r3, r3, #1
   251bc:	b29a      	uxth	r2, r3
   251be:	f107 030c 	add.w	r3, r7, #12
   251c2:	4611      	mov	r1, r2
   251c4:	4618      	mov	r0, r3
   251c6:	f7dd fda5 	bl	2d14 <bb_capacity>
        for (pos = 0; pos != cnt; ++pos)
   251ca:	2300      	movs	r3, #0
   251cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   251d0:	e022      	b.n	25218 <svr_handleWriteRequest+0x35c>
        {
            if ((ret = bb_getUInt8(&results, &ch)) != 0)
   251d2:	f107 023f 	add.w	r2, r7, #63	; 0x3f
   251d6:	f107 0318 	add.w	r3, r7, #24
   251da:	4611      	mov	r1, r2
   251dc:	4618      	mov	r0, r3
   251de:	f7de fae5 	bl	37ac <bb_getUInt8>
   251e2:	6678      	str	r0, [r7, #100]	; 0x64
   251e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   251e6:	2b00      	cmp	r3, #0
   251e8:	d11c      	bne.n	25224 <svr_handleWriteRequest+0x368>
            {
                break;
            }
            // If meter returns error.
            if (ch != 0)
   251ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   251ee:	2b00      	cmp	r3, #0
   251f0:	d005      	beq.n	251fe <svr_handleWriteRequest+0x342>
            {
                bb_setUInt8(&bb, 1);
   251f2:	f107 030c 	add.w	r3, r7, #12
   251f6:	2101      	movs	r1, #1
   251f8:	4618      	mov	r0, r3
   251fa:	f7dd fe0b 	bl	2e14 <bb_setUInt8>
            }
            bb_setUInt8(&bb, ch);
   251fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
   25202:	f107 030c 	add.w	r3, r7, #12
   25206:	4611      	mov	r1, r2
   25208:	4618      	mov	r0, r3
   2520a:	f7dd fe03 	bl	2e14 <bb_setUInt8>
    if (ret == 0)
    {
        gxByteBuffer bb;
        bb_init(&bb);
        bb_capacity(&bb, 2 * cnt);
        for (pos = 0; pos != cnt; ++pos)
   2520e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
   25212:	3301      	adds	r3, #1
   25214:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   25218:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   2521a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   2521e:	429a      	cmp	r2, r3
   25220:	d1d7      	bne.n	251d2 <svr_handleWriteRequest+0x316>
   25222:	e000      	b.n	25226 <svr_handleWriteRequest+0x36a>
        {
            if ((ret = bb_getUInt8(&results, &ch)) != 0)
            {
                break;
   25224:	bf00      	nop
            {
                bb_setUInt8(&bb, 1);
            }
            bb_setUInt8(&bb, ch);
        }
        params_initSN(&p, &settings->base, DLMS_COMMAND_WRITE_RESPONSE, cnt, 0xFF, NULL, &bb, settings->info.encryptedCommand);
   25226:	6879      	ldr	r1, [r7, #4]
   25228:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   2522a:	461a      	mov	r2, r3
   2522c:	687b      	ldr	r3, [r7, #4]
   2522e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   25232:	f107 0044 	add.w	r0, r7, #68	; 0x44
   25236:	9303      	str	r3, [sp, #12]
   25238:	f107 030c 	add.w	r3, r7, #12
   2523c:	9302      	str	r3, [sp, #8]
   2523e:	2300      	movs	r3, #0
   25240:	9301      	str	r3, [sp, #4]
   25242:	23ff      	movs	r3, #255	; 0xff
   25244:	9300      	str	r3, [sp, #0]
   25246:	4613      	mov	r3, r2
   25248:	220d      	movs	r2, #13
   2524a:	f7fd f897 	bl	2237c <params_initSN>
        p.lastBlock = settings->base.index == settings->base.count;
   2524e:	687b      	ldr	r3, [r7, #4]
   25250:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
   25254:	687b      	ldr	r3, [r7, #4]
   25256:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   2525a:	429a      	cmp	r2, r3
   2525c:	bf0c      	ite	eq
   2525e:	2301      	moveq	r3, #1
   25260:	2300      	movne	r3, #0
   25262:	b2db      	uxtb	r3, r3
   25264:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        ret = dlms_getSNPdu(&p, data);
   25268:	f107 0344 	add.w	r3, r7, #68	; 0x44
   2526c:	6839      	ldr	r1, [r7, #0]
   2526e:	4618      	mov	r0, r3
   25270:	f7e5 fa2a 	bl	a6c8 <dlms_getSNPdu>
   25274:	6678      	str	r0, [r7, #100]	; 0x64
        bb_clear(&bb);
   25276:	f107 030c 	add.w	r3, r7, #12
   2527a:	4618      	mov	r0, r3
   2527c:	f7de fa72 	bl	3764 <bb_clear>
    }
    // If all data is transfered.
    settings->base.index = 0;
   25280:	687b      	ldr	r3, [r7, #4]
   25282:	2200      	movs	r2, #0
   25284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    settings->base.count = 0;
   25288:	687b      	ldr	r3, [r7, #4]
   2528a:	2200      	movs	r2, #0
   2528c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    bb_clear(&results);
   25290:	f107 0318 	add.w	r3, r7, #24
   25294:	4618      	mov	r0, r3
   25296:	f7de fa65 	bl	3764 <bb_clear>
    vec_clear(&arr);
   2529a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   2529e:	4618      	mov	r0, r3
   252a0:	f7fc f9e0 	bl	21664 <vec_clear>
    return ret;
   252a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
   252a6:	4618      	mov	r0, r3
   252a8:	3768      	adds	r7, #104	; 0x68
   252aa:	46bd      	mov	sp, r7
   252ac:	bd80      	pop	{r7, pc}
   252ae:	bf00      	nop

000252b0 <svr_handleMethodRequest>:
* @return Reply.
*/
int svr_handleMethodRequest(
    dlmsServerSettings* settings,
    gxByteBuffer *data)
{
   252b0:	b590      	push	{r4, r7, lr}
   252b2:	b09d      	sub	sp, #116	; 0x74
   252b4:	af06      	add	r7, sp, #24
   252b6:	6078      	str	r0, [r7, #4]
   252b8:	6039      	str	r1, [r7, #0]
    DLMS_OBJECT_TYPE ci;
    gxValueEventArg *e;
    unsigned char * ln;
    int error = DLMS_ERROR_CODE_OK;
   252ba:	2300      	movs	r3, #0
   252bc:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char invokeId, ch, id;
    unsigned short tmp;
    gxValueEventCollection arr;

    // Get type.
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   252be:	f107 0342 	add.w	r3, r7, #66	; 0x42
   252c2:	4619      	mov	r1, r3
   252c4:	6838      	ldr	r0, [r7, #0]
   252c6:	f7de fa71 	bl	37ac <bb_getUInt8>
   252ca:	6538      	str	r0, [r7, #80]	; 0x50
   252cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   252ce:	2b00      	cmp	r3, #0
   252d0:	d001      	beq.n	252d6 <svr_handleMethodRequest+0x26>
    {
        return ret;
   252d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   252d4:	e15c      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }
    // Get invoke ID and priority.
    if ((ret = bb_getUInt8(data, &invokeId)) != 0)
   252d6:	f107 0343 	add.w	r3, r7, #67	; 0x43
   252da:	4619      	mov	r1, r3
   252dc:	6838      	ldr	r0, [r7, #0]
   252de:	f7de fa65 	bl	37ac <bb_getUInt8>
   252e2:	6538      	str	r0, [r7, #80]	; 0x50
   252e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   252e6:	2b00      	cmp	r3, #0
   252e8:	d001      	beq.n	252ee <svr_handleMethodRequest+0x3e>
    {
        return ret;
   252ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   252ec:	e150      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }
    updateInvokeId(settings, invokeId);
   252ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   252f2:	4619      	mov	r1, r3
   252f4:	6878      	ldr	r0, [r7, #4]
   252f6:	f7e6 fe6d 	bl	bfd4 <updateInvokeId>
    // CI
    if ((ret = bb_getUInt16(data, &tmp)) != 0)
   252fa:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   252fe:	4619      	mov	r1, r3
   25300:	6838      	ldr	r0, [r7, #0]
   25302:	f7de fab5 	bl	3870 <bb_getUInt16>
   25306:	6538      	str	r0, [r7, #80]	; 0x50
   25308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2530a:	2b00      	cmp	r3, #0
   2530c:	d001      	beq.n	25312 <svr_handleMethodRequest+0x62>
    {
        return ret;
   2530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25310:	e13e      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }
    ci = (DLMS_OBJECT_TYPE)tmp;
   25312:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   25314:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    ln = data->data + data->position;
   25318:	683b      	ldr	r3, [r7, #0]
   2531a:	681b      	ldr	r3, [r3, #0]
   2531c:	683a      	ldr	r2, [r7, #0]
   2531e:	8912      	ldrh	r2, [r2, #8]
   25320:	4413      	add	r3, r2
   25322:	64bb      	str	r3, [r7, #72]	; 0x48
    data->position += 6;
   25324:	683b      	ldr	r3, [r7, #0]
   25326:	891b      	ldrh	r3, [r3, #8]
   25328:	3306      	adds	r3, #6
   2532a:	b29a      	uxth	r2, r3
   2532c:	683b      	ldr	r3, [r7, #0]
   2532e:	811a      	strh	r2, [r3, #8]
    // Attribute
    if ((ret = bb_getUInt8(data, &id)) != 0)
   25330:	f107 0341 	add.w	r3, r7, #65	; 0x41
   25334:	4619      	mov	r1, r3
   25336:	6838      	ldr	r0, [r7, #0]
   25338:	f7de fa38 	bl	37ac <bb_getUInt8>
   2533c:	6538      	str	r0, [r7, #80]	; 0x50
   2533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25340:	2b00      	cmp	r3, #0
   25342:	d001      	beq.n	25348 <svr_handleMethodRequest+0x98>
    {
        return ret;
   25344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25346:	e123      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }
    // Get parameters.
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   25348:	f107 0342 	add.w	r3, r7, #66	; 0x42
   2534c:	4619      	mov	r1, r3
   2534e:	6838      	ldr	r0, [r7, #0]
   25350:	f7de fa2c 	bl	37ac <bb_getUInt8>
   25354:	6538      	str	r0, [r7, #80]	; 0x50
   25356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25358:	2b00      	cmp	r3, #0
   2535a:	d001      	beq.n	25360 <svr_handleMethodRequest+0xb0>
    {
        return ret;
   2535c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2535e:	e117      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }

    vec_init(&arr);
   25360:	f107 0334 	add.w	r3, r7, #52	; 0x34
   25364:	4618      	mov	r0, r3
   25366:	f7fc f90b 	bl	21580 <vec_init>
    e = (gxValueEventArg*)gxmalloc(sizeof(gxValueEventArg));
   2536a:	2048      	movs	r0, #72	; 0x48
   2536c:	f004 fb6a 	bl	29a44 <malloc>
   25370:	4603      	mov	r3, r0
   25372:	647b      	str	r3, [r7, #68]	; 0x44
    ve_init(e);
   25374:	6c78      	ldr	r0, [r7, #68]	; 0x44
   25376:	f7fc f9cf 	bl	21718 <ve_init>
    e->index = id;
   2537a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   2537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25380:	761a      	strb	r2, [r3, #24]
    vec_push(&arr, e);
   25382:	f107 0334 	add.w	r3, r7, #52	; 0x34
   25386:	6c79      	ldr	r1, [r7, #68]	; 0x44
   25388:	4618      	mov	r0, r3
   2538a:	f7fc f90f 	bl	215ac <vec_push>
    if (ch != 0)
   2538e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   25392:	2b00      	cmp	r3, #0
   25394:	d018      	beq.n	253c8 <svr_handleMethodRequest+0x118>
    {
        gxDataInfo di;
        di_init(&di);
   25396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   2539a:	4618      	mov	r0, r3
   2539c:	f7e0 fede 	bl	615c <di_init>
        if ((ret = dlms_getData(data, &di, &e->parameters)) != 0)
   253a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   253a2:	f103 0220 	add.w	r2, r3, #32
   253a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   253aa:	4619      	mov	r1, r3
   253ac:	6838      	ldr	r0, [r7, #0]
   253ae:	f7e2 fc27 	bl	7c00 <dlms_getData>
   253b2:	6538      	str	r0, [r7, #80]	; 0x50
   253b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   253b6:	2b00      	cmp	r3, #0
   253b8:	d006      	beq.n	253c8 <svr_handleMethodRequest+0x118>
        {
            vec_clear(&arr);
   253ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
   253be:	4618      	mov	r0, r3
   253c0:	f7fc f950 	bl	21664 <vec_clear>
            return ret;
   253c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   253c6:	e0e3      	b.n	25590 <svr_handleMethodRequest+0x2e0>
        }
    }

    if ((ret = oa_findByLN(&settings->base.objects, ci, ln, &e->target)) != 0)
   253c8:	687b      	ldr	r3, [r7, #4]
   253ca:	f103 0074 	add.w	r0, r3, #116	; 0x74
   253ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   253d0:	3314      	adds	r3, #20
   253d2:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
   253d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   253d8:	f7fc ff86 	bl	222e8 <oa_findByLN>
   253dc:	6538      	str	r0, [r7, #80]	; 0x50
   253de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   253e0:	2b00      	cmp	r3, #0
   253e2:	d006      	beq.n	253f2 <svr_handleMethodRequest+0x142>
    {
        vec_clear(&arr);
   253e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   253e8:	4618      	mov	r0, r3
   253ea:	f7fc f93b 	bl	21664 <vec_clear>
        return ret;
   253ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   253f0:	e0ce      	b.n	25590 <svr_handleMethodRequest+0x2e0>
    }
    if (e->target == NULL)
   253f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   253f4:	695b      	ldr	r3, [r3, #20]
   253f6:	2b00      	cmp	r3, #0
   253f8:	d109      	bne.n	2540e <svr_handleMethodRequest+0x15e>
    {
        ret = svr_findObject(&settings->base, ci, 0, ln, e);
   253fa:	6878      	ldr	r0, [r7, #4]
   253fc:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
   25400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25402:	9300      	str	r3, [sp, #0]
   25404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25406:	2200      	movs	r2, #0
   25408:	f003 fd78 	bl	28efc <svr_findObject>
   2540c:	6538      	str	r0, [r7, #80]	; 0x50
    }
    bb_clear(data);
   2540e:	6838      	ldr	r0, [r7, #0]
   25410:	f7de f9a8 	bl	3764 <bb_clear>
    if (e->target == NULL)
   25414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25416:	695b      	ldr	r3, [r3, #20]
   25418:	2b00      	cmp	r3, #0
   2541a:	d102      	bne.n	25422 <svr_handleMethodRequest+0x172>
    {
        error = DLMS_ERROR_CODE_UNDEFINED_OBJECT;
   2541c:	2304      	movs	r3, #4
   2541e:	657b      	str	r3, [r7, #84]	; 0x54
   25420:	e065      	b.n	254ee <svr_handleMethodRequest+0x23e>
    }
    else
    {
#if !defined(DLMS_ITALIAN_STANDARD)
        //In Italian standard reply_to_HLS_authentication can be called without access rights.
        if (!(ci == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME && id == 1) &&
   25422:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   25426:	2b0f      	cmp	r3, #15
   25428:	d103      	bne.n	25432 <svr_handleMethodRequest+0x182>
   2542a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   2542e:	2b01      	cmp	r3, #1
   25430:	d00e      	beq.n	25450 <svr_handleMethodRequest+0x1a0>
            svr_getMethodAccess(&settings->base, e->target, id) == DLMS_METHOD_ACCESS_MODE_NONE)
   25432:	6878      	ldr	r0, [r7, #4]
   25434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25436:	695b      	ldr	r3, [r3, #20]
   25438:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   2543c:	4619      	mov	r1, r3
   2543e:	f003 ff9f 	bl	29380 <svr_getMethodAccess>
   25442:	4603      	mov	r3, r0
    }
    else
    {
#if !defined(DLMS_ITALIAN_STANDARD)
        //In Italian standard reply_to_HLS_authentication can be called without access rights.
        if (!(ci == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME && id == 1) &&
   25444:	2b00      	cmp	r3, #0
   25446:	d103      	bne.n	25450 <svr_handleMethodRequest+0x1a0>
            svr_getMethodAccess(&settings->base, e->target, id) == DLMS_METHOD_ACCESS_MODE_NONE)
#else
        if (svr_getMethodAccess(&settings->base, e->target, id) == DLMS_METHOD_ACCESS_MODE_NONE)
#endif //defined(DLMS_ITALIAN_STANDARD)
        {
            e->error = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   25448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2544a:	2203      	movs	r2, #3
   2544c:	861a      	strh	r2, [r3, #48]	; 0x30
   2544e:	e01f      	b.n	25490 <svr_handleMethodRequest+0x1e0>
        }
        else
        {
            svr_preAction(&settings->base, &arr);
   25450:	687b      	ldr	r3, [r7, #4]
   25452:	f107 0234 	add.w	r2, r7, #52	; 0x34
   25456:	4611      	mov	r1, r2
   25458:	4618      	mov	r0, r3
   2545a:	f003 fec5 	bl	291e8 <svr_preAction>
            if (!e->handled)
   2545e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25460:	7c1b      	ldrb	r3, [r3, #16]
   25462:	2b00      	cmp	r3, #0
   25464:	d114      	bne.n	25490 <svr_handleMethodRequest+0x1e0>
            {
                if ((ret = cosem_invoke(settings, e)) != 0)
   25466:	6c79      	ldr	r1, [r7, #68]	; 0x44
   25468:	6878      	ldr	r0, [r7, #4]
   2546a:	f7f0 fbcd 	bl	15c08 <cosem_invoke>
   2546e:	6538      	str	r0, [r7, #80]	; 0x50
   25470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25472:	2b00      	cmp	r3, #0
   25474:	d005      	beq.n	25482 <svr_handleMethodRequest+0x1d2>
                {
                    e->error = (DLMS_ERROR_CODE)ret;
   25476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25478:	b21a      	sxth	r2, r3
   2547a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2547c:	861a      	strh	r2, [r3, #48]	; 0x30
                    ret = 0;
   2547e:	2300      	movs	r3, #0
   25480:	653b      	str	r3, [r7, #80]	; 0x50
                }
                svr_postAction(&settings->base, &arr);
   25482:	687b      	ldr	r3, [r7, #4]
   25484:	f107 0234 	add.w	r2, r7, #52	; 0x34
   25488:	4611      	mov	r1, r2
   2548a:	4618      	mov	r0, r3
   2548c:	f003 fee2 	bl	29254 <svr_postAction>
            }
        }
        // Set default action reply if not given.
        if (e->error == DLMS_ERROR_CODE_OK)
   25490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25492:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   25496:	2b00      	cmp	r3, #0
   25498:	d120      	bne.n	254dc <svr_handleMethodRequest+0x22c>
        {
            // Add return parameters
            bb_insertUInt8(data, 0, 1);
   2549a:	2201      	movs	r2, #1
   2549c:	2100      	movs	r1, #0
   2549e:	6838      	ldr	r0, [r7, #0]
   254a0:	f7dd fcd4 	bl	2e4c <bb_insertUInt8>
            //Add parameters error code.
            bb_insertUInt8(data, 1, 0);
   254a4:	2200      	movs	r2, #0
   254a6:	2101      	movs	r1, #1
   254a8:	6838      	ldr	r0, [r7, #0]
   254aa:	f7dd fccf 	bl	2e4c <bb_insertUInt8>
            if (e->byteArray)
   254ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   254b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   254b4:	2b00      	cmp	r3, #0
   254b6:	d003      	beq.n	254c0 <svr_handleMethodRequest+0x210>
            {
                e->value.vt = DLMS_DATA_TYPE_NONE;
   254b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   254ba:	2200      	movs	r2, #0
   254bc:	701a      	strb	r2, [r3, #0]
   254be:	e016      	b.n	254ee <svr_handleMethodRequest+0x23e>
            }
            else
            {
                if ((ret = dlms_setData(data, e->value.vt, &e->value)) != 0)
   254c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   254c2:	781b      	ldrb	r3, [r3, #0]
   254c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   254c6:	4619      	mov	r1, r3
   254c8:	6838      	ldr	r0, [r7, #0]
   254ca:	f7e1 fc5d 	bl	6d88 <dlms_setData>
   254ce:	6538      	str	r0, [r7, #80]	; 0x50
   254d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   254d2:	2b00      	cmp	r3, #0
   254d4:	d00b      	beq.n	254ee <svr_handleMethodRequest+0x23e>
                {
                    error = DLMS_ERROR_CODE_HARDWARE_FAULT;
   254d6:	2301      	movs	r3, #1
   254d8:	657b      	str	r3, [r7, #84]	; 0x54
   254da:	e008      	b.n	254ee <svr_handleMethodRequest+0x23e>
            }
        }
        else
        {
            // Add parameters error code.
            error = DLMS_ERROR_CODE_READ_WRITE_DENIED;
   254dc:	2303      	movs	r3, #3
   254de:	657b      	str	r3, [r7, #84]	; 0x54
            bb_clear(data);
   254e0:	6838      	ldr	r0, [r7, #0]
   254e2:	f7de f93f 	bl	3764 <bb_clear>
            bb_setUInt8(data, 0);
   254e6:	2100      	movs	r1, #0
   254e8:	6838      	ldr	r0, [r7, #0]
   254ea:	f7dd fc93 	bl	2e14 <bb_setUInt8>
        }
    }
    if (ret == 0)
   254ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   254f0:	2b00      	cmp	r3, #0
   254f2:	d147      	bne.n	25584 <svr_handleMethodRequest+0x2d4>
    {
        gxLNParameters p;
        params_initLN(&p, &settings->base, invokeId, DLMS_COMMAND_METHOD_RESPONSE, 1, NULL, data, error, settings->info.encryptedCommand);
   254f4:	6879      	ldr	r1, [r7, #4]
   254f6:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
   254fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   254fc:	b2db      	uxtb	r3, r3
   254fe:	687a      	ldr	r2, [r7, #4]
   25500:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
   25504:	f107 000c 	add.w	r0, r7, #12
   25508:	9204      	str	r2, [sp, #16]
   2550a:	9303      	str	r3, [sp, #12]
   2550c:	683b      	ldr	r3, [r7, #0]
   2550e:	9302      	str	r3, [sp, #8]
   25510:	2300      	movs	r3, #0
   25512:	9301      	str	r3, [sp, #4]
   25514:	2301      	movs	r3, #1
   25516:	9300      	str	r3, [sp, #0]
   25518:	23c7      	movs	r3, #199	; 0xc7
   2551a:	4622      	mov	r2, r4
   2551c:	f7fc ff60 	bl	223e0 <params_initLN>
        ret = dlms_getLNPdu(&p, data);
   25520:	f107 030c 	add.w	r3, r7, #12
   25524:	6839      	ldr	r1, [r7, #0]
   25526:	4618      	mov	r0, r3
   25528:	f7e5 fb58 	bl	abdc <dlms_getLNPdu>
   2552c:	6538      	str	r0, [r7, #80]	; 0x50
        // If High level authentication fails.
        if (e->target != NULL && e->target->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME && id == 1)
   2552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25530:	695b      	ldr	r3, [r3, #20]
   25532:	2b00      	cmp	r3, #0
   25534:	d026      	beq.n	25584 <svr_handleMethodRequest+0x2d4>
   25536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25538:	695b      	ldr	r3, [r3, #20]
   2553a:	781b      	ldrb	r3, [r3, #0]
   2553c:	2b0f      	cmp	r3, #15
   2553e:	d121      	bne.n	25584 <svr_handleMethodRequest+0x2d4>
   25540:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   25544:	2b01      	cmp	r3, #1
   25546:	d11d      	bne.n	25584 <svr_handleMethodRequest+0x2d4>
        {
            if (((gxAssociationLogicalName*)e->target)->associationStatus == DLMS_ASSOCIATION_STATUS_ASSOCIATED)
   25548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2554a:	695b      	ldr	r3, [r3, #20]
   2554c:	7c1b      	ldrb	r3, [r3, #16]
   2554e:	2b02      	cmp	r3, #2
   25550:	d10c      	bne.n	2556c <svr_handleMethodRequest+0x2bc>
            {
                settings->base.connected |= DLMS_CONNECTION_STATE_DLMS;
   25552:	687b      	ldr	r3, [r7, #4]
   25554:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25558:	f043 0302 	orr.w	r3, r3, #2
   2555c:	b2da      	uxtb	r2, r3
   2555e:	687b      	ldr	r3, [r7, #4]
   25560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                svr_connected(settings);
   25564:	6878      	ldr	r0, [r7, #4]
   25566:	f003 ff2d 	bl	293c4 <svr_connected>
   2556a:	e00b      	b.n	25584 <svr_handleMethodRequest+0x2d4>
            }
            else
            {
                svr_invalidConnection(settings);
   2556c:	6878      	ldr	r0, [r7, #4]
   2556e:	f003 ff33 	bl	293d8 <svr_invalidConnection>
                settings->base.connected &= ~DLMS_CONNECTION_STATE_DLMS;
   25572:	687b      	ldr	r3, [r7, #4]
   25574:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25578:	f023 0302 	bic.w	r3, r3, #2
   2557c:	b2da      	uxtb	r2, r3
   2557e:	687b      	ldr	r3, [r7, #4]
   25580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
            }
        }
    }
    vec_clear(&arr);
   25584:	f107 0334 	add.w	r3, r7, #52	; 0x34
   25588:	4618      	mov	r0, r3
   2558a:	f7fc f86b 	bl	21664 <vec_clear>
    return ret;
   2558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
   25590:	4618      	mov	r0, r3
   25592:	375c      	adds	r7, #92	; 0x5c
   25594:	46bd      	mov	sp, r7
   25596:	bd90      	pop	{r4, r7, pc}

00025598 <svr_handleReleaseRequest>:
* @param settings
*            DLMS settings.
* @param data
*            Received data.
*/
int svr_handleReleaseRequest(dlmsServerSettings* settings, gxByteBuffer* data) {
   25598:	b580      	push	{r7, lr}
   2559a:	b086      	sub	sp, #24
   2559c:	af00      	add	r7, sp, #0
   2559e:	6078      	str	r0, [r7, #4]
   255a0:	6039      	str	r1, [r7, #0]
    bb_clear(data);
   255a2:	6838      	ldr	r0, [r7, #0]
   255a4:	f7de f8de 	bl	3764 <bb_clear>
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   255a8:	687b      	ldr	r3, [r7, #4]
   255aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   255ae:	2b00      	cmp	r3, #0
   255b0:	d104      	bne.n	255bc <svr_handleReleaseRequest+0x24>
    {
        dlms_addLLCBytes(&settings->base, data);
   255b2:	687b      	ldr	r3, [r7, #4]
   255b4:	6839      	ldr	r1, [r7, #0]
   255b6:	4618      	mov	r0, r3
   255b8:	f7e4 ffd4 	bl	a564 <dlms_addLLCBytes>
    }
    int ret;
    gxByteBuffer tmp;
    if ((ret = bb_init(&tmp)) != 0)
   255bc:	f107 0308 	add.w	r3, r7, #8
   255c0:	4618      	mov	r0, r3
   255c2:	f7dd fb91 	bl	2ce8 <bb_init>
   255c6:	6178      	str	r0, [r7, #20]
   255c8:	697b      	ldr	r3, [r7, #20]
   255ca:	2b00      	cmp	r3, #0
   255cc:	d001      	beq.n	255d2 <svr_handleReleaseRequest+0x3a>
    {
        return ret;
   255ce:	697b      	ldr	r3, [r7, #20]
   255d0:	e04b      	b.n	2566a <svr_handleReleaseRequest+0xd2>
    }
    if ((ret = apdu_getUserInformation(&settings->base, &tmp)) != 0)
   255d2:	687b      	ldr	r3, [r7, #4]
   255d4:	f107 0208 	add.w	r2, r7, #8
   255d8:	4611      	mov	r1, r2
   255da:	4618      	mov	r0, r3
   255dc:	f7dc fa10 	bl	1a00 <apdu_getUserInformation>
   255e0:	6178      	str	r0, [r7, #20]
   255e2:	697b      	ldr	r3, [r7, #20]
   255e4:	2b00      	cmp	r3, #0
   255e6:	d006      	beq.n	255f6 <svr_handleReleaseRequest+0x5e>
    {
        bb_clear(&tmp);
   255e8:	f107 0308 	add.w	r3, r7, #8
   255ec:	4618      	mov	r0, r3
   255ee:	f7de f8b9 	bl	3764 <bb_clear>
        return ret;
   255f2:	697b      	ldr	r3, [r7, #20]
   255f4:	e039      	b.n	2566a <svr_handleReleaseRequest+0xd2>
    }
    bb_setUInt8(data, 0x63);
   255f6:	2163      	movs	r1, #99	; 0x63
   255f8:	6838      	ldr	r0, [r7, #0]
   255fa:	f7dd fc0b 	bl	2e14 <bb_setUInt8>
    //Len.
    bb_setUInt8(data, (unsigned char)(tmp.size + 3));
   255fe:	89fb      	ldrh	r3, [r7, #14]
   25600:	b2db      	uxtb	r3, r3
   25602:	3303      	adds	r3, #3
   25604:	b2db      	uxtb	r3, r3
   25606:	4619      	mov	r1, r3
   25608:	6838      	ldr	r0, [r7, #0]
   2560a:	f7dd fc03 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x80);
   2560e:	2180      	movs	r1, #128	; 0x80
   25610:	6838      	ldr	r0, [r7, #0]
   25612:	f7dd fbff 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x01);
   25616:	2101      	movs	r1, #1
   25618:	6838      	ldr	r0, [r7, #0]
   2561a:	f7dd fbfb 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0x00);
   2561e:	2100      	movs	r1, #0
   25620:	6838      	ldr	r0, [r7, #0]
   25622:	f7dd fbf7 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 0xBE);
   25626:	21be      	movs	r1, #190	; 0xbe
   25628:	6838      	ldr	r0, [r7, #0]
   2562a:	f7dd fbf3 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, (unsigned char)(tmp.size + 1));
   2562e:	89fb      	ldrh	r3, [r7, #14]
   25630:	b2db      	uxtb	r3, r3
   25632:	3301      	adds	r3, #1
   25634:	b2db      	uxtb	r3, r3
   25636:	4619      	mov	r1, r3
   25638:	6838      	ldr	r0, [r7, #0]
   2563a:	f7dd fbeb 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, 4);
   2563e:	2104      	movs	r1, #4
   25640:	6838      	ldr	r0, [r7, #0]
   25642:	f7dd fbe7 	bl	2e14 <bb_setUInt8>
    bb_setUInt8(data, (unsigned char)tmp.size);
   25646:	89fb      	ldrh	r3, [r7, #14]
   25648:	b2db      	uxtb	r3, r3
   2564a:	4619      	mov	r1, r3
   2564c:	6838      	ldr	r0, [r7, #0]
   2564e:	f7dd fbe1 	bl	2e14 <bb_setUInt8>
    bb_set(data, tmp.data, tmp.size);
   25652:	68bb      	ldr	r3, [r7, #8]
   25654:	89fa      	ldrh	r2, [r7, #14]
   25656:	4619      	mov	r1, r3
   25658:	6838      	ldr	r0, [r7, #0]
   2565a:	f7dd ff81 	bl	3560 <bb_set>
    bb_clear(&tmp);
   2565e:	f107 0308 	add.w	r3, r7, #8
   25662:	4618      	mov	r0, r3
   25664:	f7de f87e 	bl	3764 <bb_clear>
    return 0;
   25668:	2300      	movs	r3, #0
}
   2566a:	4618      	mov	r0, r3
   2566c:	3718      	adds	r7, #24
   2566e:	46bd      	mov	sp, r7
   25670:	bd80      	pop	{r7, pc}
   25672:	bf00      	nop

00025674 <svr_handleCommand>:
int svr_handleCommand(
    dlmsServerSettings* settings,
    DLMS_COMMAND cmd,
    gxByteBuffer* data,
    gxByteBuffer* reply)
{
   25674:	b580      	push	{r7, lr}
   25676:	b086      	sub	sp, #24
   25678:	af00      	add	r7, sp, #0
   2567a:	60f8      	str	r0, [r7, #12]
   2567c:	607a      	str	r2, [r7, #4]
   2567e:	603b      	str	r3, [r7, #0]
   25680:	460b      	mov	r3, r1
   25682:	72fb      	strb	r3, [r7, #11]
    int ret = 0;
   25684:	2300      	movs	r3, #0
   25686:	617b      	str	r3, [r7, #20]
    unsigned char frame = 0;
   25688:	2300      	movs	r3, #0
   2568a:	74fb      	strb	r3, [r7, #19]
    switch (cmd)
   2568c:	7afb      	ldrb	r3, [r7, #11]
   2568e:	2b60      	cmp	r3, #96	; 0x60
   25690:	d065      	beq.n	2575e <svr_handleCommand+0xea>
   25692:	2b60      	cmp	r3, #96	; 0x60
   25694:	dc0d      	bgt.n	256b2 <svr_handleCommand+0x3e>
   25696:	2b05      	cmp	r3, #5
   25698:	d03a      	beq.n	25710 <svr_handleCommand+0x9c>
   2569a:	2b05      	cmp	r3, #5
   2569c:	dc03      	bgt.n	256a6 <svr_handleCommand+0x32>
   2569e:	2b00      	cmp	r3, #0
   256a0:	f000 809d 	beq.w	257de <svr_handleCommand+0x16a>
   256a4:	e0a6      	b.n	257f4 <svr_handleCommand+0x180>
   256a6:	2b06      	cmp	r3, #6
   256a8:	d017      	beq.n	256da <svr_handleCommand+0x66>
   256aa:	2b53      	cmp	r3, #83	; 0x53
   256ac:	f000 8083 	beq.w	257b6 <svr_handleCommand+0x142>
   256b0:	e0a0      	b.n	257f4 <svr_handleCommand+0x180>
   256b2:	2bc0      	cmp	r3, #192	; 0xc0
   256b4:	d017      	beq.n	256e6 <svr_handleCommand+0x72>
   256b6:	2bc0      	cmp	r3, #192	; 0xc0
   256b8:	dc04      	bgt.n	256c4 <svr_handleCommand+0x50>
   256ba:	2b62      	cmp	r3, #98	; 0x62
   256bc:	d069      	beq.n	25792 <svr_handleCommand+0x11e>
   256be:	2b93      	cmp	r3, #147	; 0x93
   256c0:	d041      	beq.n	25746 <svr_handleCommand+0xd2>
   256c2:	e097      	b.n	257f4 <svr_handleCommand+0x180>
   256c4:	2bc1      	cmp	r3, #193	; 0xc1
   256c6:	d002      	beq.n	256ce <svr_handleCommand+0x5a>
   256c8:	2bc3      	cmp	r3, #195	; 0xc3
   256ca:	d036      	beq.n	2573a <svr_handleCommand+0xc6>
   256cc:	e092      	b.n	257f4 <svr_handleCommand+0x180>
    {
    case DLMS_COMMAND_SET_REQUEST:
        ret = svr_handleSetRequest(settings, data);
   256ce:	6879      	ldr	r1, [r7, #4]
   256d0:	68f8      	ldr	r0, [r7, #12]
   256d2:	f7fd ffcf 	bl	23674 <svr_handleSetRequest>
   256d6:	6178      	str	r0, [r7, #20]
        break;
   256d8:	e090      	b.n	257fc <svr_handleCommand+0x188>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_WRITE_REQUEST:
        ret = svr_handleWriteRequest(settings, data);
   256da:	6879      	ldr	r1, [r7, #4]
   256dc:	68f8      	ldr	r0, [r7, #12]
   256de:	f7ff fbed 	bl	24ebc <svr_handleWriteRequest>
   256e2:	6178      	str	r0, [r7, #20]
        break;
   256e4:	e08a      	b.n	257fc <svr_handleCommand+0x188>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_GET_REQUEST:
        //Check is client reading frames.
        if (settings->transaction.command != DLMS_COMMAND_NONE &&
   256e6:	68fb      	ldr	r3, [r7, #12]
   256e8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   256ec:	2b00      	cmp	r3, #0
   256ee:	d009      	beq.n	25704 <svr_handleCommand+0x90>
            data->position == data->size)
   256f0:	687b      	ldr	r3, [r7, #4]
   256f2:	891a      	ldrh	r2, [r3, #8]
   256f4:	687b      	ldr	r3, [r7, #4]
   256f6:	88db      	ldrh	r3, [r3, #6]
        ret = svr_handleWriteRequest(settings, data);
        break;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_GET_REQUEST:
        //Check is client reading frames.
        if (settings->transaction.command != DLMS_COMMAND_NONE &&
   256f8:	429a      	cmp	r2, r3
   256fa:	d103      	bne.n	25704 <svr_handleCommand+0x90>
            data->position == data->size)
        {
            data->position = 0;
   256fc:	687b      	ldr	r3, [r7, #4]
   256fe:	2200      	movs	r2, #0
   25700:	811a      	strh	r2, [r3, #8]
        }
        else
        {
            ret = svr_handleGetRequest(settings, data);
        }
        break;
   25702:	e07b      	b.n	257fc <svr_handleCommand+0x188>
        {
            data->position = 0;
        }
        else
        {
            ret = svr_handleGetRequest(settings, data);
   25704:	6879      	ldr	r1, [r7, #4]
   25706:	68f8      	ldr	r0, [r7, #12]
   25708:	f7fe fd08 	bl	2411c <svr_handleGetRequest>
   2570c:	6178      	str	r0, [r7, #20]
        }
        break;
   2570e:	e075      	b.n	257fc <svr_handleCommand+0x188>
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_READ_REQUEST:
        if (settings->transaction.command != DLMS_COMMAND_NONE &&
   25710:	68fb      	ldr	r3, [r7, #12]
   25712:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   25716:	2b00      	cmp	r3, #0
   25718:	d009      	beq.n	2572e <svr_handleCommand+0xba>
            data->position == data->size)
   2571a:	687b      	ldr	r3, [r7, #4]
   2571c:	891a      	ldrh	r2, [r3, #8]
   2571e:	687b      	ldr	r3, [r7, #4]
   25720:	88db      	ldrh	r3, [r3, #6]
            ret = svr_handleGetRequest(settings, data);
        }
        break;
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_READ_REQUEST:
        if (settings->transaction.command != DLMS_COMMAND_NONE &&
   25722:	429a      	cmp	r2, r3
   25724:	d103      	bne.n	2572e <svr_handleCommand+0xba>
            data->position == data->size)
        {
            data->position = 0;
   25726:	687b      	ldr	r3, [r7, #4]
   25728:	2200      	movs	r2, #0
   2572a:	811a      	strh	r2, [r3, #8]
        }
        else
        {
            ret = svr_handleReadRequest(settings, data);
        }
        break;
   2572c:	e066      	b.n	257fc <svr_handleCommand+0x188>
        {
            data->position = 0;
        }
        else
        {
            ret = svr_handleReadRequest(settings, data);
   2572e:	6879      	ldr	r1, [r7, #4]
   25730:	68f8      	ldr	r0, [r7, #12]
   25732:	f7ff fa39 	bl	24ba8 <svr_handleReadRequest>
   25736:	6178      	str	r0, [r7, #20]
        }
        break;
   25738:	e060      	b.n	257fc <svr_handleCommand+0x188>
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_COMMAND_METHOD_REQUEST:
        ret = svr_handleMethodRequest(settings, data);
   2573a:	6879      	ldr	r1, [r7, #4]
   2573c:	68f8      	ldr	r0, [r7, #12]
   2573e:	f7ff fdb7 	bl	252b0 <svr_handleMethodRequest>
   25742:	6178      	str	r0, [r7, #20]
        break;
   25744:	e05a      	b.n	257fc <svr_handleCommand+0x188>
    case DLMS_COMMAND_SNRM:
        ret = svr_handleSnrmRequest(settings, data);
   25746:	6879      	ldr	r1, [r7, #4]
   25748:	68f8      	ldr	r0, [r7, #12]
   2574a:	f7fd fb09 	bl	22d60 <svr_handleSnrmRequest>
   2574e:	6178      	str	r0, [r7, #20]
        settings->base.connected = DLMS_CONNECTION_STATE_HDLC;
   25750:	68fb      	ldr	r3, [r7, #12]
   25752:	2201      	movs	r2, #1
   25754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        frame = DLMS_COMMAND_UA;
   25758:	2373      	movs	r3, #115	; 0x73
   2575a:	74fb      	strb	r3, [r7, #19]
        break;
   2575c:	e04e      	b.n	257fc <svr_handleCommand+0x188>
    case DLMS_COMMAND_AARQ:
        ret = svr_HandleAarqRequest(settings, data);
   2575e:	6879      	ldr	r1, [r7, #4]
   25760:	68f8      	ldr	r0, [r7, #12]
   25762:	f7fd f92d 	bl	229c0 <svr_HandleAarqRequest>
   25766:	6178      	str	r0, [r7, #20]
        if (ret == 0 && settings->base.authentication < DLMS_AUTHENTICATION_HIGH)
   25768:	697b      	ldr	r3, [r7, #20]
   2576a:	2b00      	cmp	r3, #0
   2576c:	d145      	bne.n	257fa <svr_handleCommand+0x186>
   2576e:	68fb      	ldr	r3, [r7, #12]
   25770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   25774:	2b01      	cmp	r3, #1
   25776:	d840      	bhi.n	257fa <svr_handleCommand+0x186>
        {
            settings->base.connected |= DLMS_CONNECTION_STATE_DLMS;
   25778:	68fb      	ldr	r3, [r7, #12]
   2577a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   2577e:	f043 0302 	orr.w	r3, r3, #2
   25782:	b2da      	uxtb	r2, r3
   25784:	68fb      	ldr	r3, [r7, #12]
   25786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
            svr_connected(settings);
   2578a:	68f8      	ldr	r0, [r7, #12]
   2578c:	f003 fe1a 	bl	293c4 <svr_connected>
        }
        break;
   25790:	e033      	b.n	257fa <svr_handleCommand+0x186>
    case DLMS_COMMAND_RELEASE_REQUEST:
        ret = svr_handleReleaseRequest(settings, data);
   25792:	6879      	ldr	r1, [r7, #4]
   25794:	68f8      	ldr	r0, [r7, #12]
   25796:	f7ff feff 	bl	25598 <svr_handleReleaseRequest>
   2579a:	6178      	str	r0, [r7, #20]
        svr_disconnected(settings);
   2579c:	68f8      	ldr	r0, [r7, #12]
   2579e:	f003 fe25 	bl	293ec <svr_disconnected>
        settings->base.connected &= ~DLMS_CONNECTION_STATE_DLMS;
   257a2:	68fb      	ldr	r3, [r7, #12]
   257a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   257a8:	f023 0302 	bic.w	r3, r3, #2
   257ac:	b2da      	uxtb	r2, r3
   257ae:	68fb      	ldr	r3, [r7, #12]
   257b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        break;
   257b4:	e022      	b.n	257fc <svr_handleCommand+0x188>
    case DLMS_COMMAND_DISC:
        ret = svr_generateDisconnectRequest(settings, data);
   257b6:	6879      	ldr	r1, [r7, #4]
   257b8:	68f8      	ldr	r0, [r7, #12]
   257ba:	f7fd fba9 	bl	22f10 <svr_generateDisconnectRequest>
   257be:	6178      	str	r0, [r7, #20]
        if (settings->base.connected != DLMS_CONNECTION_STATE_NONE)
   257c0:	68fb      	ldr	r3, [r7, #12]
   257c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   257c6:	2b00      	cmp	r3, #0
   257c8:	d006      	beq.n	257d8 <svr_handleCommand+0x164>
        {
            svr_disconnected(settings);
   257ca:	68f8      	ldr	r0, [r7, #12]
   257cc:	f003 fe0e 	bl	293ec <svr_disconnected>
            settings->base.connected = DLMS_CONNECTION_STATE_NONE;
   257d0:	68fb      	ldr	r3, [r7, #12]
   257d2:	2200      	movs	r2, #0
   257d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        }
        frame = DLMS_COMMAND_UA;
   257d8:	2373      	movs	r3, #115	; 0x73
   257da:	74fb      	strb	r3, [r7, #19]
        break;
   257dc:	e00e      	b.n	257fc <svr_handleCommand+0x188>
    case DLMS_COMMAND_NONE:
        //Get next frame.
        data->position = 0;
   257de:	687b      	ldr	r3, [r7, #4]
   257e0:	2200      	movs	r2, #0
   257e2:	811a      	strh	r2, [r3, #8]
        frame = getNextSend(&settings->base, 0);
   257e4:	68fb      	ldr	r3, [r7, #12]
   257e6:	2100      	movs	r1, #0
   257e8:	4618      	mov	r0, r3
   257ea:	f7e6 fb57 	bl	be9c <getNextSend>
   257ee:	4603      	mov	r3, r0
   257f0:	74fb      	strb	r3, [r7, #19]
        break;
   257f2:	e003      	b.n	257fc <svr_handleCommand+0x188>
    default:
        //Invalid command.
        return DLMS_ERROR_CODE_INVALID_COMMAND;
   257f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   257f8:	e031      	b.n	2585e <svr_handleCommand+0x1ea>
        if (ret == 0 && settings->base.authentication < DLMS_AUTHENTICATION_HIGH)
        {
            settings->base.connected |= DLMS_CONNECTION_STATE_DLMS;
            svr_connected(settings);
        }
        break;
   257fa:	bf00      	nop
        break;
    default:
        //Invalid command.
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    }
    if (ret != 0)
   257fc:	697b      	ldr	r3, [r7, #20]
   257fe:	2b00      	cmp	r3, #0
   25800:	d001      	beq.n	25806 <svr_handleCommand+0x192>
    {
        return ret;
   25802:	697b      	ldr	r3, [r7, #20]
   25804:	e02b      	b.n	2585e <svr_handleCommand+0x1ea>
    }
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   25806:	68fb      	ldr	r3, [r7, #12]
   25808:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   2580c:	2b00      	cmp	r3, #0
   2580e:	d107      	bne.n	25820 <svr_handleCommand+0x1ac>
    {
        ret = dlms_getHdlcFrame(&settings->base, frame, data, reply);
   25810:	68f8      	ldr	r0, [r7, #12]
   25812:	7cf9      	ldrb	r1, [r7, #19]
   25814:	683b      	ldr	r3, [r7, #0]
   25816:	687a      	ldr	r2, [r7, #4]
   25818:	f7e2 fd22 	bl	8260 <dlms_getHdlcFrame>
   2581c:	6178      	str	r0, [r7, #20]
   2581e:	e00f      	b.n	25840 <svr_handleCommand+0x1cc>
    }
#ifndef DLMS_IGNORE_WRAPPER
    else if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER)
   25820:	68fb      	ldr	r3, [r7, #12]
   25822:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25826:	2b01      	cmp	r3, #1
   25828:	d107      	bne.n	2583a <svr_handleCommand+0x1c6>
    {
        ret = dlms_getWrapperFrame(&settings->base, data, reply);
   2582a:	68fb      	ldr	r3, [r7, #12]
   2582c:	683a      	ldr	r2, [r7, #0]
   2582e:	6879      	ldr	r1, [r7, #4]
   25830:	4618      	mov	r0, r3
   25832:	f7e3 fa95 	bl	8d60 <dlms_getWrapperFrame>
   25836:	6178      	str	r0, [r7, #20]
   25838:	e002      	b.n	25840 <svr_handleCommand+0x1cc>
    }
#endif //DLMS_IGNORE_WRAPPER
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   2583a:	f44f 7381 	mov.w	r3, #258	; 0x102
   2583e:	617b      	str	r3, [r7, #20]
    }
    if (cmd == DLMS_COMMAND_DISC ||
   25840:	7afb      	ldrb	r3, [r7, #11]
   25842:	2b53      	cmp	r3, #83	; 0x53
   25844:	d007      	beq.n	25856 <svr_handleCommand+0x1e2>
        (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER && cmd == DLMS_COMMAND_RELEASE_REQUEST))
   25846:	68fb      	ldr	r3, [r7, #12]
   25848:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
#endif //DLMS_IGNORE_WRAPPER
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (cmd == DLMS_COMMAND_DISC ||
   2584c:	2b01      	cmp	r3, #1
   2584e:	d105      	bne.n	2585c <svr_handleCommand+0x1e8>
        (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER && cmd == DLMS_COMMAND_RELEASE_REQUEST))
   25850:	7afb      	ldrb	r3, [r7, #11]
   25852:	2b62      	cmp	r3, #98	; 0x62
   25854:	d102      	bne.n	2585c <svr_handleCommand+0x1e8>
    {
        svr_reset(settings);
   25856:	68f8      	ldr	r0, [r7, #12]
   25858:	f7fd f88e 	bl	22978 <svr_reset>
    }
    return ret;
   2585c:	697b      	ldr	r3, [r7, #20]
}
   2585e:	4618      	mov	r0, r3
   25860:	3718      	adds	r7, #24
   25862:	46bd      	mov	sp, r7
   25864:	bd80      	pop	{r7, pc}
   25866:	bf00      	nop

00025868 <svr_handleRequest3>:

int svr_handleRequest3(
    dlmsServerSettings* settings,
    unsigned char data,
    gxByteBuffer* reply)
{
   25868:	b580      	push	{r7, lr}
   2586a:	b084      	sub	sp, #16
   2586c:	af00      	add	r7, sp, #0
   2586e:	60f8      	str	r0, [r7, #12]
   25870:	460b      	mov	r3, r1
   25872:	607a      	str	r2, [r7, #4]
   25874:	72fb      	strb	r3, [r7, #11]
    return svr_handleRequest2(settings, &data, 1, reply);
   25876:	f107 010b 	add.w	r1, r7, #11
   2587a:	687b      	ldr	r3, [r7, #4]
   2587c:	2201      	movs	r2, #1
   2587e:	68f8      	ldr	r0, [r7, #12]
   25880:	f000 f806 	bl	25890 <svr_handleRequest2>
   25884:	4603      	mov	r3, r0
}
   25886:	4618      	mov	r0, r3
   25888:	3710      	adds	r7, #16
   2588a:	46bd      	mov	sp, r7
   2588c:	bd80      	pop	{r7, pc}
   2588e:	bf00      	nop

00025890 <svr_handleRequest2>:
int svr_handleRequest2(
    dlmsServerSettings* settings,
    unsigned char* buff,
    unsigned short size,
    gxByteBuffer* reply)
{
   25890:	b590      	push	{r4, r7, lr}
   25892:	b08b      	sub	sp, #44	; 0x2c
   25894:	af00      	add	r7, sp, #0
   25896:	60f8      	str	r0, [r7, #12]
   25898:	60b9      	str	r1, [r7, #8]
   2589a:	603b      	str	r3, [r7, #0]
   2589c:	4613      	mov	r3, r2
   2589e:	80fb      	strh	r3, [r7, #6]
    unsigned char first;
    int ret;
    bb_clear(reply);
   258a0:	6838      	ldr	r0, [r7, #0]
   258a2:	f7dd ff5f 	bl	3764 <bb_clear>
    if (buff == NULL || size == 0)
   258a6:	68bb      	ldr	r3, [r7, #8]
   258a8:	2b00      	cmp	r3, #0
   258aa:	d002      	beq.n	258b2 <svr_handleRequest2+0x22>
   258ac:	88fb      	ldrh	r3, [r7, #6]
   258ae:	2b00      	cmp	r3, #0
   258b0:	d101      	bne.n	258b6 <svr_handleRequest2+0x26>
    {
        return 0;
   258b2:	2300      	movs	r3, #0
   258b4:	e317      	b.n	25ee6 <svr_handleRequest2+0x656>
    }
    if (!settings->initialized)
   258b6:	68fb      	ldr	r3, [r7, #12]
   258b8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
   258bc:	2b00      	cmp	r3, #0
   258be:	d102      	bne.n	258c6 <svr_handleRequest2+0x36>
    {
        //Server not Initialized.
        return DLMS_ERROR_CODE_NOT_INITIALIZED;
   258c0:	f240 1303 	movw	r3, #259	; 0x103
   258c4:	e30f      	b.n	25ee6 <svr_handleRequest2+0x656>
    }
    //Check frame using inter Charachter Timeout.
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC && settings->hdlc != NULL && settings->hdlc->interCharachterTimeout != 0)
   258c6:	68fb      	ldr	r3, [r7, #12]
   258c8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   258cc:	2b00      	cmp	r3, #0
   258ce:	d12a      	bne.n	25926 <svr_handleRequest2+0x96>
   258d0:	68fb      	ldr	r3, [r7, #12]
   258d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   258d6:	2b00      	cmp	r3, #0
   258d8:	d025      	beq.n	25926 <svr_handleRequest2+0x96>
   258da:	68fb      	ldr	r3, [r7, #12]
   258dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   258e0:	8b5b      	ldrh	r3, [r3, #26]
   258e2:	2b00      	cmp	r3, #0
   258e4:	d01f      	beq.n	25926 <svr_handleRequest2+0x96>
    {
        long now = time_elapsed();
   258e6:	f003 f8ef 	bl	28ac8 <time_elapsed>
   258ea:	6238      	str	r0, [r7, #32]
        unsigned short elapsed = (unsigned short)(now - settings->frameReceived);
   258ec:	6a3b      	ldr	r3, [r7, #32]
   258ee:	b29a      	uxth	r2, r3
   258f0:	68fb      	ldr	r3, [r7, #12]
   258f2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   258f6:	b29b      	uxth	r3, r3
   258f8:	1ad3      	subs	r3, r2, r3
   258fa:	83fb      	strh	r3, [r7, #30]
        //If frame shoud be fully received.
        if (elapsed >= settings->hdlc->interCharachterTimeout)
   258fc:	68fb      	ldr	r3, [r7, #12]
   258fe:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25902:	8b5b      	ldrh	r3, [r3, #26]
   25904:	8bfa      	ldrh	r2, [r7, #30]
   25906:	429a      	cmp	r2, r3
   25908:	d309      	bcc.n	2591e <svr_handleRequest2+0x8e>
        {
            settings->receivedData.position = settings->receivedData.size = 0;
   2590a:	68fb      	ldr	r3, [r7, #12]
   2590c:	2200      	movs	r2, #0
   2590e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25912:	68fb      	ldr	r3, [r7, #12]
   25914:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25918:	68fb      	ldr	r3, [r7, #12]
   2591a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
        }
        settings->frameReceived = now;
   2591e:	68fb      	ldr	r3, [r7, #12]
   25920:	6a3a      	ldr	r2, [r7, #32]
   25922:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    }
#endif //DLMS_IGNORE_IEC_HDLC_SETUP

    if (bb_isAttached(&settings->receivedData) && settings->receivedData.size + size > bb_getCapacity(&settings->receivedData))
   25926:	68fb      	ldr	r3, [r7, #12]
   25928:	f503 7384 	add.w	r3, r3, #264	; 0x108
   2592c:	4618      	mov	r0, r3
   2592e:	f7dd f9ad 	bl	2c8c <bb_isAttached>
   25932:	4603      	mov	r3, r0
   25934:	2b00      	cmp	r3, #0
   25936:	d02f      	beq.n	25998 <svr_handleRequest2+0x108>
   25938:	68fb      	ldr	r3, [r7, #12]
   2593a:	f8b3 310e 	ldrh.w	r3, [r3, #270]	; 0x10e
   2593e:	461a      	mov	r2, r3
   25940:	88fb      	ldrh	r3, [r7, #6]
   25942:	18d4      	adds	r4, r2, r3
   25944:	68fb      	ldr	r3, [r7, #12]
   25946:	f503 7384 	add.w	r3, r3, #264	; 0x108
   2594a:	4618      	mov	r0, r3
   2594c:	f7dd f9ae 	bl	2cac <bb_getCapacity>
   25950:	4603      	mov	r3, r0
   25952:	429c      	cmp	r4, r3
   25954:	dd20      	ble.n	25998 <svr_handleRequest2+0x108>
    {
        //Send U-Frame Frame Reject if we have received more data that can fit to one HDLC frame.
        if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   25956:	68fb      	ldr	r3, [r7, #12]
   25958:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   2595c:	2b00      	cmp	r3, #0
   2595e:	d117      	bne.n	25990 <svr_handleRequest2+0x100>
        {
            ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_REJECTED, NULL, reply);
   25960:	68f8      	ldr	r0, [r7, #12]
   25962:	683b      	ldr	r3, [r7, #0]
   25964:	2200      	movs	r2, #0
   25966:	2197      	movs	r1, #151	; 0x97
   25968:	f7e2 fc7a 	bl	8260 <dlms_getHdlcFrame>
   2596c:	6278      	str	r0, [r7, #36]	; 0x24
            settings->receivedData.position = settings->receivedData.size = 0;
   2596e:	68fb      	ldr	r3, [r7, #12]
   25970:	2200      	movs	r2, #0
   25972:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25976:	68fb      	ldr	r3, [r7, #12]
   25978:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   2597c:	68fb      	ldr	r3, [r7, #12]
   2597e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
            reply_clear2(&settings->info, 1);
   25982:	68fb      	ldr	r3, [r7, #12]
   25984:	33c8      	adds	r3, #200	; 0xc8
   25986:	2101      	movs	r1, #1
   25988:	4618      	mov	r0, r3
   2598a:	f7fc fdb9 	bl	22500 <reply_clear2>
   2598e:	e001      	b.n	25994 <svr_handleRequest2+0x104>
        }
        else
        {
            ret = 0;
   25990:	2300      	movs	r3, #0
   25992:	627b      	str	r3, [r7, #36]	; 0x24
        }
        return ret;
   25994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25996:	e2a6      	b.n	25ee6 <svr_handleRequest2+0x656>
    }
    bb_set(&settings->receivedData, buff, size);
   25998:	68fb      	ldr	r3, [r7, #12]
   2599a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   2599e:	88fa      	ldrh	r2, [r7, #6]
   259a0:	68b9      	ldr	r1, [r7, #8]
   259a2:	4618      	mov	r0, r3
   259a4:	f7dd fddc 	bl	3560 <bb_set>
    first = settings->base.serverAddress == 0
   259a8:	68fb      	ldr	r3, [r7, #12]
   259aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        && settings->base.clientAddress == 0;
   259ac:	2b00      	cmp	r3, #0
   259ae:	d105      	bne.n	259bc <svr_handleRequest2+0x12c>
   259b0:	68fb      	ldr	r3, [r7, #12]
   259b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   259b4:	2b00      	cmp	r3, #0
   259b6:	d101      	bne.n	259bc <svr_handleRequest2+0x12c>
   259b8:	2301      	movs	r3, #1
   259ba:	e000      	b.n	259be <svr_handleRequest2+0x12e>
   259bc:	2300      	movs	r3, #0
            ret = 0;
        }
        return ret;
    }
    bb_set(&settings->receivedData, buff, size);
    first = settings->base.serverAddress == 0
   259be:	777b      	strb	r3, [r7, #29]
        && settings->base.clientAddress == 0;
    if ((ret = dlms_getData2(&settings->base, &settings->receivedData, &settings->info, first)) != 0)
   259c0:	68f8      	ldr	r0, [r7, #12]
   259c2:	68fb      	ldr	r3, [r7, #12]
   259c4:	f503 7184 	add.w	r1, r3, #264	; 0x108
   259c8:	68fb      	ldr	r3, [r7, #12]
   259ca:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   259ce:	7f7b      	ldrb	r3, [r7, #29]
   259d0:	f7e5 fc2e 	bl	b230 <dlms_getData2>
   259d4:	6278      	str	r0, [r7, #36]	; 0x24
   259d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   259d8:	2b00      	cmp	r3, #0
   259da:	f000 80d4 	beq.w	25b86 <svr_handleRequest2+0x2f6>
    {
        if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS)
   259de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   259e0:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   259e4:	d101      	bne.n	259ea <svr_handleRequest2+0x15a>
        {
            return 0;
   259e6:	2300      	movs	r3, #0
   259e8:	e27d      	b.n	25ee6 <svr_handleRequest2+0x656>
        }
        else if (ret == DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS)
   259ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   259ec:	f240 1207 	movw	r2, #263	; 0x107
   259f0:	4293      	cmp	r3, r2
   259f2:	d15b      	bne.n	25aac <svr_handleRequest2+0x21c>
        {
            if (settings->info.preEstablished)
   259f4:	68fb      	ldr	r3, [r7, #12]
   259f6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   259fa:	2b00      	cmp	r3, #0
   259fc:	d025      	beq.n	25a4a <svr_handleRequest2+0x1ba>
            {
                svr_disconnected(settings);
   259fe:	68f8      	ldr	r0, [r7, #12]
   25a00:	f003 fcf4 	bl	293ec <svr_disconnected>
                svr_reset(settings);
   25a04:	68f8      	ldr	r0, [r7, #12]
   25a06:	f7fc ffb7 	bl	22978 <svr_reset>
                first = 1;
   25a0a:	2301      	movs	r3, #1
   25a0c:	777b      	strb	r3, [r7, #29]
                settings->receivedData.position = 0;
   25a0e:	68fb      	ldr	r3, [r7, #12]
   25a10:	2200      	movs	r2, #0
   25a12:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                if ((ret = dlms_getData2(&settings->base, &settings->receivedData, &settings->info, first)) != 0)
   25a16:	68f8      	ldr	r0, [r7, #12]
   25a18:	68fb      	ldr	r3, [r7, #12]
   25a1a:	f503 7184 	add.w	r1, r3, #264	; 0x108
   25a1e:	68fb      	ldr	r3, [r7, #12]
   25a20:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   25a24:	7f7b      	ldrb	r3, [r7, #29]
   25a26:	f7e5 fc03 	bl	b230 <dlms_getData2>
   25a2a:	6278      	str	r0, [r7, #36]	; 0x24
   25a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25a2e:	2b00      	cmp	r3, #0
   25a30:	d02a      	beq.n	25a88 <svr_handleRequest2+0x1f8>
                {
                    settings->receivedData.position = settings->receivedData.size = 0;
   25a32:	68fb      	ldr	r3, [r7, #12]
   25a34:	2200      	movs	r2, #0
   25a36:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25a3a:	68fb      	ldr	r3, [r7, #12]
   25a3c:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25a40:	68fb      	ldr	r3, [r7, #12]
   25a42:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                    return ret;
   25a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25a48:	e24d      	b.n	25ee6 <svr_handleRequest2+0x656>
                }
            }
            else if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25a4a:	68fb      	ldr	r3, [r7, #12]
   25a4c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25a50:	2b00      	cmp	r3, #0
   25a52:	d119      	bne.n	25a88 <svr_handleRequest2+0x1f8>
                (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
   25a54:	68fb      	ldr	r3, [r7, #12]
   25a56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25a5a:	f003 0301 	and.w	r3, r3, #1
                {
                    settings->receivedData.position = settings->receivedData.size = 0;
                    return ret;
                }
            }
            else if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25a5e:	2b00      	cmp	r3, #0
   25a60:	d012      	beq.n	25a88 <svr_handleRequest2+0x1f8>
                (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
            {
                ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_REJECTED, NULL, reply);
   25a62:	68f8      	ldr	r0, [r7, #12]
   25a64:	683b      	ldr	r3, [r7, #0]
   25a66:	2200      	movs	r2, #0
   25a68:	2197      	movs	r1, #151	; 0x97
   25a6a:	f7e2 fbf9 	bl	8260 <dlms_getHdlcFrame>
   25a6e:	6278      	str	r0, [r7, #36]	; 0x24
                settings->receivedData.position = settings->receivedData.size = 0;
   25a70:	68fb      	ldr	r3, [r7, #12]
   25a72:	2200      	movs	r2, #0
   25a74:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25a78:	68fb      	ldr	r3, [r7, #12]
   25a7a:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25a7e:	68fb      	ldr	r3, [r7, #12]
   25a80:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                return ret;
   25a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25a86:	e22e      	b.n	25ee6 <svr_handleRequest2+0x656>
            }
            settings->receivedData.position = settings->receivedData.size = 0;
   25a88:	68fb      	ldr	r3, [r7, #12]
   25a8a:	2200      	movs	r2, #0
   25a8c:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25a90:	68fb      	ldr	r3, [r7, #12]
   25a92:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25a96:	68fb      	ldr	r3, [r7, #12]
   25a98:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
            reply_clear2(&settings->info, 1);
   25a9c:	68fb      	ldr	r3, [r7, #12]
   25a9e:	33c8      	adds	r3, #200	; 0xc8
   25aa0:	2101      	movs	r1, #1
   25aa2:	4618      	mov	r0, r3
   25aa4:	f7fc fd2c 	bl	22500 <reply_clear2>
            return 0;
   25aa8:	2300      	movs	r3, #0
   25aaa:	e21c      	b.n	25ee6 <svr_handleRequest2+0x656>
        }
        else if (ret == DLMS_ERROR_CODE_INVALID_FRAME_NUMBER)
   25aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25aae:	f240 1219 	movw	r2, #281	; 0x119
   25ab2:	4293      	cmp	r3, r2
   25ab4:	d131      	bne.n	25b1a <svr_handleRequest2+0x28a>
        {
            if ((settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
   25ab6:	68fb      	ldr	r3, [r7, #12]
   25ab8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25abc:	f003 0301 	and.w	r3, r3, #1
   25ac0:	2b00      	cmp	r3, #0
   25ac2:	d018      	beq.n	25af6 <svr_handleRequest2+0x266>
            {
                settings->dataReceived = time_current();
   25ac4:	f002 fff8 	bl	28ab8 <time_current>
   25ac8:	4602      	mov	r2, r0
   25aca:	68fb      	ldr	r3, [r7, #12]
   25acc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
                ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_REJECTED, NULL, reply);
   25ad0:	68f8      	ldr	r0, [r7, #12]
   25ad2:	683b      	ldr	r3, [r7, #0]
   25ad4:	2200      	movs	r2, #0
   25ad6:	2197      	movs	r1, #151	; 0x97
   25ad8:	f7e2 fbc2 	bl	8260 <dlms_getHdlcFrame>
   25adc:	6278      	str	r0, [r7, #36]	; 0x24
                settings->receivedData.position = settings->receivedData.size = 0;
   25ade:	68fb      	ldr	r3, [r7, #12]
   25ae0:	2200      	movs	r2, #0
   25ae2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25ae6:	68fb      	ldr	r3, [r7, #12]
   25ae8:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25aec:	68fb      	ldr	r3, [r7, #12]
   25aee:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                return ret;
   25af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25af4:	e1f7      	b.n	25ee6 <svr_handleRequest2+0x656>
            }
            settings->receivedData.position = settings->receivedData.size = 0;
   25af6:	68fb      	ldr	r3, [r7, #12]
   25af8:	2200      	movs	r2, #0
   25afa:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25afe:	68fb      	ldr	r3, [r7, #12]
   25b00:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25b04:	68fb      	ldr	r3, [r7, #12]
   25b06:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
            reply_clear2(&settings->info, 1);
   25b0a:	68fb      	ldr	r3, [r7, #12]
   25b0c:	33c8      	adds	r3, #200	; 0xc8
   25b0e:	2101      	movs	r1, #1
   25b10:	4618      	mov	r0, r3
   25b12:	f7fc fcf5 	bl	22500 <reply_clear2>
            return 0;
   25b16:	2300      	movs	r3, #0
   25b18:	e1e5      	b.n	25ee6 <svr_handleRequest2+0x656>
        }
        else
        {
            if (ret != DLMS_ERROR_CODE_WRONG_CRC && settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25b1c:	f240 120d 	movw	r2, #269	; 0x10d
   25b20:	4293      	cmp	r3, r2
   25b22:	d01e      	beq.n	25b62 <svr_handleRequest2+0x2d2>
   25b24:	68fb      	ldr	r3, [r7, #12]
   25b26:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25b2a:	2b00      	cmp	r3, #0
   25b2c:	d119      	bne.n	25b62 <svr_handleRequest2+0x2d2>
                (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
   25b2e:	68fb      	ldr	r3, [r7, #12]
   25b30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25b34:	f003 0301 	and.w	r3, r3, #1
            reply_clear2(&settings->info, 1);
            return 0;
        }
        else
        {
            if (ret != DLMS_ERROR_CODE_WRONG_CRC && settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25b38:	2b00      	cmp	r3, #0
   25b3a:	d012      	beq.n	25b62 <svr_handleRequest2+0x2d2>
                (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
            {
                ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_REJECTED, NULL, reply);
   25b3c:	68f8      	ldr	r0, [r7, #12]
   25b3e:	683b      	ldr	r3, [r7, #0]
   25b40:	2200      	movs	r2, #0
   25b42:	2197      	movs	r1, #151	; 0x97
   25b44:	f7e2 fb8c 	bl	8260 <dlms_getHdlcFrame>
   25b48:	6278      	str	r0, [r7, #36]	; 0x24
                settings->receivedData.position = settings->receivedData.size = 0;
   25b4a:	68fb      	ldr	r3, [r7, #12]
   25b4c:	2200      	movs	r2, #0
   25b4e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25b52:	68fb      	ldr	r3, [r7, #12]
   25b54:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25b58:	68fb      	ldr	r3, [r7, #12]
   25b5a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
                return ret;
   25b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25b60:	e1c1      	b.n	25ee6 <svr_handleRequest2+0x656>
            }
            settings->receivedData.position = settings->receivedData.size = 0;
   25b62:	68fb      	ldr	r3, [r7, #12]
   25b64:	2200      	movs	r2, #0
   25b66:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25b6a:	68fb      	ldr	r3, [r7, #12]
   25b6c:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25b70:	68fb      	ldr	r3, [r7, #12]
   25b72:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
            reply_clear2(&settings->info, 1);
   25b76:	68fb      	ldr	r3, [r7, #12]
   25b78:	33c8      	adds	r3, #200	; 0xc8
   25b7a:	2101      	movs	r1, #1
   25b7c:	4618      	mov	r0, r3
   25b7e:	f7fc fcbf 	bl	22500 <reply_clear2>
            return 0;
   25b82:	2300      	movs	r3, #0
   25b84:	e1af      	b.n	25ee6 <svr_handleRequest2+0x656>
        }
    }
    // If all data is not received yet.
    if (!settings->info.complete)
   25b86:	68fb      	ldr	r3, [r7, #12]
   25b88:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   25b8c:	2b00      	cmp	r3, #0
   25b8e:	d101      	bne.n	25b94 <svr_handleRequest2+0x304>
    {
        return 0;
   25b90:	2300      	movs	r3, #0
   25b92:	e1a8      	b.n	25ee6 <svr_handleRequest2+0x656>
    }
    bb_clear(&settings->receivedData);
   25b94:	68fb      	ldr	r3, [r7, #12]
   25b96:	f503 7384 	add.w	r3, r3, #264	; 0x108
   25b9a:	4618      	mov	r0, r3
   25b9c:	f7dd fde2 	bl	3764 <bb_clear>
    if (settings->info.command == DLMS_COMMAND_DISC && (settings->base.connected & DLMS_CONNECTION_STATE_HDLC) == 0)
   25ba0:	68fb      	ldr	r3, [r7, #12]
   25ba2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25ba6:	2b53      	cmp	r3, #83	; 0x53
   25ba8:	d115      	bne.n	25bd6 <svr_handleRequest2+0x346>
   25baa:	68fb      	ldr	r3, [r7, #12]
   25bac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25bb0:	f003 0301 	and.w	r3, r3, #1
   25bb4:	2b00      	cmp	r3, #0
   25bb6:	d10e      	bne.n	25bd6 <svr_handleRequest2+0x346>
    {
        ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_DISCONNECT_MODE, NULL, reply);
   25bb8:	68f8      	ldr	r0, [r7, #12]
   25bba:	683b      	ldr	r3, [r7, #0]
   25bbc:	2200      	movs	r2, #0
   25bbe:	211f      	movs	r1, #31
   25bc0:	f7e2 fb4e 	bl	8260 <dlms_getHdlcFrame>
   25bc4:	6278      	str	r0, [r7, #36]	; 0x24
        reply_clear2(&settings->info, 1);
   25bc6:	68fb      	ldr	r3, [r7, #12]
   25bc8:	33c8      	adds	r3, #200	; 0xc8
   25bca:	2101      	movs	r1, #1
   25bcc:	4618      	mov	r0, r3
   25bce:	f7fc fc97 	bl	22500 <reply_clear2>
        return ret;
   25bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25bd4:	e187      	b.n	25ee6 <svr_handleRequest2+0x656>
    }

    if (first || settings->info.command == DLMS_COMMAND_SNRM ||
   25bd6:	7f7b      	ldrb	r3, [r7, #29]
   25bd8:	2b00      	cmp	r3, #0
   25bda:	d10e      	bne.n	25bfa <svr_handleRequest2+0x36a>
   25bdc:	68fb      	ldr	r3, [r7, #12]
   25bde:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25be2:	2b93      	cmp	r3, #147	; 0x93
   25be4:	d009      	beq.n	25bfa <svr_handleRequest2+0x36a>
        (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER && settings->info.command == DLMS_COMMAND_AARQ))
   25be6:	68fb      	ldr	r3, [r7, #12]
   25be8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
        ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_DISCONNECT_MODE, NULL, reply);
        reply_clear2(&settings->info, 1);
        return ret;
    }

    if (first || settings->info.command == DLMS_COMMAND_SNRM ||
   25bec:	2b01      	cmp	r3, #1
   25bee:	d14e      	bne.n	25c8e <svr_handleRequest2+0x3fe>
        (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER && settings->info.command == DLMS_COMMAND_AARQ))
   25bf0:	68fb      	ldr	r3, [r7, #12]
   25bf2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25bf6:	2b60      	cmp	r3, #96	; 0x60
   25bf8:	d149      	bne.n	25c8e <svr_handleRequest2+0x3fe>
    {
        if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC && settings->info.preEstablished)
   25bfa:	68fb      	ldr	r3, [r7, #12]
   25bfc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25c00:	2b00      	cmp	r3, #0
   25c02:	d107      	bne.n	25c14 <svr_handleRequest2+0x384>
   25c04:	68fb      	ldr	r3, [r7, #12]
   25c06:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   25c0a:	2b00      	cmp	r3, #0
   25c0c:	d002      	beq.n	25c14 <svr_handleRequest2+0x384>
        {
            svr_disconnected(settings);
   25c0e:	68f8      	ldr	r0, [r7, #12]
   25c10:	f003 fbec 	bl	293ec <svr_disconnected>
        }
        // Check is data send to this server.
        if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER && settings->info.command == DLMS_COMMAND_AARQ)
   25c14:	68fb      	ldr	r3, [r7, #12]
   25c16:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25c1a:	2b01      	cmp	r3, #1
   25c1c:	d126      	bne.n	25c6c <svr_handleRequest2+0x3dc>
   25c1e:	68fb      	ldr	r3, [r7, #12]
   25c20:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25c24:	2b60      	cmp	r3, #96	; 0x60
   25c26:	d121      	bne.n	25c6c <svr_handleRequest2+0x3dc>
        {
            if (!svr_isTarget(&settings->base, settings->base.serverAddress, settings->base.clientAddress))
   25c28:	68f8      	ldr	r0, [r7, #12]
   25c2a:	68fb      	ldr	r3, [r7, #12]
   25c2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   25c2e:	4619      	mov	r1, r3
   25c30:	68fb      	ldr	r3, [r7, #12]
   25c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   25c34:	461a      	mov	r2, r3
   25c36:	f003 fb2f 	bl	29298 <svr_isTarget>
   25c3a:	4603      	mov	r3, r0
   25c3c:	2b00      	cmp	r3, #0
   25c3e:	d115      	bne.n	25c6c <svr_handleRequest2+0x3dc>
            {
                if ((settings->base.connected & DLMS_CONNECTION_STATE_DLMS) == 0)
   25c40:	68fb      	ldr	r3, [r7, #12]
   25c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25c46:	f003 0302 	and.w	r3, r3, #2
   25c4a:	2b00      	cmp	r3, #0
   25c4c:	d106      	bne.n	25c5c <svr_handleRequest2+0x3cc>
                {
                    settings->base.serverAddress = settings->base.clientAddress = 0;
   25c4e:	68fb      	ldr	r3, [r7, #12]
   25c50:	2200      	movs	r2, #0
   25c52:	865a      	strh	r2, [r3, #50]	; 0x32
   25c54:	68fb      	ldr	r3, [r7, #12]
   25c56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   25c58:	68fb      	ldr	r3, [r7, #12]
   25c5a:	869a      	strh	r2, [r3, #52]	; 0x34
                }
                reply_clear2(&settings->info, 1);
   25c5c:	68fb      	ldr	r3, [r7, #12]
   25c5e:	33c8      	adds	r3, #200	; 0xc8
   25c60:	2101      	movs	r1, #1
   25c62:	4618      	mov	r0, r3
   25c64:	f7fc fc4c 	bl	22500 <reply_clear2>
                return 0;
   25c68:	2300      	movs	r3, #0
   25c6a:	e13c      	b.n	25ee6 <svr_handleRequest2+0x656>
            }
        }
        if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   25c6c:	68fb      	ldr	r3, [r7, #12]
   25c6e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25c72:	2b00      	cmp	r3, #0
   25c74:	d10b      	bne.n	25c8e <svr_handleRequest2+0x3fe>
        {
            settings->base.connected |= DLMS_CONNECTION_STATE_HDLC;
   25c76:	68fb      	ldr	r3, [r7, #12]
   25c78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25c7c:	f043 0301 	orr.w	r3, r3, #1
   25c80:	b2da      	uxtb	r2, r3
   25c82:	68fb      	ldr	r3, [r7, #12]
   25c84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
            svr_connected(settings);
   25c88:	68f8      	ldr	r0, [r7, #12]
   25c8a:	f003 fb9b 	bl	293c4 <svr_connected>
        }
    }
    // If client want next frame.
    if ((settings->info.moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == DLMS_DATA_REQUEST_TYPES_FRAME)
   25c8e:	68fb      	ldr	r3, [r7, #12]
   25c90:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   25c94:	f003 0301 	and.w	r3, r3, #1
   25c98:	2b00      	cmp	r3, #0
   25c9a:	d013      	beq.n	25cc4 <svr_handleRequest2+0x434>
    {
        settings->dataReceived = time_current();
   25c9c:	f002 ff0c 	bl	28ab8 <time_current>
   25ca0:	4602      	mov	r2, r0
   25ca2:	68fb      	ldr	r3, [r7, #12]
   25ca4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
        return dlms_getHdlcFrame(&settings->base, getReceiverReady(&settings->base), NULL, reply);
   25ca8:	68fc      	ldr	r4, [r7, #12]
   25caa:	68fb      	ldr	r3, [r7, #12]
   25cac:	4618      	mov	r0, r3
   25cae:	f7e6 f921 	bl	bef4 <getReceiverReady>
   25cb2:	4603      	mov	r3, r0
   25cb4:	4619      	mov	r1, r3
   25cb6:	683b      	ldr	r3, [r7, #0]
   25cb8:	2200      	movs	r2, #0
   25cba:	4620      	mov	r0, r4
   25cbc:	f7e2 fad0 	bl	8260 <dlms_getHdlcFrame>
   25cc0:	4603      	mov	r3, r0
   25cc2:	e110      	b.n	25ee6 <svr_handleRequest2+0x656>
    }
    // Update command if transaction and next frame is asked.
    if (settings->info.command == DLMS_COMMAND_NONE)
   25cc4:	68fb      	ldr	r3, [r7, #12]
   25cc6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25cca:	2b00      	cmp	r3, #0
   25ccc:	d13e      	bne.n	25d4c <svr_handleRequest2+0x4bc>
    {
        if (settings->transaction.command != DLMS_COMMAND_NONE)
   25cce:	68fb      	ldr	r3, [r7, #12]
   25cd0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   25cd4:	2b00      	cmp	r3, #0
   25cd6:	d020      	beq.n	25d1a <svr_handleRequest2+0x48a>
        {
            //If client wants next PDU.
            if (settings->info.data.size == 0)
   25cd8:	68fb      	ldr	r3, [r7, #12]
   25cda:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
   25cde:	2b00      	cmp	r3, #0
   25ce0:	d106      	bne.n	25cf0 <svr_handleRequest2+0x460>
            {
                settings->info.command = settings->transaction.command;
   25ce2:	68fb      	ldr	r3, [r7, #12]
   25ce4:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   25ce8:	68fb      	ldr	r3, [r7, #12]
   25cea:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   25cee:	e02d      	b.n	25d4c <svr_handleRequest2+0x4bc>
            }
            else
            {
                settings->info.data.position = 0;
   25cf0:	68fb      	ldr	r3, [r7, #12]
   25cf2:	2200      	movs	r2, #0
   25cf4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
                //Return rest of frame.
                return dlms_getHdlcFrame(&settings->base, getNextSend(&settings->base, 0), &settings->info.data, reply);
   25cf8:	68fc      	ldr	r4, [r7, #12]
   25cfa:	68fb      	ldr	r3, [r7, #12]
   25cfc:	2100      	movs	r1, #0
   25cfe:	4618      	mov	r0, r3
   25d00:	f7e6 f8cc 	bl	be9c <getNextSend>
   25d04:	4603      	mov	r3, r0
   25d06:	4619      	mov	r1, r3
   25d08:	68fb      	ldr	r3, [r7, #12]
   25d0a:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
   25d0e:	683b      	ldr	r3, [r7, #0]
   25d10:	4620      	mov	r0, r4
   25d12:	f7e2 faa5 	bl	8260 <dlms_getHdlcFrame>
   25d16:	4603      	mov	r3, r0
   25d18:	e0e5      	b.n	25ee6 <svr_handleRequest2+0x656>
            }
        }
        else if (settings->info.data.size == 0)
   25d1a:	68fb      	ldr	r3, [r7, #12]
   25d1c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
   25d20:	2b00      	cmp	r3, #0
   25d22:	d113      	bne.n	25d4c <svr_handleRequest2+0x4bc>
        {
            settings->dataReceived = time_current();
   25d24:	f002 fec8 	bl	28ab8 <time_current>
   25d28:	4602      	mov	r2, r0
   25d2a:	68fb      	ldr	r3, [r7, #12]
   25d2c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
            return dlms_getHdlcFrame(&settings->base, getKeepAlive(&settings->base), NULL, reply);
   25d30:	68fc      	ldr	r4, [r7, #12]
   25d32:	68fb      	ldr	r3, [r7, #12]
   25d34:	4618      	mov	r0, r3
   25d36:	f7e6 f8f9 	bl	bf2c <getKeepAlive>
   25d3a:	4603      	mov	r3, r0
   25d3c:	4619      	mov	r1, r3
   25d3e:	683b      	ldr	r3, [r7, #0]
   25d40:	2200      	movs	r2, #0
   25d42:	4620      	mov	r0, r4
   25d44:	f7e2 fa8c 	bl	8260 <dlms_getHdlcFrame>
   25d48:	4603      	mov	r3, r0
   25d4a:	e0cc      	b.n	25ee6 <svr_handleRequest2+0x656>
        }
    }
    //Check inactivity timeout.
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25d4c:	68fb      	ldr	r3, [r7, #12]
   25d4e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25d52:	2b00      	cmp	r3, #0
   25d54:	d141      	bne.n	25dda <svr_handleRequest2+0x54a>
        settings->hdlc != NULL && settings->hdlc->inactivityTimeout != 0)
   25d56:	68fb      	ldr	r3, [r7, #12]
   25d58:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            return dlms_getHdlcFrame(&settings->base, getKeepAlive(&settings->base), NULL, reply);
        }
    }
    //Check inactivity timeout.
#ifndef DLMS_IGNORE_IEC_HDLC_SETUP
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC &&
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	d03c      	beq.n	25dda <svr_handleRequest2+0x54a>
        settings->hdlc != NULL && settings->hdlc->inactivityTimeout != 0)
   25d60:	68fb      	ldr	r3, [r7, #12]
   25d62:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25d66:	8a1b      	ldrh	r3, [r3, #16]
   25d68:	2b00      	cmp	r3, #0
   25d6a:	d036      	beq.n	25dda <svr_handleRequest2+0x54a>
    {
        if (settings->info.command != DLMS_COMMAND_SNRM)
   25d6c:	68fb      	ldr	r3, [r7, #12]
   25d6e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25d72:	2b93      	cmp	r3, #147	; 0x93
   25d74:	d031      	beq.n	25dda <svr_handleRequest2+0x54a>
        {
            int elapsed = (int)(time_current() - settings->dataReceived);
   25d76:	f002 fe9f 	bl	28ab8 <time_current>
   25d7a:	4602      	mov	r2, r0
   25d7c:	68fb      	ldr	r3, [r7, #12]
   25d7e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   25d82:	1ad3      	subs	r3, r2, r3
   25d84:	61bb      	str	r3, [r7, #24]
            //If inactivity time out is elapsed.
            if (elapsed >= settings->hdlc->inactivityTimeout)
   25d86:	68fb      	ldr	r3, [r7, #12]
   25d88:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25d8c:	8a1b      	ldrh	r3, [r3, #16]
   25d8e:	461a      	mov	r2, r3
   25d90:	69bb      	ldr	r3, [r7, #24]
   25d92:	429a      	cmp	r2, r3
   25d94:	dc21      	bgt.n	25dda <svr_handleRequest2+0x54a>
            {
                if (!settings->info.preEstablished)
   25d96:	68fb      	ldr	r3, [r7, #12]
   25d98:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   25d9c:	2b00      	cmp	r3, #0
   25d9e:	d112      	bne.n	25dc6 <svr_handleRequest2+0x536>
                {
                    if (settings->info.command == DLMS_COMMAND_DISC)
   25da0:	68fb      	ldr	r3, [r7, #12]
   25da2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25da6:	2b53      	cmp	r3, #83	; 0x53
   25da8:	d105      	bne.n	25db6 <svr_handleRequest2+0x526>
                    {
                        dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_DISCONNECT_MODE, NULL, reply);
   25daa:	68f8      	ldr	r0, [r7, #12]
   25dac:	683b      	ldr	r3, [r7, #0]
   25dae:	2200      	movs	r2, #0
   25db0:	211f      	movs	r1, #31
   25db2:	f7e2 fa55 	bl	8260 <dlms_getHdlcFrame>
                    }
                    svr_disconnected(settings);
   25db6:	68f8      	ldr	r0, [r7, #12]
   25db8:	f003 fb18 	bl	293ec <svr_disconnected>
                    svr_reset(settings);
   25dbc:	68f8      	ldr	r0, [r7, #12]
   25dbe:	f7fc fddb 	bl	22978 <svr_reset>
                    return 0;
   25dc2:	2300      	movs	r3, #0
   25dc4:	e08f      	b.n	25ee6 <svr_handleRequest2+0x656>
                }
                if ((settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
   25dc6:	68fb      	ldr	r3, [r7, #12]
   25dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25dcc:	f003 0301 	and.w	r3, r3, #1
   25dd0:	2b00      	cmp	r3, #0
   25dd2:	d002      	beq.n	25dda <svr_handleRequest2+0x54a>
                {
                    svr_disconnected(settings);
   25dd4:	68f8      	ldr	r0, [r7, #12]
   25dd6:	f003 fb09 	bl	293ec <svr_disconnected>
            }
        }
    }
#endif // DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER &&
   25dda:	68fb      	ldr	r3, [r7, #12]
   25ddc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25de0:	2b01      	cmp	r3, #1
   25de2:	d136      	bne.n	25e52 <svr_handleRequest2+0x5c2>
        settings->wrapper != NULL && settings->wrapper->inactivityTimeout != 0)
   25de4:	68fb      	ldr	r3, [r7, #12]
   25de6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        }
    }
#endif // DLMS_IGNORE_IEC_HDLC_SETUP
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_WRAPPER &&
   25dea:	2b00      	cmp	r3, #0
   25dec:	d031      	beq.n	25e52 <svr_handleRequest2+0x5c2>
        settings->wrapper != NULL && settings->wrapper->inactivityTimeout != 0)
   25dee:	68fb      	ldr	r3, [r7, #12]
   25df0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   25df4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   25df6:	2b00      	cmp	r3, #0
   25df8:	d02b      	beq.n	25e52 <svr_handleRequest2+0x5c2>
    {
        if (settings->info.command != DLMS_COMMAND_AARQ)
   25dfa:	68fb      	ldr	r3, [r7, #12]
   25dfc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   25e00:	2b60      	cmp	r3, #96	; 0x60
   25e02:	d026      	beq.n	25e52 <svr_handleRequest2+0x5c2>
        {
            int elapsed = (int)(time_current() - settings->dataReceived);
   25e04:	f002 fe58 	bl	28ab8 <time_current>
   25e08:	4602      	mov	r2, r0
   25e0a:	68fb      	ldr	r3, [r7, #12]
   25e0c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   25e10:	1ad3      	subs	r3, r2, r3
   25e12:	617b      	str	r3, [r7, #20]
            //If inactivity time out is elapsed.
            if (elapsed >= settings->wrapper->inactivityTimeout)
   25e14:	68fb      	ldr	r3, [r7, #12]
   25e16:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   25e1a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   25e1c:	461a      	mov	r2, r3
   25e1e:	697b      	ldr	r3, [r7, #20]
   25e20:	429a      	cmp	r2, r3
   25e22:	dc16      	bgt.n	25e52 <svr_handleRequest2+0x5c2>
            {
                if (!settings->info.preEstablished)
   25e24:	68fb      	ldr	r3, [r7, #12]
   25e26:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   25e2a:	2b00      	cmp	r3, #0
   25e2c:	d107      	bne.n	25e3e <svr_handleRequest2+0x5ae>
                {
                    svr_disconnected(settings);
   25e2e:	68f8      	ldr	r0, [r7, #12]
   25e30:	f003 fadc 	bl	293ec <svr_disconnected>
                    svr_reset(settings);
   25e34:	68f8      	ldr	r0, [r7, #12]
   25e36:	f7fc fd9f 	bl	22978 <svr_reset>
                    return 0;
   25e3a:	2300      	movs	r3, #0
   25e3c:	e053      	b.n	25ee6 <svr_handleRequest2+0x656>
                }
                if ((settings->base.connected & DLMS_CONNECTION_STATE_HDLC) != 0)
   25e3e:	68fb      	ldr	r3, [r7, #12]
   25e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   25e44:	f003 0301 	and.w	r3, r3, #1
   25e48:	2b00      	cmp	r3, #0
   25e4a:	d002      	beq.n	25e52 <svr_handleRequest2+0x5c2>
                {
                    svr_disconnected(settings);
   25e4c:	68f8      	ldr	r0, [r7, #12]
   25e4e:	f003 facd 	bl	293ec <svr_disconnected>
                }
            }
        }
    }
#endif // DLMS_IGNORE_TCP_UDP_SETUP
    ret = svr_handleCommand(settings, settings->info.command, &settings->info.data, reply);
   25e52:	68fb      	ldr	r3, [r7, #12]
   25e54:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
   25e58:	68fb      	ldr	r3, [r7, #12]
   25e5a:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
   25e5e:	683b      	ldr	r3, [r7, #0]
   25e60:	68f8      	ldr	r0, [r7, #12]
   25e62:	f7ff fc07 	bl	25674 <svr_handleCommand>
   25e66:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret != 0)
   25e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e6a:	2b00      	cmp	r3, #0
   25e6c:	d02e      	beq.n	25ecc <svr_handleRequest2+0x63c>
    {
        bb_clear(reply);
   25e6e:	6838      	ldr	r0, [r7, #0]
   25e70:	f7dd fc78 	bl	3764 <bb_clear>
        if (settings->base.interfaceType == DLMS_INTERFACE_TYPE_HDLC)
   25e74:	68fb      	ldr	r3, [r7, #12]
   25e76:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   25e7a:	2b00      	cmp	r3, #0
   25e7c:	d11d      	bne.n	25eba <svr_handleRequest2+0x62a>
        {
            if (ret == DLMS_ERROR_CODE_REJECTED)
   25e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e80:	f113 0f02 	cmn.w	r3, #2
   25e84:	d107      	bne.n	25e96 <svr_handleRequest2+0x606>
            {
                ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_DISCONNECT_MODE, NULL, reply);
   25e86:	68f8      	ldr	r0, [r7, #12]
   25e88:	683b      	ldr	r3, [r7, #0]
   25e8a:	2200      	movs	r2, #0
   25e8c:	211f      	movs	r1, #31
   25e8e:	f7e2 f9e7 	bl	8260 <dlms_getHdlcFrame>
   25e92:	6278      	str	r0, [r7, #36]	; 0x24
   25e94:	e006      	b.n	25ea4 <svr_handleRequest2+0x614>
            }
            else
            {
                ret = dlms_getHdlcFrame(&settings->base, DLMS_COMMAND_REJECTED, NULL, reply);
   25e96:	68f8      	ldr	r0, [r7, #12]
   25e98:	683b      	ldr	r3, [r7, #0]
   25e9a:	2200      	movs	r2, #0
   25e9c:	2197      	movs	r1, #151	; 0x97
   25e9e:	f7e2 f9df 	bl	8260 <dlms_getHdlcFrame>
   25ea2:	6278      	str	r0, [r7, #36]	; 0x24
            }
            settings->receivedData.position = settings->receivedData.size = 0;
   25ea4:	68fb      	ldr	r3, [r7, #12]
   25ea6:	2200      	movs	r2, #0
   25ea8:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
   25eac:	68fb      	ldr	r3, [r7, #12]
   25eae:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
   25eb2:	68fb      	ldr	r3, [r7, #12]
   25eb4:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
   25eb8:	e008      	b.n	25ecc <svr_handleRequest2+0x63c>
        }
        else
        {
            ret = svr_reportError(settings, settings->info.command, DLMS_ERROR_CODE_OTHER_REASON, reply);
   25eba:	68fb      	ldr	r3, [r7, #12]
   25ebc:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
   25ec0:	683b      	ldr	r3, [r7, #0]
   25ec2:	22fa      	movs	r2, #250	; 0xfa
   25ec4:	68f8      	ldr	r0, [r7, #12]
   25ec6:	f7fd f887 	bl	22fd8 <svr_reportError>
   25eca:	6278      	str	r0, [r7, #36]	; 0x24
        }
    }
    reply_clear2(&settings->info, 0);
   25ecc:	68fb      	ldr	r3, [r7, #12]
   25ece:	33c8      	adds	r3, #200	; 0xc8
   25ed0:	2100      	movs	r1, #0
   25ed2:	4618      	mov	r0, r3
   25ed4:	f7fc fb14 	bl	22500 <reply_clear2>
    settings->dataReceived = time_current();
   25ed8:	f002 fdee 	bl	28ab8 <time_current>
   25edc:	4602      	mov	r2, r0
   25ede:	68fb      	ldr	r3, [r7, #12]
   25ee0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    return ret;
   25ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   25ee6:	4618      	mov	r0, r3
   25ee8:	372c      	adds	r7, #44	; 0x2c
   25eea:	46bd      	mov	sp, r7
   25eec:	bd90      	pop	{r4, r7, pc}
   25eee:	bf00      	nop

00025ef0 <var_setEnum>:
#include "../include/variant.h"
#include "../include/errorcodes.h"
#include "../include/helpers.h"

int var_setEnum(dlmsVARIANT *data, unsigned char value)
{
   25ef0:	b580      	push	{r7, lr}
   25ef2:	b082      	sub	sp, #8
   25ef4:	af00      	add	r7, sp, #0
   25ef6:	6078      	str	r0, [r7, #4]
   25ef8:	460b      	mov	r3, r1
   25efa:	70fb      	strb	r3, [r7, #3]
    var_clear(data);
   25efc:	6878      	ldr	r0, [r7, #4]
   25efe:	f000 f923 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_ENUM;
   25f02:	687b      	ldr	r3, [r7, #4]
   25f04:	2216      	movs	r2, #22
   25f06:	701a      	strb	r2, [r3, #0]
    data->bVal = value;
   25f08:	687b      	ldr	r3, [r7, #4]
   25f0a:	78fa      	ldrb	r2, [r7, #3]
   25f0c:	721a      	strb	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25f0e:	2300      	movs	r3, #0
}
   25f10:	4618      	mov	r0, r3
   25f12:	3708      	adds	r7, #8
   25f14:	46bd      	mov	sp, r7
   25f16:	bd80      	pop	{r7, pc}

00025f18 <var_setUInt8>:

int var_setUInt8(dlmsVARIANT *data, unsigned char value)
{
   25f18:	b580      	push	{r7, lr}
   25f1a:	b082      	sub	sp, #8
   25f1c:	af00      	add	r7, sp, #0
   25f1e:	6078      	str	r0, [r7, #4]
   25f20:	460b      	mov	r3, r1
   25f22:	70fb      	strb	r3, [r7, #3]
    var_clear(data);
   25f24:	6878      	ldr	r0, [r7, #4]
   25f26:	f000 f90f 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT8;
   25f2a:	687b      	ldr	r3, [r7, #4]
   25f2c:	2211      	movs	r2, #17
   25f2e:	701a      	strb	r2, [r3, #0]
    data->bVal = value;
   25f30:	687b      	ldr	r3, [r7, #4]
   25f32:	78fa      	ldrb	r2, [r7, #3]
   25f34:	721a      	strb	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25f36:	2300      	movs	r3, #0
}
   25f38:	4618      	mov	r0, r3
   25f3a:	3708      	adds	r7, #8
   25f3c:	46bd      	mov	sp, r7
   25f3e:	bd80      	pop	{r7, pc}

00025f40 <var_setUInt16>:

int var_setUInt16(dlmsVARIANT *data, unsigned short value)
{
   25f40:	b580      	push	{r7, lr}
   25f42:	b082      	sub	sp, #8
   25f44:	af00      	add	r7, sp, #0
   25f46:	6078      	str	r0, [r7, #4]
   25f48:	460b      	mov	r3, r1
   25f4a:	807b      	strh	r3, [r7, #2]
    var_clear(data);
   25f4c:	6878      	ldr	r0, [r7, #4]
   25f4e:	f000 f8fb 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT16;
   25f52:	687b      	ldr	r3, [r7, #4]
   25f54:	2212      	movs	r2, #18
   25f56:	701a      	strb	r2, [r3, #0]
    data->uiVal = value;
   25f58:	687b      	ldr	r3, [r7, #4]
   25f5a:	887a      	ldrh	r2, [r7, #2]
   25f5c:	811a      	strh	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25f5e:	2300      	movs	r3, #0
}
   25f60:	4618      	mov	r0, r3
   25f62:	3708      	adds	r7, #8
   25f64:	46bd      	mov	sp, r7
   25f66:	bd80      	pop	{r7, pc}

00025f68 <var_setUInt32>:

int var_setUInt32(dlmsVARIANT *data, unsigned long value)
{
   25f68:	b580      	push	{r7, lr}
   25f6a:	b082      	sub	sp, #8
   25f6c:	af00      	add	r7, sp, #0
   25f6e:	6078      	str	r0, [r7, #4]
   25f70:	6039      	str	r1, [r7, #0]
    var_clear(data);
   25f72:	6878      	ldr	r0, [r7, #4]
   25f74:	f000 f8e8 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT32;
   25f78:	687b      	ldr	r3, [r7, #4]
   25f7a:	2206      	movs	r2, #6
   25f7c:	701a      	strb	r2, [r3, #0]
    data->lVal = value;
   25f7e:	683a      	ldr	r2, [r7, #0]
   25f80:	687b      	ldr	r3, [r7, #4]
   25f82:	609a      	str	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25f84:	2300      	movs	r3, #0
}
   25f86:	4618      	mov	r0, r3
   25f88:	3708      	adds	r7, #8
   25f8a:	46bd      	mov	sp, r7
   25f8c:	bd80      	pop	{r7, pc}
   25f8e:	bf00      	nop

00025f90 <var_setInt8>:
    data->ullVal = value;
    return DLMS_ERROR_CODE_OK;
}

int var_setInt8(dlmsVARIANT *data, char value)
{
   25f90:	b580      	push	{r7, lr}
   25f92:	b082      	sub	sp, #8
   25f94:	af00      	add	r7, sp, #0
   25f96:	6078      	str	r0, [r7, #4]
   25f98:	460b      	mov	r3, r1
   25f9a:	70fb      	strb	r3, [r7, #3]
    var_clear(data);
   25f9c:	6878      	ldr	r0, [r7, #4]
   25f9e:	f000 f8d3 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_INT8;
   25fa2:	687b      	ldr	r3, [r7, #4]
   25fa4:	220f      	movs	r2, #15
   25fa6:	701a      	strb	r2, [r3, #0]
    data->cVal = value;
   25fa8:	f997 2003 	ldrsb.w	r2, [r7, #3]
   25fac:	687b      	ldr	r3, [r7, #4]
   25fae:	721a      	strb	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25fb0:	2300      	movs	r3, #0
}
   25fb2:	4618      	mov	r0, r3
   25fb4:	3708      	adds	r7, #8
   25fb6:	46bd      	mov	sp, r7
   25fb8:	bd80      	pop	{r7, pc}
   25fba:	bf00      	nop

00025fbc <var_setInt16>:

int var_setInt16(dlmsVARIANT *data, short value)
{
   25fbc:	b580      	push	{r7, lr}
   25fbe:	b082      	sub	sp, #8
   25fc0:	af00      	add	r7, sp, #0
   25fc2:	6078      	str	r0, [r7, #4]
   25fc4:	460b      	mov	r3, r1
   25fc6:	807b      	strh	r3, [r7, #2]
    var_clear(data);
   25fc8:	6878      	ldr	r0, [r7, #4]
   25fca:	f000 f8bd 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_INT16;
   25fce:	687b      	ldr	r3, [r7, #4]
   25fd0:	2210      	movs	r2, #16
   25fd2:	701a      	strb	r2, [r3, #0]
    data->iVal = value;
   25fd4:	687b      	ldr	r3, [r7, #4]
   25fd6:	887a      	ldrh	r2, [r7, #2]
   25fd8:	811a      	strh	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   25fda:	2300      	movs	r3, #0
}
   25fdc:	4618      	mov	r0, r3
   25fde:	3708      	adds	r7, #8
   25fe0:	46bd      	mov	sp, r7
   25fe2:	bd80      	pop	{r7, pc}

00025fe4 <var_setInt32>:

int var_setInt32(dlmsVARIANT *data, long value)
{
   25fe4:	b580      	push	{r7, lr}
   25fe6:	b082      	sub	sp, #8
   25fe8:	af00      	add	r7, sp, #0
   25fea:	6078      	str	r0, [r7, #4]
   25fec:	6039      	str	r1, [r7, #0]
    var_clear(data);
   25fee:	6878      	ldr	r0, [r7, #4]
   25ff0:	f000 f8aa 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_INT32;
   25ff4:	687b      	ldr	r3, [r7, #4]
   25ff6:	2205      	movs	r2, #5
   25ff8:	701a      	strb	r2, [r3, #0]
    data->lVal = value;
   25ffa:	687b      	ldr	r3, [r7, #4]
   25ffc:	683a      	ldr	r2, [r7, #0]
   25ffe:	609a      	str	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   26000:	2300      	movs	r3, #0
}
   26002:	4618      	mov	r0, r3
   26004:	3708      	adds	r7, #8
   26006:	46bd      	mov	sp, r7
   26008:	bd80      	pop	{r7, pc}
   2600a:	bf00      	nop

0002600c <var_setDouble>:
    data->llVal = value;
    return DLMS_ERROR_CODE_OK;
}

int var_setDouble(dlmsVARIANT *data, double value)
{
   2600c:	b590      	push	{r4, r7, lr}
   2600e:	b085      	sub	sp, #20
   26010:	af00      	add	r7, sp, #0
   26012:	60f8      	str	r0, [r7, #12]
   26014:	e9c7 2300 	strd	r2, r3, [r7]
    var_clear(data);
   26018:	68f8      	ldr	r0, [r7, #12]
   2601a:	f000 f895 	bl	26148 <var_clear>
    data->vt = DLMS_DATA_TYPE_FLOAT64;
   2601e:	68fb      	ldr	r3, [r7, #12]
   26020:	2218      	movs	r2, #24
   26022:	701a      	strb	r2, [r3, #0]
    data->dblVal = value;
   26024:	68fa      	ldr	r2, [r7, #12]
   26026:	e897 0018 	ldmia.w	r7, {r3, r4}
   2602a:	e9c2 3402 	strd	r3, r4, [r2, #8]
    return DLMS_ERROR_CODE_OK;
   2602e:	2300      	movs	r3, #0
}
   26030:	4618      	mov	r0, r3
   26032:	3714      	adds	r7, #20
   26034:	46bd      	mov	sp, r7
   26036:	bd90      	pop	{r4, r7, pc}

00026038 <var_addBytes>:
    }
    return DLMS_ERROR_CODE_OK;
}

int var_addBytes(dlmsVARIANT *data, const unsigned char* value, unsigned short count)
{
   26038:	b580      	push	{r7, lr}
   2603a:	b084      	sub	sp, #16
   2603c:	af00      	add	r7, sp, #0
   2603e:	60f8      	str	r0, [r7, #12]
   26040:	60b9      	str	r1, [r7, #8]
   26042:	4613      	mov	r3, r2
   26044:	80fb      	strh	r3, [r7, #6]
    if (count < 0)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   26046:	68fb      	ldr	r3, [r7, #12]
   26048:	781b      	ldrb	r3, [r3, #0]
   2604a:	2b09      	cmp	r3, #9
   2604c:	d012      	beq.n	26074 <var_addBytes+0x3c>
    {
        var_clear(data);
   2604e:	68f8      	ldr	r0, [r7, #12]
   26050:	f000 f87a 	bl	26148 <var_clear>
        data->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   26054:	200c      	movs	r0, #12
   26056:	f003 fcf5 	bl	29a44 <malloc>
   2605a:	4603      	mov	r3, r0
   2605c:	461a      	mov	r2, r3
   2605e:	68fb      	ldr	r3, [r7, #12]
   26060:	609a      	str	r2, [r3, #8]
        bb_init(data->byteArr);
   26062:	68fb      	ldr	r3, [r7, #12]
   26064:	689b      	ldr	r3, [r3, #8]
   26066:	4618      	mov	r0, r3
   26068:	f7dc fe3e 	bl	2ce8 <bb_init>
        data->vt = DLMS_DATA_TYPE_OCTET_STRING;
   2606c:	68fb      	ldr	r3, [r7, #12]
   2606e:	2209      	movs	r2, #9
   26070:	701a      	strb	r2, [r3, #0]
   26072:	e004      	b.n	2607e <var_addBytes+0x46>
    }
    else
    {
        bb_clear(data->byteArr);
   26074:	68fb      	ldr	r3, [r7, #12]
   26076:	689b      	ldr	r3, [r3, #8]
   26078:	4618      	mov	r0, r3
   2607a:	f7dd fb73 	bl	3764 <bb_clear>
    }
    return bb_set(data->byteArr, value, count);
   2607e:	68fb      	ldr	r3, [r7, #12]
   26080:	689b      	ldr	r3, [r3, #8]
   26082:	88fa      	ldrh	r2, [r7, #6]
   26084:	68b9      	ldr	r1, [r7, #8]
   26086:	4618      	mov	r0, r3
   26088:	f7dd fa6a 	bl	3560 <bb_set>
   2608c:	4603      	mov	r3, r0
}
   2608e:	4618      	mov	r0, r3
   26090:	3710      	adds	r7, #16
   26092:	46bd      	mov	sp, r7
   26094:	bd80      	pop	{r7, pc}
   26096:	bf00      	nop

00026098 <var_setString>:

int var_setString(dlmsVARIANT *data, const char* value, unsigned short count)
{
   26098:	b580      	push	{r7, lr}
   2609a:	b084      	sub	sp, #16
   2609c:	af00      	add	r7, sp, #0
   2609e:	60f8      	str	r0, [r7, #12]
   260a0:	60b9      	str	r1, [r7, #8]
   260a2:	4613      	mov	r3, r2
   260a4:	80fb      	strh	r3, [r7, #6]
    var_clear(data);
   260a6:	68f8      	ldr	r0, [r7, #12]
   260a8:	f000 f84e 	bl	26148 <var_clear>
    if (count < 0)
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (data->vt != DLMS_DATA_TYPE_STRING)
   260ac:	68fb      	ldr	r3, [r7, #12]
   260ae:	781b      	ldrb	r3, [r3, #0]
   260b0:	2b0a      	cmp	r3, #10
   260b2:	d011      	beq.n	260d8 <var_setString+0x40>
    {
        var_clear(data);
   260b4:	68f8      	ldr	r0, [r7, #12]
   260b6:	f000 f847 	bl	26148 <var_clear>
        data->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   260ba:	200c      	movs	r0, #12
   260bc:	f003 fcc2 	bl	29a44 <malloc>
   260c0:	4603      	mov	r3, r0
   260c2:	461a      	mov	r2, r3
   260c4:	68fb      	ldr	r3, [r7, #12]
   260c6:	609a      	str	r2, [r3, #8]
        bb_init(data->strVal);
   260c8:	68fb      	ldr	r3, [r7, #12]
   260ca:	689b      	ldr	r3, [r3, #8]
   260cc:	4618      	mov	r0, r3
   260ce:	f7dc fe0b 	bl	2ce8 <bb_init>
        data->vt = DLMS_DATA_TYPE_STRING;
   260d2:	68fb      	ldr	r3, [r7, #12]
   260d4:	220a      	movs	r2, #10
   260d6:	701a      	strb	r2, [r3, #0]
    }
    bb_set(data->strVal, (const unsigned char*)value, count);
   260d8:	68fb      	ldr	r3, [r7, #12]
   260da:	689b      	ldr	r3, [r3, #8]
   260dc:	88fa      	ldrh	r2, [r7, #6]
   260de:	68b9      	ldr	r1, [r7, #8]
   260e0:	4618      	mov	r0, r3
   260e2:	f7dd fa3d 	bl	3560 <bb_set>
    return DLMS_ERROR_CODE_OK;
   260e6:	2300      	movs	r3, #0
}
   260e8:	4618      	mov	r0, r3
   260ea:	3710      	adds	r7, #16
   260ec:	46bd      	mov	sp, r7
   260ee:	bd80      	pop	{r7, pc}

000260f0 <var_addOctetString>:

int var_addOctetString(
    dlmsVARIANT *data,
    gxByteBuffer* ba)
{
   260f0:	b580      	push	{r7, lr}
   260f2:	b082      	sub	sp, #8
   260f4:	af00      	add	r7, sp, #0
   260f6:	6078      	str	r0, [r7, #4]
   260f8:	6039      	str	r1, [r7, #0]
    var_clear(data);
   260fa:	6878      	ldr	r0, [r7, #4]
   260fc:	f000 f824 	bl	26148 <var_clear>
    return var_addBytes(data, ba->data + ba->position, (unsigned short)(ba->size - ba->position));
   26100:	683b      	ldr	r3, [r7, #0]
   26102:	681b      	ldr	r3, [r3, #0]
   26104:	683a      	ldr	r2, [r7, #0]
   26106:	8912      	ldrh	r2, [r2, #8]
   26108:	1899      	adds	r1, r3, r2
   2610a:	683b      	ldr	r3, [r7, #0]
   2610c:	88da      	ldrh	r2, [r3, #6]
   2610e:	683b      	ldr	r3, [r7, #0]
   26110:	891b      	ldrh	r3, [r3, #8]
   26112:	1ad3      	subs	r3, r2, r3
   26114:	b29b      	uxth	r3, r3
   26116:	461a      	mov	r2, r3
   26118:	6878      	ldr	r0, [r7, #4]
   2611a:	f7ff ff8d 	bl	26038 <var_addBytes>
   2611e:	4603      	mov	r3, r0
}
   26120:	4618      	mov	r0, r3
   26122:	3708      	adds	r7, #8
   26124:	46bd      	mov	sp, r7
   26126:	bd80      	pop	{r7, pc}

00026128 <var_init>:
    return var_addBytes(data, ba->data + index, count);
}

//Initialize variant.
int var_init(dlmsVARIANT *data)
{
   26128:	b480      	push	{r7}
   2612a:	b083      	sub	sp, #12
   2612c:	af00      	add	r7, sp, #0
   2612e:	6078      	str	r0, [r7, #4]
    data->vt = DLMS_DATA_TYPE_NONE;
   26130:	687b      	ldr	r3, [r7, #4]
   26132:	2200      	movs	r2, #0
   26134:	701a      	strb	r2, [r3, #0]
    data->byteArr = NULL;
   26136:	687b      	ldr	r3, [r7, #4]
   26138:	2200      	movs	r2, #0
   2613a:	609a      	str	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   2613c:	2300      	movs	r3, #0
}
   2613e:	4618      	mov	r0, r3
   26140:	370c      	adds	r7, #12
   26142:	46bd      	mov	sp, r7
   26144:	bc80      	pop	{r7}
   26146:	4770      	bx	lr

00026148 <var_clear>:
    data->Arr->data = (void**)arr;
}

//Clear variant.
int var_clear(dlmsVARIANT *data)
{
   26148:	b590      	push	{r4, r7, lr}
   2614a:	b083      	sub	sp, #12
   2614c:	af00      	add	r7, sp, #0
   2614e:	6078      	str	r0, [r7, #4]
    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING ||
   26150:	687b      	ldr	r3, [r7, #4]
   26152:	781b      	ldrb	r3, [r3, #0]
   26154:	2b09      	cmp	r3, #9
   26156:	d003      	beq.n	26160 <var_clear+0x18>
        data->vt == DLMS_DATA_TYPE_COMPACT_ARRAY)
   26158:	687b      	ldr	r3, [r7, #4]
   2615a:	781b      	ldrb	r3, [r3, #0]
}

//Clear variant.
int var_clear(dlmsVARIANT *data)
{
    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING ||
   2615c:	2b13      	cmp	r3, #19
   2615e:	d119      	bne.n	26194 <var_clear+0x4c>
        data->vt == DLMS_DATA_TYPE_COMPACT_ARRAY)
    {
        if (data->byteArr != NULL)
   26160:	687b      	ldr	r3, [r7, #4]
   26162:	689b      	ldr	r3, [r3, #8]
   26164:	2b00      	cmp	r3, #0
   26166:	d06a      	beq.n	2623e <var_clear+0xf6>
        {
            bb_clear(data->byteArr);
   26168:	687b      	ldr	r3, [r7, #4]
   2616a:	689b      	ldr	r3, [r3, #8]
   2616c:	4618      	mov	r0, r3
   2616e:	f7dd faf9 	bl	3764 <bb_clear>
            if (!bb_isAttached(data->byteArr))
   26172:	687b      	ldr	r3, [r7, #4]
   26174:	689b      	ldr	r3, [r3, #8]
   26176:	4618      	mov	r0, r3
   26178:	f7dc fd88 	bl	2c8c <bb_isAttached>
   2617c:	4603      	mov	r3, r0
   2617e:	2b00      	cmp	r3, #0
   26180:	d104      	bne.n	2618c <var_clear+0x44>
            {
                gxfree(data->byteArr);
   26182:	687b      	ldr	r3, [r7, #4]
   26184:	689b      	ldr	r3, [r3, #8]
   26186:	4618      	mov	r0, r3
   26188:	f003 fc64 	bl	29a54 <free>
            }
            data->byteArr = NULL;
   2618c:	687b      	ldr	r3, [r7, #4]
   2618e:	2200      	movs	r2, #0
   26190:	609a      	str	r2, [r3, #8]
int var_clear(dlmsVARIANT *data)
{
    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING ||
        data->vt == DLMS_DATA_TYPE_COMPACT_ARRAY)
    {
        if (data->byteArr != NULL)
   26192:	e054      	b.n	2623e <var_clear+0xf6>
                gxfree(data->byteArr);
            }
            data->byteArr = NULL;
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_STRING)
   26194:	687b      	ldr	r3, [r7, #4]
   26196:	781b      	ldrb	r3, [r3, #0]
   26198:	2b0a      	cmp	r3, #10
   2619a:	d10e      	bne.n	261ba <var_clear+0x72>
    {
        if (data->strVal != NULL)
   2619c:	687b      	ldr	r3, [r7, #4]
   2619e:	689b      	ldr	r3, [r3, #8]
   261a0:	2b00      	cmp	r3, #0
   261a2:	d04c      	beq.n	2623e <var_clear+0xf6>
        {
            bb_clear(data->strVal);
   261a4:	687b      	ldr	r3, [r7, #4]
   261a6:	689b      	ldr	r3, [r3, #8]
   261a8:	4618      	mov	r0, r3
   261aa:	f7dd fadb 	bl	3764 <bb_clear>
            gxfree(data->strVal);
   261ae:	687b      	ldr	r3, [r7, #4]
   261b0:	689b      	ldr	r3, [r3, #8]
   261b2:	4618      	mov	r0, r3
   261b4:	f003 fc4e 	bl	29a54 <free>
   261b8:	e041      	b.n	2623e <var_clear+0xf6>
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_ARRAY ||
   261ba:	687b      	ldr	r3, [r7, #4]
   261bc:	781b      	ldrb	r3, [r3, #0]
   261be:	2b01      	cmp	r3, #1
   261c0:	d003      	beq.n	261ca <var_clear+0x82>
        data->vt == DLMS_DATA_TYPE_STRUCTURE)
   261c2:	687b      	ldr	r3, [r7, #4]
   261c4:	781b      	ldrb	r3, [r3, #0]
        {
            bb_clear(data->strVal);
            gxfree(data->strVal);
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_ARRAY ||
   261c6:	2b02      	cmp	r3, #2
   261c8:	d10e      	bne.n	261e8 <var_clear+0xa0>
        data->vt == DLMS_DATA_TYPE_STRUCTURE)
    {
        if (data->Arr != NULL)
   261ca:	687b      	ldr	r3, [r7, #4]
   261cc:	689b      	ldr	r3, [r3, #8]
   261ce:	2b00      	cmp	r3, #0
   261d0:	d035      	beq.n	2623e <var_clear+0xf6>
        {
            va_clear(data->Arr);
   261d2:	687b      	ldr	r3, [r7, #4]
   261d4:	689b      	ldr	r3, [r3, #8]
   261d6:	4618      	mov	r0, r3
   261d8:	f000 fdb4 	bl	26d44 <va_clear>
            gxfree(data->Arr);
   261dc:	687b      	ldr	r3, [r7, #4]
   261de:	689b      	ldr	r3, [r3, #8]
   261e0:	4618      	mov	r0, r3
   261e2:	f003 fc37 	bl	29a54 <free>
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_ARRAY ||
        data->vt == DLMS_DATA_TYPE_STRUCTURE)
    {
        if (data->Arr != NULL)
   261e6:	e02a      	b.n	2623e <var_clear+0xf6>
        {
            va_clear(data->Arr);
            gxfree(data->Arr);
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_BIT_STRING)
   261e8:	687b      	ldr	r3, [r7, #4]
   261ea:	781b      	ldrb	r3, [r3, #0]
   261ec:	2b04      	cmp	r3, #4
   261ee:	d10e      	bne.n	2620e <var_clear+0xc6>
    {
        if (data->bitArr != NULL)
   261f0:	687b      	ldr	r3, [r7, #4]
   261f2:	689b      	ldr	r3, [r3, #8]
   261f4:	2b00      	cmp	r3, #0
   261f6:	d022      	beq.n	2623e <var_clear+0xf6>
        {
            ba_clear(data->bitArr);
   261f8:	687b      	ldr	r3, [r7, #4]
   261fa:	689b      	ldr	r3, [r3, #8]
   261fc:	4618      	mov	r0, r3
   261fe:	f7dc fc83 	bl	2b08 <ba_clear>
            gxfree(data->bitArr);
   26202:	687b      	ldr	r3, [r7, #4]
   26204:	689b      	ldr	r3, [r3, #8]
   26206:	4618      	mov	r0, r3
   26208:	f003 fc24 	bl	29a54 <free>
   2620c:	e017      	b.n	2623e <var_clear+0xf6>
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_DATETIME ||
   2620e:	687b      	ldr	r3, [r7, #4]
   26210:	781b      	ldrb	r3, [r3, #0]
   26212:	2b19      	cmp	r3, #25
   26214:	d007      	beq.n	26226 <var_clear+0xde>
        data->vt == DLMS_DATA_TYPE_DATE ||
   26216:	687b      	ldr	r3, [r7, #4]
   26218:	781b      	ldrb	r3, [r3, #0]
        {
            ba_clear(data->bitArr);
            gxfree(data->bitArr);
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_DATETIME ||
   2621a:	2b1a      	cmp	r3, #26
   2621c:	d003      	beq.n	26226 <var_clear+0xde>
        data->vt == DLMS_DATA_TYPE_DATE ||
        data->vt == DLMS_DATA_TYPE_TIME)
   2621e:	687b      	ldr	r3, [r7, #4]
   26220:	781b      	ldrb	r3, [r3, #0]
            ba_clear(data->bitArr);
            gxfree(data->bitArr);
        }
    }
    else if (data->vt == DLMS_DATA_TYPE_DATETIME ||
        data->vt == DLMS_DATA_TYPE_DATE ||
   26222:	2b1b      	cmp	r3, #27
   26224:	d10b      	bne.n	2623e <var_clear+0xf6>
        data->vt == DLMS_DATA_TYPE_TIME)
    {
        if (data->dateTime != NULL)
   26226:	687b      	ldr	r3, [r7, #4]
   26228:	689b      	ldr	r3, [r3, #8]
   2622a:	2b00      	cmp	r3, #0
   2622c:	d007      	beq.n	2623e <var_clear+0xf6>
        {
            gxfree(data->dateTime);
   2622e:	687b      	ldr	r3, [r7, #4]
   26230:	689b      	ldr	r3, [r3, #8]
   26232:	4618      	mov	r0, r3
   26234:	f003 fc0e 	bl	29a54 <free>
            data->dateTime = NULL;
   26238:	687b      	ldr	r3, [r7, #4]
   2623a:	2200      	movs	r2, #0
   2623c:	609a      	str	r2, [r3, #8]
        }
    }
    data->llVal = 0;
   2623e:	687a      	ldr	r2, [r7, #4]
   26240:	f04f 0300 	mov.w	r3, #0
   26244:	f04f 0400 	mov.w	r4, #0
   26248:	e9c2 3402 	strd	r3, r4, [r2, #8]
    data->vt = DLMS_DATA_TYPE_NONE;
   2624c:	687b      	ldr	r3, [r7, #4]
   2624e:	2200      	movs	r2, #0
   26250:	701a      	strb	r2, [r3, #0]
    return DLMS_ERROR_CODE_OK;
   26252:	2300      	movs	r3, #0
}
   26254:	4618      	mov	r0, r3
   26256:	370c      	adds	r7, #12
   26258:	46bd      	mov	sp, r7
   2625a:	bd90      	pop	{r4, r7, pc}

0002625c <var_getDateTime2>:

int var_getDateTime2(
    gxtime *dateTime,
    gxByteBuffer* ba)
{
   2625c:	b580      	push	{r7, lr}
   2625e:	b084      	sub	sp, #16
   26260:	af00      	add	r7, sp, #0
   26262:	6078      	str	r0, [r7, #4]
   26264:	6039      	str	r1, [r7, #0]
    unsigned short year = 0xFFFF;
   26266:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2626a:	81fb      	strh	r3, [r7, #14]
    //Add year.
    if (dateTime->value.tm_year != -1 && (dateTime->skip & DATETIME_SKIPS_YEAR) == 0)
   2626c:	687b      	ldr	r3, [r7, #4]
   2626e:	699b      	ldr	r3, [r3, #24]
   26270:	f1b3 3fff 	cmp.w	r3, #4294967295
   26274:	d00b      	beq.n	2628e <var_getDateTime2+0x32>
   26276:	687b      	ldr	r3, [r7, #4]
   26278:	781b      	ldrb	r3, [r3, #0]
   2627a:	f003 0301 	and.w	r3, r3, #1
   2627e:	2b00      	cmp	r3, #0
   26280:	d105      	bne.n	2628e <var_getDateTime2+0x32>
    {
        year = (unsigned short)(1900 + dateTime->value.tm_year);
   26282:	687b      	ldr	r3, [r7, #4]
   26284:	699b      	ldr	r3, [r3, #24]
   26286:	b29b      	uxth	r3, r3
   26288:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   2628c:	81fb      	strh	r3, [r7, #14]
    }
    bb_setUInt16(ba, year);
   2628e:	89fb      	ldrh	r3, [r7, #14]
   26290:	4619      	mov	r1, r3
   26292:	6838      	ldr	r0, [r7, #0]
   26294:	f7dc fe50 	bl	2f38 <bb_setUInt16>
    //Add month
    if (dateTime->daylightSavingsBegin)
   26298:	687b      	ldr	r3, [r7, #4]
   2629a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   2629e:	2b00      	cmp	r3, #0
   262a0:	d004      	beq.n	262ac <var_getDateTime2+0x50>
    {
        bb_setUInt8(ba, 0xFE);
   262a2:	21fe      	movs	r1, #254	; 0xfe
   262a4:	6838      	ldr	r0, [r7, #0]
   262a6:	f7dc fdb5 	bl	2e14 <bb_setUInt8>
   262aa:	e022      	b.n	262f2 <var_getDateTime2+0x96>
    }
    else if (dateTime->daylightSavingsEnd)
   262ac:	687b      	ldr	r3, [r7, #4]
   262ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   262b2:	2b00      	cmp	r3, #0
   262b4:	d004      	beq.n	262c0 <var_getDateTime2+0x64>
    {
        bb_setUInt8(ba, 0xFD);
   262b6:	21fd      	movs	r1, #253	; 0xfd
   262b8:	6838      	ldr	r0, [r7, #0]
   262ba:	f7dc fdab 	bl	2e14 <bb_setUInt8>
   262be:	e018      	b.n	262f2 <var_getDateTime2+0x96>
    }
    else if (dateTime->value.tm_mon != -1 && (dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
   262c0:	687b      	ldr	r3, [r7, #4]
   262c2:	695b      	ldr	r3, [r3, #20]
   262c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   262c8:	d00f      	beq.n	262ea <var_getDateTime2+0x8e>
   262ca:	687b      	ldr	r3, [r7, #4]
   262cc:	781b      	ldrb	r3, [r3, #0]
   262ce:	f003 0302 	and.w	r3, r3, #2
   262d2:	2b00      	cmp	r3, #0
   262d4:	d109      	bne.n	262ea <var_getDateTime2+0x8e>
    {
        bb_setUInt8(ba, (unsigned char)(dateTime->value.tm_mon + 1));
   262d6:	687b      	ldr	r3, [r7, #4]
   262d8:	695b      	ldr	r3, [r3, #20]
   262da:	b2db      	uxtb	r3, r3
   262dc:	3301      	adds	r3, #1
   262de:	b2db      	uxtb	r3, r3
   262e0:	4619      	mov	r1, r3
   262e2:	6838      	ldr	r0, [r7, #0]
   262e4:	f7dc fd96 	bl	2e14 <bb_setUInt8>
   262e8:	e003      	b.n	262f2 <var_getDateTime2+0x96>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   262ea:	21ff      	movs	r1, #255	; 0xff
   262ec:	6838      	ldr	r0, [r7, #0]
   262ee:	f7dc fd91 	bl	2e14 <bb_setUInt8>
    }
    //Add day
    if (dateTime->value.tm_mday != -1 && (dateTime->skip & DATETIME_SKIPS_DAY) == 0)
   262f2:	687b      	ldr	r3, [r7, #4]
   262f4:	691b      	ldr	r3, [r3, #16]
   262f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   262fa:	d00d      	beq.n	26318 <var_getDateTime2+0xbc>
   262fc:	687b      	ldr	r3, [r7, #4]
   262fe:	781b      	ldrb	r3, [r3, #0]
   26300:	f003 0304 	and.w	r3, r3, #4
   26304:	2b00      	cmp	r3, #0
   26306:	d107      	bne.n	26318 <var_getDateTime2+0xbc>
    {
        bb_setUInt8(ba, (unsigned char)dateTime->value.tm_mday);
   26308:	687b      	ldr	r3, [r7, #4]
   2630a:	691b      	ldr	r3, [r3, #16]
   2630c:	b2db      	uxtb	r3, r3
   2630e:	4619      	mov	r1, r3
   26310:	6838      	ldr	r0, [r7, #0]
   26312:	f7dc fd7f 	bl	2e14 <bb_setUInt8>
   26316:	e003      	b.n	26320 <var_getDateTime2+0xc4>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   26318:	21ff      	movs	r1, #255	; 0xff
   2631a:	6838      	ldr	r0, [r7, #0]
   2631c:	f7dc fd7a 	bl	2e14 <bb_setUInt8>
    }
    //Add week day
    if (dateTime->value.tm_wday != -1 && (dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
   26320:	687b      	ldr	r3, [r7, #4]
   26322:	69db      	ldr	r3, [r3, #28]
   26324:	f1b3 3fff 	cmp.w	r3, #4294967295
   26328:	d013      	beq.n	26352 <var_getDateTime2+0xf6>
   2632a:	687b      	ldr	r3, [r7, #4]
   2632c:	781b      	ldrb	r3, [r3, #0]
   2632e:	f003 0308 	and.w	r3, r3, #8
   26332:	2b00      	cmp	r3, #0
   26334:	d10d      	bne.n	26352 <var_getDateTime2+0xf6>
    {
        unsigned char val = (unsigned char)dateTime->value.tm_wday;
   26336:	687b      	ldr	r3, [r7, #4]
   26338:	69db      	ldr	r3, [r3, #28]
   2633a:	737b      	strb	r3, [r7, #13]
        //If Sunday.
        if (val == 0)
   2633c:	7b7b      	ldrb	r3, [r7, #13]
   2633e:	2b00      	cmp	r3, #0
   26340:	d101      	bne.n	26346 <var_getDateTime2+0xea>
        {
            val = 7;
   26342:	2307      	movs	r3, #7
   26344:	737b      	strb	r3, [r7, #13]
        }
        bb_setUInt8(ba, val);
   26346:	7b7b      	ldrb	r3, [r7, #13]
   26348:	4619      	mov	r1, r3
   2634a:	6838      	ldr	r0, [r7, #0]
   2634c:	f7dc fd62 	bl	2e14 <bb_setUInt8>
    {
        bb_setUInt8(ba, 0xFF);
    }
    //Add week day
    if (dateTime->value.tm_wday != -1 && (dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
    {
   26350:	e003      	b.n	2635a <var_getDateTime2+0xfe>
        }
        bb_setUInt8(ba, val);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   26352:	21ff      	movs	r1, #255	; 0xff
   26354:	6838      	ldr	r0, [r7, #0]
   26356:	f7dc fd5d 	bl	2e14 <bb_setUInt8>
    }

    //Add Hours
    if (dateTime->value.tm_hour != -1 && (dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
   2635a:	687b      	ldr	r3, [r7, #4]
   2635c:	68db      	ldr	r3, [r3, #12]
   2635e:	f1b3 3fff 	cmp.w	r3, #4294967295
   26362:	d00d      	beq.n	26380 <var_getDateTime2+0x124>
   26364:	687b      	ldr	r3, [r7, #4]
   26366:	781b      	ldrb	r3, [r3, #0]
   26368:	f003 0310 	and.w	r3, r3, #16
   2636c:	2b00      	cmp	r3, #0
   2636e:	d107      	bne.n	26380 <var_getDateTime2+0x124>
    {
        bb_setUInt8(ba, (unsigned char)dateTime->value.tm_hour);
   26370:	687b      	ldr	r3, [r7, #4]
   26372:	68db      	ldr	r3, [r3, #12]
   26374:	b2db      	uxtb	r3, r3
   26376:	4619      	mov	r1, r3
   26378:	6838      	ldr	r0, [r7, #0]
   2637a:	f7dc fd4b 	bl	2e14 <bb_setUInt8>
   2637e:	e003      	b.n	26388 <var_getDateTime2+0x12c>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   26380:	21ff      	movs	r1, #255	; 0xff
   26382:	6838      	ldr	r0, [r7, #0]
   26384:	f7dc fd46 	bl	2e14 <bb_setUInt8>
    }
    //Add Minutes
    if (dateTime->value.tm_min != -1 && (dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
   26388:	687b      	ldr	r3, [r7, #4]
   2638a:	689b      	ldr	r3, [r3, #8]
   2638c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26390:	d00d      	beq.n	263ae <var_getDateTime2+0x152>
   26392:	687b      	ldr	r3, [r7, #4]
   26394:	781b      	ldrb	r3, [r3, #0]
   26396:	f003 0320 	and.w	r3, r3, #32
   2639a:	2b00      	cmp	r3, #0
   2639c:	d107      	bne.n	263ae <var_getDateTime2+0x152>
    {
        bb_setUInt8(ba, (unsigned char)dateTime->value.tm_min);
   2639e:	687b      	ldr	r3, [r7, #4]
   263a0:	689b      	ldr	r3, [r3, #8]
   263a2:	b2db      	uxtb	r3, r3
   263a4:	4619      	mov	r1, r3
   263a6:	6838      	ldr	r0, [r7, #0]
   263a8:	f7dc fd34 	bl	2e14 <bb_setUInt8>
   263ac:	e003      	b.n	263b6 <var_getDateTime2+0x15a>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   263ae:	21ff      	movs	r1, #255	; 0xff
   263b0:	6838      	ldr	r0, [r7, #0]
   263b2:	f7dc fd2f 	bl	2e14 <bb_setUInt8>
    }
    //Add seconds.
    if (dateTime->value.tm_sec != -1 && (dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
   263b6:	687b      	ldr	r3, [r7, #4]
   263b8:	685b      	ldr	r3, [r3, #4]
   263ba:	f1b3 3fff 	cmp.w	r3, #4294967295
   263be:	d00d      	beq.n	263dc <var_getDateTime2+0x180>
   263c0:	687b      	ldr	r3, [r7, #4]
   263c2:	781b      	ldrb	r3, [r3, #0]
   263c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   263c8:	2b00      	cmp	r3, #0
   263ca:	d107      	bne.n	263dc <var_getDateTime2+0x180>
    {
        bb_setUInt8(ba, (unsigned char)dateTime->value.tm_sec);
   263cc:	687b      	ldr	r3, [r7, #4]
   263ce:	685b      	ldr	r3, [r3, #4]
   263d0:	b2db      	uxtb	r3, r3
   263d2:	4619      	mov	r1, r3
   263d4:	6838      	ldr	r0, [r7, #0]
   263d6:	f7dc fd1d 	bl	2e14 <bb_setUInt8>
   263da:	e003      	b.n	263e4 <var_getDateTime2+0x188>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   263dc:	21ff      	movs	r1, #255	; 0xff
   263de:	6838      	ldr	r0, [r7, #0]
   263e0:	f7dc fd18 	bl	2e14 <bb_setUInt8>
    //Add ms.
#ifdef DLMS_ITALIAN_STANDARD
    //Italian standard uses 0 for ms.
    bb_setUInt8(ba, 0x00);
#else
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
   263e4:	687b      	ldr	r3, [r7, #4]
   263e6:	781b      	ldrb	r3, [r3, #0]
   263e8:	b25b      	sxtb	r3, r3
   263ea:	2b00      	cmp	r3, #0
   263ec:	db04      	blt.n	263f8 <var_getDateTime2+0x19c>
    {
        bb_setUInt8(ba, 0x00);
   263ee:	2100      	movs	r1, #0
   263f0:	6838      	ldr	r0, [r7, #0]
   263f2:	f7dc fd0f 	bl	2e14 <bb_setUInt8>
   263f6:	e003      	b.n	26400 <var_getDateTime2+0x1a4>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   263f8:	21ff      	movs	r1, #255	; 0xff
   263fa:	6838      	ldr	r0, [r7, #0]
   263fc:	f7dc fd0a 	bl	2e14 <bb_setUInt8>
    }
#endif //DLMS_ITALIAN_STANDARD

    //Add Deviation
    if (dateTime->value.tm_year == -1 || (dateTime->skip & DATETIME_SKIPS_DEVITATION) != 0)
   26400:	687b      	ldr	r3, [r7, #4]
   26402:	699b      	ldr	r3, [r3, #24]
   26404:	f1b3 3fff 	cmp.w	r3, #4294967295
   26408:	d005      	beq.n	26416 <var_getDateTime2+0x1ba>
   2640a:	687b      	ldr	r3, [r7, #4]
   2640c:	781b      	ldrb	r3, [r3, #0]
   2640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   26412:	2b00      	cmp	r3, #0
   26414:	d004      	beq.n	26420 <var_getDateTime2+0x1c4>
    {
        bb_setInt16(ba, 0x8000);//(not specified)
   26416:	4913      	ldr	r1, [pc, #76]	; (26464 <var_getDateTime2+0x208>)
   26418:	6838      	ldr	r0, [r7, #0]
   2641a:	f7dd f86f 	bl	34fc <bb_setInt16>
   2641e:	e006      	b.n	2642e <var_getDateTime2+0x1d2>
    }
    else
    {
        bb_setInt16(ba, dateTime->deviation);
   26420:	687b      	ldr	r3, [r7, #4]
   26422:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
   26426:	4619      	mov	r1, r3
   26428:	6838      	ldr	r0, [r7, #0]
   2642a:	f7dd f867 	bl	34fc <bb_setInt16>
    }
    //Add clock status
    if (dateTime->value.tm_isdst)
   2642e:	687b      	ldr	r3, [r7, #4]
   26430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26432:	2b00      	cmp	r3, #0
   26434:	d00a      	beq.n	2644c <var_getDateTime2+0x1f0>
    {
        bb_setUInt8(ba, dateTime->status | DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE);
   26436:	687b      	ldr	r3, [r7, #4]
   26438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2643c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26440:	b2db      	uxtb	r3, r3
   26442:	4619      	mov	r1, r3
   26444:	6838      	ldr	r0, [r7, #0]
   26446:	f7dc fce5 	bl	2e14 <bb_setUInt8>
   2644a:	e006      	b.n	2645a <var_getDateTime2+0x1fe>
    }
    else
    {
        bb_setUInt8(ba, dateTime->status);
   2644c:	687b      	ldr	r3, [r7, #4]
   2644e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   26452:	4619      	mov	r1, r3
   26454:	6838      	ldr	r0, [r7, #0]
   26456:	f7dc fcdd 	bl	2e14 <bb_setUInt8>
    }
    return 0;
   2645a:	2300      	movs	r3, #0
}
   2645c:	4618      	mov	r0, r3
   2645e:	3710      	adds	r7, #16
   26460:	46bd      	mov	sp, r7
   26462:	bd80      	pop	{r7, pc}
   26464:	ffff8000 	.word	0xffff8000

00026468 <var_getDate>:

int var_getDate(
    gxtime * date,
    gxByteBuffer* ba)
{
   26468:	b580      	push	{r7, lr}
   2646a:	b084      	sub	sp, #16
   2646c:	af00      	add	r7, sp, #0
   2646e:	6078      	str	r0, [r7, #4]
   26470:	6039      	str	r1, [r7, #0]
    unsigned short year = 0xFFFF;
   26472:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26476:	81fb      	strh	r3, [r7, #14]
    //Add year.
    if (date->value.tm_year != -1 && (date->skip & DATETIME_SKIPS_YEAR) == 0)
   26478:	687b      	ldr	r3, [r7, #4]
   2647a:	699b      	ldr	r3, [r3, #24]
   2647c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26480:	d00b      	beq.n	2649a <var_getDate+0x32>
   26482:	687b      	ldr	r3, [r7, #4]
   26484:	781b      	ldrb	r3, [r3, #0]
   26486:	f003 0301 	and.w	r3, r3, #1
   2648a:	2b00      	cmp	r3, #0
   2648c:	d105      	bne.n	2649a <var_getDate+0x32>
    {
        year = (unsigned short)(1900 + date->value.tm_year);
   2648e:	687b      	ldr	r3, [r7, #4]
   26490:	699b      	ldr	r3, [r3, #24]
   26492:	b29b      	uxth	r3, r3
   26494:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   26498:	81fb      	strh	r3, [r7, #14]
    }
    bb_setUInt16(ba, year);
   2649a:	89fb      	ldrh	r3, [r7, #14]
   2649c:	4619      	mov	r1, r3
   2649e:	6838      	ldr	r0, [r7, #0]
   264a0:	f7dc fd4a 	bl	2f38 <bb_setUInt16>
    //Add month
    if (date->daylightSavingsBegin)
   264a4:	687b      	ldr	r3, [r7, #4]
   264a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   264aa:	2b00      	cmp	r3, #0
   264ac:	d004      	beq.n	264b8 <var_getDate+0x50>
    {
        bb_setUInt8(ba, 0xFE);
   264ae:	21fe      	movs	r1, #254	; 0xfe
   264b0:	6838      	ldr	r0, [r7, #0]
   264b2:	f7dc fcaf 	bl	2e14 <bb_setUInt8>
   264b6:	e022      	b.n	264fe <var_getDate+0x96>
    }
    else if (date->daylightSavingsEnd)
   264b8:	687b      	ldr	r3, [r7, #4]
   264ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   264be:	2b00      	cmp	r3, #0
   264c0:	d004      	beq.n	264cc <var_getDate+0x64>
    {
        bb_setUInt8(ba, 0xFD);
   264c2:	21fd      	movs	r1, #253	; 0xfd
   264c4:	6838      	ldr	r0, [r7, #0]
   264c6:	f7dc fca5 	bl	2e14 <bb_setUInt8>
   264ca:	e018      	b.n	264fe <var_getDate+0x96>
    }
    else if (date->value.tm_mon != -1 && (date->skip & DATETIME_SKIPS_MONTH) == 0)
   264cc:	687b      	ldr	r3, [r7, #4]
   264ce:	695b      	ldr	r3, [r3, #20]
   264d0:	f1b3 3fff 	cmp.w	r3, #4294967295
   264d4:	d00f      	beq.n	264f6 <var_getDate+0x8e>
   264d6:	687b      	ldr	r3, [r7, #4]
   264d8:	781b      	ldrb	r3, [r3, #0]
   264da:	f003 0302 	and.w	r3, r3, #2
   264de:	2b00      	cmp	r3, #0
   264e0:	d109      	bne.n	264f6 <var_getDate+0x8e>
    {
        bb_setUInt8(ba, (unsigned char)(date->value.tm_mon + 1));
   264e2:	687b      	ldr	r3, [r7, #4]
   264e4:	695b      	ldr	r3, [r3, #20]
   264e6:	b2db      	uxtb	r3, r3
   264e8:	3301      	adds	r3, #1
   264ea:	b2db      	uxtb	r3, r3
   264ec:	4619      	mov	r1, r3
   264ee:	6838      	ldr	r0, [r7, #0]
   264f0:	f7dc fc90 	bl	2e14 <bb_setUInt8>
   264f4:	e003      	b.n	264fe <var_getDate+0x96>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   264f6:	21ff      	movs	r1, #255	; 0xff
   264f8:	6838      	ldr	r0, [r7, #0]
   264fa:	f7dc fc8b 	bl	2e14 <bb_setUInt8>
    }
    //Add day
    if (date->value.tm_mday != -1 && (date->skip & DATETIME_SKIPS_DAY) == 0)
   264fe:	687b      	ldr	r3, [r7, #4]
   26500:	691b      	ldr	r3, [r3, #16]
   26502:	f1b3 3fff 	cmp.w	r3, #4294967295
   26506:	d00d      	beq.n	26524 <var_getDate+0xbc>
   26508:	687b      	ldr	r3, [r7, #4]
   2650a:	781b      	ldrb	r3, [r3, #0]
   2650c:	f003 0304 	and.w	r3, r3, #4
   26510:	2b00      	cmp	r3, #0
   26512:	d107      	bne.n	26524 <var_getDate+0xbc>
    {
        bb_setUInt8(ba, (unsigned char)date->value.tm_mday);
   26514:	687b      	ldr	r3, [r7, #4]
   26516:	691b      	ldr	r3, [r3, #16]
   26518:	b2db      	uxtb	r3, r3
   2651a:	4619      	mov	r1, r3
   2651c:	6838      	ldr	r0, [r7, #0]
   2651e:	f7dc fc79 	bl	2e14 <bb_setUInt8>
   26522:	e003      	b.n	2652c <var_getDate+0xc4>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   26524:	21ff      	movs	r1, #255	; 0xff
   26526:	6838      	ldr	r0, [r7, #0]
   26528:	f7dc fc74 	bl	2e14 <bb_setUInt8>
    }
    //Add week day
    bb_setUInt8(ba, 0xFF);
   2652c:	21ff      	movs	r1, #255	; 0xff
   2652e:	6838      	ldr	r0, [r7, #0]
   26530:	f7dc fc70 	bl	2e14 <bb_setUInt8>
    return 0;
   26534:	2300      	movs	r3, #0
}
   26536:	4618      	mov	r0, r3
   26538:	3710      	adds	r7, #16
   2653a:	46bd      	mov	sp, r7
   2653c:	bd80      	pop	{r7, pc}
   2653e:	bf00      	nop

00026540 <var_getTime>:

int var_getTime(
    gxtime * date,
    gxByteBuffer* ba)
{
   26540:	b580      	push	{r7, lr}
   26542:	b082      	sub	sp, #8
   26544:	af00      	add	r7, sp, #0
   26546:	6078      	str	r0, [r7, #4]
   26548:	6039      	str	r1, [r7, #0]
    //Add Hours
    if (date->value.tm_hour != -1 && (date->skip & DATETIME_SKIPS_HOUR) == 0)
   2654a:	687b      	ldr	r3, [r7, #4]
   2654c:	68db      	ldr	r3, [r3, #12]
   2654e:	f1b3 3fff 	cmp.w	r3, #4294967295
   26552:	d00d      	beq.n	26570 <var_getTime+0x30>
   26554:	687b      	ldr	r3, [r7, #4]
   26556:	781b      	ldrb	r3, [r3, #0]
   26558:	f003 0310 	and.w	r3, r3, #16
   2655c:	2b00      	cmp	r3, #0
   2655e:	d107      	bne.n	26570 <var_getTime+0x30>
    {
        bb_setUInt8(ba, (unsigned char)date->value.tm_hour);
   26560:	687b      	ldr	r3, [r7, #4]
   26562:	68db      	ldr	r3, [r3, #12]
   26564:	b2db      	uxtb	r3, r3
   26566:	4619      	mov	r1, r3
   26568:	6838      	ldr	r0, [r7, #0]
   2656a:	f7dc fc53 	bl	2e14 <bb_setUInt8>
   2656e:	e003      	b.n	26578 <var_getTime+0x38>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   26570:	21ff      	movs	r1, #255	; 0xff
   26572:	6838      	ldr	r0, [r7, #0]
   26574:	f7dc fc4e 	bl	2e14 <bb_setUInt8>
    }
    //Add Minutes
    if (date->value.tm_min != -1 && (date->skip & DATETIME_SKIPS_MINUTE) == 0)
   26578:	687b      	ldr	r3, [r7, #4]
   2657a:	689b      	ldr	r3, [r3, #8]
   2657c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26580:	d00d      	beq.n	2659e <var_getTime+0x5e>
   26582:	687b      	ldr	r3, [r7, #4]
   26584:	781b      	ldrb	r3, [r3, #0]
   26586:	f003 0320 	and.w	r3, r3, #32
   2658a:	2b00      	cmp	r3, #0
   2658c:	d107      	bne.n	2659e <var_getTime+0x5e>
    {
        bb_setUInt8(ba, (unsigned char)date->value.tm_min);
   2658e:	687b      	ldr	r3, [r7, #4]
   26590:	689b      	ldr	r3, [r3, #8]
   26592:	b2db      	uxtb	r3, r3
   26594:	4619      	mov	r1, r3
   26596:	6838      	ldr	r0, [r7, #0]
   26598:	f7dc fc3c 	bl	2e14 <bb_setUInt8>
   2659c:	e003      	b.n	265a6 <var_getTime+0x66>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   2659e:	21ff      	movs	r1, #255	; 0xff
   265a0:	6838      	ldr	r0, [r7, #0]
   265a2:	f7dc fc37 	bl	2e14 <bb_setUInt8>
    }
    //Add seconds.
    if (date->value.tm_sec != -1 && (date->skip & DATETIME_SKIPS_SECOND) == 0)
   265a6:	687b      	ldr	r3, [r7, #4]
   265a8:	685b      	ldr	r3, [r3, #4]
   265aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   265ae:	d00d      	beq.n	265cc <var_getTime+0x8c>
   265b0:	687b      	ldr	r3, [r7, #4]
   265b2:	781b      	ldrb	r3, [r3, #0]
   265b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   265b8:	2b00      	cmp	r3, #0
   265ba:	d107      	bne.n	265cc <var_getTime+0x8c>
    {
        bb_setUInt8(ba, (unsigned char)date->value.tm_sec);
   265bc:	687b      	ldr	r3, [r7, #4]
   265be:	685b      	ldr	r3, [r3, #4]
   265c0:	b2db      	uxtb	r3, r3
   265c2:	4619      	mov	r1, r3
   265c4:	6838      	ldr	r0, [r7, #0]
   265c6:	f7dc fc25 	bl	2e14 <bb_setUInt8>
   265ca:	e003      	b.n	265d4 <var_getTime+0x94>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   265cc:	21ff      	movs	r1, #255	; 0xff
   265ce:	6838      	ldr	r0, [r7, #0]
   265d0:	f7dc fc20 	bl	2e14 <bb_setUInt8>
    }
    //Add ms.
    if ((date->skip & DATETIME_SKIPS_MS) == 0)
   265d4:	687b      	ldr	r3, [r7, #4]
   265d6:	781b      	ldrb	r3, [r3, #0]
   265d8:	b25b      	sxtb	r3, r3
   265da:	2b00      	cmp	r3, #0
   265dc:	db04      	blt.n	265e8 <var_getTime+0xa8>
    {
        bb_setUInt8(ba, 0);
   265de:	2100      	movs	r1, #0
   265e0:	6838      	ldr	r0, [r7, #0]
   265e2:	f7dc fc17 	bl	2e14 <bb_setUInt8>
   265e6:	e003      	b.n	265f0 <var_getTime+0xb0>
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
   265e8:	21ff      	movs	r1, #255	; 0xff
   265ea:	6838      	ldr	r0, [r7, #0]
   265ec:	f7dc fc12 	bl	2e14 <bb_setUInt8>
    }
    return 0;
   265f0:	2300      	movs	r3, #0
}
   265f2:	4618      	mov	r0, r3
   265f4:	3708      	adds	r7, #8
   265f6:	46bd      	mov	sp, r7
   265f8:	bd80      	pop	{r7, pc}
   265fa:	bf00      	nop

000265fc <var_getBytes>:

//Get bytes from variant value.
int var_getBytes(
    dlmsVARIANT *data,
    gxByteBuffer* ba)
{
   265fc:	b580      	push	{r7, lr}
   265fe:	b082      	sub	sp, #8
   26600:	af00      	add	r7, sp, #0
   26602:	6078      	str	r0, [r7, #4]
   26604:	6039      	str	r1, [r7, #0]
    return var_getBytes2(data, data->vt, ba);
   26606:	687b      	ldr	r3, [r7, #4]
   26608:	781b      	ldrb	r3, [r3, #0]
   2660a:	683a      	ldr	r2, [r7, #0]
   2660c:	4619      	mov	r1, r3
   2660e:	6878      	ldr	r0, [r7, #4]
   26610:	f000 f85a 	bl	266c8 <var_getBytes2>
   26614:	4603      	mov	r3, r0
}
   26616:	4618      	mov	r0, r3
   26618:	3708      	adds	r7, #8
   2661a:	46bd      	mov	sp, r7
   2661c:	bd80      	pop	{r7, pc}
   2661e:	bf00      	nop

00026620 <var_setOctetString>:
*            Byte buffer where data is write.
* value
*            Added value.
*/
int var_setOctetString(gxByteBuffer* buff, dlmsVARIANT* value)
{
   26620:	b580      	push	{r7, lr}
   26622:	b086      	sub	sp, #24
   26624:	af00      	add	r7, sp, #0
   26626:	6078      	str	r0, [r7, #4]
   26628:	6039      	str	r1, [r7, #0]
    if (value->vt == DLMS_DATA_TYPE_STRING)
   2662a:	683b      	ldr	r3, [r7, #0]
   2662c:	781b      	ldrb	r3, [r3, #0]
   2662e:	2b0a      	cmp	r3, #10
   26630:	d11a      	bne.n	26668 <var_setOctetString+0x48>
    {
        gxByteBuffer bb;
        bb_init(&bb);
   26632:	f107 030c 	add.w	r3, r7, #12
   26636:	4618      	mov	r0, r3
   26638:	f7dc fb56 	bl	2ce8 <bb_init>
        bb_addHexString(&bb, (char*)value->strVal->data);
   2663c:	683b      	ldr	r3, [r7, #0]
   2663e:	689b      	ldr	r3, [r3, #8]
   26640:	681a      	ldr	r2, [r3, #0]
   26642:	f107 030c 	add.w	r3, r7, #12
   26646:	4611      	mov	r1, r2
   26648:	4618      	mov	r0, r3
   2664a:	f7dd fb6d 	bl	3d28 <bb_addHexString>
        hlp_setObjectCount(bb.size, buff);
   2664e:	8a7b      	ldrh	r3, [r7, #18]
   26650:	6879      	ldr	r1, [r7, #4]
   26652:	4618      	mov	r0, r3
   26654:	f7fb f942 	bl	218dc <hlp_setObjectCount>
        bb_set2(buff, &bb, 0, bb.size);
   26658:	8a7b      	ldrh	r3, [r7, #18]
   2665a:	f107 010c 	add.w	r1, r7, #12
   2665e:	2200      	movs	r2, #0
   26660:	6878      	ldr	r0, [r7, #4]
   26662:	f7dc ffdd 	bl	3620 <bb_set2>
   26666:	e02a      	b.n	266be <var_setOctetString+0x9e>
    }
    else if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   26668:	683b      	ldr	r3, [r7, #0]
   2666a:	781b      	ldrb	r3, [r3, #0]
   2666c:	2b09      	cmp	r3, #9
   2666e:	d11a      	bne.n	266a6 <var_setOctetString+0x86>
    {
        if (value->byteArr == NULL)
   26670:	683b      	ldr	r3, [r7, #0]
   26672:	689b      	ldr	r3, [r3, #8]
   26674:	2b00      	cmp	r3, #0
   26676:	d104      	bne.n	26682 <var_setOctetString+0x62>
        {
            hlp_setObjectCount(0, buff);
   26678:	6879      	ldr	r1, [r7, #4]
   2667a:	2000      	movs	r0, #0
   2667c:	f7fb f92e 	bl	218dc <hlp_setObjectCount>
   26680:	e01d      	b.n	266be <var_setOctetString+0x9e>
        }
        else
        {
            hlp_setObjectCount(value->byteArr->size, buff);
   26682:	683b      	ldr	r3, [r7, #0]
   26684:	689b      	ldr	r3, [r3, #8]
   26686:	88db      	ldrh	r3, [r3, #6]
   26688:	6879      	ldr	r1, [r7, #4]
   2668a:	4618      	mov	r0, r3
   2668c:	f7fb f926 	bl	218dc <hlp_setObjectCount>
            bb_set(buff, value->byteArr->data, value->byteArr->size);
   26690:	683b      	ldr	r3, [r7, #0]
   26692:	689b      	ldr	r3, [r3, #8]
   26694:	6819      	ldr	r1, [r3, #0]
   26696:	683b      	ldr	r3, [r7, #0]
   26698:	689b      	ldr	r3, [r3, #8]
   2669a:	88db      	ldrh	r3, [r3, #6]
   2669c:	461a      	mov	r2, r3
   2669e:	6878      	ldr	r0, [r7, #4]
   266a0:	f7dc ff5e 	bl	3560 <bb_set>
   266a4:	e00b      	b.n	266be <var_setOctetString+0x9e>
        }
    }
    else if (value->vt == DLMS_DATA_TYPE_NONE)
   266a6:	683b      	ldr	r3, [r7, #0]
   266a8:	781b      	ldrb	r3, [r3, #0]
   266aa:	2b00      	cmp	r3, #0
   266ac:	d104      	bne.n	266b8 <var_setOctetString+0x98>
    {
        hlp_setObjectCount(0, buff);
   266ae:	6879      	ldr	r1, [r7, #4]
   266b0:	2000      	movs	r0, #0
   266b2:	f7fb f913 	bl	218dc <hlp_setObjectCount>
   266b6:	e002      	b.n	266be <var_setOctetString+0x9e>
    }
    else
    {
        // Invalid data type.
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   266b8:	f44f 7381 	mov.w	r3, #258	; 0x102
   266bc:	e000      	b.n	266c0 <var_setOctetString+0xa0>
    }
    return 0;
   266be:	2300      	movs	r3, #0
}
   266c0:	4618      	mov	r0, r3
   266c2:	3718      	adds	r7, #24
   266c4:	46bd      	mov	sp, r7
   266c6:	bd80      	pop	{r7, pc}

000266c8 <var_getBytes2>:
//Returns bytes as Big Endian byteorder.
int var_getBytes2(
    dlmsVARIANT *data,
    DLMS_DATA_TYPE type,
    gxByteBuffer* ba)
{
   266c8:	b590      	push	{r4, r7, lr}
   266ca:	b089      	sub	sp, #36	; 0x24
   266cc:	af00      	add	r7, sp, #0
   266ce:	60f8      	str	r0, [r7, #12]
   266d0:	460b      	mov	r3, r1
   266d2:	607a      	str	r2, [r7, #4]
   266d4:	72fb      	strb	r3, [r7, #11]
    int ret, pos;
    if (type == DLMS_DATA_TYPE_STRUCTURE ||
   266d6:	7afb      	ldrb	r3, [r7, #11]
   266d8:	2b02      	cmp	r3, #2
   266da:	d002      	beq.n	266e2 <var_getBytes2+0x1a>
   266dc:	7afb      	ldrb	r3, [r7, #11]
   266de:	2b01      	cmp	r3, #1
   266e0:	d134      	bne.n	2674c <var_getBytes2+0x84>
        type == DLMS_DATA_TYPE_ARRAY)
    {
        dlmsVARIANT* tmp;
        bb_setUInt8(ba, data->vt);
   266e2:	68fb      	ldr	r3, [r7, #12]
   266e4:	781b      	ldrb	r3, [r3, #0]
   266e6:	4619      	mov	r1, r3
   266e8:	6878      	ldr	r0, [r7, #4]
   266ea:	f7dc fb93 	bl	2e14 <bb_setUInt8>
        hlp_setObjectCount(data->Arr->size, ba);
   266ee:	68fb      	ldr	r3, [r7, #12]
   266f0:	689b      	ldr	r3, [r3, #8]
   266f2:	88db      	ldrh	r3, [r3, #6]
   266f4:	6879      	ldr	r1, [r7, #4]
   266f6:	4618      	mov	r0, r3
   266f8:	f7fb f8f0 	bl	218dc <hlp_setObjectCount>
        for (pos = 0; pos != data->Arr->size; ++pos)
   266fc:	2300      	movs	r3, #0
   266fe:	61bb      	str	r3, [r7, #24]
   26700:	e01b      	b.n	2673a <var_getBytes2+0x72>
        {
            if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != 0)
   26702:	68fb      	ldr	r3, [r7, #12]
   26704:	689b      	ldr	r3, [r3, #8]
   26706:	f107 0214 	add.w	r2, r7, #20
   2670a:	69b9      	ldr	r1, [r7, #24]
   2670c:	4618      	mov	r0, r3
   2670e:	f000 fbad 	bl	26e6c <va_getByIndex>
   26712:	61f8      	str	r0, [r7, #28]
   26714:	69fb      	ldr	r3, [r7, #28]
   26716:	2b00      	cmp	r3, #0
   26718:	d001      	beq.n	2671e <var_getBytes2+0x56>
            {
                return ret;
   2671a:	69fb      	ldr	r3, [r7, #28]
   2671c:	e170      	b.n	26a00 <var_getBytes2+0x338>
            }
            ret = var_getBytes(tmp, ba);
   2671e:	697b      	ldr	r3, [r7, #20]
   26720:	6879      	ldr	r1, [r7, #4]
   26722:	4618      	mov	r0, r3
   26724:	f7ff ff6a 	bl	265fc <var_getBytes>
   26728:	61f8      	str	r0, [r7, #28]
            if (ret != DLMS_ERROR_CODE_OK)
   2672a:	69fb      	ldr	r3, [r7, #28]
   2672c:	2b00      	cmp	r3, #0
   2672e:	d001      	beq.n	26734 <var_getBytes2+0x6c>
            {
                return ret;
   26730:	69fb      	ldr	r3, [r7, #28]
   26732:	e165      	b.n	26a00 <var_getBytes2+0x338>
        type == DLMS_DATA_TYPE_ARRAY)
    {
        dlmsVARIANT* tmp;
        bb_setUInt8(ba, data->vt);
        hlp_setObjectCount(data->Arr->size, ba);
        for (pos = 0; pos != data->Arr->size; ++pos)
   26734:	69bb      	ldr	r3, [r7, #24]
   26736:	3301      	adds	r3, #1
   26738:	61bb      	str	r3, [r7, #24]
   2673a:	68fb      	ldr	r3, [r7, #12]
   2673c:	689b      	ldr	r3, [r3, #8]
   2673e:	88db      	ldrh	r3, [r3, #6]
   26740:	461a      	mov	r2, r3
   26742:	69bb      	ldr	r3, [r7, #24]
   26744:	429a      	cmp	r2, r3
   26746:	d1dc      	bne.n	26702 <var_getBytes2+0x3a>
            if (ret != DLMS_ERROR_CODE_OK)
            {
                return ret;
            }
        }
        return 0;
   26748:	2300      	movs	r3, #0
   2674a:	e159      	b.n	26a00 <var_getBytes2+0x338>
    }
    if ((ret = bb_setUInt8(ba, type)) != 0)
   2674c:	7afb      	ldrb	r3, [r7, #11]
   2674e:	4619      	mov	r1, r3
   26750:	6878      	ldr	r0, [r7, #4]
   26752:	f7dc fb5f 	bl	2e14 <bb_setUInt8>
   26756:	61f8      	str	r0, [r7, #28]
   26758:	69fb      	ldr	r3, [r7, #28]
   2675a:	2b00      	cmp	r3, #0
   2675c:	d001      	beq.n	26762 <var_getBytes2+0x9a>
    {
        return ret;
   2675e:	69fb      	ldr	r3, [r7, #28]
   26760:	e14e      	b.n	26a00 <var_getBytes2+0x338>
    }
    switch (type)
   26762:	7afb      	ldrb	r3, [r7, #11]
   26764:	2b1b      	cmp	r3, #27
   26766:	f200 813f 	bhi.w	269e8 <var_getBytes2+0x320>
   2676a:	a201      	add	r2, pc, #4	; (adr r2, 26770 <var_getBytes2+0xa8>)
   2676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26770:	000269f1 	.word	0x000269f1
   26774:	000269e9 	.word	0x000269e9
   26778:	000269e9 	.word	0x000269e9
   2677c:	000267f1 	.word	0x000267f1
   26780:	000269b1 	.word	0x000269b1
   26784:	00026869 	.word	0x00026869
   26788:	0002681b 	.word	0x0002681b
   2678c:	000269e9 	.word	0x000269e9
   26790:	000269e9 	.word	0x000269e9
   26794:	000268fd 	.word	0x000268fd
   26798:	000268b9 	.word	0x000268b9
   2679c:	000269e9 	.word	0x000269e9
   267a0:	000269e9 	.word	0x000269e9
   267a4:	000269e9 	.word	0x000269e9
   267a8:	000269e9 	.word	0x000269e9
   267ac:	00026843 	.word	0x00026843
   267b0:	00026857 	.word	0x00026857
   267b4:	000267e1 	.word	0x000267e1
   267b8:	0002680b 	.word	0x0002680b
   267bc:	000269e9 	.word	0x000269e9
   267c0:	00026879 	.word	0x00026879
   267c4:	0002682b 	.word	0x0002682b
   267c8:	000267e1 	.word	0x000267e1
   267cc:	00026891 	.word	0x00026891
   267d0:	000268a1 	.word	0x000268a1
   267d4:	00026981 	.word	0x00026981
   267d8:	00026991 	.word	0x00026991
   267dc:	000269a1 	.word	0x000269a1
    {
    case DLMS_DATA_TYPE_NONE:
        break;
    case DLMS_DATA_TYPE_UINT8:
    case DLMS_DATA_TYPE_ENUM:
        ret = bb_setUInt8(ba, data->bVal);
   267e0:	68fb      	ldr	r3, [r7, #12]
   267e2:	7a1b      	ldrb	r3, [r3, #8]
   267e4:	4619      	mov	r1, r3
   267e6:	6878      	ldr	r0, [r7, #4]
   267e8:	f7dc fb14 	bl	2e14 <bb_setUInt8>
   267ec:	61f8      	str	r0, [r7, #28]
        break;
   267ee:	e106      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_BOOLEAN:
        ret = bb_setUInt8(ba, data->bVal == 0 ? 0 : 1);
   267f0:	68fb      	ldr	r3, [r7, #12]
   267f2:	7a1b      	ldrb	r3, [r3, #8]
   267f4:	2b00      	cmp	r3, #0
   267f6:	bf14      	ite	ne
   267f8:	2301      	movne	r3, #1
   267fa:	2300      	moveq	r3, #0
   267fc:	b2db      	uxtb	r3, r3
   267fe:	4619      	mov	r1, r3
   26800:	6878      	ldr	r0, [r7, #4]
   26802:	f7dc fb07 	bl	2e14 <bb_setUInt8>
   26806:	61f8      	str	r0, [r7, #28]
        break;
   26808:	e0f9      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_UINT16:
        ret = bb_setUInt16(ba, data->uiVal);
   2680a:	68fb      	ldr	r3, [r7, #12]
   2680c:	891b      	ldrh	r3, [r3, #8]
   2680e:	4619      	mov	r1, r3
   26810:	6878      	ldr	r0, [r7, #4]
   26812:	f7dc fb91 	bl	2f38 <bb_setUInt16>
   26816:	61f8      	str	r0, [r7, #28]
        break;
   26818:	e0f1      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_UINT32:
        ret = bb_setUInt32(ba, data->ulVal);
   2681a:	68fb      	ldr	r3, [r7, #12]
   2681c:	689b      	ldr	r3, [r3, #8]
   2681e:	4619      	mov	r1, r3
   26820:	6878      	ldr	r0, [r7, #4]
   26822:	f7dc fbeb 	bl	2ffc <bb_setUInt32>
   26826:	61f8      	str	r0, [r7, #28]
        break;
   26828:	e0e9      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_UINT64:
        ret = bb_setUInt64(ba, data->ullVal);
   2682a:	68fb      	ldr	r3, [r7, #12]
   2682c:	f103 0408 	add.w	r4, r3, #8
   26830:	e9d4 3400 	ldrd	r3, r4, [r4]
   26834:	461a      	mov	r2, r3
   26836:	4623      	mov	r3, r4
   26838:	6878      	ldr	r0, [r7, #4]
   2683a:	f7dc fc63 	bl	3104 <bb_setUInt64>
   2683e:	61f8      	str	r0, [r7, #28]
        break;
   26840:	e0dd      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_INT8:
        ret = bb_setUInt8(ba, data->cVal);
   26842:	68fb      	ldr	r3, [r7, #12]
   26844:	f993 3008 	ldrsb.w	r3, [r3, #8]
   26848:	b2db      	uxtb	r3, r3
   2684a:	4619      	mov	r1, r3
   2684c:	6878      	ldr	r0, [r7, #4]
   2684e:	f7dc fae1 	bl	2e14 <bb_setUInt8>
   26852:	61f8      	str	r0, [r7, #28]
        break;
   26854:	e0d3      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_INT16:
        ret = bb_setInt16(ba, data->uiVal);
   26856:	68fb      	ldr	r3, [r7, #12]
   26858:	891b      	ldrh	r3, [r3, #8]
   2685a:	b21b      	sxth	r3, r3
   2685c:	4619      	mov	r1, r3
   2685e:	6878      	ldr	r0, [r7, #4]
   26860:	f7dc fe4c 	bl	34fc <bb_setInt16>
   26864:	61f8      	str	r0, [r7, #28]
        break;
   26866:	e0ca      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_INT32:
        ret = bb_setInt32(ba, data->lVal);
   26868:	68fb      	ldr	r3, [r7, #12]
   2686a:	689b      	ldr	r3, [r3, #8]
   2686c:	4619      	mov	r1, r3
   2686e:	6878      	ldr	r0, [r7, #4]
   26870:	f7dc fe54 	bl	351c <bb_setInt32>
   26874:	61f8      	str	r0, [r7, #28]
        break;
   26876:	e0c2      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_INT64:
        ret = bb_setInt64(ba, data->llVal);
   26878:	68fb      	ldr	r3, [r7, #12]
   2687a:	f103 0408 	add.w	r4, r3, #8
   2687e:	e9d4 3400 	ldrd	r3, r4, [r4]
   26882:	461a      	mov	r2, r3
   26884:	4623      	mov	r3, r4
   26886:	6878      	ldr	r0, [r7, #4]
   26888:	f7dc fe58 	bl	353c <bb_setInt64>
   2688c:	61f8      	str	r0, [r7, #28]
        break;
   2688e:	e0b6      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_FLOAT32:
#ifndef GX_DLMS_MICROCONTROLLER
        ret = bb_setFloat(ba, data->fltVal);
   26890:	68fb      	ldr	r3, [r7, #12]
   26892:	689b      	ldr	r3, [r3, #8]
   26894:	4619      	mov	r1, r3
   26896:	6878      	ldr	r0, [r7, #4]
   26898:	f7dc fd20 	bl	32dc <bb_setFloat>
   2689c:	61f8      	str	r0, [r7, #28]
#else
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
        break;
   2689e:	e0ae      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_FLOAT64:
#ifndef GX_DLMS_MICROCONTROLLER
        ret = bb_setDouble(ba, data->dblVal);
   268a0:	68fb      	ldr	r3, [r7, #12]
   268a2:	f103 0408 	add.w	r4, r3, #8
   268a6:	e9d4 3400 	ldrd	r3, r4, [r4]
   268aa:	461a      	mov	r2, r3
   268ac:	4623      	mov	r3, r4
   268ae:	6878      	ldr	r0, [r7, #4]
   268b0:	f7dc fd82 	bl	33b8 <bb_setDouble>
   268b4:	61f8      	str	r0, [r7, #28]
#else
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
        break;
   268b6:	e0a2      	b.n	269fe <var_getBytes2+0x336>
    case DLMS_DATA_TYPE_STRING:
        if (data->strVal == NULL)
   268b8:	68fb      	ldr	r3, [r7, #12]
   268ba:	689b      	ldr	r3, [r3, #8]
   268bc:	2b00      	cmp	r3, #0
   268be:	d105      	bne.n	268cc <var_getBytes2+0x204>
        {
            ret = hlp_setObjectCount(0, ba);
   268c0:	6879      	ldr	r1, [r7, #4]
   268c2:	2000      	movs	r0, #0
   268c4:	f7fb f80a 	bl	218dc <hlp_setObjectCount>
   268c8:	61f8      	str	r0, [r7, #28]
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
            {
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
            }
        }
        break;
   268ca:	e093      	b.n	269f4 <var_getBytes2+0x32c>
        {
            ret = hlp_setObjectCount(0, ba);
        }
        else
        {
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
   268cc:	68fb      	ldr	r3, [r7, #12]
   268ce:	689b      	ldr	r3, [r3, #8]
   268d0:	88db      	ldrh	r3, [r3, #6]
   268d2:	6879      	ldr	r1, [r7, #4]
   268d4:	4618      	mov	r0, r3
   268d6:	f7fb f801 	bl	218dc <hlp_setObjectCount>
   268da:	61f8      	str	r0, [r7, #28]
   268dc:	69fb      	ldr	r3, [r7, #28]
   268de:	2b00      	cmp	r3, #0
   268e0:	f040 8088 	bne.w	269f4 <var_getBytes2+0x32c>
            {
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
   268e4:	68fb      	ldr	r3, [r7, #12]
   268e6:	689b      	ldr	r3, [r3, #8]
   268e8:	6819      	ldr	r1, [r3, #0]
   268ea:	68fb      	ldr	r3, [r7, #12]
   268ec:	689b      	ldr	r3, [r3, #8]
   268ee:	88db      	ldrh	r3, [r3, #6]
   268f0:	461a      	mov	r2, r3
   268f2:	6878      	ldr	r0, [r7, #4]
   268f4:	f7dc fe34 	bl	3560 <bb_set>
   268f8:	61f8      	str	r0, [r7, #28]
            }
        }
        break;
   268fa:	e07b      	b.n	269f4 <var_getBytes2+0x32c>
    case DLMS_DATA_TYPE_OCTET_STRING:
        if (data->vt == DLMS_DATA_TYPE_DATETIME)
   268fc:	68fb      	ldr	r3, [r7, #12]
   268fe:	781b      	ldrb	r3, [r3, #0]
   26900:	2b19      	cmp	r3, #25
   26902:	d10f      	bne.n	26924 <var_getBytes2+0x25c>
        {
            if ((ret = bb_setUInt8(ba, 12)) == 0)
   26904:	210c      	movs	r1, #12
   26906:	6878      	ldr	r0, [r7, #4]
   26908:	f7dc fa84 	bl	2e14 <bb_setUInt8>
   2690c:	61f8      	str	r0, [r7, #28]
   2690e:	69fb      	ldr	r3, [r7, #28]
   26910:	2b00      	cmp	r3, #0
   26912:	d171      	bne.n	269f8 <var_getBytes2+0x330>
            {
                ret = var_getDateTime2(data->dateTime, ba);
   26914:	68fb      	ldr	r3, [r7, #12]
   26916:	689b      	ldr	r3, [r3, #8]
   26918:	6879      	ldr	r1, [r7, #4]
   2691a:	4618      	mov	r0, r3
   2691c:	f7ff fc9e 	bl	2625c <var_getDateTime2>
   26920:	61f8      	str	r0, [r7, #28]
        }
        else
        {
            ret = var_setOctetString(ba, data);
        }
        break;
   26922:	e069      	b.n	269f8 <var_getBytes2+0x330>
            if ((ret = bb_setUInt8(ba, 12)) == 0)
            {
                ret = var_getDateTime2(data->dateTime, ba);
            }
        }
        else if (data->vt == DLMS_DATA_TYPE_DATE)
   26924:	68fb      	ldr	r3, [r7, #12]
   26926:	781b      	ldrb	r3, [r3, #0]
   26928:	2b1a      	cmp	r3, #26
   2692a:	d10f      	bne.n	2694c <var_getBytes2+0x284>
        {
            if ((ret = bb_setUInt8(ba, 5)) == 0)
   2692c:	2105      	movs	r1, #5
   2692e:	6878      	ldr	r0, [r7, #4]
   26930:	f7dc fa70 	bl	2e14 <bb_setUInt8>
   26934:	61f8      	str	r0, [r7, #28]
   26936:	69fb      	ldr	r3, [r7, #28]
   26938:	2b00      	cmp	r3, #0
   2693a:	d15d      	bne.n	269f8 <var_getBytes2+0x330>
            {
                ret = var_getDate(data->dateTime, ba);
   2693c:	68fb      	ldr	r3, [r7, #12]
   2693e:	689b      	ldr	r3, [r3, #8]
   26940:	6879      	ldr	r1, [r7, #4]
   26942:	4618      	mov	r0, r3
   26944:	f7ff fd90 	bl	26468 <var_getDate>
   26948:	61f8      	str	r0, [r7, #28]
        }
        else
        {
            ret = var_setOctetString(ba, data);
        }
        break;
   2694a:	e055      	b.n	269f8 <var_getBytes2+0x330>
            if ((ret = bb_setUInt8(ba, 5)) == 0)
            {
                ret = var_getDate(data->dateTime, ba);
            }
        }
        else if (data->vt == DLMS_DATA_TYPE_TIME)
   2694c:	68fb      	ldr	r3, [r7, #12]
   2694e:	781b      	ldrb	r3, [r3, #0]
   26950:	2b1b      	cmp	r3, #27
   26952:	d10f      	bne.n	26974 <var_getBytes2+0x2ac>
        {
            if ((ret = bb_setUInt8(ba, 4)) == 0)
   26954:	2104      	movs	r1, #4
   26956:	6878      	ldr	r0, [r7, #4]
   26958:	f7dc fa5c 	bl	2e14 <bb_setUInt8>
   2695c:	61f8      	str	r0, [r7, #28]
   2695e:	69fb      	ldr	r3, [r7, #28]
   26960:	2b00      	cmp	r3, #0
   26962:	d149      	bne.n	269f8 <var_getBytes2+0x330>
            {
                ret = var_getTime(data->dateTime, ba);
   26964:	68fb      	ldr	r3, [r7, #12]
   26966:	689b      	ldr	r3, [r3, #8]
   26968:	6879      	ldr	r1, [r7, #4]
   2696a:	4618      	mov	r0, r3
   2696c:	f7ff fde8 	bl	26540 <var_getTime>
   26970:	61f8      	str	r0, [r7, #28]
        }
        else
        {
            ret = var_setOctetString(ba, data);
        }
        break;
   26972:	e041      	b.n	269f8 <var_getBytes2+0x330>
                ret = var_getTime(data->dateTime, ba);
            }
        }
        else
        {
            ret = var_setOctetString(ba, data);
   26974:	68f9      	ldr	r1, [r7, #12]
   26976:	6878      	ldr	r0, [r7, #4]
   26978:	f7ff fe52 	bl	26620 <var_setOctetString>
   2697c:	61f8      	str	r0, [r7, #28]
        }
        break;
   2697e:	e03b      	b.n	269f8 <var_getBytes2+0x330>
    case DLMS_DATA_TYPE_DATETIME:
    {
        ret = var_getDateTime2(data->dateTime, ba);
   26980:	68fb      	ldr	r3, [r7, #12]
   26982:	689b      	ldr	r3, [r3, #8]
   26984:	6879      	ldr	r1, [r7, #4]
   26986:	4618      	mov	r0, r3
   26988:	f7ff fc68 	bl	2625c <var_getDateTime2>
   2698c:	61f8      	str	r0, [r7, #28]
        break;
   2698e:	e036      	b.n	269fe <var_getBytes2+0x336>
    }
    case DLMS_DATA_TYPE_DATE:
    {
        ret = var_getDate(data->dateTime, ba);
   26990:	68fb      	ldr	r3, [r7, #12]
   26992:	689b      	ldr	r3, [r3, #8]
   26994:	6879      	ldr	r1, [r7, #4]
   26996:	4618      	mov	r0, r3
   26998:	f7ff fd66 	bl	26468 <var_getDate>
   2699c:	61f8      	str	r0, [r7, #28]
        break;
   2699e:	e02e      	b.n	269fe <var_getBytes2+0x336>
    }
    case DLMS_DATA_TYPE_TIME:
    {
        ret = var_getTime(data->dateTime, ba);
   269a0:	68fb      	ldr	r3, [r7, #12]
   269a2:	689b      	ldr	r3, [r3, #8]
   269a4:	6879      	ldr	r1, [r7, #4]
   269a6:	4618      	mov	r0, r3
   269a8:	f7ff fdca 	bl	26540 <var_getTime>
   269ac:	61f8      	str	r0, [r7, #28]
        break;
   269ae:	e026      	b.n	269fe <var_getBytes2+0x336>
    }
    case DLMS_DATA_TYPE_BIT_STRING:
    {
        if ((ret = hlp_setObjectCount(data->bitArr->size, ba)) == 0)
   269b0:	68fb      	ldr	r3, [r7, #12]
   269b2:	689b      	ldr	r3, [r3, #8]
   269b4:	88db      	ldrh	r3, [r3, #6]
   269b6:	6879      	ldr	r1, [r7, #4]
   269b8:	4618      	mov	r0, r3
   269ba:	f7fa ff8f 	bl	218dc <hlp_setObjectCount>
   269be:	61f8      	str	r0, [r7, #28]
   269c0:	69fb      	ldr	r3, [r7, #28]
   269c2:	2b00      	cmp	r3, #0
   269c4:	d11a      	bne.n	269fc <var_getBytes2+0x334>
        {
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   269c6:	68fb      	ldr	r3, [r7, #12]
   269c8:	689b      	ldr	r3, [r3, #8]
   269ca:	681c      	ldr	r4, [r3, #0]
   269cc:	68fb      	ldr	r3, [r7, #12]
   269ce:	689b      	ldr	r3, [r3, #8]
   269d0:	88db      	ldrh	r3, [r3, #6]
   269d2:	4618      	mov	r0, r3
   269d4:	f7db feb0 	bl	2738 <ba_getByteCount>
   269d8:	4603      	mov	r3, r0
   269da:	461a      	mov	r2, r3
   269dc:	4621      	mov	r1, r4
   269de:	6878      	ldr	r0, [r7, #4]
   269e0:	f7dc fdbe 	bl	3560 <bb_set>
   269e4:	61f8      	str	r0, [r7, #28]
        }
        break;
   269e6:	e009      	b.n	269fc <var_getBytes2+0x334>
    }
    default:
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   269e8:	f44f 7381 	mov.w	r3, #258	; 0x102
   269ec:	61fb      	str	r3, [r7, #28]
   269ee:	e006      	b.n	269fe <var_getBytes2+0x336>
        return ret;
    }
    switch (type)
    {
    case DLMS_DATA_TYPE_NONE:
        break;
   269f0:	bf00      	nop
   269f2:	e004      	b.n	269fe <var_getBytes2+0x336>
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
            {
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
            }
        }
        break;
   269f4:	bf00      	nop
   269f6:	e002      	b.n	269fe <var_getBytes2+0x336>
        }
        else
        {
            ret = var_setOctetString(ba, data);
        }
        break;
   269f8:	bf00      	nop
   269fa:	e000      	b.n	269fe <var_getBytes2+0x336>
    {
        if ((ret = hlp_setObjectCount(data->bitArr->size, ba)) == 0)
        {
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
        }
        break;
   269fc:	bf00      	nop
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
   269fe:	69fb      	ldr	r3, [r7, #28]
}
   26a00:	4618      	mov	r0, r3
   26a02:	3724      	adds	r7, #36	; 0x24
   26a04:	46bd      	mov	sp, r7
   26a06:	bd90      	pop	{r4, r7, pc}

00026a08 <var_getSize>:

//Get size in bytes.
int var_getSize(DLMS_DATA_TYPE vt)
{
   26a08:	b480      	push	{r7}
   26a0a:	b085      	sub	sp, #20
   26a0c:	af00      	add	r7, sp, #0
   26a0e:	4603      	mov	r3, r0
   26a10:	71fb      	strb	r3, [r7, #7]
    int nSize = -1;
   26a12:	f04f 33ff 	mov.w	r3, #4294967295
   26a16:	60fb      	str	r3, [r7, #12]
    switch (vt)
   26a18:	79fb      	ldrb	r3, [r7, #7]
   26a1a:	2b1b      	cmp	r3, #27
   26a1c:	d850      	bhi.n	26ac0 <var_getSize+0xb8>
   26a1e:	a201      	add	r2, pc, #4	; (adr r2, 26a24 <var_getSize+0x1c>)
   26a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26a24:	00026a95 	.word	0x00026a95
   26a28:	00026ac1 	.word	0x00026ac1
   26a2c:	00026ac1 	.word	0x00026ac1
   26a30:	00026a9b 	.word	0x00026a9b
   26a34:	00026ac1 	.word	0x00026ac1
   26a38:	00026aa7 	.word	0x00026aa7
   26a3c:	00026aa7 	.word	0x00026aa7
   26a40:	00026ac1 	.word	0x00026ac1
   26a44:	00026ac1 	.word	0x00026ac1
   26a48:	00026ac1 	.word	0x00026ac1
   26a4c:	00026ab3 	.word	0x00026ab3
   26a50:	00026ac1 	.word	0x00026ac1
   26a54:	00026ab3 	.word	0x00026ab3
   26a58:	00026ac1 	.word	0x00026ac1
   26a5c:	00026ac1 	.word	0x00026ac1
   26a60:	00026a9b 	.word	0x00026a9b
   26a64:	00026aa1 	.word	0x00026aa1
   26a68:	00026a9b 	.word	0x00026a9b
   26a6c:	00026aa1 	.word	0x00026aa1
   26a70:	00026ac1 	.word	0x00026ac1
   26a74:	00026aad 	.word	0x00026aad
   26a78:	00026aad 	.word	0x00026aad
   26a7c:	00026a9b 	.word	0x00026a9b
   26a80:	00026aa7 	.word	0x00026aa7
   26a84:	00026aad 	.word	0x00026aad
   26a88:	00026abb 	.word	0x00026abb
   26a8c:	00026ac1 	.word	0x00026ac1
   26a90:	00026ac1 	.word	0x00026ac1
    {
    case DLMS_DATA_TYPE_NONE:
        nSize = 0;
   26a94:	2300      	movs	r3, #0
   26a96:	60fb      	str	r3, [r7, #12]
        break;
   26a98:	e012      	b.n	26ac0 <var_getSize+0xb8>
    case DLMS_DATA_TYPE_BOOLEAN:
    case DLMS_DATA_TYPE_INT8:
    case DLMS_DATA_TYPE_UINT8:
    case DLMS_DATA_TYPE_ENUM:
        nSize = 1;
   26a9a:	2301      	movs	r3, #1
   26a9c:	60fb      	str	r3, [r7, #12]
        break;
   26a9e:	e00f      	b.n	26ac0 <var_getSize+0xb8>
    case DLMS_DATA_TYPE_INT16:
    case DLMS_DATA_TYPE_UINT16:
        nSize = 2;
   26aa0:	2302      	movs	r3, #2
   26aa2:	60fb      	str	r3, [r7, #12]
        break;
   26aa4:	e00c      	b.n	26ac0 <var_getSize+0xb8>
    case DLMS_DATA_TYPE_INT32:
    case DLMS_DATA_TYPE_UINT32:
    case DLMS_DATA_TYPE_FLOAT32:
        nSize = 4;
   26aa6:	2304      	movs	r3, #4
   26aa8:	60fb      	str	r3, [r7, #12]
        break;
   26aaa:	e009      	b.n	26ac0 <var_getSize+0xb8>
    case DLMS_DATA_TYPE_INT64:
    case DLMS_DATA_TYPE_UINT64:
    case DLMS_DATA_TYPE_FLOAT64:
        nSize = 8;
   26aac:	2308      	movs	r3, #8
   26aae:	60fb      	str	r3, [r7, #12]
        break;
   26ab0:	e006      	b.n	26ac0 <var_getSize+0xb8>
        break;
    case DLMS_DATA_TYPE_OCTET_STRING:
        break;
    case DLMS_DATA_TYPE_STRING:
    case DLMS_DATA_TYPE_STRING_UTF8:
        nSize = -1;
   26ab2:	f04f 33ff 	mov.w	r3, #4294967295
   26ab6:	60fb      	str	r3, [r7, #12]
        break;
   26ab8:	e002      	b.n	26ac0 <var_getSize+0xb8>
    case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
        break;
    case DLMS_DATA_TYPE_DATETIME:
        nSize = 12;
   26aba:	230c      	movs	r3, #12
   26abc:	60fb      	str	r3, [r7, #12]
        break;
   26abe:	bf00      	nop
    case DLMS_DATA_TYPE_STRUCTURE:
        break;
    case DLMS_DATA_TYPE_COMPACT_ARRAY:
        break;
    }
    return nSize;
   26ac0:	68fb      	ldr	r3, [r7, #12]
}
   26ac2:	4618      	mov	r0, r3
   26ac4:	3714      	adds	r7, #20
   26ac6:	46bd      	mov	sp, r7
   26ac8:	bc80      	pop	{r7}
   26aca:	4770      	bx	lr

00026acc <var_toInteger>:

//Convert variant value to integer.
int var_toInteger(dlmsVARIANT *data)
{
   26acc:	b590      	push	{r4, r7, lr}
   26ace:	b083      	sub	sp, #12
   26ad0:	af00      	add	r7, sp, #0
   26ad2:	6078      	str	r0, [r7, #4]
    if (data->vt == DLMS_DATA_TYPE_NONE)
   26ad4:	687b      	ldr	r3, [r7, #4]
   26ad6:	781b      	ldrb	r3, [r3, #0]
   26ad8:	2b00      	cmp	r3, #0
   26ada:	d101      	bne.n	26ae0 <var_toInteger+0x14>
    {
        return 0;
   26adc:	2300      	movs	r3, #0
   26ade:	e064      	b.n	26baa <var_toInteger+0xde>
    }

    if (data->vt == DLMS_DATA_TYPE_BOOLEAN)
   26ae0:	687b      	ldr	r3, [r7, #4]
   26ae2:	781b      	ldrb	r3, [r3, #0]
   26ae4:	2b03      	cmp	r3, #3
   26ae6:	d107      	bne.n	26af8 <var_toInteger+0x2c>
    {
        return data->boolVal ? 1 : 0;
   26ae8:	687b      	ldr	r3, [r7, #4]
   26aea:	7a1b      	ldrb	r3, [r3, #8]
   26aec:	2b00      	cmp	r3, #0
   26aee:	bf14      	ite	ne
   26af0:	2301      	movne	r3, #1
   26af2:	2300      	moveq	r3, #0
   26af4:	b2db      	uxtb	r3, r3
   26af6:	e058      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_INT32)
   26af8:	687b      	ldr	r3, [r7, #4]
   26afa:	781b      	ldrb	r3, [r3, #0]
   26afc:	2b05      	cmp	r3, #5
   26afe:	d102      	bne.n	26b06 <var_toInteger+0x3a>
    {
        return data->lVal;
   26b00:	687b      	ldr	r3, [r7, #4]
   26b02:	689b      	ldr	r3, [r3, #8]
   26b04:	e051      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_UINT32)
   26b06:	687b      	ldr	r3, [r7, #4]
   26b08:	781b      	ldrb	r3, [r3, #0]
   26b0a:	2b06      	cmp	r3, #6
   26b0c:	d102      	bne.n	26b14 <var_toInteger+0x48>
    {
        return data->ulVal;
   26b0e:	687b      	ldr	r3, [r7, #4]
   26b10:	689b      	ldr	r3, [r3, #8]
   26b12:	e04a      	b.n	26baa <var_toInteger+0xde>
    {
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
    if (data->vt == DLMS_DATA_TYPE_INT8)
   26b14:	687b      	ldr	r3, [r7, #4]
   26b16:	781b      	ldrb	r3, [r3, #0]
   26b18:	2b0f      	cmp	r3, #15
   26b1a:	d103      	bne.n	26b24 <var_toInteger+0x58>
    {
        return data->cVal;
   26b1c:	687b      	ldr	r3, [r7, #4]
   26b1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
   26b22:	e042      	b.n	26baa <var_toInteger+0xde>
    }

    if (data->vt == DLMS_DATA_TYPE_INT16)
   26b24:	687b      	ldr	r3, [r7, #4]
   26b26:	781b      	ldrb	r3, [r3, #0]
   26b28:	2b10      	cmp	r3, #16
   26b2a:	d103      	bne.n	26b34 <var_toInteger+0x68>
    {
        return data->iVal;
   26b2c:	687b      	ldr	r3, [r7, #4]
   26b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   26b32:	e03a      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_UINT8)
   26b34:	687b      	ldr	r3, [r7, #4]
   26b36:	781b      	ldrb	r3, [r3, #0]
   26b38:	2b11      	cmp	r3, #17
   26b3a:	d102      	bne.n	26b42 <var_toInteger+0x76>
    {
        return data->bVal;
   26b3c:	687b      	ldr	r3, [r7, #4]
   26b3e:	7a1b      	ldrb	r3, [r3, #8]
   26b40:	e033      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_UINT16)
   26b42:	687b      	ldr	r3, [r7, #4]
   26b44:	781b      	ldrb	r3, [r3, #0]
   26b46:	2b12      	cmp	r3, #18
   26b48:	d102      	bne.n	26b50 <var_toInteger+0x84>
    {
        return data->uiVal;
   26b4a:	687b      	ldr	r3, [r7, #4]
   26b4c:	891b      	ldrh	r3, [r3, #8]
   26b4e:	e02c      	b.n	26baa <var_toInteger+0xde>
        //TODO:
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
    if (data->vt == DLMS_DATA_TYPE_ENUM)
   26b50:	687b      	ldr	r3, [r7, #4]
   26b52:	781b      	ldrb	r3, [r3, #0]
   26b54:	2b16      	cmp	r3, #22
   26b56:	d102      	bne.n	26b5e <var_toInteger+0x92>
    {
        return data->bVal;
   26b58:	687b      	ldr	r3, [r7, #4]
   26b5a:	7a1b      	ldrb	r3, [r3, #8]
   26b5c:	e025      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_FLOAT32)
   26b5e:	687b      	ldr	r3, [r7, #4]
   26b60:	781b      	ldrb	r3, [r3, #0]
   26b62:	2b17      	cmp	r3, #23
   26b64:	d106      	bne.n	26b74 <var_toInteger+0xa8>
    {
        return (int)data->fltVal;
   26b66:	687b      	ldr	r3, [r7, #4]
   26b68:	689b      	ldr	r3, [r3, #8]
   26b6a:	4618      	mov	r0, r3
   26b6c:	f7d9 fef2 	bl	954 <__aeabi_f2iz>
   26b70:	4603      	mov	r3, r0
   26b72:	e01a      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_FLOAT64)
   26b74:	687b      	ldr	r3, [r7, #4]
   26b76:	781b      	ldrb	r3, [r3, #0]
   26b78:	2b18      	cmp	r3, #24
   26b7a:	d10a      	bne.n	26b92 <var_toInteger+0xc6>
    {
        return (int)data->dblVal;
   26b7c:	687b      	ldr	r3, [r7, #4]
   26b7e:	f103 0408 	add.w	r4, r3, #8
   26b82:	e9d4 3400 	ldrd	r3, r4, [r4]
   26b86:	4618      	mov	r0, r3
   26b88:	4621      	mov	r1, r4
   26b8a:	f7d9 fe9b 	bl	8c4 <__aeabi_d2iz>
   26b8e:	4603      	mov	r3, r0
   26b90:	e00b      	b.n	26baa <var_toInteger+0xde>
    }
    if (data->vt == DLMS_DATA_TYPE_STRING)
   26b92:	687b      	ldr	r3, [r7, #4]
   26b94:	781b      	ldrb	r3, [r3, #0]
   26b96:	2b0a      	cmp	r3, #10
   26b98:	d106      	bne.n	26ba8 <var_toInteger+0xdc>
    {
        return hlp_stringToInt((const char*)data->strVal);
   26b9a:	687b      	ldr	r3, [r7, #4]
   26b9c:	689b      	ldr	r3, [r3, #8]
   26b9e:	4618      	mov	r0, r3
   26ba0:	f7fb f89c 	bl	21cdc <hlp_stringToInt>
   26ba4:	4603      	mov	r3, r0
   26ba6:	e000      	b.n	26baa <var_toInteger+0xde>
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    assert(0);
#endif
    return 0;
   26ba8:	2300      	movs	r3, #0
}
   26baa:	4618      	mov	r0, r3
   26bac:	370c      	adds	r7, #12
   26bae:	46bd      	mov	sp, r7
   26bb0:	bd90      	pop	{r4, r7, pc}
   26bb2:	bf00      	nop

00026bb4 <va_isAttached>:

char va_isAttached(variantArray* arr)
{
   26bb4:	b480      	push	{r7}
   26bb6:	b083      	sub	sp, #12
   26bb8:	af00      	add	r7, sp, #0
   26bba:	6078      	str	r0, [r7, #4]
    return (arr->capacity & 0x8000) == 0x8000;
   26bbc:	687b      	ldr	r3, [r7, #4]
   26bbe:	889b      	ldrh	r3, [r3, #4]
   26bc0:	b21b      	sxth	r3, r3
   26bc2:	b29b      	uxth	r3, r3
   26bc4:	0bdb      	lsrs	r3, r3, #15
   26bc6:	b2db      	uxtb	r3, r3
}
   26bc8:	4618      	mov	r0, r3
   26bca:	370c      	adds	r7, #12
   26bcc:	46bd      	mov	sp, r7
   26bce:	bc80      	pop	{r7}
   26bd0:	4770      	bx	lr
   26bd2:	bf00      	nop

00026bd4 <va_getCapacity>:

unsigned short va_getCapacity(variantArray* arr)
{
   26bd4:	b480      	push	{r7}
   26bd6:	b083      	sub	sp, #12
   26bd8:	af00      	add	r7, sp, #0
   26bda:	6078      	str	r0, [r7, #4]
    return arr->capacity & 0x7FFF;
   26bdc:	687b      	ldr	r3, [r7, #4]
   26bde:	889b      	ldrh	r3, [r3, #4]
   26be0:	f3c3 030e 	ubfx	r3, r3, #0, #15
   26be4:	b29b      	uxth	r3, r3
}
   26be6:	4618      	mov	r0, r3
   26be8:	370c      	adds	r7, #12
   26bea:	46bd      	mov	sp, r7
   26bec:	bc80      	pop	{r7}
   26bee:	4770      	bx	lr

00026bf0 <va_init>:

//Initialize variantArray.
void va_init(variantArray* arr)
{
   26bf0:	b480      	push	{r7}
   26bf2:	b083      	sub	sp, #12
   26bf4:	af00      	add	r7, sp, #0
   26bf6:	6078      	str	r0, [r7, #4]
    arr->capacity = 0;
   26bf8:	687b      	ldr	r3, [r7, #4]
   26bfa:	2200      	movs	r2, #0
   26bfc:	809a      	strh	r2, [r3, #4]
    arr->data = NULL;
   26bfe:	687b      	ldr	r3, [r7, #4]
   26c00:	2200      	movs	r2, #0
   26c02:	601a      	str	r2, [r3, #0]
    arr->position = 0;
   26c04:	687b      	ldr	r3, [r7, #4]
   26c06:	2200      	movs	r2, #0
   26c08:	811a      	strh	r2, [r3, #8]
    arr->size = 0;
   26c0a:	687b      	ldr	r3, [r7, #4]
   26c0c:	2200      	movs	r2, #0
   26c0e:	80da      	strh	r2, [r3, #6]
}
   26c10:	bf00      	nop
   26c12:	370c      	adds	r7, #12
   26c14:	46bd      	mov	sp, r7
   26c16:	bc80      	pop	{r7}
   26c18:	4770      	bx	lr
   26c1a:	bf00      	nop

00026c1c <va_capacity>:

//Allocate new size for the array in bytes.
void va_capacity(variantArray* arr, unsigned short capacity)
{
   26c1c:	b580      	push	{r7, lr}
   26c1e:	b082      	sub	sp, #8
   26c20:	af00      	add	r7, sp, #0
   26c22:	6078      	str	r0, [r7, #4]
   26c24:	460b      	mov	r3, r1
   26c26:	807b      	strh	r3, [r7, #2]
    if (!va_isAttached(arr))
   26c28:	6878      	ldr	r0, [r7, #4]
   26c2a:	f7ff ffc3 	bl	26bb4 <va_isAttached>
   26c2e:	4603      	mov	r3, r0
   26c30:	2b00      	cmp	r3, #0
   26c32:	d12f      	bne.n	26c94 <va_capacity+0x78>
    {
        if (capacity == 0)
   26c34:	887b      	ldrh	r3, [r7, #2]
   26c36:	2b00      	cmp	r3, #0
   26c38:	d110      	bne.n	26c5c <va_capacity+0x40>
        {
            if (arr->capacity != 0)
   26c3a:	687b      	ldr	r3, [r7, #4]
   26c3c:	889b      	ldrh	r3, [r3, #4]
   26c3e:	2b00      	cmp	r3, #0
   26c40:	d025      	beq.n	26c8e <va_capacity+0x72>
            {
                gxfree(arr->data);
   26c42:	687b      	ldr	r3, [r7, #4]
   26c44:	681b      	ldr	r3, [r3, #0]
   26c46:	4618      	mov	r0, r3
   26c48:	f002 ff04 	bl	29a54 <free>
                arr->size = arr->position = 0;
   26c4c:	687b      	ldr	r3, [r7, #4]
   26c4e:	2200      	movs	r2, #0
   26c50:	811a      	strh	r2, [r3, #8]
   26c52:	687b      	ldr	r3, [r7, #4]
   26c54:	891a      	ldrh	r2, [r3, #8]
   26c56:	687b      	ldr	r3, [r7, #4]
   26c58:	80da      	strh	r2, [r3, #6]
   26c5a:	e018      	b.n	26c8e <va_capacity+0x72>
            }
        }
        else
        {
            if (arr->capacity == 0)
   26c5c:	687b      	ldr	r3, [r7, #4]
   26c5e:	889b      	ldrh	r3, [r3, #4]
   26c60:	2b00      	cmp	r3, #0
   26c62:	d109      	bne.n	26c78 <va_capacity+0x5c>
            {
                arr->data = (void**)gxmalloc(capacity * sizeof(dlmsVARIANT*));
   26c64:	887b      	ldrh	r3, [r7, #2]
   26c66:	009b      	lsls	r3, r3, #2
   26c68:	4618      	mov	r0, r3
   26c6a:	f002 feeb 	bl	29a44 <malloc>
   26c6e:	4603      	mov	r3, r0
   26c70:	461a      	mov	r2, r3
   26c72:	687b      	ldr	r3, [r7, #4]
   26c74:	601a      	str	r2, [r3, #0]
   26c76:	e00a      	b.n	26c8e <va_capacity+0x72>
            }
            else
            {
                arr->data = (void**)gxrealloc(arr->data, capacity * sizeof(dlmsVARIANT *));
   26c78:	687b      	ldr	r3, [r7, #4]
   26c7a:	681a      	ldr	r2, [r3, #0]
   26c7c:	887b      	ldrh	r3, [r7, #2]
   26c7e:	009b      	lsls	r3, r3, #2
   26c80:	4619      	mov	r1, r3
   26c82:	4610      	mov	r0, r2
   26c84:	f003 fa94 	bl	2a1b0 <realloc>
   26c88:	4602      	mov	r2, r0
   26c8a:	687b      	ldr	r3, [r7, #4]
   26c8c:	601a      	str	r2, [r3, #0]
            }
        }
        arr->capacity = capacity;
   26c8e:	687b      	ldr	r3, [r7, #4]
   26c90:	887a      	ldrh	r2, [r7, #2]
   26c92:	809a      	strh	r2, [r3, #4]
    }
}
   26c94:	bf00      	nop
   26c96:	3708      	adds	r7, #8
   26c98:	46bd      	mov	sp, r7
   26c9a:	bd80      	pop	{r7, pc}

00026c9c <va_push>:

//Push new data to the variantArray.
int va_push(variantArray * arr, dlmsVARIANT *item)
{
   26c9c:	b580      	push	{r7, lr}
   26c9e:	b084      	sub	sp, #16
   26ca0:	af00      	add	r7, sp, #0
   26ca2:	6078      	str	r0, [r7, #4]
   26ca4:	6039      	str	r1, [r7, #0]
    dlmsVARIANT ** p;
    if (!va_isAttached(arr))
   26ca6:	6878      	ldr	r0, [r7, #4]
   26ca8:	f7ff ff84 	bl	26bb4 <va_isAttached>
   26cac:	4603      	mov	r3, r0
   26cae:	2b00      	cmp	r3, #0
   26cb0:	d126      	bne.n	26d00 <va_push+0x64>
    {
        if (arr->size >= arr->capacity)
   26cb2:	687b      	ldr	r3, [r7, #4]
   26cb4:	88da      	ldrh	r2, [r3, #6]
   26cb6:	687b      	ldr	r3, [r7, #4]
   26cb8:	889b      	ldrh	r3, [r3, #4]
   26cba:	429a      	cmp	r2, r3
   26cbc:	d320      	bcc.n	26d00 <va_push+0x64>
        {
            arr->capacity += VECTOR_ARRAY_CAPACITY;
   26cbe:	687b      	ldr	r3, [r7, #4]
   26cc0:	889b      	ldrh	r3, [r3, #4]
   26cc2:	330a      	adds	r3, #10
   26cc4:	b29a      	uxth	r2, r3
   26cc6:	687b      	ldr	r3, [r7, #4]
   26cc8:	809a      	strh	r2, [r3, #4]
            if (arr->size == 0)
   26cca:	687b      	ldr	r3, [r7, #4]
   26ccc:	88db      	ldrh	r3, [r3, #6]
   26cce:	2b00      	cmp	r3, #0
   26cd0:	d10a      	bne.n	26ce8 <va_push+0x4c>
            {
                arr->data = (void**)gxmalloc(arr->capacity * sizeof(dlmsVARIANT *));
   26cd2:	687b      	ldr	r3, [r7, #4]
   26cd4:	889b      	ldrh	r3, [r3, #4]
   26cd6:	009b      	lsls	r3, r3, #2
   26cd8:	4618      	mov	r0, r3
   26cda:	f002 feb3 	bl	29a44 <malloc>
   26cde:	4603      	mov	r3, r0
   26ce0:	461a      	mov	r2, r3
   26ce2:	687b      	ldr	r3, [r7, #4]
   26ce4:	601a      	str	r2, [r3, #0]
   26ce6:	e00b      	b.n	26d00 <va_push+0x64>
            }
            else
            {
                arr->data = (void**)gxrealloc(arr->data, arr->capacity * sizeof(dlmsVARIANT *));
   26ce8:	687b      	ldr	r3, [r7, #4]
   26cea:	681a      	ldr	r2, [r3, #0]
   26cec:	687b      	ldr	r3, [r7, #4]
   26cee:	889b      	ldrh	r3, [r3, #4]
   26cf0:	009b      	lsls	r3, r3, #2
   26cf2:	4619      	mov	r1, r3
   26cf4:	4610      	mov	r0, r2
   26cf6:	f003 fa5b 	bl	2a1b0 <realloc>
   26cfa:	4602      	mov	r2, r0
   26cfc:	687b      	ldr	r3, [r7, #4]
   26cfe:	601a      	str	r2, [r3, #0]
            }
        }
    }
    if (va_getCapacity(arr) <= arr->size)
   26d00:	6878      	ldr	r0, [r7, #4]
   26d02:	f7ff ff67 	bl	26bd4 <va_getCapacity>
   26d06:	4603      	mov	r3, r0
   26d08:	461a      	mov	r2, r3
   26d0a:	687b      	ldr	r3, [r7, #4]
   26d0c:	88db      	ldrh	r3, [r3, #6]
   26d0e:	429a      	cmp	r2, r3
   26d10:	d802      	bhi.n	26d18 <va_push+0x7c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   26d12:	f44f 7382 	mov.w	r3, #260	; 0x104
   26d16:	e010      	b.n	26d3a <va_push+0x9e>
    }
    p = (dlmsVARIANT **)arr->data;
   26d18:	687b      	ldr	r3, [r7, #4]
   26d1a:	681b      	ldr	r3, [r3, #0]
   26d1c:	60fb      	str	r3, [r7, #12]
    p[arr->size] = item;
   26d1e:	687b      	ldr	r3, [r7, #4]
   26d20:	88db      	ldrh	r3, [r3, #6]
   26d22:	009b      	lsls	r3, r3, #2
   26d24:	68fa      	ldr	r2, [r7, #12]
   26d26:	4413      	add	r3, r2
   26d28:	683a      	ldr	r2, [r7, #0]
   26d2a:	601a      	str	r2, [r3, #0]
    ++arr->size;
   26d2c:	687b      	ldr	r3, [r7, #4]
   26d2e:	88db      	ldrh	r3, [r3, #6]
   26d30:	3301      	adds	r3, #1
   26d32:	b29a      	uxth	r2, r3
   26d34:	687b      	ldr	r3, [r7, #4]
   26d36:	80da      	strh	r2, [r3, #6]
    return 0;
   26d38:	2300      	movs	r3, #0
}
   26d3a:	4618      	mov	r0, r3
   26d3c:	3710      	adds	r7, #16
   26d3e:	46bd      	mov	sp, r7
   26d40:	bd80      	pop	{r7, pc}
   26d42:	bf00      	nop

00026d44 <va_clear>:

void va_clear(
    variantArray* arr)
{
   26d44:	b580      	push	{r7, lr}
   26d46:	b084      	sub	sp, #16
   26d48:	af00      	add	r7, sp, #0
   26d4a:	6078      	str	r0, [r7, #4]
    int pos;
    unsigned char attached = va_isAttached(arr);
   26d4c:	6878      	ldr	r0, [r7, #4]
   26d4e:	f7ff ff31 	bl	26bb4 <va_isAttached>
   26d52:	4603      	mov	r3, r0
   26d54:	72fb      	strb	r3, [r7, #11]
    if (arr->data != NULL && !attached)
   26d56:	687b      	ldr	r3, [r7, #4]
   26d58:	681b      	ldr	r3, [r3, #0]
   26d5a:	2b00      	cmp	r3, #0
   26d5c:	d028      	beq.n	26db0 <va_clear+0x6c>
   26d5e:	7afb      	ldrb	r3, [r7, #11]
   26d60:	2b00      	cmp	r3, #0
   26d62:	d125      	bne.n	26db0 <va_clear+0x6c>
    {
        for (pos = 0; pos != arr->size; ++pos)
   26d64:	2300      	movs	r3, #0
   26d66:	60fb      	str	r3, [r7, #12]
   26d68:	e014      	b.n	26d94 <va_clear+0x50>
        {
            var_clear((dlmsVARIANT *)arr->data[pos]);
   26d6a:	687b      	ldr	r3, [r7, #4]
   26d6c:	681a      	ldr	r2, [r3, #0]
   26d6e:	68fb      	ldr	r3, [r7, #12]
   26d70:	009b      	lsls	r3, r3, #2
   26d72:	4413      	add	r3, r2
   26d74:	681b      	ldr	r3, [r3, #0]
   26d76:	4618      	mov	r0, r3
   26d78:	f7ff f9e6 	bl	26148 <var_clear>
            gxfree(arr->data[pos]);
   26d7c:	687b      	ldr	r3, [r7, #4]
   26d7e:	681a      	ldr	r2, [r3, #0]
   26d80:	68fb      	ldr	r3, [r7, #12]
   26d82:	009b      	lsls	r3, r3, #2
   26d84:	4413      	add	r3, r2
   26d86:	681b      	ldr	r3, [r3, #0]
   26d88:	4618      	mov	r0, r3
   26d8a:	f002 fe63 	bl	29a54 <free>
{
    int pos;
    unsigned char attached = va_isAttached(arr);
    if (arr->data != NULL && !attached)
    {
        for (pos = 0; pos != arr->size; ++pos)
   26d8e:	68fb      	ldr	r3, [r7, #12]
   26d90:	3301      	adds	r3, #1
   26d92:	60fb      	str	r3, [r7, #12]
   26d94:	687b      	ldr	r3, [r7, #4]
   26d96:	88db      	ldrh	r3, [r3, #6]
   26d98:	461a      	mov	r2, r3
   26d9a:	68fb      	ldr	r3, [r7, #12]
   26d9c:	429a      	cmp	r2, r3
   26d9e:	d1e4      	bne.n	26d6a <va_clear+0x26>
        {
            var_clear((dlmsVARIANT *)arr->data[pos]);
            gxfree(arr->data[pos]);
        }
        gxfree(arr->data);
   26da0:	687b      	ldr	r3, [r7, #4]
   26da2:	681b      	ldr	r3, [r3, #0]
   26da4:	4618      	mov	r0, r3
   26da6:	f002 fe55 	bl	29a54 <free>
        arr->data = NULL;
   26daa:	687b      	ldr	r3, [r7, #4]
   26dac:	2200      	movs	r2, #0
   26dae:	601a      	str	r2, [r3, #0]
    }
    if (!attached)
   26db0:	7afb      	ldrb	r3, [r7, #11]
   26db2:	2b00      	cmp	r3, #0
   26db4:	d102      	bne.n	26dbc <va_clear+0x78>
    {
        arr->capacity = 0;
   26db6:	687b      	ldr	r3, [r7, #4]
   26db8:	2200      	movs	r2, #0
   26dba:	809a      	strh	r2, [r3, #4]
    }
    arr->size = 0;
   26dbc:	687b      	ldr	r3, [r7, #4]
   26dbe:	2200      	movs	r2, #0
   26dc0:	80da      	strh	r2, [r3, #6]
    arr->position = 0;
   26dc2:	687b      	ldr	r3, [r7, #4]
   26dc4:	2200      	movs	r2, #0
   26dc6:	811a      	strh	r2, [r3, #8]
}
   26dc8:	bf00      	nop
   26dca:	3710      	adds	r7, #16
   26dcc:	46bd      	mov	sp, r7
   26dce:	bd80      	pop	{r7, pc}

00026dd0 <va_attach>:

void va_attach(
    variantArray* trg,
    variantArray* src)
{
   26dd0:	b480      	push	{r7}
   26dd2:	b083      	sub	sp, #12
   26dd4:	af00      	add	r7, sp, #0
   26dd6:	6078      	str	r0, [r7, #4]
   26dd8:	6039      	str	r1, [r7, #0]
    trg->capacity = src->capacity;
   26dda:	683b      	ldr	r3, [r7, #0]
   26ddc:	889a      	ldrh	r2, [r3, #4]
   26dde:	687b      	ldr	r3, [r7, #4]
   26de0:	809a      	strh	r2, [r3, #4]
    trg->data = src->data;
   26de2:	683b      	ldr	r3, [r7, #0]
   26de4:	681a      	ldr	r2, [r3, #0]
   26de6:	687b      	ldr	r3, [r7, #4]
   26de8:	601a      	str	r2, [r3, #0]
    trg->position = src->position;
   26dea:	683b      	ldr	r3, [r7, #0]
   26dec:	891a      	ldrh	r2, [r3, #8]
   26dee:	687b      	ldr	r3, [r7, #4]
   26df0:	811a      	strh	r2, [r3, #8]
    trg->size = src->size;
   26df2:	683b      	ldr	r3, [r7, #0]
   26df4:	88da      	ldrh	r2, [r3, #6]
   26df6:	687b      	ldr	r3, [r7, #4]
   26df8:	80da      	strh	r2, [r3, #6]
    src->data = NULL;
   26dfa:	683b      	ldr	r3, [r7, #0]
   26dfc:	2200      	movs	r2, #0
   26dfe:	601a      	str	r2, [r3, #0]
    src->position = src->size = src->capacity = 0;
   26e00:	683b      	ldr	r3, [r7, #0]
   26e02:	2200      	movs	r2, #0
   26e04:	809a      	strh	r2, [r3, #4]
   26e06:	683b      	ldr	r3, [r7, #0]
   26e08:	889a      	ldrh	r2, [r3, #4]
   26e0a:	683b      	ldr	r3, [r7, #0]
   26e0c:	80da      	strh	r2, [r3, #6]
   26e0e:	683b      	ldr	r3, [r7, #0]
   26e10:	88da      	ldrh	r2, [r3, #6]
   26e12:	683b      	ldr	r3, [r7, #0]
   26e14:	811a      	strh	r2, [r3, #8]
}
   26e16:	bf00      	nop
   26e18:	370c      	adds	r7, #12
   26e1a:	46bd      	mov	sp, r7
   26e1c:	bc80      	pop	{r7}
   26e1e:	4770      	bx	lr

00026e20 <va_get>:

//Get item from variant array.
int va_get(variantArray* arr, dlmsVARIANT ** item)
{
   26e20:	b480      	push	{r7}
   26e22:	b085      	sub	sp, #20
   26e24:	af00      	add	r7, sp, #0
   26e26:	6078      	str	r0, [r7, #4]
   26e28:	6039      	str	r1, [r7, #0]
    dlmsVARIANT ** p;
    if (arr->position >= arr->size)
   26e2a:	687b      	ldr	r3, [r7, #4]
   26e2c:	891a      	ldrh	r2, [r3, #8]
   26e2e:	687b      	ldr	r3, [r7, #4]
   26e30:	88db      	ldrh	r3, [r3, #6]
   26e32:	429a      	cmp	r2, r3
   26e34:	d302      	bcc.n	26e3c <va_get+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   26e36:	f44f 7382 	mov.w	r3, #260	; 0x104
   26e3a:	e011      	b.n	26e60 <va_get+0x40>
    }
    p = (dlmsVARIANT **)arr->data;
   26e3c:	687b      	ldr	r3, [r7, #4]
   26e3e:	681b      	ldr	r3, [r3, #0]
   26e40:	60fb      	str	r3, [r7, #12]
    *item = p[arr->position];
   26e42:	687b      	ldr	r3, [r7, #4]
   26e44:	891b      	ldrh	r3, [r3, #8]
   26e46:	009b      	lsls	r3, r3, #2
   26e48:	68fa      	ldr	r2, [r7, #12]
   26e4a:	4413      	add	r3, r2
   26e4c:	681a      	ldr	r2, [r3, #0]
   26e4e:	683b      	ldr	r3, [r7, #0]
   26e50:	601a      	str	r2, [r3, #0]
    ++arr->position;
   26e52:	687b      	ldr	r3, [r7, #4]
   26e54:	891b      	ldrh	r3, [r3, #8]
   26e56:	3301      	adds	r3, #1
   26e58:	b29a      	uxth	r2, r3
   26e5a:	687b      	ldr	r3, [r7, #4]
   26e5c:	811a      	strh	r2, [r3, #8]
    return DLMS_ERROR_CODE_OK;
   26e5e:	2300      	movs	r3, #0
}
   26e60:	4618      	mov	r0, r3
   26e62:	3714      	adds	r7, #20
   26e64:	46bd      	mov	sp, r7
   26e66:	bc80      	pop	{r7}
   26e68:	4770      	bx	lr
   26e6a:	bf00      	nop

00026e6c <va_getByIndex>:


//Get item from variant array by index.
int va_getByIndex(variantArray* arr, int index, dlmsVARIANT ** item)
{
   26e6c:	b480      	push	{r7}
   26e6e:	b087      	sub	sp, #28
   26e70:	af00      	add	r7, sp, #0
   26e72:	60f8      	str	r0, [r7, #12]
   26e74:	60b9      	str	r1, [r7, #8]
   26e76:	607a      	str	r2, [r7, #4]
    dlmsVARIANT ** p;
    if (index >= arr->size)
   26e78:	68fb      	ldr	r3, [r7, #12]
   26e7a:	88db      	ldrh	r3, [r3, #6]
   26e7c:	461a      	mov	r2, r3
   26e7e:	68bb      	ldr	r3, [r7, #8]
   26e80:	429a      	cmp	r2, r3
   26e82:	dc02      	bgt.n	26e8a <va_getByIndex+0x1e>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   26e84:	f44f 7382 	mov.w	r3, #260	; 0x104
   26e88:	e00a      	b.n	26ea0 <va_getByIndex+0x34>
    }
    p = (dlmsVARIANT **)arr->data;
   26e8a:	68fb      	ldr	r3, [r7, #12]
   26e8c:	681b      	ldr	r3, [r3, #0]
   26e8e:	617b      	str	r3, [r7, #20]
    *item = p[index];
   26e90:	68bb      	ldr	r3, [r7, #8]
   26e92:	009b      	lsls	r3, r3, #2
   26e94:	697a      	ldr	r2, [r7, #20]
   26e96:	4413      	add	r3, r2
   26e98:	681a      	ldr	r2, [r3, #0]
   26e9a:	687b      	ldr	r3, [r7, #4]
   26e9c:	601a      	str	r2, [r3, #0]
    return DLMS_ERROR_CODE_OK;
   26e9e:	2300      	movs	r3, #0
}
   26ea0:	4618      	mov	r0, r3
   26ea2:	371c      	adds	r7, #28
   26ea4:	46bd      	mov	sp, r7
   26ea6:	bc80      	pop	{r7}
   26ea8:	4770      	bx	lr
   26eaa:	bf00      	nop

00026eac <var_toString>:
    return ret;
}

//Note! var_toString do not clear existing bytearray.
int var_toString(dlmsVARIANT *item, gxByteBuffer* value)
{
   26eac:	b580      	push	{r7, lr}
   26eae:	b088      	sub	sp, #32
   26eb0:	af00      	add	r7, sp, #0
   26eb2:	6078      	str	r0, [r7, #4]
   26eb4:	6039      	str	r1, [r7, #0]
    int ret = DLMS_ERROR_CODE_OK;
   26eb6:	2300      	movs	r3, #0
   26eb8:	61fb      	str	r3, [r7, #28]
    dlmsVARIANT tmp;
    var_init(&tmp);
   26eba:	f107 0308 	add.w	r3, r7, #8
   26ebe:	4618      	mov	r0, r3
   26ec0:	f7ff f932 	bl	26128 <var_init>
    ret = var_copy(&tmp, item);
   26ec4:	f107 0308 	add.w	r3, r7, #8
   26ec8:	6879      	ldr	r1, [r7, #4]
   26eca:	4618      	mov	r0, r3
   26ecc:	f000 ff52 	bl	27d74 <var_copy>
   26ed0:	61f8      	str	r0, [r7, #28]
    if (ret == 0)
   26ed2:	69fb      	ldr	r3, [r7, #28]
   26ed4:	2b00      	cmp	r3, #0
   26ed6:	d114      	bne.n	26f02 <var_toString+0x56>
    {
        ret = var_changeType(&tmp, DLMS_DATA_TYPE_STRING);
   26ed8:	f107 0308 	add.w	r3, r7, #8
   26edc:	210a      	movs	r1, #10
   26ede:	4618      	mov	r0, r3
   26ee0:	f000 fd66 	bl	279b0 <var_changeType>
   26ee4:	61f8      	str	r0, [r7, #28]
        if (ret == 0 && tmp.strVal != NULL)
   26ee6:	69fb      	ldr	r3, [r7, #28]
   26ee8:	2b00      	cmp	r3, #0
   26eea:	d10a      	bne.n	26f02 <var_toString+0x56>
   26eec:	693b      	ldr	r3, [r7, #16]
   26eee:	2b00      	cmp	r3, #0
   26ef0:	d007      	beq.n	26f02 <var_toString+0x56>
        {
            bb_set(value, tmp.strVal->data, tmp.strVal->size);
   26ef2:	693b      	ldr	r3, [r7, #16]
   26ef4:	6819      	ldr	r1, [r3, #0]
   26ef6:	693b      	ldr	r3, [r7, #16]
   26ef8:	88db      	ldrh	r3, [r3, #6]
   26efa:	461a      	mov	r2, r3
   26efc:	6838      	ldr	r0, [r7, #0]
   26efe:	f7dc fb2f 	bl	3560 <bb_set>
        }
    }
    var_clear(&tmp);
   26f02:	f107 0308 	add.w	r3, r7, #8
   26f06:	4618      	mov	r0, r3
   26f08:	f7ff f91e 	bl	26148 <var_clear>
    return ret;
   26f0c:	69fb      	ldr	r3, [r7, #28]
}
   26f0e:	4618      	mov	r0, r3
   26f10:	3720      	adds	r7, #32
   26f12:	46bd      	mov	sp, r7
   26f14:	bd80      	pop	{r7, pc}
   26f16:	bf00      	nop

00026f18 <convert>:
    }
    return ret;
}

static int convert(dlmsVARIANT *item, DLMS_DATA_TYPE type)
{
   26f18:	b590      	push	{r4, r7, lr}
   26f1a:	b0d5      	sub	sp, #340	; 0x154
   26f1c:	af02      	add	r7, sp, #8
   26f1e:	1d3b      	adds	r3, r7, #4
   26f20:	6018      	str	r0, [r3, #0]
   26f22:	460a      	mov	r2, r1
   26f24:	1cfb      	adds	r3, r7, #3
   26f26:	701a      	strb	r2, [r3, #0]
    int ret, fromSize, toSize;
    unsigned short pos;
    char buff[250];
    dlmsVARIANT tmp, tmp3;
    dlmsVARIANT *it;
    if (item->vt == type)
   26f28:	1d3b      	adds	r3, r7, #4
   26f2a:	681b      	ldr	r3, [r3, #0]
   26f2c:	781b      	ldrb	r3, [r3, #0]
   26f2e:	1cfa      	adds	r2, r7, #3
   26f30:	7812      	ldrb	r2, [r2, #0]
   26f32:	429a      	cmp	r2, r3
   26f34:	d102      	bne.n	26f3c <convert+0x24>
    {
        return DLMS_ERROR_CODE_OK;
   26f36:	2300      	movs	r3, #0
   26f38:	f000 bd31 	b.w	2799e <convert+0xa86>
    }
    var_init(&tmp);
   26f3c:	f107 0320 	add.w	r3, r7, #32
   26f40:	4618      	mov	r0, r3
   26f42:	f7ff f8f1 	bl	26128 <var_init>
    var_init(&tmp3);
   26f46:	f107 0310 	add.w	r3, r7, #16
   26f4a:	4618      	mov	r0, r3
   26f4c:	f7ff f8ec 	bl	26128 <var_init>
    ret = var_copy(&tmp, item);
   26f50:	1d3b      	adds	r3, r7, #4
   26f52:	f107 0220 	add.w	r2, r7, #32
   26f56:	6819      	ldr	r1, [r3, #0]
   26f58:	4610      	mov	r0, r2
   26f5a:	f000 ff0b 	bl	27d74 <var_copy>
   26f5e:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
    if (ret != DLMS_ERROR_CODE_OK)
   26f62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   26f66:	2b00      	cmp	r3, #0
   26f68:	d003      	beq.n	26f72 <convert+0x5a>
    {
        return ret;
   26f6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   26f6e:	f000 bd16 	b.w	2799e <convert+0xa86>
    }
    var_clear(item);
   26f72:	1d3b      	adds	r3, r7, #4
   26f74:	6818      	ldr	r0, [r3, #0]
   26f76:	f7ff f8e7 	bl	26148 <var_clear>
    if (type == DLMS_DATA_TYPE_STRING)
   26f7a:	1cfb      	adds	r3, r7, #3
   26f7c:	781b      	ldrb	r3, [r3, #0]
   26f7e:	2b0a      	cmp	r3, #10
   26f80:	f040 830e 	bne.w	275a0 <convert+0x688>
    {
        item->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   26f84:	200c      	movs	r0, #12
   26f86:	f002 fd5d 	bl	29a44 <malloc>
   26f8a:	4603      	mov	r3, r0
   26f8c:	461a      	mov	r2, r3
   26f8e:	1d3b      	adds	r3, r7, #4
   26f90:	681b      	ldr	r3, [r3, #0]
   26f92:	609a      	str	r2, [r3, #8]
        bb_init(item->strVal);
   26f94:	1d3b      	adds	r3, r7, #4
   26f96:	681b      	ldr	r3, [r3, #0]
   26f98:	689b      	ldr	r3, [r3, #8]
   26f9a:	4618      	mov	r0, r3
   26f9c:	f7db fea4 	bl	2ce8 <bb_init>
        if (tmp.vt == DLMS_DATA_TYPE_ARRAY || tmp.vt == DLMS_DATA_TYPE_STRUCTURE)
   26fa0:	f107 0320 	add.w	r3, r7, #32
   26fa4:	781b      	ldrb	r3, [r3, #0]
   26fa6:	2b01      	cmp	r3, #1
   26fa8:	d005      	beq.n	26fb6 <convert+0x9e>
   26faa:	f107 0320 	add.w	r3, r7, #32
   26fae:	781b      	ldrb	r3, [r3, #0]
   26fb0:	2b02      	cmp	r3, #2
   26fb2:	f040 8081 	bne.w	270b8 <convert+0x1a0>
        {
            bb_setUInt8(item->strVal, '{');
   26fb6:	1d3b      	adds	r3, r7, #4
   26fb8:	681b      	ldr	r3, [r3, #0]
   26fba:	689b      	ldr	r3, [r3, #8]
   26fbc:	217b      	movs	r1, #123	; 0x7b
   26fbe:	4618      	mov	r0, r3
   26fc0:	f7db ff28 	bl	2e14 <bb_setUInt8>
            for (pos = 0; pos != tmp.Arr->size; ++pos)
   26fc4:	2300      	movs	r3, #0
   26fc6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   26fca:	e059      	b.n	27080 <convert+0x168>
            {
                ret = va_get(tmp.Arr, &it);
   26fcc:	f107 0320 	add.w	r3, r7, #32
   26fd0:	689b      	ldr	r3, [r3, #8]
   26fd2:	f107 020c 	add.w	r2, r7, #12
   26fd6:	4611      	mov	r1, r2
   26fd8:	4618      	mov	r0, r3
   26fda:	f7ff ff21 	bl	26e20 <va_get>
   26fde:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
                if (ret != DLMS_ERROR_CODE_OK)
   26fe2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   26fe6:	2b00      	cmp	r3, #0
   26fe8:	d003      	beq.n	26ff2 <convert+0xda>
                {
                    return ret;
   26fea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   26fee:	f000 bcd6 	b.w	2799e <convert+0xa86>
                }
                if (pos != 0)
   26ff2:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   26ff6:	2b00      	cmp	r3, #0
   26ff8:	d00d      	beq.n	27016 <convert+0xfe>
                {
                    bb_setUInt8(item->strVal, ',');
   26ffa:	1d3b      	adds	r3, r7, #4
   26ffc:	681b      	ldr	r3, [r3, #0]
   26ffe:	689b      	ldr	r3, [r3, #8]
   27000:	212c      	movs	r1, #44	; 0x2c
   27002:	4618      	mov	r0, r3
   27004:	f7db ff06 	bl	2e14 <bb_setUInt8>
                    bb_setUInt8(item->strVal, ' ');
   27008:	1d3b      	adds	r3, r7, #4
   2700a:	681b      	ldr	r3, [r3, #0]
   2700c:	689b      	ldr	r3, [r3, #8]
   2700e:	2120      	movs	r1, #32
   27010:	4618      	mov	r0, r3
   27012:	f7db feff 	bl	2e14 <bb_setUInt8>
                }
                ret = var_copy(&tmp3, it);
   27016:	f107 030c 	add.w	r3, r7, #12
   2701a:	681a      	ldr	r2, [r3, #0]
   2701c:	f107 0310 	add.w	r3, r7, #16
   27020:	4611      	mov	r1, r2
   27022:	4618      	mov	r0, r3
   27024:	f000 fea6 	bl	27d74 <var_copy>
   27028:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
                if (ret != DLMS_ERROR_CODE_OK)
   2702c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   27030:	2b00      	cmp	r3, #0
   27032:	d003      	beq.n	2703c <convert+0x124>
                {
                    return ret;
   27034:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   27038:	f000 bcb1 	b.w	2799e <convert+0xa86>
                }
                ret = var_toString(&tmp3, item->strVal);
   2703c:	1d3b      	adds	r3, r7, #4
   2703e:	681b      	ldr	r3, [r3, #0]
   27040:	689a      	ldr	r2, [r3, #8]
   27042:	f107 0310 	add.w	r3, r7, #16
   27046:	4611      	mov	r1, r2
   27048:	4618      	mov	r0, r3
   2704a:	f7ff ff2f 	bl	26eac <var_toString>
   2704e:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
                var_clear(&tmp3);
   27052:	f107 0310 	add.w	r3, r7, #16
   27056:	4618      	mov	r0, r3
   27058:	f7ff f876 	bl	26148 <var_clear>
                if (ret != DLMS_ERROR_CODE_OK)
   2705c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   27060:	2b00      	cmp	r3, #0
   27062:	d008      	beq.n	27076 <convert+0x15e>
                {
                    var_clear(&tmp);
   27064:	f107 0320 	add.w	r3, r7, #32
   27068:	4618      	mov	r0, r3
   2706a:	f7ff f86d 	bl	26148 <var_clear>
                    return ret;
   2706e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   27072:	f000 bc94 	b.w	2799e <convert+0xa86>
        item->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
        bb_init(item->strVal);
        if (tmp.vt == DLMS_DATA_TYPE_ARRAY || tmp.vt == DLMS_DATA_TYPE_STRUCTURE)
        {
            bb_setUInt8(item->strVal, '{');
            for (pos = 0; pos != tmp.Arr->size; ++pos)
   27076:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   2707a:	3301      	adds	r3, #1
   2707c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   27080:	f107 0320 	add.w	r3, r7, #32
   27084:	689b      	ldr	r3, [r3, #8]
   27086:	88db      	ldrh	r3, [r3, #6]
   27088:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
   2708c:	429a      	cmp	r2, r3
   2708e:	d19d      	bne.n	26fcc <convert+0xb4>
                {
                    var_clear(&tmp);
                    return ret;
                }
            }
            bb_setUInt8(item->strVal, '}');
   27090:	1d3b      	adds	r3, r7, #4
   27092:	681b      	ldr	r3, [r3, #0]
   27094:	689b      	ldr	r3, [r3, #8]
   27096:	217d      	movs	r1, #125	; 0x7d
   27098:	4618      	mov	r0, r3
   2709a:	f7db febb 	bl	2e14 <bb_setUInt8>
            item->vt = type;
   2709e:	1d3b      	adds	r3, r7, #4
   270a0:	681b      	ldr	r3, [r3, #0]
   270a2:	1cfa      	adds	r2, r7, #3
   270a4:	7812      	ldrb	r2, [r2, #0]
   270a6:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   270a8:	f107 0320 	add.w	r3, r7, #32
   270ac:	4618      	mov	r0, r3
   270ae:	f7ff f84b 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   270b2:	2300      	movs	r3, #0
   270b4:	f000 bc73 	b.w	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_BOOLEAN)
   270b8:	f107 0320 	add.w	r3, r7, #32
   270bc:	781b      	ldrb	r3, [r3, #0]
   270be:	2b03      	cmp	r3, #3
   270c0:	d120      	bne.n	27104 <convert+0x1ec>
        {
            if (tmp.boolVal == 0)
   270c2:	f107 0320 	add.w	r3, r7, #32
   270c6:	7a1b      	ldrb	r3, [r3, #8]
   270c8:	2b00      	cmp	r3, #0
   270ca:	d107      	bne.n	270dc <convert+0x1c4>
            {
                bb_addString(item->strVal, "False");
   270cc:	1d3b      	adds	r3, r7, #4
   270ce:	681b      	ldr	r3, [r3, #0]
   270d0:	689b      	ldr	r3, [r3, #8]
   270d2:	49ca      	ldr	r1, [pc, #808]	; (273fc <convert+0x4e4>)
   270d4:	4618      	mov	r0, r3
   270d6:	f7dc fad9 	bl	368c <bb_addString>
   270da:	e006      	b.n	270ea <convert+0x1d2>
            }
            else
            {
                bb_addString(item->strVal, "True");
   270dc:	1d3b      	adds	r3, r7, #4
   270de:	681b      	ldr	r3, [r3, #0]
   270e0:	689b      	ldr	r3, [r3, #8]
   270e2:	49c7      	ldr	r1, [pc, #796]	; (27400 <convert+0x4e8>)
   270e4:	4618      	mov	r0, r3
   270e6:	f7dc fad1 	bl	368c <bb_addString>
            }
            item->vt = type;
   270ea:	1d3b      	adds	r3, r7, #4
   270ec:	681b      	ldr	r3, [r3, #0]
   270ee:	1cfa      	adds	r2, r7, #3
   270f0:	7812      	ldrb	r2, [r2, #0]
   270f2:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   270f4:	f107 0320 	add.w	r3, r7, #32
   270f8:	4618      	mov	r0, r3
   270fa:	f7ff f825 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   270fe:	2300      	movs	r3, #0
   27100:	f000 bc4d 	b.w	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_INT32)
   27104:	f107 0320 	add.w	r3, r7, #32
   27108:	781b      	ldrb	r3, [r3, #0]
   2710a:	2b05      	cmp	r3, #5
   2710c:	d11e      	bne.n	2714c <convert+0x234>
        {
            hlp_intToString(buff, 250, tmp.lVal, 1);
   2710e:	f107 0320 	add.w	r3, r7, #32
   27112:	689a      	ldr	r2, [r3, #8]
   27114:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27118:	2301      	movs	r3, #1
   2711a:	21fa      	movs	r1, #250	; 0xfa
   2711c:	f7fa fd72 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   27120:	1d3b      	adds	r3, r7, #4
   27122:	681b      	ldr	r3, [r3, #0]
   27124:	689b      	ldr	r3, [r3, #8]
   27126:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2712a:	4611      	mov	r1, r2
   2712c:	4618      	mov	r0, r3
   2712e:	f7dc faad 	bl	368c <bb_addString>
            item->vt = type;
   27132:	1d3b      	adds	r3, r7, #4
   27134:	681b      	ldr	r3, [r3, #0]
   27136:	1cfa      	adds	r2, r7, #3
   27138:	7812      	ldrb	r2, [r2, #0]
   2713a:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2713c:	f107 0320 	add.w	r3, r7, #32
   27140:	4618      	mov	r0, r3
   27142:	f7ff f801 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27146:	2300      	movs	r3, #0
   27148:	f000 bc29 	b.w	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_UINT32)
   2714c:	f107 0320 	add.w	r3, r7, #32
   27150:	781b      	ldrb	r3, [r3, #0]
   27152:	2b06      	cmp	r3, #6
   27154:	d11f      	bne.n	27196 <convert+0x27e>
        {
            hlp_intToString(buff, 250, tmp.ulVal, 0);
   27156:	f107 0320 	add.w	r3, r7, #32
   2715a:	689b      	ldr	r3, [r3, #8]
   2715c:	461a      	mov	r2, r3
   2715e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27162:	2300      	movs	r3, #0
   27164:	21fa      	movs	r1, #250	; 0xfa
   27166:	f7fa fd4d 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   2716a:	1d3b      	adds	r3, r7, #4
   2716c:	681b      	ldr	r3, [r3, #0]
   2716e:	689b      	ldr	r3, [r3, #8]
   27170:	f107 0230 	add.w	r2, r7, #48	; 0x30
   27174:	4611      	mov	r1, r2
   27176:	4618      	mov	r0, r3
   27178:	f7dc fa88 	bl	368c <bb_addString>
            item->vt = type;
   2717c:	1d3b      	adds	r3, r7, #4
   2717e:	681b      	ldr	r3, [r3, #0]
   27180:	1cfa      	adds	r2, r7, #3
   27182:	7812      	ldrb	r2, [r2, #0]
   27184:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27186:	f107 0320 	add.w	r3, r7, #32
   2718a:	4618      	mov	r0, r3
   2718c:	f7fe ffdc 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27190:	2300      	movs	r3, #0
   27192:	f000 bc04 	b.w	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_INT8)
   27196:	f107 0320 	add.w	r3, r7, #32
   2719a:	781b      	ldrb	r3, [r3, #0]
   2719c:	2b0f      	cmp	r3, #15
   2719e:	d11f      	bne.n	271e0 <convert+0x2c8>
        {
            hlp_intToString(buff, 250, tmp.cVal, 1);
   271a0:	f107 0320 	add.w	r3, r7, #32
   271a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
   271a8:	461a      	mov	r2, r3
   271aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
   271ae:	2301      	movs	r3, #1
   271b0:	21fa      	movs	r1, #250	; 0xfa
   271b2:	f7fa fd27 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   271b6:	1d3b      	adds	r3, r7, #4
   271b8:	681b      	ldr	r3, [r3, #0]
   271ba:	689b      	ldr	r3, [r3, #8]
   271bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   271c0:	4611      	mov	r1, r2
   271c2:	4618      	mov	r0, r3
   271c4:	f7dc fa62 	bl	368c <bb_addString>
            item->vt = type;
   271c8:	1d3b      	adds	r3, r7, #4
   271ca:	681b      	ldr	r3, [r3, #0]
   271cc:	1cfa      	adds	r2, r7, #3
   271ce:	7812      	ldrb	r2, [r2, #0]
   271d0:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   271d2:	f107 0320 	add.w	r3, r7, #32
   271d6:	4618      	mov	r0, r3
   271d8:	f7fe ffb6 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   271dc:	2300      	movs	r3, #0
   271de:	e3de      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_INT16)
   271e0:	f107 0320 	add.w	r3, r7, #32
   271e4:	781b      	ldrb	r3, [r3, #0]
   271e6:	2b10      	cmp	r3, #16
   271e8:	d11f      	bne.n	2722a <convert+0x312>
        {
            hlp_intToString(buff, 250, tmp.iVal, 1);
   271ea:	f107 0320 	add.w	r3, r7, #32
   271ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   271f2:	461a      	mov	r2, r3
   271f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   271f8:	2301      	movs	r3, #1
   271fa:	21fa      	movs	r1, #250	; 0xfa
   271fc:	f7fa fd02 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   27200:	1d3b      	adds	r3, r7, #4
   27202:	681b      	ldr	r3, [r3, #0]
   27204:	689b      	ldr	r3, [r3, #8]
   27206:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2720a:	4611      	mov	r1, r2
   2720c:	4618      	mov	r0, r3
   2720e:	f7dc fa3d 	bl	368c <bb_addString>
            item->vt = type;
   27212:	1d3b      	adds	r3, r7, #4
   27214:	681b      	ldr	r3, [r3, #0]
   27216:	1cfa      	adds	r2, r7, #3
   27218:	7812      	ldrb	r2, [r2, #0]
   2721a:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2721c:	f107 0320 	add.w	r3, r7, #32
   27220:	4618      	mov	r0, r3
   27222:	f7fe ff91 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27226:	2300      	movs	r3, #0
   27228:	e3b9      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_UINT8)
   2722a:	f107 0320 	add.w	r3, r7, #32
   2722e:	781b      	ldrb	r3, [r3, #0]
   27230:	2b11      	cmp	r3, #17
   27232:	d11e      	bne.n	27272 <convert+0x35a>
        {
            hlp_intToString(buff, 250, tmp.bVal, 0);
   27234:	f107 0320 	add.w	r3, r7, #32
   27238:	7a1b      	ldrb	r3, [r3, #8]
   2723a:	461a      	mov	r2, r3
   2723c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27240:	2300      	movs	r3, #0
   27242:	21fa      	movs	r1, #250	; 0xfa
   27244:	f7fa fcde 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   27248:	1d3b      	adds	r3, r7, #4
   2724a:	681b      	ldr	r3, [r3, #0]
   2724c:	689b      	ldr	r3, [r3, #8]
   2724e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   27252:	4611      	mov	r1, r2
   27254:	4618      	mov	r0, r3
   27256:	f7dc fa19 	bl	368c <bb_addString>
            item->vt = type;
   2725a:	1d3b      	adds	r3, r7, #4
   2725c:	681b      	ldr	r3, [r3, #0]
   2725e:	1cfa      	adds	r2, r7, #3
   27260:	7812      	ldrb	r2, [r2, #0]
   27262:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27264:	f107 0320 	add.w	r3, r7, #32
   27268:	4618      	mov	r0, r3
   2726a:	f7fe ff6d 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2726e:	2300      	movs	r3, #0
   27270:	e395      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_UINT16)
   27272:	f107 0320 	add.w	r3, r7, #32
   27276:	781b      	ldrb	r3, [r3, #0]
   27278:	2b12      	cmp	r3, #18
   2727a:	d11e      	bne.n	272ba <convert+0x3a2>
        {
            hlp_intToString(buff, 250, tmp.uiVal, 0);
   2727c:	f107 0320 	add.w	r3, r7, #32
   27280:	891b      	ldrh	r3, [r3, #8]
   27282:	461a      	mov	r2, r3
   27284:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27288:	2300      	movs	r3, #0
   2728a:	21fa      	movs	r1, #250	; 0xfa
   2728c:	f7fa fcba 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   27290:	1d3b      	adds	r3, r7, #4
   27292:	681b      	ldr	r3, [r3, #0]
   27294:	689b      	ldr	r3, [r3, #8]
   27296:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2729a:	4611      	mov	r1, r2
   2729c:	4618      	mov	r0, r3
   2729e:	f7dc f9f5 	bl	368c <bb_addString>
            item->vt = type;
   272a2:	1d3b      	adds	r3, r7, #4
   272a4:	681b      	ldr	r3, [r3, #0]
   272a6:	1cfa      	adds	r2, r7, #3
   272a8:	7812      	ldrb	r2, [r2, #0]
   272aa:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   272ac:	f107 0320 	add.w	r3, r7, #32
   272b0:	4618      	mov	r0, r3
   272b2:	f7fe ff49 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   272b6:	2300      	movs	r3, #0
   272b8:	e371      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_INT64)
   272ba:	f107 0320 	add.w	r3, r7, #32
   272be:	781b      	ldrb	r3, [r3, #0]
   272c0:	2b14      	cmp	r3, #20
   272c2:	d123      	bne.n	2730c <convert+0x3f4>
        {
            hlp_int64ToString(buff, 250, tmp.uiVal, 1);
   272c4:	f107 0320 	add.w	r3, r7, #32
   272c8:	891b      	ldrh	r3, [r3, #8]
   272ca:	b29b      	uxth	r3, r3
   272cc:	f04f 0400 	mov.w	r4, #0
   272d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
   272d4:	2201      	movs	r2, #1
   272d6:	9200      	str	r2, [sp, #0]
   272d8:	461a      	mov	r2, r3
   272da:	4623      	mov	r3, r4
   272dc:	21fa      	movs	r1, #250	; 0xfa
   272de:	f7fa fd3f 	bl	21d60 <hlp_int64ToString>
            bb_addString(item->strVal, buff);
   272e2:	1d3b      	adds	r3, r7, #4
   272e4:	681b      	ldr	r3, [r3, #0]
   272e6:	689b      	ldr	r3, [r3, #8]
   272e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   272ec:	4611      	mov	r1, r2
   272ee:	4618      	mov	r0, r3
   272f0:	f7dc f9cc 	bl	368c <bb_addString>
            item->vt = type;
   272f4:	1d3b      	adds	r3, r7, #4
   272f6:	681b      	ldr	r3, [r3, #0]
   272f8:	1cfa      	adds	r2, r7, #3
   272fa:	7812      	ldrb	r2, [r2, #0]
   272fc:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   272fe:	f107 0320 	add.w	r3, r7, #32
   27302:	4618      	mov	r0, r3
   27304:	f7fe ff20 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27308:	2300      	movs	r3, #0
   2730a:	e348      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_UINT64)
   2730c:	f107 0320 	add.w	r3, r7, #32
   27310:	781b      	ldrb	r3, [r3, #0]
   27312:	2b15      	cmp	r3, #21
   27314:	d125      	bne.n	27362 <convert+0x44a>
        {
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
   27316:	f107 0320 	add.w	r3, r7, #32
   2731a:	f103 0408 	add.w	r4, r3, #8
   2731e:	e9d4 3400 	ldrd	r3, r4, [r4]
   27322:	4619      	mov	r1, r3
   27324:	4622      	mov	r2, r4
   27326:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2732a:	2300      	movs	r3, #0
   2732c:	9300      	str	r3, [sp, #0]
   2732e:	4613      	mov	r3, r2
   27330:	460a      	mov	r2, r1
   27332:	21fa      	movs	r1, #250	; 0xfa
   27334:	f7fa fd14 	bl	21d60 <hlp_int64ToString>
            bb_addString(item->strVal, buff);
   27338:	1d3b      	adds	r3, r7, #4
   2733a:	681b      	ldr	r3, [r3, #0]
   2733c:	689b      	ldr	r3, [r3, #8]
   2733e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   27342:	4611      	mov	r1, r2
   27344:	4618      	mov	r0, r3
   27346:	f7dc f9a1 	bl	368c <bb_addString>
            item->vt = type;
   2734a:	1d3b      	adds	r3, r7, #4
   2734c:	681b      	ldr	r3, [r3, #0]
   2734e:	1cfa      	adds	r2, r7, #3
   27350:	7812      	ldrb	r2, [r2, #0]
   27352:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27354:	f107 0320 	add.w	r3, r7, #32
   27358:	4618      	mov	r0, r3
   2735a:	f7fe fef5 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2735e:	2300      	movs	r3, #0
   27360:	e31d      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_ENUM)
   27362:	f107 0320 	add.w	r3, r7, #32
   27366:	781b      	ldrb	r3, [r3, #0]
   27368:	2b16      	cmp	r3, #22
   2736a:	d11e      	bne.n	273aa <convert+0x492>
        {
            hlp_intToString(buff, 250, tmp.bVal, 0);
   2736c:	f107 0320 	add.w	r3, r7, #32
   27370:	7a1b      	ldrb	r3, [r3, #8]
   27372:	461a      	mov	r2, r3
   27374:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27378:	2300      	movs	r3, #0
   2737a:	21fa      	movs	r1, #250	; 0xfa
   2737c:	f7fa fc42 	bl	21c04 <hlp_intToString>
            bb_addString(item->strVal, buff);
   27380:	1d3b      	adds	r3, r7, #4
   27382:	681b      	ldr	r3, [r3, #0]
   27384:	689b      	ldr	r3, [r3, #8]
   27386:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2738a:	4611      	mov	r1, r2
   2738c:	4618      	mov	r0, r3
   2738e:	f7dc f97d 	bl	368c <bb_addString>
            item->vt = type;
   27392:	1d3b      	adds	r3, r7, #4
   27394:	681b      	ldr	r3, [r3, #0]
   27396:	1cfa      	adds	r2, r7, #3
   27398:	7812      	ldrb	r2, [r2, #0]
   2739a:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2739c:	f107 0320 	add.w	r3, r7, #32
   273a0:	4618      	mov	r0, r3
   273a2:	f7fe fed1 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   273a6:	2300      	movs	r3, #0
   273a8:	e2f9      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_FLOAT32)
   273aa:	f107 0320 	add.w	r3, r7, #32
   273ae:	781b      	ldrb	r3, [r3, #0]
   273b0:	2b17      	cmp	r3, #23
   273b2:	d129      	bne.n	27408 <convert+0x4f0>
        {
#ifndef GX_DLMS_MICROCONTROLLER
#if _MSC_VER > 1000
            sprintf_s(buff, 250, "%f", tmp.fltVal);
#else
            sprintf(buff, "%f", tmp.fltVal);
   273b4:	f107 0320 	add.w	r3, r7, #32
   273b8:	689b      	ldr	r3, [r3, #8]
   273ba:	4618      	mov	r0, r3
   273bc:	f7d9 f81c 	bl	3f8 <__aeabi_f2d>
   273c0:	4603      	mov	r3, r0
   273c2:	460c      	mov	r4, r1
   273c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   273c8:	461a      	mov	r2, r3
   273ca:	4623      	mov	r3, r4
   273cc:	490d      	ldr	r1, [pc, #52]	; (27404 <convert+0x4ec>)
   273ce:	f002 ff07 	bl	2a1e0 <siprintf>
#endif
            bb_addString(item->strVal, buff);
   273d2:	1d3b      	adds	r3, r7, #4
   273d4:	681b      	ldr	r3, [r3, #0]
   273d6:	689b      	ldr	r3, [r3, #8]
   273d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   273dc:	4611      	mov	r1, r2
   273de:	4618      	mov	r0, r3
   273e0:	f7dc f954 	bl	368c <bb_addString>
            item->vt = type;
   273e4:	1d3b      	adds	r3, r7, #4
   273e6:	681b      	ldr	r3, [r3, #0]
   273e8:	1cfa      	adds	r2, r7, #3
   273ea:	7812      	ldrb	r2, [r2, #0]
   273ec:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   273ee:	f107 0320 	add.w	r3, r7, #32
   273f2:	4618      	mov	r0, r3
   273f4:	f7fe fea8 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   273f8:	2300      	movs	r3, #0
   273fa:	e2d0      	b.n	2799e <convert+0xa86>
   273fc:	0002c5d8 	.word	0x0002c5d8
   27400:	0002c5e0 	.word	0x0002c5e0
   27404:	0002c5e8 	.word	0x0002c5e8
#else
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
        }
        else if (tmp.vt == DLMS_DATA_TYPE_FLOAT64)
   27408:	f107 0320 	add.w	r3, r7, #32
   2740c:	781b      	ldrb	r3, [r3, #0]
   2740e:	2b18      	cmp	r3, #24
   27410:	d121      	bne.n	27456 <convert+0x53e>
        {
#ifndef GX_DLMS_MICROCONTROLLER
#if _MSC_VER > 1000
            sprintf_s(buff, 250, "%lf", tmp.dblVal);
#else
            sprintf(buff, "%lf", tmp.dblVal);
   27412:	f107 0320 	add.w	r3, r7, #32
   27416:	f103 0408 	add.w	r4, r3, #8
   2741a:	e9d4 3400 	ldrd	r3, r4, [r4]
   2741e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   27422:	461a      	mov	r2, r3
   27424:	4623      	mov	r3, r4
   27426:	49c6      	ldr	r1, [pc, #792]	; (27740 <convert+0x828>)
   27428:	f002 feda 	bl	2a1e0 <siprintf>
#endif
            bb_addString(item->strVal, buff);
   2742c:	1d3b      	adds	r3, r7, #4
   2742e:	681b      	ldr	r3, [r3, #0]
   27430:	689b      	ldr	r3, [r3, #8]
   27432:	f107 0230 	add.w	r2, r7, #48	; 0x30
   27436:	4611      	mov	r1, r2
   27438:	4618      	mov	r0, r3
   2743a:	f7dc f927 	bl	368c <bb_addString>
            item->vt = type;
   2743e:	1d3b      	adds	r3, r7, #4
   27440:	681b      	ldr	r3, [r3, #0]
   27442:	1cfa      	adds	r2, r7, #3
   27444:	7812      	ldrb	r2, [r2, #0]
   27446:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27448:	f107 0320 	add.w	r3, r7, #32
   2744c:	4618      	mov	r0, r3
   2744e:	f7fe fe7b 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27452:	2300      	movs	r3, #0
   27454:	e2a3      	b.n	2799e <convert+0xa86>
#else
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER
        }
        else if (tmp.vt == DLMS_DATA_TYPE_BIT_STRING)
   27456:	f107 0320 	add.w	r3, r7, #32
   2745a:	781b      	ldrb	r3, [r3, #0]
   2745c:	2b04      	cmp	r3, #4
   2745e:	d11b      	bne.n	27498 <convert+0x580>
        {
            char* str = ba_toString(tmp.bitArr);
   27460:	f107 0320 	add.w	r3, r7, #32
   27464:	689b      	ldr	r3, [r3, #8]
   27466:	4618      	mov	r0, r3
   27468:	f7db fbda 	bl	2c20 <ba_toString>
   2746c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
            bb_attachString(item->strVal, str);
   27470:	1d3b      	adds	r3, r7, #4
   27472:	681b      	ldr	r3, [r3, #0]
   27474:	689b      	ldr	r3, [r3, #8]
   27476:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
   2747a:	4618      	mov	r0, r3
   2747c:	f7dc f95a 	bl	3734 <bb_attachString>
            item->vt = type;
   27480:	1d3b      	adds	r3, r7, #4
   27482:	681b      	ldr	r3, [r3, #0]
   27484:	1cfa      	adds	r2, r7, #3
   27486:	7812      	ldrb	r2, [r2, #0]
   27488:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2748a:	f107 0320 	add.w	r3, r7, #32
   2748e:	4618      	mov	r0, r3
   27490:	f7fe fe5a 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27494:	2300      	movs	r3, #0
   27496:	e282      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_DATETIME)
   27498:	f107 0320 	add.w	r3, r7, #32
   2749c:	781b      	ldrb	r3, [r3, #0]
   2749e:	2b19      	cmp	r3, #25
   274a0:	d115      	bne.n	274ce <convert+0x5b6>
        {
#ifndef GX_DLMS_MICROCONTROLLER
            time_toString(tmp.dateTime, item->strVal);
   274a2:	f107 0320 	add.w	r3, r7, #32
   274a6:	689a      	ldr	r2, [r3, #8]
   274a8:	1d3b      	adds	r3, r7, #4
   274aa:	681b      	ldr	r3, [r3, #0]
   274ac:	689b      	ldr	r3, [r3, #8]
   274ae:	4619      	mov	r1, r3
   274b0:	4610      	mov	r0, r2
   274b2:	f7df f861 	bl	6578 <time_toString>
            item->vt = type;
   274b6:	1d3b      	adds	r3, r7, #4
   274b8:	681b      	ldr	r3, [r3, #0]
   274ba:	1cfa      	adds	r2, r7, #3
   274bc:	7812      	ldrb	r2, [r2, #0]
   274be:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   274c0:	f107 0320 	add.w	r3, r7, #32
   274c4:	4618      	mov	r0, r3
   274c6:	f7fe fe3f 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   274ca:	2300      	movs	r3, #0
   274cc:	e267      	b.n	2799e <convert+0xa86>
#else
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
#endif //GX_DLMS_MICROCONTROLLER

        }
        else if (tmp.vt == DLMS_DATA_TYPE_OCTET_STRING)
   274ce:	f107 0320 	add.w	r3, r7, #32
   274d2:	781b      	ldrb	r3, [r3, #0]
   274d4:	2b09      	cmp	r3, #9
   274d6:	d150      	bne.n	2757a <convert+0x662>
        {
            if (tmp.byteArr != NULL)
   274d8:	f107 0320 	add.w	r3, r7, #32
   274dc:	689b      	ldr	r3, [r3, #8]
   274de:	2b00      	cmp	r3, #0
   274e0:	d03f      	beq.n	27562 <convert+0x64a>
            {
                for (pos = 0; pos != tmp.byteArr->size; ++pos)
   274e2:	2300      	movs	r3, #0
   274e4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   274e8:	e033      	b.n	27552 <convert+0x63a>
                {
                    ret = bb_getUInt8(tmp.byteArr, &ch);
   274ea:	f107 0320 	add.w	r3, r7, #32
   274ee:	689b      	ldr	r3, [r3, #8]
   274f0:	f207 122b 	addw	r2, r7, #299	; 0x12b
   274f4:	4611      	mov	r1, r2
   274f6:	4618      	mov	r0, r3
   274f8:	f7dc f958 	bl	37ac <bb_getUInt8>
   274fc:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
                    if (ret != DLMS_ERROR_CODE_OK)
   27500:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   27504:	2b00      	cmp	r3, #0
   27506:	d002      	beq.n	2750e <convert+0x5f6>
                    {
                        return ret;
   27508:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   2750c:	e247      	b.n	2799e <convert+0xa86>
                    }
                    if (pos != 0)
   2750e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   27512:	2b00      	cmp	r3, #0
   27514:	d006      	beq.n	27524 <convert+0x60c>
                    {
                        bb_setUInt8(item->strVal, '.');
   27516:	1d3b      	adds	r3, r7, #4
   27518:	681b      	ldr	r3, [r3, #0]
   2751a:	689b      	ldr	r3, [r3, #8]
   2751c:	212e      	movs	r1, #46	; 0x2e
   2751e:	4618      	mov	r0, r3
   27520:	f7db fc78 	bl	2e14 <bb_setUInt8>
                    }
                    hlp_intToString(buff, 4, ch, 0);
   27524:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
   27528:	461a      	mov	r2, r3
   2752a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2752e:	2300      	movs	r3, #0
   27530:	2104      	movs	r1, #4
   27532:	f7fa fb67 	bl	21c04 <hlp_intToString>
                    bb_addString(item->strVal, buff);
   27536:	1d3b      	adds	r3, r7, #4
   27538:	681b      	ldr	r3, [r3, #0]
   2753a:	689b      	ldr	r3, [r3, #8]
   2753c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   27540:	4611      	mov	r1, r2
   27542:	4618      	mov	r0, r3
   27544:	f7dc f8a2 	bl	368c <bb_addString>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_OCTET_STRING)
        {
            if (tmp.byteArr != NULL)
            {
                for (pos = 0; pos != tmp.byteArr->size; ++pos)
   27548:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   2754c:	3301      	adds	r3, #1
   2754e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   27552:	f107 0320 	add.w	r3, r7, #32
   27556:	689b      	ldr	r3, [r3, #8]
   27558:	88db      	ldrh	r3, [r3, #6]
   2755a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
   2755e:	429a      	cmp	r2, r3
   27560:	d1c3      	bne.n	274ea <convert+0x5d2>
                    }
                    hlp_intToString(buff, 4, ch, 0);
                    bb_addString(item->strVal, buff);
                }
            }
            item->vt = type;
   27562:	1d3b      	adds	r3, r7, #4
   27564:	681b      	ldr	r3, [r3, #0]
   27566:	1cfa      	adds	r2, r7, #3
   27568:	7812      	ldrb	r2, [r2, #0]
   2756a:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2756c:	f107 0320 	add.w	r3, r7, #32
   27570:	4618      	mov	r0, r3
   27572:	f7fe fde9 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27576:	2300      	movs	r3, #0
   27578:	e211      	b.n	2799e <convert+0xa86>
        }
        else if (tmp.vt == DLMS_DATA_TYPE_NONE)
   2757a:	f107 0320 	add.w	r3, r7, #32
   2757e:	781b      	ldrb	r3, [r3, #0]
   27580:	2b00      	cmp	r3, #0
   27582:	d10b      	bne.n	2759c <convert+0x684>
        {
            item->vt = type;
   27584:	1d3b      	adds	r3, r7, #4
   27586:	681b      	ldr	r3, [r3, #0]
   27588:	1cfa      	adds	r2, r7, #3
   2758a:	7812      	ldrb	r2, [r2, #0]
   2758c:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2758e:	f107 0320 	add.w	r3, r7, #32
   27592:	4618      	mov	r0, r3
   27594:	f7fe fdd8 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27598:	2300      	movs	r3, #0
   2759a:	e200      	b.n	2799e <convert+0xa86>
        }
        else
        {
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   2759c:	23fe      	movs	r3, #254	; 0xfe
   2759e:	e1fe      	b.n	2799e <convert+0xa86>
        }
    }
    else if (item->vt == DLMS_DATA_TYPE_STRING)
   275a0:	1d3b      	adds	r3, r7, #4
   275a2:	681b      	ldr	r3, [r3, #0]
   275a4:	781b      	ldrb	r3, [r3, #0]
   275a6:	2b0a      	cmp	r3, #10
   275a8:	f040 818e 	bne.w	278c8 <convert+0x9b0>
    {
        if (type == DLMS_DATA_TYPE_BOOLEAN)
   275ac:	1cfb      	adds	r3, r7, #3
   275ae:	781b      	ldrb	r3, [r3, #0]
   275b0:	2b03      	cmp	r3, #3
   275b2:	d11d      	bne.n	275f0 <convert+0x6d8>
        {
            item->boolVal = strcmp((char*)tmp.strVal->data, "False") == 0 ? 0 : 1;
   275b4:	f107 0320 	add.w	r3, r7, #32
   275b8:	689b      	ldr	r3, [r3, #8]
   275ba:	681b      	ldr	r3, [r3, #0]
   275bc:	4961      	ldr	r1, [pc, #388]	; (27744 <convert+0x82c>)
   275be:	4618      	mov	r0, r3
   275c0:	f7d8 fda4 	bl	10c <strcmp>
   275c4:	4603      	mov	r3, r0
   275c6:	2b00      	cmp	r3, #0
   275c8:	bf14      	ite	ne
   275ca:	2301      	movne	r3, #1
   275cc:	2300      	moveq	r3, #0
   275ce:	b2db      	uxtb	r3, r3
   275d0:	461a      	mov	r2, r3
   275d2:	1d3b      	adds	r3, r7, #4
   275d4:	681b      	ldr	r3, [r3, #0]
   275d6:	721a      	strb	r2, [r3, #8]
            item->vt = type;
   275d8:	1d3b      	adds	r3, r7, #4
   275da:	681b      	ldr	r3, [r3, #0]
   275dc:	1cfa      	adds	r2, r7, #3
   275de:	7812      	ldrb	r2, [r2, #0]
   275e0:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   275e2:	f107 0320 	add.w	r3, r7, #32
   275e6:	4618      	mov	r0, r3
   275e8:	f7fe fdae 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   275ec:	2300      	movs	r3, #0
   275ee:	e1d6      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_INT32)
   275f0:	1cfb      	adds	r3, r7, #3
   275f2:	781b      	ldrb	r3, [r3, #0]
   275f4:	2b05      	cmp	r3, #5
   275f6:	d116      	bne.n	27626 <convert+0x70e>
        {
            item->lVal = hlp_stringToInt((char*)tmp.strVal->data);
   275f8:	f107 0320 	add.w	r3, r7, #32
   275fc:	689b      	ldr	r3, [r3, #8]
   275fe:	681b      	ldr	r3, [r3, #0]
   27600:	4618      	mov	r0, r3
   27602:	f7fa fb6b 	bl	21cdc <hlp_stringToInt>
   27606:	4602      	mov	r2, r0
   27608:	1d3b      	adds	r3, r7, #4
   2760a:	681b      	ldr	r3, [r3, #0]
   2760c:	609a      	str	r2, [r3, #8]
            item->vt = type;
   2760e:	1d3b      	adds	r3, r7, #4
   27610:	681b      	ldr	r3, [r3, #0]
   27612:	1cfa      	adds	r2, r7, #3
   27614:	7812      	ldrb	r2, [r2, #0]
   27616:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27618:	f107 0320 	add.w	r3, r7, #32
   2761c:	4618      	mov	r0, r3
   2761e:	f7fe fd93 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27622:	2300      	movs	r3, #0
   27624:	e1bb      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_UINT32)
   27626:	1cfb      	adds	r3, r7, #3
   27628:	781b      	ldrb	r3, [r3, #0]
   2762a:	2b06      	cmp	r3, #6
   2762c:	d117      	bne.n	2765e <convert+0x746>
        {
            item->ulVal = hlp_stringToInt((char*)tmp.strVal->data) & 0xFFFFFFFF;
   2762e:	f107 0320 	add.w	r3, r7, #32
   27632:	689b      	ldr	r3, [r3, #8]
   27634:	681b      	ldr	r3, [r3, #0]
   27636:	4618      	mov	r0, r3
   27638:	f7fa fb50 	bl	21cdc <hlp_stringToInt>
   2763c:	4603      	mov	r3, r0
   2763e:	461a      	mov	r2, r3
   27640:	1d3b      	adds	r3, r7, #4
   27642:	681b      	ldr	r3, [r3, #0]
   27644:	609a      	str	r2, [r3, #8]
            item->vt = type;
   27646:	1d3b      	adds	r3, r7, #4
   27648:	681b      	ldr	r3, [r3, #0]
   2764a:	1cfa      	adds	r2, r7, #3
   2764c:	7812      	ldrb	r2, [r2, #0]
   2764e:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27650:	f107 0320 	add.w	r3, r7, #32
   27654:	4618      	mov	r0, r3
   27656:	f7fe fd77 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2765a:	2300      	movs	r3, #0
   2765c:	e19f      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_INT8)
   2765e:	1cfb      	adds	r3, r7, #3
   27660:	781b      	ldrb	r3, [r3, #0]
   27662:	2b0f      	cmp	r3, #15
   27664:	d117      	bne.n	27696 <convert+0x77e>
        {
            item->cVal = (char)hlp_stringToInt((char*)tmp.strVal->data);
   27666:	f107 0320 	add.w	r3, r7, #32
   2766a:	689b      	ldr	r3, [r3, #8]
   2766c:	681b      	ldr	r3, [r3, #0]
   2766e:	4618      	mov	r0, r3
   27670:	f7fa fb34 	bl	21cdc <hlp_stringToInt>
   27674:	4603      	mov	r3, r0
   27676:	b25a      	sxtb	r2, r3
   27678:	1d3b      	adds	r3, r7, #4
   2767a:	681b      	ldr	r3, [r3, #0]
   2767c:	721a      	strb	r2, [r3, #8]
            item->vt = type;
   2767e:	1d3b      	adds	r3, r7, #4
   27680:	681b      	ldr	r3, [r3, #0]
   27682:	1cfa      	adds	r2, r7, #3
   27684:	7812      	ldrb	r2, [r2, #0]
   27686:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27688:	f107 0320 	add.w	r3, r7, #32
   2768c:	4618      	mov	r0, r3
   2768e:	f7fe fd5b 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27692:	2300      	movs	r3, #0
   27694:	e183      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_INT16)
   27696:	1cfb      	adds	r3, r7, #3
   27698:	781b      	ldrb	r3, [r3, #0]
   2769a:	2b10      	cmp	r3, #16
   2769c:	d117      	bne.n	276ce <convert+0x7b6>
        {
            item->iVal = (short)hlp_stringToInt((char*)tmp.strVal->data);
   2769e:	f107 0320 	add.w	r3, r7, #32
   276a2:	689b      	ldr	r3, [r3, #8]
   276a4:	681b      	ldr	r3, [r3, #0]
   276a6:	4618      	mov	r0, r3
   276a8:	f7fa fb18 	bl	21cdc <hlp_stringToInt>
   276ac:	4603      	mov	r3, r0
   276ae:	b21a      	sxth	r2, r3
   276b0:	1d3b      	adds	r3, r7, #4
   276b2:	681b      	ldr	r3, [r3, #0]
   276b4:	811a      	strh	r2, [r3, #8]
            item->vt = type;
   276b6:	1d3b      	adds	r3, r7, #4
   276b8:	681b      	ldr	r3, [r3, #0]
   276ba:	1cfa      	adds	r2, r7, #3
   276bc:	7812      	ldrb	r2, [r2, #0]
   276be:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   276c0:	f107 0320 	add.w	r3, r7, #32
   276c4:	4618      	mov	r0, r3
   276c6:	f7fe fd3f 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   276ca:	2300      	movs	r3, #0
   276cc:	e167      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_UINT8)
   276ce:	1cfb      	adds	r3, r7, #3
   276d0:	781b      	ldrb	r3, [r3, #0]
   276d2:	2b11      	cmp	r3, #17
   276d4:	d117      	bne.n	27706 <convert+0x7ee>
        {
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
   276d6:	f107 0320 	add.w	r3, r7, #32
   276da:	689b      	ldr	r3, [r3, #8]
   276dc:	681b      	ldr	r3, [r3, #0]
   276de:	4618      	mov	r0, r3
   276e0:	f7fa fafc 	bl	21cdc <hlp_stringToInt>
   276e4:	4603      	mov	r3, r0
   276e6:	b2da      	uxtb	r2, r3
   276e8:	1d3b      	adds	r3, r7, #4
   276ea:	681b      	ldr	r3, [r3, #0]
   276ec:	721a      	strb	r2, [r3, #8]
            item->vt = type;
   276ee:	1d3b      	adds	r3, r7, #4
   276f0:	681b      	ldr	r3, [r3, #0]
   276f2:	1cfa      	adds	r2, r7, #3
   276f4:	7812      	ldrb	r2, [r2, #0]
   276f6:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   276f8:	f107 0320 	add.w	r3, r7, #32
   276fc:	4618      	mov	r0, r3
   276fe:	f7fe fd23 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27702:	2300      	movs	r3, #0
   27704:	e14b      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_UINT16)
   27706:	1cfb      	adds	r3, r7, #3
   27708:	781b      	ldrb	r3, [r3, #0]
   2770a:	2b12      	cmp	r3, #18
   2770c:	d11c      	bne.n	27748 <convert+0x830>
        {
            item->uiVal = (unsigned short)hlp_stringToInt((char*)tmp.strVal->data);
   2770e:	f107 0320 	add.w	r3, r7, #32
   27712:	689b      	ldr	r3, [r3, #8]
   27714:	681b      	ldr	r3, [r3, #0]
   27716:	4618      	mov	r0, r3
   27718:	f7fa fae0 	bl	21cdc <hlp_stringToInt>
   2771c:	4603      	mov	r3, r0
   2771e:	b29a      	uxth	r2, r3
   27720:	1d3b      	adds	r3, r7, #4
   27722:	681b      	ldr	r3, [r3, #0]
   27724:	811a      	strh	r2, [r3, #8]
            item->vt = type;
   27726:	1d3b      	adds	r3, r7, #4
   27728:	681b      	ldr	r3, [r3, #0]
   2772a:	1cfa      	adds	r2, r7, #3
   2772c:	7812      	ldrb	r2, [r2, #0]
   2772e:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27730:	f107 0320 	add.w	r3, r7, #32
   27734:	4618      	mov	r0, r3
   27736:	f7fe fd07 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2773a:	2300      	movs	r3, #0
   2773c:	e12f      	b.n	2799e <convert+0xa86>
   2773e:	bf00      	nop
   27740:	0002c5ec 	.word	0x0002c5ec
   27744:	0002c5d8 	.word	0x0002c5d8
        }
        else if (type == DLMS_DATA_TYPE_INT64)
   27748:	1cfb      	adds	r3, r7, #3
   2774a:	781b      	ldrb	r3, [r3, #0]
   2774c:	2b14      	cmp	r3, #20
   2774e:	d118      	bne.n	27782 <convert+0x86a>
        {
            item->llVal = hlp_stringToInt64((char*)tmp.strVal->data);
   27750:	f107 0320 	add.w	r3, r7, #32
   27754:	689b      	ldr	r3, [r3, #8]
   27756:	681b      	ldr	r3, [r3, #0]
   27758:	4618      	mov	r0, r3
   2775a:	f7fa fb7d 	bl	21e58 <hlp_stringToInt64>
   2775e:	4603      	mov	r3, r0
   27760:	460c      	mov	r4, r1
   27762:	1d3a      	adds	r2, r7, #4
   27764:	6812      	ldr	r2, [r2, #0]
   27766:	e9c2 3402 	strd	r3, r4, [r2, #8]
            item->vt = type;
   2776a:	1d3b      	adds	r3, r7, #4
   2776c:	681b      	ldr	r3, [r3, #0]
   2776e:	1cfa      	adds	r2, r7, #3
   27770:	7812      	ldrb	r2, [r2, #0]
   27772:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27774:	f107 0320 	add.w	r3, r7, #32
   27778:	4618      	mov	r0, r3
   2777a:	f7fe fce5 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2777e:	2300      	movs	r3, #0
   27780:	e10d      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_UINT64)
   27782:	1cfb      	adds	r3, r7, #3
   27784:	781b      	ldrb	r3, [r3, #0]
   27786:	2b15      	cmp	r3, #21
   27788:	d118      	bne.n	277bc <convert+0x8a4>
        {
            item->ullVal = (unsigned long long) hlp_stringToInt64((char*)tmp.strVal->data);
   2778a:	f107 0320 	add.w	r3, r7, #32
   2778e:	689b      	ldr	r3, [r3, #8]
   27790:	681b      	ldr	r3, [r3, #0]
   27792:	4618      	mov	r0, r3
   27794:	f7fa fb60 	bl	21e58 <hlp_stringToInt64>
   27798:	4603      	mov	r3, r0
   2779a:	460c      	mov	r4, r1
   2779c:	1d3a      	adds	r2, r7, #4
   2779e:	6812      	ldr	r2, [r2, #0]
   277a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
            item->vt = type;
   277a4:	1d3b      	adds	r3, r7, #4
   277a6:	681b      	ldr	r3, [r3, #0]
   277a8:	1cfa      	adds	r2, r7, #3
   277aa:	7812      	ldrb	r2, [r2, #0]
   277ac:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   277ae:	f107 0320 	add.w	r3, r7, #32
   277b2:	4618      	mov	r0, r3
   277b4:	f7fe fcc8 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   277b8:	2300      	movs	r3, #0
   277ba:	e0f0      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_ENUM)
   277bc:	1cfb      	adds	r3, r7, #3
   277be:	781b      	ldrb	r3, [r3, #0]
   277c0:	2b16      	cmp	r3, #22
   277c2:	d117      	bne.n	277f4 <convert+0x8dc>
        {
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
   277c4:	f107 0320 	add.w	r3, r7, #32
   277c8:	689b      	ldr	r3, [r3, #8]
   277ca:	681b      	ldr	r3, [r3, #0]
   277cc:	4618      	mov	r0, r3
   277ce:	f7fa fa85 	bl	21cdc <hlp_stringToInt>
   277d2:	4603      	mov	r3, r0
   277d4:	b2da      	uxtb	r2, r3
   277d6:	1d3b      	adds	r3, r7, #4
   277d8:	681b      	ldr	r3, [r3, #0]
   277da:	721a      	strb	r2, [r3, #8]
            item->vt = type;
   277dc:	1d3b      	adds	r3, r7, #4
   277de:	681b      	ldr	r3, [r3, #0]
   277e0:	1cfa      	adds	r2, r7, #3
   277e2:	7812      	ldrb	r2, [r2, #0]
   277e4:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   277e6:	f107 0320 	add.w	r3, r7, #32
   277ea:	4618      	mov	r0, r3
   277ec:	f7fe fcac 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   277f0:	2300      	movs	r3, #0
   277f2:	e0d4      	b.n	2799e <convert+0xa86>
        }
#ifndef GX_DLMS_MICROCONTROLLER
        else if (type == DLMS_DATA_TYPE_FLOAT32)
   277f4:	1cfb      	adds	r3, r7, #3
   277f6:	781b      	ldrb	r3, [r3, #0]
   277f8:	2b17      	cmp	r3, #23
   277fa:	d116      	bne.n	2782a <convert+0x912>
        {
#if _MSC_VER > 1000
            sscanf_s((char*)tmp.strVal->data, "%f", &item->fltVal);
#else
            sscanf((char*)tmp.strVal->data, "%f", &item->fltVal);
   277fc:	f107 0320 	add.w	r3, r7, #32
   27800:	689b      	ldr	r3, [r3, #8]
   27802:	6818      	ldr	r0, [r3, #0]
   27804:	1d3b      	adds	r3, r7, #4
   27806:	681b      	ldr	r3, [r3, #0]
   27808:	3308      	adds	r3, #8
   2780a:	461a      	mov	r2, r3
   2780c:	4966      	ldr	r1, [pc, #408]	; (279a8 <convert+0xa90>)
   2780e:	f002 fd0b 	bl	2a228 <siscanf>
#endif
            item->vt = type;
   27812:	1d3b      	adds	r3, r7, #4
   27814:	681b      	ldr	r3, [r3, #0]
   27816:	1cfa      	adds	r2, r7, #3
   27818:	7812      	ldrb	r2, [r2, #0]
   2781a:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   2781c:	f107 0320 	add.w	r3, r7, #32
   27820:	4618      	mov	r0, r3
   27822:	f7fe fc91 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   27826:	2300      	movs	r3, #0
   27828:	e0b9      	b.n	2799e <convert+0xa86>
        }
        else if (type == DLMS_DATA_TYPE_FLOAT64)
   2782a:	1cfb      	adds	r3, r7, #3
   2782c:	781b      	ldrb	r3, [r3, #0]
   2782e:	2b18      	cmp	r3, #24
   27830:	d116      	bne.n	27860 <convert+0x948>
        {
#if _MSC_VER > 1000
            sscanf_s((char*)tmp.strVal->data, "%lf", &item->dblVal);
#else
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
   27832:	f107 0320 	add.w	r3, r7, #32
   27836:	689b      	ldr	r3, [r3, #8]
   27838:	6818      	ldr	r0, [r3, #0]
   2783a:	1d3b      	adds	r3, r7, #4
   2783c:	681b      	ldr	r3, [r3, #0]
   2783e:	3308      	adds	r3, #8
   27840:	461a      	mov	r2, r3
   27842:	495a      	ldr	r1, [pc, #360]	; (279ac <convert+0xa94>)
   27844:	f002 fcf0 	bl	2a228 <siscanf>
#endif
            item->vt = type;
   27848:	1d3b      	adds	r3, r7, #4
   2784a:	681b      	ldr	r3, [r3, #0]
   2784c:	1cfa      	adds	r2, r7, #3
   2784e:	7812      	ldrb	r2, [r2, #0]
   27850:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   27852:	f107 0320 	add.w	r3, r7, #32
   27856:	4618      	mov	r0, r3
   27858:	f7fe fc76 	bl	26148 <var_clear>
            return DLMS_ERROR_CODE_OK;
   2785c:	2300      	movs	r3, #0
   2785e:	e09e      	b.n	2799e <convert+0xa86>
        }
#endif //GX_DLMS_MICROCONTROLLER
        else if (type == DLMS_DATA_TYPE_OCTET_STRING)
   27860:	1cfb      	adds	r3, r7, #3
   27862:	781b      	ldrb	r3, [r3, #0]
   27864:	2b09      	cmp	r3, #9
   27866:	d12d      	bne.n	278c4 <convert+0x9ac>
        {
            char* pBuff = (char*)tmp.strVal->data;
   27868:	f107 0320 	add.w	r3, r7, #32
   2786c:	689b      	ldr	r3, [r3, #8]
   2786e:	681b      	ldr	r3, [r3, #0]
   27870:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   27874:	200c      	movs	r0, #12
   27876:	f002 f8e5 	bl	29a44 <malloc>
   2787a:	4603      	mov	r3, r0
   2787c:	461a      	mov	r2, r3
   2787e:	1d3b      	adds	r3, r7, #4
   27880:	681b      	ldr	r3, [r3, #0]
   27882:	609a      	str	r2, [r3, #8]
            bb_init(item->byteArr);
   27884:	1d3b      	adds	r3, r7, #4
   27886:	681b      	ldr	r3, [r3, #0]
   27888:	689b      	ldr	r3, [r3, #8]
   2788a:	4618      	mov	r0, r3
   2788c:	f7db fa2c 	bl	2ce8 <bb_init>
            bb_addHexString(item->byteArr, pBuff);
   27890:	1d3b      	adds	r3, r7, #4
   27892:	681b      	ldr	r3, [r3, #0]
   27894:	689b      	ldr	r3, [r3, #8]
   27896:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
   2789a:	4618      	mov	r0, r3
   2789c:	f7dc fa44 	bl	3d28 <bb_addHexString>
            item->vt = type;
   278a0:	1d3b      	adds	r3, r7, #4
   278a2:	681b      	ldr	r3, [r3, #0]
   278a4:	1cfa      	adds	r2, r7, #3
   278a6:	7812      	ldrb	r2, [r2, #0]
   278a8:	701a      	strb	r2, [r3, #0]
            var_clear(&tmp);
   278aa:	f107 0320 	add.w	r3, r7, #32
   278ae:	4618      	mov	r0, r3
   278b0:	f7fe fc4a 	bl	26148 <var_clear>
            bb_trim(item->byteArr);
   278b4:	1d3b      	adds	r3, r7, #4
   278b6:	681b      	ldr	r3, [r3, #0]
   278b8:	689b      	ldr	r3, [r3, #8]
   278ba:	4618      	mov	r0, r3
   278bc:	f7dc fb3e 	bl	3f3c <bb_trim>
            return DLMS_ERROR_CODE_OK;
   278c0:	2300      	movs	r3, #0
   278c2:	e06c      	b.n	2799e <convert+0xa86>
        }
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   278c4:	23fe      	movs	r3, #254	; 0xfe
   278c6:	e06a      	b.n	2799e <convert+0xa86>
    }
    fromSize = var_getSize(tmp.vt);
   278c8:	f107 0320 	add.w	r3, r7, #32
   278cc:	781b      	ldrb	r3, [r3, #0]
   278ce:	4618      	mov	r0, r3
   278d0:	f7ff f89a 	bl	26a08 <var_getSize>
   278d4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    toSize = var_getSize(item->vt);
   278d8:	1d3b      	adds	r3, r7, #4
   278da:	681b      	ldr	r3, [r3, #0]
   278dc:	781b      	ldrb	r3, [r3, #0]
   278de:	4618      	mov	r0, r3
   278e0:	f7ff f892 	bl	26a08 <var_getSize>
   278e4:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    //If we try to change bigger valut to smaller check that value is not too big.
    //Example Int16 to Int8.
    if (fromSize > toSize)
   278e8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
   278ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
   278f0:	429a      	cmp	r2, r3
   278f2:	dd21      	ble.n	27938 <convert+0xa20>
    {
        unsigned char* pValue = &tmp.bVal;
   278f4:	f107 0320 	add.w	r3, r7, #32
   278f8:	3308      	adds	r3, #8
   278fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
   278fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
   27902:	b2db      	uxtb	r3, r3
   27904:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   27908:	e00f      	b.n	2792a <convert+0xa12>
        {
            if (pValue[pos] != 0)
   2790a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   2790e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
   27912:	4413      	add	r3, r2
   27914:	781b      	ldrb	r3, [r3, #0]
   27916:	2b00      	cmp	r3, #0
   27918:	d002      	beq.n	27920 <convert+0xa08>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   2791a:	f44f 7381 	mov.w	r3, #258	; 0x102
   2791e:	e03e      	b.n	2799e <convert+0xa86>
    //If we try to change bigger valut to smaller check that value is not too big.
    //Example Int16 to Int8.
    if (fromSize > toSize)
    {
        unsigned char* pValue = &tmp.bVal;
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
   27920:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
   27924:	3301      	adds	r3, #1
   27926:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
   2792a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
   2792e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
   27932:	b2db      	uxtb	r3, r3
   27934:	429a      	cmp	r2, r3
   27936:	d1e8      	bne.n	2790a <convert+0x9f2>
            {
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
            }
        }
    }
    if (fromSize > toSize)
   27938:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
   2793c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
   27940:	429a      	cmp	r2, r3
   27942:	dd0c      	ble.n	2795e <convert+0xa46>
    {
        memcpy(&item->bVal, &tmp.bVal, toSize);
   27944:	1d3b      	adds	r3, r7, #4
   27946:	681b      	ldr	r3, [r3, #0]
   27948:	f103 0008 	add.w	r0, r3, #8
   2794c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
   27950:	f107 0320 	add.w	r3, r7, #32
   27954:	3308      	adds	r3, #8
   27956:	4619      	mov	r1, r3
   27958:	f002 f893 	bl	29a82 <memcpy>
   2795c:	e014      	b.n	27988 <convert+0xa70>
    }
    else
    {
        memset(&item->bVal, 0, toSize);
   2795e:	1d3b      	adds	r3, r7, #4
   27960:	681b      	ldr	r3, [r3, #0]
   27962:	3308      	adds	r3, #8
   27964:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
   27968:	2100      	movs	r1, #0
   2796a:	4618      	mov	r0, r3
   2796c:	f002 f8af 	bl	29ace <memset>
        memcpy(&item->bVal, &tmp.bVal, fromSize);
   27970:	1d3b      	adds	r3, r7, #4
   27972:	681b      	ldr	r3, [r3, #0]
   27974:	f103 0008 	add.w	r0, r3, #8
   27978:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
   2797c:	f107 0320 	add.w	r3, r7, #32
   27980:	3308      	adds	r3, #8
   27982:	4619      	mov	r1, r3
   27984:	f002 f87d 	bl	29a82 <memcpy>
    }
    item->vt = type;
   27988:	1d3b      	adds	r3, r7, #4
   2798a:	681b      	ldr	r3, [r3, #0]
   2798c:	1cfa      	adds	r2, r7, #3
   2798e:	7812      	ldrb	r2, [r2, #0]
   27990:	701a      	strb	r2, [r3, #0]
    var_clear(&tmp);
   27992:	f107 0320 	add.w	r3, r7, #32
   27996:	4618      	mov	r0, r3
   27998:	f7fe fbd6 	bl	26148 <var_clear>
    return DLMS_ERROR_CODE_OK;
   2799c:	2300      	movs	r3, #0
}
   2799e:	4618      	mov	r0, r3
   279a0:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
   279a4:	46bd      	mov	sp, r7
   279a6:	bd90      	pop	{r4, r7, pc}
   279a8:	0002c5e8 	.word	0x0002c5e8
   279ac:	0002c5ec 	.word	0x0002c5ec

000279b0 <var_changeType>:

int var_changeType(dlmsVARIANT *value, DLMS_DATA_TYPE newType)
{
   279b0:	b580      	push	{r7, lr}
   279b2:	b082      	sub	sp, #8
   279b4:	af00      	add	r7, sp, #0
   279b6:	6078      	str	r0, [r7, #4]
   279b8:	460b      	mov	r3, r1
   279ba:	70fb      	strb	r3, [r7, #3]
    if (newType == value->vt)
   279bc:	687b      	ldr	r3, [r7, #4]
   279be:	781b      	ldrb	r3, [r3, #0]
   279c0:	78fa      	ldrb	r2, [r7, #3]
   279c2:	429a      	cmp	r2, r3
   279c4:	d101      	bne.n	279ca <var_changeType+0x1a>
    {
        return DLMS_ERROR_CODE_OK;
   279c6:	2300      	movs	r3, #0
   279c8:	e1cf      	b.n	27d6a <var_changeType+0x3ba>
    }
    if (newType == DLMS_DATA_TYPE_NONE)
   279ca:	78fb      	ldrb	r3, [r7, #3]
   279cc:	2b00      	cmp	r3, #0
   279ce:	d104      	bne.n	279da <var_changeType+0x2a>
    {
        return var_clear(value);
   279d0:	6878      	ldr	r0, [r7, #4]
   279d2:	f7fe fbb9 	bl	26148 <var_clear>
   279d6:	4603      	mov	r3, r0
   279d8:	e1c7      	b.n	27d6a <var_changeType+0x3ba>
    }
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
   279da:	687b      	ldr	r3, [r7, #4]
   279dc:	781b      	ldrb	r3, [r3, #0]
   279de:	2b01      	cmp	r3, #1
   279e0:	d104      	bne.n	279ec <var_changeType+0x3c>
   279e2:	78fb      	ldrb	r3, [r7, #3]
   279e4:	2b09      	cmp	r3, #9
   279e6:	d101      	bne.n	279ec <var_changeType+0x3c>
    {
        return DLMS_ERROR_CODE_OK;
   279e8:	2300      	movs	r3, #0
   279ea:	e1be      	b.n	27d6a <var_changeType+0x3ba>
    }
    if (value->vt == DLMS_DATA_TYPE_STRING)
   279ec:	687b      	ldr	r3, [r7, #4]
   279ee:	781b      	ldrb	r3, [r3, #0]
   279f0:	2b0a      	cmp	r3, #10
   279f2:	d106      	bne.n	27a02 <var_changeType+0x52>
    {
        return convert(value, newType);
   279f4:	78fb      	ldrb	r3, [r7, #3]
   279f6:	4619      	mov	r1, r3
   279f8:	6878      	ldr	r0, [r7, #4]
   279fa:	f7ff fa8d 	bl	26f18 <convert>
   279fe:	4603      	mov	r3, r0
   27a00:	e1b3      	b.n	27d6a <var_changeType+0x3ba>
    }
    switch (newType)
   27a02:	78fb      	ldrb	r3, [r7, #3]
   27a04:	3b03      	subs	r3, #3
   27a06:	2b15      	cmp	r3, #21
   27a08:	d835      	bhi.n	27a76 <var_changeType+0xc6>
   27a0a:	a201      	add	r2, pc, #4	; (adr r2, 27a10 <var_changeType+0x60>)
   27a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27a10:	00027a69 	.word	0x00027a69
   27a14:	00027a77 	.word	0x00027a77
   27a18:	00027a69 	.word	0x00027a69
   27a1c:	00027a69 	.word	0x00027a69
   27a20:	00027a77 	.word	0x00027a77
   27a24:	00027a77 	.word	0x00027a77
   27a28:	00027a77 	.word	0x00027a77
   27a2c:	00027a69 	.word	0x00027a69
   27a30:	00027a77 	.word	0x00027a77
   27a34:	00027a77 	.word	0x00027a77
   27a38:	00027a77 	.word	0x00027a77
   27a3c:	00027a77 	.word	0x00027a77
   27a40:	00027a69 	.word	0x00027a69
   27a44:	00027a69 	.word	0x00027a69
   27a48:	00027a69 	.word	0x00027a69
   27a4c:	00027a69 	.word	0x00027a69
   27a50:	00027a77 	.word	0x00027a77
   27a54:	00027a69 	.word	0x00027a69
   27a58:	00027a69 	.word	0x00027a69
   27a5c:	00027a69 	.word	0x00027a69
   27a60:	00027a69 	.word	0x00027a69
   27a64:	00027a69 	.word	0x00027a69
    case DLMS_DATA_TYPE_ENUM:
#ifndef GX_DLMS_MICROCONTROLLER
    case DLMS_DATA_TYPE_FLOAT32:
    case DLMS_DATA_TYPE_FLOAT64:
#endif //GX_DLMS_MICROCONTROLLER
        return convert(value, newType);
   27a68:	78fb      	ldrb	r3, [r7, #3]
   27a6a:	4619      	mov	r1, r3
   27a6c:	6878      	ldr	r0, [r7, #4]
   27a6e:	f7ff fa53 	bl	26f18 <convert>
   27a72:	4603      	mov	r3, r0
   27a74:	e179      	b.n	27d6a <var_changeType+0x3ba>
        break;
    default:
        //Handled later.
        break;
   27a76:	bf00      	nop
    }
    switch (value->vt)
   27a78:	687b      	ldr	r3, [r7, #4]
   27a7a:	781b      	ldrb	r3, [r3, #0]
   27a7c:	3b03      	subs	r3, #3
   27a7e:	2b18      	cmp	r3, #24
   27a80:	f200 816f 	bhi.w	27d62 <var_changeType+0x3b2>
   27a84:	a201      	add	r2, pc, #4	; (adr r2, 27a8c <var_changeType+0xdc>)
   27a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27a8a:	bf00      	nop
   27a8c:	00027af1 	.word	0x00027af1
   27a90:	00027af7 	.word	0x00027af7
   27a94:	00027afd 	.word	0x00027afd
   27a98:	00027b0d 	.word	0x00027b0d
   27a9c:	00027d63 	.word	0x00027d63
   27aa0:	00027d63 	.word	0x00027d63
   27aa4:	00027b1d 	.word	0x00027b1d
   27aa8:	00027d63 	.word	0x00027d63
   27aac:	00027d63 	.word	0x00027d63
   27ab0:	00027d63 	.word	0x00027d63
   27ab4:	00027b3d 	.word	0x00027b3d
   27ab8:	00027d63 	.word	0x00027d63
   27abc:	00027ba7 	.word	0x00027ba7
   27ac0:	00027bb7 	.word	0x00027bb7
   27ac4:	00027bc7 	.word	0x00027bc7
   27ac8:	00027bd7 	.word	0x00027bd7
   27acc:	00027d63 	.word	0x00027d63
   27ad0:	00027be7 	.word	0x00027be7
   27ad4:	00027bf7 	.word	0x00027bf7
   27ad8:	00027c07 	.word	0x00027c07
   27adc:	00027c17 	.word	0x00027c17
   27ae0:	00027c27 	.word	0x00027c27
   27ae4:	00027c37 	.word	0x00027c37
   27ae8:	00027c9b 	.word	0x00027c9b
   27aec:	00027cff 	.word	0x00027cff
    {
    case DLMS_DATA_TYPE_BOOLEAN:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27af0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27af4:	e139      	b.n	27d6a <var_changeType+0x3ba>
    case DLMS_DATA_TYPE_BIT_STRING:
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27af6:	f44f 7381 	mov.w	r3, #258	; 0x102
   27afa:	e136      	b.n	27d6a <var_changeType+0x3ba>
    }
    case DLMS_DATA_TYPE_INT32:
        switch (newType)
   27afc:	78fb      	ldrb	r3, [r7, #3]
   27afe:	2b0d      	cmp	r3, #13
   27b00:	d101      	bne.n	27b06 <var_changeType+0x156>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27b02:	23fe      	movs	r3, #254	; 0xfe
   27b04:	e131      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27b06:	f44f 7381 	mov.w	r3, #258	; 0x102
   27b0a:	e12e      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_UINT32:
        switch (newType)
   27b0c:	78fb      	ldrb	r3, [r7, #3]
   27b0e:	2b0d      	cmp	r3, #13
   27b10:	d101      	bne.n	27b16 <var_changeType+0x166>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27b12:	23fe      	movs	r3, #254	; 0xfe
   27b14:	e129      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27b16:	f44f 7381 	mov.w	r3, #258	; 0x102
   27b1a:	e126      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_OCTET_STRING:
        switch (newType)
   27b1c:	78fb      	ldrb	r3, [r7, #3]
   27b1e:	2b1a      	cmp	r3, #26
   27b20:	d005      	beq.n	27b2e <var_changeType+0x17e>
   27b22:	2b1b      	cmp	r3, #27
   27b24:	d005      	beq.n	27b32 <var_changeType+0x182>
   27b26:	2b19      	cmp	r3, #25
   27b28:	d105      	bne.n	27b36 <var_changeType+0x186>
        {
        case DLMS_DATA_TYPE_DATETIME:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27b2a:	23fe      	movs	r3, #254	; 0xfe
   27b2c:	e11d      	b.n	27d6a <var_changeType+0x3ba>
            break;
        case DLMS_DATA_TYPE_DATE:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27b2e:	23fe      	movs	r3, #254	; 0xfe
   27b30:	e11b      	b.n	27d6a <var_changeType+0x3ba>
            break;
        case DLMS_DATA_TYPE_TIME:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27b32:	23fe      	movs	r3, #254	; 0xfe
   27b34:	e119      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27b36:	f44f 7381 	mov.w	r3, #258	; 0x102
   27b3a:	e116      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
        switch (newType)
   27b3c:	78fb      	ldrb	r3, [r7, #3]
   27b3e:	3b05      	subs	r3, #5
   27b40:	2b13      	cmp	r3, #19
   27b42:	d82b      	bhi.n	27b9c <var_changeType+0x1ec>
   27b44:	a201      	add	r2, pc, #4	; (adr r2, 27b4c <var_changeType+0x19c>)
   27b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27b4a:	bf00      	nop
   27b4c:	00027ba3 	.word	0x00027ba3
   27b50:	00027ba3 	.word	0x00027ba3
   27b54:	00027b9d 	.word	0x00027b9d
   27b58:	00027b9d 	.word	0x00027b9d
   27b5c:	00027b9d 	.word	0x00027b9d
   27b60:	00027ba3 	.word	0x00027ba3
   27b64:	00027b9d 	.word	0x00027b9d
   27b68:	00027b9d 	.word	0x00027b9d
   27b6c:	00027b9d 	.word	0x00027b9d
   27b70:	00027b9d 	.word	0x00027b9d
   27b74:	00027ba3 	.word	0x00027ba3
   27b78:	00027ba3 	.word	0x00027ba3
   27b7c:	00027ba3 	.word	0x00027ba3
   27b80:	00027ba3 	.word	0x00027ba3
   27b84:	00027b9d 	.word	0x00027b9d
   27b88:	00027ba3 	.word	0x00027ba3
   27b8c:	00027ba3 	.word	0x00027ba3
   27b90:	00027ba3 	.word	0x00027ba3
   27b94:	00027ba3 	.word	0x00027ba3
   27b98:	00027ba3 	.word	0x00027ba3
        case DLMS_DATA_TYPE_FLOAT32:
            break;
        case DLMS_DATA_TYPE_FLOAT64:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27b9c:	f44f 7381 	mov.w	r3, #258	; 0x102
   27ba0:	e0e3      	b.n	27d6a <var_changeType+0x3ba>
        break;
    case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
        switch (newType)
        {
        case DLMS_DATA_TYPE_INT32:
            break;
   27ba2:	bf00      	nop
        case DLMS_DATA_TYPE_FLOAT64:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   27ba4:	e0e0      	b.n	27d68 <var_changeType+0x3b8>
    case DLMS_DATA_TYPE_INT8:
        switch (newType)
   27ba6:	78fb      	ldrb	r3, [r7, #3]
   27ba8:	2b0d      	cmp	r3, #13
   27baa:	d101      	bne.n	27bb0 <var_changeType+0x200>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bac:	23fe      	movs	r3, #254	; 0xfe
   27bae:	e0dc      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27bb0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27bb4:	e0d9      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_INT16:
        switch (newType)
   27bb6:	78fb      	ldrb	r3, [r7, #3]
   27bb8:	2b0d      	cmp	r3, #13
   27bba:	d101      	bne.n	27bc0 <var_changeType+0x210>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bbc:	23fe      	movs	r3, #254	; 0xfe
   27bbe:	e0d4      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27bc0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27bc4:	e0d1      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_UINT8:
        switch (newType)
   27bc6:	78fb      	ldrb	r3, [r7, #3]
   27bc8:	2b0d      	cmp	r3, #13
   27bca:	d101      	bne.n	27bd0 <var_changeType+0x220>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bcc:	23fe      	movs	r3, #254	; 0xfe
   27bce:	e0cc      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27bd0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27bd4:	e0c9      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_UINT16:
        switch (newType)
   27bd6:	78fb      	ldrb	r3, [r7, #3]
   27bd8:	2b0d      	cmp	r3, #13
   27bda:	d101      	bne.n	27be0 <var_changeType+0x230>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bdc:	23fe      	movs	r3, #254	; 0xfe
   27bde:	e0c4      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27be0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27be4:	e0c1      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_INT64:
        switch (newType)
   27be6:	78fb      	ldrb	r3, [r7, #3]
   27be8:	2b0d      	cmp	r3, #13
   27bea:	d101      	bne.n	27bf0 <var_changeType+0x240>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bec:	23fe      	movs	r3, #254	; 0xfe
   27bee:	e0bc      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27bf0:	f44f 7381 	mov.w	r3, #258	; 0x102
   27bf4:	e0b9      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_UINT64:
        switch (newType)
   27bf6:	78fb      	ldrb	r3, [r7, #3]
   27bf8:	2b0d      	cmp	r3, #13
   27bfa:	d101      	bne.n	27c00 <var_changeType+0x250>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27bfc:	23fe      	movs	r3, #254	; 0xfe
   27bfe:	e0b4      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27c00:	f44f 7381 	mov.w	r3, #258	; 0x102
   27c04:	e0b1      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_ENUM:
        switch (newType)
   27c06:	78fb      	ldrb	r3, [r7, #3]
   27c08:	2b0d      	cmp	r3, #13
   27c0a:	d101      	bne.n	27c10 <var_changeType+0x260>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27c0c:	23fe      	movs	r3, #254	; 0xfe
   27c0e:	e0ac      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27c10:	f44f 7381 	mov.w	r3, #258	; 0x102
   27c14:	e0a9      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_FLOAT32:
        switch (newType)
   27c16:	78fb      	ldrb	r3, [r7, #3]
   27c18:	2b0d      	cmp	r3, #13
   27c1a:	d101      	bne.n	27c20 <var_changeType+0x270>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27c1c:	23fe      	movs	r3, #254	; 0xfe
   27c1e:	e0a4      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27c20:	f44f 7381 	mov.w	r3, #258	; 0x102
   27c24:	e0a1      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_FLOAT64:
        switch (newType)
   27c26:	78fb      	ldrb	r3, [r7, #3]
   27c28:	2b0d      	cmp	r3, #13
   27c2a:	d101      	bne.n	27c30 <var_changeType+0x280>
        {
        case DLMS_DATA_TYPE_BINARY_CODED_DESIMAL:
            return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   27c2c:	23fe      	movs	r3, #254	; 0xfe
   27c2e:	e09c      	b.n	27d6a <var_changeType+0x3ba>
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27c30:	f44f 7381 	mov.w	r3, #258	; 0x102
   27c34:	e099      	b.n	27d6a <var_changeType+0x3ba>
        }
        break;
    case DLMS_DATA_TYPE_DATETIME:
        switch (newType)
   27c36:	78fb      	ldrb	r3, [r7, #3]
   27c38:	3b09      	subs	r3, #9
   27c3a:	2b12      	cmp	r3, #18
   27c3c:	d828      	bhi.n	27c90 <var_changeType+0x2e0>
   27c3e:	a201      	add	r2, pc, #4	; (adr r2, 27c44 <var_changeType+0x294>)
   27c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27c44:	00027c97 	.word	0x00027c97
   27c48:	00027c97 	.word	0x00027c97
   27c4c:	00027c91 	.word	0x00027c91
   27c50:	00027c91 	.word	0x00027c91
   27c54:	00027c91 	.word	0x00027c91
   27c58:	00027c91 	.word	0x00027c91
   27c5c:	00027c91 	.word	0x00027c91
   27c60:	00027c91 	.word	0x00027c91
   27c64:	00027c91 	.word	0x00027c91
   27c68:	00027c91 	.word	0x00027c91
   27c6c:	00027c91 	.word	0x00027c91
   27c70:	00027c91 	.word	0x00027c91
   27c74:	00027c91 	.word	0x00027c91
   27c78:	00027c91 	.word	0x00027c91
   27c7c:	00027c91 	.word	0x00027c91
   27c80:	00027c91 	.word	0x00027c91
   27c84:	00027c91 	.word	0x00027c91
   27c88:	00027c97 	.word	0x00027c97
   27c8c:	00027c97 	.word	0x00027c97
        case DLMS_DATA_TYPE_DATE:
            break;
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27c90:	f44f 7381 	mov.w	r3, #258	; 0x102
   27c94:	e069      	b.n	27d6a <var_changeType+0x3ba>
        break;
    case DLMS_DATA_TYPE_DATETIME:
        switch (newType)
        {
        case DLMS_DATA_TYPE_OCTET_STRING:
            break;
   27c96:	bf00      	nop
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   27c98:	e066      	b.n	27d68 <var_changeType+0x3b8>
    case DLMS_DATA_TYPE_DATE:
        switch (newType)
   27c9a:	78fb      	ldrb	r3, [r7, #3]
   27c9c:	3b09      	subs	r3, #9
   27c9e:	2b12      	cmp	r3, #18
   27ca0:	d828      	bhi.n	27cf4 <var_changeType+0x344>
   27ca2:	a201      	add	r2, pc, #4	; (adr r2, 27ca8 <var_changeType+0x2f8>)
   27ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27ca8:	00027cfb 	.word	0x00027cfb
   27cac:	00027cfb 	.word	0x00027cfb
   27cb0:	00027cf5 	.word	0x00027cf5
   27cb4:	00027cf5 	.word	0x00027cf5
   27cb8:	00027cf5 	.word	0x00027cf5
   27cbc:	00027cf5 	.word	0x00027cf5
   27cc0:	00027cf5 	.word	0x00027cf5
   27cc4:	00027cf5 	.word	0x00027cf5
   27cc8:	00027cf5 	.word	0x00027cf5
   27ccc:	00027cf5 	.word	0x00027cf5
   27cd0:	00027cf5 	.word	0x00027cf5
   27cd4:	00027cf5 	.word	0x00027cf5
   27cd8:	00027cf5 	.word	0x00027cf5
   27cdc:	00027cf5 	.word	0x00027cf5
   27ce0:	00027cf5 	.word	0x00027cf5
   27ce4:	00027cf5 	.word	0x00027cf5
   27ce8:	00027cfb 	.word	0x00027cfb
   27cec:	00027cfb 	.word	0x00027cfb
   27cf0:	00027cfb 	.word	0x00027cfb
        case DLMS_DATA_TYPE_DATE:
            break;
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27cf4:	f44f 7381 	mov.w	r3, #258	; 0x102
   27cf8:	e037      	b.n	27d6a <var_changeType+0x3ba>
        break;
    case DLMS_DATA_TYPE_DATE:
        switch (newType)
        {
        case DLMS_DATA_TYPE_OCTET_STRING:
            break;
   27cfa:	bf00      	nop
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   27cfc:	e034      	b.n	27d68 <var_changeType+0x3b8>
    case DLMS_DATA_TYPE_TIME:
        switch (newType)
   27cfe:	78fb      	ldrb	r3, [r7, #3]
   27d00:	3b09      	subs	r3, #9
   27d02:	2b12      	cmp	r3, #18
   27d04:	d828      	bhi.n	27d58 <var_changeType+0x3a8>
   27d06:	a201      	add	r2, pc, #4	; (adr r2, 27d0c <var_changeType+0x35c>)
   27d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27d0c:	00027d5f 	.word	0x00027d5f
   27d10:	00027d5f 	.word	0x00027d5f
   27d14:	00027d59 	.word	0x00027d59
   27d18:	00027d59 	.word	0x00027d59
   27d1c:	00027d59 	.word	0x00027d59
   27d20:	00027d59 	.word	0x00027d59
   27d24:	00027d59 	.word	0x00027d59
   27d28:	00027d59 	.word	0x00027d59
   27d2c:	00027d59 	.word	0x00027d59
   27d30:	00027d59 	.word	0x00027d59
   27d34:	00027d59 	.word	0x00027d59
   27d38:	00027d59 	.word	0x00027d59
   27d3c:	00027d59 	.word	0x00027d59
   27d40:	00027d59 	.word	0x00027d59
   27d44:	00027d59 	.word	0x00027d59
   27d48:	00027d59 	.word	0x00027d59
   27d4c:	00027d5f 	.word	0x00027d5f
   27d50:	00027d5f 	.word	0x00027d5f
   27d54:	00027d5f 	.word	0x00027d5f
        case DLMS_DATA_TYPE_DATE:
            break;
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27d58:	f44f 7381 	mov.w	r3, #258	; 0x102
   27d5c:	e005      	b.n	27d6a <var_changeType+0x3ba>
        break;
    case DLMS_DATA_TYPE_TIME:
        switch (newType)
        {
        case DLMS_DATA_TYPE_OCTET_STRING:
            break;
   27d5e:	bf00      	nop
        case DLMS_DATA_TYPE_TIME:
            break;
        default:
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
   27d60:	e002      	b.n	27d68 <var_changeType+0x3b8>
    case DLMS_DATA_TYPE_ARRAY:
    case DLMS_DATA_TYPE_STRUCTURE:
    case DLMS_DATA_TYPE_COMPACT_ARRAY:
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   27d62:	f44f 7381 	mov.w	r3, #258	; 0x102
   27d66:	e000      	b.n	27d6a <var_changeType+0x3ba>
    }
    return DLMS_ERROR_CODE_OK;
   27d68:	2300      	movs	r3, #0
}
   27d6a:	4618      	mov	r0, r3
   27d6c:	3708      	adds	r7, #8
   27d6e:	46bd      	mov	sp, r7
   27d70:	bd80      	pop	{r7, pc}
   27d72:	bf00      	nop

00027d74 <var_copy>:

//copy variant.
int var_copy(dlmsVARIANT *target, dlmsVARIANT *source)
{
   27d74:	b580      	push	{r7, lr}
   27d76:	b088      	sub	sp, #32
   27d78:	af00      	add	r7, sp, #0
   27d7a:	6078      	str	r0, [r7, #4]
   27d7c:	6039      	str	r1, [r7, #0]
    dlmsVARIANT *it;
    dlmsVARIANT *item;
    int ret = DLMS_ERROR_CODE_OK, pos;
   27d7e:	2300      	movs	r3, #0
   27d80:	61fb      	str	r3, [r7, #28]
    unsigned char attaced = 0;
   27d82:	2300      	movs	r3, #0
   27d84:	75fb      	strb	r3, [r7, #23]
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
   27d86:	687b      	ldr	r3, [r7, #4]
   27d88:	781b      	ldrb	r3, [r3, #0]
   27d8a:	2b01      	cmp	r3, #1
   27d8c:	d003      	beq.n	27d96 <var_copy+0x22>
   27d8e:	687b      	ldr	r3, [r7, #4]
   27d90:	781b      	ldrb	r3, [r3, #0]
   27d92:	2b02      	cmp	r3, #2
   27d94:	d10e      	bne.n	27db4 <var_copy+0x40>
   27d96:	687b      	ldr	r3, [r7, #4]
   27d98:	689b      	ldr	r3, [r3, #8]
   27d9a:	4618      	mov	r0, r3
   27d9c:	f7fe ff0a 	bl	26bb4 <va_isAttached>
   27da0:	4603      	mov	r3, r0
   27da2:	2b00      	cmp	r3, #0
   27da4:	d006      	beq.n	27db4 <var_copy+0x40>
    {
        attaced = 1;
   27da6:	2301      	movs	r3, #1
   27da8:	75fb      	strb	r3, [r7, #23]
        target->Arr->position = 0;
   27daa:	687b      	ldr	r3, [r7, #4]
   27dac:	689b      	ldr	r3, [r3, #8]
   27dae:	2200      	movs	r2, #0
   27db0:	811a      	strh	r2, [r3, #8]
   27db2:	e00c      	b.n	27dce <var_copy+0x5a>
    }
    else
    {
        ret = var_clear(target);
   27db4:	6878      	ldr	r0, [r7, #4]
   27db6:	f7fe f9c7 	bl	26148 <var_clear>
   27dba:	61f8      	str	r0, [r7, #28]
        if (ret != DLMS_ERROR_CODE_OK)
   27dbc:	69fb      	ldr	r3, [r7, #28]
   27dbe:	2b00      	cmp	r3, #0
   27dc0:	d001      	beq.n	27dc6 <var_copy+0x52>
        {
            return ret;
   27dc2:	69fb      	ldr	r3, [r7, #28]
   27dc4:	e122      	b.n	2800c <var_copy+0x298>
        }
        target->vt = source->vt;
   27dc6:	683b      	ldr	r3, [r7, #0]
   27dc8:	781a      	ldrb	r2, [r3, #0]
   27dca:	687b      	ldr	r3, [r7, #4]
   27dcc:	701a      	strb	r2, [r3, #0]
    }
    if (source->vt == DLMS_DATA_TYPE_STRING)
   27dce:	683b      	ldr	r3, [r7, #0]
   27dd0:	781b      	ldrb	r3, [r3, #0]
   27dd2:	2b0a      	cmp	r3, #10
   27dd4:	d11c      	bne.n	27e10 <var_copy+0x9c>
    {
        if (source->strVal != NULL)
   27dd6:	683b      	ldr	r3, [r7, #0]
   27dd8:	689b      	ldr	r3, [r3, #8]
   27dda:	2b00      	cmp	r3, #0
   27ddc:	f000 8115 	beq.w	2800a <var_copy+0x296>
        {
            target->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   27de0:	200c      	movs	r0, #12
   27de2:	f001 fe2f 	bl	29a44 <malloc>
   27de6:	4603      	mov	r3, r0
   27de8:	461a      	mov	r2, r3
   27dea:	687b      	ldr	r3, [r7, #4]
   27dec:	609a      	str	r2, [r3, #8]
            bb_init(target->strVal);
   27dee:	687b      	ldr	r3, [r7, #4]
   27df0:	689b      	ldr	r3, [r3, #8]
   27df2:	4618      	mov	r0, r3
   27df4:	f7da ff78 	bl	2ce8 <bb_init>
            bb_set(target->strVal, source->strVal->data, source->strVal->size);
   27df8:	687b      	ldr	r3, [r7, #4]
   27dfa:	6898      	ldr	r0, [r3, #8]
   27dfc:	683b      	ldr	r3, [r7, #0]
   27dfe:	689b      	ldr	r3, [r3, #8]
   27e00:	6819      	ldr	r1, [r3, #0]
   27e02:	683b      	ldr	r3, [r7, #0]
   27e04:	689b      	ldr	r3, [r3, #8]
   27e06:	88db      	ldrh	r3, [r3, #6]
   27e08:	461a      	mov	r2, r3
   27e0a:	f7db fba9 	bl	3560 <bb_set>
   27e0e:	e0fc      	b.n	2800a <var_copy+0x296>
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_OCTET_STRING)
   27e10:	683b      	ldr	r3, [r7, #0]
   27e12:	781b      	ldrb	r3, [r3, #0]
   27e14:	2b09      	cmp	r3, #9
   27e16:	d11c      	bne.n	27e52 <var_copy+0xde>
    {
        if (source->byteArr != 0)
   27e18:	683b      	ldr	r3, [r7, #0]
   27e1a:	689b      	ldr	r3, [r3, #8]
   27e1c:	2b00      	cmp	r3, #0
   27e1e:	f000 80f4 	beq.w	2800a <var_copy+0x296>
        {
            target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   27e22:	200c      	movs	r0, #12
   27e24:	f001 fe0e 	bl	29a44 <malloc>
   27e28:	4603      	mov	r3, r0
   27e2a:	461a      	mov	r2, r3
   27e2c:	687b      	ldr	r3, [r7, #4]
   27e2e:	609a      	str	r2, [r3, #8]
            bb_init(target->byteArr);
   27e30:	687b      	ldr	r3, [r7, #4]
   27e32:	689b      	ldr	r3, [r3, #8]
   27e34:	4618      	mov	r0, r3
   27e36:	f7da ff57 	bl	2ce8 <bb_init>
            bb_set(target->byteArr, source->byteArr->data, source->byteArr->size);
   27e3a:	687b      	ldr	r3, [r7, #4]
   27e3c:	6898      	ldr	r0, [r3, #8]
   27e3e:	683b      	ldr	r3, [r7, #0]
   27e40:	689b      	ldr	r3, [r3, #8]
   27e42:	6819      	ldr	r1, [r3, #0]
   27e44:	683b      	ldr	r3, [r7, #0]
   27e46:	689b      	ldr	r3, [r3, #8]
   27e48:	88db      	ldrh	r3, [r3, #6]
   27e4a:	461a      	mov	r2, r3
   27e4c:	f7db fb88 	bl	3560 <bb_set>
   27e50:	e0db      	b.n	2800a <var_copy+0x296>
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
   27e52:	683b      	ldr	r3, [r7, #0]
   27e54:	781b      	ldrb	r3, [r3, #0]
   27e56:	2b01      	cmp	r3, #1
   27e58:	d003      	beq.n	27e62 <var_copy+0xee>
        source->vt == DLMS_DATA_TYPE_STRUCTURE)
   27e5a:	683b      	ldr	r3, [r7, #0]
   27e5c:	781b      	ldrb	r3, [r3, #0]
            target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
            bb_init(target->byteArr);
            bb_set(target->byteArr, source->byteArr->data, source->byteArr->size);
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
   27e5e:	2b02      	cmp	r3, #2
   27e60:	d17c      	bne.n	27f5c <var_copy+0x1e8>
        source->vt == DLMS_DATA_TYPE_STRUCTURE)
    {
        if (source->Arr != NULL && source->Arr->size != 0)
   27e62:	683b      	ldr	r3, [r7, #0]
   27e64:	689b      	ldr	r3, [r3, #8]
   27e66:	2b00      	cmp	r3, #0
   27e68:	f000 80ce 	beq.w	28008 <var_copy+0x294>
   27e6c:	683b      	ldr	r3, [r7, #0]
   27e6e:	689b      	ldr	r3, [r3, #8]
   27e70:	88db      	ldrh	r3, [r3, #6]
   27e72:	2b00      	cmp	r3, #0
   27e74:	f000 80c8 	beq.w	28008 <var_copy+0x294>
        {
            if (target->Arr == NULL)
   27e78:	687b      	ldr	r3, [r7, #4]
   27e7a:	689b      	ldr	r3, [r3, #8]
   27e7c:	2b00      	cmp	r3, #0
   27e7e:	d10b      	bne.n	27e98 <var_copy+0x124>
            {
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
   27e80:	200c      	movs	r0, #12
   27e82:	f001 fddf 	bl	29a44 <malloc>
   27e86:	4603      	mov	r3, r0
   27e88:	461a      	mov	r2, r3
   27e8a:	687b      	ldr	r3, [r7, #4]
   27e8c:	609a      	str	r2, [r3, #8]
                va_init(target->Arr);
   27e8e:	687b      	ldr	r3, [r7, #4]
   27e90:	689b      	ldr	r3, [r3, #8]
   27e92:	4618      	mov	r0, r3
   27e94:	f7fe feac 	bl	26bf0 <va_init>
            }
            va_capacity(target->Arr, source->Arr->size);
   27e98:	687b      	ldr	r3, [r7, #4]
   27e9a:	689a      	ldr	r2, [r3, #8]
   27e9c:	683b      	ldr	r3, [r7, #0]
   27e9e:	689b      	ldr	r3, [r3, #8]
   27ea0:	88db      	ldrh	r3, [r3, #6]
   27ea2:	4619      	mov	r1, r3
   27ea4:	4610      	mov	r0, r2
   27ea6:	f7fe feb9 	bl	26c1c <va_capacity>
            for (pos = 0; pos != source->Arr->size; ++pos)
   27eaa:	2300      	movs	r3, #0
   27eac:	61bb      	str	r3, [r7, #24]
   27eae:	e04d      	b.n	27f4c <var_copy+0x1d8>
            {
                if ((ret = va_getByIndex(source->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   27eb0:	683b      	ldr	r3, [r7, #0]
   27eb2:	689b      	ldr	r3, [r3, #8]
   27eb4:	f107 0210 	add.w	r2, r7, #16
   27eb8:	69b9      	ldr	r1, [r7, #24]
   27eba:	4618      	mov	r0, r3
   27ebc:	f7fe ffd6 	bl	26e6c <va_getByIndex>
   27ec0:	61f8      	str	r0, [r7, #28]
   27ec2:	69fb      	ldr	r3, [r7, #28]
   27ec4:	2b00      	cmp	r3, #0
   27ec6:	d001      	beq.n	27ecc <var_copy+0x158>
                {
                    return ret;
   27ec8:	69fb      	ldr	r3, [r7, #28]
   27eca:	e09f      	b.n	2800c <var_copy+0x298>
                }
                if (attaced)
   27ecc:	7dfb      	ldrb	r3, [r7, #23]
   27ece:	2b00      	cmp	r3, #0
   27ed0:	d017      	beq.n	27f02 <var_copy+0x18e>
                {
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
   27ed2:	687b      	ldr	r3, [r7, #4]
   27ed4:	689b      	ldr	r3, [r3, #8]
   27ed6:	f107 020c 	add.w	r2, r7, #12
   27eda:	69b9      	ldr	r1, [r7, #24]
   27edc:	4618      	mov	r0, r3
   27ede:	f7fe ffc5 	bl	26e6c <va_getByIndex>
   27ee2:	61f8      	str	r0, [r7, #28]
   27ee4:	69fb      	ldr	r3, [r7, #28]
   27ee6:	2b00      	cmp	r3, #0
   27ee8:	d109      	bne.n	27efe <var_copy+0x18a>
                        (ret = var_copy(item, it)) != DLMS_ERROR_CODE_OK)
   27eea:	68fb      	ldr	r3, [r7, #12]
   27eec:	693a      	ldr	r2, [r7, #16]
                {
                    return ret;
                }
                if (attaced)
                {
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
   27eee:	4611      	mov	r1, r2
   27ef0:	4618      	mov	r0, r3
   27ef2:	f7ff ff3f 	bl	27d74 <var_copy>
   27ef6:	61f8      	str	r0, [r7, #28]
   27ef8:	69fb      	ldr	r3, [r7, #28]
   27efa:	2b00      	cmp	r3, #0
   27efc:	d023      	beq.n	27f46 <var_copy+0x1d2>
                        (ret = var_copy(item, it)) != DLMS_ERROR_CODE_OK)
                    {
                        return ret;
   27efe:	69fb      	ldr	r3, [r7, #28]
   27f00:	e084      	b.n	2800c <var_copy+0x298>
                    }
                }
                else
                {
                    item = (dlmsVARIANT *)gxmalloc(sizeof(dlmsVARIANT));
   27f02:	2010      	movs	r0, #16
   27f04:	f001 fd9e 	bl	29a44 <malloc>
   27f08:	4603      	mov	r3, r0
   27f0a:	60fb      	str	r3, [r7, #12]
                    ret = var_init(item);
   27f0c:	68fb      	ldr	r3, [r7, #12]
   27f0e:	4618      	mov	r0, r3
   27f10:	f7fe f90a 	bl	26128 <var_init>
   27f14:	61f8      	str	r0, [r7, #28]
                    if (ret != DLMS_ERROR_CODE_OK)
   27f16:	69fb      	ldr	r3, [r7, #28]
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d001      	beq.n	27f20 <var_copy+0x1ac>
                    {
                        return ret;
   27f1c:	69fb      	ldr	r3, [r7, #28]
   27f1e:	e075      	b.n	2800c <var_copy+0x298>
                    }
                    ret = var_copy(item, it);
   27f20:	68fb      	ldr	r3, [r7, #12]
   27f22:	693a      	ldr	r2, [r7, #16]
   27f24:	4611      	mov	r1, r2
   27f26:	4618      	mov	r0, r3
   27f28:	f7ff ff24 	bl	27d74 <var_copy>
   27f2c:	61f8      	str	r0, [r7, #28]
                    if (ret != DLMS_ERROR_CODE_OK)
   27f2e:	69fb      	ldr	r3, [r7, #28]
   27f30:	2b00      	cmp	r3, #0
   27f32:	d001      	beq.n	27f38 <var_copy+0x1c4>
                    {
                        return ret;
   27f34:	69fb      	ldr	r3, [r7, #28]
   27f36:	e069      	b.n	2800c <var_copy+0x298>
                    }
                    va_push(target->Arr, item);
   27f38:	687b      	ldr	r3, [r7, #4]
   27f3a:	689b      	ldr	r3, [r3, #8]
   27f3c:	68fa      	ldr	r2, [r7, #12]
   27f3e:	4611      	mov	r1, r2
   27f40:	4618      	mov	r0, r3
   27f42:	f7fe feab 	bl	26c9c <va_push>
            {
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
                va_init(target->Arr);
            }
            va_capacity(target->Arr, source->Arr->size);
            for (pos = 0; pos != source->Arr->size; ++pos)
   27f46:	69bb      	ldr	r3, [r7, #24]
   27f48:	3301      	adds	r3, #1
   27f4a:	61bb      	str	r3, [r7, #24]
   27f4c:	683b      	ldr	r3, [r7, #0]
   27f4e:	689b      	ldr	r3, [r3, #8]
   27f50:	88db      	ldrh	r3, [r3, #6]
   27f52:	461a      	mov	r2, r3
   27f54:	69bb      	ldr	r3, [r7, #24]
   27f56:	429a      	cmp	r2, r3
   27f58:	d1aa      	bne.n	27eb0 <var_copy+0x13c>
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
        source->vt == DLMS_DATA_TYPE_STRUCTURE)
    {
        if (source->Arr != NULL && source->Arr->size != 0)
   27f5a:	e055      	b.n	28008 <var_copy+0x294>
                    va_push(target->Arr, item);
                }
            }
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_DATETIME)
   27f5c:	683b      	ldr	r3, [r7, #0]
   27f5e:	781b      	ldrb	r3, [r3, #0]
   27f60:	2b19      	cmp	r3, #25
   27f62:	d107      	bne.n	27f74 <var_copy+0x200>
    {
        ret = var_setDateTime(target, source->dateTime);
   27f64:	683b      	ldr	r3, [r7, #0]
   27f66:	689b      	ldr	r3, [r3, #8]
   27f68:	4619      	mov	r1, r3
   27f6a:	6878      	ldr	r0, [r7, #4]
   27f6c:	f000 f852 	bl	28014 <var_setDateTime>
   27f70:	61f8      	str	r0, [r7, #28]
   27f72:	e04a      	b.n	2800a <var_copy+0x296>
    }
    else if (source->vt == DLMS_DATA_TYPE_DATE)
   27f74:	683b      	ldr	r3, [r7, #0]
   27f76:	781b      	ldrb	r3, [r3, #0]
   27f78:	2b1a      	cmp	r3, #26
   27f7a:	d107      	bne.n	27f8c <var_copy+0x218>
    {
        ret = var_setDate(target, source->dateTime);
   27f7c:	683b      	ldr	r3, [r7, #0]
   27f7e:	689b      	ldr	r3, [r3, #8]
   27f80:	4619      	mov	r1, r3
   27f82:	6878      	ldr	r0, [r7, #4]
   27f84:	f000 f86a 	bl	2805c <var_setDate>
   27f88:	61f8      	str	r0, [r7, #28]
   27f8a:	e03e      	b.n	2800a <var_copy+0x296>
    }
    else if (source->vt == DLMS_DATA_TYPE_TIME)
   27f8c:	683b      	ldr	r3, [r7, #0]
   27f8e:	781b      	ldrb	r3, [r3, #0]
   27f90:	2b1b      	cmp	r3, #27
   27f92:	d107      	bne.n	27fa4 <var_copy+0x230>
    {
        ret = var_setTime(target, source->dateTime);
   27f94:	683b      	ldr	r3, [r7, #0]
   27f96:	689b      	ldr	r3, [r3, #8]
   27f98:	4619      	mov	r1, r3
   27f9a:	6878      	ldr	r0, [r7, #4]
   27f9c:	f000 f882 	bl	280a4 <var_setTime>
   27fa0:	61f8      	str	r0, [r7, #28]
   27fa2:	e032      	b.n	2800a <var_copy+0x296>
    }
    else if (source->vt == DLMS_DATA_TYPE_BIT_STRING)
   27fa4:	683b      	ldr	r3, [r7, #0]
   27fa6:	781b      	ldrb	r3, [r3, #0]
   27fa8:	2b04      	cmp	r3, #4
   27faa:	d118      	bne.n	27fde <var_copy+0x26a>
    {
        target->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
   27fac:	200c      	movs	r0, #12
   27fae:	f001 fd49 	bl	29a44 <malloc>
   27fb2:	4603      	mov	r3, r0
   27fb4:	461a      	mov	r2, r3
   27fb6:	687b      	ldr	r3, [r7, #4]
   27fb8:	609a      	str	r2, [r3, #8]
        ba_init(target->bitArr);
   27fba:	687b      	ldr	r3, [r7, #4]
   27fbc:	689b      	ldr	r3, [r3, #8]
   27fbe:	4618      	mov	r0, r3
   27fc0:	f7da fc1a 	bl	27f8 <ba_init>
        ret = ba_copy(target->bitArr, source->bitArr->data, (unsigned short)source->bitArr->size);
   27fc4:	687b      	ldr	r3, [r7, #4]
   27fc6:	6898      	ldr	r0, [r3, #8]
   27fc8:	683b      	ldr	r3, [r7, #0]
   27fca:	689b      	ldr	r3, [r3, #8]
   27fcc:	6819      	ldr	r1, [r3, #0]
   27fce:	683b      	ldr	r3, [r7, #0]
   27fd0:	689b      	ldr	r3, [r3, #8]
   27fd2:	88db      	ldrh	r3, [r3, #6]
   27fd4:	461a      	mov	r2, r3
   27fd6:	f7da fd6d 	bl	2ab4 <ba_copy>
   27fda:	61f8      	str	r0, [r7, #28]
   27fdc:	e015      	b.n	2800a <var_copy+0x296>
    }
    else
    {
        ret = var_getSize(source->vt);
   27fde:	683b      	ldr	r3, [r7, #0]
   27fe0:	781b      	ldrb	r3, [r3, #0]
   27fe2:	4618      	mov	r0, r3
   27fe4:	f7fe fd10 	bl	26a08 <var_getSize>
   27fe8:	61f8      	str	r0, [r7, #28]
        if (ret > 0)
   27fea:	69fb      	ldr	r3, [r7, #28]
   27fec:	2b00      	cmp	r3, #0
   27fee:	dd08      	ble.n	28002 <var_copy+0x28e>
        {
            memcpy(&target->bVal, &source->bVal, ret);
   27ff0:	687b      	ldr	r3, [r7, #4]
   27ff2:	f103 0008 	add.w	r0, r3, #8
   27ff6:	683b      	ldr	r3, [r7, #0]
   27ff8:	3308      	adds	r3, #8
   27ffa:	69fa      	ldr	r2, [r7, #28]
   27ffc:	4619      	mov	r1, r3
   27ffe:	f001 fd40 	bl	29a82 <memcpy>
        }
        ret = 0;
   28002:	2300      	movs	r3, #0
   28004:	61fb      	str	r3, [r7, #28]
   28006:	e000      	b.n	2800a <var_copy+0x296>
        }
    }
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
        source->vt == DLMS_DATA_TYPE_STRUCTURE)
    {
        if (source->Arr != NULL && source->Arr->size != 0)
   28008:	bf00      	nop
        {
            memcpy(&target->bVal, &source->bVal, ret);
        }
        ret = 0;
    }
    return ret;
   2800a:	69fb      	ldr	r3, [r7, #28]
}
   2800c:	4618      	mov	r0, r3
   2800e:	3720      	adds	r7, #32
   28010:	46bd      	mov	sp, r7
   28012:	bd80      	pop	{r7, pc}

00028014 <var_setDateTime>:

int var_setDateTime(dlmsVARIANT *target, gxtime* value)
{
   28014:	b580      	push	{r7, lr}
   28016:	b084      	sub	sp, #16
   28018:	af00      	add	r7, sp, #0
   2801a:	6078      	str	r0, [r7, #4]
   2801c:	6039      	str	r1, [r7, #0]
    int ret;
    ret = var_clear(target);
   2801e:	6878      	ldr	r0, [r7, #4]
   28020:	f7fe f892 	bl	26148 <var_clear>
   28024:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   28026:	68fb      	ldr	r3, [r7, #12]
   28028:	2b00      	cmp	r3, #0
   2802a:	d001      	beq.n	28030 <var_setDateTime+0x1c>
    {
        return ret;
   2802c:	68fb      	ldr	r3, [r7, #12]
   2802e:	e010      	b.n	28052 <var_setDateTime+0x3e>
    }
    target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   28030:	2030      	movs	r0, #48	; 0x30
   28032:	f001 fd07 	bl	29a44 <malloc>
   28036:	4603      	mov	r3, r0
   28038:	461a      	mov	r2, r3
   2803a:	687b      	ldr	r3, [r7, #4]
   2803c:	609a      	str	r2, [r3, #8]
    time_copy(target->dateTime, value);
   2803e:	687b      	ldr	r3, [r7, #4]
   28040:	689b      	ldr	r3, [r3, #8]
   28042:	6839      	ldr	r1, [r7, #0]
   28044:	4618      	mov	r0, r3
   28046:	f7de fc85 	bl	6954 <time_copy>
    target->vt = DLMS_DATA_TYPE_DATETIME;
   2804a:	687b      	ldr	r3, [r7, #4]
   2804c:	2219      	movs	r2, #25
   2804e:	701a      	strb	r2, [r3, #0]
    return ret;
   28050:	68fb      	ldr	r3, [r7, #12]
}
   28052:	4618      	mov	r0, r3
   28054:	3710      	adds	r7, #16
   28056:	46bd      	mov	sp, r7
   28058:	bd80      	pop	{r7, pc}
   2805a:	bf00      	nop

0002805c <var_setDate>:

int var_setDate(dlmsVARIANT *target, gxtime* value)
{
   2805c:	b580      	push	{r7, lr}
   2805e:	b084      	sub	sp, #16
   28060:	af00      	add	r7, sp, #0
   28062:	6078      	str	r0, [r7, #4]
   28064:	6039      	str	r1, [r7, #0]
    int ret;
    ret = var_clear(target);
   28066:	6878      	ldr	r0, [r7, #4]
   28068:	f7fe f86e 	bl	26148 <var_clear>
   2806c:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   2806e:	68fb      	ldr	r3, [r7, #12]
   28070:	2b00      	cmp	r3, #0
   28072:	d001      	beq.n	28078 <var_setDate+0x1c>
    {
        return ret;
   28074:	68fb      	ldr	r3, [r7, #12]
   28076:	e010      	b.n	2809a <var_setDate+0x3e>
    }
    target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   28078:	2030      	movs	r0, #48	; 0x30
   2807a:	f001 fce3 	bl	29a44 <malloc>
   2807e:	4603      	mov	r3, r0
   28080:	461a      	mov	r2, r3
   28082:	687b      	ldr	r3, [r7, #4]
   28084:	609a      	str	r2, [r3, #8]
    time_copy(target->dateTime, value);
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	689b      	ldr	r3, [r3, #8]
   2808a:	6839      	ldr	r1, [r7, #0]
   2808c:	4618      	mov	r0, r3
   2808e:	f7de fc61 	bl	6954 <time_copy>
    target->vt = DLMS_DATA_TYPE_DATE;
   28092:	687b      	ldr	r3, [r7, #4]
   28094:	221a      	movs	r2, #26
   28096:	701a      	strb	r2, [r3, #0]
    return ret;
   28098:	68fb      	ldr	r3, [r7, #12]
}
   2809a:	4618      	mov	r0, r3
   2809c:	3710      	adds	r7, #16
   2809e:	46bd      	mov	sp, r7
   280a0:	bd80      	pop	{r7, pc}
   280a2:	bf00      	nop

000280a4 <var_setTime>:

int var_setTime(dlmsVARIANT *target, gxtime* value)
{
   280a4:	b580      	push	{r7, lr}
   280a6:	b084      	sub	sp, #16
   280a8:	af00      	add	r7, sp, #0
   280aa:	6078      	str	r0, [r7, #4]
   280ac:	6039      	str	r1, [r7, #0]
    int ret;
    ret = var_clear(target);
   280ae:	6878      	ldr	r0, [r7, #4]
   280b0:	f7fe f84a 	bl	26148 <var_clear>
   280b4:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   280b6:	68fb      	ldr	r3, [r7, #12]
   280b8:	2b00      	cmp	r3, #0
   280ba:	d001      	beq.n	280c0 <var_setTime+0x1c>
    {
        return ret;
   280bc:	68fb      	ldr	r3, [r7, #12]
   280be:	e010      	b.n	280e2 <var_setTime+0x3e>
    }
    target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   280c0:	2030      	movs	r0, #48	; 0x30
   280c2:	f001 fcbf 	bl	29a44 <malloc>
   280c6:	4603      	mov	r3, r0
   280c8:	461a      	mov	r2, r3
   280ca:	687b      	ldr	r3, [r7, #4]
   280cc:	609a      	str	r2, [r3, #8]
    time_copy(target->dateTime, value);
   280ce:	687b      	ldr	r3, [r7, #4]
   280d0:	689b      	ldr	r3, [r3, #8]
   280d2:	6839      	ldr	r1, [r7, #0]
   280d4:	4618      	mov	r0, r3
   280d6:	f7de fc3d 	bl	6954 <time_copy>
    target->vt = DLMS_DATA_TYPE_TIME;
   280da:	687b      	ldr	r3, [r7, #4]
   280dc:	221b      	movs	r2, #27
   280de:	701a      	strb	r2, [r3, #0]
    return ret;
   280e0:	68fb      	ldr	r3, [r7, #12]
}
   280e2:	4618      	mov	r0, r3
   280e4:	3710      	adds	r7, #16
   280e6:	46bd      	mov	sp, r7
   280e8:	bd80      	pop	{r7, pc}
   280ea:	bf00      	nop

000280ec <var_setDateTimeAsOctetString>:

int var_setDateTimeAsOctetString(
    dlmsVARIANT *target,
    gxtime* value)
{
   280ec:	b580      	push	{r7, lr}
   280ee:	b084      	sub	sp, #16
   280f0:	af00      	add	r7, sp, #0
   280f2:	6078      	str	r0, [r7, #4]
   280f4:	6039      	str	r1, [r7, #0]
    int ret;
    ret = var_clear(target);
   280f6:	6878      	ldr	r0, [r7, #4]
   280f8:	f7fe f826 	bl	26148 <var_clear>
   280fc:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   280fe:	68fb      	ldr	r3, [r7, #12]
   28100:	2b00      	cmp	r3, #0
   28102:	d001      	beq.n	28108 <var_setDateTimeAsOctetString+0x1c>
    {
        return ret;
   28104:	68fb      	ldr	r3, [r7, #12]
   28106:	e021      	b.n	2814c <var_setDateTimeAsOctetString+0x60>
    }
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   28108:	200c      	movs	r0, #12
   2810a:	f001 fc9b 	bl	29a44 <malloc>
   2810e:	4603      	mov	r3, r0
   28110:	461a      	mov	r2, r3
   28112:	687b      	ldr	r3, [r7, #4]
   28114:	609a      	str	r2, [r3, #8]
    bb_init(target->byteArr);
   28116:	687b      	ldr	r3, [r7, #4]
   28118:	689b      	ldr	r3, [r3, #8]
   2811a:	4618      	mov	r0, r3
   2811c:	f7da fde4 	bl	2ce8 <bb_init>
    bb_capacity(target->byteArr, 12);
   28120:	687b      	ldr	r3, [r7, #4]
   28122:	689b      	ldr	r3, [r3, #8]
   28124:	210c      	movs	r1, #12
   28126:	4618      	mov	r0, r3
   28128:	f7da fdf4 	bl	2d14 <bb_capacity>
    if ((ret = var_getDateTime2(value, target->byteArr)) != 0)
   2812c:	687b      	ldr	r3, [r7, #4]
   2812e:	689b      	ldr	r3, [r3, #8]
   28130:	4619      	mov	r1, r3
   28132:	6838      	ldr	r0, [r7, #0]
   28134:	f7fe f892 	bl	2625c <var_getDateTime2>
   28138:	60f8      	str	r0, [r7, #12]
   2813a:	68fb      	ldr	r3, [r7, #12]
   2813c:	2b00      	cmp	r3, #0
   2813e:	d001      	beq.n	28144 <var_setDateTimeAsOctetString+0x58>
    {
        return ret;
   28140:	68fb      	ldr	r3, [r7, #12]
   28142:	e003      	b.n	2814c <var_setDateTimeAsOctetString+0x60>
    }
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   28144:	687b      	ldr	r3, [r7, #4]
   28146:	2209      	movs	r2, #9
   28148:	701a      	strb	r2, [r3, #0]
    return ret;
   2814a:	68fb      	ldr	r3, [r7, #12]
}
   2814c:	4618      	mov	r0, r3
   2814e:	3710      	adds	r7, #16
   28150:	46bd      	mov	sp, r7
   28152:	bd80      	pop	{r7, pc}

00028154 <var_setTimeAsOctetString>:
}

int var_setTimeAsOctetString(
    dlmsVARIANT *target,
    gxtime* value)
{
   28154:	b580      	push	{r7, lr}
   28156:	b084      	sub	sp, #16
   28158:	af00      	add	r7, sp, #0
   2815a:	6078      	str	r0, [r7, #4]
   2815c:	6039      	str	r1, [r7, #0]
    int ret;
    ret = var_clear(target);
   2815e:	6878      	ldr	r0, [r7, #4]
   28160:	f7fd fff2 	bl	26148 <var_clear>
   28164:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   28166:	68fb      	ldr	r3, [r7, #12]
   28168:	2b00      	cmp	r3, #0
   2816a:	d001      	beq.n	28170 <var_setTimeAsOctetString+0x1c>
    {
        return ret;
   2816c:	68fb      	ldr	r3, [r7, #12]
   2816e:	e021      	b.n	281b4 <var_setTimeAsOctetString+0x60>
    }
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   28170:	200c      	movs	r0, #12
   28172:	f001 fc67 	bl	29a44 <malloc>
   28176:	4603      	mov	r3, r0
   28178:	461a      	mov	r2, r3
   2817a:	687b      	ldr	r3, [r7, #4]
   2817c:	609a      	str	r2, [r3, #8]
    bb_init(target->byteArr);
   2817e:	687b      	ldr	r3, [r7, #4]
   28180:	689b      	ldr	r3, [r3, #8]
   28182:	4618      	mov	r0, r3
   28184:	f7da fdb0 	bl	2ce8 <bb_init>
    bb_capacity(target->byteArr, 4);
   28188:	687b      	ldr	r3, [r7, #4]
   2818a:	689b      	ldr	r3, [r3, #8]
   2818c:	2104      	movs	r1, #4
   2818e:	4618      	mov	r0, r3
   28190:	f7da fdc0 	bl	2d14 <bb_capacity>
    if ((ret = var_getTime(value, target->byteArr)) != 0)
   28194:	687b      	ldr	r3, [r7, #4]
   28196:	689b      	ldr	r3, [r3, #8]
   28198:	4619      	mov	r1, r3
   2819a:	6838      	ldr	r0, [r7, #0]
   2819c:	f7fe f9d0 	bl	26540 <var_getTime>
   281a0:	60f8      	str	r0, [r7, #12]
   281a2:	68fb      	ldr	r3, [r7, #12]
   281a4:	2b00      	cmp	r3, #0
   281a6:	d001      	beq.n	281ac <var_setTimeAsOctetString+0x58>
    {
        return ret;
   281a8:	68fb      	ldr	r3, [r7, #12]
   281aa:	e003      	b.n	281b4 <var_setTimeAsOctetString+0x60>
    }
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   281ac:	687b      	ldr	r3, [r7, #4]
   281ae:	2209      	movs	r2, #9
   281b0:	701a      	strb	r2, [r3, #0]
    return 0;
   281b2:	2300      	movs	r3, #0
}
   281b4:	4618      	mov	r0, r3
   281b6:	3710      	adds	r7, #16
   281b8:	46bd      	mov	sp, r7
   281ba:	bd80      	pop	{r7, pc}

000281bc <var_setBoolean>:

int var_setBoolean(dlmsVARIANT *target, char value)
{
   281bc:	b580      	push	{r7, lr}
   281be:	b084      	sub	sp, #16
   281c0:	af00      	add	r7, sp, #0
   281c2:	6078      	str	r0, [r7, #4]
   281c4:	460b      	mov	r3, r1
   281c6:	70fb      	strb	r3, [r7, #3]
    int ret;
    ret = var_clear(target);
   281c8:	6878      	ldr	r0, [r7, #4]
   281ca:	f7fd ffbd 	bl	26148 <var_clear>
   281ce:	60f8      	str	r0, [r7, #12]
    if (ret != DLMS_ERROR_CODE_OK)
   281d0:	68fb      	ldr	r3, [r7, #12]
   281d2:	2b00      	cmp	r3, #0
   281d4:	d001      	beq.n	281da <var_setBoolean+0x1e>
    {
        return ret;
   281d6:	68fb      	ldr	r3, [r7, #12]
   281d8:	e006      	b.n	281e8 <var_setBoolean+0x2c>
    }
    target->boolVal = value;
   281da:	687b      	ldr	r3, [r7, #4]
   281dc:	78fa      	ldrb	r2, [r7, #3]
   281de:	721a      	strb	r2, [r3, #8]
    target->vt = DLMS_DATA_TYPE_BOOLEAN;
   281e0:	687b      	ldr	r3, [r7, #4]
   281e2:	2203      	movs	r2, #3
   281e4:	701a      	strb	r2, [r3, #0]
    return ret;
   281e6:	68fb      	ldr	r3, [r7, #12]
}
   281e8:	4618      	mov	r0, r3
   281ea:	3710      	adds	r7, #16
   281ec:	46bd      	mov	sp, r7
   281ee:	bd80      	pop	{r7, pc}

000281f0 <var_attach>:

void var_attach(
    dlmsVARIANT *target,
    gxByteBuffer * source)
{
   281f0:	b580      	push	{r7, lr}
   281f2:	b082      	sub	sp, #8
   281f4:	af00      	add	r7, sp, #0
   281f6:	6078      	str	r0, [r7, #4]
   281f8:	6039      	str	r1, [r7, #0]
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   281fa:	200c      	movs	r0, #12
   281fc:	f001 fc22 	bl	29a44 <malloc>
   28200:	4603      	mov	r3, r0
   28202:	461a      	mov	r2, r3
   28204:	687b      	ldr	r3, [r7, #4]
   28206:	609a      	str	r2, [r3, #8]
    target->byteArr->data = source->data;
   28208:	687b      	ldr	r3, [r7, #4]
   2820a:	689b      	ldr	r3, [r3, #8]
   2820c:	683a      	ldr	r2, [r7, #0]
   2820e:	6812      	ldr	r2, [r2, #0]
   28210:	601a      	str	r2, [r3, #0]
    target->byteArr->capacity = source->capacity;
   28212:	687b      	ldr	r3, [r7, #4]
   28214:	689b      	ldr	r3, [r3, #8]
   28216:	683a      	ldr	r2, [r7, #0]
   28218:	8892      	ldrh	r2, [r2, #4]
   2821a:	809a      	strh	r2, [r3, #4]
    target->byteArr->size = source->size;
   2821c:	687b      	ldr	r3, [r7, #4]
   2821e:	689b      	ldr	r3, [r3, #8]
   28220:	683a      	ldr	r2, [r7, #0]
   28222:	88d2      	ldrh	r2, [r2, #6]
   28224:	80da      	strh	r2, [r3, #6]
    target->byteArr->position = source->position;
   28226:	687b      	ldr	r3, [r7, #4]
   28228:	689b      	ldr	r3, [r3, #8]
   2822a:	683a      	ldr	r2, [r7, #0]
   2822c:	8912      	ldrh	r2, [r2, #8]
   2822e:	811a      	strh	r2, [r3, #8]
    source->data = 0;
   28230:	683b      	ldr	r3, [r7, #0]
   28232:	2200      	movs	r2, #0
   28234:	601a      	str	r2, [r3, #0]
    source->size = source->position = source->capacity = 0;
   28236:	683b      	ldr	r3, [r7, #0]
   28238:	2200      	movs	r2, #0
   2823a:	809a      	strh	r2, [r3, #4]
   2823c:	683b      	ldr	r3, [r7, #0]
   2823e:	889a      	ldrh	r2, [r3, #4]
   28240:	683b      	ldr	r3, [r7, #0]
   28242:	811a      	strh	r2, [r3, #8]
   28244:	683b      	ldr	r3, [r7, #0]
   28246:	891a      	ldrh	r2, [r3, #8]
   28248:	683b      	ldr	r3, [r7, #0]
   2824a:	80da      	strh	r2, [r3, #6]
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   2824c:	687b      	ldr	r3, [r7, #4]
   2824e:	2209      	movs	r2, #9
   28250:	701a      	strb	r2, [r3, #0]
}
   28252:	bf00      	nop
   28254:	3708      	adds	r7, #8
   28256:	46bd      	mov	sp, r7
   28258:	bd80      	pop	{r7, pc}
   2825a:	bf00      	nop

0002825c <var_toDouble>:
    }
    return DLMS_ERROR_CODE_OK;
}

double var_toDouble(dlmsVARIANT *target)
{
   2825c:	b590      	push	{r4, r7, lr}
   2825e:	b083      	sub	sp, #12
   28260:	af00      	add	r7, sp, #0
   28262:	6078      	str	r0, [r7, #4]
    switch (target->vt)
   28264:	687b      	ldr	r3, [r7, #4]
   28266:	781b      	ldrb	r3, [r3, #0]
   28268:	2b18      	cmp	r3, #24
   2826a:	f200 80b1 	bhi.w	283d0 <var_toDouble+0x174>
   2826e:	a201      	add	r2, pc, #4	; (adr r2, 28274 <var_toDouble+0x18>)
   28270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28274:	000282d9 	.word	0x000282d9
   28278:	000283d1 	.word	0x000283d1
   2827c:	000283d1 	.word	0x000283d1
   28280:	000282e3 	.word	0x000282e3
   28284:	000283d1 	.word	0x000283d1
   28288:	000282fd 	.word	0x000282fd
   2828c:	0002830d 	.word	0x0002830d
   28290:	000283d1 	.word	0x000283d1
   28294:	000283d1 	.word	0x000283d1
   28298:	000283d1 	.word	0x000283d1
   2829c:	00028327 	.word	0x00028327
   282a0:	000283d1 	.word	0x000283d1
   282a4:	0002831d 	.word	0x0002831d
   282a8:	000283d1 	.word	0x000283d1
   282ac:	000283d1 	.word	0x000283d1
   282b0:	00028331 	.word	0x00028331
   282b4:	00028343 	.word	0x00028343
   282b8:	00028355 	.word	0x00028355
   282bc:	00028365 	.word	0x00028365
   282c0:	000283d1 	.word	0x000283d1
   282c4:	00028375 	.word	0x00028375
   282c8:	0002838d 	.word	0x0002838d
   282cc:	000283a5 	.word	0x000283a5
   282d0:	000283b5 	.word	0x000283b5
   282d4:	000283c5 	.word	0x000283c5
    {
    case DLMS_DATA_TYPE_NONE:
    {
        return 0;
   282d8:	f04f 0300 	mov.w	r3, #0
   282dc:	f04f 0400 	mov.w	r4, #0
   282e0:	e07b      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_BOOLEAN:
    {
        return target->boolVal ? 1 : 0;
   282e2:	687b      	ldr	r3, [r7, #4]
   282e4:	7a1b      	ldrb	r3, [r3, #8]
   282e6:	2b00      	cmp	r3, #0
   282e8:	d003      	beq.n	282f2 <var_toDouble+0x96>
   282ea:	f04f 0300 	mov.w	r3, #0
   282ee:	4c3d      	ldr	r4, [pc, #244]	; (283e4 <var_toDouble+0x188>)
   282f0:	e073      	b.n	283da <var_toDouble+0x17e>
   282f2:	f04f 0300 	mov.w	r3, #0
   282f6:	f04f 0400 	mov.w	r4, #0
   282fa:	e06e      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_INT32:
    {
        return target->lVal;
   282fc:	687b      	ldr	r3, [r7, #4]
   282fe:	689b      	ldr	r3, [r3, #8]
   28300:	4618      	mov	r0, r3
   28302:	f7d8 f867 	bl	3d4 <__aeabi_i2d>
   28306:	4603      	mov	r3, r0
   28308:	460c      	mov	r4, r1
   2830a:	e066      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_UINT32:
    {
        return target->ulVal;
   2830c:	687b      	ldr	r3, [r7, #4]
   2830e:	689b      	ldr	r3, [r3, #8]
   28310:	4618      	mov	r0, r3
   28312:	f7d8 f84f 	bl	3b4 <__aeabi_ui2d>
   28316:	4603      	mov	r3, r0
   28318:	460c      	mov	r4, r1
   2831a:	e05e      	b.n	283da <var_toDouble+0x17e>
    case DLMS_DATA_TYPE_STRING_UTF8:
    {
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        return 0;
   2831c:	f04f 0300 	mov.w	r3, #0
   28320:	f04f 0400 	mov.w	r4, #0
   28324:	e059      	b.n	283da <var_toDouble+0x17e>
    case DLMS_DATA_TYPE_STRING:
    {
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
        return 0;
   28326:	f04f 0300 	mov.w	r3, #0
   2832a:	f04f 0400 	mov.w	r4, #0
   2832e:	e054      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_INT8:
    {
        return target->cVal;
   28330:	687b      	ldr	r3, [r7, #4]
   28332:	f993 3008 	ldrsb.w	r3, [r3, #8]
   28336:	4618      	mov	r0, r3
   28338:	f7d8 f84c 	bl	3d4 <__aeabi_i2d>
   2833c:	4603      	mov	r3, r0
   2833e:	460c      	mov	r4, r1
   28340:	e04b      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_INT16:
    {
        return target->iVal;
   28342:	687b      	ldr	r3, [r7, #4]
   28344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   28348:	4618      	mov	r0, r3
   2834a:	f7d8 f843 	bl	3d4 <__aeabi_i2d>
   2834e:	4603      	mov	r3, r0
   28350:	460c      	mov	r4, r1
   28352:	e042      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_UINT8:
    {
        return target->bVal;
   28354:	687b      	ldr	r3, [r7, #4]
   28356:	7a1b      	ldrb	r3, [r3, #8]
   28358:	4618      	mov	r0, r3
   2835a:	f7d8 f82b 	bl	3b4 <__aeabi_ui2d>
   2835e:	4603      	mov	r3, r0
   28360:	460c      	mov	r4, r1
   28362:	e03a      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_UINT16:
    {
        return target->uiVal;
   28364:	687b      	ldr	r3, [r7, #4]
   28366:	891b      	ldrh	r3, [r3, #8]
   28368:	4618      	mov	r0, r3
   2836a:	f7d8 f823 	bl	3b4 <__aeabi_ui2d>
   2836e:	4603      	mov	r3, r0
   28370:	460c      	mov	r4, r1
   28372:	e032      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_INT64:
    {
        return (double)target->llVal;
   28374:	687b      	ldr	r3, [r7, #4]
   28376:	f103 0408 	add.w	r4, r3, #8
   2837a:	e9d4 3400 	ldrd	r3, r4, [r4]
   2837e:	4618      	mov	r0, r3
   28380:	4621      	mov	r1, r4
   28382:	f7d8 f85f 	bl	444 <__aeabi_l2d>
   28386:	4603      	mov	r3, r0
   28388:	460c      	mov	r4, r1
   2838a:	e026      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_UINT64:
    {
        return (double)target->ullVal;
   2838c:	687b      	ldr	r3, [r7, #4]
   2838e:	f103 0408 	add.w	r4, r3, #8
   28392:	e9d4 3400 	ldrd	r3, r4, [r4]
   28396:	4618      	mov	r0, r3
   28398:	4621      	mov	r1, r4
   2839a:	f7d8 f84b 	bl	434 <__aeabi_ul2d>
   2839e:	4603      	mov	r3, r0
   283a0:	460c      	mov	r4, r1
   283a2:	e01a      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_ENUM:
    {
        return target->bVal;
   283a4:	687b      	ldr	r3, [r7, #4]
   283a6:	7a1b      	ldrb	r3, [r3, #8]
   283a8:	4618      	mov	r0, r3
   283aa:	f7d8 f803 	bl	3b4 <__aeabi_ui2d>
   283ae:	4603      	mov	r3, r0
   283b0:	460c      	mov	r4, r1
   283b2:	e012      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_FLOAT32:
    {
        return target->fltVal;
   283b4:	687b      	ldr	r3, [r7, #4]
   283b6:	689b      	ldr	r3, [r3, #8]
   283b8:	4618      	mov	r0, r3
   283ba:	f7d8 f81d 	bl	3f8 <__aeabi_f2d>
   283be:	4603      	mov	r3, r0
   283c0:	460c      	mov	r4, r1
   283c2:	e00a      	b.n	283da <var_toDouble+0x17e>
    }
    case DLMS_DATA_TYPE_FLOAT64:
    {
        return target->dblVal;
   283c4:	687b      	ldr	r3, [r7, #4]
   283c6:	f103 0408 	add.w	r4, r3, #8
   283ca:	e9d4 3400 	ldrd	r3, r4, [r4]
   283ce:	e004      	b.n	283da <var_toDouble+0x17e>
    }
    default:
        break;
   283d0:	bf00      	nop
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    assert(0);
#endif
    return 0;
   283d2:	f04f 0300 	mov.w	r3, #0
   283d6:	f04f 0400 	mov.w	r4, #0
}
   283da:	4618      	mov	r0, r3
   283dc:	4621      	mov	r1, r4
   283de:	370c      	adds	r7, #12
   283e0:	46bd      	mov	sp, r7
   283e2:	bd90      	pop	{r4, r7, pc}
   283e4:	3ff00000 	.word	0x3ff00000

000283e8 <readVoltage>:
*/


//float readVoltage(enum Volt_Reg reg)	//rakesh
uint32_t readVoltage(enum Volt_Reg reg)
{
   283e8:	b580      	push	{r7, lr}
   283ea:	b084      	sub	sp, #16
   283ec:	af00      	add	r7, sp, #0
   283ee:	4603      	mov	r3, r0
   283f0:	80fb      	strh	r3, [r7, #6]
	uint8_t var;
	uint8_t val;
	uint32_t voltage = 0;
   283f2:	2300      	movs	r3, #0
   283f4:	60bb      	str	r3, [r7, #8]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, reg, INPUTREG_REG_COUNT);
   283f6:	88fb      	ldrh	r3, [r7, #6]
   283f8:	2202      	movs	r2, #2
   283fa:	4619      	mov	r1, r3
   283fc:	2003      	movs	r0, #3
   283fe:	f000 f9f9 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of bytes is in group of 16 bit.
	*	so when float voltage is read we have 2 pairs of 16 bits, out of which 1st pair is least sig
	*	while 2nd pair is most signiificant 16 bit.
	*/
	memcpy(&voltage, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   28402:	f107 0308 	add.w	r3, r7, #8
   28406:	2202      	movs	r2, #2
   28408:	4912      	ldr	r1, [pc, #72]	; (28454 <readVoltage+0x6c>)
   2840a:	4618      	mov	r0, r3
   2840c:	f001 fb39 	bl	29a82 <memcpy>


	var = usart1_buffer[3];
   28410:	4b11      	ldr	r3, [pc, #68]	; (28458 <readVoltage+0x70>)
   28412:	78db      	ldrb	r3, [r3, #3]
   28414:	73fb      	strb	r3, [r7, #15]
	usart1_buffer[3] = usart1_buffer[4];
   28416:	4b10      	ldr	r3, [pc, #64]	; (28458 <readVoltage+0x70>)
   28418:	791b      	ldrb	r3, [r3, #4]
   2841a:	b2da      	uxtb	r2, r3
   2841c:	4b0e      	ldr	r3, [pc, #56]	; (28458 <readVoltage+0x70>)
   2841e:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   28420:	4a0d      	ldr	r2, [pc, #52]	; (28458 <readVoltage+0x70>)
   28422:	7bfb      	ldrb	r3, [r7, #15]
   28424:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   28426:	4b0c      	ldr	r3, [pc, #48]	; (28458 <readVoltage+0x70>)
   28428:	795b      	ldrb	r3, [r3, #5]
   2842a:	73fb      	strb	r3, [r7, #15]
	usart1_buffer[5] = usart1_buffer[6];
   2842c:	4b0a      	ldr	r3, [pc, #40]	; (28458 <readVoltage+0x70>)
   2842e:	799b      	ldrb	r3, [r3, #6]
   28430:	b2da      	uxtb	r2, r3
   28432:	4b09      	ldr	r3, [pc, #36]	; (28458 <readVoltage+0x70>)
   28434:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   28436:	4a08      	ldr	r2, [pc, #32]	; (28458 <readVoltage+0x70>)
   28438:	7bfb      	ldrb	r3, [r7, #15]
   2843a:	7193      	strb	r3, [r2, #6]

	memcpy(&voltage, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   2843c:	f107 0308 	add.w	r3, r7, #8
   28440:	2202      	movs	r2, #2
   28442:	4904      	ldr	r1, [pc, #16]	; (28454 <readVoltage+0x6c>)
   28444:	4618      	mov	r0, r3
   28446:	f001 fb1c 	bl	29a82 <memcpy>

	return voltage;
   2844a:	68bb      	ldr	r3, [r7, #8]
}
   2844c:	4618      	mov	r0, r3
   2844e:	3710      	adds	r7, #16
   28450:	46bd      	mov	sp, r7
   28452:	bd80      	pop	{r7, pc}
   28454:	1000067d 	.word	0x1000067d
   28458:	10000678 	.word	0x10000678

0002845c <readCurrent>:
*	value of single current register(32 bits)
*/

//float readCurrent(enum Curr_Reg reg)	//rakesh
uint32_t readCurrent(enum Curr_Reg reg)
{
   2845c:	b580      	push	{r7, lr}
   2845e:	b084      	sub	sp, #16
   28460:	af00      	add	r7, sp, #0
   28462:	4603      	mov	r3, r0
   28464:	80fb      	strh	r3, [r7, #6]
	uint8_t var;
	uint32_t current = 0;
   28466:	2300      	movs	r3, #0
   28468:	60bb      	str	r3, [r7, #8]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, reg, INPUTREG_REG_COUNT);
   2846a:	88fb      	ldrh	r3, [r7, #6]
   2846c:	2202      	movs	r2, #2
   2846e:	4619      	mov	r1, r3
   28470:	2003      	movs	r0, #3
   28472:	f000 f9bf 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of bytes is in group of 16 bit.
	*	so when float current is read we have 2 pairs of 16 bit, out of which 1st pair is least sig
	*	while 2nd pair is most significant 16 bit.
	*/
	var = usart1_buffer[3];
   28476:	4b11      	ldr	r3, [pc, #68]	; (284bc <readCurrent+0x60>)
   28478:	78db      	ldrb	r3, [r3, #3]
   2847a:	73fb      	strb	r3, [r7, #15]
	usart1_buffer[3] = usart1_buffer[4];
   2847c:	4b0f      	ldr	r3, [pc, #60]	; (284bc <readCurrent+0x60>)
   2847e:	791b      	ldrb	r3, [r3, #4]
   28480:	b2da      	uxtb	r2, r3
   28482:	4b0e      	ldr	r3, [pc, #56]	; (284bc <readCurrent+0x60>)
   28484:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   28486:	4a0d      	ldr	r2, [pc, #52]	; (284bc <readCurrent+0x60>)
   28488:	7bfb      	ldrb	r3, [r7, #15]
   2848a:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   2848c:	4b0b      	ldr	r3, [pc, #44]	; (284bc <readCurrent+0x60>)
   2848e:	795b      	ldrb	r3, [r3, #5]
   28490:	73fb      	strb	r3, [r7, #15]
	usart1_buffer[5] = usart1_buffer[6];
   28492:	4b0a      	ldr	r3, [pc, #40]	; (284bc <readCurrent+0x60>)
   28494:	799b      	ldrb	r3, [r3, #6]
   28496:	b2da      	uxtb	r2, r3
   28498:	4b08      	ldr	r3, [pc, #32]	; (284bc <readCurrent+0x60>)
   2849a:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   2849c:	4a07      	ldr	r2, [pc, #28]	; (284bc <readCurrent+0x60>)
   2849e:	7bfb      	ldrb	r3, [r7, #15]
   284a0:	7193      	strb	r3, [r2, #6]

	memcpy(&current, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   284a2:	f107 0308 	add.w	r3, r7, #8
   284a6:	2202      	movs	r2, #2
   284a8:	4905      	ldr	r1, [pc, #20]	; (284c0 <readCurrent+0x64>)
   284aa:	4618      	mov	r0, r3
   284ac:	f001 fae9 	bl	29a82 <memcpy>

	return current;
   284b0:	68bb      	ldr	r3, [r7, #8]
}
   284b2:	4618      	mov	r0, r3
   284b4:	3710      	adds	r7, #16
   284b6:	46bd      	mov	sp, r7
   284b8:	bd80      	pop	{r7, pc}
   284ba:	bf00      	nop
   284bc:	10000678 	.word	0x10000678
   284c0:	1000067d 	.word	0x1000067d

000284c4 <readTotalActivePower>:
*	readTotalActivePower() reads the Total Active Power from Meter's register
*/

//float readTotalActivePower(void)	//rakesh
uint32_t readTotalActivePower(void)
{
   284c4:	b580      	push	{r7, lr}
   284c6:	b082      	sub	sp, #8
   284c8:	af00      	add	r7, sp, #0
	uint8_t var;
	uint32_t Total_Active_Power = 0;
   284ca:	2300      	movs	r3, #0
   284cc:	603b      	str	r3, [r7, #0]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, KWH_REG, INPUTREG_REG_COUNT);
   284ce:	2202      	movs	r2, #2
   284d0:	f649 4165 	movw	r1, #40037	; 0x9c65
   284d4:	2003      	movs	r0, #3
   284d6:	f000 f98d 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of bytes is in group of 16 bit.
	*	so while float Totla Active Power is read, we have 2 pairs of 16 bit, out of which 1st pair is least sig
	*	while 2nd pair is most significant 16 bit.
	*/
	var = usart1_buffer[3];
   284da:	4b10      	ldr	r3, [pc, #64]	; (2851c <readTotalActivePower+0x58>)
   284dc:	78db      	ldrb	r3, [r3, #3]
   284de:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[3] = usart1_buffer[4];
   284e0:	4b0e      	ldr	r3, [pc, #56]	; (2851c <readTotalActivePower+0x58>)
   284e2:	791b      	ldrb	r3, [r3, #4]
   284e4:	b2da      	uxtb	r2, r3
   284e6:	4b0d      	ldr	r3, [pc, #52]	; (2851c <readTotalActivePower+0x58>)
   284e8:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   284ea:	4a0c      	ldr	r2, [pc, #48]	; (2851c <readTotalActivePower+0x58>)
   284ec:	79fb      	ldrb	r3, [r7, #7]
   284ee:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   284f0:	4b0a      	ldr	r3, [pc, #40]	; (2851c <readTotalActivePower+0x58>)
   284f2:	795b      	ldrb	r3, [r3, #5]
   284f4:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[5] = usart1_buffer[6];
   284f6:	4b09      	ldr	r3, [pc, #36]	; (2851c <readTotalActivePower+0x58>)
   284f8:	799b      	ldrb	r3, [r3, #6]
   284fa:	b2da      	uxtb	r2, r3
   284fc:	4b07      	ldr	r3, [pc, #28]	; (2851c <readTotalActivePower+0x58>)
   284fe:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   28500:	4a06      	ldr	r2, [pc, #24]	; (2851c <readTotalActivePower+0x58>)
   28502:	79fb      	ldrb	r3, [r7, #7]
   28504:	7193      	strb	r3, [r2, #6]

	memcpy(&Total_Active_Power, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   28506:	463b      	mov	r3, r7
   28508:	2202      	movs	r2, #2
   2850a:	4905      	ldr	r1, [pc, #20]	; (28520 <readTotalActivePower+0x5c>)
   2850c:	4618      	mov	r0, r3
   2850e:	f001 fab8 	bl	29a82 <memcpy>

	return Total_Active_Power;
   28512:	683b      	ldr	r3, [r7, #0]
}
   28514:	4618      	mov	r0, r3
   28516:	3708      	adds	r7, #8
   28518:	46bd      	mov	sp, r7
   2851a:	bd80      	pop	{r7, pc}
   2851c:	10000678 	.word	0x10000678
   28520:	1000067d 	.word	0x1000067d

00028524 <readTotalApparentPower>:
*	readTotalApparentPower() reads the Total Apparent Power from meter's register
*/

//float readTotalApparentPower(void)	//rakesh
uint32_t readTotalApparentPower(void)
{
   28524:	b580      	push	{r7, lr}
   28526:	b082      	sub	sp, #8
   28528:	af00      	add	r7, sp, #0
	uint8_t var;
	uint32_t Total_Apparent_Power = 0;
   2852a:	2300      	movs	r3, #0
   2852c:	603b      	str	r3, [r7, #0]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, KV_REG, INPUTREG_REG_COUNT);
   2852e:	2202      	movs	r2, #2
   28530:	f649 4169 	movw	r1, #40041	; 0x9c69
   28534:	2003      	movs	r0, #3
   28536:	f000 f95d 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of bytes is in group of 16 bit.
	*	so while float Total Apparent Power is read, we have 2 pairs of 16 bit, out of which 1st pair is least sig
	*	while 2nd pair is most significant 16 bit.
	*/
	var = usart1_buffer[3];
   2853a:	4b10      	ldr	r3, [pc, #64]	; (2857c <readTotalApparentPower+0x58>)
   2853c:	78db      	ldrb	r3, [r3, #3]
   2853e:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[3] = usart1_buffer[4];
   28540:	4b0e      	ldr	r3, [pc, #56]	; (2857c <readTotalApparentPower+0x58>)
   28542:	791b      	ldrb	r3, [r3, #4]
   28544:	b2da      	uxtb	r2, r3
   28546:	4b0d      	ldr	r3, [pc, #52]	; (2857c <readTotalApparentPower+0x58>)
   28548:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   2854a:	4a0c      	ldr	r2, [pc, #48]	; (2857c <readTotalApparentPower+0x58>)
   2854c:	79fb      	ldrb	r3, [r7, #7]
   2854e:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   28550:	4b0a      	ldr	r3, [pc, #40]	; (2857c <readTotalApparentPower+0x58>)
   28552:	795b      	ldrb	r3, [r3, #5]
   28554:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[5] = usart1_buffer[6];
   28556:	4b09      	ldr	r3, [pc, #36]	; (2857c <readTotalApparentPower+0x58>)
   28558:	799b      	ldrb	r3, [r3, #6]
   2855a:	b2da      	uxtb	r2, r3
   2855c:	4b07      	ldr	r3, [pc, #28]	; (2857c <readTotalApparentPower+0x58>)
   2855e:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   28560:	4a06      	ldr	r2, [pc, #24]	; (2857c <readTotalApparentPower+0x58>)
   28562:	79fb      	ldrb	r3, [r7, #7]
   28564:	7193      	strb	r3, [r2, #6]

	memcpy(&Total_Apparent_Power, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   28566:	463b      	mov	r3, r7
   28568:	2202      	movs	r2, #2
   2856a:	4905      	ldr	r1, [pc, #20]	; (28580 <readTotalApparentPower+0x5c>)
   2856c:	4618      	mov	r0, r3
   2856e:	f001 fa88 	bl	29a82 <memcpy>

	return Total_Apparent_Power;
   28572:	683b      	ldr	r3, [r7, #0]
}
   28574:	4618      	mov	r0, r3
   28576:	3708      	adds	r7, #8
   28578:	46bd      	mov	sp, r7
   2857a:	bd80      	pop	{r7, pc}
   2857c:	10000678 	.word	0x10000678
   28580:	1000067d 	.word	0x1000067d

00028584 <readTotalPowerFactor>:
*	readTotalPowerFactor() reads the Total Power Factor from meter's register
*/

//float readTotalPowerFactor(void)	//rakesh
uint32_t readTotalPowerFactor(void)
{
   28584:	b580      	push	{r7, lr}
   28586:	b082      	sub	sp, #8
   28588:	af00      	add	r7, sp, #0
	uint8_t var;
	uint32_t Total_Power_Factor = 0;
   2858a:	2300      	movs	r3, #0
   2858c:	603b      	str	r3, [r7, #0]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, PF_REG, INPUTREG_REG_COUNT);
   2858e:	2202      	movs	r2, #2
   28590:	f649 416b 	movw	r1, #40043	; 0x9c6b
   28594:	2003      	movs	r0, #3
   28596:	f000 f92d 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of byter is in group of 16 bit.
	* 	so while float Total Power Factor is read, we have 2 pairs of 16 bit, out of which 1st pair is least sig
	* 	while 2nd pair is most significant 16 bit
	*/
	var = usart1_buffer[3];
   2859a:	4b10      	ldr	r3, [pc, #64]	; (285dc <readTotalPowerFactor+0x58>)
   2859c:	78db      	ldrb	r3, [r3, #3]
   2859e:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[3] = usart1_buffer[4];
   285a0:	4b0e      	ldr	r3, [pc, #56]	; (285dc <readTotalPowerFactor+0x58>)
   285a2:	791b      	ldrb	r3, [r3, #4]
   285a4:	b2da      	uxtb	r2, r3
   285a6:	4b0d      	ldr	r3, [pc, #52]	; (285dc <readTotalPowerFactor+0x58>)
   285a8:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   285aa:	4a0c      	ldr	r2, [pc, #48]	; (285dc <readTotalPowerFactor+0x58>)
   285ac:	79fb      	ldrb	r3, [r7, #7]
   285ae:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   285b0:	4b0a      	ldr	r3, [pc, #40]	; (285dc <readTotalPowerFactor+0x58>)
   285b2:	795b      	ldrb	r3, [r3, #5]
   285b4:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[5] = usart1_buffer[6];
   285b6:	4b09      	ldr	r3, [pc, #36]	; (285dc <readTotalPowerFactor+0x58>)
   285b8:	799b      	ldrb	r3, [r3, #6]
   285ba:	b2da      	uxtb	r2, r3
   285bc:	4b07      	ldr	r3, [pc, #28]	; (285dc <readTotalPowerFactor+0x58>)
   285be:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   285c0:	4a06      	ldr	r2, [pc, #24]	; (285dc <readTotalPowerFactor+0x58>)
   285c2:	79fb      	ldrb	r3, [r7, #7]
   285c4:	7193      	strb	r3, [r2, #6]

	memcpy(&Total_Power_Factor, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   285c6:	463b      	mov	r3, r7
   285c8:	2202      	movs	r2, #2
   285ca:	4905      	ldr	r1, [pc, #20]	; (285e0 <readTotalPowerFactor+0x5c>)
   285cc:	4618      	mov	r0, r3
   285ce:	f001 fa58 	bl	29a82 <memcpy>

	return Total_Power_Factor;
   285d2:	683b      	ldr	r3, [r7, #0]
}
   285d4:	4618      	mov	r0, r3
   285d6:	3708      	adds	r7, #8
   285d8:	46bd      	mov	sp, r7
   285da:	bd80      	pop	{r7, pc}
   285dc:	10000678 	.word	0x10000678
   285e0:	1000067d 	.word	0x1000067d

000285e4 <readLineFrequency>:
*	readLineFrequency() reads the Line Frequency from meter's register
*/

//float readLineFrequency(void)	//rakesh
uint32_t readLineFrequency(void)
{
   285e4:	b580      	push	{r7, lr}
   285e6:	b082      	sub	sp, #8
   285e8:	af00      	add	r7, sp, #0
	uint8_t var;
	uint32_t Line_Frequency = 0;
   285ea:	2300      	movs	r3, #0
   285ec:	603b      	str	r3, [r7, #0]
	read_modbus_reg(ENERGY_METER_SLAVE_ID, FRQ_REG, INPUTREG_REG_COUNT);
   285ee:	2202      	movs	r2, #2
   285f0:	f649 416d 	movw	r1, #40045	; 0x9c6d
   285f4:	2003      	movs	r0, #3
   285f6:	f000 f8fd 	bl	287f4 <read_modbus_reg>
	/*
	*	The order of bytes is in group of 16 bit.
	*	so while float Line frequency is read, we have 2 pairs of 16 bit, out of which 1st pair is least sig
	*	while 2nd pair is most significant 16 bit.
	*/
	var = usart1_buffer[3];
   285fa:	4b10      	ldr	r3, [pc, #64]	; (2863c <readLineFrequency+0x58>)
   285fc:	78db      	ldrb	r3, [r3, #3]
   285fe:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[3] = usart1_buffer[4];
   28600:	4b0e      	ldr	r3, [pc, #56]	; (2863c <readLineFrequency+0x58>)
   28602:	791b      	ldrb	r3, [r3, #4]
   28604:	b2da      	uxtb	r2, r3
   28606:	4b0d      	ldr	r3, [pc, #52]	; (2863c <readLineFrequency+0x58>)
   28608:	70da      	strb	r2, [r3, #3]
	usart1_buffer[4] = var;
   2860a:	4a0c      	ldr	r2, [pc, #48]	; (2863c <readLineFrequency+0x58>)
   2860c:	79fb      	ldrb	r3, [r7, #7]
   2860e:	7113      	strb	r3, [r2, #4]

	var = usart1_buffer[5];
   28610:	4b0a      	ldr	r3, [pc, #40]	; (2863c <readLineFrequency+0x58>)
   28612:	795b      	ldrb	r3, [r3, #5]
   28614:	71fb      	strb	r3, [r7, #7]
	usart1_buffer[5] = usart1_buffer[6];
   28616:	4b09      	ldr	r3, [pc, #36]	; (2863c <readLineFrequency+0x58>)
   28618:	799b      	ldrb	r3, [r3, #6]
   2861a:	b2da      	uxtb	r2, r3
   2861c:	4b07      	ldr	r3, [pc, #28]	; (2863c <readLineFrequency+0x58>)
   2861e:	715a      	strb	r2, [r3, #5]
	usart1_buffer[6] = var;
   28620:	4a06      	ldr	r2, [pc, #24]	; (2863c <readLineFrequency+0x58>)
   28622:	79fb      	ldrb	r3, [r7, #7]
   28624:	7193      	strb	r3, [r2, #6]

	memcpy(&Line_Frequency, (uint8_t *) &usart1_buffer[5], sizeof(uint16_t));
   28626:	463b      	mov	r3, r7
   28628:	2202      	movs	r2, #2
   2862a:	4905      	ldr	r1, [pc, #20]	; (28640 <readLineFrequency+0x5c>)
   2862c:	4618      	mov	r0, r3
   2862e:	f001 fa28 	bl	29a82 <memcpy>

	return Line_Frequency;
   28632:	683b      	ldr	r3, [r7, #0]
}
   28634:	4618      	mov	r0, r3
   28636:	3708      	adds	r7, #8
   28638:	46bd      	mov	sp, r7
   2863a:	bd80      	pop	{r7, pc}
   2863c:	10000678 	.word	0x10000678
   28640:	1000067d 	.word	0x1000067d

00028644 <energy_meter_init>:

	return Phase_Sequence;
}

void energy_meter_init(void)
{
   28644:	b580      	push	{r7, lr}
   28646:	af00      	add	r7, sp, #0
	modbus_master_init();
   28648:	f000 f9a6 	bl	28998 <modbus_master_init>
}
   2864c:	bf00      	nop
   2864e:	bd80      	pop	{r7, pc}

00028650 <initTimer0>:
/*****************************************************************************/

#define PRESCALE (25000-1)

void initTimer0(void)
{
   28650:	b480      	push	{r7}
   28652:	af00      	add	r7, sp, #0
	/*Assuming that PLL0 has been setup with CCLK = 100Mhz and PCLK = 25Mhz.*/
	LPC_SC->PCONP |= (1<<1); //Power up TIM0. By default TIM0 and TIM1 are enabled.
   28654:	4a10      	ldr	r2, [pc, #64]	; (28698 <initTimer0+0x48>)
   28656:	4b10      	ldr	r3, [pc, #64]	; (28698 <initTimer0+0x48>)
   28658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   2865c:	f043 0302 	orr.w	r3, r3, #2
   28660:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	LPC_SC->PCLKSEL0 &= ~(0x3<<3); //Set PCLK for timer = CCLK/4 = 100/4 (default)
   28664:	4a0c      	ldr	r2, [pc, #48]	; (28698 <initTimer0+0x48>)
   28666:	4b0c      	ldr	r3, [pc, #48]	; (28698 <initTimer0+0x48>)
   28668:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
   2866c:	f023 0318 	bic.w	r3, r3, #24
   28670:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8

	LPC_TIM0->CTCR = 0x0;
   28674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   28678:	2200      	movs	r2, #0
   2867a:	671a      	str	r2, [r3, #112]	; 0x70
	LPC_TIM0->PR = PRESCALE; //Increment TC at every 24999+1 clock cycles
   2867c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   28680:	f246 12a7 	movw	r2, #24999	; 0x61a7
   28684:	60da      	str	r2, [r3, #12]
	//25000 clock cycles @25Mhz = 1 mS

	LPC_TIM0->TCR = 0x02; //Reset Timer
   28686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2868a:	2202      	movs	r2, #2
   2868c:	605a      	str	r2, [r3, #4]
}
   2868e:	bf00      	nop
   28690:	46bd      	mov	sp, r7
   28692:	bc80      	pop	{r7}
   28694:	4770      	bx	lr
   28696:	bf00      	nop
   28698:	400fc000 	.word	0x400fc000

0002869c <delayMS>:


void delayMS(unsigned int milliseconds) //Using Timer0
{
   2869c:	b480      	push	{r7}
   2869e:	b083      	sub	sp, #12
   286a0:	af00      	add	r7, sp, #0
   286a2:	6078      	str	r0, [r7, #4]
	LPC_TIM0->TCR = 0x02; //Reset Timer
   286a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   286a8:	2202      	movs	r2, #2
   286aa:	605a      	str	r2, [r3, #4]

	LPC_TIM0->TCR = 0x01; //Enable timer
   286ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   286b0:	2201      	movs	r2, #1
   286b2:	605a      	str	r2, [r3, #4]

	while(LPC_TIM0->TC < milliseconds); //wait until timer counter reaches the desired delay
   286b4:	bf00      	nop
   286b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   286ba:	689a      	ldr	r2, [r3, #8]
   286bc:	687b      	ldr	r3, [r7, #4]
   286be:	429a      	cmp	r2, r3
   286c0:	d3f9      	bcc.n	286b6 <delayMS+0x1a>

	LPC_TIM0->TCR = 0x00; //Disable timer
   286c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   286c6:	2200      	movs	r2, #0
   286c8:	605a      	str	r2, [r3, #4]
}
   286ca:	bf00      	nop
   286cc:	370c      	adds	r7, #12
   286ce:	46bd      	mov	sp, r7
   286d0:	bc80      	pop	{r7}
   286d2:	4770      	bx	lr

000286d4 <calculate_crc16>:

/*
*   crc16() calculates the 16-bit crc value for Modbus protocol.
*/
uint16_t calculate_crc16(uint8_t *msg, uint8_t length)
{
   286d4:	b480      	push	{r7}
   286d6:	b085      	sub	sp, #20
   286d8:	af00      	add	r7, sp, #0
   286da:	6078      	str	r0, [r7, #4]
   286dc:	460b      	mov	r3, r1
   286de:	70fb      	strb	r3, [r7, #3]
    uint32_t i = 0;
   286e0:	2300      	movs	r3, #0
   286e2:	60fb      	str	r3, [r7, #12]
    // init CRC16 with all bits 1
    uint16_t crc16 = 0xffff;
   286e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   286e8:	817b      	strh	r3, [r7, #10]

    while(length)
   286ea:	e026      	b.n	2873a <calculate_crc16+0x66>
    {
 	   // x-or lower byte with msg byte
		crc16 ^= (0x00ff & *msg);
   286ec:	687b      	ldr	r3, [r7, #4]
   286ee:	781b      	ldrb	r3, [r3, #0]
   286f0:	b29a      	uxth	r2, r3
   286f2:	897b      	ldrh	r3, [r7, #10]
   286f4:	4053      	eors	r3, r2
   286f6:	817b      	strh	r3, [r7, #10]
		i = 8;
   286f8:	2308      	movs	r3, #8
   286fa:	60fb      	str	r3, [r7, #12]

		while(i--)
   286fc:	e012      	b.n	28724 <calculate_crc16+0x50>
		{
            // check lsb
            if(crc16 & 0x0001)
   286fe:	897b      	ldrh	r3, [r7, #10]
   28700:	f003 0301 	and.w	r3, r3, #1
   28704:	2b00      	cmp	r3, #0
   28706:	d00a      	beq.n	2871e <calculate_crc16+0x4a>
            {
                // shift crc16 to right by 1 bit
                crc16 >>= 1;
   28708:	897b      	ldrh	r3, [r7, #10]
   2870a:	085b      	lsrs	r3, r3, #1
   2870c:	817b      	strh	r3, [r7, #10]
                // ldb is 1 , so x-or crc16 with 0xA001
                crc16 ^= 0xA001;
   2870e:	897b      	ldrh	r3, [r7, #10]
   28710:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
   28714:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
   28718:	43db      	mvns	r3, r3
   2871a:	817b      	strh	r3, [r7, #10]
   2871c:	e002      	b.n	28724 <calculate_crc16+0x50>
            }
            else
            {
                // shift crc16 to right by 1 bit
                crc16 >>= 1;
   2871e:	897b      	ldrh	r3, [r7, #10]
   28720:	085b      	lsrs	r3, r3, #1
   28722:	817b      	strh	r3, [r7, #10]
    {
 	   // x-or lower byte with msg byte
		crc16 ^= (0x00ff & *msg);
		i = 8;

		while(i--)
   28724:	68fb      	ldr	r3, [r7, #12]
   28726:	1e5a      	subs	r2, r3, #1
   28728:	60fa      	str	r2, [r7, #12]
   2872a:	2b00      	cmp	r3, #0
   2872c:	d1e7      	bne.n	286fe <calculate_crc16+0x2a>
                crc16 >>= 1;
            }
        }

        //point to next msg byte
        msg++;
   2872e:	687b      	ldr	r3, [r7, #4]
   28730:	3301      	adds	r3, #1
   28732:	607b      	str	r3, [r7, #4]
        // update remaining length of msg left
        length--;
   28734:	78fb      	ldrb	r3, [r7, #3]
   28736:	3b01      	subs	r3, #1
   28738:	70fb      	strb	r3, [r7, #3]
{
    uint32_t i = 0;
    // init CRC16 with all bits 1
    uint16_t crc16 = 0xffff;

    while(length)
   2873a:	78fb      	ldrb	r3, [r7, #3]
   2873c:	2b00      	cmp	r3, #0
   2873e:	d1d5      	bne.n	286ec <calculate_crc16+0x18>
        msg++;
        // update remaining length of msg left
        length--;
    }

    return crc16;
   28740:	897b      	ldrh	r3, [r7, #10]
}
   28742:	4618      	mov	r0, r3
   28744:	3714      	adds	r7, #20
   28746:	46bd      	mov	sp, r7
   28748:	bc80      	pop	{r7}
   2874a:	4770      	bx	lr

0002874c <construct_rtu_req>:

/*
* constructs rtu modbus request object with all fields. Expects pointer to modbus rtu req structure.
*/
void construct_rtu_req(uint8_t slave_addr, uint8_t fncode, uint16_t start_addr, uint16_t reg_count, Modbus_Rtu_Req *reqst)
{
   2874c:	b590      	push	{r4, r7, lr}
   2874e:	b083      	sub	sp, #12
   28750:	af00      	add	r7, sp, #0
   28752:	4604      	mov	r4, r0
   28754:	4608      	mov	r0, r1
   28756:	4611      	mov	r1, r2
   28758:	461a      	mov	r2, r3
   2875a:	4623      	mov	r3, r4
   2875c:	71fb      	strb	r3, [r7, #7]
   2875e:	4603      	mov	r3, r0
   28760:	71bb      	strb	r3, [r7, #6]
   28762:	460b      	mov	r3, r1
   28764:	80bb      	strh	r3, [r7, #4]
   28766:	4613      	mov	r3, r2
   28768:	807b      	strh	r3, [r7, #2]
    // set up slave addr in rtu req format
    reqst->slave_addr = slave_addr;
   2876a:	69bb      	ldr	r3, [r7, #24]
   2876c:	79fa      	ldrb	r2, [r7, #7]
   2876e:	701a      	strb	r2, [r3, #0]
    // set up function code
    reqst->func_code = fncode;
   28770:	69bb      	ldr	r3, [r7, #24]
   28772:	79ba      	ldrb	r2, [r7, #6]
   28774:	705a      	strb	r2, [r3, #1]
    //start reg addr hi-byte
    reqst->rtu_req_data.data[0] = start_addr >> 8;
   28776:	88bb      	ldrh	r3, [r7, #4]
   28778:	0a1b      	lsrs	r3, r3, #8
   2877a:	b29b      	uxth	r3, r3
   2877c:	b2da      	uxtb	r2, r3
   2877e:	69bb      	ldr	r3, [r7, #24]
   28780:	709a      	strb	r2, [r3, #2]
    // start reg addr lo-byte
    reqst->rtu_req_data.data[1] = start_addr;
   28782:	88bb      	ldrh	r3, [r7, #4]
   28784:	b2da      	uxtb	r2, r3
   28786:	69bb      	ldr	r3, [r7, #24]
   28788:	70da      	strb	r2, [r3, #3]
    // no of registers hi-byte
    reqst->rtu_req_data.data[2] = reg_count >> 8;
   2878a:	887b      	ldrh	r3, [r7, #2]
   2878c:	0a1b      	lsrs	r3, r3, #8
   2878e:	b29b      	uxth	r3, r3
   28790:	b2da      	uxtb	r2, r3
   28792:	69bb      	ldr	r3, [r7, #24]
   28794:	711a      	strb	r2, [r3, #4]
    // no of registers lo-byte
    reqst->rtu_req_data.data[3] = reg_count;
   28796:	887b      	ldrh	r3, [r7, #2]
   28798:	b2da      	uxtb	r2, r3
   2879a:	69bb      	ldr	r3, [r7, #24]
   2879c:	715a      	strb	r2, [r3, #5]
    // calculate crc and embed into frame with lo-byte first
    reqst->crc = calculate_crc16((uint8_t *)reqst, sizeof(Modbus_Rtu_Req)-2);
   2879e:	2106      	movs	r1, #6
   287a0:	69b8      	ldr	r0, [r7, #24]
   287a2:	f7ff ff97 	bl	286d4 <calculate_crc16>
   287a6:	4603      	mov	r3, r0
   287a8:	461a      	mov	r2, r3
   287aa:	69bb      	ldr	r3, [r7, #24]
   287ac:	80da      	strh	r2, [r3, #6]
    return;
   287ae:	bf00      	nop
}
   287b0:	370c      	adds	r7, #12
   287b2:	46bd      	mov	sp, r7
   287b4:	bd90      	pop	{r4, r7, pc}
   287b6:	bf00      	nop

000287b8 <get_time_out_value>:

uint32_t get_time_out_value(void)
{
   287b8:	b480      	push	{r7}
   287ba:	af00      	add	r7, sp, #0
	timeoutCount = 1;
   287bc:	4b04      	ldr	r3, [pc, #16]	; (287d0 <get_time_out_value+0x18>)
   287be:	2201      	movs	r2, #1
   287c0:	601a      	str	r2, [r3, #0]
	return timeoutCount;
   287c2:	4b03      	ldr	r3, [pc, #12]	; (287d0 <get_time_out_value+0x18>)
   287c4:	681b      	ldr	r3, [r3, #0]
}
   287c6:	4618      	mov	r0, r3
   287c8:	46bd      	mov	sp, r7
   287ca:	bc80      	pop	{r7}
   287cc:	4770      	bx	lr
   287ce:	bf00      	nop
   287d0:	1000004c 	.word	0x1000004c

000287d4 <get_time_out_count>:


uint32_t get_time_out_count(void)
{
   287d4:	b580      	push	{r7, lr}
   287d6:	af00      	add	r7, sp, #0
	delayMS(1);
   287d8:	2001      	movs	r0, #1
   287da:	f7ff ff5f 	bl	2869c <delayMS>
	timeoutCount++;
   287de:	4b04      	ldr	r3, [pc, #16]	; (287f0 <get_time_out_count+0x1c>)
   287e0:	681b      	ldr	r3, [r3, #0]
   287e2:	3301      	adds	r3, #1
   287e4:	4a02      	ldr	r2, [pc, #8]	; (287f0 <get_time_out_count+0x1c>)
   287e6:	6013      	str	r3, [r2, #0]
	return timeoutCount;
   287e8:	4b01      	ldr	r3, [pc, #4]	; (287f0 <get_time_out_count+0x1c>)
   287ea:	681b      	ldr	r3, [r3, #0]
}
   287ec:	4618      	mov	r0, r3
   287ee:	bd80      	pop	{r7, pc}
   287f0:	1000004c 	.word	0x1000004c

000287f4 <read_modbus_reg>:
/*
* read_modbus_reg() gets req contructed. Depending on register addr it detects function code according to
* Modbus specs.
*/
uint8_t read_modbus_reg(uint8_t slave_addr, uint16_t reg_addr, uint16_t reg_count)
{
   287f4:	b590      	push	{r4, r7, lr}
   287f6:	b08b      	sub	sp, #44	; 0x2c
   287f8:	af02      	add	r7, sp, #8
   287fa:	4603      	mov	r3, r0
   287fc:	71fb      	strb	r3, [r7, #7]
   287fe:	460b      	mov	r3, r1
   28800:	80bb      	strh	r3, [r7, #4]
   28802:	4613      	mov	r3, r2
   28804:	807b      	strh	r3, [r7, #2]
    uint8_t fncode;
    uint32_t time_stamp;
    uint32_t resp_length = 0;
   28806:	2300      	movs	r3, #0
   28808:	61bb      	str	r3, [r7, #24]
    uint8_t LSRValue;
    uint8_t Dummy = Dummy;

    memset((uint8_t *)usart1_buffer, '\0', USART_BUFSIZE);
   2880a:	2280      	movs	r2, #128	; 0x80
   2880c:	2100      	movs	r1, #0
   2880e:	485e      	ldr	r0, [pc, #376]	; (28988 <read_modbus_reg+0x194>)
   28810:	f001 f95d 	bl	29ace <memset>
    //check if address falls in valid range
    if(reg_addr >= HOLDREG_RANGE_START && reg_addr <= HOLDREG_RANGE_END)
   28814:	88bb      	ldrh	r3, [r7, #4]
   28816:	f649 4240 	movw	r2, #40000	; 0x9c40
   2881a:	4293      	cmp	r3, r2
   2881c:	d916      	bls.n	2884c <read_modbus_reg+0x58>
   2881e:	88bb      	ldrh	r3, [r7, #4]
   28820:	f64a 5252 	movw	r2, #44370	; 0xad52
   28824:	4293      	cmp	r3, r2
   28826:	d811      	bhi.n	2884c <read_modbus_reg+0x58>
    {
        // check reg count validity
        if((reg_addr + reg_count - 1) > HOLDREG_RANGE_END)
   28828:	88ba      	ldrh	r2, [r7, #4]
   2882a:	887b      	ldrh	r3, [r7, #2]
   2882c:	4413      	add	r3, r2
   2882e:	3b01      	subs	r3, #1
   28830:	f64a 5252 	movw	r2, #44370	; 0xad52
   28834:	4293      	cmp	r3, r2
   28836:	dd01      	ble.n	2883c <read_modbus_reg+0x48>
        {
            return INVALID_REG_COUNT;
   28838:	2302      	movs	r3, #2
   2883a:	e0a0      	b.n	2897e <read_modbus_reg+0x18a>
        }
        // function is to read hold_reg
        fncode = RD_HOLDREG;
   2883c:	2303      	movs	r3, #3
   2883e:	77fb      	strb	r3, [r7, #31]
        // parse address for modbus frame format.
        reg_addr -= HOLDREG_RANGE_START;
   28840:	88bb      	ldrh	r3, [r7, #4]
   28842:	f503 43c7 	add.w	r3, r3, #25472	; 0x6380
   28846:	333f      	adds	r3, #63	; 0x3f
   28848:	80bb      	strh	r3, [r7, #4]
   2884a:	e01d      	b.n	28888 <read_modbus_reg+0x94>
    }
    else if (reg_addr >= INPUTREG_RANGE_START && reg_addr <= INPUTREG_RANGE_END)
   2884c:	88bb      	ldrh	r3, [r7, #4]
   2884e:	f247 522f 	movw	r2, #29999	; 0x752f
   28852:	4293      	cmp	r3, r2
   28854:	d916      	bls.n	28884 <read_modbus_reg+0x90>
   28856:	88bb      	ldrh	r3, [r7, #4]
   28858:	f247 526a 	movw	r2, #30058	; 0x756a
   2885c:	4293      	cmp	r3, r2
   2885e:	d811      	bhi.n	28884 <read_modbus_reg+0x90>
    {
        // check reg count validity
        if((reg_addr + reg_count - 1) > (INPUTREG_RANGE_END + INPUTREG_REG_COUNT))
   28860:	88ba      	ldrh	r2, [r7, #4]
   28862:	887b      	ldrh	r3, [r7, #2]
   28864:	4413      	add	r3, r2
   28866:	3b01      	subs	r3, #1
   28868:	f247 526c 	movw	r2, #30060	; 0x756c
   2886c:	4293      	cmp	r3, r2
   2886e:	dd01      	ble.n	28874 <read_modbus_reg+0x80>
        {
            return INVALID_REG_COUNT;
   28870:	2302      	movs	r3, #2
   28872:	e084      	b.n	2897e <read_modbus_reg+0x18a>
        }
        // function is to read input reg
        fncode = RD_INPUTREG;
   28874:	2304      	movs	r3, #4
   28876:	77fb      	strb	r3, [r7, #31]
        // parse address for modbus frame format.
        reg_addr -= INPUTREG_RANGE_START;
   28878:	88bb      	ldrh	r3, [r7, #4]
   2887a:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
   2887e:	3b30      	subs	r3, #48	; 0x30
   28880:	80bb      	strh	r3, [r7, #4]
   28882:	e001      	b.n	28888 <read_modbus_reg+0x94>
    }
    else
    {
        return  INVALID_ADDR;
   28884:	2301      	movs	r3, #1
   28886:	e07a      	b.n	2897e <read_modbus_reg+0x18a>
    }

    if(slave_addr > SLAVE_ADDR_MAX)
   28888:	79fb      	ldrb	r3, [r7, #7]
   2888a:	2bf7      	cmp	r3, #247	; 0xf7
   2888c:	d901      	bls.n	28892 <read_modbus_reg+0x9e>
    {
        return INVALID_SLAVE;
   2888e:	2303      	movs	r3, #3
   28890:	e075      	b.n	2897e <read_modbus_reg+0x18a>
    }

    // construct request
    construct_rtu_req(slave_addr, fncode, reg_addr, reg_count, &req);
   28892:	887c      	ldrh	r4, [r7, #2]
   28894:	88ba      	ldrh	r2, [r7, #4]
   28896:	7ff9      	ldrb	r1, [r7, #31]
   28898:	79f8      	ldrb	r0, [r7, #7]
   2889a:	4b3c      	ldr	r3, [pc, #240]	; (2898c <read_modbus_reg+0x198>)
   2889c:	9300      	str	r3, [sp, #0]
   2889e:	4623      	mov	r3, r4
   288a0:	f7ff ff54 	bl	2874c <construct_rtu_req>
    // reset usart1_count
    usart1_count = 0;
   288a4:	4b3a      	ldr	r3, [pc, #232]	; (28990 <read_modbus_reg+0x19c>)
   288a6:	2200      	movs	r2, #0
   288a8:	601a      	str	r2, [r3, #0]


    //time_stamp = get_systick_count();
    time_stamp = get_time_out_value();
   288aa:	f7ff ff85 	bl	287b8 <get_time_out_value>
   288ae:	6138      	str	r0, [r7, #16]
            //wait for 30ms for 3.5 character silent interval
    while(get_elapsed_time(time_stamp, get_time_out_count()) < 40)
   288b0:	bf00      	nop
   288b2:	f7ff ff8f 	bl	287d4 <get_time_out_count>
   288b6:	4603      	mov	r3, r0
   288b8:	4619      	mov	r1, r3
   288ba:	6938      	ldr	r0, [r7, #16]
   288bc:	f000 ff76 	bl	297ac <get_elapsed_time>
   288c0:	4603      	mov	r3, r0
   288c2:	2b27      	cmp	r3, #39	; 0x27
   288c4:	d9f5      	bls.n	288b2 <read_modbus_reg+0xbe>
            ;
    }

    // Send modbus rtu packet over serial interface(UART1)
    //rit_delay_us(PREFRAME_DLY_US);
    modbus_uart_send((uint8_t *)&req, sizeof(Modbus_Rtu_Req));
   288c6:	2108      	movs	r1, #8
   288c8:	4830      	ldr	r0, [pc, #192]	; (2898c <read_modbus_reg+0x198>)
   288ca:	f000 f87d 	bl	289c8 <modbus_uart_send>
    //rit_delay_us(POSTFRAME_DLY_US);


    /***********************************polling*********************/
	time_stamp = get_time_out_value();
   288ce:	f7ff ff73 	bl	287b8 <get_time_out_value>
   288d2:	6138      	str	r0, [r7, #16]
	//wait for 100ms max for energy meter worst case response
	while (get_elapsed_time(time_stamp, get_time_out_count()) < 300) {
   288d4:	e023      	b.n	2891e <read_modbus_reg+0x12a>
		LSRValue = LPC_UART1->LSR;
   288d6:	4b2f      	ldr	r3, [pc, #188]	; (28994 <read_modbus_reg+0x1a0>)
   288d8:	7d1b      	ldrb	r3, [r3, #20]
   288da:	73fb      	strb	r3, [r7, #15]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
   288dc:	7bfb      	ldrb	r3, [r7, #15]
   288de:	f003 039e 	and.w	r3, r3, #158	; 0x9e
   288e2:	2b00      	cmp	r3, #0
   288e4:	d003      	beq.n	288ee <read_modbus_reg+0xfa>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			//UART1Status = LSRValue;
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
   288e6:	4b2b      	ldr	r3, [pc, #172]	; (28994 <read_modbus_reg+0x1a0>)
   288e8:	781b      	ldrb	r3, [r3, #0]
   288ea:	75fb      	strb	r3, [r7, #23]
			 interrupt, then bail out */
			return;
   288ec:	e047      	b.n	2897e <read_modbus_reg+0x18a>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
   288ee:	7bfb      	ldrb	r3, [r7, #15]
   288f0:	f003 0301 	and.w	r3, r3, #1
   288f4:	2b00      	cmp	r3, #0
   288f6:	d012      	beq.n	2891e <read_modbus_reg+0x12a>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			usart1_buffer[usart1_count] = LPC_UART1->RBR;
   288f8:	4b25      	ldr	r3, [pc, #148]	; (28990 <read_modbus_reg+0x19c>)
   288fa:	681b      	ldr	r3, [r3, #0]
   288fc:	4a25      	ldr	r2, [pc, #148]	; (28994 <read_modbus_reg+0x1a0>)
   288fe:	7812      	ldrb	r2, [r2, #0]
   28900:	b2d1      	uxtb	r1, r2
   28902:	4a21      	ldr	r2, [pc, #132]	; (28988 <read_modbus_reg+0x194>)
   28904:	54d1      	strb	r1, [r2, r3]
			usart1_count++;
   28906:	4b22      	ldr	r3, [pc, #136]	; (28990 <read_modbus_reg+0x19c>)
   28908:	681b      	ldr	r3, [r3, #0]
   2890a:	3301      	adds	r3, #1
   2890c:	4a20      	ldr	r2, [pc, #128]	; (28990 <read_modbus_reg+0x19c>)
   2890e:	6013      	str	r3, [r2, #0]
			if (usart1_count >= USART_BUFSIZE) {
   28910:	4b1f      	ldr	r3, [pc, #124]	; (28990 <read_modbus_reg+0x19c>)
   28912:	681b      	ldr	r3, [r3, #0]
   28914:	2b7f      	cmp	r3, #127	; 0x7f
   28916:	d902      	bls.n	2891e <read_modbus_reg+0x12a>
				usart1_count = 0; /* buffer overflow */
   28918:	4b1d      	ldr	r3, [pc, #116]	; (28990 <read_modbus_reg+0x19c>)
   2891a:	2200      	movs	r2, #0
   2891c:	601a      	str	r2, [r3, #0]


    /***********************************polling*********************/
	time_stamp = get_time_out_value();
	//wait for 100ms max for energy meter worst case response
	while (get_elapsed_time(time_stamp, get_time_out_count()) < 300) {
   2891e:	f7ff ff59 	bl	287d4 <get_time_out_count>
   28922:	4603      	mov	r3, r0
   28924:	4619      	mov	r1, r3
   28926:	6938      	ldr	r0, [r7, #16]
   28928:	f000 ff40 	bl	297ac <get_elapsed_time>
   2892c:	4603      	mov	r3, r0
   2892e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28932:	d3d0      	bcc.n	288d6 <read_modbus_reg+0xe2>
				usart1_count = 0; /* buffer overflow */
			}
		}

	}
	if (usart1_count >= 3 && resp_length == 0) {
   28934:	4b16      	ldr	r3, [pc, #88]	; (28990 <read_modbus_reg+0x19c>)
   28936:	681b      	ldr	r3, [r3, #0]
   28938:	2b02      	cmp	r3, #2
   2893a:	d915      	bls.n	28968 <read_modbus_reg+0x174>
   2893c:	69bb      	ldr	r3, [r7, #24]
   2893e:	2b00      	cmp	r3, #0
   28940:	d112      	bne.n	28968 <read_modbus_reg+0x174>
		if ((usart1_buffer[0] != slave_addr) || (usart1_buffer[1] != fncode)) {
   28942:	4b11      	ldr	r3, [pc, #68]	; (28988 <read_modbus_reg+0x194>)
   28944:	781b      	ldrb	r3, [r3, #0]
   28946:	b2db      	uxtb	r3, r3
   28948:	79fa      	ldrb	r2, [r7, #7]
   2894a:	429a      	cmp	r2, r3
   2894c:	d105      	bne.n	2895a <read_modbus_reg+0x166>
   2894e:	4b0e      	ldr	r3, [pc, #56]	; (28988 <read_modbus_reg+0x194>)
   28950:	785b      	ldrb	r3, [r3, #1]
   28952:	b2db      	uxtb	r3, r3
   28954:	7ffa      	ldrb	r2, [r7, #31]
   28956:	429a      	cmp	r2, r3
   28958:	d001      	beq.n	2895e <read_modbus_reg+0x16a>
			return INVALID_RESP;
   2895a:	2305      	movs	r3, #5
   2895c:	e00f      	b.n	2897e <read_modbus_reg+0x18a>
		}
		resp_length = MODBUS_RTU_HEAD_LEN + usart1_buffer[2]
   2895e:	4b0a      	ldr	r3, [pc, #40]	; (28988 <read_modbus_reg+0x194>)
   28960:	789b      	ldrb	r3, [r3, #2]
   28962:	b2db      	uxtb	r3, r3
				+ MODBUS_RTU_TAIL_LEN;
   28964:	3305      	adds	r3, #5
	}
	if (usart1_count >= 3 && resp_length == 0) {
		if ((usart1_buffer[0] != slave_addr) || (usart1_buffer[1] != fncode)) {
			return INVALID_RESP;
		}
		resp_length = MODBUS_RTU_HEAD_LEN + usart1_buffer[2]
   28966:	61bb      	str	r3, [r7, #24]
				+ MODBUS_RTU_TAIL_LEN;
	}

	if (resp_length != 0 && usart1_count == resp_length) {
   28968:	69bb      	ldr	r3, [r7, #24]
   2896a:	2b00      	cmp	r3, #0
   2896c:	d006      	beq.n	2897c <read_modbus_reg+0x188>
   2896e:	4b08      	ldr	r3, [pc, #32]	; (28990 <read_modbus_reg+0x19c>)
   28970:	681a      	ldr	r2, [r3, #0]
   28972:	69bb      	ldr	r3, [r7, #24]
   28974:	429a      	cmp	r2, r3
   28976:	d101      	bne.n	2897c <read_modbus_reg+0x188>
		return READ_SUCCESS;
   28978:	2300      	movs	r3, #0
   2897a:	e000      	b.n	2897e <read_modbus_reg+0x18a>
	}

// max wait for energy meter response is over
	return READ_TIMEOUT;
   2897c:	230a      	movs	r3, #10

    // max wait for energy meter response is over
    return READ_TIMEOUT;

    */
}
   2897e:	4618      	mov	r0, r3
   28980:	3724      	adds	r7, #36	; 0x24
   28982:	46bd      	mov	sp, r7
   28984:	bd90      	pop	{r4, r7, pc}
   28986:	bf00      	nop
   28988:	10000678 	.word	0x10000678
   2898c:	1000066c 	.word	0x1000066c
   28990:	10000218 	.word	0x10000218
   28994:	40010000 	.word	0x40010000

00028998 <modbus_master_init>:
******************************************************************************

******************************************************************************
*/
void modbus_master_init(void)
{
   28998:	b580      	push	{r7, lr}
   2899a:	af00      	add	r7, sp, #0
	UARTInit(1, 9600);
   2899c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   289a0:	2001      	movs	r0, #1
   289a2:	f7d8 f9dd 	bl	d60 <UARTInit>
	LPC_GPIO0->FIODIR |= RS485_TX_RX_MODE_PIN;
   289a6:	4a07      	ldr	r2, [pc, #28]	; (289c4 <modbus_master_init+0x2c>)
   289a8:	4b06      	ldr	r3, [pc, #24]	; (289c4 <modbus_master_init+0x2c>)
   289aa:	681b      	ldr	r3, [r3, #0]
   289ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   289b0:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIOSET = RS485_TX_RX_MODE_PIN;
   289b2:	4b04      	ldr	r3, [pc, #16]	; (289c4 <modbus_master_init+0x2c>)
   289b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   289b8:	619a      	str	r2, [r3, #24]
	initTimer0();
   289ba:	f7ff fe49 	bl	28650 <initTimer0>
}
   289be:	bf00      	nop
   289c0:	bd80      	pop	{r7, pc}
   289c2:	bf00      	nop
   289c4:	2009c000 	.word	0x2009c000

000289c8 <modbus_uart_send>:
 * Function: modbus_uart_send
 *
 * Writes buffer to UART byte by byte and sends over serial port.
 */
void  modbus_uart_send(uint8_t *bufferptr, uint32_t length)
{
   289c8:	b580      	push	{r7, lr}
   289ca:	b082      	sub	sp, #8
   289cc:	af00      	add	r7, sp, #0
   289ce:	6078      	str	r0, [r7, #4]
   289d0:	6039      	str	r1, [r7, #0]
	LPC_GPIO0->FIOSET = RS485_TX_RX_MODE_PIN;
   289d2:	4b08      	ldr	r3, [pc, #32]	; (289f4 <modbus_uart_send+0x2c>)
   289d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   289d8:	619a      	str	r2, [r3, #24]
	UARTSend(1, bufferptr, length);
   289da:	683a      	ldr	r2, [r7, #0]
   289dc:	6879      	ldr	r1, [r7, #4]
   289de:	2001      	movs	r0, #1
   289e0:	f7d8 fa7a 	bl	ed8 <UARTSend>
	LPC_GPIO0->FIOCLR = RS485_TX_RX_MODE_PIN;
   289e4:	4b03      	ldr	r3, [pc, #12]	; (289f4 <modbus_uart_send+0x2c>)
   289e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   289ea:	61da      	str	r2, [r3, #28]
}
   289ec:	bf00      	nop
   289ee:	3708      	adds	r7, #8
   289f0:	46bd      	mov	sp, r7
   289f2:	bd80      	pop	{r7, pc}
   289f4:	2009c000 	.word	0x2009c000

000289f8 <UART1_IRQHandler>:
** parameters:			None
** Returned value:		None
**
*****************************************************************************/
void UART1_IRQHandler (void)
{
   289f8:	b480      	push	{r7}
   289fa:	b083      	sub	sp, #12
   289fc:	af00      	add	r7, sp, #0
  uint8_t IIRValue, LSRValue;
  uint8_t Dummy = Dummy;

  IIRValue = LPC_UART1->IIR;
   289fe:	4b2b      	ldr	r3, [pc, #172]	; (28aac <UART1_IRQHandler+0xb4>)
   28a00:	689b      	ldr	r3, [r3, #8]
   28a02:	71bb      	strb	r3, [r7, #6]

  IIRValue >>= 1;			/* skip pending bit in IIR */
   28a04:	79bb      	ldrb	r3, [r7, #6]
   28a06:	085b      	lsrs	r3, r3, #1
   28a08:	71bb      	strb	r3, [r7, #6]
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
   28a0a:	79bb      	ldrb	r3, [r7, #6]
   28a0c:	f003 0307 	and.w	r3, r3, #7
   28a10:	71bb      	strb	r3, [r7, #6]
  if ( IIRValue == IIR_RLS )		/* Receive Line Status */
   28a12:	79bb      	ldrb	r3, [r7, #6]
   28a14:	2b03      	cmp	r3, #3
   28a16:	d124      	bne.n	28a62 <UART1_IRQHandler+0x6a>
  {
	LSRValue = LPC_UART1->LSR;
   28a18:	4b24      	ldr	r3, [pc, #144]	; (28aac <UART1_IRQHandler+0xb4>)
   28a1a:	7d1b      	ldrb	r3, [r3, #20]
   28a1c:	717b      	strb	r3, [r7, #5]
	/* Receive Line Status */
	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
   28a1e:	797b      	ldrb	r3, [r7, #5]
   28a20:	f003 039e 	and.w	r3, r3, #158	; 0x9e
   28a24:	2b00      	cmp	r3, #0
   28a26:	d003      	beq.n	28a30 <UART1_IRQHandler+0x38>
	{
	  /* There are errors or break interrupt */
	  /* Read LSR will clear the interrupt */
	  //UART1Status = LSRValue;
	  Dummy = LPC_UART1->RBR;		/* Dummy read on RX to clear
   28a28:	4b20      	ldr	r3, [pc, #128]	; (28aac <UART1_IRQHandler+0xb4>)
   28a2a:	781b      	ldrb	r3, [r3, #0]
   28a2c:	71fb      	strb	r3, [r7, #7]
								interrupt, then bail out */
	  return;
   28a2e:	e038      	b.n	28aa2 <UART1_IRQHandler+0xaa>
	}
	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */
   28a30:	797b      	ldrb	r3, [r7, #5]
   28a32:	f003 0301 	and.w	r3, r3, #1
   28a36:	2b00      	cmp	r3, #0
   28a38:	d033      	beq.n	28aa2 <UART1_IRQHandler+0xaa>
	{
	  /* If no error on RLS, normal ready, save into the data buffer. */
	  /* Note: read RBR will clear the interrupt */
	  usart1_buffer[usart1_count] = LPC_UART1->RBR;
   28a3a:	4b1d      	ldr	r3, [pc, #116]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a3c:	681b      	ldr	r3, [r3, #0]
   28a3e:	4a1b      	ldr	r2, [pc, #108]	; (28aac <UART1_IRQHandler+0xb4>)
   28a40:	7812      	ldrb	r2, [r2, #0]
   28a42:	b2d1      	uxtb	r1, r2
   28a44:	4a1b      	ldr	r2, [pc, #108]	; (28ab4 <UART1_IRQHandler+0xbc>)
   28a46:	54d1      	strb	r1, [r2, r3]
	  usart1_count++;
   28a48:	4b19      	ldr	r3, [pc, #100]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a4a:	681b      	ldr	r3, [r3, #0]
   28a4c:	3301      	adds	r3, #1
   28a4e:	4a18      	ldr	r2, [pc, #96]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a50:	6013      	str	r3, [r2, #0]
	  if ( usart1_count >= USART_BUFSIZE )
   28a52:	4b17      	ldr	r3, [pc, #92]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a54:	681b      	ldr	r3, [r3, #0]
   28a56:	2b7f      	cmp	r3, #127	; 0x7f
   28a58:	d923      	bls.n	28aa2 <UART1_IRQHandler+0xaa>
	  {
		  usart1_count = 0;		/* buffer overflow */
   28a5a:	4b15      	ldr	r3, [pc, #84]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a5c:	2200      	movs	r2, #0
   28a5e:	601a      	str	r2, [r3, #0]
   28a60:	e01f      	b.n	28aa2 <UART1_IRQHandler+0xaa>
	  }
	}
  }
  else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
   28a62:	79bb      	ldrb	r3, [r7, #6]
   28a64:	2b02      	cmp	r3, #2
   28a66:	d113      	bne.n	28a90 <UART1_IRQHandler+0x98>
  {
	/* Receive Data Available */
	usart1_buffer[usart1_count] = LPC_UART1->RBR;
   28a68:	4b11      	ldr	r3, [pc, #68]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a6a:	681b      	ldr	r3, [r3, #0]
   28a6c:	4a0f      	ldr	r2, [pc, #60]	; (28aac <UART1_IRQHandler+0xb4>)
   28a6e:	7812      	ldrb	r2, [r2, #0]
   28a70:	b2d1      	uxtb	r1, r2
   28a72:	4a10      	ldr	r2, [pc, #64]	; (28ab4 <UART1_IRQHandler+0xbc>)
   28a74:	54d1      	strb	r1, [r2, r3]
	usart1_count++;
   28a76:	4b0e      	ldr	r3, [pc, #56]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a78:	681b      	ldr	r3, [r3, #0]
   28a7a:	3301      	adds	r3, #1
   28a7c:	4a0c      	ldr	r2, [pc, #48]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a7e:	6013      	str	r3, [r2, #0]
	if ( usart1_count >= USART_BUFSIZE )
   28a80:	4b0b      	ldr	r3, [pc, #44]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a82:	681b      	ldr	r3, [r3, #0]
   28a84:	2b7f      	cmp	r3, #127	; 0x7f
   28a86:	d90c      	bls.n	28aa2 <UART1_IRQHandler+0xaa>
	{
		usart1_count = 0;		/* buffer overflow */
   28a88:	4b09      	ldr	r3, [pc, #36]	; (28ab0 <UART1_IRQHandler+0xb8>)
   28a8a:	2200      	movs	r2, #0
   28a8c:	601a      	str	r2, [r3, #0]
   28a8e:	e008      	b.n	28aa2 <UART1_IRQHandler+0xaa>
	}
  }
  else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
   28a90:	79bb      	ldrb	r3, [r7, #6]
   28a92:	2b06      	cmp	r3, #6
   28a94:	d005      	beq.n	28aa2 <UART1_IRQHandler+0xaa>
  {
	/* Character Time-out indicator */
	//UART1Status |= 0x100;		/* Bit 9 as the CTI error */
  }
  else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
   28a96:	79bb      	ldrb	r3, [r7, #6]
   28a98:	2b01      	cmp	r3, #1
   28a9a:	d102      	bne.n	28aa2 <UART1_IRQHandler+0xaa>
  {
	/* THRE interrupt */
	LSRValue = LPC_UART1->LSR;		/* Check status in the LSR to see if
   28a9c:	4b03      	ldr	r3, [pc, #12]	; (28aac <UART1_IRQHandler+0xb4>)
   28a9e:	7d1b      	ldrb	r3, [r3, #20]
   28aa0:	717b      	strb	r3, [r7, #5]
								valid data in U0THR or not */

  }
}
   28aa2:	370c      	adds	r7, #12
   28aa4:	46bd      	mov	sp, r7
   28aa6:	bc80      	pop	{r7}
   28aa8:	4770      	bx	lr
   28aaa:	bf00      	nop
   28aac:	40010000 	.word	0x40010000
   28ab0:	10000218 	.word	0x10000218
   28ab4:	10000678 	.word	0x10000678

00028ab8 <time_current>:
								  &l3InstVoltage.base,
								  //&clock1.base,
								  &lineFreq.base};

long time_current(void)
{
   28ab8:	b480      	push	{r7}
   28aba:	af00      	add	r7, sp, #0
  //Get current time.
  //Because there is no clock, clock object keeps base time and uptime is added to that.
  //return time_toUnixTime(&clock1.time.value) + (_impl_k_uptime_get() - started) / 1000;
	return 0;
   28abc:	2300      	movs	r3, #0
}
   28abe:	4618      	mov	r0, r3
   28ac0:	46bd      	mov	sp, r7
   28ac2:	bc80      	pop	{r7}
   28ac4:	4770      	bx	lr
   28ac6:	bf00      	nop

00028ac8 <time_elapsed>:

long time_elapsed(void)
{
   28ac8:	b480      	push	{r7}
   28aca:	af00      	add	r7, sp, #0
  //return _impl_k_uptime_get();
	return 0;
   28acc:	2300      	movs	r3, #0
}
   28ace:	4618      	mov	r0, r3
   28ad0:	46bd      	mov	sp, r7
   28ad2:	bc80      	pop	{r7}
   28ad4:	4770      	bx	lr
   28ad6:	bf00      	nop

00028ad8 <time_now>:

void time_now(
gxtime* value)
{
   28ad8:	b480      	push	{r7}
   28ada:	b083      	sub	sp, #12
   28adc:	af00      	add	r7, sp, #0
   28ade:	6078      	str	r0, [r7, #4]
  //long offset = time_current();
  //(_impl_k_uptime_get() - started) / 1000;
  //time_init4(value, offset);
	return;
   28ae0:	bf00      	nop
}
   28ae2:	370c      	adds	r7, #12
   28ae4:	46bd      	mov	sp, r7
   28ae6:	bc80      	pop	{r7}
   28ae8:	4770      	bx	lr
   28aea:	bf00      	nop

00028aec <addAssociation>:

///////////////////////////////////////////////////////////////////////
//This method adds example Logical Name Association object.
///////////////////////////////////////////////////////////////////////
int addAssociation()
{
   28aec:	b580      	push	{r7, lr}
   28aee:	b082      	sub	sp, #8
   28af0:	af00      	add	r7, sp, #0
  const unsigned char ln[6] = { 0, 0, 40, 0, 1, 255 };
   28af2:	4a0f      	ldr	r2, [pc, #60]	; (28b30 <addAssociation+0x44>)
   28af4:	463b      	mov	r3, r7
   28af6:	6810      	ldr	r0, [r2, #0]
   28af8:	6018      	str	r0, [r3, #0]
   28afa:	8892      	ldrh	r2, [r2, #4]
   28afc:	809a      	strh	r2, [r3, #4]
  cosem_init2((gxObject*) &association.base, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME, ln);
   28afe:	463b      	mov	r3, r7
   28b00:	461a      	mov	r2, r3
   28b02:	210f      	movs	r1, #15
   28b04:	480b      	ldr	r0, [pc, #44]	; (28b34 <addAssociation+0x48>)
   28b06:	f7dd f99f 	bl	5e48 <cosem_init2>
  //Only Logical Device Name is add to this Association View.
  //Use this if you  need to save heap.
  oa_attach(&association.objectList, ALL_OBJECTS, sizeof(ALL_OBJECTS) / sizeof(ALL_OBJECTS[0]));
   28b0a:	220c      	movs	r2, #12
   28b0c:	490a      	ldr	r1, [pc, #40]	; (28b38 <addAssociation+0x4c>)
   28b0e:	480b      	ldr	r0, [pc, #44]	; (28b3c <addAssociation+0x50>)
   28b10:	f7f9 fa82 	bl	22018 <oa_attach>
  bb_addString(&association.secret, "Gurux");
   28b14:	490a      	ldr	r1, [pc, #40]	; (28b40 <addAssociation+0x54>)
   28b16:	480b      	ldr	r0, [pc, #44]	; (28b44 <addAssociation+0x58>)
   28b18:	f7da fdb8 	bl	368c <bb_addString>
  association.authenticationMechanismName.mechanismId = DLMS_AUTHENTICATION_NONE;
   28b1c:	4b05      	ldr	r3, [pc, #20]	; (28b34 <addAssociation+0x48>)
   28b1e:	2200      	movs	r2, #0
   28b20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  return 0;
   28b24:	2300      	movs	r3, #0
}
   28b26:	4618      	mov	r0, r3
   28b28:	3708      	adds	r7, #8
   28b2a:	46bd      	mov	sp, r7
   28b2c:	bd80      	pop	{r7, pc}
   28b2e:	bf00      	nop
   28b30:	0002c5f8 	.word	0x0002c5f8
   28b34:	100003c8 	.word	0x100003c8
   28b38:	10000054 	.word	0x10000054
   28b3c:	100003dc 	.word	0x100003dc
   28b40:	0002c5f0 	.word	0x0002c5f0
   28b44:	1000041c 	.word	0x1000041c

00028b48 <addLogicalDeviceName>:
// COSEM Logical Device Name is defined as an octet-string of 16 octets.
// The first three octets uniquely identify the manufacturer of the device and it corresponds
// to the manufacturer's identification in IEC 62056-21.
// The following 13 octets are assigned by the manufacturer.
//The manufacturer is responsible for guaranteeing the uniqueness of these octets.
int addLogicalDeviceName() {
   28b48:	b580      	push	{r7, lr}
   28b4a:	b088      	sub	sp, #32
   28b4c:	af00      	add	r7, sp, #0
  int ret;
  char buff[17];
  sprintf(buff, "GRX%.13lu", SERIAL_NUMBER);
   28b4e:	4b13      	ldr	r3, [pc, #76]	; (28b9c <addLogicalDeviceName+0x54>)
   28b50:	681a      	ldr	r2, [r3, #0]
   28b52:	f107 0308 	add.w	r3, r7, #8
   28b56:	4912      	ldr	r1, [pc, #72]	; (28ba0 <addLogicalDeviceName+0x58>)
   28b58:	4618      	mov	r0, r3
   28b5a:	f001 fb41 	bl	2a1e0 <siprintf>
  const unsigned char ln[6] = { 0,0,42,0,0,255 };
   28b5e:	4a11      	ldr	r2, [pc, #68]	; (28ba4 <addLogicalDeviceName+0x5c>)
   28b60:	463b      	mov	r3, r7
   28b62:	6810      	ldr	r0, [r2, #0]
   28b64:	6018      	str	r0, [r3, #0]
   28b66:	8892      	ldrh	r2, [r2, #4]
   28b68:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&ldn.base, DLMS_OBJECT_TYPE_DATA, ln)) != 0)
   28b6a:	463b      	mov	r3, r7
   28b6c:	461a      	mov	r2, r3
   28b6e:	2101      	movs	r1, #1
   28b70:	480d      	ldr	r0, [pc, #52]	; (28ba8 <addLogicalDeviceName+0x60>)
   28b72:	f7dd f969 	bl	5e48 <cosem_init2>
   28b76:	61f8      	str	r0, [r7, #28]
   28b78:	69fb      	ldr	r3, [r7, #28]
   28b7a:	2b00      	cmp	r3, #0
   28b7c:	d001      	beq.n	28b82 <addLogicalDeviceName+0x3a>
  {
      return ret;
   28b7e:	69fb      	ldr	r3, [r7, #28]
   28b80:	e007      	b.n	28b92 <addLogicalDeviceName+0x4a>
  }
  var_addBytes(&ldn.value, (unsigned char*)buff, 16);
   28b82:	f107 0308 	add.w	r3, r7, #8
   28b86:	2210      	movs	r2, #16
   28b88:	4619      	mov	r1, r3
   28b8a:	4808      	ldr	r0, [pc, #32]	; (28bac <addLogicalDeviceName+0x64>)
   28b8c:	f7fd fa54 	bl	26038 <var_addBytes>
  return 0;
   28b90:	2300      	movs	r3, #0
}
   28b92:	4618      	mov	r0, r3
   28b94:	3720      	adds	r7, #32
   28b96:	46bd      	mov	sp, r7
   28b98:	bd80      	pop	{r7, pc}
   28b9a:	bf00      	nop
   28b9c:	10000050 	.word	0x10000050
   28ba0:	0002c600 	.word	0x0002c600
   28ba4:	0002c60c 	.word	0x0002c60c
   28ba8:	100003a8 	.word	0x100003a8
   28bac:	100003b8 	.word	0x100003b8

00028bb0 <addPfRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addPfRegisterObject()
{
   28bb0:	b580      	push	{r7, lr}
   28bb2:	b084      	sub	sp, #16
   28bb4:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,13,7,0,255  };
   28bb6:	4a0f      	ldr	r2, [pc, #60]	; (28bf4 <addPfRegisterObject+0x44>)
   28bb8:	1d3b      	adds	r3, r7, #4
   28bba:	6810      	ldr	r0, [r2, #0]
   28bbc:	6018      	str	r0, [r3, #0]
   28bbe:	8892      	ldrh	r2, [r2, #4]
   28bc0:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&liPowerFactor, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28bc2:	1d3b      	adds	r3, r7, #4
   28bc4:	461a      	mov	r2, r3
   28bc6:	2103      	movs	r1, #3
   28bc8:	480b      	ldr	r0, [pc, #44]	; (28bf8 <addPfRegisterObject+0x48>)
   28bca:	f7dd f93d 	bl	5e48 <cosem_init2>
   28bce:	60f8      	str	r0, [r7, #12]
   28bd0:	68fb      	ldr	r3, [r7, #12]
   28bd2:	2b00      	cmp	r3, #0
   28bd4:	d001      	beq.n	28bda <addPfRegisterObject+0x2a>
  {
    return ret;
   28bd6:	68fb      	ldr	r3, [r7, #12]
   28bd8:	e008      	b.n	28bec <addPfRegisterObject+0x3c>
  }
  //10 ^ 0 =  10
//  liPowerFactor.scaler = 0;	//rakesh
  liPowerFactor.scaler = -3;
   28bda:	4b07      	ldr	r3, [pc, #28]	; (28bf8 <addPfRegisterObject+0x48>)
   28bdc:	22fd      	movs	r2, #253	; 0xfd
   28bde:	f883 2020 	strb.w	r2, [r3, #32]
  liPowerFactor.unit = 0xFF;
   28be2:	4b05      	ldr	r3, [pc, #20]	; (28bf8 <addPfRegisterObject+0x48>)
   28be4:	22ff      	movs	r2, #255	; 0xff
   28be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28bea:	2300      	movs	r3, #0
}
   28bec:	4618      	mov	r0, r3
   28bee:	3710      	adds	r7, #16
   28bf0:	46bd      	mov	sp, r7
   28bf2:	bd80      	pop	{r7, pc}
   28bf4:	0002c614 	.word	0x0002c614
   28bf8:	10000498 	.word	0x10000498

00028bfc <addl1VoltageRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl1VoltageRegisterObject()
{
   28bfc:	b580      	push	{r7, lr}
   28bfe:	b084      	sub	sp, #16
   28c00:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,32,7,0,255  };
   28c02:	4a0f      	ldr	r2, [pc, #60]	; (28c40 <addl1VoltageRegisterObject+0x44>)
   28c04:	1d3b      	adds	r3, r7, #4
   28c06:	6810      	ldr	r0, [r2, #0]
   28c08:	6018      	str	r0, [r3, #0]
   28c0a:	8892      	ldrh	r2, [r2, #4]
   28c0c:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l1InstVoltage, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28c0e:	1d3b      	adds	r3, r7, #4
   28c10:	461a      	mov	r2, r3
   28c12:	2103      	movs	r1, #3
   28c14:	480b      	ldr	r0, [pc, #44]	; (28c44 <addl1VoltageRegisterObject+0x48>)
   28c16:	f7dd f917 	bl	5e48 <cosem_init2>
   28c1a:	60f8      	str	r0, [r7, #12]
   28c1c:	68fb      	ldr	r3, [r7, #12]
   28c1e:	2b00      	cmp	r3, #0
   28c20:	d001      	beq.n	28c26 <addl1VoltageRegisterObject+0x2a>
  {
    return ret;
   28c22:	68fb      	ldr	r3, [r7, #12]
   28c24:	e008      	b.n	28c38 <addl1VoltageRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
  l1InstVoltage.scaler = -2;
   28c26:	4b07      	ldr	r3, [pc, #28]	; (28c44 <addl1VoltageRegisterObject+0x48>)
   28c28:	22fe      	movs	r2, #254	; 0xfe
   28c2a:	f883 2020 	strb.w	r2, [r3, #32]
  l1InstVoltage.unit = 35;
   28c2e:	4b05      	ldr	r3, [pc, #20]	; (28c44 <addl1VoltageRegisterObject+0x48>)
   28c30:	2223      	movs	r2, #35	; 0x23
   28c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28c36:	2300      	movs	r3, #0
}
   28c38:	4618      	mov	r0, r3
   28c3a:	3710      	adds	r7, #16
   28c3c:	46bd      	mov	sp, r7
   28c3e:	bd80      	pop	{r7, pc}
   28c40:	0002c61c 	.word	0x0002c61c
   28c44:	100004c0 	.word	0x100004c0

00028c48 <addl2VoltageRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl2VoltageRegisterObject()
{
   28c48:	b580      	push	{r7, lr}
   28c4a:	b084      	sub	sp, #16
   28c4c:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,52,7,0,255  };
   28c4e:	4a0f      	ldr	r2, [pc, #60]	; (28c8c <addl2VoltageRegisterObject+0x44>)
   28c50:	1d3b      	adds	r3, r7, #4
   28c52:	6810      	ldr	r0, [r2, #0]
   28c54:	6018      	str	r0, [r3, #0]
   28c56:	8892      	ldrh	r2, [r2, #4]
   28c58:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l2InstVoltage, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28c5a:	1d3b      	adds	r3, r7, #4
   28c5c:	461a      	mov	r2, r3
   28c5e:	2103      	movs	r1, #3
   28c60:	480b      	ldr	r0, [pc, #44]	; (28c90 <addl2VoltageRegisterObject+0x48>)
   28c62:	f7dd f8f1 	bl	5e48 <cosem_init2>
   28c66:	60f8      	str	r0, [r7, #12]
   28c68:	68fb      	ldr	r3, [r7, #12]
   28c6a:	2b00      	cmp	r3, #0
   28c6c:	d001      	beq.n	28c72 <addl2VoltageRegisterObject+0x2a>
  {
    return ret;
   28c6e:	68fb      	ldr	r3, [r7, #12]
   28c70:	e008      	b.n	28c84 <addl2VoltageRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  l2InstVoltage.scaler = 0;	//rakesh
  l2InstVoltage.scaler = -2;
   28c72:	4b07      	ldr	r3, [pc, #28]	; (28c90 <addl2VoltageRegisterObject+0x48>)
   28c74:	22fe      	movs	r2, #254	; 0xfe
   28c76:	f883 2020 	strb.w	r2, [r3, #32]
  l2InstVoltage.unit = 35;
   28c7a:	4b05      	ldr	r3, [pc, #20]	; (28c90 <addl2VoltageRegisterObject+0x48>)
   28c7c:	2223      	movs	r2, #35	; 0x23
   28c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28c82:	2300      	movs	r3, #0
}
   28c84:	4618      	mov	r0, r3
   28c86:	3710      	adds	r7, #16
   28c88:	46bd      	mov	sp, r7
   28c8a:	bd80      	pop	{r7, pc}
   28c8c:	0002c624 	.word	0x0002c624
   28c90:	100004e8 	.word	0x100004e8

00028c94 <addl3VoltageRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl3VoltageRegisterObject()
{
   28c94:	b580      	push	{r7, lr}
   28c96:	b084      	sub	sp, #16
   28c98:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,72,7,0,255  };
   28c9a:	4a0f      	ldr	r2, [pc, #60]	; (28cd8 <addl3VoltageRegisterObject+0x44>)
   28c9c:	1d3b      	adds	r3, r7, #4
   28c9e:	6810      	ldr	r0, [r2, #0]
   28ca0:	6018      	str	r0, [r3, #0]
   28ca2:	8892      	ldrh	r2, [r2, #4]
   28ca4:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l3InstVoltage, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28ca6:	1d3b      	adds	r3, r7, #4
   28ca8:	461a      	mov	r2, r3
   28caa:	2103      	movs	r1, #3
   28cac:	480b      	ldr	r0, [pc, #44]	; (28cdc <addl3VoltageRegisterObject+0x48>)
   28cae:	f7dd f8cb 	bl	5e48 <cosem_init2>
   28cb2:	60f8      	str	r0, [r7, #12]
   28cb4:	68fb      	ldr	r3, [r7, #12]
   28cb6:	2b00      	cmp	r3, #0
   28cb8:	d001      	beq.n	28cbe <addl3VoltageRegisterObject+0x2a>
  {
    return ret;
   28cba:	68fb      	ldr	r3, [r7, #12]
   28cbc:	e008      	b.n	28cd0 <addl3VoltageRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  l3InstVoltage.scaler = 0;	//rakesh
  l3InstVoltage.scaler = -2;
   28cbe:	4b07      	ldr	r3, [pc, #28]	; (28cdc <addl3VoltageRegisterObject+0x48>)
   28cc0:	22fe      	movs	r2, #254	; 0xfe
   28cc2:	f883 2020 	strb.w	r2, [r3, #32]
  l3InstVoltage.unit = 35;
   28cc6:	4b05      	ldr	r3, [pc, #20]	; (28cdc <addl3VoltageRegisterObject+0x48>)
   28cc8:	2223      	movs	r2, #35	; 0x23
   28cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28cce:	2300      	movs	r3, #0
}
   28cd0:	4618      	mov	r0, r3
   28cd2:	3710      	adds	r7, #16
   28cd4:	46bd      	mov	sp, r7
   28cd6:	bd80      	pop	{r7, pc}
   28cd8:	0002c62c 	.word	0x0002c62c
   28cdc:	10000510 	.word	0x10000510

00028ce0 <addl1CurrentRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl1CurrentRegisterObject()
{
   28ce0:	b580      	push	{r7, lr}
   28ce2:	b084      	sub	sp, #16
   28ce4:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,31,7,0,255  };
   28ce6:	4a0f      	ldr	r2, [pc, #60]	; (28d24 <addl1CurrentRegisterObject+0x44>)
   28ce8:	1d3b      	adds	r3, r7, #4
   28cea:	6810      	ldr	r0, [r2, #0]
   28cec:	6018      	str	r0, [r3, #0]
   28cee:	8892      	ldrh	r2, [r2, #4]
   28cf0:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l1InstCurrent, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28cf2:	1d3b      	adds	r3, r7, #4
   28cf4:	461a      	mov	r2, r3
   28cf6:	2103      	movs	r1, #3
   28cf8:	480b      	ldr	r0, [pc, #44]	; (28d28 <addl1CurrentRegisterObject+0x48>)
   28cfa:	f7dd f8a5 	bl	5e48 <cosem_init2>
   28cfe:	60f8      	str	r0, [r7, #12]
   28d00:	68fb      	ldr	r3, [r7, #12]
   28d02:	2b00      	cmp	r3, #0
   28d04:	d001      	beq.n	28d0a <addl1CurrentRegisterObject+0x2a>
  {
    return ret;
   28d06:	68fb      	ldr	r3, [r7, #12]
   28d08:	e008      	b.n	28d1c <addl1CurrentRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  l1InstCurrent.scaler = 0;	//rakesh
  l1InstCurrent.scaler = -3;
   28d0a:	4b07      	ldr	r3, [pc, #28]	; (28d28 <addl1CurrentRegisterObject+0x48>)
   28d0c:	22fd      	movs	r2, #253	; 0xfd
   28d0e:	f883 2020 	strb.w	r2, [r3, #32]
  l1InstCurrent.unit = 33;
   28d12:	4b05      	ldr	r3, [pc, #20]	; (28d28 <addl1CurrentRegisterObject+0x48>)
   28d14:	2221      	movs	r2, #33	; 0x21
   28d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28d1a:	2300      	movs	r3, #0
}
   28d1c:	4618      	mov	r0, r3
   28d1e:	3710      	adds	r7, #16
   28d20:	46bd      	mov	sp, r7
   28d22:	bd80      	pop	{r7, pc}
   28d24:	0002c634 	.word	0x0002c634
   28d28:	10000538 	.word	0x10000538

00028d2c <addl2CurrentRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl2CurrentRegisterObject()
{
   28d2c:	b580      	push	{r7, lr}
   28d2e:	b084      	sub	sp, #16
   28d30:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,51,7,0,255  };
   28d32:	4a0f      	ldr	r2, [pc, #60]	; (28d70 <addl2CurrentRegisterObject+0x44>)
   28d34:	1d3b      	adds	r3, r7, #4
   28d36:	6810      	ldr	r0, [r2, #0]
   28d38:	6018      	str	r0, [r3, #0]
   28d3a:	8892      	ldrh	r2, [r2, #4]
   28d3c:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l2InstCurrent, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28d3e:	1d3b      	adds	r3, r7, #4
   28d40:	461a      	mov	r2, r3
   28d42:	2103      	movs	r1, #3
   28d44:	480b      	ldr	r0, [pc, #44]	; (28d74 <addl2CurrentRegisterObject+0x48>)
   28d46:	f7dd f87f 	bl	5e48 <cosem_init2>
   28d4a:	60f8      	str	r0, [r7, #12]
   28d4c:	68fb      	ldr	r3, [r7, #12]
   28d4e:	2b00      	cmp	r3, #0
   28d50:	d001      	beq.n	28d56 <addl2CurrentRegisterObject+0x2a>
  {
    return ret;
   28d52:	68fb      	ldr	r3, [r7, #12]
   28d54:	e008      	b.n	28d68 <addl2CurrentRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  l2InstCurrent.scaler = 0;	//rakesh
  l2InstCurrent.scaler = -3;
   28d56:	4b07      	ldr	r3, [pc, #28]	; (28d74 <addl2CurrentRegisterObject+0x48>)
   28d58:	22fd      	movs	r2, #253	; 0xfd
   28d5a:	f883 2020 	strb.w	r2, [r3, #32]
  l2InstCurrent.unit = 33;
   28d5e:	4b05      	ldr	r3, [pc, #20]	; (28d74 <addl2CurrentRegisterObject+0x48>)
   28d60:	2221      	movs	r2, #33	; 0x21
   28d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28d66:	2300      	movs	r3, #0
}
   28d68:	4618      	mov	r0, r3
   28d6a:	3710      	adds	r7, #16
   28d6c:	46bd      	mov	sp, r7
   28d6e:	bd80      	pop	{r7, pc}
   28d70:	0002c63c 	.word	0x0002c63c
   28d74:	10000560 	.word	0x10000560

00028d78 <addl3CurrentRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addl3CurrentRegisterObject()
{
   28d78:	b580      	push	{r7, lr}
   28d7a:	b084      	sub	sp, #16
   28d7c:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,71,7,0,255  };
   28d7e:	4a0f      	ldr	r2, [pc, #60]	; (28dbc <addl3CurrentRegisterObject+0x44>)
   28d80:	1d3b      	adds	r3, r7, #4
   28d82:	6810      	ldr	r0, [r2, #0]
   28d84:	6018      	str	r0, [r3, #0]
   28d86:	8892      	ldrh	r2, [r2, #4]
   28d88:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&l3InstCurrent, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28d8a:	1d3b      	adds	r3, r7, #4
   28d8c:	461a      	mov	r2, r3
   28d8e:	2103      	movs	r1, #3
   28d90:	480b      	ldr	r0, [pc, #44]	; (28dc0 <addl3CurrentRegisterObject+0x48>)
   28d92:	f7dd f859 	bl	5e48 <cosem_init2>
   28d96:	60f8      	str	r0, [r7, #12]
   28d98:	68fb      	ldr	r3, [r7, #12]
   28d9a:	2b00      	cmp	r3, #0
   28d9c:	d001      	beq.n	28da2 <addl3CurrentRegisterObject+0x2a>
  {
    return ret;
   28d9e:	68fb      	ldr	r3, [r7, #12]
   28da0:	e008      	b.n	28db4 <addl3CurrentRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  l3InstCurrent.scaler = 0;	//rakesh
  l3InstCurrent.scaler = -3;
   28da2:	4b07      	ldr	r3, [pc, #28]	; (28dc0 <addl3CurrentRegisterObject+0x48>)
   28da4:	22fd      	movs	r2, #253	; 0xfd
   28da6:	f883 2020 	strb.w	r2, [r3, #32]
  l3InstCurrent.unit = 33;
   28daa:	4b05      	ldr	r3, [pc, #20]	; (28dc0 <addl3CurrentRegisterObject+0x48>)
   28dac:	2221      	movs	r2, #33	; 0x21
   28dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return 0;
   28db2:	2300      	movs	r3, #0
}
   28db4:	4618      	mov	r0, r3
   28db6:	3710      	adds	r7, #16
   28db8:	46bd      	mov	sp, r7
   28dba:	bd80      	pop	{r7, pc}
   28dbc:	0002c644 	.word	0x0002c644
   28dc0:	10000588 	.word	0x10000588

00028dc4 <addKwhRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addKwhRegisterObject()
{
   28dc4:	b580      	push	{r7, lr}
   28dc6:	b084      	sub	sp, #16
   28dc8:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,1,8,0,255  };
   28dca:	4a0f      	ldr	r2, [pc, #60]	; (28e08 <addKwhRegisterObject+0x44>)
   28dcc:	1d3b      	adds	r3, r7, #4
   28dce:	6810      	ldr	r0, [r2, #0]
   28dd0:	6018      	str	r0, [r3, #0]
   28dd2:	8892      	ldrh	r2, [r2, #4]
   28dd4:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&activePowerL1, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28dd6:	1d3b      	adds	r3, r7, #4
   28dd8:	461a      	mov	r2, r3
   28dda:	2103      	movs	r1, #3
   28ddc:	480b      	ldr	r0, [pc, #44]	; (28e0c <addKwhRegisterObject+0x48>)
   28dde:	f7dd f833 	bl	5e48 <cosem_init2>
   28de2:	60f8      	str	r0, [r7, #12]
   28de4:	68fb      	ldr	r3, [r7, #12]
   28de6:	2b00      	cmp	r3, #0
   28de8:	d001      	beq.n	28dee <addKwhRegisterObject+0x2a>
  {
    return ret;
   28dea:	68fb      	ldr	r3, [r7, #12]
   28dec:	e008      	b.n	28e00 <addKwhRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  activePowerL1.scaler = 0;	//rakesh
  activePowerL1.scaler = -4;
   28dee:	4b07      	ldr	r3, [pc, #28]	; (28e0c <addKwhRegisterObject+0x48>)
   28df0:	22fc      	movs	r2, #252	; 0xfc
   28df2:	f883 2020 	strb.w	r2, [r3, #32]
  activePowerL1.unit = 30;
   28df6:	4b05      	ldr	r3, [pc, #20]	; (28e0c <addKwhRegisterObject+0x48>)
   28df8:	221e      	movs	r2, #30
   28dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  return 0;
   28dfe:	2300      	movs	r3, #0
}
   28e00:	4618      	mov	r0, r3
   28e02:	3710      	adds	r7, #16
   28e04:	46bd      	mov	sp, r7
   28e06:	bd80      	pop	{r7, pc}
   28e08:	0002c64c 	.word	0x0002c64c
   28e0c:	10000448 	.word	0x10000448

00028e10 <addKvahRegisterObject>:

///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addKvahRegisterObject()
{
   28e10:	b580      	push	{r7, lr}
   28e12:	b084      	sub	sp, #16
   28e14:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,9,8,0,255 };
   28e16:	4a0f      	ldr	r2, [pc, #60]	; (28e54 <addKvahRegisterObject+0x44>)
   28e18:	1d3b      	adds	r3, r7, #4
   28e1a:	6810      	ldr	r0, [r2, #0]
   28e1c:	6018      	str	r0, [r3, #0]
   28e1e:	8892      	ldrh	r2, [r2, #4]
   28e20:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&apparentPowerL1, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28e22:	1d3b      	adds	r3, r7, #4
   28e24:	461a      	mov	r2, r3
   28e26:	2103      	movs	r1, #3
   28e28:	480b      	ldr	r0, [pc, #44]	; (28e58 <addKvahRegisterObject+0x48>)
   28e2a:	f7dd f80d 	bl	5e48 <cosem_init2>
   28e2e:	60f8      	str	r0, [r7, #12]
   28e30:	68fb      	ldr	r3, [r7, #12]
   28e32:	2b00      	cmp	r3, #0
   28e34:	d001      	beq.n	28e3a <addKvahRegisterObject+0x2a>
  {
    return ret;
   28e36:	68fb      	ldr	r3, [r7, #12]
   28e38:	e008      	b.n	28e4c <addKvahRegisterObject+0x3c>
  }
  //10 ^ 1 =  10
//  apparentPowerL1.scaler = 0;	//rakesh
  apparentPowerL1.scaler = -4;
   28e3a:	4b07      	ldr	r3, [pc, #28]	; (28e58 <addKvahRegisterObject+0x48>)
   28e3c:	22fc      	movs	r2, #252	; 0xfc
   28e3e:	f883 2020 	strb.w	r2, [r3, #32]
  apparentPowerL1.unit = 31;
   28e42:	4b05      	ldr	r3, [pc, #20]	; (28e58 <addKvahRegisterObject+0x48>)
   28e44:	221f      	movs	r2, #31
   28e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  return 0;
   28e4a:	2300      	movs	r3, #0
}
   28e4c:	4618      	mov	r0, r3
   28e4e:	3710      	adds	r7, #16
   28e50:	46bd      	mov	sp, r7
   28e52:	bd80      	pop	{r7, pc}
   28e54:	0002c654 	.word	0x0002c654
   28e58:	10000470 	.word	0x10000470

00028e5c <addlineFreq>:
//rekesh
///////////////////////////////////////////////////////////////////////
//This method adds example register object.
///////////////////////////////////////////////////////////////////////
int addlineFreq()
{
   28e5c:	b580      	push	{r7, lr}
   28e5e:	b084      	sub	sp, #16
   28e60:	af00      	add	r7, sp, #0
  int ret;
  const unsigned char ln[6] = { 1,0,14,7,0,255 };
   28e62:	4a0f      	ldr	r2, [pc, #60]	; (28ea0 <addlineFreq+0x44>)
   28e64:	1d3b      	adds	r3, r7, #4
   28e66:	6810      	ldr	r0, [r2, #0]
   28e68:	6018      	str	r0, [r3, #0]
   28e6a:	8892      	ldrh	r2, [r2, #4]
   28e6c:	809a      	strh	r2, [r3, #4]
  if ((ret = cosem_init2((gxObject*)&lineFreq, DLMS_OBJECT_TYPE_REGISTER, ln)) != 0)
   28e6e:	1d3b      	adds	r3, r7, #4
   28e70:	461a      	mov	r2, r3
   28e72:	2103      	movs	r1, #3
   28e74:	480b      	ldr	r0, [pc, #44]	; (28ea4 <addlineFreq+0x48>)
   28e76:	f7dc ffe7 	bl	5e48 <cosem_init2>
   28e7a:	60f8      	str	r0, [r7, #12]
   28e7c:	68fb      	ldr	r3, [r7, #12]
   28e7e:	2b00      	cmp	r3, #0
   28e80:	d001      	beq.n	28e86 <addlineFreq+0x2a>
  {
    return ret;
   28e82:	68fb      	ldr	r3, [r7, #12]
   28e84:	e008      	b.n	28e98 <addlineFreq+0x3c>
  }
  //10 ^ 1 =  10
//  apparentPowerL1.scaler = 0;	//rakesh
  lineFreq.scaler = -2;
   28e86:	4b07      	ldr	r3, [pc, #28]	; (28ea4 <addlineFreq+0x48>)
   28e88:	22fe      	movs	r2, #254	; 0xfe
   28e8a:	f883 2020 	strb.w	r2, [r3, #32]
  lineFreq.unit = 31;
   28e8e:	4b05      	ldr	r3, [pc, #20]	; (28ea4 <addlineFreq+0x48>)
   28e90:	221f      	movs	r2, #31
   28e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  return 0;
   28e96:	2300      	movs	r3, #0
}
   28e98:	4618      	mov	r0, r3
   28e9a:	3710      	adds	r7, #16
   28e9c:	46bd      	mov	sp, r7
   28e9e:	bd80      	pop	{r7, pc}
   28ea0:	0002c65c 	.word	0x0002c65c
   28ea4:	100005b0 	.word	0x100005b0

00028ea8 <svr_InitObjects>:



int svr_InitObjects(
  dlmsServerSettings *settings)
{
   28ea8:	b580      	push	{r7, lr}
   28eaa:	b082      	sub	sp, #8
   28eac:	af00      	add	r7, sp, #0
   28eae:	6078      	str	r0, [r7, #4]
  addLogicalDeviceName();
   28eb0:	f7ff fe4a 	bl	28b48 <addLogicalDeviceName>
  //addClockObject();
  //addRegisterObject();
  addl1VoltageRegisterObject();
   28eb4:	f7ff fea2 	bl	28bfc <addl1VoltageRegisterObject>
  addl1CurrentRegisterObject();
   28eb8:	f7ff ff12 	bl	28ce0 <addl1CurrentRegisterObject>
  addl2VoltageRegisterObject();
   28ebc:	f7ff fec4 	bl	28c48 <addl2VoltageRegisterObject>
  addl2CurrentRegisterObject();
   28ec0:	f7ff ff34 	bl	28d2c <addl2CurrentRegisterObject>
  addl3VoltageRegisterObject();
   28ec4:	f7ff fee6 	bl	28c94 <addl3VoltageRegisterObject>
  addl3CurrentRegisterObject();
   28ec8:	f7ff ff56 	bl	28d78 <addl3CurrentRegisterObject>
  addKwhRegisterObject();
   28ecc:	f7ff ff7a 	bl	28dc4 <addKwhRegisterObject>
  addKvahRegisterObject();
   28ed0:	f7ff ff9e 	bl	28e10 <addKvahRegisterObject>
  addPfRegisterObject();
   28ed4:	f7ff fe6c 	bl	28bb0 <addPfRegisterObject>
  addAssociation();
   28ed8:	f7ff fe08 	bl	28aec <addAssociation>
  addlineFreq();	//rakesh
   28edc:	f7ff ffbe 	bl	28e5c <addlineFreq>
  oa_attach(&settings->base.objects, ALL_OBJECTS, sizeof(ALL_OBJECTS) / sizeof(ALL_OBJECTS[0]));
   28ee0:	687b      	ldr	r3, [r7, #4]
   28ee2:	3374      	adds	r3, #116	; 0x74
   28ee4:	220c      	movs	r2, #12
   28ee6:	4904      	ldr	r1, [pc, #16]	; (28ef8 <svr_InitObjects+0x50>)
   28ee8:	4618      	mov	r0, r3
   28eea:	f7f9 f895 	bl	22018 <oa_attach>
  return 0;
   28eee:	2300      	movs	r3, #0
}
   28ef0:	4618      	mov	r0, r3
   28ef2:	3708      	adds	r7, #8
   28ef4:	46bd      	mov	sp, r7
   28ef6:	bd80      	pop	{r7, pc}
   28ef8:	10000054 	.word	0x10000054

00028efc <svr_findObject>:
  dlmsSettings* settings,
  DLMS_OBJECT_TYPE objectType,
  int sn,
  unsigned char* ln,
  gxValueEventArg *e)
{
   28efc:	b480      	push	{r7}
   28efe:	b085      	sub	sp, #20
   28f00:	af00      	add	r7, sp, #0
   28f02:	60f8      	str	r0, [r7, #12]
   28f04:	607a      	str	r2, [r7, #4]
   28f06:	603b      	str	r3, [r7, #0]
   28f08:	460b      	mov	r3, r1
   28f0a:	817b      	strh	r3, [r7, #10]
  if (objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
   28f0c:	897b      	ldrh	r3, [r7, #10]
   28f0e:	2b0f      	cmp	r3, #15
   28f10:	d102      	bne.n	28f18 <svr_findObject+0x1c>
  {
    e->target = &association.base;
   28f12:	69bb      	ldr	r3, [r7, #24]
   28f14:	4a03      	ldr	r2, [pc, #12]	; (28f24 <svr_findObject+0x28>)
   28f16:	615a      	str	r2, [r3, #20]
  }
  return 0;
   28f18:	2300      	movs	r3, #0
}
   28f1a:	4618      	mov	r0, r3
   28f1c:	3714      	adds	r7, #20
   28f1e:	46bd      	mov	sp, r7
   28f20:	bc80      	pop	{r7}
   28f22:	4770      	bx	lr
   28f24:	100003c8 	.word	0x100003c8

00028f28 <svr_preRead>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_preRead(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   28f28:	b580      	push	{r7, lr}
   28f2a:	b086      	sub	sp, #24
   28f2c:	af00      	add	r7, sp, #0
   28f2e:	6078      	str	r0, [r7, #4]
   28f30:	6039      	str	r1, [r7, #0]
  gxValueEventArg *e;
  int ret, pos;
  DLMS_OBJECT_TYPE type;

  for (pos = 0; pos != args->size; ++pos)
   28f32:	2300      	movs	r3, #0
   28f34:	617b      	str	r3, [r7, #20]
   28f36:	e101      	b.n	2913c <svr_preRead+0x214>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
   28f38:	f107 0308 	add.w	r3, r7, #8
   28f3c:	461a      	mov	r2, r3
   28f3e:	6979      	ldr	r1, [r7, #20]
   28f40:	6838      	ldr	r0, [r7, #0]
   28f42:	f7f8 fbcb 	bl	216dc <vec_getByIndex>
   28f46:	6138      	str	r0, [r7, #16]
   28f48:	693b      	ldr	r3, [r7, #16]
   28f4a:	2b00      	cmp	r3, #0
   28f4c:	f040 80fe 	bne.w	2914c <svr_preRead+0x224>
    {
      return;
    }
    //Let framework handle Logical Name read.
    if (e->index == 1)
   28f50:	68bb      	ldr	r3, [r7, #8]
   28f52:	7e1b      	ldrb	r3, [r3, #24]
   28f54:	2b01      	cmp	r3, #1
   28f56:	f000 80eb 	beq.w	29130 <svr_preRead+0x208>
    {
      continue;
    }

    //Get target type.
    type = (DLMS_OBJECT_TYPE)e->target->objectType;
   28f5a:	68bb      	ldr	r3, [r7, #8]
   28f5c:	695b      	ldr	r3, [r3, #20]
   28f5e:	781b      	ldrb	r3, [r3, #0]
   28f60:	81fb      	strh	r3, [r7, #14]
    //Let Framework will handle Association objects and profile generic automatically.
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME ||
   28f62:	89fb      	ldrh	r3, [r7, #14]
   28f64:	2b0f      	cmp	r3, #15
   28f66:	f000 80e5 	beq.w	29134 <svr_preRead+0x20c>
   28f6a:	89fb      	ldrh	r3, [r7, #14]
   28f6c:	2b0c      	cmp	r3, #12
   28f6e:	f000 80e1 	beq.w	29134 <svr_preRead+0x20c>
    type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    {
      continue;
    }
    //Update value by one every time when user reads register.
    else if (e->target == &activePowerL1.base && e->index == 2)
   28f72:	68bb      	ldr	r3, [r7, #8]
   28f74:	695b      	ldr	r3, [r3, #20]
   28f76:	4a77      	ldr	r2, [pc, #476]	; (29154 <svr_preRead+0x22c>)
   28f78:	4293      	cmp	r3, r2
   28f7a:	d10f      	bne.n	28f9c <svr_preRead+0x74>
   28f7c:	68bb      	ldr	r3, [r7, #8]
   28f7e:	7e1b      	ldrb	r3, [r3, #24]
   28f80:	2b02      	cmp	r3, #2
   28f82:	d10b      	bne.n	28f9c <svr_preRead+0x74>
    {
    	//Call modbus kwh function here
//    	activePowerL1.value.dblVal = (double )readTotalActivePower();	//rakesh
    	activePowerL1.value.ulVal = (unsigned long )readTotalActivePower();
   28f84:	f7ff fa9e 	bl	284c4 <readTotalActivePower>
   28f88:	4602      	mov	r2, r0
   28f8a:	4b72      	ldr	r3, [pc, #456]	; (29154 <svr_preRead+0x22c>)
   28f8c:	619a      	str	r2, [r3, #24]
        //var_setUInt32(&activePowerL1.value, activePowerL1.value.ulVal + 1);
    	var_setUInt32(&activePowerL1.value, activePowerL1.value.ulVal);	//
   28f8e:	4b71      	ldr	r3, [pc, #452]	; (29154 <svr_preRead+0x22c>)
   28f90:	699b      	ldr	r3, [r3, #24]
   28f92:	4619      	mov	r1, r3
   28f94:	4870      	ldr	r0, [pc, #448]	; (29158 <svr_preRead+0x230>)
   28f96:	f7fc ffe7 	bl	25f68 <var_setUInt32>
   28f9a:	e0cc      	b.n	29136 <svr_preRead+0x20e>
    	//var_setDouble(&activePowerL1.value, activePowerL1.value.dblVal);	//rakesh
    }

    else if (e->target == &apparentPowerL1.base && e->index == 2)
   28f9c:	68bb      	ldr	r3, [r7, #8]
   28f9e:	695b      	ldr	r3, [r3, #20]
   28fa0:	4a6e      	ldr	r2, [pc, #440]	; (2915c <svr_preRead+0x234>)
   28fa2:	4293      	cmp	r3, r2
   28fa4:	d10f      	bne.n	28fc6 <svr_preRead+0x9e>
   28fa6:	68bb      	ldr	r3, [r7, #8]
   28fa8:	7e1b      	ldrb	r3, [r3, #24]
   28faa:	2b02      	cmp	r3, #2
   28fac:	d10b      	bne.n	28fc6 <svr_preRead+0x9e>
    {
    	 //Call modbus kvh function here
//    	  apparentPowerL1.value.dblVal = (double)readTotalApparentPower();	//rakesh
    	  apparentPowerL1.value.ulVal = (unsigned long)readTotalApparentPower();
   28fae:	f7ff fab9 	bl	28524 <readTotalApparentPower>
   28fb2:	4602      	mov	r2, r0
   28fb4:	4b69      	ldr	r3, [pc, #420]	; (2915c <svr_preRead+0x234>)
   28fb6:	619a      	str	r2, [r3, #24]
         //var_setUInt32(&apparentPowerL1.value, apparentPowerL1.value.ulVal + 1);
    	//var_setFloat(&apparentPowerL1.value, apparentPowerL1.value.fltVal);
//    	  var_setDouble(&apparentPowerL1.value, apparentPowerL1.value.dblVal);	//rakesh
    	  var_setUInt32(&apparentPowerL1.value, apparentPowerL1.value.ulVal);
   28fb8:	4b68      	ldr	r3, [pc, #416]	; (2915c <svr_preRead+0x234>)
   28fba:	699b      	ldr	r3, [r3, #24]
   28fbc:	4619      	mov	r1, r3
   28fbe:	4868      	ldr	r0, [pc, #416]	; (29160 <svr_preRead+0x238>)
   28fc0:	f7fc ffd2 	bl	25f68 <var_setUInt32>
   28fc4:	e0b7      	b.n	29136 <svr_preRead+0x20e>
    }
    else if(e->target == &liPowerFactor.base && e->index == 2)
   28fc6:	68bb      	ldr	r3, [r7, #8]
   28fc8:	695b      	ldr	r3, [r3, #20]
   28fca:	4a66      	ldr	r2, [pc, #408]	; (29164 <svr_preRead+0x23c>)
   28fcc:	4293      	cmp	r3, r2
   28fce:	d10f      	bne.n	28ff0 <svr_preRead+0xc8>
   28fd0:	68bb      	ldr	r3, [r7, #8]
   28fd2:	7e1b      	ldrb	r3, [r3, #24]
   28fd4:	2b02      	cmp	r3, #2
   28fd6:	d10b      	bne.n	28ff0 <svr_preRead+0xc8>
    {
//    	liPowerFactor.value.dblVal = (double) readTotalPowerFactor();	//rakesh
    	liPowerFactor.value.ulVal = (unsigned long) readTotalPowerFactor();
   28fd8:	f7ff fad4 	bl	28584 <readTotalPowerFactor>
   28fdc:	4602      	mov	r2, r0
   28fde:	4b61      	ldr	r3, [pc, #388]	; (29164 <svr_preRead+0x23c>)
   28fe0:	619a      	str	r2, [r3, #24]
//    	var_setDouble(&liPowerFactor.value, liPowerFactor.value.dblVal);	//rakesh
    	var_setUInt32(&liPowerFactor.value, liPowerFactor.value.ulVal);
   28fe2:	4b60      	ldr	r3, [pc, #384]	; (29164 <svr_preRead+0x23c>)
   28fe4:	699b      	ldr	r3, [r3, #24]
   28fe6:	4619      	mov	r1, r3
   28fe8:	485f      	ldr	r0, [pc, #380]	; (29168 <svr_preRead+0x240>)
   28fea:	f7fc ffbd 	bl	25f68 <var_setUInt32>
   28fee:	e0a2      	b.n	29136 <svr_preRead+0x20e>
    }
    else if (e->target == &l1InstCurrent.base && e->index == 2)
   28ff0:	68bb      	ldr	r3, [r7, #8]
   28ff2:	695b      	ldr	r3, [r3, #20]
   28ff4:	4a5d      	ldr	r2, [pc, #372]	; (2916c <svr_preRead+0x244>)
   28ff6:	4293      	cmp	r3, r2
   28ff8:	d111      	bne.n	2901e <svr_preRead+0xf6>
   28ffa:	68bb      	ldr	r3, [r7, #8]
   28ffc:	7e1b      	ldrb	r3, [r3, #24]
   28ffe:	2b02      	cmp	r3, #2
   29000:	d10d      	bne.n	2901e <svr_preRead+0xf6>
	{
    	 //Call modbus R phase current function here
//    	l1InstCurrent.value.dblVal = (double) readCurrent(CR_REG);	//rakesh
    	l1InstCurrent.value.ulVal = (unsigned long) readCurrent(CR_REG);
   29002:	f649 4047 	movw	r0, #40007	; 0x9c47
   29006:	f7ff fa29 	bl	2845c <readCurrent>
   2900a:	4602      	mov	r2, r0
   2900c:	4b57      	ldr	r3, [pc, #348]	; (2916c <svr_preRead+0x244>)
   2900e:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l1InstCurrent.value, l1InstCurrent.value.ulVal + 1);
//    	var_setDouble(&l1InstCurrent.value, l1InstCurrent.value.dblVal);	//rakesh
    	var_setUInt32(&l1InstCurrent.value, l1InstCurrent.value.ulVal);
   29010:	4b56      	ldr	r3, [pc, #344]	; (2916c <svr_preRead+0x244>)
   29012:	699b      	ldr	r3, [r3, #24]
   29014:	4619      	mov	r1, r3
   29016:	4856      	ldr	r0, [pc, #344]	; (29170 <svr_preRead+0x248>)
   29018:	f7fc ffa6 	bl	25f68 <var_setUInt32>
   2901c:	e08b      	b.n	29136 <svr_preRead+0x20e>
	}
    else if (e->target == &l2InstCurrent.base && e->index == 2)
   2901e:	68bb      	ldr	r3, [r7, #8]
   29020:	695b      	ldr	r3, [r3, #20]
   29022:	4a54      	ldr	r2, [pc, #336]	; (29174 <svr_preRead+0x24c>)
   29024:	4293      	cmp	r3, r2
   29026:	d111      	bne.n	2904c <svr_preRead+0x124>
   29028:	68bb      	ldr	r3, [r7, #8]
   2902a:	7e1b      	ldrb	r3, [r3, #24]
   2902c:	2b02      	cmp	r3, #2
   2902e:	d10d      	bne.n	2904c <svr_preRead+0x124>
	{
    	//Call modbus Y phase current function here
//    	l2InstCurrent.value.dblVal = (double) readCurrent(CY_REG);	//rakesh
    	l2InstCurrent.value.ulVal = (unsigned long) readCurrent(CY_REG);
   29030:	f649 4049 	movw	r0, #40009	; 0x9c49
   29034:	f7ff fa12 	bl	2845c <readCurrent>
   29038:	4602      	mov	r2, r0
   2903a:	4b4e      	ldr	r3, [pc, #312]	; (29174 <svr_preRead+0x24c>)
   2903c:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l2InstCurrent.value, l2InstCurrent.value.ulVal + 1);
//    	var_setDouble(&l2InstCurrent.value, l2InstCurrent.value.dblVal);	//rakesh
    	var_setUInt32(&l2InstCurrent.value, l2InstCurrent.value.ulVal);
   2903e:	4b4d      	ldr	r3, [pc, #308]	; (29174 <svr_preRead+0x24c>)
   29040:	699b      	ldr	r3, [r3, #24]
   29042:	4619      	mov	r1, r3
   29044:	484c      	ldr	r0, [pc, #304]	; (29178 <svr_preRead+0x250>)
   29046:	f7fc ff8f 	bl	25f68 <var_setUInt32>
   2904a:	e074      	b.n	29136 <svr_preRead+0x20e>
	}

    else if (e->target == &l3InstCurrent.base && e->index == 2)
   2904c:	68bb      	ldr	r3, [r7, #8]
   2904e:	695b      	ldr	r3, [r3, #20]
   29050:	4a4a      	ldr	r2, [pc, #296]	; (2917c <svr_preRead+0x254>)
   29052:	4293      	cmp	r3, r2
   29054:	d111      	bne.n	2907a <svr_preRead+0x152>
   29056:	68bb      	ldr	r3, [r7, #8]
   29058:	7e1b      	ldrb	r3, [r3, #24]
   2905a:	2b02      	cmp	r3, #2
   2905c:	d10d      	bne.n	2907a <svr_preRead+0x152>
	{
    	//Call modbus B phase current function here
//    	l3InstCurrent.value.dblVal = (double) readCurrent(CB_REG);	//rakesh
    	l3InstCurrent.value.ulVal = (unsigned long) readCurrent(CB_REG);
   2905e:	f649 404b 	movw	r0, #40011	; 0x9c4b
   29062:	f7ff f9fb 	bl	2845c <readCurrent>
   29066:	4602      	mov	r2, r0
   29068:	4b44      	ldr	r3, [pc, #272]	; (2917c <svr_preRead+0x254>)
   2906a:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l3InstCurrent.value, l3InstCurrent.value.ulVal + 1);
//    	var_setDouble(&l3InstCurrent.value, l3InstCurrent.value.dblVal);	//rakesh
    	var_setUInt32(&l3InstCurrent.value, l3InstCurrent.value.ulVal);
   2906c:	4b43      	ldr	r3, [pc, #268]	; (2917c <svr_preRead+0x254>)
   2906e:	699b      	ldr	r3, [r3, #24]
   29070:	4619      	mov	r1, r3
   29072:	4843      	ldr	r0, [pc, #268]	; (29180 <svr_preRead+0x258>)
   29074:	f7fc ff78 	bl	25f68 <var_setUInt32>
   29078:	e05d      	b.n	29136 <svr_preRead+0x20e>
	}

    else if (e->target == &l1InstVoltage.base && e->index == 2)
   2907a:	68bb      	ldr	r3, [r7, #8]
   2907c:	695b      	ldr	r3, [r3, #20]
   2907e:	4a41      	ldr	r2, [pc, #260]	; (29184 <svr_preRead+0x25c>)
   29080:	4293      	cmp	r3, r2
   29082:	d111      	bne.n	290a8 <svr_preRead+0x180>
   29084:	68bb      	ldr	r3, [r7, #8]
   29086:	7e1b      	ldrb	r3, [r3, #24]
   29088:	2b02      	cmp	r3, #2
   2908a:	d10d      	bne.n	290a8 <svr_preRead+0x180>
	{
    	//Call modbus R phase voltage function here
//    	l1InstVoltage.value.dblVal = (double)readVoltage(VR_REG);	//rakesh
    	l1InstVoltage.value.ulVal = (unsigned long)readVoltage(VR_REG);
   2908c:	f649 4041 	movw	r0, #40001	; 0x9c41
   29090:	f7ff f9aa 	bl	283e8 <readVoltage>
   29094:	4602      	mov	r2, r0
   29096:	4b3b      	ldr	r3, [pc, #236]	; (29184 <svr_preRead+0x25c>)
   29098:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l1InstVoltage.value, l1InstVoltage.value.ulVal + 1);
//    	var_setDouble(&l1InstVoltage.value, l1InstVoltage.value.dblVal);	//rakesh
    	var_setUInt32(&l1InstVoltage.value, l1InstVoltage.value.ulVal);
   2909a:	4b3a      	ldr	r3, [pc, #232]	; (29184 <svr_preRead+0x25c>)
   2909c:	699b      	ldr	r3, [r3, #24]
   2909e:	4619      	mov	r1, r3
   290a0:	4839      	ldr	r0, [pc, #228]	; (29188 <svr_preRead+0x260>)
   290a2:	f7fc ff61 	bl	25f68 <var_setUInt32>
   290a6:	e046      	b.n	29136 <svr_preRead+0x20e>
	}

    else if (e->target == &l2InstVoltage.base && e->index == 2)
   290a8:	68bb      	ldr	r3, [r7, #8]
   290aa:	695b      	ldr	r3, [r3, #20]
   290ac:	4a37      	ldr	r2, [pc, #220]	; (2918c <svr_preRead+0x264>)
   290ae:	4293      	cmp	r3, r2
   290b0:	d111      	bne.n	290d6 <svr_preRead+0x1ae>
   290b2:	68bb      	ldr	r3, [r7, #8]
   290b4:	7e1b      	ldrb	r3, [r3, #24]
   290b6:	2b02      	cmp	r3, #2
   290b8:	d10d      	bne.n	290d6 <svr_preRead+0x1ae>
	{
    	//Call modbus Y phase voltage function here
//    	l2InstVoltage.value.dblVal = (double)readVoltage(VY_REG);	//rakesh
    	l2InstVoltage.value.ulVal = (unsigned long)readVoltage(VY_REG);
   290ba:	f649 4043 	movw	r0, #40003	; 0x9c43
   290be:	f7ff f993 	bl	283e8 <readVoltage>
   290c2:	4602      	mov	r2, r0
   290c4:	4b31      	ldr	r3, [pc, #196]	; (2918c <svr_preRead+0x264>)
   290c6:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l2InstVoltage.value, l2InstVoltage.value.ulVal + 1);
//    	var_setDouble(&l2InstVoltage.value, l2InstVoltage.value.dblVal);	//rakesh
    	var_setUInt32(&l2InstVoltage.value, l2InstVoltage.value.ulVal);
   290c8:	4b30      	ldr	r3, [pc, #192]	; (2918c <svr_preRead+0x264>)
   290ca:	699b      	ldr	r3, [r3, #24]
   290cc:	4619      	mov	r1, r3
   290ce:	4830      	ldr	r0, [pc, #192]	; (29190 <svr_preRead+0x268>)
   290d0:	f7fc ff4a 	bl	25f68 <var_setUInt32>
   290d4:	e02f      	b.n	29136 <svr_preRead+0x20e>
	}

    else if (e->target == &l3InstVoltage.base && e->index == 2)
   290d6:	68bb      	ldr	r3, [r7, #8]
   290d8:	695b      	ldr	r3, [r3, #20]
   290da:	4a2e      	ldr	r2, [pc, #184]	; (29194 <svr_preRead+0x26c>)
   290dc:	4293      	cmp	r3, r2
   290de:	d111      	bne.n	29104 <svr_preRead+0x1dc>
   290e0:	68bb      	ldr	r3, [r7, #8]
   290e2:	7e1b      	ldrb	r3, [r3, #24]
   290e4:	2b02      	cmp	r3, #2
   290e6:	d10d      	bne.n	29104 <svr_preRead+0x1dc>
	{
    	//Call modbus B phase voltage function here
//    	l3InstVoltage.value.dblVal = (double)readVoltage(VB_REG);	//rakesh
    	l3InstVoltage.value.ulVal = (unsigned long)readVoltage(VB_REG);
   290e8:	f649 4045 	movw	r0, #40005	; 0x9c45
   290ec:	f7ff f97c 	bl	283e8 <readVoltage>
   290f0:	4602      	mov	r2, r0
   290f2:	4b28      	ldr	r3, [pc, #160]	; (29194 <svr_preRead+0x26c>)
   290f4:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l3InstVoltage.value, l3InstVoltage.value.ulVal + 1);
//    	var_setDouble(&l3InstVoltage.value, l3InstVoltage.value.dblVal);	//rakesh
    	var_setUInt32(&l3InstVoltage.value, l3InstVoltage.value.ulVal);
   290f6:	4b27      	ldr	r3, [pc, #156]	; (29194 <svr_preRead+0x26c>)
   290f8:	699b      	ldr	r3, [r3, #24]
   290fa:	4619      	mov	r1, r3
   290fc:	4826      	ldr	r0, [pc, #152]	; (29198 <svr_preRead+0x270>)
   290fe:	f7fc ff33 	bl	25f68 <var_setUInt32>
   29102:	e018      	b.n	29136 <svr_preRead+0x20e>
      e->handled = true;
     // time_now(&((gxClock*)e->target)->time);
    }
#endif
    //line Frequency
    else if (e->target == &lineFreq.base && e->index == 2)
   29104:	68bb      	ldr	r3, [r7, #8]
   29106:	695b      	ldr	r3, [r3, #20]
   29108:	4a24      	ldr	r2, [pc, #144]	; (2919c <svr_preRead+0x274>)
   2910a:	4293      	cmp	r3, r2
   2910c:	d113      	bne.n	29136 <svr_preRead+0x20e>
   2910e:	68bb      	ldr	r3, [r7, #8]
   29110:	7e1b      	ldrb	r3, [r3, #24]
   29112:	2b02      	cmp	r3, #2
   29114:	d10f      	bne.n	29136 <svr_preRead+0x20e>
	{
    	//Call modbus B phase voltage function here
//    	l3InstVoltage.value.dblVal = (double)readVoltage(VB_REG);	//rakesh
    	lineFreq.value.ulVal = (unsigned long)readLineFrequency();
   29116:	f7ff fa65 	bl	285e4 <readLineFrequency>
   2911a:	4603      	mov	r3, r0
   2911c:	461a      	mov	r2, r3
   2911e:	4b1f      	ldr	r3, [pc, #124]	; (2919c <svr_preRead+0x274>)
   29120:	619a      	str	r2, [r3, #24]
		 //var_setUInt32(&l3InstVoltage.value, l3InstVoltage.value.ulVal + 1);
//    	var_setDouble(&l3InstVoltage.value, l3InstVoltage.value.dblVal);	//rakesh
    	var_setUInt32(&lineFreq.value, lineFreq.value.ulVal);
   29122:	4b1e      	ldr	r3, [pc, #120]	; (2919c <svr_preRead+0x274>)
   29124:	699b      	ldr	r3, [r3, #24]
   29126:	4619      	mov	r1, r3
   29128:	481d      	ldr	r0, [pc, #116]	; (291a0 <svr_preRead+0x278>)
   2912a:	f7fc ff1d 	bl	25f68 <var_setUInt32>
   2912e:	e002      	b.n	29136 <svr_preRead+0x20e>
      return;
    }
    //Let framework handle Logical Name read.
    if (e->index == 1)
    {
      continue;
   29130:	bf00      	nop
   29132:	e000      	b.n	29136 <svr_preRead+0x20e>
    type = (DLMS_OBJECT_TYPE)e->target->objectType;
    //Let Framework will handle Association objects and profile generic automatically.
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME ||
    type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    {
      continue;
   29134:	bf00      	nop
{
  gxValueEventArg *e;
  int ret, pos;
  DLMS_OBJECT_TYPE type;

  for (pos = 0; pos != args->size; ++pos)
   29136:	697b      	ldr	r3, [r7, #20]
   29138:	3301      	adds	r3, #1
   2913a:	617b      	str	r3, [r7, #20]
   2913c:	683b      	ldr	r3, [r7, #0]
   2913e:	795b      	ldrb	r3, [r3, #5]
   29140:	461a      	mov	r2, r3
   29142:	697b      	ldr	r3, [r7, #20]
   29144:	429a      	cmp	r2, r3
   29146:	f47f aef7 	bne.w	28f38 <svr_preRead+0x10>
   2914a:	e000      	b.n	2914e <svr_preRead+0x226>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
    {
      return;
   2914c:	bf00      	nop
		 //var_setUInt32(&l3InstVoltage.value, l3InstVoltage.value.ulVal + 1);
//    	var_setDouble(&l3InstVoltage.value, l3InstVoltage.value.dblVal);	//rakesh
    	var_setUInt32(&lineFreq.value, lineFreq.value.ulVal);
	}
  }
}
   2914e:	3718      	adds	r7, #24
   29150:	46bd      	mov	sp, r7
   29152:	bd80      	pop	{r7, pc}
   29154:	10000448 	.word	0x10000448
   29158:	10000458 	.word	0x10000458
   2915c:	10000470 	.word	0x10000470
   29160:	10000480 	.word	0x10000480
   29164:	10000498 	.word	0x10000498
   29168:	100004a8 	.word	0x100004a8
   2916c:	10000538 	.word	0x10000538
   29170:	10000548 	.word	0x10000548
   29174:	10000560 	.word	0x10000560
   29178:	10000570 	.word	0x10000570
   2917c:	10000588 	.word	0x10000588
   29180:	10000598 	.word	0x10000598
   29184:	100004c0 	.word	0x100004c0
   29188:	100004d0 	.word	0x100004d0
   2918c:	100004e8 	.word	0x100004e8
   29190:	100004f8 	.word	0x100004f8
   29194:	10000510 	.word	0x10000510
   29198:	10000520 	.word	0x10000520
   2919c:	100005b0 	.word	0x100005b0
   291a0:	100005c0 	.word	0x100005c0

000291a4 <svr_preWrite>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_preWrite(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   291a4:	b580      	push	{r7, lr}
   291a6:	b084      	sub	sp, #16
   291a8:	af00      	add	r7, sp, #0
   291aa:	6078      	str	r0, [r7, #4]
   291ac:	6039      	str	r1, [r7, #0]
  gxValueEventArg *e;
  int pos;
  for (pos = 0; pos != args->size; ++pos)
   291ae:	2300      	movs	r3, #0
   291b0:	60fb      	str	r3, [r7, #12]
   291b2:	e00c      	b.n	291ce <svr_preWrite+0x2a>
  {
    if (vec_getByIndex(args, pos, &e) != 0)
   291b4:	f107 0308 	add.w	r3, r7, #8
   291b8:	461a      	mov	r2, r3
   291ba:	68f9      	ldr	r1, [r7, #12]
   291bc:	6838      	ldr	r0, [r7, #0]
   291be:	f7f8 fa8d 	bl	216dc <vec_getByIndex>
   291c2:	4603      	mov	r3, r0
   291c4:	2b00      	cmp	r3, #0
   291c6:	d109      	bne.n	291dc <svr_preWrite+0x38>
dlmsSettings* settings,
  gxValueEventCollection* args)
{
  gxValueEventArg *e;
  int pos;
  for (pos = 0; pos != args->size; ++pos)
   291c8:	68fb      	ldr	r3, [r7, #12]
   291ca:	3301      	adds	r3, #1
   291cc:	60fb      	str	r3, [r7, #12]
   291ce:	683b      	ldr	r3, [r7, #0]
   291d0:	795b      	ldrb	r3, [r3, #5]
   291d2:	461a      	mov	r2, r3
   291d4:	68fb      	ldr	r3, [r7, #12]
   291d6:	429a      	cmp	r2, r3
   291d8:	d1ec      	bne.n	291b4 <svr_preWrite+0x10>
    {
      //started = _impl_k_uptime_get();
    }
#endif
  }
}
   291da:	e000      	b.n	291de <svr_preWrite+0x3a>
  int pos;
  for (pos = 0; pos != args->size; ++pos)
  {
    if (vec_getByIndex(args, pos, &e) != 0)
    {
      break;
   291dc:	bf00      	nop
    {
      //started = _impl_k_uptime_get();
    }
#endif
  }
}
   291de:	bf00      	nop
   291e0:	3710      	adds	r7, #16
   291e2:	46bd      	mov	sp, r7
   291e4:	bd80      	pop	{r7, pc}
   291e6:	bf00      	nop

000291e8 <svr_preAction>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_preAction(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   291e8:	b580      	push	{r7, lr}
   291ea:	b086      	sub	sp, #24
   291ec:	af00      	add	r7, sp, #0
   291ee:	6078      	str	r0, [r7, #4]
   291f0:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
  char str[25];
#endif
  gxValueEventArg *e;
  int ret, pos;
  for (pos = 0; pos != args->size; ++pos)
   291f2:	2300      	movs	r3, #0
   291f4:	617b      	str	r3, [r7, #20]
   291f6:	e00d      	b.n	29214 <svr_preAction+0x2c>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
   291f8:	f107 030c 	add.w	r3, r7, #12
   291fc:	461a      	mov	r2, r3
   291fe:	6979      	ldr	r1, [r7, #20]
   29200:	6838      	ldr	r0, [r7, #0]
   29202:	f7f8 fa6b 	bl	216dc <vec_getByIndex>
   29206:	6138      	str	r0, [r7, #16]
   29208:	693b      	ldr	r3, [r7, #16]
   2920a:	2b00      	cmp	r3, #0
   2920c:	d109      	bne.n	29222 <svr_preAction+0x3a>
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
  char str[25];
#endif
  gxValueEventArg *e;
  int ret, pos;
  for (pos = 0; pos != args->size; ++pos)
   2920e:	697b      	ldr	r3, [r7, #20]
   29210:	3301      	adds	r3, #1
   29212:	617b      	str	r3, [r7, #20]
   29214:	683b      	ldr	r3, [r7, #0]
   29216:	795b      	ldrb	r3, [r3, #5]
   29218:	461a      	mov	r2, r3
   2921a:	697b      	ldr	r3, [r7, #20]
   2921c:	429a      	cmp	r2, r3
   2921e:	d1eb      	bne.n	291f8 <svr_preAction+0x10>
   29220:	e000      	b.n	29224 <svr_preAction+0x3c>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
    {
            return;
   29222:	bf00      	nop
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
    hlp_getLogicalNameToString(e->target->logicalName, str);
    printf("Action %s:%d\n", str, e->index);
#endif
  }
}
   29224:	3718      	adds	r7, #24
   29226:	46bd      	mov	sp, r7
   29228:	bd80      	pop	{r7, pc}
   2922a:	bf00      	nop

0002922c <svr_postRead>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_postRead(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   2922c:	b480      	push	{r7}
   2922e:	b083      	sub	sp, #12
   29230:	af00      	add	r7, sp, #0
   29232:	6078      	str	r0, [r7, #4]
   29234:	6039      	str	r1, [r7, #0]
}
   29236:	bf00      	nop
   29238:	370c      	adds	r7, #12
   2923a:	46bd      	mov	sp, r7
   2923c:	bc80      	pop	{r7}
   2923e:	4770      	bx	lr

00029240 <svr_postWrite>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_postWrite(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   29240:	b480      	push	{r7}
   29242:	b083      	sub	sp, #12
   29244:	af00      	add	r7, sp, #0
   29246:	6078      	str	r0, [r7, #4]
   29248:	6039      	str	r1, [r7, #0]
}
   2924a:	bf00      	nop
   2924c:	370c      	adds	r7, #12
   2924e:	46bd      	mov	sp, r7
   29250:	bc80      	pop	{r7}
   29252:	4770      	bx	lr

00029254 <svr_postAction>:
//
/////////////////////////////////////////////////////////////////////////////
void svr_postAction(
dlmsSettings* settings,
  gxValueEventCollection* args)
{
   29254:	b580      	push	{r7, lr}
   29256:	b086      	sub	sp, #24
   29258:	af00      	add	r7, sp, #0
   2925a:	6078      	str	r0, [r7, #4]
   2925c:	6039      	str	r1, [r7, #0]
  gxValueEventArg *e;
  int ret, pos;
  for (pos = 0; pos != args->size; ++pos)
   2925e:	2300      	movs	r3, #0
   29260:	617b      	str	r3, [r7, #20]
   29262:	e00d      	b.n	29280 <svr_postAction+0x2c>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
   29264:	f107 030c 	add.w	r3, r7, #12
   29268:	461a      	mov	r2, r3
   2926a:	6979      	ldr	r1, [r7, #20]
   2926c:	6838      	ldr	r0, [r7, #0]
   2926e:	f7f8 fa35 	bl	216dc <vec_getByIndex>
   29272:	6138      	str	r0, [r7, #16]
   29274:	693b      	ldr	r3, [r7, #16]
   29276:	2b00      	cmp	r3, #0
   29278:	d109      	bne.n	2928e <svr_postAction+0x3a>
dlmsSettings* settings,
  gxValueEventCollection* args)
{
  gxValueEventArg *e;
  int ret, pos;
  for (pos = 0; pos != args->size; ++pos)
   2927a:	697b      	ldr	r3, [r7, #20]
   2927c:	3301      	adds	r3, #1
   2927e:	617b      	str	r3, [r7, #20]
   29280:	683b      	ldr	r3, [r7, #0]
   29282:	795b      	ldrb	r3, [r3, #5]
   29284:	461a      	mov	r2, r3
   29286:	697b      	ldr	r3, [r7, #20]
   29288:	429a      	cmp	r2, r3
   2928a:	d1eb      	bne.n	29264 <svr_postAction+0x10>
   2928c:	e000      	b.n	29290 <svr_postAction+0x3c>
  {
    if ((ret = vec_getByIndex(args, pos, &e)) != 0)
    {
      return;
   2928e:	bf00      	nop
    }
  }
}
   29290:	3718      	adds	r7, #24
   29292:	46bd      	mov	sp, r7
   29294:	bd80      	pop	{r7, pc}
   29296:	bf00      	nop

00029298 <svr_isTarget>:

unsigned char svr_isTarget(
	dlmsSettings *settings,
	unsigned long serverAddress,
	unsigned long clientAddress)
{
   29298:	b480      	push	{r7}
   2929a:	b085      	sub	sp, #20
   2929c:	af00      	add	r7, sp, #0
   2929e:	60f8      	str	r0, [r7, #12]
   292a0:	60b9      	str	r1, [r7, #8]
   292a2:	607a      	str	r2, [r7, #4]
  //Check server address using serial number.
  if ((serverAddress & 0x3FFF) == SERIAL_NUMBER % 10000 + 1000)
   292a4:	68bb      	ldr	r3, [r7, #8]
   292a6:	f3c3 010d 	ubfx	r1, r3, #0, #14
   292aa:	4b17      	ldr	r3, [pc, #92]	; (29308 <svr_isTarget+0x70>)
   292ac:	681a      	ldr	r2, [r3, #0]
   292ae:	4b17      	ldr	r3, [pc, #92]	; (2930c <svr_isTarget+0x74>)
   292b0:	fba3 0302 	umull	r0, r3, r3, r2
   292b4:	0b5b      	lsrs	r3, r3, #13
   292b6:	f242 7010 	movw	r0, #10000	; 0x2710
   292ba:	fb00 f303 	mul.w	r3, r0, r3
   292be:	1ad3      	subs	r3, r2, r3
   292c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   292c4:	4299      	cmp	r1, r3
   292c6:	d101      	bne.n	292cc <svr_isTarget+0x34>
  {
      return 1;
   292c8:	2301      	movs	r3, #1
   292ca:	e018      	b.n	292fe <svr_isTarget+0x66>
  }
  //Check server address with two bytes.
  if ((serverAddress & 0xFFFF0000) == 0 && (serverAddress & 0x7FFF) == 1)
   292cc:	68bb      	ldr	r3, [r7, #8]
   292ce:	0c1b      	lsrs	r3, r3, #16
   292d0:	041b      	lsls	r3, r3, #16
   292d2:	2b00      	cmp	r3, #0
   292d4:	d106      	bne.n	292e4 <svr_isTarget+0x4c>
   292d6:	68bb      	ldr	r3, [r7, #8]
   292d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
   292dc:	2b01      	cmp	r3, #1
   292de:	d101      	bne.n	292e4 <svr_isTarget+0x4c>
  {
    return 1;
   292e0:	2301      	movs	r3, #1
   292e2:	e00c      	b.n	292fe <svr_isTarget+0x66>
  }
  //Check server address with one byte.
  if ((serverAddress & 0xFFFFFF00) == 0 && (serverAddress & 0x7F) == 1)
   292e4:	68bb      	ldr	r3, [r7, #8]
   292e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   292ea:	2b00      	cmp	r3, #0
   292ec:	d106      	bne.n	292fc <svr_isTarget+0x64>
   292ee:	68bb      	ldr	r3, [r7, #8]
   292f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   292f4:	2b01      	cmp	r3, #1
   292f6:	d101      	bne.n	292fc <svr_isTarget+0x64>
  {
    return 1;
   292f8:	2301      	movs	r3, #1
   292fa:	e000      	b.n	292fe <svr_isTarget+0x66>
  }
  return 0;
   292fc:	2300      	movs	r3, #0
}
   292fe:	4618      	mov	r0, r3
   29300:	3714      	adds	r7, #20
   29302:	46bd      	mov	sp, r7
   29304:	bc80      	pop	{r7}
   29306:	4770      	bx	lr
   29308:	10000050 	.word	0x10000050
   2930c:	d1b71759 	.word	0xd1b71759

00029310 <svr_validateAuthentication>:

DLMS_SOURCE_DIAGNOSTIC svr_validateAuthentication(
dlmsServerSettings* settings,
DLMS_AUTHENTICATION authentication,
gxByteBuffer* password)
{
   29310:	b480      	push	{r7}
   29312:	b085      	sub	sp, #20
   29314:	af00      	add	r7, sp, #0
   29316:	60f8      	str	r0, [r7, #12]
   29318:	460b      	mov	r3, r1
   2931a:	607a      	str	r2, [r7, #4]
   2931c:	72fb      	strb	r3, [r7, #11]
  if (authentication == DLMS_AUTHENTICATION_NONE)
   2931e:	7afb      	ldrb	r3, [r7, #11]
   29320:	2b00      	cmp	r3, #0
   29322:	d101      	bne.n	29328 <svr_validateAuthentication+0x18>
  {
    //Uncomment this if authentication is always required.
    //return DLMS_SOURCE_DIAGNOSTIC_AUTHENTICATION_MECHANISM_NAME_REQUIRED;
    return DLMS_SOURCE_DIAGNOSTIC_NONE;
   29324:	2300      	movs	r3, #0
   29326:	e000      	b.n	2932a <svr_validateAuthentication+0x1a>
  }
  //Uncomment this if only authentication None is supported.
  //return DLMS_SOURCE_DIAGNOSTIC_NO_REASON_GIVEN;
  return DLMS_SOURCE_DIAGNOSTIC_NONE;
   29328:	2300      	movs	r3, #0
}
   2932a:	4618      	mov	r0, r3
   2932c:	3714      	adds	r7, #20
   2932e:	46bd      	mov	sp, r7
   29330:	bc80      	pop	{r7}
   29332:	4770      	bx	lr

00029334 <svr_getAttributeAccess>:
*/
DLMS_ACCESS_MODE svr_getAttributeAccess(
dlmsSettings *settings,
gxObject *obj,
unsigned char index)
{
   29334:	b480      	push	{r7}
   29336:	b085      	sub	sp, #20
   29338:	af00      	add	r7, sp, #0
   2933a:	60f8      	str	r0, [r7, #12]
   2933c:	60b9      	str	r1, [r7, #8]
   2933e:	4613      	mov	r3, r2
   29340:	71fb      	strb	r3, [r7, #7]
  if (index == 1)
   29342:	79fb      	ldrb	r3, [r7, #7]
   29344:	2b01      	cmp	r3, #1
   29346:	d101      	bne.n	2934c <svr_getAttributeAccess+0x18>
  {
    return DLMS_ACCESS_MODE_READ;
   29348:	2301      	movs	r3, #1
   2934a:	e014      	b.n	29376 <svr_getAttributeAccess+0x42>
  }
  // Only read is allowed
  if (settings->authentication == DLMS_AUTHENTICATION_NONE)
   2934c:	68fb      	ldr	r3, [r7, #12]
   2934e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   29352:	2b00      	cmp	r3, #0
   29354:	d101      	bne.n	2935a <svr_getAttributeAccess+0x26>
  {
    return DLMS_ACCESS_MODE_READ;
   29356:	2301      	movs	r3, #1
   29358:	e00d      	b.n	29376 <svr_getAttributeAccess+0x42>
  }
  // Only clock write is allowed.
  if (settings->authentication == DLMS_AUTHENTICATION_LOW)
   2935a:	68fb      	ldr	r3, [r7, #12]
   2935c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   29360:	2b01      	cmp	r3, #1
   29362:	d107      	bne.n	29374 <svr_getAttributeAccess+0x40>
  {
    if (obj->objectType == DLMS_OBJECT_TYPE_CLOCK)
   29364:	68bb      	ldr	r3, [r7, #8]
   29366:	781b      	ldrb	r3, [r3, #0]
   29368:	2b08      	cmp	r3, #8
   2936a:	d101      	bne.n	29370 <svr_getAttributeAccess+0x3c>
    {
      return DLMS_ACCESS_MODE_READ_WRITE;
   2936c:	2303      	movs	r3, #3
   2936e:	e002      	b.n	29376 <svr_getAttributeAccess+0x42>
    }
    return DLMS_ACCESS_MODE_READ;
   29370:	2301      	movs	r3, #1
   29372:	e000      	b.n	29376 <svr_getAttributeAccess+0x42>
  }
  // All writes are allowed.
  return DLMS_ACCESS_MODE_READ_WRITE;
   29374:	2303      	movs	r3, #3
}
   29376:	4618      	mov	r0, r3
   29378:	3714      	adds	r7, #20
   2937a:	46bd      	mov	sp, r7
   2937c:	bc80      	pop	{r7}
   2937e:	4770      	bx	lr

00029380 <svr_getMethodAccess>:
*/
DLMS_METHOD_ACCESS_MODE svr_getMethodAccess(
dlmsSettings *settings,
gxObject *obj,
unsigned char index)
{
   29380:	b480      	push	{r7}
   29382:	b085      	sub	sp, #20
   29384:	af00      	add	r7, sp, #0
   29386:	60f8      	str	r0, [r7, #12]
   29388:	60b9      	str	r1, [r7, #8]
   2938a:	4613      	mov	r3, r2
   2938c:	71fb      	strb	r3, [r7, #7]
  // Methods are not allowed.
  if (settings->authentication == DLMS_AUTHENTICATION_NONE)
   2938e:	68fb      	ldr	r3, [r7, #12]
   29390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   29394:	2b00      	cmp	r3, #0
   29396:	d101      	bne.n	2939c <svr_getMethodAccess+0x1c>
  {
    return DLMS_METHOD_ACCESS_MODE_NONE;
   29398:	2300      	movs	r3, #0
   2939a:	e00d      	b.n	293b8 <svr_getMethodAccess+0x38>
  }
  // Only clock methods are allowed.
  if (settings->authentication == DLMS_AUTHENTICATION_LOW)
   2939c:	68fb      	ldr	r3, [r7, #12]
   2939e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   293a2:	2b01      	cmp	r3, #1
   293a4:	d107      	bne.n	293b6 <svr_getMethodAccess+0x36>
  {
    if (obj->objectType == DLMS_OBJECT_TYPE_CLOCK)
   293a6:	68bb      	ldr	r3, [r7, #8]
   293a8:	781b      	ldrb	r3, [r3, #0]
   293aa:	2b08      	cmp	r3, #8
   293ac:	d101      	bne.n	293b2 <svr_getMethodAccess+0x32>
    {
      return DLMS_METHOD_ACCESS_MODE_ACCESS;
   293ae:	2301      	movs	r3, #1
   293b0:	e002      	b.n	293b8 <svr_getMethodAccess+0x38>
    }
    return DLMS_METHOD_ACCESS_MODE_NONE;
   293b2:	2300      	movs	r3, #0
   293b4:	e000      	b.n	293b8 <svr_getMethodAccess+0x38>
  }
  return DLMS_METHOD_ACCESS_MODE_ACCESS;
   293b6:	2301      	movs	r3, #1
}
   293b8:	4618      	mov	r0, r3
   293ba:	3714      	adds	r7, #20
   293bc:	46bd      	mov	sp, r7
   293be:	bc80      	pop	{r7}
   293c0:	4770      	bx	lr
   293c2:	bf00      	nop

000293c4 <svr_connected>:
/////////////////////////////////////////////////////////////////////////////
//Client has made connection to the server.
/////////////////////////////////////////////////////////////////////////////
int svr_connected(
  dlmsServerSettings *settings)
{
   293c4:	b480      	push	{r7}
   293c6:	b083      	sub	sp, #12
   293c8:	af00      	add	r7, sp, #0
   293ca:	6078      	str	r0, [r7, #4]
  return 0;
   293cc:	2300      	movs	r3, #0
}
   293ce:	4618      	mov	r0, r3
   293d0:	370c      	adds	r7, #12
   293d2:	46bd      	mov	sp, r7
   293d4:	bc80      	pop	{r7}
   293d6:	4770      	bx	lr

000293d8 <svr_invalidConnection>:
* @param connectionInfo
*            Connection information.
*/
int svr_invalidConnection(
  dlmsServerSettings *settings)
{
   293d8:	b480      	push	{r7}
   293da:	b083      	sub	sp, #12
   293dc:	af00      	add	r7, sp, #0
   293de:	6078      	str	r0, [r7, #4]
  return 0;
   293e0:	2300      	movs	r3, #0
}
   293e2:	4618      	mov	r0, r3
   293e4:	370c      	adds	r7, #12
   293e6:	46bd      	mov	sp, r7
   293e8:	bc80      	pop	{r7}
   293ea:	4770      	bx	lr

000293ec <svr_disconnected>:
/////////////////////////////////////////////////////////////////////////////
// Client has close the connection.
/////////////////////////////////////////////////////////////////////////////
int svr_disconnected(
  dlmsServerSettings *settings)
{
   293ec:	b480      	push	{r7}
   293ee:	b083      	sub	sp, #12
   293f0:	af00      	add	r7, sp, #0
   293f2:	6078      	str	r0, [r7, #4]
  return 0;
   293f4:	2300      	movs	r3, #0
}
   293f6:	4618      	mov	r0, r3
   293f8:	370c      	adds	r7, #12
   293fa:	46bd      	mov	sp, r7
   293fc:	bc80      	pop	{r7}
   293fe:	4770      	bx	lr

00029400 <UART3_IRQHandler>:
gxValueEventCollection* args)
{
}

void UART3_IRQHandler (void)
{
   29400:	b580      	push	{r7, lr}
   29402:	b082      	sub	sp, #8
   29404:	af00      	add	r7, sp, #0
  uint8_t IIRValue, LSRValue;
  uint8_t Dummy = Dummy;

  IIRValue = LPC_UART3->IIR;
   29406:	4b49      	ldr	r3, [pc, #292]	; (2952c <UART3_IRQHandler+0x12c>)
   29408:	689b      	ldr	r3, [r3, #8]
   2940a:	71bb      	strb	r3, [r7, #6]

  IIRValue >>= 1;			/* skip pending bit in IIR */
   2940c:	79bb      	ldrb	r3, [r7, #6]
   2940e:	085b      	lsrs	r3, r3, #1
   29410:	71bb      	strb	r3, [r7, #6]
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
   29412:	79bb      	ldrb	r3, [r7, #6]
   29414:	f003 0307 	and.w	r3, r3, #7
   29418:	71bb      	strb	r3, [r7, #6]
  if ( IIRValue == IIR_RLS )		/* Receive Line Status */
   2941a:	79bb      	ldrb	r3, [r7, #6]
   2941c:	2b03      	cmp	r3, #3
   2941e:	d13b      	bne.n	29498 <UART3_IRQHandler+0x98>
  {
	LSRValue = LPC_UART3->LSR;
   29420:	4b42      	ldr	r3, [pc, #264]	; (2952c <UART3_IRQHandler+0x12c>)
   29422:	7d1b      	ldrb	r3, [r3, #20]
   29424:	717b      	strb	r3, [r7, #5]
	/* Receive Line Status */
	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
   29426:	797b      	ldrb	r3, [r7, #5]
   29428:	f003 039e 	and.w	r3, r3, #158	; 0x9e
   2942c:	2b00      	cmp	r3, #0
   2942e:	d006      	beq.n	2943e <UART3_IRQHandler+0x3e>
	{
	  /* There are errors or break interrupt */
	  /* Read LSR will clear the interrupt */
	  UART3Status = LSRValue;
   29430:	797b      	ldrb	r3, [r7, #5]
   29432:	4a3f      	ldr	r2, [pc, #252]	; (29530 <UART3_IRQHandler+0x130>)
   29434:	6013      	str	r3, [r2, #0]
	  Dummy = LPC_UART3->RBR;		/* Dummy read on RX to clear
   29436:	4b3d      	ldr	r3, [pc, #244]	; (2952c <UART3_IRQHandler+0x12c>)
   29438:	781b      	ldrb	r3, [r3, #0]
   2943a:	71fb      	strb	r3, [r7, #7]
							interrupt, then bail out */
	  return;
   2943c:	e073      	b.n	29526 <UART3_IRQHandler+0x126>
	}
	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */
   2943e:	797b      	ldrb	r3, [r7, #5]
   29440:	f003 0301 	and.w	r3, r3, #1
   29444:	2b00      	cmp	r3, #0
   29446:	d06e      	beq.n	29526 <UART3_IRQHandler+0x126>
	  //if ( UART3Count == BUFSIZE )
	  //{
		//UART3Count = 0;		/* buffer overflow */
	  //}
		/* Receive Data Available */
		uint8_t ch = (uint8_t) LPC_UART3->RBR;
   29448:	4b38      	ldr	r3, [pc, #224]	; (2952c <UART3_IRQHandler+0x12c>)
   2944a:	781b      	ldrb	r3, [r3, #0]
   2944c:	713b      	strb	r3, [r7, #4]

		UART3Buffer[UART3Count] = ch;
   2944e:	4b39      	ldr	r3, [pc, #228]	; (29534 <UART3_IRQHandler+0x134>)
   29450:	681b      	ldr	r3, [r3, #0]
   29452:	4939      	ldr	r1, [pc, #228]	; (29538 <UART3_IRQHandler+0x138>)
   29454:	793a      	ldrb	r2, [r7, #4]
   29456:	54ca      	strb	r2, [r1, r3]
		UART3Count++;
   29458:	4b36      	ldr	r3, [pc, #216]	; (29534 <UART3_IRQHandler+0x134>)
   2945a:	681b      	ldr	r3, [r3, #0]
   2945c:	3301      	adds	r3, #1
   2945e:	4a35      	ldr	r2, [pc, #212]	; (29534 <UART3_IRQHandler+0x134>)
   29460:	6013      	str	r3, [r2, #0]
		if ( UART3Count == BUFSIZE )
   29462:	4b34      	ldr	r3, [pc, #208]	; (29534 <UART3_IRQHandler+0x134>)
   29464:	681b      	ldr	r3, [r3, #0]
   29466:	2b40      	cmp	r3, #64	; 0x40
   29468:	d102      	bne.n	29470 <UART3_IRQHandler+0x70>
		{
				UART3Count = 0;		/* buffer overflow */
   2946a:	4b32      	ldr	r3, [pc, #200]	; (29534 <UART3_IRQHandler+0x134>)
   2946c:	2200      	movs	r2, #0
   2946e:	601a      	str	r2, [r3, #0]
		}

		if (svr_handleRequest3(&settings, (unsigned char)ch, &reply) != 0)
   29470:	793b      	ldrb	r3, [r7, #4]
   29472:	4a32      	ldr	r2, [pc, #200]	; (2953c <UART3_IRQHandler+0x13c>)
   29474:	4619      	mov	r1, r3
   29476:	4832      	ldr	r0, [pc, #200]	; (29540 <UART3_IRQHandler+0x140>)
   29478:	f7fc f9f6 	bl	25868 <svr_handleRequest3>
   2947c:	4603      	mov	r3, r0
   2947e:	2b00      	cmp	r3, #0
   29480:	d002      	beq.n	29488 <UART3_IRQHandler+0x88>
		{
			bb_clear(&reply);
   29482:	482e      	ldr	r0, [pc, #184]	; (2953c <UART3_IRQHandler+0x13c>)
   29484:	f7da f96e 	bl	3764 <bb_clear>
		}

		if (reply.size != 0)
   29488:	4b2c      	ldr	r3, [pc, #176]	; (2953c <UART3_IRQHandler+0x13c>)
   2948a:	88db      	ldrh	r3, [r3, #6]
   2948c:	2b00      	cmp	r3, #0
   2948e:	d04a      	beq.n	29526 <UART3_IRQHandler+0x126>
		{
			  //Send reply.
		  //for (size_t i = 0; i < reply.size; i++) {
		   //uart_poll_out(uart_dev, reply.data[i]);
			sendReply = 1;
   29490:	4b2c      	ldr	r3, [pc, #176]	; (29544 <UART3_IRQHandler+0x144>)
   29492:	2201      	movs	r2, #1
   29494:	701a      	strb	r2, [r3, #0]
   29496:	e046      	b.n	29526 <UART3_IRQHandler+0x126>
		}

	}
  }
  else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
   29498:	79bb      	ldrb	r3, [r7, #6]
   2949a:	2b02      	cmp	r3, #2
   2949c:	d127      	bne.n	294ee <UART3_IRQHandler+0xee>
  {
	/* Receive Data Available */
	uint8_t ch = (uint8_t) LPC_UART3->RBR;
   2949e:	4b23      	ldr	r3, [pc, #140]	; (2952c <UART3_IRQHandler+0x12c>)
   294a0:	781b      	ldrb	r3, [r3, #0]
   294a2:	70fb      	strb	r3, [r7, #3]

	 UART3Buffer[UART3Count] = ch;
   294a4:	4b23      	ldr	r3, [pc, #140]	; (29534 <UART3_IRQHandler+0x134>)
   294a6:	681b      	ldr	r3, [r3, #0]
   294a8:	4923      	ldr	r1, [pc, #140]	; (29538 <UART3_IRQHandler+0x138>)
   294aa:	78fa      	ldrb	r2, [r7, #3]
   294ac:	54ca      	strb	r2, [r1, r3]
	 UART3Count++;
   294ae:	4b21      	ldr	r3, [pc, #132]	; (29534 <UART3_IRQHandler+0x134>)
   294b0:	681b      	ldr	r3, [r3, #0]
   294b2:	3301      	adds	r3, #1
   294b4:	4a1f      	ldr	r2, [pc, #124]	; (29534 <UART3_IRQHandler+0x134>)
   294b6:	6013      	str	r3, [r2, #0]
		  if ( UART3Count == BUFSIZE )
   294b8:	4b1e      	ldr	r3, [pc, #120]	; (29534 <UART3_IRQHandler+0x134>)
   294ba:	681b      	ldr	r3, [r3, #0]
   294bc:	2b40      	cmp	r3, #64	; 0x40
   294be:	d102      	bne.n	294c6 <UART3_IRQHandler+0xc6>
		  {
			UART3Count = 0;		/* buffer overflow */
   294c0:	4b1c      	ldr	r3, [pc, #112]	; (29534 <UART3_IRQHandler+0x134>)
   294c2:	2200      	movs	r2, #0
   294c4:	601a      	str	r2, [r3, #0]
		  }
		  if (svr_handleRequest3(&settings, (unsigned char)ch, &reply) != 0)
   294c6:	78fb      	ldrb	r3, [r7, #3]
   294c8:	4a1c      	ldr	r2, [pc, #112]	; (2953c <UART3_IRQHandler+0x13c>)
   294ca:	4619      	mov	r1, r3
   294cc:	481c      	ldr	r0, [pc, #112]	; (29540 <UART3_IRQHandler+0x140>)
   294ce:	f7fc f9cb 	bl	25868 <svr_handleRequest3>
   294d2:	4603      	mov	r3, r0
   294d4:	2b00      	cmp	r3, #0
   294d6:	d002      	beq.n	294de <UART3_IRQHandler+0xde>
		  {
			  bb_clear(&reply);
   294d8:	4818      	ldr	r0, [pc, #96]	; (2953c <UART3_IRQHandler+0x13c>)
   294da:	f7da f943 	bl	3764 <bb_clear>
		  }

		  if (reply.size != 0)
   294de:	4b17      	ldr	r3, [pc, #92]	; (2953c <UART3_IRQHandler+0x13c>)
   294e0:	88db      	ldrh	r3, [r3, #6]
   294e2:	2b00      	cmp	r3, #0
   294e4:	d01f      	beq.n	29526 <UART3_IRQHandler+0x126>
		  {
			  	  //Send reply.
			  //for (size_t i = 0; i < reply.size; i++) {
			//uart_poll_out(uart_dev, reply.data[i]);
			  sendReply = 1;
   294e6:	4b17      	ldr	r3, [pc, #92]	; (29544 <UART3_IRQHandler+0x144>)
   294e8:	2201      	movs	r2, #1
   294ea:	701a      	strb	r2, [r3, #0]
   294ec:	e01b      	b.n	29526 <UART3_IRQHandler+0x126>
		  }


  }
  else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
   294ee:	79bb      	ldrb	r3, [r7, #6]
   294f0:	2b06      	cmp	r3, #6
   294f2:	d106      	bne.n	29502 <UART3_IRQHandler+0x102>
  {
	/* Character Time-out indicator */
	UART3Status |= 0x100;		/* Bit 9 as the CTI error */
   294f4:	4b0e      	ldr	r3, [pc, #56]	; (29530 <UART3_IRQHandler+0x130>)
   294f6:	681b      	ldr	r3, [r3, #0]
   294f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   294fc:	4a0c      	ldr	r2, [pc, #48]	; (29530 <UART3_IRQHandler+0x130>)
   294fe:	6013      	str	r3, [r2, #0]
   29500:	e011      	b.n	29526 <UART3_IRQHandler+0x126>
  }
  else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
   29502:	79bb      	ldrb	r3, [r7, #6]
   29504:	2b01      	cmp	r3, #1
   29506:	d10e      	bne.n	29526 <UART3_IRQHandler+0x126>
  {
	/* THRE interrupt */
	LSRValue = LPC_UART3->LSR;		/* Check status in the LSR to see if
   29508:	4b08      	ldr	r3, [pc, #32]	; (2952c <UART3_IRQHandler+0x12c>)
   2950a:	7d1b      	ldrb	r3, [r3, #20]
   2950c:	717b      	strb	r3, [r7, #5]
									valid data in U0THR or not */
	if ( LSRValue & LSR_THRE )
   2950e:	797b      	ldrb	r3, [r7, #5]
   29510:	f003 0320 	and.w	r3, r3, #32
   29514:	2b00      	cmp	r3, #0
   29516:	d003      	beq.n	29520 <UART3_IRQHandler+0x120>
	{
	  UART3TxEmpty = 1;
   29518:	4b0b      	ldr	r3, [pc, #44]	; (29548 <UART3_IRQHandler+0x148>)
   2951a:	2201      	movs	r2, #1
   2951c:	701a      	strb	r2, [r3, #0]
   2951e:	e002      	b.n	29526 <UART3_IRQHandler+0x126>
	}
	else
	{
	  UART3TxEmpty = 0;
   29520:	4b09      	ldr	r3, [pc, #36]	; (29548 <UART3_IRQHandler+0x148>)
   29522:	2200      	movs	r2, #0
   29524:	701a      	strb	r2, [r3, #0]
	}
  }
}
   29526:	3708      	adds	r7, #8
   29528:	46bd      	mov	sp, r7
   2952a:	bd80      	pop	{r7, pc}
   2952c:	4009c000 	.word	0x4009c000
   29530:	10000610 	.word	0x10000610
   29534:	1000015c 	.word	0x1000015c
   29538:	10000614 	.word	0x10000614
   2953c:	10000838 	.word	0x10000838
   29540:	100006f8 	.word	0x100006f8
   29544:	10000220 	.word	0x10000220
   29548:	10000000 	.word	0x10000000

0002954c <main>:
#endif



int main(void)
{
   2954c:	b580      	push	{r7, lr}
   2954e:	b088      	sub	sp, #32
   29550:	af06      	add	r7, sp, #24
  int ret;

  //SysTick_Config(12000);  /* 0.1 ms = 100us if clock frequency 120 MHz */
  //init_systick();
  //started = _impl_k_uptime_get();
  characters = 0;
   29552:	4b25      	ldr	r3, [pc, #148]	; (295e8 <main+0x9c>)
   29554:	2200      	movs	r2, #0
   29556:	601a      	str	r2, [r3, #0]
  bb_init(&reply);
   29558:	4824      	ldr	r0, [pc, #144]	; (295ec <main+0xa0>)
   2955a:	f7d9 fbc5 	bl	2ce8 <bb_init>
  //energy_meter_init();	//rakesh

  //Start server using logical name referencing and HDLC framing.
  svr_init(&settings, 1, DLMS_INTERFACE_TYPE_HDLC, HDLC_BUFFER_SIZE, PDU_BUFFER_SIZE, frame, HDLC_BUFFER_SIZE, pdu, PDU_BUFFER_SIZE);
   2955e:	f44f 7380 	mov.w	r3, #256	; 0x100
   29562:	9304      	str	r3, [sp, #16]
   29564:	4b22      	ldr	r3, [pc, #136]	; (295f0 <main+0xa4>)
   29566:	9303      	str	r3, [sp, #12]
   29568:	2380      	movs	r3, #128	; 0x80
   2956a:	9302      	str	r3, [sp, #8]
   2956c:	4b21      	ldr	r3, [pc, #132]	; (295f4 <main+0xa8>)
   2956e:	9301      	str	r3, [sp, #4]
   29570:	f44f 7380 	mov.w	r3, #256	; 0x100
   29574:	9300      	str	r3, [sp, #0]
   29576:	2380      	movs	r3, #128	; 0x80
   29578:	2200      	movs	r2, #0
   2957a:	2101      	movs	r1, #1
   2957c:	481e      	ldr	r0, [pc, #120]	; (295f8 <main+0xac>)
   2957e:	f7e2 fa73 	bl	ba68 <svr_init>
  //Add COSEM objects.
  svr_InitObjects(&settings);
   29582:	481d      	ldr	r0, [pc, #116]	; (295f8 <main+0xac>)
   29584:	f7ff fc90 	bl	28ea8 <svr_InitObjects>
  //Start server
  if ((ret = svr_initialize(&settings)) != 0)
   29588:	481b      	ldr	r0, [pc, #108]	; (295f8 <main+0xac>)
   2958a:	f7f9 f849 	bl	22620 <svr_initialize>
   2958e:	6078      	str	r0, [r7, #4]
   29590:	687b      	ldr	r3, [r7, #4]
   29592:	2b00      	cmp	r3, #0
   29594:	d005      	beq.n	295a2 <main+0x56>
  {
    printf("svr_initialize failed.\r\n");
   29596:	4819      	ldr	r0, [pc, #100]	; (295fc <main+0xb0>)
   29598:	f000 fe02 	bl	2a1a0 <puts>
    return -1;
   2959c:	f04f 33ff 	mov.w	r3, #4294967295
   295a0:	e01d      	b.n	295de <main+0x92>
  }
  printf("Gurux DLMS sample started.\n");
   295a2:	4817      	ldr	r0, [pc, #92]	; (29600 <main+0xb4>)
   295a4:	f000 fdfc 	bl	2a1a0 <puts>

  /* Infinite loop */
  UARTInit(3, 9600);
   295a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   295ac:	2003      	movs	r0, #3
   295ae:	f7d7 fbd7 	bl	d60 <UARTInit>
  energy_meter_init();
   295b2:	f7ff f847 	bl	28644 <energy_meter_init>

  //

  while (true) {
	  if(sendReply)
   295b6:	4b13      	ldr	r3, [pc, #76]	; (29604 <main+0xb8>)
   295b8:	781b      	ldrb	r3, [r3, #0]
   295ba:	b2db      	uxtb	r3, r3
   295bc:	2b00      	cmp	r3, #0
   295be:	d0fa      	beq.n	295b6 <main+0x6a>
	  {
		  UARTSend(3, reply.data, reply.size);
   295c0:	4b0a      	ldr	r3, [pc, #40]	; (295ec <main+0xa0>)
   295c2:	6819      	ldr	r1, [r3, #0]
   295c4:	4b09      	ldr	r3, [pc, #36]	; (295ec <main+0xa0>)
   295c6:	88db      	ldrh	r3, [r3, #6]
   295c8:	461a      	mov	r2, r3
   295ca:	2003      	movs	r0, #3
   295cc:	f7d7 fc84 	bl	ed8 <UARTSend>
		  		//}
		  bb_clear(&reply);
   295d0:	4806      	ldr	r0, [pc, #24]	; (295ec <main+0xa0>)
   295d2:	f7da f8c7 	bl	3764 <bb_clear>
		  sendReply = 0;
   295d6:	4b0b      	ldr	r3, [pc, #44]	; (29604 <main+0xb8>)
   295d8:	2200      	movs	r2, #0
   295da:	701a      	strb	r2, [r3, #0]
	  }
  }
   295dc:	e7eb      	b.n	295b6 <main+0x6a>
  read(R_VArh_lag); //Reverse Reactive energy -lag
  read(R_VArh_lead); //Reverse Reactive energy -lead
  read(R_Vah); //Reverse Apparent energy			getting 1187     showing 18.7
#endif

}
   295de:	4618      	mov	r0, r3
   295e0:	3708      	adds	r7, #8
   295e2:	46bd      	mov	sp, r7
   295e4:	bd80      	pop	{r7, pc}
   295e6:	bf00      	nop
   295e8:	1000021c 	.word	0x1000021c
   295ec:	10000838 	.word	0x10000838
   295f0:	10000224 	.word	0x10000224
   295f4:	10000324 	.word	0x10000324
   295f8:	100006f8 	.word	0x100006f8
   295fc:	0002c664 	.word	0x0002c664
   29600:	0002c67c 	.word	0x0002c67c
   29604:	10000220 	.word	0x10000220

00029608 <Reset_Handler>:
*/
  .section  .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
   29608:	f8df d034 	ldr.w	sp, [pc, #52]	; 29640 <LoopForever+0x2>

  /* 1. copy .data section (Copy from ROM to RAM) */
  movs r1, #0
   2960c:	2100      	movs	r1, #0
  b LoopCopyDataInit
   2960e:	e003      	b.n	29618 <LoopCopyDataInit>

00029610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
   29610:	4b0c      	ldr	r3, [pc, #48]	; (29644 <LoopForever+0x6>)
  ldr r3, [r3, r1]
   29612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
   29614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
   29616:	3104      	adds	r1, #4

00029618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
   29618:	480b      	ldr	r0, [pc, #44]	; (29648 <LoopForever+0xa>)
  ldr r3, =_edata
   2961a:	4b0c      	ldr	r3, [pc, #48]	; (2964c <LoopForever+0xe>)
  adds r2, r0, r1
   2961c:	1842      	adds	r2, r0, r1
  cmp r2, r3
   2961e:	429a      	cmp	r2, r3
  bcc CopyDataInit
   29620:	d3f6      	bcc.n	29610 <CopyDataInit>
  ldr r2, =_sbss
   29622:	4a0b      	ldr	r2, [pc, #44]	; (29650 <LoopForever+0x12>)
  b LoopFillZerobss
   29624:	e002      	b.n	2962c <LoopFillZerobss>

00029626 <FillZerobss>:

  /* 2. Clear .bss section (Zero init) */
FillZerobss:
  movs r3, #0
   29626:	2300      	movs	r3, #0
  str r3, [r2], #4
   29628:	f842 3b04 	str.w	r3, [r2], #4

0002962c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
   2962c:	4b09      	ldr	r3, [pc, #36]	; (29654 <LoopForever+0x16>)
  cmp r2, r3
   2962e:	429a      	cmp	r2, r3
  bcc FillZerobss
   29630:	d3f9      	bcc.n	29626 <FillZerobss>

  /* 3. Call system initialzation routine */
  bl SystemInit
   29632:	f000 f813 	bl	2965c <SystemInit>

  /* 4. Run static constructors  */
  bl __libc_init_array
   29636:	f000 f8e7 	bl	29808 <__libc_init_array>

  /* 5. Enter main  */
  bl main
   2963a:	f7ff ff87 	bl	2954c <main>

0002963e <LoopForever>:

    /* 6. Loop forever if returning from main */
LoopForever:
  b LoopForever
   2963e:	e7fe      	b.n	2963e <LoopForever>
*/
  .section  .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
   29640:	10008000 	.word	0x10008000
  /* 1. copy .data section (Copy from ROM to RAM) */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
   29644:	0002d1c4 	.word	0x0002d1c4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
   29648:	10000000 	.word	0x10000000
  ldr r3, =_edata
   2964c:	1000013c 	.word	0x1000013c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
   29650:	10000140 	.word	0x10000140
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
   29654:	10000848 	.word	0x10000848

00029658 <ADC_IRQHandler>:
**===========================================================================
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
InfiniteLoop:
  b InfiniteLoop
   29658:	e7fe      	b.n	29658 <ADC_IRQHandler>
	...

0002965c <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
   2965c:	b480      	push	{r7}
   2965e:	af00      	add	r7, sp, #0
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
   29660:	4b4e      	ldr	r3, [pc, #312]	; (2979c <SystemInit+0x140>)
   29662:	2220      	movs	r2, #32
   29664:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
   29668:	4b4c      	ldr	r3, [pc, #304]	; (2979c <SystemInit+0x140>)
   2966a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
   2966e:	f003 0320 	and.w	r3, r3, #32
   29672:	2b00      	cmp	r3, #0
   29674:	d007      	beq.n	29686 <SystemInit+0x2a>
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
   29676:	bf00      	nop
   29678:	4b48      	ldr	r3, [pc, #288]	; (2979c <SystemInit+0x140>)
   2967a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
   2967e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   29682:	2b00      	cmp	r3, #0
   29684:	d0f8      	beq.n	29678 <SystemInit+0x1c>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
   29686:	4b45      	ldr	r3, [pc, #276]	; (2979c <SystemInit+0x140>)
   29688:	2203      	movs	r2, #3
   2968a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Periphral clock must be selected before PLL0 enabling and connecting
   * - according errata.lpc1768-16.March.2010 -
   */
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
   2968e:	4b43      	ldr	r3, [pc, #268]	; (2979c <SystemInit+0x140>)
   29690:	2200      	movs	r2, #0
   29692:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
   29696:	4b41      	ldr	r3, [pc, #260]	; (2979c <SystemInit+0x140>)
   29698:	2200      	movs	r2, #0
   2969a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
   2969e:	4b3f      	ldr	r3, [pc, #252]	; (2979c <SystemInit+0x140>)
   296a0:	2201      	movs	r2, #1
   296a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
   296a6:	4b3d      	ldr	r3, [pc, #244]	; (2979c <SystemInit+0x140>)
   296a8:	4a3d      	ldr	r2, [pc, #244]	; (297a0 <SystemInit+0x144>)
   296aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
   296ae:	4b3b      	ldr	r3, [pc, #236]	; (2979c <SystemInit+0x140>)
   296b0:	22aa      	movs	r2, #170	; 0xaa
   296b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
   296b6:	4b39      	ldr	r3, [pc, #228]	; (2979c <SystemInit+0x140>)
   296b8:	2255      	movs	r2, #85	; 0x55
   296ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
   296be:	4b37      	ldr	r3, [pc, #220]	; (2979c <SystemInit+0x140>)
   296c0:	2201      	movs	r2, #1
   296c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
   296c6:	4b35      	ldr	r3, [pc, #212]	; (2979c <SystemInit+0x140>)
   296c8:	22aa      	movs	r2, #170	; 0xaa
   296ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
   296ce:	4b33      	ldr	r3, [pc, #204]	; (2979c <SystemInit+0x140>)
   296d0:	2255      	movs	r2, #85	; 0x55
   296d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
   296d6:	bf00      	nop
   296d8:	4b30      	ldr	r3, [pc, #192]	; (2979c <SystemInit+0x140>)
   296da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   296de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   296e2:	2b00      	cmp	r3, #0
   296e4:	d0f8      	beq.n	296d8 <SystemInit+0x7c>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
   296e6:	4b2d      	ldr	r3, [pc, #180]	; (2979c <SystemInit+0x140>)
   296e8:	2203      	movs	r2, #3
   296ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
   296ee:	4b2b      	ldr	r3, [pc, #172]	; (2979c <SystemInit+0x140>)
   296f0:	22aa      	movs	r2, #170	; 0xaa
   296f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
   296f6:	4b29      	ldr	r3, [pc, #164]	; (2979c <SystemInit+0x140>)
   296f8:	2255      	movs	r2, #85	; 0x55
   296fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
   296fe:	bf00      	nop
   29700:	4b26      	ldr	r3, [pc, #152]	; (2979c <SystemInit+0x140>)
   29702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   29706:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
   2970a:	2b00      	cmp	r3, #0
   2970c:	d0f8      	beq.n	29700 <SystemInit+0xa4>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
   2970e:	4b23      	ldr	r3, [pc, #140]	; (2979c <SystemInit+0x140>)
   29710:	2223      	movs	r2, #35	; 0x23
   29712:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
   29716:	4b21      	ldr	r3, [pc, #132]	; (2979c <SystemInit+0x140>)
   29718:	22aa      	movs	r2, #170	; 0xaa
   2971a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
   2971e:	4b1f      	ldr	r3, [pc, #124]	; (2979c <SystemInit+0x140>)
   29720:	2255      	movs	r2, #85	; 0x55
   29722:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
   29726:	4b1d      	ldr	r3, [pc, #116]	; (2979c <SystemInit+0x140>)
   29728:	2201      	movs	r2, #1
   2972a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
   2972e:	4b1b      	ldr	r3, [pc, #108]	; (2979c <SystemInit+0x140>)
   29730:	22aa      	movs	r2, #170	; 0xaa
   29732:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
   29736:	4b19      	ldr	r3, [pc, #100]	; (2979c <SystemInit+0x140>)
   29738:	2255      	movs	r2, #85	; 0x55
   2973a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
   2973e:	bf00      	nop
   29740:	4b16      	ldr	r3, [pc, #88]	; (2979c <SystemInit+0x140>)
   29742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   29746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   2974a:	2b00      	cmp	r3, #0
   2974c:	d0f8      	beq.n	29740 <SystemInit+0xe4>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
   2974e:	4b13      	ldr	r3, [pc, #76]	; (2979c <SystemInit+0x140>)
   29750:	2203      	movs	r2, #3
   29752:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
   29756:	4b11      	ldr	r3, [pc, #68]	; (2979c <SystemInit+0x140>)
   29758:	22aa      	movs	r2, #170	; 0xaa
   2975a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
   2975e:	4b0f      	ldr	r3, [pc, #60]	; (2979c <SystemInit+0x140>)
   29760:	2255      	movs	r2, #85	; 0x55
   29762:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
   29766:	bf00      	nop
   29768:	4b0c      	ldr	r3, [pc, #48]	; (2979c <SystemInit+0x140>)
   2976a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
   29772:	2b00      	cmp	r3, #0
   29774:	d0f8      	beq.n	29768 <SystemInit+0x10c>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
   29776:	4b09      	ldr	r3, [pc, #36]	; (2979c <SystemInit+0x140>)
   29778:	4a0a      	ldr	r2, [pc, #40]	; (297a4 <SystemInit+0x148>)
   2977a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
   2977e:	4b07      	ldr	r3, [pc, #28]	; (2979c <SystemInit+0x140>)
   29780:	2200      	movs	r2, #0
   29782:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
   29786:	4b05      	ldr	r3, [pc, #20]	; (2979c <SystemInit+0x140>)
   29788:	f243 023a 	movw	r2, #12346	; 0x303a
   2978c:	601a      	str	r2, [r3, #0]

//  Set Vector table offset value
#if (__RAM_MODE__==1)
  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
#else
  SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
   2978e:	4b06      	ldr	r3, [pc, #24]	; (297a8 <SystemInit+0x14c>)
   29790:	2200      	movs	r2, #0
   29792:	609a      	str	r2, [r3, #8]
#endif
}
   29794:	bf00      	nop
   29796:	46bd      	mov	sp, r7
   29798:	bc80      	pop	{r7}
   2979a:	4770      	bx	lr
   2979c:	400fc000 	.word	0x400fc000
   297a0:	00050063 	.word	0x00050063
   297a4:	042887de 	.word	0x042887de
   297a8:	e000ed00 	.word	0xe000ed00

000297ac <get_elapsed_time>:

/*
*   returns time difference between two systick time_stamps in milliseconds.
*/
uint32_t get_elapsed_time(uint32_t time1, uint32_t time2)
{
   297ac:	b480      	push	{r7}
   297ae:	b083      	sub	sp, #12
   297b0:	af00      	add	r7, sp, #0
   297b2:	6078      	str	r0, [r7, #4]
   297b4:	6039      	str	r1, [r7, #0]
    if(time2 >= time1)
   297b6:	683a      	ldr	r2, [r7, #0]
   297b8:	687b      	ldr	r3, [r7, #4]
   297ba:	429a      	cmp	r2, r3
   297bc:	d303      	bcc.n	297c6 <get_elapsed_time+0x1a>
    {
        return ((time2-time1) /* SYSTICK_INTERVAL_MS*/);
   297be:	683a      	ldr	r2, [r7, #0]
   297c0:	687b      	ldr	r3, [r7, #4]
   297c2:	1ad3      	subs	r3, r2, r3
   297c4:	e003      	b.n	297ce <get_elapsed_time+0x22>
    }
    else
    {
        return (((0xffffffff - time1)+ time2) /* SYSTICK_INTERVAL_MS*/);
   297c6:	683a      	ldr	r2, [r7, #0]
   297c8:	687b      	ldr	r3, [r7, #4]
   297ca:	1ad3      	subs	r3, r2, r3
   297cc:	3b01      	subs	r3, #1
    }
}
   297ce:	4618      	mov	r0, r3
   297d0:	370c      	adds	r7, #12
   297d2:	46bd      	mov	sp, r7
   297d4:	bc80      	pop	{r7}
   297d6:	4770      	bx	lr

000297d8 <SysTick_Handler>:
* SysTick_Handler() is isr for systick timer.
*/

#if 1
void SysTick_Handler(void)
{
   297d8:	b480      	push	{r7}
   297da:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   297dc:	b672      	cpsid	i
    // disable irq to make section atomic
    __disable_irq();
    systick_count++;
   297de:	4b05      	ldr	r3, [pc, #20]	; (297f4 <SysTick_Handler+0x1c>)
   297e0:	681b      	ldr	r3, [r3, #0]
   297e2:	3301      	adds	r3, #1
   297e4:	4a03      	ldr	r2, [pc, #12]	; (297f4 <SysTick_Handler+0x1c>)
   297e6:	6013      	str	r3, [r2, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   297e8:	b662      	cpsie	i
    __enable_irq();
}
   297ea:	bf00      	nop
   297ec:	46bd      	mov	sp, r7
   297ee:	bc80      	pop	{r7}
   297f0:	4770      	bx	lr
   297f2:	bf00      	nop
   297f4:	100005d8 	.word	0x100005d8

000297f8 <calloc>:
   297f8:	4b02      	ldr	r3, [pc, #8]	; (29804 <calloc+0xc>)
   297fa:	460a      	mov	r2, r1
   297fc:	4601      	mov	r1, r0
   297fe:	6818      	ldr	r0, [r3, #0]
   29800:	f000 bbbc 	b.w	29f7c <_calloc_r>
   29804:	100000e8 	.word	0x100000e8

00029808 <__libc_init_array>:
   29808:	4b0e      	ldr	r3, [pc, #56]	; (29844 <__libc_init_array+0x3c>)
   2980a:	b570      	push	{r4, r5, r6, lr}
   2980c:	461e      	mov	r6, r3
   2980e:	4c0e      	ldr	r4, [pc, #56]	; (29848 <__libc_init_array+0x40>)
   29810:	2500      	movs	r5, #0
   29812:	1ae4      	subs	r4, r4, r3
   29814:	10a4      	asrs	r4, r4, #2
   29816:	42a5      	cmp	r5, r4
   29818:	d004      	beq.n	29824 <__libc_init_array+0x1c>
   2981a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   2981e:	4798      	blx	r3
   29820:	3501      	adds	r5, #1
   29822:	e7f8      	b.n	29816 <__libc_init_array+0xe>
   29824:	f002 fb9e 	bl	2bf64 <_init>
   29828:	4b08      	ldr	r3, [pc, #32]	; (2984c <__libc_init_array+0x44>)
   2982a:	4c09      	ldr	r4, [pc, #36]	; (29850 <__libc_init_array+0x48>)
   2982c:	461e      	mov	r6, r3
   2982e:	1ae4      	subs	r4, r4, r3
   29830:	10a4      	asrs	r4, r4, #2
   29832:	2500      	movs	r5, #0
   29834:	42a5      	cmp	r5, r4
   29836:	d004      	beq.n	29842 <__libc_init_array+0x3a>
   29838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   2983c:	4798      	blx	r3
   2983e:	3501      	adds	r5, #1
   29840:	e7f8      	b.n	29834 <__libc_init_array+0x2c>
   29842:	bd70      	pop	{r4, r5, r6, pc}
   29844:	0002d1bc 	.word	0x0002d1bc
   29848:	0002d1bc 	.word	0x0002d1bc
   2984c:	0002d1bc 	.word	0x0002d1bc
   29850:	0002d1c0 	.word	0x0002d1c0

00029854 <localtime>:
   29854:	b538      	push	{r3, r4, r5, lr}
   29856:	4b07      	ldr	r3, [pc, #28]	; (29874 <localtime+0x20>)
   29858:	4605      	mov	r5, r0
   2985a:	681c      	ldr	r4, [r3, #0]
   2985c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2985e:	b91b      	cbnz	r3, 29868 <localtime+0x14>
   29860:	2024      	movs	r0, #36	; 0x24
   29862:	f000 f8ef 	bl	29a44 <malloc>
   29866:	63e0      	str	r0, [r4, #60]	; 0x3c
   29868:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2986a:	4628      	mov	r0, r5
   2986c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29870:	f000 b802 	b.w	29878 <localtime_r>
   29874:	100000e8 	.word	0x100000e8

00029878 <localtime_r>:
   29878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2987c:	460c      	mov	r4, r1
   2987e:	4680      	mov	r8, r0
   29880:	f001 fa28 	bl	2acd4 <__gettzinfo>
   29884:	4621      	mov	r1, r4
   29886:	4607      	mov	r7, r0
   29888:	4640      	mov	r0, r8
   2988a:	f001 fa27 	bl	2acdc <gmtime_r>
   2988e:	6946      	ldr	r6, [r0, #20]
   29890:	4604      	mov	r4, r0
   29892:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   29896:	07b3      	lsls	r3, r6, #30
   29898:	d105      	bne.n	298a6 <localtime_r+0x2e>
   2989a:	2264      	movs	r2, #100	; 0x64
   2989c:	fb96 f3f2 	sdiv	r3, r6, r2
   298a0:	fb02 6313 	mls	r3, r2, r3, r6
   298a4:	b94b      	cbnz	r3, 298ba <localtime_r+0x42>
   298a6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   298aa:	fb96 f3f5 	sdiv	r3, r6, r5
   298ae:	fb05 6513 	mls	r5, r5, r3, r6
   298b2:	fab5 f385 	clz	r3, r5
   298b6:	095b      	lsrs	r3, r3, #5
   298b8:	e000      	b.n	298bc <localtime_r+0x44>
   298ba:	2301      	movs	r3, #1
   298bc:	4a5f      	ldr	r2, [pc, #380]	; (29a3c <localtime_r+0x1c4>)
   298be:	2530      	movs	r5, #48	; 0x30
   298c0:	fb05 2503 	mla	r5, r5, r3, r2
   298c4:	f000 fdc8 	bl	2a458 <__tz_lock>
   298c8:	f000 fdc8 	bl	2a45c <_tzset_unlocked>
   298cc:	4b5c      	ldr	r3, [pc, #368]	; (29a40 <localtime_r+0x1c8>)
   298ce:	681b      	ldr	r3, [r3, #0]
   298d0:	b1f3      	cbz	r3, 29910 <localtime_r+0x98>
   298d2:	687b      	ldr	r3, [r7, #4]
   298d4:	429e      	cmp	r6, r3
   298d6:	d105      	bne.n	298e4 <localtime_r+0x6c>
   298d8:	6839      	ldr	r1, [r7, #0]
   298da:	f8d8 3000 	ldr.w	r3, [r8]
   298de:	69fa      	ldr	r2, [r7, #28]
   298e0:	b941      	cbnz	r1, 298f4 <localtime_r+0x7c>
   298e2:	e00a      	b.n	298fa <localtime_r+0x82>
   298e4:	4630      	mov	r0, r6
   298e6:	f000 fd0f 	bl	2a308 <__tzcalc_limits>
   298ea:	2800      	cmp	r0, #0
   298ec:	d1f4      	bne.n	298d8 <localtime_r+0x60>
   298ee:	f04f 33ff 	mov.w	r3, #4294967295
   298f2:	e00d      	b.n	29910 <localtime_r+0x98>
   298f4:	4293      	cmp	r3, r2
   298f6:	db08      	blt.n	2990a <localtime_r+0x92>
   298f8:	e001      	b.n	298fe <localtime_r+0x86>
   298fa:	4293      	cmp	r3, r2
   298fc:	da07      	bge.n	2990e <localtime_r+0x96>
   298fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   29900:	4293      	cmp	r3, r2
   29902:	bfac      	ite	ge
   29904:	2300      	movge	r3, #0
   29906:	2301      	movlt	r3, #1
   29908:	e002      	b.n	29910 <localtime_r+0x98>
   2990a:	2300      	movs	r3, #0
   2990c:	e000      	b.n	29910 <localtime_r+0x98>
   2990e:	2301      	movs	r3, #1
   29910:	6223      	str	r3, [r4, #32]
   29912:	6a23      	ldr	r3, [r4, #32]
   29914:	203c      	movs	r0, #60	; 0x3c
   29916:	2b01      	cmp	r3, #1
   29918:	bf0c      	ite	eq
   2991a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   2991c:	6a39      	ldrne	r1, [r7, #32]
   2991e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   29922:	fb91 f6f3 	sdiv	r6, r1, r3
   29926:	fb03 1316 	mls	r3, r3, r6, r1
   2992a:	fb93 f2f0 	sdiv	r2, r3, r0
   2992e:	fb00 3012 	mls	r0, r0, r2, r3
   29932:	6861      	ldr	r1, [r4, #4]
   29934:	6823      	ldr	r3, [r4, #0]
   29936:	1a89      	subs	r1, r1, r2
   29938:	68a2      	ldr	r2, [r4, #8]
   2993a:	1a1b      	subs	r3, r3, r0
   2993c:	1b92      	subs	r2, r2, r6
   2993e:	2b3b      	cmp	r3, #59	; 0x3b
   29940:	6023      	str	r3, [r4, #0]
   29942:	6061      	str	r1, [r4, #4]
   29944:	60a2      	str	r2, [r4, #8]
   29946:	dd03      	ble.n	29950 <localtime_r+0xd8>
   29948:	3101      	adds	r1, #1
   2994a:	6061      	str	r1, [r4, #4]
   2994c:	3b3c      	subs	r3, #60	; 0x3c
   2994e:	e004      	b.n	2995a <localtime_r+0xe2>
   29950:	2b00      	cmp	r3, #0
   29952:	da03      	bge.n	2995c <localtime_r+0xe4>
   29954:	3901      	subs	r1, #1
   29956:	6061      	str	r1, [r4, #4]
   29958:	333c      	adds	r3, #60	; 0x3c
   2995a:	6023      	str	r3, [r4, #0]
   2995c:	6863      	ldr	r3, [r4, #4]
   2995e:	2b3b      	cmp	r3, #59	; 0x3b
   29960:	dd03      	ble.n	2996a <localtime_r+0xf2>
   29962:	3201      	adds	r2, #1
   29964:	60a2      	str	r2, [r4, #8]
   29966:	3b3c      	subs	r3, #60	; 0x3c
   29968:	e004      	b.n	29974 <localtime_r+0xfc>
   2996a:	2b00      	cmp	r3, #0
   2996c:	da03      	bge.n	29976 <localtime_r+0xfe>
   2996e:	3a01      	subs	r2, #1
   29970:	60a2      	str	r2, [r4, #8]
   29972:	333c      	adds	r3, #60	; 0x3c
   29974:	6063      	str	r3, [r4, #4]
   29976:	68a3      	ldr	r3, [r4, #8]
   29978:	2b17      	cmp	r3, #23
   2997a:	dd22      	ble.n	299c2 <localtime_r+0x14a>
   2997c:	69e2      	ldr	r2, [r4, #28]
   2997e:	3b18      	subs	r3, #24
   29980:	3201      	adds	r2, #1
   29982:	61e2      	str	r2, [r4, #28]
   29984:	69a2      	ldr	r2, [r4, #24]
   29986:	60a3      	str	r3, [r4, #8]
   29988:	3201      	adds	r2, #1
   2998a:	2a06      	cmp	r2, #6
   2998c:	bfc8      	it	gt
   2998e:	2200      	movgt	r2, #0
   29990:	61a2      	str	r2, [r4, #24]
   29992:	68e2      	ldr	r2, [r4, #12]
   29994:	6923      	ldr	r3, [r4, #16]
   29996:	3201      	adds	r2, #1
   29998:	60e2      	str	r2, [r4, #12]
   2999a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   2999e:	428a      	cmp	r2, r1
   299a0:	dd46      	ble.n	29a30 <localtime_r+0x1b8>
   299a2:	3301      	adds	r3, #1
   299a4:	2b0c      	cmp	r3, #12
   299a6:	bf08      	it	eq
   299a8:	6963      	ldreq	r3, [r4, #20]
   299aa:	eba2 0201 	sub.w	r2, r2, r1
   299ae:	60e2      	str	r2, [r4, #12]
   299b0:	bf05      	ittet	eq
   299b2:	3301      	addeq	r3, #1
   299b4:	2200      	moveq	r2, #0
   299b6:	6123      	strne	r3, [r4, #16]
   299b8:	6122      	streq	r2, [r4, #16]
   299ba:	bf04      	itt	eq
   299bc:	6163      	streq	r3, [r4, #20]
   299be:	61e2      	streq	r2, [r4, #28]
   299c0:	e036      	b.n	29a30 <localtime_r+0x1b8>
   299c2:	2b00      	cmp	r3, #0
   299c4:	da34      	bge.n	29a30 <localtime_r+0x1b8>
   299c6:	69e2      	ldr	r2, [r4, #28]
   299c8:	3318      	adds	r3, #24
   299ca:	3a01      	subs	r2, #1
   299cc:	61e2      	str	r2, [r4, #28]
   299ce:	69a2      	ldr	r2, [r4, #24]
   299d0:	60a3      	str	r3, [r4, #8]
   299d2:	3a01      	subs	r2, #1
   299d4:	bf48      	it	mi
   299d6:	2206      	movmi	r2, #6
   299d8:	61a2      	str	r2, [r4, #24]
   299da:	68e2      	ldr	r2, [r4, #12]
   299dc:	3a01      	subs	r2, #1
   299de:	60e2      	str	r2, [r4, #12]
   299e0:	bb32      	cbnz	r2, 29a30 <localtime_r+0x1b8>
   299e2:	6923      	ldr	r3, [r4, #16]
   299e4:	3b01      	subs	r3, #1
   299e6:	d401      	bmi.n	299ec <localtime_r+0x174>
   299e8:	6123      	str	r3, [r4, #16]
   299ea:	e01d      	b.n	29a28 <localtime_r+0x1b0>
   299ec:	230b      	movs	r3, #11
   299ee:	6123      	str	r3, [r4, #16]
   299f0:	6963      	ldr	r3, [r4, #20]
   299f2:	1e5a      	subs	r2, r3, #1
   299f4:	f012 0f03 	tst.w	r2, #3
   299f8:	6162      	str	r2, [r4, #20]
   299fa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   299fe:	d105      	bne.n	29a0c <localtime_r+0x194>
   29a00:	2164      	movs	r1, #100	; 0x64
   29a02:	fb93 f2f1 	sdiv	r2, r3, r1
   29a06:	fb01 3212 	mls	r2, r1, r2, r3
   29a0a:	b94a      	cbnz	r2, 29a20 <localtime_r+0x1a8>
   29a0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   29a10:	fb93 f2f1 	sdiv	r2, r3, r1
   29a14:	fb01 3312 	mls	r3, r1, r2, r3
   29a18:	fab3 f383 	clz	r3, r3
   29a1c:	095b      	lsrs	r3, r3, #5
   29a1e:	e000      	b.n	29a22 <localtime_r+0x1aa>
   29a20:	2301      	movs	r3, #1
   29a22:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   29a26:	61e3      	str	r3, [r4, #28]
   29a28:	6923      	ldr	r3, [r4, #16]
   29a2a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   29a2e:	60e3      	str	r3, [r4, #12]
   29a30:	f000 fd13 	bl	2a45a <__tz_unlock>
   29a34:	4620      	mov	r0, r4
   29a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29a3a:	bf00      	nop
   29a3c:	0002cf68 	.word	0x0002cf68
   29a40:	10000600 	.word	0x10000600

00029a44 <malloc>:
   29a44:	4b02      	ldr	r3, [pc, #8]	; (29a50 <malloc+0xc>)
   29a46:	4601      	mov	r1, r0
   29a48:	6818      	ldr	r0, [r3, #0]
   29a4a:	f000 baf1 	b.w	2a030 <_malloc_r>
   29a4e:	bf00      	nop
   29a50:	100000e8 	.word	0x100000e8

00029a54 <free>:
   29a54:	4b02      	ldr	r3, [pc, #8]	; (29a60 <free+0xc>)
   29a56:	4601      	mov	r1, r0
   29a58:	6818      	ldr	r0, [r3, #0]
   29a5a:	f000 ba9d 	b.w	29f98 <_free_r>
   29a5e:	bf00      	nop
   29a60:	100000e8 	.word	0x100000e8

00029a64 <memcmp>:
   29a64:	b510      	push	{r4, lr}
   29a66:	3901      	subs	r1, #1
   29a68:	4402      	add	r2, r0
   29a6a:	4290      	cmp	r0, r2
   29a6c:	d007      	beq.n	29a7e <memcmp+0x1a>
   29a6e:	f810 3b01 	ldrb.w	r3, [r0], #1
   29a72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29a76:	42a3      	cmp	r3, r4
   29a78:	d0f7      	beq.n	29a6a <memcmp+0x6>
   29a7a:	1b18      	subs	r0, r3, r4
   29a7c:	bd10      	pop	{r4, pc}
   29a7e:	2000      	movs	r0, #0
   29a80:	bd10      	pop	{r4, pc}

00029a82 <memcpy>:
   29a82:	b510      	push	{r4, lr}
   29a84:	1e43      	subs	r3, r0, #1
   29a86:	440a      	add	r2, r1
   29a88:	4291      	cmp	r1, r2
   29a8a:	d004      	beq.n	29a96 <memcpy+0x14>
   29a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
   29a90:	f803 4f01 	strb.w	r4, [r3, #1]!
   29a94:	e7f8      	b.n	29a88 <memcpy+0x6>
   29a96:	bd10      	pop	{r4, pc}

00029a98 <memmove>:
   29a98:	4288      	cmp	r0, r1
   29a9a:	b510      	push	{r4, lr}
   29a9c:	eb01 0302 	add.w	r3, r1, r2
   29aa0:	d801      	bhi.n	29aa6 <memmove+0xe>
   29aa2:	1e42      	subs	r2, r0, #1
   29aa4:	e00b      	b.n	29abe <memmove+0x26>
   29aa6:	4298      	cmp	r0, r3
   29aa8:	d2fb      	bcs.n	29aa2 <memmove+0xa>
   29aaa:	1881      	adds	r1, r0, r2
   29aac:	1ad2      	subs	r2, r2, r3
   29aae:	42d3      	cmn	r3, r2
   29ab0:	d004      	beq.n	29abc <memmove+0x24>
   29ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   29ab6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   29aba:	e7f8      	b.n	29aae <memmove+0x16>
   29abc:	bd10      	pop	{r4, pc}
   29abe:	4299      	cmp	r1, r3
   29ac0:	d004      	beq.n	29acc <memmove+0x34>
   29ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
   29ac6:	f802 4f01 	strb.w	r4, [r2, #1]!
   29aca:	e7f8      	b.n	29abe <memmove+0x26>
   29acc:	bd10      	pop	{r4, pc}

00029ace <memset>:
   29ace:	4603      	mov	r3, r0
   29ad0:	4402      	add	r2, r0
   29ad2:	4293      	cmp	r3, r2
   29ad4:	d002      	beq.n	29adc <memset+0xe>
   29ad6:	f803 1b01 	strb.w	r1, [r3], #1
   29ada:	e7fa      	b.n	29ad2 <memset+0x4>
   29adc:	4770      	bx	lr
	...

00029ae0 <validate_structure>:
   29ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29ae2:	6801      	ldr	r1, [r0, #0]
   29ae4:	4604      	mov	r4, r0
   29ae6:	293b      	cmp	r1, #59	; 0x3b
   29ae8:	d911      	bls.n	29b0e <validate_structure+0x2e>
   29aea:	223c      	movs	r2, #60	; 0x3c
   29aec:	4668      	mov	r0, sp
   29aee:	f000 ff1f 	bl	2a930 <div>
   29af2:	9a01      	ldr	r2, [sp, #4]
   29af4:	6863      	ldr	r3, [r4, #4]
   29af6:	9900      	ldr	r1, [sp, #0]
   29af8:	2a00      	cmp	r2, #0
   29afa:	440b      	add	r3, r1
   29afc:	6063      	str	r3, [r4, #4]
   29afe:	bfbb      	ittet	lt
   29b00:	323c      	addlt	r2, #60	; 0x3c
   29b02:	f103 33ff 	addlt.w	r3, r3, #4294967295
   29b06:	6022      	strge	r2, [r4, #0]
   29b08:	6022      	strlt	r2, [r4, #0]
   29b0a:	bfb8      	it	lt
   29b0c:	6063      	strlt	r3, [r4, #4]
   29b0e:	6861      	ldr	r1, [r4, #4]
   29b10:	293b      	cmp	r1, #59	; 0x3b
   29b12:	d911      	bls.n	29b38 <validate_structure+0x58>
   29b14:	223c      	movs	r2, #60	; 0x3c
   29b16:	4668      	mov	r0, sp
   29b18:	f000 ff0a 	bl	2a930 <div>
   29b1c:	9a01      	ldr	r2, [sp, #4]
   29b1e:	68a1      	ldr	r1, [r4, #8]
   29b20:	9b00      	ldr	r3, [sp, #0]
   29b22:	2a00      	cmp	r2, #0
   29b24:	440b      	add	r3, r1
   29b26:	60a3      	str	r3, [r4, #8]
   29b28:	bfbb      	ittet	lt
   29b2a:	323c      	addlt	r2, #60	; 0x3c
   29b2c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   29b30:	6062      	strge	r2, [r4, #4]
   29b32:	6062      	strlt	r2, [r4, #4]
   29b34:	bfb8      	it	lt
   29b36:	60a3      	strlt	r3, [r4, #8]
   29b38:	68a1      	ldr	r1, [r4, #8]
   29b3a:	2917      	cmp	r1, #23
   29b3c:	d911      	bls.n	29b62 <validate_structure+0x82>
   29b3e:	2218      	movs	r2, #24
   29b40:	4668      	mov	r0, sp
   29b42:	f000 fef5 	bl	2a930 <div>
   29b46:	9a01      	ldr	r2, [sp, #4]
   29b48:	68e1      	ldr	r1, [r4, #12]
   29b4a:	9b00      	ldr	r3, [sp, #0]
   29b4c:	2a00      	cmp	r2, #0
   29b4e:	440b      	add	r3, r1
   29b50:	60e3      	str	r3, [r4, #12]
   29b52:	bfbb      	ittet	lt
   29b54:	3218      	addlt	r2, #24
   29b56:	f103 33ff 	addlt.w	r3, r3, #4294967295
   29b5a:	60a2      	strge	r2, [r4, #8]
   29b5c:	60a2      	strlt	r2, [r4, #8]
   29b5e:	bfb8      	it	lt
   29b60:	60e3      	strlt	r3, [r4, #12]
   29b62:	6921      	ldr	r1, [r4, #16]
   29b64:	290b      	cmp	r1, #11
   29b66:	d911      	bls.n	29b8c <validate_structure+0xac>
   29b68:	220c      	movs	r2, #12
   29b6a:	4668      	mov	r0, sp
   29b6c:	f000 fee0 	bl	2a930 <div>
   29b70:	9a01      	ldr	r2, [sp, #4]
   29b72:	6961      	ldr	r1, [r4, #20]
   29b74:	9b00      	ldr	r3, [sp, #0]
   29b76:	2a00      	cmp	r2, #0
   29b78:	440b      	add	r3, r1
   29b7a:	6163      	str	r3, [r4, #20]
   29b7c:	bfbb      	ittet	lt
   29b7e:	320c      	addlt	r2, #12
   29b80:	f103 33ff 	addlt.w	r3, r3, #4294967295
   29b84:	6122      	strge	r2, [r4, #16]
   29b86:	6122      	strlt	r2, [r4, #16]
   29b88:	bfb8      	it	lt
   29b8a:	6163      	strlt	r3, [r4, #20]
   29b8c:	6963      	ldr	r3, [r4, #20]
   29b8e:	0799      	lsls	r1, r3, #30
   29b90:	d112      	bne.n	29bb8 <validate_structure+0xd8>
   29b92:	2164      	movs	r1, #100	; 0x64
   29b94:	fb93 f2f1 	sdiv	r2, r3, r1
   29b98:	fb01 3212 	mls	r2, r1, r2, r3
   29b9c:	b972      	cbnz	r2, 29bbc <validate_structure+0xdc>
   29b9e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   29ba2:	f44f 71c8 	mov.w	r1, #400	; 0x190
   29ba6:	fb93 f2f1 	sdiv	r2, r3, r1
   29baa:	fb01 3312 	mls	r3, r1, r2, r3
   29bae:	2b00      	cmp	r3, #0
   29bb0:	bf14      	ite	ne
   29bb2:	231c      	movne	r3, #28
   29bb4:	231d      	moveq	r3, #29
   29bb6:	e002      	b.n	29bbe <validate_structure+0xde>
   29bb8:	231c      	movs	r3, #28
   29bba:	e000      	b.n	29bbe <validate_structure+0xde>
   29bbc:	231d      	movs	r3, #29
   29bbe:	68e2      	ldr	r2, [r4, #12]
   29bc0:	2a00      	cmp	r2, #0
   29bc2:	dd06      	ble.n	29bd2 <validate_structure+0xf2>
   29bc4:	4f33      	ldr	r7, [pc, #204]	; (29c94 <validate_structure+0x1b4>)
   29bc6:	f04f 0e00 	mov.w	lr, #0
   29bca:	2564      	movs	r5, #100	; 0x64
   29bcc:	f44f 76c8 	mov.w	r6, #400	; 0x190
   29bd0:	e039      	b.n	29c46 <validate_structure+0x166>
   29bd2:	4f30      	ldr	r7, [pc, #192]	; (29c94 <validate_structure+0x1b4>)
   29bd4:	260b      	movs	r6, #11
   29bd6:	2064      	movs	r0, #100	; 0x64
   29bd8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   29bdc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   29be0:	f1be 0f00 	cmp.w	lr, #0
   29be4:	dc53      	bgt.n	29c8e <validate_structure+0x1ae>
   29be6:	6921      	ldr	r1, [r4, #16]
   29be8:	3901      	subs	r1, #1
   29bea:	6121      	str	r1, [r4, #16]
   29bec:	3101      	adds	r1, #1
   29bee:	d118      	bne.n	29c22 <validate_structure+0x142>
   29bf0:	6963      	ldr	r3, [r4, #20]
   29bf2:	6126      	str	r6, [r4, #16]
   29bf4:	1e59      	subs	r1, r3, #1
   29bf6:	078a      	lsls	r2, r1, #30
   29bf8:	6161      	str	r1, [r4, #20]
   29bfa:	d10f      	bne.n	29c1c <validate_structure+0x13c>
   29bfc:	fb91 f2f0 	sdiv	r2, r1, r0
   29c00:	fb00 1112 	mls	r1, r0, r2, r1
   29c04:	b961      	cbnz	r1, 29c20 <validate_structure+0x140>
   29c06:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   29c0a:	fb93 f2f5 	sdiv	r2, r3, r5
   29c0e:	fb05 3312 	mls	r3, r5, r2, r3
   29c12:	2b00      	cmp	r3, #0
   29c14:	bf14      	ite	ne
   29c16:	231c      	movne	r3, #28
   29c18:	231d      	moveq	r3, #29
   29c1a:	e002      	b.n	29c22 <validate_structure+0x142>
   29c1c:	231c      	movs	r3, #28
   29c1e:	e000      	b.n	29c22 <validate_structure+0x142>
   29c20:	231d      	movs	r3, #29
   29c22:	6922      	ldr	r2, [r4, #16]
   29c24:	2a01      	cmp	r2, #1
   29c26:	bf0c      	ite	eq
   29c28:	461a      	moveq	r2, r3
   29c2a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   29c2e:	4472      	add	r2, lr
   29c30:	60e2      	str	r2, [r4, #12]
   29c32:	e7d3      	b.n	29bdc <validate_structure+0xfc>
   29c34:	428b      	cmp	r3, r1
   29c36:	da2a      	bge.n	29c8e <validate_structure+0x1ae>
   29c38:	4618      	mov	r0, r3
   29c3a:	3201      	adds	r2, #1
   29c3c:	1a09      	subs	r1, r1, r0
   29c3e:	2a0c      	cmp	r2, #12
   29c40:	60e1      	str	r1, [r4, #12]
   29c42:	6122      	str	r2, [r4, #16]
   29c44:	d008      	beq.n	29c58 <validate_structure+0x178>
   29c46:	6922      	ldr	r2, [r4, #16]
   29c48:	68e1      	ldr	r1, [r4, #12]
   29c4a:	2a01      	cmp	r2, #1
   29c4c:	d0f2      	beq.n	29c34 <validate_structure+0x154>
   29c4e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   29c52:	4281      	cmp	r1, r0
   29c54:	dcf1      	bgt.n	29c3a <validate_structure+0x15a>
   29c56:	e01a      	b.n	29c8e <validate_structure+0x1ae>
   29c58:	6963      	ldr	r3, [r4, #20]
   29c5a:	f8c4 e010 	str.w	lr, [r4, #16]
   29c5e:	1c5a      	adds	r2, r3, #1
   29c60:	0791      	lsls	r1, r2, #30
   29c62:	6162      	str	r2, [r4, #20]
   29c64:	d10f      	bne.n	29c86 <validate_structure+0x1a6>
   29c66:	fb92 f1f5 	sdiv	r1, r2, r5
   29c6a:	fb05 2211 	mls	r2, r5, r1, r2
   29c6e:	b962      	cbnz	r2, 29c8a <validate_structure+0x1aa>
   29c70:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   29c74:	fb93 f2f6 	sdiv	r2, r3, r6
   29c78:	fb06 3312 	mls	r3, r6, r2, r3
   29c7c:	2b00      	cmp	r3, #0
   29c7e:	bf14      	ite	ne
   29c80:	231c      	movne	r3, #28
   29c82:	231d      	moveq	r3, #29
   29c84:	e7df      	b.n	29c46 <validate_structure+0x166>
   29c86:	231c      	movs	r3, #28
   29c88:	e7dd      	b.n	29c46 <validate_structure+0x166>
   29c8a:	231d      	movs	r3, #29
   29c8c:	e7db      	b.n	29c46 <validate_structure+0x166>
   29c8e:	b003      	add	sp, #12
   29c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c92:	bf00      	nop
   29c94:	0002cf38 	.word	0x0002cf38

00029c98 <mktime>:
   29c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29c9c:	4605      	mov	r5, r0
   29c9e:	f001 f819 	bl	2acd4 <__gettzinfo>
   29ca2:	4681      	mov	r9, r0
   29ca4:	4628      	mov	r0, r5
   29ca6:	f7ff ff1b 	bl	29ae0 <validate_structure>
   29caa:	e895 000c 	ldmia.w	r5, {r2, r3}
   29cae:	213c      	movs	r1, #60	; 0x3c
   29cb0:	fb01 2303 	mla	r3, r1, r3, r2
   29cb4:	68aa      	ldr	r2, [r5, #8]
   29cb6:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   29cba:	fb08 3102 	mla	r1, r8, r2, r3
   29cbe:	692b      	ldr	r3, [r5, #16]
   29cc0:	4aab      	ldr	r2, [pc, #684]	; (29f70 <mktime+0x2d8>)
   29cc2:	68ec      	ldr	r4, [r5, #12]
   29cc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   29cc8:	3c01      	subs	r4, #1
   29cca:	2b01      	cmp	r3, #1
   29ccc:	4414      	add	r4, r2
   29cce:	696b      	ldr	r3, [r5, #20]
   29cd0:	dd11      	ble.n	29cf6 <mktime+0x5e>
   29cd2:	079e      	lsls	r6, r3, #30
   29cd4:	d10f      	bne.n	29cf6 <mktime+0x5e>
   29cd6:	2064      	movs	r0, #100	; 0x64
   29cd8:	fb93 f2f0 	sdiv	r2, r3, r0
   29cdc:	fb00 3212 	mls	r2, r0, r2, r3
   29ce0:	b942      	cbnz	r2, 29cf4 <mktime+0x5c>
   29ce2:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   29ce6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   29cea:	fb96 f0f2 	sdiv	r0, r6, r2
   29cee:	fb02 6210 	mls	r2, r2, r0, r6
   29cf2:	b902      	cbnz	r2, 29cf6 <mktime+0x5e>
   29cf4:	3401      	adds	r4, #1
   29cf6:	f644 6020 	movw	r0, #20000	; 0x4e20
   29cfa:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   29cfe:	3210      	adds	r2, #16
   29d00:	4282      	cmp	r2, r0
   29d02:	61ec      	str	r4, [r5, #28]
   29d04:	461f      	mov	r7, r3
   29d06:	f200 812e 	bhi.w	29f66 <mktime+0x2ce>
   29d0a:	2b46      	cmp	r3, #70	; 0x46
   29d0c:	dd22      	ble.n	29d54 <mktime+0xbc>
   29d0e:	f240 1c6d 	movw	ip, #365	; 0x16d
   29d12:	2246      	movs	r2, #70	; 0x46
   29d14:	2664      	movs	r6, #100	; 0x64
   29d16:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   29d1a:	0790      	lsls	r0, r2, #30
   29d1c:	d110      	bne.n	29d40 <mktime+0xa8>
   29d1e:	fb92 f0f6 	sdiv	r0, r2, r6
   29d22:	fb06 2010 	mls	r0, r6, r0, r2
   29d26:	b970      	cbnz	r0, 29d46 <mktime+0xae>
   29d28:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   29d2c:	fb98 f0fe 	sdiv	r0, r8, lr
   29d30:	fb0e 8010 	mls	r0, lr, r0, r8
   29d34:	2800      	cmp	r0, #0
   29d36:	bf14      	ite	ne
   29d38:	4660      	movne	r0, ip
   29d3a:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   29d3e:	e004      	b.n	29d4a <mktime+0xb2>
   29d40:	f240 106d 	movw	r0, #365	; 0x16d
   29d44:	e001      	b.n	29d4a <mktime+0xb2>
   29d46:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   29d4a:	3201      	adds	r2, #1
   29d4c:	4293      	cmp	r3, r2
   29d4e:	4404      	add	r4, r0
   29d50:	d1e3      	bne.n	29d1a <mktime+0x82>
   29d52:	e044      	b.n	29dde <mktime+0x146>
   29d54:	d043      	beq.n	29dde <mktime+0x146>
   29d56:	f240 1e6d 	movw	lr, #365	; 0x16d
   29d5a:	2245      	movs	r2, #69	; 0x45
   29d5c:	2664      	movs	r6, #100	; 0x64
   29d5e:	f44f 77c8 	mov.w	r7, #400	; 0x190
   29d62:	429a      	cmp	r2, r3
   29d64:	dd1a      	ble.n	29d9c <mktime+0x104>
   29d66:	0790      	lsls	r0, r2, #30
   29d68:	d110      	bne.n	29d8c <mktime+0xf4>
   29d6a:	fb92 f0f6 	sdiv	r0, r2, r6
   29d6e:	fb06 2010 	mls	r0, r6, r0, r2
   29d72:	b970      	cbnz	r0, 29d92 <mktime+0xfa>
   29d74:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   29d78:	fb9c f0f7 	sdiv	r0, ip, r7
   29d7c:	fb07 c010 	mls	r0, r7, r0, ip
   29d80:	2800      	cmp	r0, #0
   29d82:	bf14      	ite	ne
   29d84:	4670      	movne	r0, lr
   29d86:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   29d8a:	e004      	b.n	29d96 <mktime+0xfe>
   29d8c:	f240 106d 	movw	r0, #365	; 0x16d
   29d90:	e001      	b.n	29d96 <mktime+0xfe>
   29d92:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   29d96:	1a24      	subs	r4, r4, r0
   29d98:	3a01      	subs	r2, #1
   29d9a:	e7e2      	b.n	29d62 <mktime+0xca>
   29d9c:	2b45      	cmp	r3, #69	; 0x45
   29d9e:	bfa8      	it	ge
   29da0:	2345      	movge	r3, #69	; 0x45
   29da2:	079e      	lsls	r6, r3, #30
   29da4:	461f      	mov	r7, r3
   29da6:	d114      	bne.n	29dd2 <mktime+0x13a>
   29da8:	2264      	movs	r2, #100	; 0x64
   29daa:	fb93 f3f2 	sdiv	r3, r3, r2
   29dae:	fb02 7313 	mls	r3, r2, r3, r7
   29db2:	b98b      	cbnz	r3, 29dd8 <mktime+0x140>
   29db4:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   29db8:	f44f 73c8 	mov.w	r3, #400	; 0x190
   29dbc:	fb90 f2f3 	sdiv	r2, r0, r3
   29dc0:	fb03 0312 	mls	r3, r3, r2, r0
   29dc4:	2b00      	cmp	r3, #0
   29dc6:	f240 136d 	movw	r3, #365	; 0x16d
   29dca:	bf08      	it	eq
   29dcc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   29dd0:	e004      	b.n	29ddc <mktime+0x144>
   29dd2:	f240 136d 	movw	r3, #365	; 0x16d
   29dd6:	e001      	b.n	29ddc <mktime+0x144>
   29dd8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   29ddc:	1ae4      	subs	r4, r4, r3
   29dde:	4865      	ldr	r0, [pc, #404]	; (29f74 <mktime+0x2dc>)
   29de0:	fb00 1804 	mla	r8, r0, r4, r1
   29de4:	f000 fb38 	bl	2a458 <__tz_lock>
   29de8:	f000 fb38 	bl	2a45c <_tzset_unlocked>
   29dec:	4b62      	ldr	r3, [pc, #392]	; (29f78 <mktime+0x2e0>)
   29dee:	681e      	ldr	r6, [r3, #0]
   29df0:	2e00      	cmp	r6, #0
   29df2:	f000 80a4 	beq.w	29f3e <mktime+0x2a6>
   29df6:	6a2b      	ldr	r3, [r5, #32]
   29df8:	6968      	ldr	r0, [r5, #20]
   29dfa:	2b01      	cmp	r3, #1
   29dfc:	bfa8      	it	ge
   29dfe:	2301      	movge	r3, #1
   29e00:	469a      	mov	sl, r3
   29e02:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29e06:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   29e0a:	4298      	cmp	r0, r3
   29e0c:	d10d      	bne.n	29e2a <mktime+0x192>
   29e0e:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   29e12:	f8d9 3020 	ldr.w	r3, [r9, #32]
   29e16:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   29e1a:	f8d9 101c 	ldr.w	r1, [r9, #28]
   29e1e:	1ad6      	subs	r6, r2, r3
   29e20:	45b0      	cmp	r8, r6
   29e22:	eba1 0100 	sub.w	r1, r1, r0
   29e26:	da05      	bge.n	29e34 <mktime+0x19c>
   29e28:	e007      	b.n	29e3a <mktime+0x1a2>
   29e2a:	f000 fa6d 	bl	2a308 <__tzcalc_limits>
   29e2e:	2800      	cmp	r0, #0
   29e30:	d1ed      	bne.n	29e0e <mktime+0x176>
   29e32:	e076      	b.n	29f22 <mktime+0x28a>
   29e34:	1a12      	subs	r2, r2, r0
   29e36:	4590      	cmp	r8, r2
   29e38:	db73      	blt.n	29f22 <mktime+0x28a>
   29e3a:	f8d9 2000 	ldr.w	r2, [r9]
   29e3e:	b112      	cbz	r2, 29e46 <mktime+0x1ae>
   29e40:	4588      	cmp	r8, r1
   29e42:	db77      	blt.n	29f34 <mktime+0x29c>
   29e44:	e001      	b.n	29e4a <mktime+0x1b2>
   29e46:	4588      	cmp	r8, r1
   29e48:	da07      	bge.n	29e5a <mktime+0x1c2>
   29e4a:	45b0      	cmp	r8, r6
   29e4c:	bfac      	ite	ge
   29e4e:	2600      	movge	r6, #0
   29e50:	2601      	movlt	r6, #1
   29e52:	f1ba 0f00 	cmp.w	sl, #0
   29e56:	da04      	bge.n	29e62 <mktime+0x1ca>
   29e58:	e064      	b.n	29f24 <mktime+0x28c>
   29e5a:	f1ba 0f00 	cmp.w	sl, #0
   29e5e:	db63      	blt.n	29f28 <mktime+0x290>
   29e60:	2601      	movs	r6, #1
   29e62:	ea8a 0a06 	eor.w	sl, sl, r6
   29e66:	f1ba 0f01 	cmp.w	sl, #1
   29e6a:	d15b      	bne.n	29f24 <mktime+0x28c>
   29e6c:	1a1b      	subs	r3, r3, r0
   29e6e:	b906      	cbnz	r6, 29e72 <mktime+0x1da>
   29e70:	425b      	negs	r3, r3
   29e72:	682a      	ldr	r2, [r5, #0]
   29e74:	4628      	mov	r0, r5
   29e76:	441a      	add	r2, r3
   29e78:	602a      	str	r2, [r5, #0]
   29e7a:	4498      	add	r8, r3
   29e7c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   29e80:	f7ff fe2e 	bl	29ae0 <validate_structure>
   29e84:	68eb      	ldr	r3, [r5, #12]
   29e86:	ebb3 030a 	subs.w	r3, r3, sl
   29e8a:	d04b      	beq.n	29f24 <mktime+0x28c>
   29e8c:	2b01      	cmp	r3, #1
   29e8e:	dc03      	bgt.n	29e98 <mktime+0x200>
   29e90:	1c98      	adds	r0, r3, #2
   29e92:	bfd8      	it	le
   29e94:	2301      	movle	r3, #1
   29e96:	e001      	b.n	29e9c <mktime+0x204>
   29e98:	f04f 33ff 	mov.w	r3, #4294967295
   29e9c:	69ea      	ldr	r2, [r5, #28]
   29e9e:	441c      	add	r4, r3
   29ea0:	189b      	adds	r3, r3, r2
   29ea2:	d51d      	bpl.n	29ee0 <mktime+0x248>
   29ea4:	1e7b      	subs	r3, r7, #1
   29ea6:	0799      	lsls	r1, r3, #30
   29ea8:	d114      	bne.n	29ed4 <mktime+0x23c>
   29eaa:	2164      	movs	r1, #100	; 0x64
   29eac:	fb93 f2f1 	sdiv	r2, r3, r1
   29eb0:	fb01 3312 	mls	r3, r1, r2, r3
   29eb4:	b98b      	cbnz	r3, 29eda <mktime+0x242>
   29eb6:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   29eba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   29ebe:	fb97 f3f2 	sdiv	r3, r7, r2
   29ec2:	fb02 7713 	mls	r7, r2, r3, r7
   29ec6:	2f00      	cmp	r7, #0
   29ec8:	f240 136d 	movw	r3, #365	; 0x16d
   29ecc:	bf18      	it	ne
   29ece:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   29ed2:	e024      	b.n	29f1e <mktime+0x286>
   29ed4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   29ed8:	e021      	b.n	29f1e <mktime+0x286>
   29eda:	f240 136d 	movw	r3, #365	; 0x16d
   29ede:	e01e      	b.n	29f1e <mktime+0x286>
   29ee0:	07ba      	lsls	r2, r7, #30
   29ee2:	d114      	bne.n	29f0e <mktime+0x276>
   29ee4:	2164      	movs	r1, #100	; 0x64
   29ee6:	fb97 f2f1 	sdiv	r2, r7, r1
   29eea:	fb01 7212 	mls	r2, r1, r2, r7
   29eee:	b98a      	cbnz	r2, 29f14 <mktime+0x27c>
   29ef0:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   29ef4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   29ef8:	fb97 f2f1 	sdiv	r2, r7, r1
   29efc:	fb01 7712 	mls	r7, r1, r2, r7
   29f00:	2f00      	cmp	r7, #0
   29f02:	f240 126d 	movw	r2, #365	; 0x16d
   29f06:	bf08      	it	eq
   29f08:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   29f0c:	e004      	b.n	29f18 <mktime+0x280>
   29f0e:	f240 126d 	movw	r2, #365	; 0x16d
   29f12:	e001      	b.n	29f18 <mktime+0x280>
   29f14:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   29f18:	429a      	cmp	r2, r3
   29f1a:	bfd8      	it	le
   29f1c:	1a9b      	suble	r3, r3, r2
   29f1e:	61eb      	str	r3, [r5, #28]
   29f20:	e000      	b.n	29f24 <mktime+0x28c>
   29f22:	4656      	mov	r6, sl
   29f24:	2e01      	cmp	r6, #1
   29f26:	d10a      	bne.n	29f3e <mktime+0x2a6>
   29f28:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   29f2c:	2601      	movs	r6, #1
   29f2e:	eb08 0700 	add.w	r7, r8, r0
   29f32:	e008      	b.n	29f46 <mktime+0x2ae>
   29f34:	f1ba 0f00 	cmp.w	sl, #0
   29f38:	f04f 0600 	mov.w	r6, #0
   29f3c:	da91      	bge.n	29e62 <mktime+0x1ca>
   29f3e:	f8d9 0020 	ldr.w	r0, [r9, #32]
   29f42:	eb08 0700 	add.w	r7, r8, r0
   29f46:	f000 fa88 	bl	2a45a <__tz_unlock>
   29f4a:	3404      	adds	r4, #4
   29f4c:	2307      	movs	r3, #7
   29f4e:	fb94 f3f3 	sdiv	r3, r4, r3
   29f52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   29f56:	1ae4      	subs	r4, r4, r3
   29f58:	bf48      	it	mi
   29f5a:	3407      	addmi	r4, #7
   29f5c:	622e      	str	r6, [r5, #32]
   29f5e:	61ac      	str	r4, [r5, #24]
   29f60:	4638      	mov	r0, r7
   29f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f66:	f04f 30ff 	mov.w	r0, #4294967295
   29f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f6e:	bf00      	nop
   29f70:	0002cf08 	.word	0x0002cf08
   29f74:	00015180 	.word	0x00015180
   29f78:	10000600 	.word	0x10000600

00029f7c <_calloc_r>:
   29f7c:	b538      	push	{r3, r4, r5, lr}
   29f7e:	fb02 f401 	mul.w	r4, r2, r1
   29f82:	4621      	mov	r1, r4
   29f84:	f000 f854 	bl	2a030 <_malloc_r>
   29f88:	4605      	mov	r5, r0
   29f8a:	b118      	cbz	r0, 29f94 <_calloc_r+0x18>
   29f8c:	4622      	mov	r2, r4
   29f8e:	2100      	movs	r1, #0
   29f90:	f7ff fd9d 	bl	29ace <memset>
   29f94:	4628      	mov	r0, r5
   29f96:	bd38      	pop	{r3, r4, r5, pc}

00029f98 <_free_r>:
   29f98:	b538      	push	{r3, r4, r5, lr}
   29f9a:	4605      	mov	r5, r0
   29f9c:	2900      	cmp	r1, #0
   29f9e:	d044      	beq.n	2a02a <_free_r+0x92>
   29fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   29fa4:	1f0c      	subs	r4, r1, #4
   29fa6:	2b00      	cmp	r3, #0
   29fa8:	bfb8      	it	lt
   29faa:	18e4      	addlt	r4, r4, r3
   29fac:	f000 ff9e 	bl	2aeec <__malloc_lock>
   29fb0:	4a1e      	ldr	r2, [pc, #120]	; (2a02c <_free_r+0x94>)
   29fb2:	6813      	ldr	r3, [r2, #0]
   29fb4:	4611      	mov	r1, r2
   29fb6:	b913      	cbnz	r3, 29fbe <_free_r+0x26>
   29fb8:	6063      	str	r3, [r4, #4]
   29fba:	6014      	str	r4, [r2, #0]
   29fbc:	e030      	b.n	2a020 <_free_r+0x88>
   29fbe:	42a3      	cmp	r3, r4
   29fc0:	d90d      	bls.n	29fde <_free_r+0x46>
   29fc2:	6822      	ldr	r2, [r4, #0]
   29fc4:	18a0      	adds	r0, r4, r2
   29fc6:	4283      	cmp	r3, r0
   29fc8:	bf01      	itttt	eq
   29fca:	6818      	ldreq	r0, [r3, #0]
   29fcc:	685b      	ldreq	r3, [r3, #4]
   29fce:	1812      	addeq	r2, r2, r0
   29fd0:	6022      	streq	r2, [r4, #0]
   29fd2:	6063      	str	r3, [r4, #4]
   29fd4:	600c      	str	r4, [r1, #0]
   29fd6:	e023      	b.n	2a020 <_free_r+0x88>
   29fd8:	42a2      	cmp	r2, r4
   29fda:	d803      	bhi.n	29fe4 <_free_r+0x4c>
   29fdc:	4613      	mov	r3, r2
   29fde:	685a      	ldr	r2, [r3, #4]
   29fe0:	2a00      	cmp	r2, #0
   29fe2:	d1f9      	bne.n	29fd8 <_free_r+0x40>
   29fe4:	6818      	ldr	r0, [r3, #0]
   29fe6:	1819      	adds	r1, r3, r0
   29fe8:	42a1      	cmp	r1, r4
   29fea:	d10b      	bne.n	2a004 <_free_r+0x6c>
   29fec:	6821      	ldr	r1, [r4, #0]
   29fee:	4401      	add	r1, r0
   29ff0:	1858      	adds	r0, r3, r1
   29ff2:	4282      	cmp	r2, r0
   29ff4:	6019      	str	r1, [r3, #0]
   29ff6:	d113      	bne.n	2a020 <_free_r+0x88>
   29ff8:	6810      	ldr	r0, [r2, #0]
   29ffa:	6852      	ldr	r2, [r2, #4]
   29ffc:	4401      	add	r1, r0
   29ffe:	6019      	str	r1, [r3, #0]
   2a000:	605a      	str	r2, [r3, #4]
   2a002:	e00d      	b.n	2a020 <_free_r+0x88>
   2a004:	d902      	bls.n	2a00c <_free_r+0x74>
   2a006:	230c      	movs	r3, #12
   2a008:	602b      	str	r3, [r5, #0]
   2a00a:	e009      	b.n	2a020 <_free_r+0x88>
   2a00c:	6821      	ldr	r1, [r4, #0]
   2a00e:	1860      	adds	r0, r4, r1
   2a010:	4282      	cmp	r2, r0
   2a012:	bf01      	itttt	eq
   2a014:	6810      	ldreq	r0, [r2, #0]
   2a016:	6852      	ldreq	r2, [r2, #4]
   2a018:	1809      	addeq	r1, r1, r0
   2a01a:	6021      	streq	r1, [r4, #0]
   2a01c:	6062      	str	r2, [r4, #4]
   2a01e:	605c      	str	r4, [r3, #4]
   2a020:	4628      	mov	r0, r5
   2a022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a026:	f000 bf62 	b.w	2aeee <__malloc_unlock>
   2a02a:	bd38      	pop	{r3, r4, r5, pc}
   2a02c:	100005e0 	.word	0x100005e0

0002a030 <_malloc_r>:
   2a030:	b570      	push	{r4, r5, r6, lr}
   2a032:	1ccd      	adds	r5, r1, #3
   2a034:	f025 0503 	bic.w	r5, r5, #3
   2a038:	3508      	adds	r5, #8
   2a03a:	2d0c      	cmp	r5, #12
   2a03c:	bf38      	it	cc
   2a03e:	250c      	movcc	r5, #12
   2a040:	2d00      	cmp	r5, #0
   2a042:	4606      	mov	r6, r0
   2a044:	db01      	blt.n	2a04a <_malloc_r+0x1a>
   2a046:	42a9      	cmp	r1, r5
   2a048:	d902      	bls.n	2a050 <_malloc_r+0x20>
   2a04a:	230c      	movs	r3, #12
   2a04c:	6033      	str	r3, [r6, #0]
   2a04e:	e046      	b.n	2a0de <_malloc_r+0xae>
   2a050:	f000 ff4c 	bl	2aeec <__malloc_lock>
   2a054:	4b23      	ldr	r3, [pc, #140]	; (2a0e4 <_malloc_r+0xb4>)
   2a056:	681c      	ldr	r4, [r3, #0]
   2a058:	461a      	mov	r2, r3
   2a05a:	4621      	mov	r1, r4
   2a05c:	b1a1      	cbz	r1, 2a088 <_malloc_r+0x58>
   2a05e:	680b      	ldr	r3, [r1, #0]
   2a060:	1b5b      	subs	r3, r3, r5
   2a062:	d40e      	bmi.n	2a082 <_malloc_r+0x52>
   2a064:	2b0b      	cmp	r3, #11
   2a066:	d903      	bls.n	2a070 <_malloc_r+0x40>
   2a068:	600b      	str	r3, [r1, #0]
   2a06a:	18cc      	adds	r4, r1, r3
   2a06c:	50cd      	str	r5, [r1, r3]
   2a06e:	e01e      	b.n	2a0ae <_malloc_r+0x7e>
   2a070:	428c      	cmp	r4, r1
   2a072:	bf0b      	itete	eq
   2a074:	6863      	ldreq	r3, [r4, #4]
   2a076:	684b      	ldrne	r3, [r1, #4]
   2a078:	6013      	streq	r3, [r2, #0]
   2a07a:	6063      	strne	r3, [r4, #4]
   2a07c:	bf18      	it	ne
   2a07e:	460c      	movne	r4, r1
   2a080:	e015      	b.n	2a0ae <_malloc_r+0x7e>
   2a082:	460c      	mov	r4, r1
   2a084:	6849      	ldr	r1, [r1, #4]
   2a086:	e7e9      	b.n	2a05c <_malloc_r+0x2c>
   2a088:	4c17      	ldr	r4, [pc, #92]	; (2a0e8 <_malloc_r+0xb8>)
   2a08a:	6823      	ldr	r3, [r4, #0]
   2a08c:	b91b      	cbnz	r3, 2a096 <_malloc_r+0x66>
   2a08e:	4630      	mov	r0, r6
   2a090:	f000 f896 	bl	2a1c0 <_sbrk_r>
   2a094:	6020      	str	r0, [r4, #0]
   2a096:	4629      	mov	r1, r5
   2a098:	4630      	mov	r0, r6
   2a09a:	f000 f891 	bl	2a1c0 <_sbrk_r>
   2a09e:	1c43      	adds	r3, r0, #1
   2a0a0:	d018      	beq.n	2a0d4 <_malloc_r+0xa4>
   2a0a2:	1cc4      	adds	r4, r0, #3
   2a0a4:	f024 0403 	bic.w	r4, r4, #3
   2a0a8:	42a0      	cmp	r0, r4
   2a0aa:	d10d      	bne.n	2a0c8 <_malloc_r+0x98>
   2a0ac:	6025      	str	r5, [r4, #0]
   2a0ae:	4630      	mov	r0, r6
   2a0b0:	f000 ff1d 	bl	2aeee <__malloc_unlock>
   2a0b4:	f104 000b 	add.w	r0, r4, #11
   2a0b8:	1d23      	adds	r3, r4, #4
   2a0ba:	f020 0007 	bic.w	r0, r0, #7
   2a0be:	1ac3      	subs	r3, r0, r3
   2a0c0:	d00e      	beq.n	2a0e0 <_malloc_r+0xb0>
   2a0c2:	425a      	negs	r2, r3
   2a0c4:	50e2      	str	r2, [r4, r3]
   2a0c6:	bd70      	pop	{r4, r5, r6, pc}
   2a0c8:	1a21      	subs	r1, r4, r0
   2a0ca:	4630      	mov	r0, r6
   2a0cc:	f000 f878 	bl	2a1c0 <_sbrk_r>
   2a0d0:	3001      	adds	r0, #1
   2a0d2:	d1eb      	bne.n	2a0ac <_malloc_r+0x7c>
   2a0d4:	230c      	movs	r3, #12
   2a0d6:	6033      	str	r3, [r6, #0]
   2a0d8:	4630      	mov	r0, r6
   2a0da:	f000 ff08 	bl	2aeee <__malloc_unlock>
   2a0de:	2000      	movs	r0, #0
   2a0e0:	bd70      	pop	{r4, r5, r6, pc}
   2a0e2:	bf00      	nop
   2a0e4:	100005e0 	.word	0x100005e0
   2a0e8:	100005dc 	.word	0x100005dc

0002a0ec <_puts_r>:
   2a0ec:	b570      	push	{r4, r5, r6, lr}
   2a0ee:	460e      	mov	r6, r1
   2a0f0:	4605      	mov	r5, r0
   2a0f2:	b118      	cbz	r0, 2a0fc <_puts_r+0x10>
   2a0f4:	6983      	ldr	r3, [r0, #24]
   2a0f6:	b90b      	cbnz	r3, 2a0fc <_puts_r+0x10>
   2a0f8:	f000 fd1e 	bl	2ab38 <__sinit>
   2a0fc:	69ab      	ldr	r3, [r5, #24]
   2a0fe:	68ac      	ldr	r4, [r5, #8]
   2a100:	b913      	cbnz	r3, 2a108 <_puts_r+0x1c>
   2a102:	4628      	mov	r0, r5
   2a104:	f000 fd18 	bl	2ab38 <__sinit>
   2a108:	4b22      	ldr	r3, [pc, #136]	; (2a194 <_puts_r+0xa8>)
   2a10a:	429c      	cmp	r4, r3
   2a10c:	d101      	bne.n	2a112 <_puts_r+0x26>
   2a10e:	686c      	ldr	r4, [r5, #4]
   2a110:	e008      	b.n	2a124 <_puts_r+0x38>
   2a112:	4b21      	ldr	r3, [pc, #132]	; (2a198 <_puts_r+0xac>)
   2a114:	429c      	cmp	r4, r3
   2a116:	d101      	bne.n	2a11c <_puts_r+0x30>
   2a118:	68ac      	ldr	r4, [r5, #8]
   2a11a:	e003      	b.n	2a124 <_puts_r+0x38>
   2a11c:	4b1f      	ldr	r3, [pc, #124]	; (2a19c <_puts_r+0xb0>)
   2a11e:	429c      	cmp	r4, r3
   2a120:	bf08      	it	eq
   2a122:	68ec      	ldreq	r4, [r5, #12]
   2a124:	89a3      	ldrh	r3, [r4, #12]
   2a126:	071b      	lsls	r3, r3, #28
   2a128:	d501      	bpl.n	2a12e <_puts_r+0x42>
   2a12a:	6923      	ldr	r3, [r4, #16]
   2a12c:	b93b      	cbnz	r3, 2a13e <_puts_r+0x52>
   2a12e:	4621      	mov	r1, r4
   2a130:	4628      	mov	r0, r5
   2a132:	f000 fb7f 	bl	2a834 <__swsetup_r>
   2a136:	b110      	cbz	r0, 2a13e <_puts_r+0x52>
   2a138:	f04f 30ff 	mov.w	r0, #4294967295
   2a13c:	bd70      	pop	{r4, r5, r6, pc}
   2a13e:	3e01      	subs	r6, #1
   2a140:	68a3      	ldr	r3, [r4, #8]
   2a142:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   2a146:	3b01      	subs	r3, #1
   2a148:	60a3      	str	r3, [r4, #8]
   2a14a:	b191      	cbz	r1, 2a172 <_puts_r+0x86>
   2a14c:	2b00      	cmp	r3, #0
   2a14e:	da04      	bge.n	2a15a <_puts_r+0x6e>
   2a150:	69a2      	ldr	r2, [r4, #24]
   2a152:	4293      	cmp	r3, r2
   2a154:	db06      	blt.n	2a164 <_puts_r+0x78>
   2a156:	290a      	cmp	r1, #10
   2a158:	d004      	beq.n	2a164 <_puts_r+0x78>
   2a15a:	6823      	ldr	r3, [r4, #0]
   2a15c:	1c5a      	adds	r2, r3, #1
   2a15e:	6022      	str	r2, [r4, #0]
   2a160:	7019      	strb	r1, [r3, #0]
   2a162:	e7ed      	b.n	2a140 <_puts_r+0x54>
   2a164:	4622      	mov	r2, r4
   2a166:	4628      	mov	r0, r5
   2a168:	f000 fafe 	bl	2a768 <__swbuf_r>
   2a16c:	3001      	adds	r0, #1
   2a16e:	d1e7      	bne.n	2a140 <_puts_r+0x54>
   2a170:	e7e2      	b.n	2a138 <_puts_r+0x4c>
   2a172:	2b00      	cmp	r3, #0
   2a174:	da08      	bge.n	2a188 <_puts_r+0x9c>
   2a176:	4622      	mov	r2, r4
   2a178:	210a      	movs	r1, #10
   2a17a:	4628      	mov	r0, r5
   2a17c:	f000 faf4 	bl	2a768 <__swbuf_r>
   2a180:	3001      	adds	r0, #1
   2a182:	d0d9      	beq.n	2a138 <_puts_r+0x4c>
   2a184:	200a      	movs	r0, #10
   2a186:	bd70      	pop	{r4, r5, r6, pc}
   2a188:	6823      	ldr	r3, [r4, #0]
   2a18a:	200a      	movs	r0, #10
   2a18c:	1c5a      	adds	r2, r3, #1
   2a18e:	6022      	str	r2, [r4, #0]
   2a190:	7018      	strb	r0, [r3, #0]
   2a192:	bd70      	pop	{r4, r5, r6, pc}
   2a194:	0002d004 	.word	0x0002d004
   2a198:	0002d024 	.word	0x0002d024
   2a19c:	0002d044 	.word	0x0002d044

0002a1a0 <puts>:
   2a1a0:	4b02      	ldr	r3, [pc, #8]	; (2a1ac <puts+0xc>)
   2a1a2:	4601      	mov	r1, r0
   2a1a4:	6818      	ldr	r0, [r3, #0]
   2a1a6:	f7ff bfa1 	b.w	2a0ec <_puts_r>
   2a1aa:	bf00      	nop
   2a1ac:	100000e8 	.word	0x100000e8

0002a1b0 <realloc>:
   2a1b0:	4b02      	ldr	r3, [pc, #8]	; (2a1bc <realloc+0xc>)
   2a1b2:	460a      	mov	r2, r1
   2a1b4:	4601      	mov	r1, r0
   2a1b6:	6818      	ldr	r0, [r3, #0]
   2a1b8:	f000 be9a 	b.w	2aef0 <_realloc_r>
   2a1bc:	100000e8 	.word	0x100000e8

0002a1c0 <_sbrk_r>:
   2a1c0:	b538      	push	{r3, r4, r5, lr}
   2a1c2:	4c06      	ldr	r4, [pc, #24]	; (2a1dc <_sbrk_r+0x1c>)
   2a1c4:	2300      	movs	r3, #0
   2a1c6:	4605      	mov	r5, r0
   2a1c8:	4608      	mov	r0, r1
   2a1ca:	6023      	str	r3, [r4, #0]
   2a1cc:	f001 feb4 	bl	2bf38 <_sbrk>
   2a1d0:	1c43      	adds	r3, r0, #1
   2a1d2:	d102      	bne.n	2a1da <_sbrk_r+0x1a>
   2a1d4:	6823      	ldr	r3, [r4, #0]
   2a1d6:	b103      	cbz	r3, 2a1da <_sbrk_r+0x1a>
   2a1d8:	602b      	str	r3, [r5, #0]
   2a1da:	bd38      	pop	{r3, r4, r5, pc}
   2a1dc:	10000844 	.word	0x10000844

0002a1e0 <siprintf>:
   2a1e0:	b40e      	push	{r1, r2, r3}
   2a1e2:	b500      	push	{lr}
   2a1e4:	f44f 7102 	mov.w	r1, #520	; 0x208
   2a1e8:	b09c      	sub	sp, #112	; 0x70
   2a1ea:	f8ad 1014 	strh.w	r1, [sp, #20]
   2a1ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2a1f2:	9104      	str	r1, [sp, #16]
   2a1f4:	9107      	str	r1, [sp, #28]
   2a1f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a1fa:	ab1d      	add	r3, sp, #116	; 0x74
   2a1fc:	9002      	str	r0, [sp, #8]
   2a1fe:	9006      	str	r0, [sp, #24]
   2a200:	4808      	ldr	r0, [pc, #32]	; (2a224 <siprintf+0x44>)
   2a202:	f853 2b04 	ldr.w	r2, [r3], #4
   2a206:	f8ad 1016 	strh.w	r1, [sp, #22]
   2a20a:	6800      	ldr	r0, [r0, #0]
   2a20c:	a902      	add	r1, sp, #8
   2a20e:	9301      	str	r3, [sp, #4]
   2a210:	f000 feee 	bl	2aff0 <_svfiprintf_r>
   2a214:	9b02      	ldr	r3, [sp, #8]
   2a216:	2200      	movs	r2, #0
   2a218:	701a      	strb	r2, [r3, #0]
   2a21a:	b01c      	add	sp, #112	; 0x70
   2a21c:	f85d eb04 	ldr.w	lr, [sp], #4
   2a220:	b003      	add	sp, #12
   2a222:	4770      	bx	lr
   2a224:	100000e8 	.word	0x100000e8

0002a228 <siscanf>:
   2a228:	b40e      	push	{r1, r2, r3}
   2a22a:	b530      	push	{r4, r5, lr}
   2a22c:	b09c      	sub	sp, #112	; 0x70
   2a22e:	ac1f      	add	r4, sp, #124	; 0x7c
   2a230:	f44f 7201 	mov.w	r2, #516	; 0x204
   2a234:	f854 5b04 	ldr.w	r5, [r4], #4
   2a238:	f8ad 2014 	strh.w	r2, [sp, #20]
   2a23c:	9002      	str	r0, [sp, #8]
   2a23e:	9006      	str	r0, [sp, #24]
   2a240:	f7d5 ff6e 	bl	120 <strlen>
   2a244:	4b0b      	ldr	r3, [pc, #44]	; (2a274 <siscanf+0x4c>)
   2a246:	9003      	str	r0, [sp, #12]
   2a248:	930b      	str	r3, [sp, #44]	; 0x2c
   2a24a:	2300      	movs	r3, #0
   2a24c:	930f      	str	r3, [sp, #60]	; 0x3c
   2a24e:	9314      	str	r3, [sp, #80]	; 0x50
   2a250:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a254:	9007      	str	r0, [sp, #28]
   2a256:	4808      	ldr	r0, [pc, #32]	; (2a278 <siscanf+0x50>)
   2a258:	f8ad 3016 	strh.w	r3, [sp, #22]
   2a25c:	462a      	mov	r2, r5
   2a25e:	4623      	mov	r3, r4
   2a260:	a902      	add	r1, sp, #8
   2a262:	6800      	ldr	r0, [r0, #0]
   2a264:	9401      	str	r4, [sp, #4]
   2a266:	f001 f813 	bl	2b290 <__ssvfiscanf_r>
   2a26a:	b01c      	add	sp, #112	; 0x70
   2a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a270:	b003      	add	sp, #12
   2a272:	4770      	bx	lr
   2a274:	0002a29f 	.word	0x0002a29f
   2a278:	100000e8 	.word	0x100000e8

0002a27c <__sread>:
   2a27c:	b510      	push	{r4, lr}
   2a27e:	460c      	mov	r4, r1
   2a280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a284:	f001 fc4c 	bl	2bb20 <_read_r>
   2a288:	2800      	cmp	r0, #0
   2a28a:	bfab      	itete	ge
   2a28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2a28e:	89a3      	ldrhlt	r3, [r4, #12]
   2a290:	181b      	addge	r3, r3, r0
   2a292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2a296:	bfac      	ite	ge
   2a298:	6563      	strge	r3, [r4, #84]	; 0x54
   2a29a:	81a3      	strhlt	r3, [r4, #12]
   2a29c:	bd10      	pop	{r4, pc}

0002a29e <__seofread>:
   2a29e:	2000      	movs	r0, #0
   2a2a0:	4770      	bx	lr

0002a2a2 <__swrite>:
   2a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a2a6:	461f      	mov	r7, r3
   2a2a8:	898b      	ldrh	r3, [r1, #12]
   2a2aa:	4605      	mov	r5, r0
   2a2ac:	05db      	lsls	r3, r3, #23
   2a2ae:	460c      	mov	r4, r1
   2a2b0:	4616      	mov	r6, r2
   2a2b2:	d505      	bpl.n	2a2c0 <__swrite+0x1e>
   2a2b4:	2302      	movs	r3, #2
   2a2b6:	2200      	movs	r2, #0
   2a2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a2bc:	f000 fda4 	bl	2ae08 <_lseek_r>
   2a2c0:	89a3      	ldrh	r3, [r4, #12]
   2a2c2:	4632      	mov	r2, r6
   2a2c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2a2c8:	81a3      	strh	r3, [r4, #12]
   2a2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2a2ce:	463b      	mov	r3, r7
   2a2d0:	4628      	mov	r0, r5
   2a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a2d6:	f000 ba9b 	b.w	2a810 <_write_r>

0002a2da <__sseek>:
   2a2da:	b510      	push	{r4, lr}
   2a2dc:	460c      	mov	r4, r1
   2a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a2e2:	f000 fd91 	bl	2ae08 <_lseek_r>
   2a2e6:	1c43      	adds	r3, r0, #1
   2a2e8:	89a3      	ldrh	r3, [r4, #12]
   2a2ea:	bf15      	itete	ne
   2a2ec:	6560      	strne	r0, [r4, #84]	; 0x54
   2a2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2a2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2a2f6:	81a3      	strheq	r3, [r4, #12]
   2a2f8:	bf18      	it	ne
   2a2fa:	81a3      	strhne	r3, [r4, #12]
   2a2fc:	bd10      	pop	{r4, pc}

0002a2fe <__sclose>:
   2a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a302:	f000 bb05 	b.w	2a910 <_close_r>
	...

0002a308 <__tzcalc_limits>:
   2a308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a30c:	4604      	mov	r4, r0
   2a30e:	f000 fce1 	bl	2acd4 <__gettzinfo>
   2a312:	f240 73b1 	movw	r3, #1969	; 0x7b1
   2a316:	429c      	cmp	r4, r3
   2a318:	f340 8096 	ble.w	2a448 <__tzcalc_limits+0x140>
   2a31c:	f240 156d 	movw	r5, #365	; 0x16d
   2a320:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   2a324:	18e3      	adds	r3, r4, r3
   2a326:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   2a32a:	109b      	asrs	r3, r3, #2
   2a32c:	fb05 3502 	mla	r5, r5, r2, r3
   2a330:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   2a334:	f06f 0363 	mvn.w	r3, #99	; 0x63
   2a338:	fb92 f3f3 	sdiv	r3, r2, r3
   2a33c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   2a340:	442b      	add	r3, r5
   2a342:	18a5      	adds	r5, r4, r2
   2a344:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2a348:	fb94 f7f2 	sdiv	r7, r4, r2
   2a34c:	fb95 f5f2 	sdiv	r5, r5, r2
   2a350:	fb02 4717 	mls	r7, r2, r7, r4
   2a354:	441d      	add	r5, r3
   2a356:	2364      	movs	r3, #100	; 0x64
   2a358:	fb94 f6f3 	sdiv	r6, r4, r3
   2a35c:	fab7 fe87 	clz	lr, r7
   2a360:	4601      	mov	r1, r0
   2a362:	fb03 4616 	mls	r6, r3, r6, r4
   2a366:	f100 0338 	add.w	r3, r0, #56	; 0x38
   2a36a:	9301      	str	r3, [sp, #4]
   2a36c:	f004 0303 	and.w	r3, r4, #3
   2a370:	6044      	str	r4, [r0, #4]
   2a372:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   2a376:	9300      	str	r3, [sp, #0]
   2a378:	f04f 0c07 	mov.w	ip, #7
   2a37c:	7a0b      	ldrb	r3, [r1, #8]
   2a37e:	2b4a      	cmp	r3, #74	; 0x4a
   2a380:	d10e      	bne.n	2a3a0 <__tzcalc_limits+0x98>
   2a382:	694b      	ldr	r3, [r1, #20]
   2a384:	9a00      	ldr	r2, [sp, #0]
   2a386:	18ec      	adds	r4, r5, r3
   2a388:	b902      	cbnz	r2, 2a38c <__tzcalc_limits+0x84>
   2a38a:	b906      	cbnz	r6, 2a38e <__tzcalc_limits+0x86>
   2a38c:	b927      	cbnz	r7, 2a398 <__tzcalc_limits+0x90>
   2a38e:	2b3b      	cmp	r3, #59	; 0x3b
   2a390:	bfd4      	ite	le
   2a392:	2300      	movle	r3, #0
   2a394:	2301      	movgt	r3, #1
   2a396:	e000      	b.n	2a39a <__tzcalc_limits+0x92>
   2a398:	2300      	movs	r3, #0
   2a39a:	4423      	add	r3, r4
   2a39c:	3b01      	subs	r3, #1
   2a39e:	e03f      	b.n	2a420 <__tzcalc_limits+0x118>
   2a3a0:	2b44      	cmp	r3, #68	; 0x44
   2a3a2:	d102      	bne.n	2a3aa <__tzcalc_limits+0xa2>
   2a3a4:	694b      	ldr	r3, [r1, #20]
   2a3a6:	442b      	add	r3, r5
   2a3a8:	e03a      	b.n	2a420 <__tzcalc_limits+0x118>
   2a3aa:	9b00      	ldr	r3, [sp, #0]
   2a3ac:	b92b      	cbnz	r3, 2a3ba <__tzcalc_limits+0xb2>
   2a3ae:	2e00      	cmp	r6, #0
   2a3b0:	bf0c      	ite	eq
   2a3b2:	46f0      	moveq	r8, lr
   2a3b4:	f04f 0801 	movne.w	r8, #1
   2a3b8:	e000      	b.n	2a3bc <__tzcalc_limits+0xb4>
   2a3ba:	46f0      	mov	r8, lr
   2a3bc:	46a9      	mov	r9, r5
   2a3be:	4b24      	ldr	r3, [pc, #144]	; (2a450 <__tzcalc_limits+0x148>)
   2a3c0:	2230      	movs	r2, #48	; 0x30
   2a3c2:	fb02 3808 	mla	r8, r2, r8, r3
   2a3c6:	68cc      	ldr	r4, [r1, #12]
   2a3c8:	f1a8 0a04 	sub.w	sl, r8, #4
   2a3cc:	2301      	movs	r3, #1
   2a3ce:	42a3      	cmp	r3, r4
   2a3d0:	da04      	bge.n	2a3dc <__tzcalc_limits+0xd4>
   2a3d2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   2a3d6:	3301      	adds	r3, #1
   2a3d8:	44d9      	add	r9, fp
   2a3da:	e7f8      	b.n	2a3ce <__tzcalc_limits+0xc6>
   2a3dc:	f109 0304 	add.w	r3, r9, #4
   2a3e0:	fb93 fbfc 	sdiv	fp, r3, ip
   2a3e4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   2a3e8:	ebca 0a03 	rsb	sl, sl, r3
   2a3ec:	694b      	ldr	r3, [r1, #20]
   2a3ee:	2c01      	cmp	r4, #1
   2a3f0:	bfb8      	it	lt
   2a3f2:	2401      	movlt	r4, #1
   2a3f4:	ebb3 0a0a 	subs.w	sl, r3, sl
   2a3f8:	690b      	ldr	r3, [r1, #16]
   2a3fa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   2a3fe:	f103 33ff 	add.w	r3, r3, #4294967295
   2a402:	f104 34ff 	add.w	r4, r4, #4294967295
   2a406:	bf48      	it	mi
   2a408:	f10a 0a07 	addmi.w	sl, sl, #7
   2a40c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2a410:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   2a414:	4453      	add	r3, sl
   2a416:	42a3      	cmp	r3, r4
   2a418:	db01      	blt.n	2a41e <__tzcalc_limits+0x116>
   2a41a:	3b07      	subs	r3, #7
   2a41c:	e7fb      	b.n	2a416 <__tzcalc_limits+0x10e>
   2a41e:	444b      	add	r3, r9
   2a420:	698c      	ldr	r4, [r1, #24]
   2a422:	4a0c      	ldr	r2, [pc, #48]	; (2a454 <__tzcalc_limits+0x14c>)
   2a424:	fb02 4303 	mla	r3, r2, r3, r4
   2a428:	6a0c      	ldr	r4, [r1, #32]
   2a42a:	4423      	add	r3, r4
   2a42c:	f841 3f1c 	str.w	r3, [r1, #28]!
   2a430:	9b01      	ldr	r3, [sp, #4]
   2a432:	4299      	cmp	r1, r3
   2a434:	d1a2      	bne.n	2a37c <__tzcalc_limits+0x74>
   2a436:	69c3      	ldr	r3, [r0, #28]
   2a438:	6b82      	ldr	r2, [r0, #56]	; 0x38
   2a43a:	4293      	cmp	r3, r2
   2a43c:	bfac      	ite	ge
   2a43e:	2300      	movge	r3, #0
   2a440:	2301      	movlt	r3, #1
   2a442:	6003      	str	r3, [r0, #0]
   2a444:	2001      	movs	r0, #1
   2a446:	e000      	b.n	2a44a <__tzcalc_limits+0x142>
   2a448:	2000      	movs	r0, #0
   2a44a:	b003      	add	sp, #12
   2a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a450:	0002cf68 	.word	0x0002cf68
   2a454:	00015180 	.word	0x00015180

0002a458 <__tz_lock>:
   2a458:	4770      	bx	lr

0002a45a <__tz_unlock>:
   2a45a:	4770      	bx	lr

0002a45c <_tzset_unlocked>:
   2a45c:	4b01      	ldr	r3, [pc, #4]	; (2a464 <_tzset_unlocked+0x8>)
   2a45e:	6818      	ldr	r0, [r3, #0]
   2a460:	f000 b802 	b.w	2a468 <_tzset_unlocked_r>
   2a464:	100000e8 	.word	0x100000e8

0002a468 <_tzset_unlocked_r>:
   2a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a46c:	b08d      	sub	sp, #52	; 0x34
   2a46e:	4607      	mov	r7, r0
   2a470:	f000 fc30 	bl	2acd4 <__gettzinfo>
   2a474:	49b0      	ldr	r1, [pc, #704]	; (2a738 <_tzset_unlocked_r+0x2d0>)
   2a476:	4604      	mov	r4, r0
   2a478:	4638      	mov	r0, r7
   2a47a:	f000 fc23 	bl	2acc4 <_getenv_r>
   2a47e:	4eaf      	ldr	r6, [pc, #700]	; (2a73c <_tzset_unlocked_r+0x2d4>)
   2a480:	4605      	mov	r5, r0
   2a482:	b960      	cbnz	r0, 2a49e <_tzset_unlocked_r+0x36>
   2a484:	4bae      	ldr	r3, [pc, #696]	; (2a740 <_tzset_unlocked_r+0x2d8>)
   2a486:	4aaf      	ldr	r2, [pc, #700]	; (2a744 <_tzset_unlocked_r+0x2dc>)
   2a488:	6018      	str	r0, [r3, #0]
   2a48a:	4baf      	ldr	r3, [pc, #700]	; (2a748 <_tzset_unlocked_r+0x2e0>)
   2a48c:	6018      	str	r0, [r3, #0]
   2a48e:	4baf      	ldr	r3, [pc, #700]	; (2a74c <_tzset_unlocked_r+0x2e4>)
   2a490:	6830      	ldr	r0, [r6, #0]
   2a492:	601a      	str	r2, [r3, #0]
   2a494:	605a      	str	r2, [r3, #4]
   2a496:	f7ff fadd 	bl	29a54 <free>
   2a49a:	6035      	str	r5, [r6, #0]
   2a49c:	e148      	b.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a49e:	6831      	ldr	r1, [r6, #0]
   2a4a0:	b979      	cbnz	r1, 2a4c2 <_tzset_unlocked_r+0x5a>
   2a4a2:	6830      	ldr	r0, [r6, #0]
   2a4a4:	f7ff fad6 	bl	29a54 <free>
   2a4a8:	4628      	mov	r0, r5
   2a4aa:	f7d5 fe39 	bl	120 <strlen>
   2a4ae:	1c41      	adds	r1, r0, #1
   2a4b0:	4638      	mov	r0, r7
   2a4b2:	f7ff fdbd 	bl	2a030 <_malloc_r>
   2a4b6:	6030      	str	r0, [r6, #0]
   2a4b8:	b148      	cbz	r0, 2a4ce <_tzset_unlocked_r+0x66>
   2a4ba:	4629      	mov	r1, r5
   2a4bc:	f001 fb72 	bl	2bba4 <strcpy>
   2a4c0:	e005      	b.n	2a4ce <_tzset_unlocked_r+0x66>
   2a4c2:	f7d5 fe23 	bl	10c <strcmp>
   2a4c6:	2800      	cmp	r0, #0
   2a4c8:	f000 8132 	beq.w	2a730 <_tzset_unlocked_r+0x2c8>
   2a4cc:	e7e9      	b.n	2a4a2 <_tzset_unlocked_r+0x3a>
   2a4ce:	782b      	ldrb	r3, [r5, #0]
   2a4d0:	ae0a      	add	r6, sp, #40	; 0x28
   2a4d2:	2b3a      	cmp	r3, #58	; 0x3a
   2a4d4:	bf08      	it	eq
   2a4d6:	3501      	addeq	r5, #1
   2a4d8:	4633      	mov	r3, r6
   2a4da:	4a9d      	ldr	r2, [pc, #628]	; (2a750 <_tzset_unlocked_r+0x2e8>)
   2a4dc:	499d      	ldr	r1, [pc, #628]	; (2a754 <_tzset_unlocked_r+0x2ec>)
   2a4de:	4628      	mov	r0, r5
   2a4e0:	f7ff fea2 	bl	2a228 <siscanf>
   2a4e4:	2800      	cmp	r0, #0
   2a4e6:	f340 8123 	ble.w	2a730 <_tzset_unlocked_r+0x2c8>
   2a4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a4ec:	18ef      	adds	r7, r5, r3
   2a4ee:	5ceb      	ldrb	r3, [r5, r3]
   2a4f0:	2b2d      	cmp	r3, #45	; 0x2d
   2a4f2:	d103      	bne.n	2a4fc <_tzset_unlocked_r+0x94>
   2a4f4:	3701      	adds	r7, #1
   2a4f6:	f04f 35ff 	mov.w	r5, #4294967295
   2a4fa:	e003      	b.n	2a504 <_tzset_unlocked_r+0x9c>
   2a4fc:	2b2b      	cmp	r3, #43	; 0x2b
   2a4fe:	bf08      	it	eq
   2a500:	3701      	addeq	r7, #1
   2a502:	2501      	movs	r5, #1
   2a504:	f10d 0a20 	add.w	sl, sp, #32
   2a508:	f10d 0b1e 	add.w	fp, sp, #30
   2a50c:	f04f 0800 	mov.w	r8, #0
   2a510:	9603      	str	r6, [sp, #12]
   2a512:	f8cd a008 	str.w	sl, [sp, #8]
   2a516:	9601      	str	r6, [sp, #4]
   2a518:	f8cd b000 	str.w	fp, [sp]
   2a51c:	4633      	mov	r3, r6
   2a51e:	aa07      	add	r2, sp, #28
   2a520:	498d      	ldr	r1, [pc, #564]	; (2a758 <_tzset_unlocked_r+0x2f0>)
   2a522:	4638      	mov	r0, r7
   2a524:	f8ad 801e 	strh.w	r8, [sp, #30]
   2a528:	f8ad 8020 	strh.w	r8, [sp, #32]
   2a52c:	f7ff fe7c 	bl	2a228 <siscanf>
   2a530:	4540      	cmp	r0, r8
   2a532:	f340 80fd 	ble.w	2a730 <_tzset_unlocked_r+0x2c8>
   2a536:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2a53a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2a53e:	213c      	movs	r1, #60	; 0x3c
   2a540:	fb01 3302 	mla	r3, r1, r2, r3
   2a544:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2a548:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2a54c:	fb01 3302 	mla	r3, r1, r2, r3
   2a550:	435d      	muls	r5, r3
   2a552:	4b7f      	ldr	r3, [pc, #508]	; (2a750 <_tzset_unlocked_r+0x2e8>)
   2a554:	6225      	str	r5, [r4, #32]
   2a556:	4d7d      	ldr	r5, [pc, #500]	; (2a74c <_tzset_unlocked_r+0x2e4>)
   2a558:	f8df 9208 	ldr.w	r9, [pc, #520]	; 2a764 <_tzset_unlocked_r+0x2fc>
   2a55c:	602b      	str	r3, [r5, #0]
   2a55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a560:	464a      	mov	r2, r9
   2a562:	441f      	add	r7, r3
   2a564:	497b      	ldr	r1, [pc, #492]	; (2a754 <_tzset_unlocked_r+0x2ec>)
   2a566:	4633      	mov	r3, r6
   2a568:	4638      	mov	r0, r7
   2a56a:	f7ff fe5d 	bl	2a228 <siscanf>
   2a56e:	4540      	cmp	r0, r8
   2a570:	dc08      	bgt.n	2a584 <_tzset_unlocked_r+0x11c>
   2a572:	682b      	ldr	r3, [r5, #0]
   2a574:	6a22      	ldr	r2, [r4, #32]
   2a576:	606b      	str	r3, [r5, #4]
   2a578:	4b71      	ldr	r3, [pc, #452]	; (2a740 <_tzset_unlocked_r+0x2d8>)
   2a57a:	601a      	str	r2, [r3, #0]
   2a57c:	4b72      	ldr	r3, [pc, #456]	; (2a748 <_tzset_unlocked_r+0x2e0>)
   2a57e:	f8c3 8000 	str.w	r8, [r3]
   2a582:	e0d5      	b.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a586:	f8c5 9004 	str.w	r9, [r5, #4]
   2a58a:	18fd      	adds	r5, r7, r3
   2a58c:	5cfb      	ldrb	r3, [r7, r3]
   2a58e:	2b2d      	cmp	r3, #45	; 0x2d
   2a590:	d103      	bne.n	2a59a <_tzset_unlocked_r+0x132>
   2a592:	3501      	adds	r5, #1
   2a594:	f04f 37ff 	mov.w	r7, #4294967295
   2a598:	e003      	b.n	2a5a2 <_tzset_unlocked_r+0x13a>
   2a59a:	2b2b      	cmp	r3, #43	; 0x2b
   2a59c:	bf08      	it	eq
   2a59e:	3501      	addeq	r5, #1
   2a5a0:	2701      	movs	r7, #1
   2a5a2:	2300      	movs	r3, #0
   2a5a4:	f8ad 301c 	strh.w	r3, [sp, #28]
   2a5a8:	f8ad 301e 	strh.w	r3, [sp, #30]
   2a5ac:	f8ad 3020 	strh.w	r3, [sp, #32]
   2a5b0:	930a      	str	r3, [sp, #40]	; 0x28
   2a5b2:	9603      	str	r6, [sp, #12]
   2a5b4:	f8cd a008 	str.w	sl, [sp, #8]
   2a5b8:	9601      	str	r6, [sp, #4]
   2a5ba:	f8cd b000 	str.w	fp, [sp]
   2a5be:	4633      	mov	r3, r6
   2a5c0:	aa07      	add	r2, sp, #28
   2a5c2:	4965      	ldr	r1, [pc, #404]	; (2a758 <_tzset_unlocked_r+0x2f0>)
   2a5c4:	4628      	mov	r0, r5
   2a5c6:	f7ff fe2f 	bl	2a228 <siscanf>
   2a5ca:	2800      	cmp	r0, #0
   2a5cc:	dc04      	bgt.n	2a5d8 <_tzset_unlocked_r+0x170>
   2a5ce:	6a23      	ldr	r3, [r4, #32]
   2a5d0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   2a5d4:	63e3      	str	r3, [r4, #60]	; 0x3c
   2a5d6:	e00e      	b.n	2a5f6 <_tzset_unlocked_r+0x18e>
   2a5d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2a5dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2a5e0:	213c      	movs	r1, #60	; 0x3c
   2a5e2:	fb01 3302 	mla	r3, r1, r2, r3
   2a5e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2a5ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2a5ee:	fb01 3302 	mla	r3, r1, r2, r3
   2a5f2:	435f      	muls	r7, r3
   2a5f4:	63e7      	str	r7, [r4, #60]	; 0x3c
   2a5f6:	4627      	mov	r7, r4
   2a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a5fa:	f04f 0900 	mov.w	r9, #0
   2a5fe:	441d      	add	r5, r3
   2a600:	782b      	ldrb	r3, [r5, #0]
   2a602:	2b2c      	cmp	r3, #44	; 0x2c
   2a604:	bf08      	it	eq
   2a606:	3501      	addeq	r5, #1
   2a608:	f895 8000 	ldrb.w	r8, [r5]
   2a60c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   2a610:	d126      	bne.n	2a660 <_tzset_unlocked_r+0x1f8>
   2a612:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   2a616:	9302      	str	r3, [sp, #8]
   2a618:	ab09      	add	r3, sp, #36	; 0x24
   2a61a:	9300      	str	r3, [sp, #0]
   2a61c:	9603      	str	r6, [sp, #12]
   2a61e:	9601      	str	r6, [sp, #4]
   2a620:	4633      	mov	r3, r6
   2a622:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   2a626:	494d      	ldr	r1, [pc, #308]	; (2a75c <_tzset_unlocked_r+0x2f4>)
   2a628:	4628      	mov	r0, r5
   2a62a:	f7ff fdfd 	bl	2a228 <siscanf>
   2a62e:	2803      	cmp	r0, #3
   2a630:	d17e      	bne.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a632:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2a636:	1e4b      	subs	r3, r1, #1
   2a638:	2b0b      	cmp	r3, #11
   2a63a:	d879      	bhi.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a63c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2a640:	1e53      	subs	r3, r2, #1
   2a642:	2b04      	cmp	r3, #4
   2a644:	d874      	bhi.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a646:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   2a64a:	2b06      	cmp	r3, #6
   2a64c:	d870      	bhi.n	2a730 <_tzset_unlocked_r+0x2c8>
   2a64e:	f887 8008 	strb.w	r8, [r7, #8]
   2a652:	60f9      	str	r1, [r7, #12]
   2a654:	613a      	str	r2, [r7, #16]
   2a656:	617b      	str	r3, [r7, #20]
   2a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a65a:	eb05 0803 	add.w	r8, r5, r3
   2a65e:	e02a      	b.n	2a6b6 <_tzset_unlocked_r+0x24e>
   2a660:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   2a664:	bf06      	itte	eq
   2a666:	4643      	moveq	r3, r8
   2a668:	3501      	addeq	r5, #1
   2a66a:	2344      	movne	r3, #68	; 0x44
   2a66c:	220a      	movs	r2, #10
   2a66e:	a90b      	add	r1, sp, #44	; 0x2c
   2a670:	4628      	mov	r0, r5
   2a672:	9305      	str	r3, [sp, #20]
   2a674:	f001 fbb8 	bl	2bde8 <strtoul>
   2a678:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2a67c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   2a680:	4545      	cmp	r5, r8
   2a682:	9b05      	ldr	r3, [sp, #20]
   2a684:	d114      	bne.n	2a6b0 <_tzset_unlocked_r+0x248>
   2a686:	234d      	movs	r3, #77	; 0x4d
   2a688:	f1b9 0f00 	cmp.w	r9, #0
   2a68c:	d107      	bne.n	2a69e <_tzset_unlocked_r+0x236>
   2a68e:	7223      	strb	r3, [r4, #8]
   2a690:	2303      	movs	r3, #3
   2a692:	60e3      	str	r3, [r4, #12]
   2a694:	2302      	movs	r3, #2
   2a696:	6123      	str	r3, [r4, #16]
   2a698:	f8c4 9014 	str.w	r9, [r4, #20]
   2a69c:	e00b      	b.n	2a6b6 <_tzset_unlocked_r+0x24e>
   2a69e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   2a6a2:	230b      	movs	r3, #11
   2a6a4:	62a3      	str	r3, [r4, #40]	; 0x28
   2a6a6:	2301      	movs	r3, #1
   2a6a8:	62e3      	str	r3, [r4, #44]	; 0x2c
   2a6aa:	2300      	movs	r3, #0
   2a6ac:	6323      	str	r3, [r4, #48]	; 0x30
   2a6ae:	e002      	b.n	2a6b6 <_tzset_unlocked_r+0x24e>
   2a6b0:	b280      	uxth	r0, r0
   2a6b2:	723b      	strb	r3, [r7, #8]
   2a6b4:	6178      	str	r0, [r7, #20]
   2a6b6:	2302      	movs	r3, #2
   2a6b8:	f8ad 301c 	strh.w	r3, [sp, #28]
   2a6bc:	2300      	movs	r3, #0
   2a6be:	f8ad 301e 	strh.w	r3, [sp, #30]
   2a6c2:	f8ad 3020 	strh.w	r3, [sp, #32]
   2a6c6:	930a      	str	r3, [sp, #40]	; 0x28
   2a6c8:	f898 3000 	ldrb.w	r3, [r8]
   2a6cc:	2b2f      	cmp	r3, #47	; 0x2f
   2a6ce:	d10b      	bne.n	2a6e8 <_tzset_unlocked_r+0x280>
   2a6d0:	9603      	str	r6, [sp, #12]
   2a6d2:	f8cd a008 	str.w	sl, [sp, #8]
   2a6d6:	9601      	str	r6, [sp, #4]
   2a6d8:	f8cd b000 	str.w	fp, [sp]
   2a6dc:	4633      	mov	r3, r6
   2a6de:	aa07      	add	r2, sp, #28
   2a6e0:	491f      	ldr	r1, [pc, #124]	; (2a760 <_tzset_unlocked_r+0x2f8>)
   2a6e2:	4640      	mov	r0, r8
   2a6e4:	f7ff fda0 	bl	2a228 <siscanf>
   2a6e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2a6ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2a6f0:	213c      	movs	r1, #60	; 0x3c
   2a6f2:	fb01 3302 	mla	r3, r1, r2, r3
   2a6f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2a6fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2a6fe:	fb01 3302 	mla	r3, r1, r2, r3
   2a702:	61bb      	str	r3, [r7, #24]
   2a704:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2a706:	f109 0901 	add.w	r9, r9, #1
   2a70a:	f1b9 0f02 	cmp.w	r9, #2
   2a70e:	4445      	add	r5, r8
   2a710:	f107 071c 	add.w	r7, r7, #28
   2a714:	f47f af74 	bne.w	2a600 <_tzset_unlocked_r+0x198>
   2a718:	6860      	ldr	r0, [r4, #4]
   2a71a:	f7ff fdf5 	bl	2a308 <__tzcalc_limits>
   2a71e:	6a22      	ldr	r2, [r4, #32]
   2a720:	4b07      	ldr	r3, [pc, #28]	; (2a740 <_tzset_unlocked_r+0x2d8>)
   2a722:	601a      	str	r2, [r3, #0]
   2a724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2a726:	1a9b      	subs	r3, r3, r2
   2a728:	4a07      	ldr	r2, [pc, #28]	; (2a748 <_tzset_unlocked_r+0x2e0>)
   2a72a:	bf18      	it	ne
   2a72c:	2301      	movne	r3, #1
   2a72e:	6013      	str	r3, [r2, #0]
   2a730:	b00d      	add	sp, #52	; 0x34
   2a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a736:	bf00      	nop
   2a738:	0002cfc8 	.word	0x0002cfc8
   2a73c:	100005fc 	.word	0x100005fc
   2a740:	10000604 	.word	0x10000604
   2a744:	0002cfcb 	.word	0x0002cfcb
   2a748:	10000600 	.word	0x10000600
   2a74c:	100000ec 	.word	0x100000ec
   2a750:	100005ef 	.word	0x100005ef
   2a754:	0002cfcf 	.word	0x0002cfcf
   2a758:	0002cff2 	.word	0x0002cff2
   2a75c:	0002cfde 	.word	0x0002cfde
   2a760:	0002cff1 	.word	0x0002cff1
   2a764:	100005e4 	.word	0x100005e4

0002a768 <__swbuf_r>:
   2a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a76a:	460f      	mov	r7, r1
   2a76c:	4614      	mov	r4, r2
   2a76e:	4606      	mov	r6, r0
   2a770:	b118      	cbz	r0, 2a77a <__swbuf_r+0x12>
   2a772:	6983      	ldr	r3, [r0, #24]
   2a774:	b90b      	cbnz	r3, 2a77a <__swbuf_r+0x12>
   2a776:	f000 f9df 	bl	2ab38 <__sinit>
   2a77a:	4b22      	ldr	r3, [pc, #136]	; (2a804 <__swbuf_r+0x9c>)
   2a77c:	429c      	cmp	r4, r3
   2a77e:	d101      	bne.n	2a784 <__swbuf_r+0x1c>
   2a780:	6874      	ldr	r4, [r6, #4]
   2a782:	e008      	b.n	2a796 <__swbuf_r+0x2e>
   2a784:	4b20      	ldr	r3, [pc, #128]	; (2a808 <__swbuf_r+0xa0>)
   2a786:	429c      	cmp	r4, r3
   2a788:	d101      	bne.n	2a78e <__swbuf_r+0x26>
   2a78a:	68b4      	ldr	r4, [r6, #8]
   2a78c:	e003      	b.n	2a796 <__swbuf_r+0x2e>
   2a78e:	4b1f      	ldr	r3, [pc, #124]	; (2a80c <__swbuf_r+0xa4>)
   2a790:	429c      	cmp	r4, r3
   2a792:	bf08      	it	eq
   2a794:	68f4      	ldreq	r4, [r6, #12]
   2a796:	69a3      	ldr	r3, [r4, #24]
   2a798:	60a3      	str	r3, [r4, #8]
   2a79a:	89a3      	ldrh	r3, [r4, #12]
   2a79c:	071a      	lsls	r2, r3, #28
   2a79e:	d509      	bpl.n	2a7b4 <__swbuf_r+0x4c>
   2a7a0:	6923      	ldr	r3, [r4, #16]
   2a7a2:	b13b      	cbz	r3, 2a7b4 <__swbuf_r+0x4c>
   2a7a4:	6823      	ldr	r3, [r4, #0]
   2a7a6:	6920      	ldr	r0, [r4, #16]
   2a7a8:	b2fd      	uxtb	r5, r7
   2a7aa:	1a18      	subs	r0, r3, r0
   2a7ac:	6963      	ldr	r3, [r4, #20]
   2a7ae:	4298      	cmp	r0, r3
   2a7b0:	db0f      	blt.n	2a7d2 <__swbuf_r+0x6a>
   2a7b2:	e008      	b.n	2a7c6 <__swbuf_r+0x5e>
   2a7b4:	4621      	mov	r1, r4
   2a7b6:	4630      	mov	r0, r6
   2a7b8:	f000 f83c 	bl	2a834 <__swsetup_r>
   2a7bc:	2800      	cmp	r0, #0
   2a7be:	d0f1      	beq.n	2a7a4 <__swbuf_r+0x3c>
   2a7c0:	f04f 30ff 	mov.w	r0, #4294967295
   2a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a7c6:	4621      	mov	r1, r4
   2a7c8:	4630      	mov	r0, r6
   2a7ca:	f000 f94b 	bl	2aa64 <_fflush_r>
   2a7ce:	2800      	cmp	r0, #0
   2a7d0:	d1f6      	bne.n	2a7c0 <__swbuf_r+0x58>
   2a7d2:	68a3      	ldr	r3, [r4, #8]
   2a7d4:	3b01      	subs	r3, #1
   2a7d6:	60a3      	str	r3, [r4, #8]
   2a7d8:	6823      	ldr	r3, [r4, #0]
   2a7da:	1c5a      	adds	r2, r3, #1
   2a7dc:	6022      	str	r2, [r4, #0]
   2a7de:	701f      	strb	r7, [r3, #0]
   2a7e0:	6962      	ldr	r2, [r4, #20]
   2a7e2:	1c43      	adds	r3, r0, #1
   2a7e4:	4293      	cmp	r3, r2
   2a7e6:	d004      	beq.n	2a7f2 <__swbuf_r+0x8a>
   2a7e8:	89a3      	ldrh	r3, [r4, #12]
   2a7ea:	07db      	lsls	r3, r3, #31
   2a7ec:	d507      	bpl.n	2a7fe <__swbuf_r+0x96>
   2a7ee:	2d0a      	cmp	r5, #10
   2a7f0:	d105      	bne.n	2a7fe <__swbuf_r+0x96>
   2a7f2:	4621      	mov	r1, r4
   2a7f4:	4630      	mov	r0, r6
   2a7f6:	f000 f935 	bl	2aa64 <_fflush_r>
   2a7fa:	2800      	cmp	r0, #0
   2a7fc:	d1e0      	bne.n	2a7c0 <__swbuf_r+0x58>
   2a7fe:	4628      	mov	r0, r5
   2a800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a802:	bf00      	nop
   2a804:	0002d004 	.word	0x0002d004
   2a808:	0002d024 	.word	0x0002d024
   2a80c:	0002d044 	.word	0x0002d044

0002a810 <_write_r>:
   2a810:	b538      	push	{r3, r4, r5, lr}
   2a812:	4c07      	ldr	r4, [pc, #28]	; (2a830 <_write_r+0x20>)
   2a814:	4605      	mov	r5, r0
   2a816:	4608      	mov	r0, r1
   2a818:	4611      	mov	r1, r2
   2a81a:	2200      	movs	r2, #0
   2a81c:	6022      	str	r2, [r4, #0]
   2a81e:	461a      	mov	r2, r3
   2a820:	f001 fb98 	bl	2bf54 <_write>
   2a824:	1c43      	adds	r3, r0, #1
   2a826:	d102      	bne.n	2a82e <_write_r+0x1e>
   2a828:	6823      	ldr	r3, [r4, #0]
   2a82a:	b103      	cbz	r3, 2a82e <_write_r+0x1e>
   2a82c:	602b      	str	r3, [r5, #0]
   2a82e:	bd38      	pop	{r3, r4, r5, pc}
   2a830:	10000844 	.word	0x10000844

0002a834 <__swsetup_r>:
   2a834:	4b32      	ldr	r3, [pc, #200]	; (2a900 <__swsetup_r+0xcc>)
   2a836:	b570      	push	{r4, r5, r6, lr}
   2a838:	681d      	ldr	r5, [r3, #0]
   2a83a:	4606      	mov	r6, r0
   2a83c:	460c      	mov	r4, r1
   2a83e:	b125      	cbz	r5, 2a84a <__swsetup_r+0x16>
   2a840:	69ab      	ldr	r3, [r5, #24]
   2a842:	b913      	cbnz	r3, 2a84a <__swsetup_r+0x16>
   2a844:	4628      	mov	r0, r5
   2a846:	f000 f977 	bl	2ab38 <__sinit>
   2a84a:	4b2e      	ldr	r3, [pc, #184]	; (2a904 <__swsetup_r+0xd0>)
   2a84c:	429c      	cmp	r4, r3
   2a84e:	d101      	bne.n	2a854 <__swsetup_r+0x20>
   2a850:	686c      	ldr	r4, [r5, #4]
   2a852:	e008      	b.n	2a866 <__swsetup_r+0x32>
   2a854:	4b2c      	ldr	r3, [pc, #176]	; (2a908 <__swsetup_r+0xd4>)
   2a856:	429c      	cmp	r4, r3
   2a858:	d101      	bne.n	2a85e <__swsetup_r+0x2a>
   2a85a:	68ac      	ldr	r4, [r5, #8]
   2a85c:	e003      	b.n	2a866 <__swsetup_r+0x32>
   2a85e:	4b2b      	ldr	r3, [pc, #172]	; (2a90c <__swsetup_r+0xd8>)
   2a860:	429c      	cmp	r4, r3
   2a862:	bf08      	it	eq
   2a864:	68ec      	ldreq	r4, [r5, #12]
   2a866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a86a:	b29a      	uxth	r2, r3
   2a86c:	0715      	lsls	r5, r2, #28
   2a86e:	d41d      	bmi.n	2a8ac <__swsetup_r+0x78>
   2a870:	06d0      	lsls	r0, r2, #27
   2a872:	d402      	bmi.n	2a87a <__swsetup_r+0x46>
   2a874:	2209      	movs	r2, #9
   2a876:	6032      	str	r2, [r6, #0]
   2a878:	e03a      	b.n	2a8f0 <__swsetup_r+0xbc>
   2a87a:	0751      	lsls	r1, r2, #29
   2a87c:	d512      	bpl.n	2a8a4 <__swsetup_r+0x70>
   2a87e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a880:	b141      	cbz	r1, 2a894 <__swsetup_r+0x60>
   2a882:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2a886:	4299      	cmp	r1, r3
   2a888:	d002      	beq.n	2a890 <__swsetup_r+0x5c>
   2a88a:	4630      	mov	r0, r6
   2a88c:	f7ff fb84 	bl	29f98 <_free_r>
   2a890:	2300      	movs	r3, #0
   2a892:	6363      	str	r3, [r4, #52]	; 0x34
   2a894:	89a3      	ldrh	r3, [r4, #12]
   2a896:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2a89a:	81a3      	strh	r3, [r4, #12]
   2a89c:	2300      	movs	r3, #0
   2a89e:	6063      	str	r3, [r4, #4]
   2a8a0:	6923      	ldr	r3, [r4, #16]
   2a8a2:	6023      	str	r3, [r4, #0]
   2a8a4:	89a3      	ldrh	r3, [r4, #12]
   2a8a6:	f043 0308 	orr.w	r3, r3, #8
   2a8aa:	81a3      	strh	r3, [r4, #12]
   2a8ac:	6923      	ldr	r3, [r4, #16]
   2a8ae:	b94b      	cbnz	r3, 2a8c4 <__swsetup_r+0x90>
   2a8b0:	89a3      	ldrh	r3, [r4, #12]
   2a8b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2a8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a8ba:	d003      	beq.n	2a8c4 <__swsetup_r+0x90>
   2a8bc:	4621      	mov	r1, r4
   2a8be:	4630      	mov	r0, r6
   2a8c0:	f000 fad8 	bl	2ae74 <__smakebuf_r>
   2a8c4:	89a2      	ldrh	r2, [r4, #12]
   2a8c6:	f012 0301 	ands.w	r3, r2, #1
   2a8ca:	d005      	beq.n	2a8d8 <__swsetup_r+0xa4>
   2a8cc:	2300      	movs	r3, #0
   2a8ce:	60a3      	str	r3, [r4, #8]
   2a8d0:	6963      	ldr	r3, [r4, #20]
   2a8d2:	425b      	negs	r3, r3
   2a8d4:	61a3      	str	r3, [r4, #24]
   2a8d6:	e003      	b.n	2a8e0 <__swsetup_r+0xac>
   2a8d8:	0792      	lsls	r2, r2, #30
   2a8da:	bf58      	it	pl
   2a8dc:	6963      	ldrpl	r3, [r4, #20]
   2a8de:	60a3      	str	r3, [r4, #8]
   2a8e0:	6923      	ldr	r3, [r4, #16]
   2a8e2:	b95b      	cbnz	r3, 2a8fc <__swsetup_r+0xc8>
   2a8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a8e8:	f003 0080 	and.w	r0, r3, #128	; 0x80
   2a8ec:	b280      	uxth	r0, r0
   2a8ee:	b130      	cbz	r0, 2a8fe <__swsetup_r+0xca>
   2a8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a8f4:	81a3      	strh	r3, [r4, #12]
   2a8f6:	f04f 30ff 	mov.w	r0, #4294967295
   2a8fa:	bd70      	pop	{r4, r5, r6, pc}
   2a8fc:	2000      	movs	r0, #0
   2a8fe:	bd70      	pop	{r4, r5, r6, pc}
   2a900:	100000e8 	.word	0x100000e8
   2a904:	0002d004 	.word	0x0002d004
   2a908:	0002d024 	.word	0x0002d024
   2a90c:	0002d044 	.word	0x0002d044

0002a910 <_close_r>:
   2a910:	b538      	push	{r3, r4, r5, lr}
   2a912:	4c06      	ldr	r4, [pc, #24]	; (2a92c <_close_r+0x1c>)
   2a914:	2300      	movs	r3, #0
   2a916:	4605      	mov	r5, r0
   2a918:	4608      	mov	r0, r1
   2a91a:	6023      	str	r3, [r4, #0]
   2a91c:	f001 fae4 	bl	2bee8 <_close>
   2a920:	1c43      	adds	r3, r0, #1
   2a922:	d102      	bne.n	2a92a <_close_r+0x1a>
   2a924:	6823      	ldr	r3, [r4, #0]
   2a926:	b103      	cbz	r3, 2a92a <_close_r+0x1a>
   2a928:	602b      	str	r3, [r5, #0]
   2a92a:	bd38      	pop	{r3, r4, r5, pc}
   2a92c:	10000844 	.word	0x10000844

0002a930 <div>:
   2a930:	b510      	push	{r4, lr}
   2a932:	fb91 f4f2 	sdiv	r4, r1, r2
   2a936:	2900      	cmp	r1, #0
   2a938:	fb02 1314 	mls	r3, r2, r4, r1
   2a93c:	db04      	blt.n	2a948 <div+0x18>
   2a93e:	2b00      	cmp	r3, #0
   2a940:	da07      	bge.n	2a952 <div+0x22>
   2a942:	3401      	adds	r4, #1
   2a944:	1a9b      	subs	r3, r3, r2
   2a946:	e004      	b.n	2a952 <div+0x22>
   2a948:	2b00      	cmp	r3, #0
   2a94a:	bfc4      	itt	gt
   2a94c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   2a950:	189b      	addgt	r3, r3, r2
   2a952:	6004      	str	r4, [r0, #0]
   2a954:	6043      	str	r3, [r0, #4]
   2a956:	bd10      	pop	{r4, pc}

0002a958 <__sflush_r>:
   2a958:	898a      	ldrh	r2, [r1, #12]
   2a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a95e:	4605      	mov	r5, r0
   2a960:	0710      	lsls	r0, r2, #28
   2a962:	460c      	mov	r4, r1
   2a964:	d459      	bmi.n	2aa1a <__sflush_r+0xc2>
   2a966:	684b      	ldr	r3, [r1, #4]
   2a968:	2b00      	cmp	r3, #0
   2a96a:	dc02      	bgt.n	2a972 <__sflush_r+0x1a>
   2a96c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2a96e:	2b00      	cmp	r3, #0
   2a970:	dd17      	ble.n	2a9a2 <__sflush_r+0x4a>
   2a972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2a974:	b1ae      	cbz	r6, 2a9a2 <__sflush_r+0x4a>
   2a976:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   2a97a:	2300      	movs	r3, #0
   2a97c:	b292      	uxth	r2, r2
   2a97e:	682f      	ldr	r7, [r5, #0]
   2a980:	602b      	str	r3, [r5, #0]
   2a982:	b10a      	cbz	r2, 2a988 <__sflush_r+0x30>
   2a984:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2a986:	e015      	b.n	2a9b4 <__sflush_r+0x5c>
   2a988:	6a21      	ldr	r1, [r4, #32]
   2a98a:	2301      	movs	r3, #1
   2a98c:	4628      	mov	r0, r5
   2a98e:	47b0      	blx	r6
   2a990:	1c41      	adds	r1, r0, #1
   2a992:	d10f      	bne.n	2a9b4 <__sflush_r+0x5c>
   2a994:	682b      	ldr	r3, [r5, #0]
   2a996:	b16b      	cbz	r3, 2a9b4 <__sflush_r+0x5c>
   2a998:	2b1d      	cmp	r3, #29
   2a99a:	d001      	beq.n	2a9a0 <__sflush_r+0x48>
   2a99c:	2b16      	cmp	r3, #22
   2a99e:	d103      	bne.n	2a9a8 <__sflush_r+0x50>
   2a9a0:	602f      	str	r7, [r5, #0]
   2a9a2:	2000      	movs	r0, #0
   2a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a9a8:	89a3      	ldrh	r3, [r4, #12]
   2a9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a9ae:	81a3      	strh	r3, [r4, #12]
   2a9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a9b4:	89a3      	ldrh	r3, [r4, #12]
   2a9b6:	075a      	lsls	r2, r3, #29
   2a9b8:	d505      	bpl.n	2a9c6 <__sflush_r+0x6e>
   2a9ba:	6863      	ldr	r3, [r4, #4]
   2a9bc:	1ac0      	subs	r0, r0, r3
   2a9be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a9c0:	b10b      	cbz	r3, 2a9c6 <__sflush_r+0x6e>
   2a9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2a9c4:	1ac0      	subs	r0, r0, r3
   2a9c6:	2300      	movs	r3, #0
   2a9c8:	4602      	mov	r2, r0
   2a9ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2a9cc:	6a21      	ldr	r1, [r4, #32]
   2a9ce:	4628      	mov	r0, r5
   2a9d0:	47b0      	blx	r6
   2a9d2:	1c43      	adds	r3, r0, #1
   2a9d4:	89a3      	ldrh	r3, [r4, #12]
   2a9d6:	d106      	bne.n	2a9e6 <__sflush_r+0x8e>
   2a9d8:	6829      	ldr	r1, [r5, #0]
   2a9da:	291d      	cmp	r1, #29
   2a9dc:	d839      	bhi.n	2aa52 <__sflush_r+0xfa>
   2a9de:	4a20      	ldr	r2, [pc, #128]	; (2aa60 <__sflush_r+0x108>)
   2a9e0:	40ca      	lsrs	r2, r1
   2a9e2:	07d6      	lsls	r6, r2, #31
   2a9e4:	d535      	bpl.n	2aa52 <__sflush_r+0xfa>
   2a9e6:	2200      	movs	r2, #0
   2a9e8:	6062      	str	r2, [r4, #4]
   2a9ea:	6922      	ldr	r2, [r4, #16]
   2a9ec:	04d9      	lsls	r1, r3, #19
   2a9ee:	6022      	str	r2, [r4, #0]
   2a9f0:	d504      	bpl.n	2a9fc <__sflush_r+0xa4>
   2a9f2:	1c42      	adds	r2, r0, #1
   2a9f4:	d101      	bne.n	2a9fa <__sflush_r+0xa2>
   2a9f6:	682b      	ldr	r3, [r5, #0]
   2a9f8:	b903      	cbnz	r3, 2a9fc <__sflush_r+0xa4>
   2a9fa:	6560      	str	r0, [r4, #84]	; 0x54
   2a9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a9fe:	602f      	str	r7, [r5, #0]
   2aa00:	2900      	cmp	r1, #0
   2aa02:	d0ce      	beq.n	2a9a2 <__sflush_r+0x4a>
   2aa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2aa08:	4299      	cmp	r1, r3
   2aa0a:	d002      	beq.n	2aa12 <__sflush_r+0xba>
   2aa0c:	4628      	mov	r0, r5
   2aa0e:	f7ff fac3 	bl	29f98 <_free_r>
   2aa12:	2000      	movs	r0, #0
   2aa14:	6360      	str	r0, [r4, #52]	; 0x34
   2aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aa1a:	690f      	ldr	r7, [r1, #16]
   2aa1c:	2f00      	cmp	r7, #0
   2aa1e:	d0c0      	beq.n	2a9a2 <__sflush_r+0x4a>
   2aa20:	0793      	lsls	r3, r2, #30
   2aa22:	680e      	ldr	r6, [r1, #0]
   2aa24:	bf0c      	ite	eq
   2aa26:	694b      	ldreq	r3, [r1, #20]
   2aa28:	2300      	movne	r3, #0
   2aa2a:	ebc7 0806 	rsb	r8, r7, r6
   2aa2e:	600f      	str	r7, [r1, #0]
   2aa30:	608b      	str	r3, [r1, #8]
   2aa32:	e002      	b.n	2aa3a <__sflush_r+0xe2>
   2aa34:	4407      	add	r7, r0
   2aa36:	ebc0 0808 	rsb	r8, r0, r8
   2aa3a:	f1b8 0f00 	cmp.w	r8, #0
   2aa3e:	ddb0      	ble.n	2a9a2 <__sflush_r+0x4a>
   2aa40:	4643      	mov	r3, r8
   2aa42:	463a      	mov	r2, r7
   2aa44:	6a21      	ldr	r1, [r4, #32]
   2aa46:	4628      	mov	r0, r5
   2aa48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2aa4a:	47b0      	blx	r6
   2aa4c:	2800      	cmp	r0, #0
   2aa4e:	dcf1      	bgt.n	2aa34 <__sflush_r+0xdc>
   2aa50:	89a3      	ldrh	r3, [r4, #12]
   2aa52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2aa56:	81a3      	strh	r3, [r4, #12]
   2aa58:	f04f 30ff 	mov.w	r0, #4294967295
   2aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aa60:	20400001 	.word	0x20400001

0002aa64 <_fflush_r>:
   2aa64:	b538      	push	{r3, r4, r5, lr}
   2aa66:	690b      	ldr	r3, [r1, #16]
   2aa68:	4605      	mov	r5, r0
   2aa6a:	460c      	mov	r4, r1
   2aa6c:	b1db      	cbz	r3, 2aaa6 <_fflush_r+0x42>
   2aa6e:	b118      	cbz	r0, 2aa78 <_fflush_r+0x14>
   2aa70:	6983      	ldr	r3, [r0, #24]
   2aa72:	b90b      	cbnz	r3, 2aa78 <_fflush_r+0x14>
   2aa74:	f000 f860 	bl	2ab38 <__sinit>
   2aa78:	4b0c      	ldr	r3, [pc, #48]	; (2aaac <_fflush_r+0x48>)
   2aa7a:	429c      	cmp	r4, r3
   2aa7c:	d101      	bne.n	2aa82 <_fflush_r+0x1e>
   2aa7e:	686c      	ldr	r4, [r5, #4]
   2aa80:	e008      	b.n	2aa94 <_fflush_r+0x30>
   2aa82:	4b0b      	ldr	r3, [pc, #44]	; (2aab0 <_fflush_r+0x4c>)
   2aa84:	429c      	cmp	r4, r3
   2aa86:	d101      	bne.n	2aa8c <_fflush_r+0x28>
   2aa88:	68ac      	ldr	r4, [r5, #8]
   2aa8a:	e003      	b.n	2aa94 <_fflush_r+0x30>
   2aa8c:	4b09      	ldr	r3, [pc, #36]	; (2aab4 <_fflush_r+0x50>)
   2aa8e:	429c      	cmp	r4, r3
   2aa90:	bf08      	it	eq
   2aa92:	68ec      	ldreq	r4, [r5, #12]
   2aa94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aa98:	b12b      	cbz	r3, 2aaa6 <_fflush_r+0x42>
   2aa9a:	4621      	mov	r1, r4
   2aa9c:	4628      	mov	r0, r5
   2aa9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2aaa2:	f7ff bf59 	b.w	2a958 <__sflush_r>
   2aaa6:	2000      	movs	r0, #0
   2aaa8:	bd38      	pop	{r3, r4, r5, pc}
   2aaaa:	bf00      	nop
   2aaac:	0002d004 	.word	0x0002d004
   2aab0:	0002d024 	.word	0x0002d024
   2aab4:	0002d044 	.word	0x0002d044

0002aab8 <_cleanup_r>:
   2aab8:	4901      	ldr	r1, [pc, #4]	; (2aac0 <_cleanup_r+0x8>)
   2aaba:	f000 b8a9 	b.w	2ac10 <_fwalk_reent>
   2aabe:	bf00      	nop
   2aac0:	0002aa65 	.word	0x0002aa65

0002aac4 <std.isra.0>:
   2aac4:	b510      	push	{r4, lr}
   2aac6:	4604      	mov	r4, r0
   2aac8:	2300      	movs	r3, #0
   2aaca:	6003      	str	r3, [r0, #0]
   2aacc:	6043      	str	r3, [r0, #4]
   2aace:	6083      	str	r3, [r0, #8]
   2aad0:	8181      	strh	r1, [r0, #12]
   2aad2:	6643      	str	r3, [r0, #100]	; 0x64
   2aad4:	81c2      	strh	r2, [r0, #14]
   2aad6:	6103      	str	r3, [r0, #16]
   2aad8:	6143      	str	r3, [r0, #20]
   2aada:	6183      	str	r3, [r0, #24]
   2aadc:	4619      	mov	r1, r3
   2aade:	2208      	movs	r2, #8
   2aae0:	305c      	adds	r0, #92	; 0x5c
   2aae2:	f7fe fff4 	bl	29ace <memset>
   2aae6:	4b05      	ldr	r3, [pc, #20]	; (2aafc <std.isra.0+0x38>)
   2aae8:	6224      	str	r4, [r4, #32]
   2aaea:	6263      	str	r3, [r4, #36]	; 0x24
   2aaec:	4b04      	ldr	r3, [pc, #16]	; (2ab00 <std.isra.0+0x3c>)
   2aaee:	62a3      	str	r3, [r4, #40]	; 0x28
   2aaf0:	4b04      	ldr	r3, [pc, #16]	; (2ab04 <std.isra.0+0x40>)
   2aaf2:	62e3      	str	r3, [r4, #44]	; 0x2c
   2aaf4:	4b04      	ldr	r3, [pc, #16]	; (2ab08 <std.isra.0+0x44>)
   2aaf6:	6323      	str	r3, [r4, #48]	; 0x30
   2aaf8:	bd10      	pop	{r4, pc}
   2aafa:	bf00      	nop
   2aafc:	0002a27d 	.word	0x0002a27d
   2ab00:	0002a2a3 	.word	0x0002a2a3
   2ab04:	0002a2db 	.word	0x0002a2db
   2ab08:	0002a2ff 	.word	0x0002a2ff

0002ab0c <__sfmoreglue>:
   2ab0c:	b570      	push	{r4, r5, r6, lr}
   2ab0e:	2368      	movs	r3, #104	; 0x68
   2ab10:	1e4d      	subs	r5, r1, #1
   2ab12:	435d      	muls	r5, r3
   2ab14:	460e      	mov	r6, r1
   2ab16:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2ab1a:	f7ff fa89 	bl	2a030 <_malloc_r>
   2ab1e:	4604      	mov	r4, r0
   2ab20:	b140      	cbz	r0, 2ab34 <__sfmoreglue+0x28>
   2ab22:	2100      	movs	r1, #0
   2ab24:	e880 0042 	stmia.w	r0, {r1, r6}
   2ab28:	300c      	adds	r0, #12
   2ab2a:	60a0      	str	r0, [r4, #8]
   2ab2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2ab30:	f7fe ffcd 	bl	29ace <memset>
   2ab34:	4620      	mov	r0, r4
   2ab36:	bd70      	pop	{r4, r5, r6, pc}

0002ab38 <__sinit>:
   2ab38:	6983      	ldr	r3, [r0, #24]
   2ab3a:	b510      	push	{r4, lr}
   2ab3c:	4604      	mov	r4, r0
   2ab3e:	bb33      	cbnz	r3, 2ab8e <__sinit+0x56>
   2ab40:	6483      	str	r3, [r0, #72]	; 0x48
   2ab42:	64c3      	str	r3, [r0, #76]	; 0x4c
   2ab44:	6503      	str	r3, [r0, #80]	; 0x50
   2ab46:	4b12      	ldr	r3, [pc, #72]	; (2ab90 <__sinit+0x58>)
   2ab48:	4a12      	ldr	r2, [pc, #72]	; (2ab94 <__sinit+0x5c>)
   2ab4a:	681b      	ldr	r3, [r3, #0]
   2ab4c:	6282      	str	r2, [r0, #40]	; 0x28
   2ab4e:	4298      	cmp	r0, r3
   2ab50:	bf04      	itt	eq
   2ab52:	2301      	moveq	r3, #1
   2ab54:	6183      	streq	r3, [r0, #24]
   2ab56:	f000 f81f 	bl	2ab98 <__sfp>
   2ab5a:	6060      	str	r0, [r4, #4]
   2ab5c:	4620      	mov	r0, r4
   2ab5e:	f000 f81b 	bl	2ab98 <__sfp>
   2ab62:	60a0      	str	r0, [r4, #8]
   2ab64:	4620      	mov	r0, r4
   2ab66:	f000 f817 	bl	2ab98 <__sfp>
   2ab6a:	2200      	movs	r2, #0
   2ab6c:	60e0      	str	r0, [r4, #12]
   2ab6e:	2104      	movs	r1, #4
   2ab70:	6860      	ldr	r0, [r4, #4]
   2ab72:	f7ff ffa7 	bl	2aac4 <std.isra.0>
   2ab76:	2201      	movs	r2, #1
   2ab78:	2109      	movs	r1, #9
   2ab7a:	68a0      	ldr	r0, [r4, #8]
   2ab7c:	f7ff ffa2 	bl	2aac4 <std.isra.0>
   2ab80:	2202      	movs	r2, #2
   2ab82:	2112      	movs	r1, #18
   2ab84:	68e0      	ldr	r0, [r4, #12]
   2ab86:	f7ff ff9d 	bl	2aac4 <std.isra.0>
   2ab8a:	2301      	movs	r3, #1
   2ab8c:	61a3      	str	r3, [r4, #24]
   2ab8e:	bd10      	pop	{r4, pc}
   2ab90:	0002cf04 	.word	0x0002cf04
   2ab94:	0002aab9 	.word	0x0002aab9

0002ab98 <__sfp>:
   2ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab9a:	4b1c      	ldr	r3, [pc, #112]	; (2ac0c <__sfp+0x74>)
   2ab9c:	4607      	mov	r7, r0
   2ab9e:	681e      	ldr	r6, [r3, #0]
   2aba0:	69b3      	ldr	r3, [r6, #24]
   2aba2:	b913      	cbnz	r3, 2abaa <__sfp+0x12>
   2aba4:	4630      	mov	r0, r6
   2aba6:	f7ff ffc7 	bl	2ab38 <__sinit>
   2abaa:	3648      	adds	r6, #72	; 0x48
   2abac:	68b4      	ldr	r4, [r6, #8]
   2abae:	6873      	ldr	r3, [r6, #4]
   2abb0:	3b01      	subs	r3, #1
   2abb2:	d404      	bmi.n	2abbe <__sfp+0x26>
   2abb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2abb8:	b17d      	cbz	r5, 2abda <__sfp+0x42>
   2abba:	3468      	adds	r4, #104	; 0x68
   2abbc:	e7f8      	b.n	2abb0 <__sfp+0x18>
   2abbe:	6833      	ldr	r3, [r6, #0]
   2abc0:	b10b      	cbz	r3, 2abc6 <__sfp+0x2e>
   2abc2:	6836      	ldr	r6, [r6, #0]
   2abc4:	e7f2      	b.n	2abac <__sfp+0x14>
   2abc6:	2104      	movs	r1, #4
   2abc8:	4638      	mov	r0, r7
   2abca:	f7ff ff9f 	bl	2ab0c <__sfmoreglue>
   2abce:	6030      	str	r0, [r6, #0]
   2abd0:	2800      	cmp	r0, #0
   2abd2:	d1f6      	bne.n	2abc2 <__sfp+0x2a>
   2abd4:	230c      	movs	r3, #12
   2abd6:	603b      	str	r3, [r7, #0]
   2abd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2abda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2abde:	81e3      	strh	r3, [r4, #14]
   2abe0:	2301      	movs	r3, #1
   2abe2:	81a3      	strh	r3, [r4, #12]
   2abe4:	6665      	str	r5, [r4, #100]	; 0x64
   2abe6:	6025      	str	r5, [r4, #0]
   2abe8:	60a5      	str	r5, [r4, #8]
   2abea:	6065      	str	r5, [r4, #4]
   2abec:	6125      	str	r5, [r4, #16]
   2abee:	6165      	str	r5, [r4, #20]
   2abf0:	61a5      	str	r5, [r4, #24]
   2abf2:	2208      	movs	r2, #8
   2abf4:	4629      	mov	r1, r5
   2abf6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2abfa:	f7fe ff68 	bl	29ace <memset>
   2abfe:	6365      	str	r5, [r4, #52]	; 0x34
   2ac00:	63a5      	str	r5, [r4, #56]	; 0x38
   2ac02:	64a5      	str	r5, [r4, #72]	; 0x48
   2ac04:	64e5      	str	r5, [r4, #76]	; 0x4c
   2ac06:	4620      	mov	r0, r4
   2ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ac0a:	bf00      	nop
   2ac0c:	0002cf04 	.word	0x0002cf04

0002ac10 <_fwalk_reent>:
   2ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac14:	4680      	mov	r8, r0
   2ac16:	4689      	mov	r9, r1
   2ac18:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2ac1c:	2600      	movs	r6, #0
   2ac1e:	b194      	cbz	r4, 2ac46 <_fwalk_reent+0x36>
   2ac20:	68a5      	ldr	r5, [r4, #8]
   2ac22:	6867      	ldr	r7, [r4, #4]
   2ac24:	3f01      	subs	r7, #1
   2ac26:	d40c      	bmi.n	2ac42 <_fwalk_reent+0x32>
   2ac28:	89ab      	ldrh	r3, [r5, #12]
   2ac2a:	2b01      	cmp	r3, #1
   2ac2c:	d907      	bls.n	2ac3e <_fwalk_reent+0x2e>
   2ac2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2ac32:	3301      	adds	r3, #1
   2ac34:	d003      	beq.n	2ac3e <_fwalk_reent+0x2e>
   2ac36:	4629      	mov	r1, r5
   2ac38:	4640      	mov	r0, r8
   2ac3a:	47c8      	blx	r9
   2ac3c:	4306      	orrs	r6, r0
   2ac3e:	3568      	adds	r5, #104	; 0x68
   2ac40:	e7f0      	b.n	2ac24 <_fwalk_reent+0x14>
   2ac42:	6824      	ldr	r4, [r4, #0]
   2ac44:	e7eb      	b.n	2ac1e <_fwalk_reent+0xe>
   2ac46:	4630      	mov	r0, r6
   2ac48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002ac4c <_findenv_r>:
   2ac4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac50:	4607      	mov	r7, r0
   2ac52:	468b      	mov	fp, r1
   2ac54:	4690      	mov	r8, r2
   2ac56:	f001 f90a 	bl	2be6e <__env_lock>
   2ac5a:	4b19      	ldr	r3, [pc, #100]	; (2acc0 <_findenv_r+0x74>)
   2ac5c:	681d      	ldr	r5, [r3, #0]
   2ac5e:	469a      	mov	sl, r3
   2ac60:	b13d      	cbz	r5, 2ac72 <_findenv_r+0x26>
   2ac62:	465c      	mov	r4, fp
   2ac64:	4623      	mov	r3, r4
   2ac66:	f813 2b01 	ldrb.w	r2, [r3], #1
   2ac6a:	b142      	cbz	r2, 2ac7e <_findenv_r+0x32>
   2ac6c:	2a3d      	cmp	r2, #61	; 0x3d
   2ac6e:	461c      	mov	r4, r3
   2ac70:	d1f8      	bne.n	2ac64 <_findenv_r+0x18>
   2ac72:	4638      	mov	r0, r7
   2ac74:	f001 f8fc 	bl	2be70 <__env_unlock>
   2ac78:	2000      	movs	r0, #0
   2ac7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac7e:	ebcb 0404 	rsb	r4, fp, r4
   2ac82:	46a9      	mov	r9, r5
   2ac84:	f859 0b04 	ldr.w	r0, [r9], #4
   2ac88:	2800      	cmp	r0, #0
   2ac8a:	d0f2      	beq.n	2ac72 <_findenv_r+0x26>
   2ac8c:	4622      	mov	r2, r4
   2ac8e:	4659      	mov	r1, fp
   2ac90:	f000 ff90 	bl	2bbb4 <strncmp>
   2ac94:	b988      	cbnz	r0, 2acba <_findenv_r+0x6e>
   2ac96:	f859 3c04 	ldr.w	r3, [r9, #-4]
   2ac9a:	191e      	adds	r6, r3, r4
   2ac9c:	5d1b      	ldrb	r3, [r3, r4]
   2ac9e:	2b3d      	cmp	r3, #61	; 0x3d
   2aca0:	d10b      	bne.n	2acba <_findenv_r+0x6e>
   2aca2:	f8da 3000 	ldr.w	r3, [sl]
   2aca6:	4638      	mov	r0, r7
   2aca8:	1aed      	subs	r5, r5, r3
   2acaa:	10ad      	asrs	r5, r5, #2
   2acac:	f8c8 5000 	str.w	r5, [r8]
   2acb0:	f001 f8de 	bl	2be70 <__env_unlock>
   2acb4:	1c70      	adds	r0, r6, #1
   2acb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acba:	464d      	mov	r5, r9
   2acbc:	e7e1      	b.n	2ac82 <_findenv_r+0x36>
   2acbe:	bf00      	nop
   2acc0:	10000138 	.word	0x10000138

0002acc4 <_getenv_r>:
   2acc4:	b507      	push	{r0, r1, r2, lr}
   2acc6:	aa01      	add	r2, sp, #4
   2acc8:	f7ff ffc0 	bl	2ac4c <_findenv_r>
   2accc:	b003      	add	sp, #12
   2acce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002acd4 <__gettzinfo>:
   2acd4:	4800      	ldr	r0, [pc, #0]	; (2acd8 <__gettzinfo+0x4>)
   2acd6:	4770      	bx	lr
   2acd8:	100000f4 	.word	0x100000f4

0002acdc <gmtime_r>:
   2acdc:	6802      	ldr	r2, [r0, #0]
   2acde:	4b46      	ldr	r3, [pc, #280]	; (2adf8 <gmtime_r+0x11c>)
   2ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ace2:	fb92 f4f3 	sdiv	r4, r2, r3
   2ace6:	fb03 2214 	mls	r2, r3, r4, r2
   2acea:	2a00      	cmp	r2, #0
   2acec:	bfbc      	itt	lt
   2acee:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   2acf2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   2acf6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   2acfa:	fb92 f3f0 	sdiv	r3, r2, r0
   2acfe:	fb00 2213 	mls	r2, r0, r3, r2
   2ad02:	f04f 003c 	mov.w	r0, #60	; 0x3c
   2ad06:	608b      	str	r3, [r1, #8]
   2ad08:	fb92 f3f0 	sdiv	r3, r2, r0
   2ad0c:	fb00 2213 	mls	r2, r0, r3, r2
   2ad10:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   2ad14:	bfac      	ite	ge
   2ad16:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   2ad1a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   2ad1e:	604b      	str	r3, [r1, #4]
   2ad20:	600a      	str	r2, [r1, #0]
   2ad22:	2307      	movs	r3, #7
   2ad24:	1ce2      	adds	r2, r4, #3
   2ad26:	fb92 f3f3 	sdiv	r3, r2, r3
   2ad2a:	4d34      	ldr	r5, [pc, #208]	; (2adfc <gmtime_r+0x120>)
   2ad2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2ad30:	fb94 f5f5 	sdiv	r5, r4, r5
   2ad34:	1ad3      	subs	r3, r2, r3
   2ad36:	f648 62ac 	movw	r2, #36524	; 0x8eac
   2ad3a:	f240 57b4 	movw	r7, #1460	; 0x5b4
   2ad3e:	618b      	str	r3, [r1, #24]
   2ad40:	4b2f      	ldr	r3, [pc, #188]	; (2ae00 <gmtime_r+0x124>)
   2ad42:	4830      	ldr	r0, [pc, #192]	; (2ae04 <gmtime_r+0x128>)
   2ad44:	fb03 4405 	mla	r4, r3, r5, r4
   2ad48:	fbb4 f2f2 	udiv	r2, r4, r2
   2ad4c:	fbb4 f3f7 	udiv	r3, r4, r7
   2ad50:	fbb4 f0f0 	udiv	r0, r4, r0
   2ad54:	4422      	add	r2, r4
   2ad56:	1ad2      	subs	r2, r2, r3
   2ad58:	f648 6694 	movw	r6, #36500	; 0x8e94
   2ad5c:	1a13      	subs	r3, r2, r0
   2ad5e:	f240 126d 	movw	r2, #365	; 0x16d
   2ad62:	fbb3 f6f6 	udiv	r6, r3, r6
   2ad66:	fbb3 f0f2 	udiv	r0, r3, r2
   2ad6a:	fbb3 f3f7 	udiv	r3, r3, r7
   2ad6e:	4434      	add	r4, r6
   2ad70:	1ae3      	subs	r3, r4, r3
   2ad72:	fb02 3310 	mls	r3, r2, r0, r3
   2ad76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2ad7a:	2499      	movs	r4, #153	; 0x99
   2ad7c:	3202      	adds	r2, #2
   2ad7e:	fbb2 f2f4 	udiv	r2, r2, r4
   2ad82:	4354      	muls	r4, r2
   2ad84:	1ca6      	adds	r6, r4, #2
   2ad86:	2405      	movs	r4, #5
   2ad88:	fbb6 f4f4 	udiv	r4, r6, r4
   2ad8c:	2a0a      	cmp	r2, #10
   2ad8e:	bf34      	ite	cc
   2ad90:	2602      	movcc	r6, #2
   2ad92:	f06f 0609 	mvncs.w	r6, #9
   2ad96:	4416      	add	r6, r2
   2ad98:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2ad9c:	fb02 0505 	mla	r5, r2, r5, r0
   2ada0:	1c5f      	adds	r7, r3, #1
   2ada2:	2e01      	cmp	r6, #1
   2ada4:	bf98      	it	ls
   2ada6:	3501      	addls	r5, #1
   2ada8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   2adac:	eba7 0704 	sub.w	r7, r7, r4
   2adb0:	d302      	bcc.n	2adb8 <gmtime_r+0xdc>
   2adb2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   2adb6:	e014      	b.n	2ade2 <gmtime_r+0x106>
   2adb8:	0782      	lsls	r2, r0, #30
   2adba:	d105      	bne.n	2adc8 <gmtime_r+0xec>
   2adbc:	2464      	movs	r4, #100	; 0x64
   2adbe:	fbb0 f2f4 	udiv	r2, r0, r4
   2adc2:	fb04 0212 	mls	r2, r4, r2, r0
   2adc6:	b94a      	cbnz	r2, 2addc <gmtime_r+0x100>
   2adc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2adcc:	fbb0 f4f2 	udiv	r4, r0, r2
   2add0:	fb02 0014 	mls	r0, r2, r4, r0
   2add4:	fab0 f280 	clz	r2, r0
   2add8:	0952      	lsrs	r2, r2, #5
   2adda:	e000      	b.n	2adde <gmtime_r+0x102>
   2addc:	2201      	movs	r2, #1
   2adde:	333b      	adds	r3, #59	; 0x3b
   2ade0:	441a      	add	r2, r3
   2ade2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   2ade6:	2300      	movs	r3, #0
   2ade8:	61ca      	str	r2, [r1, #28]
   2adea:	614d      	str	r5, [r1, #20]
   2adec:	610e      	str	r6, [r1, #16]
   2adee:	60cf      	str	r7, [r1, #12]
   2adf0:	620b      	str	r3, [r1, #32]
   2adf2:	4608      	mov	r0, r1
   2adf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2adf6:	bf00      	nop
   2adf8:	00015180 	.word	0x00015180
   2adfc:	00023ab1 	.word	0x00023ab1
   2ae00:	fffdc54f 	.word	0xfffdc54f
   2ae04:	00023ab0 	.word	0x00023ab0

0002ae08 <_lseek_r>:
   2ae08:	b538      	push	{r3, r4, r5, lr}
   2ae0a:	4c07      	ldr	r4, [pc, #28]	; (2ae28 <_lseek_r+0x20>)
   2ae0c:	4605      	mov	r5, r0
   2ae0e:	4608      	mov	r0, r1
   2ae10:	4611      	mov	r1, r2
   2ae12:	2200      	movs	r2, #0
   2ae14:	6022      	str	r2, [r4, #0]
   2ae16:	461a      	mov	r2, r3
   2ae18:	f001 f87e 	bl	2bf18 <_lseek>
   2ae1c:	1c43      	adds	r3, r0, #1
   2ae1e:	d102      	bne.n	2ae26 <_lseek_r+0x1e>
   2ae20:	6823      	ldr	r3, [r4, #0]
   2ae22:	b103      	cbz	r3, 2ae26 <_lseek_r+0x1e>
   2ae24:	602b      	str	r3, [r5, #0]
   2ae26:	bd38      	pop	{r3, r4, r5, pc}
   2ae28:	10000844 	.word	0x10000844

0002ae2c <__swhatbuf_r>:
   2ae2c:	b570      	push	{r4, r5, r6, lr}
   2ae2e:	460e      	mov	r6, r1
   2ae30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ae34:	b090      	sub	sp, #64	; 0x40
   2ae36:	2900      	cmp	r1, #0
   2ae38:	4614      	mov	r4, r2
   2ae3a:	461d      	mov	r5, r3
   2ae3c:	da06      	bge.n	2ae4c <__swhatbuf_r+0x20>
   2ae3e:	2300      	movs	r3, #0
   2ae40:	602b      	str	r3, [r5, #0]
   2ae42:	89b3      	ldrh	r3, [r6, #12]
   2ae44:	061a      	lsls	r2, r3, #24
   2ae46:	d50e      	bpl.n	2ae66 <__swhatbuf_r+0x3a>
   2ae48:	2340      	movs	r3, #64	; 0x40
   2ae4a:	e00e      	b.n	2ae6a <__swhatbuf_r+0x3e>
   2ae4c:	aa01      	add	r2, sp, #4
   2ae4e:	f001 f811 	bl	2be74 <_fstat_r>
   2ae52:	2800      	cmp	r0, #0
   2ae54:	dbf3      	blt.n	2ae3e <__swhatbuf_r+0x12>
   2ae56:	9a02      	ldr	r2, [sp, #8]
   2ae58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2ae5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2ae60:	425a      	negs	r2, r3
   2ae62:	415a      	adcs	r2, r3
   2ae64:	602a      	str	r2, [r5, #0]
   2ae66:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ae6a:	2000      	movs	r0, #0
   2ae6c:	6023      	str	r3, [r4, #0]
   2ae6e:	b010      	add	sp, #64	; 0x40
   2ae70:	bd70      	pop	{r4, r5, r6, pc}
	...

0002ae74 <__smakebuf_r>:
   2ae74:	898b      	ldrh	r3, [r1, #12]
   2ae76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ae78:	079e      	lsls	r6, r3, #30
   2ae7a:	4605      	mov	r5, r0
   2ae7c:	460c      	mov	r4, r1
   2ae7e:	d410      	bmi.n	2aea2 <__smakebuf_r+0x2e>
   2ae80:	ab01      	add	r3, sp, #4
   2ae82:	466a      	mov	r2, sp
   2ae84:	f7ff ffd2 	bl	2ae2c <__swhatbuf_r>
   2ae88:	9900      	ldr	r1, [sp, #0]
   2ae8a:	4606      	mov	r6, r0
   2ae8c:	4628      	mov	r0, r5
   2ae8e:	f7ff f8cf 	bl	2a030 <_malloc_r>
   2ae92:	b968      	cbnz	r0, 2aeb0 <__smakebuf_r+0x3c>
   2ae94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ae98:	059a      	lsls	r2, r3, #22
   2ae9a:	d422      	bmi.n	2aee2 <__smakebuf_r+0x6e>
   2ae9c:	f043 0302 	orr.w	r3, r3, #2
   2aea0:	81a3      	strh	r3, [r4, #12]
   2aea2:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2aea6:	6023      	str	r3, [r4, #0]
   2aea8:	6123      	str	r3, [r4, #16]
   2aeaa:	2301      	movs	r3, #1
   2aeac:	6163      	str	r3, [r4, #20]
   2aeae:	e018      	b.n	2aee2 <__smakebuf_r+0x6e>
   2aeb0:	4b0d      	ldr	r3, [pc, #52]	; (2aee8 <__smakebuf_r+0x74>)
   2aeb2:	62ab      	str	r3, [r5, #40]	; 0x28
   2aeb4:	89a3      	ldrh	r3, [r4, #12]
   2aeb6:	6020      	str	r0, [r4, #0]
   2aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2aebc:	81a3      	strh	r3, [r4, #12]
   2aebe:	9b00      	ldr	r3, [sp, #0]
   2aec0:	6120      	str	r0, [r4, #16]
   2aec2:	6163      	str	r3, [r4, #20]
   2aec4:	9b01      	ldr	r3, [sp, #4]
   2aec6:	b14b      	cbz	r3, 2aedc <__smakebuf_r+0x68>
   2aec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2aecc:	4628      	mov	r0, r5
   2aece:	f000 ffe3 	bl	2be98 <_isatty_r>
   2aed2:	b118      	cbz	r0, 2aedc <__smakebuf_r+0x68>
   2aed4:	89a3      	ldrh	r3, [r4, #12]
   2aed6:	f043 0301 	orr.w	r3, r3, #1
   2aeda:	81a3      	strh	r3, [r4, #12]
   2aedc:	89a0      	ldrh	r0, [r4, #12]
   2aede:	4330      	orrs	r0, r6
   2aee0:	81a0      	strh	r0, [r4, #12]
   2aee2:	b002      	add	sp, #8
   2aee4:	bd70      	pop	{r4, r5, r6, pc}
   2aee6:	bf00      	nop
   2aee8:	0002aab9 	.word	0x0002aab9

0002aeec <__malloc_lock>:
   2aeec:	4770      	bx	lr

0002aeee <__malloc_unlock>:
   2aeee:	4770      	bx	lr

0002aef0 <_realloc_r>:
   2aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aef2:	4607      	mov	r7, r0
   2aef4:	4615      	mov	r5, r2
   2aef6:	460e      	mov	r6, r1
   2aef8:	b921      	cbnz	r1, 2af04 <_realloc_r+0x14>
   2aefa:	4611      	mov	r1, r2
   2aefc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2af00:	f7ff b896 	b.w	2a030 <_malloc_r>
   2af04:	b91a      	cbnz	r2, 2af0e <_realloc_r+0x1e>
   2af06:	f7ff f847 	bl	29f98 <_free_r>
   2af0a:	4628      	mov	r0, r5
   2af0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2af0e:	f000 ffe1 	bl	2bed4 <_malloc_usable_size_r>
   2af12:	4285      	cmp	r5, r0
   2af14:	d90e      	bls.n	2af34 <_realloc_r+0x44>
   2af16:	4629      	mov	r1, r5
   2af18:	4638      	mov	r0, r7
   2af1a:	f7ff f889 	bl	2a030 <_malloc_r>
   2af1e:	4604      	mov	r4, r0
   2af20:	b150      	cbz	r0, 2af38 <_realloc_r+0x48>
   2af22:	4631      	mov	r1, r6
   2af24:	462a      	mov	r2, r5
   2af26:	f7fe fdac 	bl	29a82 <memcpy>
   2af2a:	4631      	mov	r1, r6
   2af2c:	4638      	mov	r0, r7
   2af2e:	f7ff f833 	bl	29f98 <_free_r>
   2af32:	e001      	b.n	2af38 <_realloc_r+0x48>
   2af34:	4630      	mov	r0, r6
   2af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2af38:	4620      	mov	r0, r4
   2af3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002af3c <__ssputs_r>:
   2af3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2af40:	688e      	ldr	r6, [r1, #8]
   2af42:	4682      	mov	sl, r0
   2af44:	429e      	cmp	r6, r3
   2af46:	460c      	mov	r4, r1
   2af48:	4691      	mov	r9, r2
   2af4a:	4698      	mov	r8, r3
   2af4c:	d83e      	bhi.n	2afcc <__ssputs_r+0x90>
   2af4e:	898a      	ldrh	r2, [r1, #12]
   2af50:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2af54:	d03a      	beq.n	2afcc <__ssputs_r+0x90>
   2af56:	6825      	ldr	r5, [r4, #0]
   2af58:	6909      	ldr	r1, [r1, #16]
   2af5a:	2302      	movs	r3, #2
   2af5c:	1a6f      	subs	r7, r5, r1
   2af5e:	6965      	ldr	r5, [r4, #20]
   2af60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2af64:	fb95 f5f3 	sdiv	r5, r5, r3
   2af68:	1c7b      	adds	r3, r7, #1
   2af6a:	4443      	add	r3, r8
   2af6c:	429d      	cmp	r5, r3
   2af6e:	bf38      	it	cc
   2af70:	461d      	movcc	r5, r3
   2af72:	0553      	lsls	r3, r2, #21
   2af74:	d50f      	bpl.n	2af96 <__ssputs_r+0x5a>
   2af76:	4629      	mov	r1, r5
   2af78:	f7ff f85a 	bl	2a030 <_malloc_r>
   2af7c:	4606      	mov	r6, r0
   2af7e:	b198      	cbz	r0, 2afa8 <__ssputs_r+0x6c>
   2af80:	463a      	mov	r2, r7
   2af82:	6921      	ldr	r1, [r4, #16]
   2af84:	f7fe fd7d 	bl	29a82 <memcpy>
   2af88:	89a3      	ldrh	r3, [r4, #12]
   2af8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2af8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2af92:	81a3      	strh	r3, [r4, #12]
   2af94:	e013      	b.n	2afbe <__ssputs_r+0x82>
   2af96:	462a      	mov	r2, r5
   2af98:	f7ff ffaa 	bl	2aef0 <_realloc_r>
   2af9c:	4606      	mov	r6, r0
   2af9e:	b970      	cbnz	r0, 2afbe <__ssputs_r+0x82>
   2afa0:	6921      	ldr	r1, [r4, #16]
   2afa2:	4650      	mov	r0, sl
   2afa4:	f7fe fff8 	bl	29f98 <_free_r>
   2afa8:	230c      	movs	r3, #12
   2afaa:	f8ca 3000 	str.w	r3, [sl]
   2afae:	89a3      	ldrh	r3, [r4, #12]
   2afb0:	f04f 30ff 	mov.w	r0, #4294967295
   2afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2afb8:	81a3      	strh	r3, [r4, #12]
   2afba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2afbe:	6126      	str	r6, [r4, #16]
   2afc0:	443e      	add	r6, r7
   2afc2:	6026      	str	r6, [r4, #0]
   2afc4:	4646      	mov	r6, r8
   2afc6:	6165      	str	r5, [r4, #20]
   2afc8:	1bed      	subs	r5, r5, r7
   2afca:	60a5      	str	r5, [r4, #8]
   2afcc:	4546      	cmp	r6, r8
   2afce:	bf28      	it	cs
   2afd0:	4646      	movcs	r6, r8
   2afd2:	4649      	mov	r1, r9
   2afd4:	4632      	mov	r2, r6
   2afd6:	6820      	ldr	r0, [r4, #0]
   2afd8:	f7fe fd5e 	bl	29a98 <memmove>
   2afdc:	68a3      	ldr	r3, [r4, #8]
   2afde:	2000      	movs	r0, #0
   2afe0:	1b9b      	subs	r3, r3, r6
   2afe2:	60a3      	str	r3, [r4, #8]
   2afe4:	6823      	ldr	r3, [r4, #0]
   2afe6:	441e      	add	r6, r3
   2afe8:	6026      	str	r6, [r4, #0]
   2afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0002aff0 <_svfiprintf_r>:
   2aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aff4:	b09d      	sub	sp, #116	; 0x74
   2aff6:	9303      	str	r3, [sp, #12]
   2aff8:	898b      	ldrh	r3, [r1, #12]
   2affa:	4680      	mov	r8, r0
   2affc:	061c      	lsls	r4, r3, #24
   2affe:	460d      	mov	r5, r1
   2b000:	4616      	mov	r6, r2
   2b002:	d50d      	bpl.n	2b020 <_svfiprintf_r+0x30>
   2b004:	690b      	ldr	r3, [r1, #16]
   2b006:	b95b      	cbnz	r3, 2b020 <_svfiprintf_r+0x30>
   2b008:	2140      	movs	r1, #64	; 0x40
   2b00a:	f7ff f811 	bl	2a030 <_malloc_r>
   2b00e:	6028      	str	r0, [r5, #0]
   2b010:	6128      	str	r0, [r5, #16]
   2b012:	b918      	cbnz	r0, 2b01c <_svfiprintf_r+0x2c>
   2b014:	230c      	movs	r3, #12
   2b016:	f8c8 3000 	str.w	r3, [r8]
   2b01a:	e0cd      	b.n	2b1b8 <_svfiprintf_r+0x1c8>
   2b01c:	2340      	movs	r3, #64	; 0x40
   2b01e:	616b      	str	r3, [r5, #20]
   2b020:	2300      	movs	r3, #0
   2b022:	9309      	str	r3, [sp, #36]	; 0x24
   2b024:	2320      	movs	r3, #32
   2b026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2b02a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 2b1c8 <_svfiprintf_r+0x1d8>
   2b02e:	2330      	movs	r3, #48	; 0x30
   2b030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2b034:	4637      	mov	r7, r6
   2b036:	463c      	mov	r4, r7
   2b038:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b03c:	b91b      	cbnz	r3, 2b046 <_svfiprintf_r+0x56>
   2b03e:	ebb7 0906 	subs.w	r9, r7, r6
   2b042:	d010      	beq.n	2b066 <_svfiprintf_r+0x76>
   2b044:	e003      	b.n	2b04e <_svfiprintf_r+0x5e>
   2b046:	2b25      	cmp	r3, #37	; 0x25
   2b048:	d0f9      	beq.n	2b03e <_svfiprintf_r+0x4e>
   2b04a:	4627      	mov	r7, r4
   2b04c:	e7f3      	b.n	2b036 <_svfiprintf_r+0x46>
   2b04e:	464b      	mov	r3, r9
   2b050:	4632      	mov	r2, r6
   2b052:	4629      	mov	r1, r5
   2b054:	4640      	mov	r0, r8
   2b056:	f7ff ff71 	bl	2af3c <__ssputs_r>
   2b05a:	3001      	adds	r0, #1
   2b05c:	f000 80a7 	beq.w	2b1ae <_svfiprintf_r+0x1be>
   2b060:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b062:	444b      	add	r3, r9
   2b064:	9309      	str	r3, [sp, #36]	; 0x24
   2b066:	783b      	ldrb	r3, [r7, #0]
   2b068:	2b00      	cmp	r3, #0
   2b06a:	f000 80a0 	beq.w	2b1ae <_svfiprintf_r+0x1be>
   2b06e:	2300      	movs	r3, #0
   2b070:	f04f 32ff 	mov.w	r2, #4294967295
   2b074:	9304      	str	r3, [sp, #16]
   2b076:	9307      	str	r3, [sp, #28]
   2b078:	9205      	str	r2, [sp, #20]
   2b07a:	9306      	str	r3, [sp, #24]
   2b07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2b080:	931a      	str	r3, [sp, #104]	; 0x68
   2b082:	2601      	movs	r6, #1
   2b084:	2205      	movs	r2, #5
   2b086:	7821      	ldrb	r1, [r4, #0]
   2b088:	484e      	ldr	r0, [pc, #312]	; (2b1c4 <_svfiprintf_r+0x1d4>)
   2b08a:	f000 ff15 	bl	2beb8 <memchr>
   2b08e:	1c67      	adds	r7, r4, #1
   2b090:	9b04      	ldr	r3, [sp, #16]
   2b092:	b138      	cbz	r0, 2b0a4 <_svfiprintf_r+0xb4>
   2b094:	4a4b      	ldr	r2, [pc, #300]	; (2b1c4 <_svfiprintf_r+0x1d4>)
   2b096:	463c      	mov	r4, r7
   2b098:	1a80      	subs	r0, r0, r2
   2b09a:	fa06 f000 	lsl.w	r0, r6, r0
   2b09e:	4318      	orrs	r0, r3
   2b0a0:	9004      	str	r0, [sp, #16]
   2b0a2:	e7ef      	b.n	2b084 <_svfiprintf_r+0x94>
   2b0a4:	06d9      	lsls	r1, r3, #27
   2b0a6:	bf44      	itt	mi
   2b0a8:	2220      	movmi	r2, #32
   2b0aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2b0ae:	071a      	lsls	r2, r3, #28
   2b0b0:	bf44      	itt	mi
   2b0b2:	222b      	movmi	r2, #43	; 0x2b
   2b0b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2b0b8:	7822      	ldrb	r2, [r4, #0]
   2b0ba:	2a2a      	cmp	r2, #42	; 0x2a
   2b0bc:	d003      	beq.n	2b0c6 <_svfiprintf_r+0xd6>
   2b0be:	9a07      	ldr	r2, [sp, #28]
   2b0c0:	2100      	movs	r1, #0
   2b0c2:	200a      	movs	r0, #10
   2b0c4:	e00b      	b.n	2b0de <_svfiprintf_r+0xee>
   2b0c6:	9a03      	ldr	r2, [sp, #12]
   2b0c8:	1d11      	adds	r1, r2, #4
   2b0ca:	6812      	ldr	r2, [r2, #0]
   2b0cc:	9103      	str	r1, [sp, #12]
   2b0ce:	2a00      	cmp	r2, #0
   2b0d0:	da10      	bge.n	2b0f4 <_svfiprintf_r+0x104>
   2b0d2:	4252      	negs	r2, r2
   2b0d4:	f043 0002 	orr.w	r0, r3, #2
   2b0d8:	9207      	str	r2, [sp, #28]
   2b0da:	9004      	str	r0, [sp, #16]
   2b0dc:	e00b      	b.n	2b0f6 <_svfiprintf_r+0x106>
   2b0de:	4627      	mov	r7, r4
   2b0e0:	783b      	ldrb	r3, [r7, #0]
   2b0e2:	3401      	adds	r4, #1
   2b0e4:	3b30      	subs	r3, #48	; 0x30
   2b0e6:	2b09      	cmp	r3, #9
   2b0e8:	d803      	bhi.n	2b0f2 <_svfiprintf_r+0x102>
   2b0ea:	fb00 3202 	mla	r2, r0, r2, r3
   2b0ee:	2101      	movs	r1, #1
   2b0f0:	e7f5      	b.n	2b0de <_svfiprintf_r+0xee>
   2b0f2:	b101      	cbz	r1, 2b0f6 <_svfiprintf_r+0x106>
   2b0f4:	9207      	str	r2, [sp, #28]
   2b0f6:	783b      	ldrb	r3, [r7, #0]
   2b0f8:	2b2e      	cmp	r3, #46	; 0x2e
   2b0fa:	d11e      	bne.n	2b13a <_svfiprintf_r+0x14a>
   2b0fc:	787b      	ldrb	r3, [r7, #1]
   2b0fe:	2b2a      	cmp	r3, #42	; 0x2a
   2b100:	d10a      	bne.n	2b118 <_svfiprintf_r+0x128>
   2b102:	9b03      	ldr	r3, [sp, #12]
   2b104:	3702      	adds	r7, #2
   2b106:	1d1a      	adds	r2, r3, #4
   2b108:	681b      	ldr	r3, [r3, #0]
   2b10a:	9203      	str	r2, [sp, #12]
   2b10c:	2b00      	cmp	r3, #0
   2b10e:	bfb8      	it	lt
   2b110:	f04f 33ff 	movlt.w	r3, #4294967295
   2b114:	9305      	str	r3, [sp, #20]
   2b116:	e010      	b.n	2b13a <_svfiprintf_r+0x14a>
   2b118:	2300      	movs	r3, #0
   2b11a:	4619      	mov	r1, r3
   2b11c:	9305      	str	r3, [sp, #20]
   2b11e:	1c78      	adds	r0, r7, #1
   2b120:	240a      	movs	r4, #10
   2b122:	4607      	mov	r7, r0
   2b124:	783a      	ldrb	r2, [r7, #0]
   2b126:	3001      	adds	r0, #1
   2b128:	3a30      	subs	r2, #48	; 0x30
   2b12a:	2a09      	cmp	r2, #9
   2b12c:	d803      	bhi.n	2b136 <_svfiprintf_r+0x146>
   2b12e:	fb04 2101 	mla	r1, r4, r1, r2
   2b132:	2301      	movs	r3, #1
   2b134:	e7f5      	b.n	2b122 <_svfiprintf_r+0x132>
   2b136:	b103      	cbz	r3, 2b13a <_svfiprintf_r+0x14a>
   2b138:	9105      	str	r1, [sp, #20]
   2b13a:	2203      	movs	r2, #3
   2b13c:	7839      	ldrb	r1, [r7, #0]
   2b13e:	4822      	ldr	r0, [pc, #136]	; (2b1c8 <_svfiprintf_r+0x1d8>)
   2b140:	f000 feba 	bl	2beb8 <memchr>
   2b144:	b140      	cbz	r0, 2b158 <_svfiprintf_r+0x168>
   2b146:	2340      	movs	r3, #64	; 0x40
   2b148:	ebcb 0000 	rsb	r0, fp, r0
   2b14c:	fa03 f000 	lsl.w	r0, r3, r0
   2b150:	9b04      	ldr	r3, [sp, #16]
   2b152:	3701      	adds	r7, #1
   2b154:	4318      	orrs	r0, r3
   2b156:	9004      	str	r0, [sp, #16]
   2b158:	7839      	ldrb	r1, [r7, #0]
   2b15a:	2206      	movs	r2, #6
   2b15c:	481b      	ldr	r0, [pc, #108]	; (2b1cc <_svfiprintf_r+0x1dc>)
   2b15e:	1c7e      	adds	r6, r7, #1
   2b160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2b164:	f000 fea8 	bl	2beb8 <memchr>
   2b168:	b188      	cbz	r0, 2b18e <_svfiprintf_r+0x19e>
   2b16a:	4b19      	ldr	r3, [pc, #100]	; (2b1d0 <_svfiprintf_r+0x1e0>)
   2b16c:	b933      	cbnz	r3, 2b17c <_svfiprintf_r+0x18c>
   2b16e:	9b03      	ldr	r3, [sp, #12]
   2b170:	3307      	adds	r3, #7
   2b172:	f023 0307 	bic.w	r3, r3, #7
   2b176:	3308      	adds	r3, #8
   2b178:	9303      	str	r3, [sp, #12]
   2b17a:	e014      	b.n	2b1a6 <_svfiprintf_r+0x1b6>
   2b17c:	ab03      	add	r3, sp, #12
   2b17e:	9300      	str	r3, [sp, #0]
   2b180:	462a      	mov	r2, r5
   2b182:	4b14      	ldr	r3, [pc, #80]	; (2b1d4 <_svfiprintf_r+0x1e4>)
   2b184:	a904      	add	r1, sp, #16
   2b186:	4640      	mov	r0, r8
   2b188:	f3af 8000 	nop.w
   2b18c:	e007      	b.n	2b19e <_svfiprintf_r+0x1ae>
   2b18e:	ab03      	add	r3, sp, #12
   2b190:	9300      	str	r3, [sp, #0]
   2b192:	462a      	mov	r2, r5
   2b194:	4b0f      	ldr	r3, [pc, #60]	; (2b1d4 <_svfiprintf_r+0x1e4>)
   2b196:	a904      	add	r1, sp, #16
   2b198:	4640      	mov	r0, r8
   2b19a:	f000 fa43 	bl	2b624 <_printf_i>
   2b19e:	f1b0 3fff 	cmp.w	r0, #4294967295
   2b1a2:	4682      	mov	sl, r0
   2b1a4:	d003      	beq.n	2b1ae <_svfiprintf_r+0x1be>
   2b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b1a8:	4453      	add	r3, sl
   2b1aa:	9309      	str	r3, [sp, #36]	; 0x24
   2b1ac:	e742      	b.n	2b034 <_svfiprintf_r+0x44>
   2b1ae:	89ab      	ldrh	r3, [r5, #12]
   2b1b0:	065b      	lsls	r3, r3, #25
   2b1b2:	d401      	bmi.n	2b1b8 <_svfiprintf_r+0x1c8>
   2b1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b1b6:	e001      	b.n	2b1bc <_svfiprintf_r+0x1cc>
   2b1b8:	f04f 30ff 	mov.w	r0, #4294967295
   2b1bc:	b01d      	add	sp, #116	; 0x74
   2b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1c2:	bf00      	nop
   2b1c4:	0002d064 	.word	0x0002d064
   2b1c8:	0002d06a 	.word	0x0002d06a
   2b1cc:	0002d06e 	.word	0x0002d06e
   2b1d0:	00000000 	.word	0x00000000
   2b1d4:	0002af3d 	.word	0x0002af3d

0002b1d8 <_sungetc_r>:
   2b1d8:	1c4b      	adds	r3, r1, #1
   2b1da:	b570      	push	{r4, r5, r6, lr}
   2b1dc:	460e      	mov	r6, r1
   2b1de:	4614      	mov	r4, r2
   2b1e0:	d102      	bne.n	2b1e8 <_sungetc_r+0x10>
   2b1e2:	f04f 30ff 	mov.w	r0, #4294967295
   2b1e6:	bd70      	pop	{r4, r5, r6, pc}
   2b1e8:	8993      	ldrh	r3, [r2, #12]
   2b1ea:	b2cd      	uxtb	r5, r1
   2b1ec:	f023 0320 	bic.w	r3, r3, #32
   2b1f0:	8193      	strh	r3, [r2, #12]
   2b1f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
   2b1f4:	6852      	ldr	r2, [r2, #4]
   2b1f6:	b183      	cbz	r3, 2b21a <_sungetc_r+0x42>
   2b1f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b1fa:	429a      	cmp	r2, r3
   2b1fc:	da07      	bge.n	2b20e <_sungetc_r+0x36>
   2b1fe:	6823      	ldr	r3, [r4, #0]
   2b200:	1e5a      	subs	r2, r3, #1
   2b202:	6022      	str	r2, [r4, #0]
   2b204:	f803 6c01 	strb.w	r6, [r3, #-1]
   2b208:	6863      	ldr	r3, [r4, #4]
   2b20a:	3301      	adds	r3, #1
   2b20c:	e01f      	b.n	2b24e <_sungetc_r+0x76>
   2b20e:	4621      	mov	r1, r4
   2b210:	f000 fdf4 	bl	2bdfc <__submore>
   2b214:	2800      	cmp	r0, #0
   2b216:	d0f2      	beq.n	2b1fe <_sungetc_r+0x26>
   2b218:	e7e3      	b.n	2b1e2 <_sungetc_r+0xa>
   2b21a:	6921      	ldr	r1, [r4, #16]
   2b21c:	6823      	ldr	r3, [r4, #0]
   2b21e:	b151      	cbz	r1, 2b236 <_sungetc_r+0x5e>
   2b220:	4299      	cmp	r1, r3
   2b222:	d208      	bcs.n	2b236 <_sungetc_r+0x5e>
   2b224:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2b228:	428d      	cmp	r5, r1
   2b22a:	d104      	bne.n	2b236 <_sungetc_r+0x5e>
   2b22c:	3b01      	subs	r3, #1
   2b22e:	3201      	adds	r2, #1
   2b230:	6023      	str	r3, [r4, #0]
   2b232:	6062      	str	r2, [r4, #4]
   2b234:	e00c      	b.n	2b250 <_sungetc_r+0x78>
   2b236:	63e3      	str	r3, [r4, #60]	; 0x3c
   2b238:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b23c:	6363      	str	r3, [r4, #52]	; 0x34
   2b23e:	2303      	movs	r3, #3
   2b240:	63a3      	str	r3, [r4, #56]	; 0x38
   2b242:	4623      	mov	r3, r4
   2b244:	6422      	str	r2, [r4, #64]	; 0x40
   2b246:	f803 6f46 	strb.w	r6, [r3, #70]!
   2b24a:	6023      	str	r3, [r4, #0]
   2b24c:	2301      	movs	r3, #1
   2b24e:	6063      	str	r3, [r4, #4]
   2b250:	4628      	mov	r0, r5
   2b252:	bd70      	pop	{r4, r5, r6, pc}

0002b254 <__ssrefill_r>:
   2b254:	b510      	push	{r4, lr}
   2b256:	460c      	mov	r4, r1
   2b258:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2b25a:	b169      	cbz	r1, 2b278 <__ssrefill_r+0x24>
   2b25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b260:	4299      	cmp	r1, r3
   2b262:	d001      	beq.n	2b268 <__ssrefill_r+0x14>
   2b264:	f7fe fe98 	bl	29f98 <_free_r>
   2b268:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b26a:	2000      	movs	r0, #0
   2b26c:	6360      	str	r0, [r4, #52]	; 0x34
   2b26e:	6063      	str	r3, [r4, #4]
   2b270:	b113      	cbz	r3, 2b278 <__ssrefill_r+0x24>
   2b272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b274:	6023      	str	r3, [r4, #0]
   2b276:	bd10      	pop	{r4, pc}
   2b278:	6923      	ldr	r3, [r4, #16]
   2b27a:	f04f 30ff 	mov.w	r0, #4294967295
   2b27e:	6023      	str	r3, [r4, #0]
   2b280:	2300      	movs	r3, #0
   2b282:	6063      	str	r3, [r4, #4]
   2b284:	89a3      	ldrh	r3, [r4, #12]
   2b286:	f043 0320 	orr.w	r3, r3, #32
   2b28a:	81a3      	strh	r3, [r4, #12]
   2b28c:	bd10      	pop	{r4, pc}
	...

0002b290 <__ssvfiscanf_r>:
   2b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b294:	f8df 929c 	ldr.w	r9, [pc, #668]	; 2b534 <__ssvfiscanf_r+0x2a4>
   2b298:	4607      	mov	r7, r0
   2b29a:	460d      	mov	r5, r1
   2b29c:	46ca      	mov	sl, r9
   2b29e:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
   2b2a2:	9301      	str	r3, [sp, #4]
   2b2a4:	2300      	movs	r3, #0
   2b2a6:	9346      	str	r3, [sp, #280]	; 0x118
   2b2a8:	9347      	str	r3, [sp, #284]	; 0x11c
   2b2aa:	4b9e      	ldr	r3, [pc, #632]	; (2b524 <__ssvfiscanf_r+0x294>)
   2b2ac:	f10d 080c 	add.w	r8, sp, #12
   2b2b0:	93a2      	str	r3, [sp, #648]	; 0x288
   2b2b2:	4b9d      	ldr	r3, [pc, #628]	; (2b528 <__ssvfiscanf_r+0x298>)
   2b2b4:	f8df b274 	ldr.w	fp, [pc, #628]	; 2b52c <__ssvfiscanf_r+0x29c>
   2b2b8:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
   2b2bc:	93a3      	str	r3, [sp, #652]	; 0x28c
   2b2be:	7814      	ldrb	r4, [r2, #0]
   2b2c0:	2c00      	cmp	r4, #0
   2b2c2:	f000 8127 	beq.w	2b514 <__ssvfiscanf_r+0x284>
   2b2c6:	f8d9 3000 	ldr.w	r3, [r9]
   2b2ca:	4423      	add	r3, r4
   2b2cc:	785b      	ldrb	r3, [r3, #1]
   2b2ce:	f003 0308 	and.w	r3, r3, #8
   2b2d2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   2b2d6:	b1f3      	cbz	r3, 2b316 <__ssvfiscanf_r+0x86>
   2b2d8:	686b      	ldr	r3, [r5, #4]
   2b2da:	2b00      	cmp	r3, #0
   2b2dc:	dd10      	ble.n	2b300 <__ssvfiscanf_r+0x70>
   2b2de:	682b      	ldr	r3, [r5, #0]
   2b2e0:	f8da 0000 	ldr.w	r0, [sl]
   2b2e4:	7819      	ldrb	r1, [r3, #0]
   2b2e6:	4401      	add	r1, r0
   2b2e8:	7849      	ldrb	r1, [r1, #1]
   2b2ea:	070c      	lsls	r4, r1, #28
   2b2ec:	d510      	bpl.n	2b310 <__ssvfiscanf_r+0x80>
   2b2ee:	9947      	ldr	r1, [sp, #284]	; 0x11c
   2b2f0:	3301      	adds	r3, #1
   2b2f2:	3101      	adds	r1, #1
   2b2f4:	9147      	str	r1, [sp, #284]	; 0x11c
   2b2f6:	6869      	ldr	r1, [r5, #4]
   2b2f8:	602b      	str	r3, [r5, #0]
   2b2fa:	3901      	subs	r1, #1
   2b2fc:	6069      	str	r1, [r5, #4]
   2b2fe:	e7eb      	b.n	2b2d8 <__ssvfiscanf_r+0x48>
   2b300:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   2b302:	4629      	mov	r1, r5
   2b304:	4638      	mov	r0, r7
   2b306:	9200      	str	r2, [sp, #0]
   2b308:	4798      	blx	r3
   2b30a:	9a00      	ldr	r2, [sp, #0]
   2b30c:	2800      	cmp	r0, #0
   2b30e:	d0e6      	beq.n	2b2de <__ssvfiscanf_r+0x4e>
   2b310:	1c56      	adds	r6, r2, #1
   2b312:	4632      	mov	r2, r6
   2b314:	e7d3      	b.n	2b2be <__ssvfiscanf_r+0x2e>
   2b316:	2c25      	cmp	r4, #37	; 0x25
   2b318:	f102 0601 	add.w	r6, r2, #1
   2b31c:	d152      	bne.n	2b3c4 <__ssvfiscanf_r+0x134>
   2b31e:	9143      	str	r1, [sp, #268]	; 0x10c
   2b320:	9145      	str	r1, [sp, #276]	; 0x114
   2b322:	7853      	ldrb	r3, [r2, #1]
   2b324:	2b2a      	cmp	r3, #42	; 0x2a
   2b326:	bf02      	ittt	eq
   2b328:	2310      	moveq	r3, #16
   2b32a:	1c96      	addeq	r6, r2, #2
   2b32c:	9343      	streq	r3, [sp, #268]	; 0x10c
   2b32e:	220a      	movs	r2, #10
   2b330:	7831      	ldrb	r1, [r6, #0]
   2b332:	4634      	mov	r4, r6
   2b334:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2b338:	2b09      	cmp	r3, #9
   2b33a:	f106 0601 	add.w	r6, r6, #1
   2b33e:	d805      	bhi.n	2b34c <__ssvfiscanf_r+0xbc>
   2b340:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2b342:	fb02 1303 	mla	r3, r2, r3, r1
   2b346:	3b30      	subs	r3, #48	; 0x30
   2b348:	9345      	str	r3, [sp, #276]	; 0x114
   2b34a:	e7f1      	b.n	2b330 <__ssvfiscanf_r+0xa0>
   2b34c:	2203      	movs	r2, #3
   2b34e:	4877      	ldr	r0, [pc, #476]	; (2b52c <__ssvfiscanf_r+0x29c>)
   2b350:	f000 fdb2 	bl	2beb8 <memchr>
   2b354:	b140      	cbz	r0, 2b368 <__ssvfiscanf_r+0xd8>
   2b356:	4634      	mov	r4, r6
   2b358:	2301      	movs	r3, #1
   2b35a:	ebcb 0000 	rsb	r0, fp, r0
   2b35e:	fa03 f000 	lsl.w	r0, r3, r0
   2b362:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b364:	4303      	orrs	r3, r0
   2b366:	9343      	str	r3, [sp, #268]	; 0x10c
   2b368:	1c66      	adds	r6, r4, #1
   2b36a:	7824      	ldrb	r4, [r4, #0]
   2b36c:	2c67      	cmp	r4, #103	; 0x67
   2b36e:	d816      	bhi.n	2b39e <__ssvfiscanf_r+0x10e>
   2b370:	2c65      	cmp	r4, #101	; 0x65
   2b372:	d27f      	bcs.n	2b474 <__ssvfiscanf_r+0x1e4>
   2b374:	2c47      	cmp	r4, #71	; 0x47
   2b376:	d807      	bhi.n	2b388 <__ssvfiscanf_r+0xf8>
   2b378:	2c45      	cmp	r4, #69	; 0x45
   2b37a:	d27b      	bcs.n	2b474 <__ssvfiscanf_r+0x1e4>
   2b37c:	2c00      	cmp	r4, #0
   2b37e:	f000 80cb 	beq.w	2b518 <__ssvfiscanf_r+0x288>
   2b382:	2c25      	cmp	r4, #37	; 0x25
   2b384:	d01e      	beq.n	2b3c4 <__ssvfiscanf_r+0x134>
   2b386:	e077      	b.n	2b478 <__ssvfiscanf_r+0x1e8>
   2b388:	2c5b      	cmp	r4, #91	; 0x5b
   2b38a:	d051      	beq.n	2b430 <__ssvfiscanf_r+0x1a0>
   2b38c:	d802      	bhi.n	2b394 <__ssvfiscanf_r+0x104>
   2b38e:	2c58      	cmp	r4, #88	; 0x58
   2b390:	d03e      	beq.n	2b410 <__ssvfiscanf_r+0x180>
   2b392:	e071      	b.n	2b478 <__ssvfiscanf_r+0x1e8>
   2b394:	2c63      	cmp	r4, #99	; 0x63
   2b396:	d057      	beq.n	2b448 <__ssvfiscanf_r+0x1b8>
   2b398:	2c64      	cmp	r4, #100	; 0x64
   2b39a:	d03f      	beq.n	2b41c <__ssvfiscanf_r+0x18c>
   2b39c:	e06c      	b.n	2b478 <__ssvfiscanf_r+0x1e8>
   2b39e:	2c70      	cmp	r4, #112	; 0x70
   2b3a0:	d032      	beq.n	2b408 <__ssvfiscanf_r+0x178>
   2b3a2:	d807      	bhi.n	2b3b4 <__ssvfiscanf_r+0x124>
   2b3a4:	2c6e      	cmp	r4, #110	; 0x6e
   2b3a6:	d055      	beq.n	2b454 <__ssvfiscanf_r+0x1c4>
   2b3a8:	d83a      	bhi.n	2b420 <__ssvfiscanf_r+0x190>
   2b3aa:	2c69      	cmp	r4, #105	; 0x69
   2b3ac:	d164      	bne.n	2b478 <__ssvfiscanf_r+0x1e8>
   2b3ae:	2300      	movs	r3, #0
   2b3b0:	9344      	str	r3, [sp, #272]	; 0x110
   2b3b2:	e03b      	b.n	2b42c <__ssvfiscanf_r+0x19c>
   2b3b4:	2c75      	cmp	r4, #117	; 0x75
   2b3b6:	d031      	beq.n	2b41c <__ssvfiscanf_r+0x18c>
   2b3b8:	2c78      	cmp	r4, #120	; 0x78
   2b3ba:	d029      	beq.n	2b410 <__ssvfiscanf_r+0x180>
   2b3bc:	2c73      	cmp	r4, #115	; 0x73
   2b3be:	d15b      	bne.n	2b478 <__ssvfiscanf_r+0x1e8>
   2b3c0:	2302      	movs	r3, #2
   2b3c2:	e03f      	b.n	2b444 <__ssvfiscanf_r+0x1b4>
   2b3c4:	686b      	ldr	r3, [r5, #4]
   2b3c6:	2b00      	cmp	r3, #0
   2b3c8:	dd0d      	ble.n	2b3e6 <__ssvfiscanf_r+0x156>
   2b3ca:	682b      	ldr	r3, [r5, #0]
   2b3cc:	781a      	ldrb	r2, [r3, #0]
   2b3ce:	4294      	cmp	r4, r2
   2b3d0:	f040 80a0 	bne.w	2b514 <__ssvfiscanf_r+0x284>
   2b3d4:	3301      	adds	r3, #1
   2b3d6:	686a      	ldr	r2, [r5, #4]
   2b3d8:	602b      	str	r3, [r5, #0]
   2b3da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2b3dc:	3a01      	subs	r2, #1
   2b3de:	3301      	adds	r3, #1
   2b3e0:	606a      	str	r2, [r5, #4]
   2b3e2:	9347      	str	r3, [sp, #284]	; 0x11c
   2b3e4:	e795      	b.n	2b312 <__ssvfiscanf_r+0x82>
   2b3e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   2b3e8:	4629      	mov	r1, r5
   2b3ea:	4638      	mov	r0, r7
   2b3ec:	4798      	blx	r3
   2b3ee:	2800      	cmp	r0, #0
   2b3f0:	d0eb      	beq.n	2b3ca <__ssvfiscanf_r+0x13a>
   2b3f2:	9846      	ldr	r0, [sp, #280]	; 0x118
   2b3f4:	2800      	cmp	r0, #0
   2b3f6:	f000 808f 	beq.w	2b518 <__ssvfiscanf_r+0x288>
   2b3fa:	89ab      	ldrh	r3, [r5, #12]
   2b3fc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b400:	bf18      	it	ne
   2b402:	f04f 30ff 	movne.w	r0, #4294967295
   2b406:	e089      	b.n	2b51c <__ssvfiscanf_r+0x28c>
   2b408:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b40a:	f043 0320 	orr.w	r3, r3, #32
   2b40e:	9343      	str	r3, [sp, #268]	; 0x10c
   2b410:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2b416:	9343      	str	r3, [sp, #268]	; 0x10c
   2b418:	2310      	movs	r3, #16
   2b41a:	e002      	b.n	2b422 <__ssvfiscanf_r+0x192>
   2b41c:	230a      	movs	r3, #10
   2b41e:	e000      	b.n	2b422 <__ssvfiscanf_r+0x192>
   2b420:	2308      	movs	r3, #8
   2b422:	2c6e      	cmp	r4, #110	; 0x6e
   2b424:	9344      	str	r3, [sp, #272]	; 0x110
   2b426:	dd01      	ble.n	2b42c <__ssvfiscanf_r+0x19c>
   2b428:	2304      	movs	r3, #4
   2b42a:	e00b      	b.n	2b444 <__ssvfiscanf_r+0x1b4>
   2b42c:	2303      	movs	r3, #3
   2b42e:	e009      	b.n	2b444 <__ssvfiscanf_r+0x1b4>
   2b430:	4631      	mov	r1, r6
   2b432:	4640      	mov	r0, r8
   2b434:	f000 fb86 	bl	2bb44 <__sccl>
   2b438:	4606      	mov	r6, r0
   2b43a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b440:	9343      	str	r3, [sp, #268]	; 0x10c
   2b442:	2301      	movs	r3, #1
   2b444:	9349      	str	r3, [sp, #292]	; 0x124
   2b446:	e01b      	b.n	2b480 <__ssvfiscanf_r+0x1f0>
   2b448:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b44e:	9343      	str	r3, [sp, #268]	; 0x10c
   2b450:	2300      	movs	r3, #0
   2b452:	e7f7      	b.n	2b444 <__ssvfiscanf_r+0x1b4>
   2b454:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   2b456:	06d0      	lsls	r0, r2, #27
   2b458:	f53f af5b 	bmi.w	2b312 <__ssvfiscanf_r+0x82>
   2b45c:	f012 0f01 	tst.w	r2, #1
   2b460:	9a01      	ldr	r2, [sp, #4]
   2b462:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2b464:	f102 0104 	add.w	r1, r2, #4
   2b468:	9101      	str	r1, [sp, #4]
   2b46a:	6812      	ldr	r2, [r2, #0]
   2b46c:	bf14      	ite	ne
   2b46e:	8013      	strhne	r3, [r2, #0]
   2b470:	6013      	streq	r3, [r2, #0]
   2b472:	e74e      	b.n	2b312 <__ssvfiscanf_r+0x82>
   2b474:	2305      	movs	r3, #5
   2b476:	e7e5      	b.n	2b444 <__ssvfiscanf_r+0x1b4>
   2b478:	2303      	movs	r3, #3
   2b47a:	9349      	str	r3, [sp, #292]	; 0x124
   2b47c:	230a      	movs	r3, #10
   2b47e:	9344      	str	r3, [sp, #272]	; 0x110
   2b480:	686b      	ldr	r3, [r5, #4]
   2b482:	2b00      	cmp	r3, #0
   2b484:	dd03      	ble.n	2b48e <__ssvfiscanf_r+0x1fe>
   2b486:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2b488:	0659      	lsls	r1, r3, #25
   2b48a:	d511      	bpl.n	2b4b0 <__ssvfiscanf_r+0x220>
   2b48c:	e018      	b.n	2b4c0 <__ssvfiscanf_r+0x230>
   2b48e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   2b490:	4629      	mov	r1, r5
   2b492:	4638      	mov	r0, r7
   2b494:	4798      	blx	r3
   2b496:	2800      	cmp	r0, #0
   2b498:	d0f5      	beq.n	2b486 <__ssvfiscanf_r+0x1f6>
   2b49a:	e7aa      	b.n	2b3f2 <__ssvfiscanf_r+0x162>
   2b49c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
   2b49e:	3201      	adds	r2, #1
   2b4a0:	9247      	str	r2, [sp, #284]	; 0x11c
   2b4a2:	686a      	ldr	r2, [r5, #4]
   2b4a4:	3a01      	subs	r2, #1
   2b4a6:	2a00      	cmp	r2, #0
   2b4a8:	606a      	str	r2, [r5, #4]
   2b4aa:	dd13      	ble.n	2b4d4 <__ssvfiscanf_r+0x244>
   2b4ac:	3301      	adds	r3, #1
   2b4ae:	602b      	str	r3, [r5, #0]
   2b4b0:	682b      	ldr	r3, [r5, #0]
   2b4b2:	f8da 1000 	ldr.w	r1, [sl]
   2b4b6:	781a      	ldrb	r2, [r3, #0]
   2b4b8:	440a      	add	r2, r1
   2b4ba:	7852      	ldrb	r2, [r2, #1]
   2b4bc:	0712      	lsls	r2, r2, #28
   2b4be:	d4ed      	bmi.n	2b49c <__ssvfiscanf_r+0x20c>
   2b4c0:	9b49      	ldr	r3, [sp, #292]	; 0x124
   2b4c2:	2b02      	cmp	r3, #2
   2b4c4:	dc0d      	bgt.n	2b4e2 <__ssvfiscanf_r+0x252>
   2b4c6:	ab01      	add	r3, sp, #4
   2b4c8:	462a      	mov	r2, r5
   2b4ca:	a943      	add	r1, sp, #268	; 0x10c
   2b4cc:	4638      	mov	r0, r7
   2b4ce:	f000 f9cf 	bl	2b870 <_scanf_chars>
   2b4d2:	e019      	b.n	2b508 <__ssvfiscanf_r+0x278>
   2b4d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   2b4d6:	4629      	mov	r1, r5
   2b4d8:	4638      	mov	r0, r7
   2b4da:	4798      	blx	r3
   2b4dc:	2800      	cmp	r0, #0
   2b4de:	d0e7      	beq.n	2b4b0 <__ssvfiscanf_r+0x220>
   2b4e0:	e787      	b.n	2b3f2 <__ssvfiscanf_r+0x162>
   2b4e2:	2b04      	cmp	r3, #4
   2b4e4:	dc06      	bgt.n	2b4f4 <__ssvfiscanf_r+0x264>
   2b4e6:	ab01      	add	r3, sp, #4
   2b4e8:	462a      	mov	r2, r5
   2b4ea:	a943      	add	r1, sp, #268	; 0x10c
   2b4ec:	4638      	mov	r0, r7
   2b4ee:	f000 fa25 	bl	2b93c <_scanf_i>
   2b4f2:	e009      	b.n	2b508 <__ssvfiscanf_r+0x278>
   2b4f4:	4b0e      	ldr	r3, [pc, #56]	; (2b530 <__ssvfiscanf_r+0x2a0>)
   2b4f6:	2b00      	cmp	r3, #0
   2b4f8:	f43f af0b 	beq.w	2b312 <__ssvfiscanf_r+0x82>
   2b4fc:	ab01      	add	r3, sp, #4
   2b4fe:	462a      	mov	r2, r5
   2b500:	a943      	add	r1, sp, #268	; 0x10c
   2b502:	4638      	mov	r0, r7
   2b504:	f3af 8000 	nop.w
   2b508:	2801      	cmp	r0, #1
   2b50a:	d003      	beq.n	2b514 <__ssvfiscanf_r+0x284>
   2b50c:	2802      	cmp	r0, #2
   2b50e:	f47f af00 	bne.w	2b312 <__ssvfiscanf_r+0x82>
   2b512:	e76e      	b.n	2b3f2 <__ssvfiscanf_r+0x162>
   2b514:	9846      	ldr	r0, [sp, #280]	; 0x118
   2b516:	e001      	b.n	2b51c <__ssvfiscanf_r+0x28c>
   2b518:	f04f 30ff 	mov.w	r0, #4294967295
   2b51c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
   2b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b524:	0002b1d9 	.word	0x0002b1d9
   2b528:	0002b255 	.word	0x0002b255
   2b52c:	0002d06a 	.word	0x0002d06a
   2b530:	00000000 	.word	0x00000000
   2b534:	10000134 	.word	0x10000134

0002b538 <_printf_common>:
   2b538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b53c:	4691      	mov	r9, r2
   2b53e:	461f      	mov	r7, r3
   2b540:	690a      	ldr	r2, [r1, #16]
   2b542:	688b      	ldr	r3, [r1, #8]
   2b544:	4606      	mov	r6, r0
   2b546:	4293      	cmp	r3, r2
   2b548:	bfb8      	it	lt
   2b54a:	4613      	movlt	r3, r2
   2b54c:	f8c9 3000 	str.w	r3, [r9]
   2b550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2b554:	460c      	mov	r4, r1
   2b556:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2b55a:	b112      	cbz	r2, 2b562 <_printf_common+0x2a>
   2b55c:	3301      	adds	r3, #1
   2b55e:	f8c9 3000 	str.w	r3, [r9]
   2b562:	6823      	ldr	r3, [r4, #0]
   2b564:	0699      	lsls	r1, r3, #26
   2b566:	bf42      	ittt	mi
   2b568:	f8d9 3000 	ldrmi.w	r3, [r9]
   2b56c:	3302      	addmi	r3, #2
   2b56e:	f8c9 3000 	strmi.w	r3, [r9]
   2b572:	6825      	ldr	r5, [r4, #0]
   2b574:	f015 0506 	ands.w	r5, r5, #6
   2b578:	d110      	bne.n	2b59c <_printf_common+0x64>
   2b57a:	f104 0a19 	add.w	sl, r4, #25
   2b57e:	e007      	b.n	2b590 <_printf_common+0x58>
   2b580:	2301      	movs	r3, #1
   2b582:	4652      	mov	r2, sl
   2b584:	4639      	mov	r1, r7
   2b586:	4630      	mov	r0, r6
   2b588:	47c0      	blx	r8
   2b58a:	3001      	adds	r0, #1
   2b58c:	d01a      	beq.n	2b5c4 <_printf_common+0x8c>
   2b58e:	3501      	adds	r5, #1
   2b590:	68e3      	ldr	r3, [r4, #12]
   2b592:	f8d9 2000 	ldr.w	r2, [r9]
   2b596:	1a9b      	subs	r3, r3, r2
   2b598:	429d      	cmp	r5, r3
   2b59a:	dbf1      	blt.n	2b580 <_printf_common+0x48>
   2b59c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2b5a0:	6822      	ldr	r2, [r4, #0]
   2b5a2:	3300      	adds	r3, #0
   2b5a4:	bf18      	it	ne
   2b5a6:	2301      	movne	r3, #1
   2b5a8:	0692      	lsls	r2, r2, #26
   2b5aa:	d50f      	bpl.n	2b5cc <_printf_common+0x94>
   2b5ac:	18e1      	adds	r1, r4, r3
   2b5ae:	2030      	movs	r0, #48	; 0x30
   2b5b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2b5b4:	1c5a      	adds	r2, r3, #1
   2b5b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2b5ba:	4422      	add	r2, r4
   2b5bc:	3302      	adds	r3, #2
   2b5be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2b5c2:	e003      	b.n	2b5cc <_printf_common+0x94>
   2b5c4:	f04f 30ff 	mov.w	r0, #4294967295
   2b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2b5d0:	4639      	mov	r1, r7
   2b5d2:	4630      	mov	r0, r6
   2b5d4:	47c0      	blx	r8
   2b5d6:	3001      	adds	r0, #1
   2b5d8:	d0f4      	beq.n	2b5c4 <_printf_common+0x8c>
   2b5da:	6822      	ldr	r2, [r4, #0]
   2b5dc:	f8d9 5000 	ldr.w	r5, [r9]
   2b5e0:	68e3      	ldr	r3, [r4, #12]
   2b5e2:	f002 0206 	and.w	r2, r2, #6
   2b5e6:	2a04      	cmp	r2, #4
   2b5e8:	bf08      	it	eq
   2b5ea:	1b5d      	subeq	r5, r3, r5
   2b5ec:	6922      	ldr	r2, [r4, #16]
   2b5ee:	68a3      	ldr	r3, [r4, #8]
   2b5f0:	bf0c      	ite	eq
   2b5f2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2b5f6:	2500      	movne	r5, #0
   2b5f8:	4293      	cmp	r3, r2
   2b5fa:	bfc4      	itt	gt
   2b5fc:	1a9b      	subgt	r3, r3, r2
   2b5fe:	18ed      	addgt	r5, r5, r3
   2b600:	f04f 0900 	mov.w	r9, #0
   2b604:	341a      	adds	r4, #26
   2b606:	454d      	cmp	r5, r9
   2b608:	d009      	beq.n	2b61e <_printf_common+0xe6>
   2b60a:	2301      	movs	r3, #1
   2b60c:	4622      	mov	r2, r4
   2b60e:	4639      	mov	r1, r7
   2b610:	4630      	mov	r0, r6
   2b612:	47c0      	blx	r8
   2b614:	3001      	adds	r0, #1
   2b616:	d0d5      	beq.n	2b5c4 <_printf_common+0x8c>
   2b618:	f109 0901 	add.w	r9, r9, #1
   2b61c:	e7f3      	b.n	2b606 <_printf_common+0xce>
   2b61e:	2000      	movs	r0, #0
   2b620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b624 <_printf_i>:
   2b624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b628:	4617      	mov	r7, r2
   2b62a:	7e0a      	ldrb	r2, [r1, #24]
   2b62c:	b085      	sub	sp, #20
   2b62e:	2a6e      	cmp	r2, #110	; 0x6e
   2b630:	4698      	mov	r8, r3
   2b632:	4606      	mov	r6, r0
   2b634:	460c      	mov	r4, r1
   2b636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b638:	f101 0e43 	add.w	lr, r1, #67	; 0x43
   2b63c:	f000 80ae 	beq.w	2b79c <_printf_i+0x178>
   2b640:	d811      	bhi.n	2b666 <_printf_i+0x42>
   2b642:	2a63      	cmp	r2, #99	; 0x63
   2b644:	d022      	beq.n	2b68c <_printf_i+0x68>
   2b646:	d809      	bhi.n	2b65c <_printf_i+0x38>
   2b648:	2a00      	cmp	r2, #0
   2b64a:	f000 80bb 	beq.w	2b7c4 <_printf_i+0x1a0>
   2b64e:	2a58      	cmp	r2, #88	; 0x58
   2b650:	f040 80ca 	bne.w	2b7e8 <_printf_i+0x1c4>
   2b654:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
   2b658:	4983      	ldr	r1, [pc, #524]	; (2b868 <_printf_i+0x244>)
   2b65a:	e055      	b.n	2b708 <_printf_i+0xe4>
   2b65c:	2a64      	cmp	r2, #100	; 0x64
   2b65e:	d01e      	beq.n	2b69e <_printf_i+0x7a>
   2b660:	2a69      	cmp	r2, #105	; 0x69
   2b662:	d01c      	beq.n	2b69e <_printf_i+0x7a>
   2b664:	e0c0      	b.n	2b7e8 <_printf_i+0x1c4>
   2b666:	2a73      	cmp	r2, #115	; 0x73
   2b668:	f000 80b0 	beq.w	2b7cc <_printf_i+0x1a8>
   2b66c:	d809      	bhi.n	2b682 <_printf_i+0x5e>
   2b66e:	2a6f      	cmp	r2, #111	; 0x6f
   2b670:	d02e      	beq.n	2b6d0 <_printf_i+0xac>
   2b672:	2a70      	cmp	r2, #112	; 0x70
   2b674:	f040 80b8 	bne.w	2b7e8 <_printf_i+0x1c4>
   2b678:	680a      	ldr	r2, [r1, #0]
   2b67a:	f042 0220 	orr.w	r2, r2, #32
   2b67e:	600a      	str	r2, [r1, #0]
   2b680:	e03e      	b.n	2b700 <_printf_i+0xdc>
   2b682:	2a75      	cmp	r2, #117	; 0x75
   2b684:	d024      	beq.n	2b6d0 <_printf_i+0xac>
   2b686:	2a78      	cmp	r2, #120	; 0x78
   2b688:	d03a      	beq.n	2b700 <_printf_i+0xdc>
   2b68a:	e0ad      	b.n	2b7e8 <_printf_i+0x1c4>
   2b68c:	681a      	ldr	r2, [r3, #0]
   2b68e:	f101 0542 	add.w	r5, r1, #66	; 0x42
   2b692:	1d11      	adds	r1, r2, #4
   2b694:	6019      	str	r1, [r3, #0]
   2b696:	6813      	ldr	r3, [r2, #0]
   2b698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2b69c:	e0a8      	b.n	2b7f0 <_printf_i+0x1cc>
   2b69e:	6821      	ldr	r1, [r4, #0]
   2b6a0:	681a      	ldr	r2, [r3, #0]
   2b6a2:	f011 0f80 	tst.w	r1, #128	; 0x80
   2b6a6:	d002      	beq.n	2b6ae <_printf_i+0x8a>
   2b6a8:	1d11      	adds	r1, r2, #4
   2b6aa:	6019      	str	r1, [r3, #0]
   2b6ac:	e008      	b.n	2b6c0 <_printf_i+0x9c>
   2b6ae:	f011 0f40 	tst.w	r1, #64	; 0x40
   2b6b2:	f102 0104 	add.w	r1, r2, #4
   2b6b6:	6019      	str	r1, [r3, #0]
   2b6b8:	d002      	beq.n	2b6c0 <_printf_i+0x9c>
   2b6ba:	f9b2 3000 	ldrsh.w	r3, [r2]
   2b6be:	e000      	b.n	2b6c2 <_printf_i+0x9e>
   2b6c0:	6813      	ldr	r3, [r2, #0]
   2b6c2:	2b00      	cmp	r3, #0
   2b6c4:	da3c      	bge.n	2b740 <_printf_i+0x11c>
   2b6c6:	222d      	movs	r2, #45	; 0x2d
   2b6c8:	425b      	negs	r3, r3
   2b6ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
   2b6ce:	e037      	b.n	2b740 <_printf_i+0x11c>
   2b6d0:	6821      	ldr	r1, [r4, #0]
   2b6d2:	681a      	ldr	r2, [r3, #0]
   2b6d4:	f011 0f80 	tst.w	r1, #128	; 0x80
   2b6d8:	d002      	beq.n	2b6e0 <_printf_i+0xbc>
   2b6da:	1d11      	adds	r1, r2, #4
   2b6dc:	6019      	str	r1, [r3, #0]
   2b6de:	e007      	b.n	2b6f0 <_printf_i+0xcc>
   2b6e0:	f011 0f40 	tst.w	r1, #64	; 0x40
   2b6e4:	f102 0104 	add.w	r1, r2, #4
   2b6e8:	6019      	str	r1, [r3, #0]
   2b6ea:	d001      	beq.n	2b6f0 <_printf_i+0xcc>
   2b6ec:	8813      	ldrh	r3, [r2, #0]
   2b6ee:	e000      	b.n	2b6f2 <_printf_i+0xce>
   2b6f0:	6813      	ldr	r3, [r2, #0]
   2b6f2:	7e22      	ldrb	r2, [r4, #24]
   2b6f4:	495c      	ldr	r1, [pc, #368]	; (2b868 <_printf_i+0x244>)
   2b6f6:	2a6f      	cmp	r2, #111	; 0x6f
   2b6f8:	bf14      	ite	ne
   2b6fa:	220a      	movne	r2, #10
   2b6fc:	2208      	moveq	r2, #8
   2b6fe:	e01b      	b.n	2b738 <_printf_i+0x114>
   2b700:	2278      	movs	r2, #120	; 0x78
   2b702:	495a      	ldr	r1, [pc, #360]	; (2b86c <_printf_i+0x248>)
   2b704:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   2b708:	6822      	ldr	r2, [r4, #0]
   2b70a:	6818      	ldr	r0, [r3, #0]
   2b70c:	f012 0f80 	tst.w	r2, #128	; 0x80
   2b710:	f100 0504 	add.w	r5, r0, #4
   2b714:	601d      	str	r5, [r3, #0]
   2b716:	d103      	bne.n	2b720 <_printf_i+0xfc>
   2b718:	0655      	lsls	r5, r2, #25
   2b71a:	d501      	bpl.n	2b720 <_printf_i+0xfc>
   2b71c:	8803      	ldrh	r3, [r0, #0]
   2b71e:	e000      	b.n	2b722 <_printf_i+0xfe>
   2b720:	6803      	ldr	r3, [r0, #0]
   2b722:	07d0      	lsls	r0, r2, #31
   2b724:	bf44      	itt	mi
   2b726:	f042 0220 	orrmi.w	r2, r2, #32
   2b72a:	6022      	strmi	r2, [r4, #0]
   2b72c:	b91b      	cbnz	r3, 2b736 <_printf_i+0x112>
   2b72e:	6822      	ldr	r2, [r4, #0]
   2b730:	f022 0220 	bic.w	r2, r2, #32
   2b734:	6022      	str	r2, [r4, #0]
   2b736:	2210      	movs	r2, #16
   2b738:	2000      	movs	r0, #0
   2b73a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2b73e:	e001      	b.n	2b744 <_printf_i+0x120>
   2b740:	4949      	ldr	r1, [pc, #292]	; (2b868 <_printf_i+0x244>)
   2b742:	220a      	movs	r2, #10
   2b744:	6865      	ldr	r5, [r4, #4]
   2b746:	2d00      	cmp	r5, #0
   2b748:	60a5      	str	r5, [r4, #8]
   2b74a:	db08      	blt.n	2b75e <_printf_i+0x13a>
   2b74c:	6820      	ldr	r0, [r4, #0]
   2b74e:	f020 0004 	bic.w	r0, r0, #4
   2b752:	6020      	str	r0, [r4, #0]
   2b754:	b92b      	cbnz	r3, 2b762 <_printf_i+0x13e>
   2b756:	2d00      	cmp	r5, #0
   2b758:	d17d      	bne.n	2b856 <_printf_i+0x232>
   2b75a:	4675      	mov	r5, lr
   2b75c:	e00c      	b.n	2b778 <_printf_i+0x154>
   2b75e:	2b00      	cmp	r3, #0
   2b760:	d079      	beq.n	2b856 <_printf_i+0x232>
   2b762:	4675      	mov	r5, lr
   2b764:	fbb3 f0f2 	udiv	r0, r3, r2
   2b768:	fb02 3310 	mls	r3, r2, r0, r3
   2b76c:	5ccb      	ldrb	r3, [r1, r3]
   2b76e:	f805 3d01 	strb.w	r3, [r5, #-1]!
   2b772:	4603      	mov	r3, r0
   2b774:	2800      	cmp	r0, #0
   2b776:	d1f5      	bne.n	2b764 <_printf_i+0x140>
   2b778:	2a08      	cmp	r2, #8
   2b77a:	d10b      	bne.n	2b794 <_printf_i+0x170>
   2b77c:	6823      	ldr	r3, [r4, #0]
   2b77e:	07da      	lsls	r2, r3, #31
   2b780:	d508      	bpl.n	2b794 <_printf_i+0x170>
   2b782:	6923      	ldr	r3, [r4, #16]
   2b784:	6862      	ldr	r2, [r4, #4]
   2b786:	429a      	cmp	r2, r3
   2b788:	bfde      	ittt	le
   2b78a:	2330      	movle	r3, #48	; 0x30
   2b78c:	f805 3c01 	strble.w	r3, [r5, #-1]
   2b790:	f105 35ff 	addle.w	r5, r5, #4294967295
   2b794:	ebc5 030e 	rsb	r3, r5, lr
   2b798:	6123      	str	r3, [r4, #16]
   2b79a:	e02e      	b.n	2b7fa <_printf_i+0x1d6>
   2b79c:	6808      	ldr	r0, [r1, #0]
   2b79e:	681a      	ldr	r2, [r3, #0]
   2b7a0:	f010 0f80 	tst.w	r0, #128	; 0x80
   2b7a4:	6949      	ldr	r1, [r1, #20]
   2b7a6:	d003      	beq.n	2b7b0 <_printf_i+0x18c>
   2b7a8:	1d10      	adds	r0, r2, #4
   2b7aa:	6018      	str	r0, [r3, #0]
   2b7ac:	6813      	ldr	r3, [r2, #0]
   2b7ae:	e008      	b.n	2b7c2 <_printf_i+0x19e>
   2b7b0:	f010 0f40 	tst.w	r0, #64	; 0x40
   2b7b4:	f102 0004 	add.w	r0, r2, #4
   2b7b8:	6018      	str	r0, [r3, #0]
   2b7ba:	6813      	ldr	r3, [r2, #0]
   2b7bc:	d001      	beq.n	2b7c2 <_printf_i+0x19e>
   2b7be:	8019      	strh	r1, [r3, #0]
   2b7c0:	e000      	b.n	2b7c4 <_printf_i+0x1a0>
   2b7c2:	6019      	str	r1, [r3, #0]
   2b7c4:	2300      	movs	r3, #0
   2b7c6:	6123      	str	r3, [r4, #16]
   2b7c8:	4675      	mov	r5, lr
   2b7ca:	e016      	b.n	2b7fa <_printf_i+0x1d6>
   2b7cc:	681a      	ldr	r2, [r3, #0]
   2b7ce:	1d11      	adds	r1, r2, #4
   2b7d0:	6019      	str	r1, [r3, #0]
   2b7d2:	6815      	ldr	r5, [r2, #0]
   2b7d4:	2100      	movs	r1, #0
   2b7d6:	6862      	ldr	r2, [r4, #4]
   2b7d8:	4628      	mov	r0, r5
   2b7da:	f000 fb6d 	bl	2beb8 <memchr>
   2b7de:	b108      	cbz	r0, 2b7e4 <_printf_i+0x1c0>
   2b7e0:	1b40      	subs	r0, r0, r5
   2b7e2:	6060      	str	r0, [r4, #4]
   2b7e4:	6863      	ldr	r3, [r4, #4]
   2b7e6:	e004      	b.n	2b7f2 <_printf_i+0x1ce>
   2b7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2b7ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   2b7f0:	2301      	movs	r3, #1
   2b7f2:	6123      	str	r3, [r4, #16]
   2b7f4:	2300      	movs	r3, #0
   2b7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2b7fa:	f8cd 8000 	str.w	r8, [sp]
   2b7fe:	463b      	mov	r3, r7
   2b800:	aa03      	add	r2, sp, #12
   2b802:	4621      	mov	r1, r4
   2b804:	4630      	mov	r0, r6
   2b806:	f7ff fe97 	bl	2b538 <_printf_common>
   2b80a:	3001      	adds	r0, #1
   2b80c:	d102      	bne.n	2b814 <_printf_i+0x1f0>
   2b80e:	f04f 30ff 	mov.w	r0, #4294967295
   2b812:	e026      	b.n	2b862 <_printf_i+0x23e>
   2b814:	6923      	ldr	r3, [r4, #16]
   2b816:	462a      	mov	r2, r5
   2b818:	4639      	mov	r1, r7
   2b81a:	4630      	mov	r0, r6
   2b81c:	47c0      	blx	r8
   2b81e:	3001      	adds	r0, #1
   2b820:	d0f5      	beq.n	2b80e <_printf_i+0x1ea>
   2b822:	6823      	ldr	r3, [r4, #0]
   2b824:	079b      	lsls	r3, r3, #30
   2b826:	d510      	bpl.n	2b84a <_printf_i+0x226>
   2b828:	2500      	movs	r5, #0
   2b82a:	f104 0919 	add.w	r9, r4, #25
   2b82e:	e007      	b.n	2b840 <_printf_i+0x21c>
   2b830:	2301      	movs	r3, #1
   2b832:	464a      	mov	r2, r9
   2b834:	4639      	mov	r1, r7
   2b836:	4630      	mov	r0, r6
   2b838:	47c0      	blx	r8
   2b83a:	3001      	adds	r0, #1
   2b83c:	d0e7      	beq.n	2b80e <_printf_i+0x1ea>
   2b83e:	3501      	adds	r5, #1
   2b840:	68e3      	ldr	r3, [r4, #12]
   2b842:	9a03      	ldr	r2, [sp, #12]
   2b844:	1a9b      	subs	r3, r3, r2
   2b846:	429d      	cmp	r5, r3
   2b848:	dbf2      	blt.n	2b830 <_printf_i+0x20c>
   2b84a:	68e0      	ldr	r0, [r4, #12]
   2b84c:	9b03      	ldr	r3, [sp, #12]
   2b84e:	4298      	cmp	r0, r3
   2b850:	bfb8      	it	lt
   2b852:	4618      	movlt	r0, r3
   2b854:	e005      	b.n	2b862 <_printf_i+0x23e>
   2b856:	780b      	ldrb	r3, [r1, #0]
   2b858:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2b85c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2b860:	e78a      	b.n	2b778 <_printf_i+0x154>
   2b862:	b005      	add	sp, #20
   2b864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b868:	0002d075 	.word	0x0002d075
   2b86c:	0002d086 	.word	0x0002d086

0002b870 <_scanf_chars>:
   2b870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b874:	4615      	mov	r5, r2
   2b876:	688a      	ldr	r2, [r1, #8]
   2b878:	4680      	mov	r8, r0
   2b87a:	460c      	mov	r4, r1
   2b87c:	b932      	cbnz	r2, 2b88c <_scanf_chars+0x1c>
   2b87e:	698a      	ldr	r2, [r1, #24]
   2b880:	2a00      	cmp	r2, #0
   2b882:	bf0c      	ite	eq
   2b884:	2201      	moveq	r2, #1
   2b886:	f04f 32ff 	movne.w	r2, #4294967295
   2b88a:	608a      	str	r2, [r1, #8]
   2b88c:	6822      	ldr	r2, [r4, #0]
   2b88e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2b938 <_scanf_chars+0xc8>
   2b892:	06d1      	lsls	r1, r2, #27
   2b894:	bf58      	it	pl
   2b896:	681a      	ldrpl	r2, [r3, #0]
   2b898:	f04f 0600 	mov.w	r6, #0
   2b89c:	bf5e      	ittt	pl
   2b89e:	1d11      	addpl	r1, r2, #4
   2b8a0:	6019      	strpl	r1, [r3, #0]
   2b8a2:	6817      	ldrpl	r7, [r2, #0]
   2b8a4:	69a0      	ldr	r0, [r4, #24]
   2b8a6:	b9f8      	cbnz	r0, 2b8e8 <_scanf_chars+0x78>
   2b8a8:	6823      	ldr	r3, [r4, #0]
   2b8aa:	3601      	adds	r6, #1
   2b8ac:	06da      	lsls	r2, r3, #27
   2b8ae:	bf5e      	ittt	pl
   2b8b0:	682b      	ldrpl	r3, [r5, #0]
   2b8b2:	781b      	ldrbpl	r3, [r3, #0]
   2b8b4:	703b      	strbpl	r3, [r7, #0]
   2b8b6:	682a      	ldr	r2, [r5, #0]
   2b8b8:	686b      	ldr	r3, [r5, #4]
   2b8ba:	f102 0201 	add.w	r2, r2, #1
   2b8be:	602a      	str	r2, [r5, #0]
   2b8c0:	68a2      	ldr	r2, [r4, #8]
   2b8c2:	f103 33ff 	add.w	r3, r3, #4294967295
   2b8c6:	f102 32ff 	add.w	r2, r2, #4294967295
   2b8ca:	606b      	str	r3, [r5, #4]
   2b8cc:	bf58      	it	pl
   2b8ce:	3701      	addpl	r7, #1
   2b8d0:	60a2      	str	r2, [r4, #8]
   2b8d2:	b1e2      	cbz	r2, 2b90e <_scanf_chars+0x9e>
   2b8d4:	2b00      	cmp	r3, #0
   2b8d6:	dce5      	bgt.n	2b8a4 <_scanf_chars+0x34>
   2b8d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2b8dc:	4629      	mov	r1, r5
   2b8de:	4640      	mov	r0, r8
   2b8e0:	4798      	blx	r3
   2b8e2:	2800      	cmp	r0, #0
   2b8e4:	d0de      	beq.n	2b8a4 <_scanf_chars+0x34>
   2b8e6:	e012      	b.n	2b90e <_scanf_chars+0x9e>
   2b8e8:	2801      	cmp	r0, #1
   2b8ea:	d106      	bne.n	2b8fa <_scanf_chars+0x8a>
   2b8ec:	682b      	ldr	r3, [r5, #0]
   2b8ee:	781a      	ldrb	r2, [r3, #0]
   2b8f0:	6963      	ldr	r3, [r4, #20]
   2b8f2:	5c9b      	ldrb	r3, [r3, r2]
   2b8f4:	2b00      	cmp	r3, #0
   2b8f6:	d1d7      	bne.n	2b8a8 <_scanf_chars+0x38>
   2b8f8:	e019      	b.n	2b92e <_scanf_chars+0xbe>
   2b8fa:	2802      	cmp	r0, #2
   2b8fc:	d107      	bne.n	2b90e <_scanf_chars+0x9e>
   2b8fe:	682b      	ldr	r3, [r5, #0]
   2b900:	f8d9 2000 	ldr.w	r2, [r9]
   2b904:	781b      	ldrb	r3, [r3, #0]
   2b906:	4413      	add	r3, r2
   2b908:	785b      	ldrb	r3, [r3, #1]
   2b90a:	071b      	lsls	r3, r3, #28
   2b90c:	d5cc      	bpl.n	2b8a8 <_scanf_chars+0x38>
   2b90e:	6823      	ldr	r3, [r4, #0]
   2b910:	f013 0310 	ands.w	r3, r3, #16
   2b914:	d105      	bne.n	2b922 <_scanf_chars+0xb2>
   2b916:	68e2      	ldr	r2, [r4, #12]
   2b918:	3201      	adds	r2, #1
   2b91a:	60e2      	str	r2, [r4, #12]
   2b91c:	69a2      	ldr	r2, [r4, #24]
   2b91e:	b102      	cbz	r2, 2b922 <_scanf_chars+0xb2>
   2b920:	703b      	strb	r3, [r7, #0]
   2b922:	6923      	ldr	r3, [r4, #16]
   2b924:	2000      	movs	r0, #0
   2b926:	441e      	add	r6, r3
   2b928:	6126      	str	r6, [r4, #16]
   2b92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b92e:	2e00      	cmp	r6, #0
   2b930:	d1ed      	bne.n	2b90e <_scanf_chars+0x9e>
   2b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b936:	bf00      	nop
   2b938:	10000134 	.word	0x10000134

0002b93c <_scanf_i>:
   2b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b940:	460c      	mov	r4, r1
   2b942:	469a      	mov	sl, r3
   2b944:	4b72      	ldr	r3, [pc, #456]	; (2bb10 <_scanf_i+0x1d4>)
   2b946:	b087      	sub	sp, #28
   2b948:	4683      	mov	fp, r0
   2b94a:	4616      	mov	r6, r2
   2b94c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2b950:	ab03      	add	r3, sp, #12
   2b952:	68a7      	ldr	r7, [r4, #8]
   2b954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2b958:	4b6e      	ldr	r3, [pc, #440]	; (2bb14 <_scanf_i+0x1d8>)
   2b95a:	69a1      	ldr	r1, [r4, #24]
   2b95c:	4a6e      	ldr	r2, [pc, #440]	; (2bb18 <_scanf_i+0x1dc>)
   2b95e:	f104 091c 	add.w	r9, r4, #28
   2b962:	2903      	cmp	r1, #3
   2b964:	bf18      	it	ne
   2b966:	461a      	movne	r2, r3
   2b968:	1e7b      	subs	r3, r7, #1
   2b96a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   2b96e:	bf84      	itt	hi
   2b970:	f240 135d 	movwhi	r3, #349	; 0x15d
   2b974:	60a3      	strhi	r3, [r4, #8]
   2b976:	6823      	ldr	r3, [r4, #0]
   2b978:	bf88      	it	hi
   2b97a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2b97e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2b982:	6023      	str	r3, [r4, #0]
   2b984:	464b      	mov	r3, r9
   2b986:	9200      	str	r2, [sp, #0]
   2b988:	bf8c      	ite	hi
   2b98a:	197f      	addhi	r7, r7, r5
   2b98c:	2700      	movls	r7, #0
   2b98e:	f04f 0800 	mov.w	r8, #0
   2b992:	6831      	ldr	r1, [r6, #0]
   2b994:	9301      	str	r3, [sp, #4]
   2b996:	ab03      	add	r3, sp, #12
   2b998:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   2b99c:	2202      	movs	r2, #2
   2b99e:	7809      	ldrb	r1, [r1, #0]
   2b9a0:	f000 fa8a 	bl	2beb8 <memchr>
   2b9a4:	9b01      	ldr	r3, [sp, #4]
   2b9a6:	2800      	cmp	r0, #0
   2b9a8:	d033      	beq.n	2ba12 <_scanf_i+0xd6>
   2b9aa:	f1b8 0f01 	cmp.w	r8, #1
   2b9ae:	d10b      	bne.n	2b9c8 <_scanf_i+0x8c>
   2b9b0:	6862      	ldr	r2, [r4, #4]
   2b9b2:	b92a      	cbnz	r2, 2b9c0 <_scanf_i+0x84>
   2b9b4:	2208      	movs	r2, #8
   2b9b6:	6062      	str	r2, [r4, #4]
   2b9b8:	6822      	ldr	r2, [r4, #0]
   2b9ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2b9be:	6022      	str	r2, [r4, #0]
   2b9c0:	6822      	ldr	r2, [r4, #0]
   2b9c2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2b9c6:	e00c      	b.n	2b9e2 <_scanf_i+0xa6>
   2b9c8:	f1b8 0f02 	cmp.w	r8, #2
   2b9cc:	d10a      	bne.n	2b9e4 <_scanf_i+0xa8>
   2b9ce:	6822      	ldr	r2, [r4, #0]
   2b9d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2b9d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2b9d8:	d11b      	bne.n	2ba12 <_scanf_i+0xd6>
   2b9da:	2110      	movs	r1, #16
   2b9dc:	6061      	str	r1, [r4, #4]
   2b9de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2b9e2:	6022      	str	r2, [r4, #0]
   2b9e4:	68a2      	ldr	r2, [r4, #8]
   2b9e6:	1e51      	subs	r1, r2, #1
   2b9e8:	60a1      	str	r1, [r4, #8]
   2b9ea:	b192      	cbz	r2, 2ba12 <_scanf_i+0xd6>
   2b9ec:	6832      	ldr	r2, [r6, #0]
   2b9ee:	1c5d      	adds	r5, r3, #1
   2b9f0:	1c51      	adds	r1, r2, #1
   2b9f2:	6031      	str	r1, [r6, #0]
   2b9f4:	7812      	ldrb	r2, [r2, #0]
   2b9f6:	701a      	strb	r2, [r3, #0]
   2b9f8:	6873      	ldr	r3, [r6, #4]
   2b9fa:	3b01      	subs	r3, #1
   2b9fc:	2b00      	cmp	r3, #0
   2b9fe:	6073      	str	r3, [r6, #4]
   2ba00:	dc06      	bgt.n	2ba10 <_scanf_i+0xd4>
   2ba02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2ba06:	4631      	mov	r1, r6
   2ba08:	4658      	mov	r0, fp
   2ba0a:	4798      	blx	r3
   2ba0c:	2800      	cmp	r0, #0
   2ba0e:	d141      	bne.n	2ba94 <_scanf_i+0x158>
   2ba10:	462b      	mov	r3, r5
   2ba12:	f108 0801 	add.w	r8, r8, #1
   2ba16:	f1b8 0f03 	cmp.w	r8, #3
   2ba1a:	d1ba      	bne.n	2b992 <_scanf_i+0x56>
   2ba1c:	6862      	ldr	r2, [r4, #4]
   2ba1e:	b90a      	cbnz	r2, 2ba24 <_scanf_i+0xe8>
   2ba20:	220a      	movs	r2, #10
   2ba22:	6062      	str	r2, [r4, #4]
   2ba24:	6862      	ldr	r2, [r4, #4]
   2ba26:	493d      	ldr	r1, [pc, #244]	; (2bb1c <_scanf_i+0x1e0>)
   2ba28:	6960      	ldr	r0, [r4, #20]
   2ba2a:	1a89      	subs	r1, r1, r2
   2ba2c:	9301      	str	r3, [sp, #4]
   2ba2e:	f000 f889 	bl	2bb44 <__sccl>
   2ba32:	9b01      	ldr	r3, [sp, #4]
   2ba34:	f04f 0800 	mov.w	r8, #0
   2ba38:	461d      	mov	r5, r3
   2ba3a:	68a3      	ldr	r3, [r4, #8]
   2ba3c:	b363      	cbz	r3, 2ba98 <_scanf_i+0x15c>
   2ba3e:	6831      	ldr	r1, [r6, #0]
   2ba40:	6960      	ldr	r0, [r4, #20]
   2ba42:	780a      	ldrb	r2, [r1, #0]
   2ba44:	5c80      	ldrb	r0, [r0, r2]
   2ba46:	b338      	cbz	r0, 2ba98 <_scanf_i+0x15c>
   2ba48:	2a30      	cmp	r2, #48	; 0x30
   2ba4a:	6822      	ldr	r2, [r4, #0]
   2ba4c:	d108      	bne.n	2ba60 <_scanf_i+0x124>
   2ba4e:	0510      	lsls	r0, r2, #20
   2ba50:	d506      	bpl.n	2ba60 <_scanf_i+0x124>
   2ba52:	f108 0801 	add.w	r8, r8, #1
   2ba56:	b157      	cbz	r7, 2ba6e <_scanf_i+0x132>
   2ba58:	3301      	adds	r3, #1
   2ba5a:	3f01      	subs	r7, #1
   2ba5c:	60a3      	str	r3, [r4, #8]
   2ba5e:	e006      	b.n	2ba6e <_scanf_i+0x132>
   2ba60:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2ba64:	6022      	str	r2, [r4, #0]
   2ba66:	780b      	ldrb	r3, [r1, #0]
   2ba68:	3501      	adds	r5, #1
   2ba6a:	f805 3c01 	strb.w	r3, [r5, #-1]
   2ba6e:	6873      	ldr	r3, [r6, #4]
   2ba70:	3b01      	subs	r3, #1
   2ba72:	2b00      	cmp	r3, #0
   2ba74:	6073      	str	r3, [r6, #4]
   2ba76:	dd03      	ble.n	2ba80 <_scanf_i+0x144>
   2ba78:	6833      	ldr	r3, [r6, #0]
   2ba7a:	3301      	adds	r3, #1
   2ba7c:	6033      	str	r3, [r6, #0]
   2ba7e:	e005      	b.n	2ba8c <_scanf_i+0x150>
   2ba80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2ba84:	4631      	mov	r1, r6
   2ba86:	4658      	mov	r0, fp
   2ba88:	4798      	blx	r3
   2ba8a:	b928      	cbnz	r0, 2ba98 <_scanf_i+0x15c>
   2ba8c:	68a3      	ldr	r3, [r4, #8]
   2ba8e:	3b01      	subs	r3, #1
   2ba90:	60a3      	str	r3, [r4, #8]
   2ba92:	e7d2      	b.n	2ba3a <_scanf_i+0xfe>
   2ba94:	f04f 0800 	mov.w	r8, #0
   2ba98:	6823      	ldr	r3, [r4, #0]
   2ba9a:	05d9      	lsls	r1, r3, #23
   2ba9c:	d50c      	bpl.n	2bab8 <_scanf_i+0x17c>
   2ba9e:	454d      	cmp	r5, r9
   2baa0:	d908      	bls.n	2bab4 <_scanf_i+0x178>
   2baa2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2baa6:	1e6f      	subs	r7, r5, #1
   2baa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2baac:	4632      	mov	r2, r6
   2baae:	4658      	mov	r0, fp
   2bab0:	4798      	blx	r3
   2bab2:	463d      	mov	r5, r7
   2bab4:	454d      	cmp	r5, r9
   2bab6:	d027      	beq.n	2bb08 <_scanf_i+0x1cc>
   2bab8:	6822      	ldr	r2, [r4, #0]
   2baba:	f012 0210 	ands.w	r2, r2, #16
   2babe:	d11b      	bne.n	2baf8 <_scanf_i+0x1bc>
   2bac0:	702a      	strb	r2, [r5, #0]
   2bac2:	6863      	ldr	r3, [r4, #4]
   2bac4:	4649      	mov	r1, r9
   2bac6:	4658      	mov	r0, fp
   2bac8:	9e00      	ldr	r6, [sp, #0]
   2baca:	47b0      	blx	r6
   2bacc:	6822      	ldr	r2, [r4, #0]
   2bace:	f8da 3000 	ldr.w	r3, [sl]
   2bad2:	f012 0f20 	tst.w	r2, #32
   2bad6:	d107      	bne.n	2bae8 <_scanf_i+0x1ac>
   2bad8:	07d2      	lsls	r2, r2, #31
   2bada:	d505      	bpl.n	2bae8 <_scanf_i+0x1ac>
   2badc:	1d1a      	adds	r2, r3, #4
   2bade:	f8ca 2000 	str.w	r2, [sl]
   2bae2:	681b      	ldr	r3, [r3, #0]
   2bae4:	8018      	strh	r0, [r3, #0]
   2bae6:	e004      	b.n	2baf2 <_scanf_i+0x1b6>
   2bae8:	1d1a      	adds	r2, r3, #4
   2baea:	f8ca 2000 	str.w	r2, [sl]
   2baee:	681b      	ldr	r3, [r3, #0]
   2baf0:	6018      	str	r0, [r3, #0]
   2baf2:	68e3      	ldr	r3, [r4, #12]
   2baf4:	3301      	adds	r3, #1
   2baf6:	60e3      	str	r3, [r4, #12]
   2baf8:	6923      	ldr	r3, [r4, #16]
   2bafa:	ebc9 0505 	rsb	r5, r9, r5
   2bafe:	4445      	add	r5, r8
   2bb00:	441d      	add	r5, r3
   2bb02:	6125      	str	r5, [r4, #16]
   2bb04:	2000      	movs	r0, #0
   2bb06:	e000      	b.n	2bb0a <_scanf_i+0x1ce>
   2bb08:	2001      	movs	r0, #1
   2bb0a:	b007      	add	sp, #28
   2bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb10:	0002c698 	.word	0x0002c698
   2bb14:	0002bced 	.word	0x0002bced
   2bb18:	0002bbe1 	.word	0x0002bbe1
   2bb1c:	0002d0a7 	.word	0x0002d0a7

0002bb20 <_read_r>:
   2bb20:	b538      	push	{r3, r4, r5, lr}
   2bb22:	4c07      	ldr	r4, [pc, #28]	; (2bb40 <_read_r+0x20>)
   2bb24:	4605      	mov	r5, r0
   2bb26:	4608      	mov	r0, r1
   2bb28:	4611      	mov	r1, r2
   2bb2a:	2200      	movs	r2, #0
   2bb2c:	6022      	str	r2, [r4, #0]
   2bb2e:	461a      	mov	r2, r3
   2bb30:	f000 f9fa 	bl	2bf28 <_read>
   2bb34:	1c43      	adds	r3, r0, #1
   2bb36:	d102      	bne.n	2bb3e <_read_r+0x1e>
   2bb38:	6823      	ldr	r3, [r4, #0]
   2bb3a:	b103      	cbz	r3, 2bb3e <_read_r+0x1e>
   2bb3c:	602b      	str	r3, [r5, #0]
   2bb3e:	bd38      	pop	{r3, r4, r5, pc}
   2bb40:	10000844 	.word	0x10000844

0002bb44 <__sccl>:
   2bb44:	b570      	push	{r4, r5, r6, lr}
   2bb46:	780b      	ldrb	r3, [r1, #0]
   2bb48:	1e44      	subs	r4, r0, #1
   2bb4a:	2b5e      	cmp	r3, #94	; 0x5e
   2bb4c:	bf13      	iteet	ne
   2bb4e:	1c4a      	addne	r2, r1, #1
   2bb50:	1c8a      	addeq	r2, r1, #2
   2bb52:	784b      	ldrbeq	r3, [r1, #1]
   2bb54:	2100      	movne	r1, #0
   2bb56:	bf08      	it	eq
   2bb58:	2101      	moveq	r1, #1
   2bb5a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   2bb5e:	f804 1f01 	strb.w	r1, [r4, #1]!
   2bb62:	42ac      	cmp	r4, r5
   2bb64:	d1fb      	bne.n	2bb5e <__sccl+0x1a>
   2bb66:	b90b      	cbnz	r3, 2bb6c <__sccl+0x28>
   2bb68:	1e50      	subs	r0, r2, #1
   2bb6a:	bd70      	pop	{r4, r5, r6, pc}
   2bb6c:	f081 0401 	eor.w	r4, r1, #1
   2bb70:	4611      	mov	r1, r2
   2bb72:	54c4      	strb	r4, [r0, r3]
   2bb74:	780d      	ldrb	r5, [r1, #0]
   2bb76:	1c4a      	adds	r2, r1, #1
   2bb78:	2d2d      	cmp	r5, #45	; 0x2d
   2bb7a:	d006      	beq.n	2bb8a <__sccl+0x46>
   2bb7c:	2d5d      	cmp	r5, #93	; 0x5d
   2bb7e:	d00f      	beq.n	2bba0 <__sccl+0x5c>
   2bb80:	b10d      	cbz	r5, 2bb86 <__sccl+0x42>
   2bb82:	462b      	mov	r3, r5
   2bb84:	e7f4      	b.n	2bb70 <__sccl+0x2c>
   2bb86:	4608      	mov	r0, r1
   2bb88:	bd70      	pop	{r4, r5, r6, pc}
   2bb8a:	784e      	ldrb	r6, [r1, #1]
   2bb8c:	2e5d      	cmp	r6, #93	; 0x5d
   2bb8e:	d0f8      	beq.n	2bb82 <__sccl+0x3e>
   2bb90:	42b3      	cmp	r3, r6
   2bb92:	dcf6      	bgt.n	2bb82 <__sccl+0x3e>
   2bb94:	3102      	adds	r1, #2
   2bb96:	3301      	adds	r3, #1
   2bb98:	429e      	cmp	r6, r3
   2bb9a:	54c4      	strb	r4, [r0, r3]
   2bb9c:	dcfb      	bgt.n	2bb96 <__sccl+0x52>
   2bb9e:	e7e9      	b.n	2bb74 <__sccl+0x30>
   2bba0:	4610      	mov	r0, r2
   2bba2:	bd70      	pop	{r4, r5, r6, pc}

0002bba4 <strcpy>:
   2bba4:	4603      	mov	r3, r0
   2bba6:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bbaa:	f803 2b01 	strb.w	r2, [r3], #1
   2bbae:	2a00      	cmp	r2, #0
   2bbb0:	d1f9      	bne.n	2bba6 <strcpy+0x2>
   2bbb2:	4770      	bx	lr

0002bbb4 <strncmp>:
   2bbb4:	b530      	push	{r4, r5, lr}
   2bbb6:	b182      	cbz	r2, 2bbda <strncmp+0x26>
   2bbb8:	1e45      	subs	r5, r0, #1
   2bbba:	3901      	subs	r1, #1
   2bbbc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2bbc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bbc4:	42a3      	cmp	r3, r4
   2bbc6:	d106      	bne.n	2bbd6 <strncmp+0x22>
   2bbc8:	43ec      	mvns	r4, r5
   2bbca:	4414      	add	r4, r2
   2bbcc:	42e0      	cmn	r0, r4
   2bbce:	d001      	beq.n	2bbd4 <strncmp+0x20>
   2bbd0:	2b00      	cmp	r3, #0
   2bbd2:	d1f3      	bne.n	2bbbc <strncmp+0x8>
   2bbd4:	461c      	mov	r4, r3
   2bbd6:	1b18      	subs	r0, r3, r4
   2bbd8:	bd30      	pop	{r4, r5, pc}
   2bbda:	4610      	mov	r0, r2
   2bbdc:	bd30      	pop	{r4, r5, pc}
	...

0002bbe0 <_strtol_r>:
   2bbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bbe4:	460f      	mov	r7, r1
   2bbe6:	4680      	mov	r8, r0
   2bbe8:	483f      	ldr	r0, [pc, #252]	; (2bce8 <_strtol_r+0x108>)
   2bbea:	f8d0 9000 	ldr.w	r9, [r0]
   2bbee:	463d      	mov	r5, r7
   2bbf0:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bbf4:	eb09 0004 	add.w	r0, r9, r4
   2bbf8:	7840      	ldrb	r0, [r0, #1]
   2bbfa:	f000 0008 	and.w	r0, r0, #8
   2bbfe:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   2bc02:	b108      	cbz	r0, 2bc08 <_strtol_r+0x28>
   2bc04:	462f      	mov	r7, r5
   2bc06:	e7f2      	b.n	2bbee <_strtol_r+0xe>
   2bc08:	2c2d      	cmp	r4, #45	; 0x2d
   2bc0a:	d103      	bne.n	2bc14 <_strtol_r+0x34>
   2bc0c:	1cbd      	adds	r5, r7, #2
   2bc0e:	787c      	ldrb	r4, [r7, #1]
   2bc10:	2601      	movs	r6, #1
   2bc12:	e003      	b.n	2bc1c <_strtol_r+0x3c>
   2bc14:	2c2b      	cmp	r4, #43	; 0x2b
   2bc16:	bf04      	itt	eq
   2bc18:	787c      	ldrbeq	r4, [r7, #1]
   2bc1a:	1cbd      	addeq	r5, r7, #2
   2bc1c:	b113      	cbz	r3, 2bc24 <_strtol_r+0x44>
   2bc1e:	2b10      	cmp	r3, #16
   2bc20:	d10a      	bne.n	2bc38 <_strtol_r+0x58>
   2bc22:	e05b      	b.n	2bcdc <_strtol_r+0xfc>
   2bc24:	2c30      	cmp	r4, #48	; 0x30
   2bc26:	d157      	bne.n	2bcd8 <_strtol_r+0xf8>
   2bc28:	7828      	ldrb	r0, [r5, #0]
   2bc2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2bc2e:	2858      	cmp	r0, #88	; 0x58
   2bc30:	d14d      	bne.n	2bcce <_strtol_r+0xee>
   2bc32:	786c      	ldrb	r4, [r5, #1]
   2bc34:	2310      	movs	r3, #16
   2bc36:	3502      	adds	r5, #2
   2bc38:	2e00      	cmp	r6, #0
   2bc3a:	bf14      	ite	ne
   2bc3c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   2bc40:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   2bc44:	fbbc faf3 	udiv	sl, ip, r3
   2bc48:	2700      	movs	r7, #0
   2bc4a:	4638      	mov	r0, r7
   2bc4c:	fb03 cc1a 	mls	ip, r3, sl, ip
   2bc50:	eb09 0e04 	add.w	lr, r9, r4
   2bc54:	f89e e001 	ldrb.w	lr, [lr, #1]
   2bc58:	f01e 0f04 	tst.w	lr, #4
   2bc5c:	d001      	beq.n	2bc62 <_strtol_r+0x82>
   2bc5e:	3c30      	subs	r4, #48	; 0x30
   2bc60:	e00b      	b.n	2bc7a <_strtol_r+0x9a>
   2bc62:	f01e 0e03 	ands.w	lr, lr, #3
   2bc66:	d01b      	beq.n	2bca0 <_strtol_r+0xc0>
   2bc68:	f1be 0f01 	cmp.w	lr, #1
   2bc6c:	bf0c      	ite	eq
   2bc6e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   2bc72:	f04f 0e57 	movne.w	lr, #87	; 0x57
   2bc76:	ebce 0404 	rsb	r4, lr, r4
   2bc7a:	42a3      	cmp	r3, r4
   2bc7c:	dd10      	ble.n	2bca0 <_strtol_r+0xc0>
   2bc7e:	f1b7 3fff 	cmp.w	r7, #4294967295
   2bc82:	d00a      	beq.n	2bc9a <_strtol_r+0xba>
   2bc84:	4550      	cmp	r0, sl
   2bc86:	d806      	bhi.n	2bc96 <_strtol_r+0xb6>
   2bc88:	d101      	bne.n	2bc8e <_strtol_r+0xae>
   2bc8a:	4564      	cmp	r4, ip
   2bc8c:	dc03      	bgt.n	2bc96 <_strtol_r+0xb6>
   2bc8e:	fb03 4000 	mla	r0, r3, r0, r4
   2bc92:	2701      	movs	r7, #1
   2bc94:	e001      	b.n	2bc9a <_strtol_r+0xba>
   2bc96:	f04f 37ff 	mov.w	r7, #4294967295
   2bc9a:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bc9e:	e7d7      	b.n	2bc50 <_strtol_r+0x70>
   2bca0:	1c7b      	adds	r3, r7, #1
   2bca2:	d10c      	bne.n	2bcbe <_strtol_r+0xde>
   2bca4:	2e00      	cmp	r6, #0
   2bca6:	f04f 0322 	mov.w	r3, #34	; 0x22
   2bcaa:	bf14      	ite	ne
   2bcac:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   2bcb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   2bcb4:	f8c8 3000 	str.w	r3, [r8]
   2bcb8:	b92a      	cbnz	r2, 2bcc6 <_strtol_r+0xe6>
   2bcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bcbe:	b106      	cbz	r6, 2bcc2 <_strtol_r+0xe2>
   2bcc0:	4240      	negs	r0, r0
   2bcc2:	b172      	cbz	r2, 2bce2 <_strtol_r+0x102>
   2bcc4:	b107      	cbz	r7, 2bcc8 <_strtol_r+0xe8>
   2bcc6:	1e69      	subs	r1, r5, #1
   2bcc8:	6011      	str	r1, [r2, #0]
   2bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bcce:	2430      	movs	r4, #48	; 0x30
   2bcd0:	2b00      	cmp	r3, #0
   2bcd2:	d1b1      	bne.n	2bc38 <_strtol_r+0x58>
   2bcd4:	2308      	movs	r3, #8
   2bcd6:	e7af      	b.n	2bc38 <_strtol_r+0x58>
   2bcd8:	230a      	movs	r3, #10
   2bcda:	e7ad      	b.n	2bc38 <_strtol_r+0x58>
   2bcdc:	2c30      	cmp	r4, #48	; 0x30
   2bcde:	d0a3      	beq.n	2bc28 <_strtol_r+0x48>
   2bce0:	e7aa      	b.n	2bc38 <_strtol_r+0x58>
   2bce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bce6:	bf00      	nop
   2bce8:	10000134 	.word	0x10000134

0002bcec <_strtoul_r>:
   2bcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bcf0:	460e      	mov	r6, r1
   2bcf2:	4680      	mov	r8, r0
   2bcf4:	483b      	ldr	r0, [pc, #236]	; (2bde4 <_strtoul_r+0xf8>)
   2bcf6:	f8d0 9000 	ldr.w	r9, [r0]
   2bcfa:	4635      	mov	r5, r6
   2bcfc:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bd00:	eb09 0004 	add.w	r0, r9, r4
   2bd04:	7840      	ldrb	r0, [r0, #1]
   2bd06:	f000 0008 	and.w	r0, r0, #8
   2bd0a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   2bd0e:	b108      	cbz	r0, 2bd14 <_strtoul_r+0x28>
   2bd10:	462e      	mov	r6, r5
   2bd12:	e7f2      	b.n	2bcfa <_strtoul_r+0xe>
   2bd14:	2c2d      	cmp	r4, #45	; 0x2d
   2bd16:	d103      	bne.n	2bd20 <_strtoul_r+0x34>
   2bd18:	1cb5      	adds	r5, r6, #2
   2bd1a:	7874      	ldrb	r4, [r6, #1]
   2bd1c:	2701      	movs	r7, #1
   2bd1e:	e003      	b.n	2bd28 <_strtoul_r+0x3c>
   2bd20:	2c2b      	cmp	r4, #43	; 0x2b
   2bd22:	bf04      	itt	eq
   2bd24:	7874      	ldrbeq	r4, [r6, #1]
   2bd26:	1cb5      	addeq	r5, r6, #2
   2bd28:	b113      	cbz	r3, 2bd30 <_strtoul_r+0x44>
   2bd2a:	2b10      	cmp	r3, #16
   2bd2c:	d10a      	bne.n	2bd44 <_strtoul_r+0x58>
   2bd2e:	e053      	b.n	2bdd8 <_strtoul_r+0xec>
   2bd30:	2c30      	cmp	r4, #48	; 0x30
   2bd32:	d14f      	bne.n	2bdd4 <_strtoul_r+0xe8>
   2bd34:	7828      	ldrb	r0, [r5, #0]
   2bd36:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2bd3a:	2858      	cmp	r0, #88	; 0x58
   2bd3c:	d145      	bne.n	2bdca <_strtoul_r+0xde>
   2bd3e:	786c      	ldrb	r4, [r5, #1]
   2bd40:	2310      	movs	r3, #16
   2bd42:	3502      	adds	r5, #2
   2bd44:	f04f 3cff 	mov.w	ip, #4294967295
   2bd48:	fbbc fcf3 	udiv	ip, ip, r3
   2bd4c:	fb03 fa0c 	mul.w	sl, r3, ip
   2bd50:	2600      	movs	r6, #0
   2bd52:	ea6f 0a0a 	mvn.w	sl, sl
   2bd56:	4630      	mov	r0, r6
   2bd58:	eb09 0e04 	add.w	lr, r9, r4
   2bd5c:	f89e e001 	ldrb.w	lr, [lr, #1]
   2bd60:	f01e 0f04 	tst.w	lr, #4
   2bd64:	d001      	beq.n	2bd6a <_strtoul_r+0x7e>
   2bd66:	3c30      	subs	r4, #48	; 0x30
   2bd68:	e00b      	b.n	2bd82 <_strtoul_r+0x96>
   2bd6a:	f01e 0e03 	ands.w	lr, lr, #3
   2bd6e:	d01a      	beq.n	2bda6 <_strtoul_r+0xba>
   2bd70:	f1be 0f01 	cmp.w	lr, #1
   2bd74:	bf0c      	ite	eq
   2bd76:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   2bd7a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   2bd7e:	ebce 0404 	rsb	r4, lr, r4
   2bd82:	42a3      	cmp	r3, r4
   2bd84:	dd0f      	ble.n	2bda6 <_strtoul_r+0xba>
   2bd86:	2e00      	cmp	r6, #0
   2bd88:	db08      	blt.n	2bd9c <_strtoul_r+0xb0>
   2bd8a:	4560      	cmp	r0, ip
   2bd8c:	d806      	bhi.n	2bd9c <_strtoul_r+0xb0>
   2bd8e:	d101      	bne.n	2bd94 <_strtoul_r+0xa8>
   2bd90:	4554      	cmp	r4, sl
   2bd92:	dc03      	bgt.n	2bd9c <_strtoul_r+0xb0>
   2bd94:	fb03 4000 	mla	r0, r3, r0, r4
   2bd98:	2601      	movs	r6, #1
   2bd9a:	e001      	b.n	2bda0 <_strtoul_r+0xb4>
   2bd9c:	f04f 36ff 	mov.w	r6, #4294967295
   2bda0:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bda4:	e7d8      	b.n	2bd58 <_strtoul_r+0x6c>
   2bda6:	2e00      	cmp	r6, #0
   2bda8:	da07      	bge.n	2bdba <_strtoul_r+0xce>
   2bdaa:	2322      	movs	r3, #34	; 0x22
   2bdac:	f8c8 3000 	str.w	r3, [r8]
   2bdb0:	f04f 30ff 	mov.w	r0, #4294967295
   2bdb4:	b92a      	cbnz	r2, 2bdc2 <_strtoul_r+0xd6>
   2bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bdba:	b107      	cbz	r7, 2bdbe <_strtoul_r+0xd2>
   2bdbc:	4240      	negs	r0, r0
   2bdbe:	b172      	cbz	r2, 2bdde <_strtoul_r+0xf2>
   2bdc0:	b106      	cbz	r6, 2bdc4 <_strtoul_r+0xd8>
   2bdc2:	1e69      	subs	r1, r5, #1
   2bdc4:	6011      	str	r1, [r2, #0]
   2bdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bdca:	2430      	movs	r4, #48	; 0x30
   2bdcc:	2b00      	cmp	r3, #0
   2bdce:	d1b9      	bne.n	2bd44 <_strtoul_r+0x58>
   2bdd0:	2308      	movs	r3, #8
   2bdd2:	e7b7      	b.n	2bd44 <_strtoul_r+0x58>
   2bdd4:	230a      	movs	r3, #10
   2bdd6:	e7b5      	b.n	2bd44 <_strtoul_r+0x58>
   2bdd8:	2c30      	cmp	r4, #48	; 0x30
   2bdda:	d0ab      	beq.n	2bd34 <_strtoul_r+0x48>
   2bddc:	e7b2      	b.n	2bd44 <_strtoul_r+0x58>
   2bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bde2:	bf00      	nop
   2bde4:	10000134 	.word	0x10000134

0002bde8 <strtoul>:
   2bde8:	4613      	mov	r3, r2
   2bdea:	460a      	mov	r2, r1
   2bdec:	4601      	mov	r1, r0
   2bdee:	4802      	ldr	r0, [pc, #8]	; (2bdf8 <strtoul+0x10>)
   2bdf0:	6800      	ldr	r0, [r0, #0]
   2bdf2:	f7ff bf7b 	b.w	2bcec <_strtoul_r>
   2bdf6:	bf00      	nop
   2bdf8:	100000e8 	.word	0x100000e8

0002bdfc <__submore>:
   2bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2be00:	460c      	mov	r4, r1
   2be02:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2be04:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2be08:	4299      	cmp	r1, r3
   2be0a:	d11a      	bne.n	2be42 <__submore+0x46>
   2be0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2be10:	f7fe f90e 	bl	2a030 <_malloc_r>
   2be14:	b918      	cbnz	r0, 2be1e <__submore+0x22>
   2be16:	f04f 30ff 	mov.w	r0, #4294967295
   2be1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2be1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2be22:	63a3      	str	r3, [r4, #56]	; 0x38
   2be24:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2be28:	6360      	str	r0, [r4, #52]	; 0x34
   2be2a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   2be2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2be32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2be36:	7043      	strb	r3, [r0, #1]
   2be38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2be3c:	7003      	strb	r3, [r0, #0]
   2be3e:	6020      	str	r0, [r4, #0]
   2be40:	e012      	b.n	2be68 <__submore+0x6c>
   2be42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2be44:	0077      	lsls	r7, r6, #1
   2be46:	463a      	mov	r2, r7
   2be48:	f7ff f852 	bl	2aef0 <_realloc_r>
   2be4c:	4605      	mov	r5, r0
   2be4e:	2800      	cmp	r0, #0
   2be50:	d0e1      	beq.n	2be16 <__submore+0x1a>
   2be52:	eb00 0806 	add.w	r8, r0, r6
   2be56:	4601      	mov	r1, r0
   2be58:	4632      	mov	r2, r6
   2be5a:	4640      	mov	r0, r8
   2be5c:	f7fd fe11 	bl	29a82 <memcpy>
   2be60:	f8c4 8000 	str.w	r8, [r4]
   2be64:	6365      	str	r5, [r4, #52]	; 0x34
   2be66:	63a7      	str	r7, [r4, #56]	; 0x38
   2be68:	2000      	movs	r0, #0
   2be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002be6e <__env_lock>:
   2be6e:	4770      	bx	lr

0002be70 <__env_unlock>:
   2be70:	4770      	bx	lr
	...

0002be74 <_fstat_r>:
   2be74:	b538      	push	{r3, r4, r5, lr}
   2be76:	4c07      	ldr	r4, [pc, #28]	; (2be94 <_fstat_r+0x20>)
   2be78:	2300      	movs	r3, #0
   2be7a:	4605      	mov	r5, r0
   2be7c:	4608      	mov	r0, r1
   2be7e:	4611      	mov	r1, r2
   2be80:	6023      	str	r3, [r4, #0]
   2be82:	f000 f839 	bl	2bef8 <_fstat>
   2be86:	1c43      	adds	r3, r0, #1
   2be88:	d102      	bne.n	2be90 <_fstat_r+0x1c>
   2be8a:	6823      	ldr	r3, [r4, #0]
   2be8c:	b103      	cbz	r3, 2be90 <_fstat_r+0x1c>
   2be8e:	602b      	str	r3, [r5, #0]
   2be90:	bd38      	pop	{r3, r4, r5, pc}
   2be92:	bf00      	nop
   2be94:	10000844 	.word	0x10000844

0002be98 <_isatty_r>:
   2be98:	b538      	push	{r3, r4, r5, lr}
   2be9a:	4c06      	ldr	r4, [pc, #24]	; (2beb4 <_isatty_r+0x1c>)
   2be9c:	2300      	movs	r3, #0
   2be9e:	4605      	mov	r5, r0
   2bea0:	4608      	mov	r0, r1
   2bea2:	6023      	str	r3, [r4, #0]
   2bea4:	f000 f830 	bl	2bf08 <_isatty>
   2bea8:	1c43      	adds	r3, r0, #1
   2beaa:	d102      	bne.n	2beb2 <_isatty_r+0x1a>
   2beac:	6823      	ldr	r3, [r4, #0]
   2beae:	b103      	cbz	r3, 2beb2 <_isatty_r+0x1a>
   2beb0:	602b      	str	r3, [r5, #0]
   2beb2:	bd38      	pop	{r3, r4, r5, pc}
   2beb4:	10000844 	.word	0x10000844

0002beb8 <memchr>:
   2beb8:	b510      	push	{r4, lr}
   2beba:	b2c9      	uxtb	r1, r1
   2bebc:	4402      	add	r2, r0
   2bebe:	4290      	cmp	r0, r2
   2bec0:	4603      	mov	r3, r0
   2bec2:	d005      	beq.n	2bed0 <memchr+0x18>
   2bec4:	781c      	ldrb	r4, [r3, #0]
   2bec6:	3001      	adds	r0, #1
   2bec8:	428c      	cmp	r4, r1
   2beca:	d1f8      	bne.n	2bebe <memchr+0x6>
   2becc:	4618      	mov	r0, r3
   2bece:	bd10      	pop	{r4, pc}
   2bed0:	2000      	movs	r0, #0
   2bed2:	bd10      	pop	{r4, pc}

0002bed4 <_malloc_usable_size_r>:
   2bed4:	f851 0c04 	ldr.w	r0, [r1, #-4]
   2bed8:	2800      	cmp	r0, #0
   2beda:	bfbe      	ittt	lt
   2bedc:	1809      	addlt	r1, r1, r0
   2bede:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
   2bee2:	18c0      	addlt	r0, r0, r3
   2bee4:	3804      	subs	r0, #4
   2bee6:	4770      	bx	lr

0002bee8 <_close>:
   2bee8:	4b02      	ldr	r3, [pc, #8]	; (2bef4 <_close+0xc>)
   2beea:	2258      	movs	r2, #88	; 0x58
   2beec:	601a      	str	r2, [r3, #0]
   2beee:	f04f 30ff 	mov.w	r0, #4294967295
   2bef2:	4770      	bx	lr
   2bef4:	10000844 	.word	0x10000844

0002bef8 <_fstat>:
   2bef8:	4b02      	ldr	r3, [pc, #8]	; (2bf04 <_fstat+0xc>)
   2befa:	2258      	movs	r2, #88	; 0x58
   2befc:	601a      	str	r2, [r3, #0]
   2befe:	f04f 30ff 	mov.w	r0, #4294967295
   2bf02:	4770      	bx	lr
   2bf04:	10000844 	.word	0x10000844

0002bf08 <_isatty>:
   2bf08:	4b02      	ldr	r3, [pc, #8]	; (2bf14 <_isatty+0xc>)
   2bf0a:	2258      	movs	r2, #88	; 0x58
   2bf0c:	601a      	str	r2, [r3, #0]
   2bf0e:	2000      	movs	r0, #0
   2bf10:	4770      	bx	lr
   2bf12:	bf00      	nop
   2bf14:	10000844 	.word	0x10000844

0002bf18 <_lseek>:
   2bf18:	4b02      	ldr	r3, [pc, #8]	; (2bf24 <_lseek+0xc>)
   2bf1a:	2258      	movs	r2, #88	; 0x58
   2bf1c:	601a      	str	r2, [r3, #0]
   2bf1e:	f04f 30ff 	mov.w	r0, #4294967295
   2bf22:	4770      	bx	lr
   2bf24:	10000844 	.word	0x10000844

0002bf28 <_read>:
   2bf28:	4b02      	ldr	r3, [pc, #8]	; (2bf34 <_read+0xc>)
   2bf2a:	2258      	movs	r2, #88	; 0x58
   2bf2c:	601a      	str	r2, [r3, #0]
   2bf2e:	f04f 30ff 	mov.w	r0, #4294967295
   2bf32:	4770      	bx	lr
   2bf34:	10000844 	.word	0x10000844

0002bf38 <_sbrk>:
   2bf38:	4b04      	ldr	r3, [pc, #16]	; (2bf4c <_sbrk+0x14>)
   2bf3a:	4602      	mov	r2, r0
   2bf3c:	6819      	ldr	r1, [r3, #0]
   2bf3e:	b909      	cbnz	r1, 2bf44 <_sbrk+0xc>
   2bf40:	4903      	ldr	r1, [pc, #12]	; (2bf50 <_sbrk+0x18>)
   2bf42:	6019      	str	r1, [r3, #0]
   2bf44:	6818      	ldr	r0, [r3, #0]
   2bf46:	4402      	add	r2, r0
   2bf48:	601a      	str	r2, [r3, #0]
   2bf4a:	4770      	bx	lr
   2bf4c:	1000060c 	.word	0x1000060c
   2bf50:	10000848 	.word	0x10000848

0002bf54 <_write>:
   2bf54:	4b02      	ldr	r3, [pc, #8]	; (2bf60 <_write+0xc>)
   2bf56:	2258      	movs	r2, #88	; 0x58
   2bf58:	601a      	str	r2, [r3, #0]
   2bf5a:	f04f 30ff 	mov.w	r0, #4294967295
   2bf5e:	4770      	bx	lr
   2bf60:	10000844 	.word	0x10000844

0002bf64 <_init>:
   2bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf66:	bf00      	nop
   2bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bf6a:	bc08      	pop	{r3}
   2bf6c:	469e      	mov	lr, r3
   2bf6e:	4770      	bx	lr

0002bf70 <_fini>:
   2bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf72:	bf00      	nop
   2bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bf76:	bc08      	pop	{r3}
   2bf78:	469e      	mov	lr, r3
   2bf7a:	4770      	bx	lr
